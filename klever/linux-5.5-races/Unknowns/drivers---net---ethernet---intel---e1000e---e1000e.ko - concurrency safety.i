/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ich8lan.i.aux"
struct task_struct;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_9 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_9 key ;
} __attribute__((__aligned__(8)));
#line 59 
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
struct system_device_crosststamp {
   ktime_t device ;
   ktime_t sys_realtime ;
   ktime_t sys_monoraw ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
struct workqueue_struct;
#line 915 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
struct pci_dev;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
struct notifier_block;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
struct resource;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
struct __anonstruct_nodemask_t_168 {
   unsigned long bits[16U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
typedef struct __anonstruct_nodemask_t_168 nodemask_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 194 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 212 
struct ldt_struct;
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct __anonstruct_mm_context_t_169 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
typedef struct __anonstruct_mm_context_t_169 mm_context_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_184 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_185 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_183 {
   struct __anonstruct_184 __anonCompField___anonunion_183_29 ;
   struct __anonstruct_185 __anonCompField___anonunion_183_30 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_183 __anonCompField_uprobe_task_31 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct address_space;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_187 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_188 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_191 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_190 {
   struct list_head slab_list ;
   struct __anonstruct_191 __anonCompField___anonunion_190_34 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_193 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_192 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_193 __anonCompField___anonunion_192_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_189 {
   union __anonunion_190 __anonCompField___anonstruct_189_35 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_192 __anonCompField___anonstruct_189_37 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_194 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_195 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_197 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_196 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_197 __anonCompField___anonstruct_196_41 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_198 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_186 {
   struct __anonstruct_187 __anonCompField___anonunion_186_32 ;
   struct __anonstruct_188 __anonCompField___anonunion_186_33 ;
   struct __anonstruct_189 __anonCompField___anonunion_186_38 ;
   struct __anonstruct_194 __anonCompField___anonunion_186_39 ;
   struct __anonstruct_195 __anonCompField___anonunion_186_40 ;
   struct __anonstruct_196 __anonCompField___anonunion_186_42 ;
   struct __anonstruct_198 __anonCompField___anonunion_186_43 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_199 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_186 __anonCompField_page_44 ;
   union __anonunion_199 __anonCompField_page_45 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278 
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_200 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_200 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_201 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_201 __anonCompField_mm_struct_46 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_252 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_252 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_253 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_253 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct vmem_altmap;
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sched.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_head {
   struct list_head node_list ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_280 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_280 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_281 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_282 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_283 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_284 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_287 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_288 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_286 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_287 _addr_bnd ;
   struct __anonstruct__addr_pkey_288 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_285 {
   void *_addr ;
   union __anonunion_286 __anonCompField___anonstruct__sigfault_285_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_289 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_290 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_281 _kill ;
   struct __anonstruct__timer_282 _timer ;
   struct __anonstruct__rt_283 _rt ;
   struct __anonstruct__sigchld_284 _sigchld ;
   struct __anonstruct__sigfault_285 _sigfault ;
   struct __anonstruct__sigpoll_289 _sigpoll ;
   struct __anonstruct__sigsys_290 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_295 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_295 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_300 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_300 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_302 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_302 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_381 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_383 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_382 {
   unsigned long nr_segs ;
   struct __anonstruct_383 __anonCompField___anonunion_382_54 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_381 __anonCompField_iov_iter_53 ;
   union __anonunion_382 __anonCompField_iov_iter_55 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_386 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_386 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_387 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_387 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_388 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_388 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_389 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_389 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_390 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_390 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_391 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_391 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_392 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_392 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_393 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_393 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_394 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_395 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_394 ifr_ifrn ;
   union __anonunion_ifr_ifru_395 ifr_ifru ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_410 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_409 {
   struct __anonstruct_410 __anonCompField___anonunion_409_58 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_409 __anonCompField_lockref_59 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_412 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_411 {
   struct __anonstruct_412 __anonCompField___anonunion_411_60 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_411 __anonCompField_qstr_61 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_413 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_414 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_413 __anonCompField_dentry_62 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_414 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_432 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_432 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_433 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_434 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_433 __anonCompField_io_cq_65 ;
   union __anonunion_434 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 290 
struct kobject;
#line 292 
struct kstatfs;
#line 293 
struct swap_info_struct;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_context;
#line 299 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_435 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_435 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_436 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_436 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_443 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628 
struct cdev;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_444 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_441 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_442 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_443 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_444 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_445 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_445 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_447 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_446 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_447 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_446 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_495 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_495 __anonCompField_kernfs_node_73 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_498 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_498 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_499 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_499 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_521 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_520 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_521 __anonCompField___anonstruct_520_86 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_519 {
   struct __anonstruct_520 __anonCompField___anonunion_519_87 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_522 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_523 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_525 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_524 {
   struct __anonstruct_525 __anonCompField___anonunion_524_91 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_527 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_526 {
   __wsum csum ;
   struct __anonstruct_527 __anonCompField___anonunion_526_93 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_528 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_529 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_530 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_519 __anonCompField_sk_buff_88 ;
   union __anonunion_522 __anonCompField_sk_buff_89 ;
   union __anonunion_523 __anonCompField_sk_buff_90 ;
   char cb[48U] ;
   union __anonunion_524 __anonCompField_sk_buff_92 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_526 __anonCompField_sk_buff_94 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_528 __anonCompField_sk_buff_95 ;
   __u32 secmark ;
   union __anonunion_529 __anonCompField_sk_buff_96 ;
   union __anonunion_530 __anonCompField_sk_buff_97 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14517 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14518 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14517 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14518 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 4917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_688 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_688 __anonCompField_pci_dev_160 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
struct cyclecounter {
   u64 (*read)(struct cyclecounter *) ;
   u64 mask ;
   u32 mult ;
   u32 shift ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
struct timecounter {
   struct cyclecounter *cc ;
   u64 cycle_last ;
   u64 nsec ;
   u64 mask ;
   u64 frac ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/net_tstamp.h"
struct hwtstamp_config {
   int flags ;
   int tx_type ;
   int rx_filter ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_clock_time {
   __s64 sec ;
   __u32 nsec ;
   __u32 reserved ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_extts_request {
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[2U] ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_perout_request {
   struct ptp_clock_time start ;
   struct ptp_clock_time period ;
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[4U] ;
};
#line 138 
enum ptp_pin_function {
    PTP_PF_NONE = 0,
    PTP_PF_EXTTS = 1,
    PTP_PF_PEROUT = 2,
    PTP_PF_PHYSYNC = 3
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_pin_desc {
   char name[64U] ;
   unsigned int index ;
   unsigned int func ;
   unsigned int chan ;
   unsigned int rsv[5U] ;
};
#line 205 
enum ldv_15753 {
    PTP_CLK_REQ_EXTTS = 0,
    PTP_CLK_REQ_PEROUT = 1,
    PTP_CLK_REQ_PPS = 2
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
union __anonunion_699 {
   struct ptp_extts_request extts ;
   struct ptp_perout_request perout ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_request {
   enum ldv_15753 type ;
   union __anonunion_699 __anonCompField_ptp_clock_request_161 ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_info {
   struct module *owner ;
   char name[16U] ;
   s32 max_adj ;
   int n_alarm ;
   int n_ext_ts ;
   int n_per_out ;
   int n_pins ;
   int pps ;
   struct ptp_pin_desc *pin_config ;
   int (*adjfine)(struct ptp_clock_info *, long ) ;
   int (*adjfreq)(struct ptp_clock_info *, s32 ) ;
   int (*adjtime)(struct ptp_clock_info *, s64 ) ;
   int (*gettime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*gettimex64)(struct ptp_clock_info *, struct timespec64 *, struct ptp_system_timestamp *) ;
   int (*getcrosststamp)(struct ptp_clock_info *, struct system_device_crosststamp *) ;
   int (*settime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*enable)(struct ptp_clock_info *, struct ptp_clock_request *, int ) ;
   int (*verify)(struct ptp_clock_info *, unsigned int , enum ptp_pin_function , unsigned int ) ;
   long (*do_aux_work)(struct ptp_clock_info *) ;
};
#line 144 
struct ptp_clock;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
   struct delayed_work work ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct pm_qos_flags_request {
   struct list_head node ;
   s32 flags ;
};
#line 53 
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2,
    PM_QOS_SUM = 3
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   s32 no_constraint_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct pm_qos_flags {
   struct list_head list ;
   s32 effective_flags ;
};
#line 79 
enum freq_qos_req_type {
    FREQ_QOS_MIN = 1,
    FREQ_QOS_MAX = 2
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct freq_constraints {
   struct pm_qos_constraints min_freq ;
   struct blocking_notifier_head min_freq_notifiers ;
   struct pm_qos_constraints max_freq ;
   struct blocking_notifier_head max_freq_notifiers ;
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct freq_qos_request {
   enum freq_qos_req_type type ;
   struct plist_node pnode ;
   struct freq_constraints *qos ;
};
#line 101 
enum dev_pm_qos_req_type {
    DEV_PM_QOS_RESUME_LATENCY = 1,
    DEV_PM_QOS_LATENCY_TOLERANCE = 2,
    DEV_PM_QOS_MIN_FREQUENCY = 3,
    DEV_PM_QOS_MAX_FREQUENCY = 4,
    DEV_PM_QOS_FLAGS = 5
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
union __anonunion_data_701 {
   struct plist_node pnode ;
   struct pm_qos_flags_request flr ;
   struct freq_qos_request freq ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct dev_pm_qos_request {
   enum dev_pm_qos_req_type type ;
   union __anonunion_data_701 data ;
   struct device *dev ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
struct dev_pm_qos {
   struct pm_qos_constraints resume_latency ;
   struct pm_qos_constraints latency_tolerance ;
   struct freq_constraints freq ;
   struct pm_qos_flags flags ;
   struct dev_pm_qos_request *resume_latency_req ;
   struct dev_pm_qos_request *latency_tolerance_req ;
   struct dev_pm_qos_request *flags_req ;
};
#line 313 
struct e1000_hw;
#line 314 
enum e1000_mac_type {
    e1000_82571 = 0,
    e1000_82572 = 1,
    e1000_82573 = 2,
    e1000_82574 = 3,
    e1000_82583 = 4,
    e1000_80003es2lan = 5,
    e1000_ich8lan = 6,
    e1000_ich9lan = 7,
    e1000_ich10lan = 8,
    e1000_pchlan = 9,
    e1000_pch2lan = 10,
    e1000_pch_lpt = 11,
    e1000_pch_spt = 12,
    e1000_pch_cnp = 13,
    e1000_pch_tgp = 14
};
#line 332 
enum e1000_media_type {
    e1000_media_type_unknown = 0,
    e1000_media_type_copper = 1,
    e1000_media_type_fiber = 2,
    e1000_media_type_internal_serdes = 3,
    e1000_num_media_types = 4
};
#line 340 
enum e1000_nvm_type {
    e1000_nvm_unknown = 0,
    e1000_nvm_none = 1,
    e1000_nvm_eeprom_spi = 2,
    e1000_nvm_flash_hw = 3,
    e1000_nvm_flash_sw = 4
};
#line 348 
enum e1000_nvm_override {
    e1000_nvm_override_none = 0,
    e1000_nvm_override_spi_small = 1,
    e1000_nvm_override_spi_large = 2
};
#line 354 
enum e1000_phy_type {
    e1000_phy_unknown = 0,
    e1000_phy_none = 1,
    e1000_phy_m88 = 2,
    e1000_phy_igp = 3,
    e1000_phy_igp_2 = 4,
    e1000_phy_gg82563 = 5,
    e1000_phy_igp_3 = 6,
    e1000_phy_ife = 7,
    e1000_phy_bm = 8,
    e1000_phy_82578 = 9,
    e1000_phy_82577 = 10,
    e1000_phy_82579 = 11,
    e1000_phy_i217 = 12
};
#line 370 
enum e1000_bus_width {
    e1000_bus_width_unknown = 0,
    e1000_bus_width_pcie_x1 = 1,
    e1000_bus_width_pcie_x2 = 2,
    e1000_bus_width_pcie_x4 = 4,
    e1000_bus_width_pcie_x8 = 8,
    e1000_bus_width_32 = 9,
    e1000_bus_width_64 = 10,
    e1000_bus_width_reserved = 11
};
#line 381 
enum e1000_1000t_rx_status {
    e1000_1000t_rx_status_not_ok = 0,
    e1000_1000t_rx_status_ok = 1,
    e1000_1000t_rx_status_undefined = 255
};
#line 387 
enum e1000_rev_polarity {
    e1000_rev_polarity_normal = 0,
    e1000_rev_polarity_reversed = 1,
    e1000_rev_polarity_undefined = 255
};
#line 393 
enum e1000_fc_mode {
    e1000_fc_none = 0,
    e1000_fc_rx_pause = 1,
    e1000_fc_tx_pause = 2,
    e1000_fc_full = 3,
    e1000_fc_default = 255
};
#line 401 
enum e1000_ms_type {
    e1000_ms_hw_default = 0,
    e1000_ms_force_master = 1,
    e1000_ms_force_slave = 2,
    e1000_ms_auto = 3
};
#line 408 
enum e1000_smart_speed {
    e1000_smart_speed_default = 0,
    e1000_smart_speed_on = 1,
    e1000_smart_speed_off = 2
};
#line 414 
enum e1000_serdes_link_state {
    e1000_serdes_link_down = 0,
    e1000_serdes_link_autoneg_progress = 1,
    e1000_serdes_link_autoneg_complete = 2,
    e1000_serdes_link_forced_up = 3
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_hw_stats {
   u64 crcerrs ;
   u64 algnerrc ;
   u64 symerrs ;
   u64 rxerrc ;
   u64 mpc ;
   u64 scc ;
   u64 ecol ;
   u64 mcc ;
   u64 latecol ;
   u64 colc ;
   u64 dc ;
   u64 tncrs ;
   u64 sec ;
   u64 cexterr ;
   u64 rlec ;
   u64 xonrxc ;
   u64 xontxc ;
   u64 xoffrxc ;
   u64 xofftxc ;
   u64 fcruc ;
   u64 prc64 ;
   u64 prc127 ;
   u64 prc255 ;
   u64 prc511 ;
   u64 prc1023 ;
   u64 prc1522 ;
   u64 gprc ;
   u64 bprc ;
   u64 mprc ;
   u64 gptc ;
   u64 gorc ;
   u64 gotc ;
   u64 rnbc ;
   u64 ruc ;
   u64 rfc ;
   u64 roc ;
   u64 rjc ;
   u64 mgprc ;
   u64 mgpdc ;
   u64 mgptc ;
   u64 tor ;
   u64 tot ;
   u64 tpr ;
   u64 tpt ;
   u64 ptc64 ;
   u64 ptc127 ;
   u64 ptc255 ;
   u64 ptc511 ;
   u64 ptc1023 ;
   u64 ptc1522 ;
   u64 mptc ;
   u64 bptc ;
   u64 tsctc ;
   u64 tsctfc ;
   u64 iac ;
   u64 icrxptc ;
   u64 icrxatc ;
   u64 ictxptc ;
   u64 ictxatc ;
   u64 ictxqec ;
   u64 ictxqmtc ;
   u64 icrxdmtc ;
   u64 icrxoc ;
};
#line 414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_phy_stats {
   u32 idle_errors ;
   u32 receive_errors ;
};
#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_host_mng_dhcp_cookie {
   u32 signature ;
   u8 status ;
   u8 reserved0 ;
   u16 vlan_id ;
   u32 reserved1 ;
   u16 reserved2 ;
   u8 reserved3 ;
   u8 checksum ;
};
#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_mac_operations {
   s32 (*id_led_init)(struct e1000_hw *) ;
   s32 (*blink_led)(struct e1000_hw *) ;
   bool (*check_mng_mode)(struct e1000_hw *) ;
   s32 (*check_for_link)(struct e1000_hw *) ;
   s32 (*cleanup_led)(struct e1000_hw *) ;
   void (*clear_hw_cntrs)(struct e1000_hw *) ;
   void (*clear_vfta)(struct e1000_hw *) ;
   s32 (*get_bus_info)(struct e1000_hw *) ;
   void (*set_lan_id)(struct e1000_hw *) ;
   s32 (*get_link_up_info)(struct e1000_hw *, u16 *, u16 *) ;
   s32 (*led_on)(struct e1000_hw *) ;
   s32 (*led_off)(struct e1000_hw *) ;
   void (*update_mc_addr_list)(struct e1000_hw *, u8 *, u32 ) ;
   s32 (*reset_hw)(struct e1000_hw *) ;
   s32 (*init_hw)(struct e1000_hw *) ;
   s32 (*setup_link)(struct e1000_hw *) ;
   s32 (*setup_physical_interface)(struct e1000_hw *) ;
   s32 (*setup_led)(struct e1000_hw *) ;
   void (*write_vfta)(struct e1000_hw *, u32 , u32 ) ;
   void (*config_collision_dist)(struct e1000_hw *) ;
   int (*rar_set)(struct e1000_hw *, u8 *, u32 ) ;
   s32 (*read_mac_addr)(struct e1000_hw *) ;
   u32 (*rar_get_count)(struct e1000_hw *) ;
};
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_phy_operations {
   s32 (*acquire)(struct e1000_hw *) ;
   s32 (*cfg_on_link_up)(struct e1000_hw *) ;
   s32 (*check_polarity)(struct e1000_hw *) ;
   s32 (*check_reset_block)(struct e1000_hw *) ;
   s32 (*commit)(struct e1000_hw *) ;
   s32 (*force_speed_duplex)(struct e1000_hw *) ;
   s32 (*get_cfg_done)(struct e1000_hw *) ;
   s32 (*get_cable_length)(struct e1000_hw *) ;
   s32 (*get_info)(struct e1000_hw *) ;
   s32 (*set_page)(struct e1000_hw *, u16 ) ;
   s32 (*read_reg)(struct e1000_hw *, u32 , u16 *) ;
   s32 (*read_reg_locked)(struct e1000_hw *, u32 , u16 *) ;
   s32 (*read_reg_page)(struct e1000_hw *, u32 , u16 *) ;
   void (*release)(struct e1000_hw *) ;
   s32 (*reset)(struct e1000_hw *) ;
   s32 (*set_d0_lplu_state)(struct e1000_hw *, bool ) ;
   s32 (*set_d3_lplu_state)(struct e1000_hw *, bool ) ;
   s32 (*write_reg)(struct e1000_hw *, u32 , u16 ) ;
   s32 (*write_reg_locked)(struct e1000_hw *, u32 , u16 ) ;
   s32 (*write_reg_page)(struct e1000_hw *, u32 , u16 ) ;
   void (*power_up)(struct e1000_hw *) ;
   void (*power_down)(struct e1000_hw *) ;
};
#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_nvm_operations {
   s32 (*acquire)(struct e1000_hw *) ;
   s32 (*read)(struct e1000_hw *, u16 , u16 , u16 *) ;
   void (*release)(struct e1000_hw *) ;
   void (*reload)(struct e1000_hw *) ;
   s32 (*update)(struct e1000_hw *) ;
   s32 (*valid_led_default)(struct e1000_hw *, u16 *) ;
   s32 (*validate)(struct e1000_hw *) ;
   s32 (*write)(struct e1000_hw *, u16 , u16 , u16 *) ;
};
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_mac_info {
   struct e1000_mac_operations ops ;
   u8 addr[6U] ;
   u8 perm_addr[6U] ;
   enum e1000_mac_type type ;
   u32 collision_delta ;
   u32 ledctl_default ;
   u32 ledctl_mode1 ;
   u32 ledctl_mode2 ;
   u32 mc_filter_type ;
   u32 tx_packet_delta ;
   u32 txcw ;
   u16 current_ifs_val ;
   u16 ifs_max_val ;
   u16 ifs_min_val ;
   u16 ifs_ratio ;
   u16 ifs_step_size ;
   u16 mta_reg_count ;
   u32 mta_shadow[128U] ;
   u16 rar_entry_count ;
   u8 forced_speed_duplex ;
   bool adaptive_ifs ;
   bool has_fwsm ;
   bool arc_subsystem_valid ;
   bool autoneg ;
   bool autoneg_failed ;
   bool get_link_status ;
   bool in_ifs_mode ;
   bool serdes_has_link ;
   bool tx_pkt_filtering ;
   enum e1000_serdes_link_state serdes_link_state ;
};
#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_phy_info {
   struct e1000_phy_operations ops ;
   enum e1000_phy_type type ;
   enum e1000_1000t_rx_status local_rx ;
   enum e1000_1000t_rx_status remote_rx ;
   enum e1000_ms_type ms_type ;
   enum e1000_ms_type original_ms_type ;
   enum e1000_rev_polarity cable_polarity ;
   enum e1000_smart_speed smart_speed ;
   u32 addr ;
   u32 id ;
   u32 reset_delay_us ;
   u32 revision ;
   enum e1000_media_type media_type ;
   u16 autoneg_advertised ;
   u16 autoneg_mask ;
   u16 cable_length ;
   u16 max_cable_length ;
   u16 min_cable_length ;
   u8 mdix ;
   bool disable_polarity_correction ;
   bool is_mdix ;
   bool polarity_correction ;
   bool speed_downgraded ;
   bool autoneg_wait_to_complete ;
};
#line 617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_nvm_info {
   struct e1000_nvm_operations ops ;
   enum e1000_nvm_type type ;
   enum e1000_nvm_override override ;
   u32 flash_bank_size ;
   u32 flash_base_addr ;
   u16 word_size ;
   u16 delay_usec ;
   u16 address_bits ;
   u16 opcode_bits ;
   u16 page_size ;
};
#line 633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_bus_info {
   enum e1000_bus_width width ;
   u16 func ;
};
#line 639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_fc_info {
   u32 high_water ;
   u32 low_water ;
   u16 pause_time ;
   u16 refresh_time ;
   bool send_xon ;
   bool strict_ieee ;
   enum e1000_fc_mode current_mode ;
   enum e1000_fc_mode requested_mode ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_dev_spec_82571 {
   bool laa_is_present ;
   u32 smb_counter ;
};
#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_dev_spec_80003es2lan {
   bool mdic_wa_enable ;
};
#line 659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_shadow_ram {
   u16 value ;
   bool modified ;
};
#line 663 
enum e1000_ulp_state {
    e1000_ulp_state_unknown = 0,
    e1000_ulp_state_off = 1,
    e1000_ulp_state_on = 2
};
#line 673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_dev_spec_ich8lan {
   bool kmrn_lock_loss_workaround_enabled ;
   struct e1000_shadow_ram shadow_ram[2048U] ;
   bool nvm_k1_enabled ;
   bool eee_disable ;
   u16 eee_lp_ability ;
   enum e1000_ulp_state ulp_state ;
};
#line 682 
struct e1000_adapter;
#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
union __anonunion_dev_spec_729 {
   struct e1000_dev_spec_82571 e82571 ;
   struct e1000_dev_spec_80003es2lan e80003es2lan ;
   struct e1000_dev_spec_ich8lan ich8lan ;
};
#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_hw {
   struct e1000_adapter *adapter ;
   void *hw_addr ;
   void *flash_address ;
   struct e1000_mac_info mac ;
   struct e1000_fc_info fc ;
   struct e1000_phy_info phy ;
   struct e1000_nvm_info nvm ;
   struct e1000_bus_info bus ;
   struct e1000_host_mng_dhcp_cookie mng_cookie ;
   union __anonunion_dev_spec_729 dev_spec ;
};
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.h"
struct e1000_info;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
struct e1000_ps_page {
   struct page *page ;
   u64 dma ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
struct __anonstruct_731 {
   unsigned long time_stamp ;
   u16 length ;
   u16 next_to_watch ;
   unsigned int segs ;
   unsigned int bytecount ;
   u16 mapped_as_page ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
struct __anonstruct_732 {
   struct e1000_ps_page *ps_pages ;
   struct page *page ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
union __anonunion_730 {
   struct __anonstruct_731 __anonCompField___anonunion_730_163 ;
   struct __anonstruct_732 __anonCompField___anonunion_730_164 ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
struct e1000_buffer {
   dma_addr_t dma ;
   struct sk_buff *skb ;
   union __anonunion_730 __anonCompField_e1000_buffer_165 ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
struct e1000_ring {
   struct e1000_adapter *adapter ;
   void *desc ;
   dma_addr_t dma ;
   unsigned int size ;
   unsigned int count ;
   u16 next_to_use ;
   u16 next_to_clean ;
   void *head ;
   void *tail ;
   struct e1000_buffer *buffer_info ;
   char name[21U] ;
   u32 ims_val ;
   u32 itr_val ;
   void *itr_register ;
   int set_itr ;
   struct sk_buff *rx_skb_top ;
};
#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
struct e1000_phy_regs {
   u16 bmcr ;
   u16 bmsr ;
   u16 advertise ;
   u16 lpa ;
   u16 expansion ;
   u16 ctrl1000 ;
   u16 stat1000 ;
   u16 estatus ;
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
struct e1000_adapter {
   struct timer_list watchdog_timer ;
   struct timer_list phy_info_timer ;
   struct timer_list blink_timer ;
   struct work_struct reset_task ;
   struct work_struct watchdog_task ;
   struct e1000_info *ei ;
   unsigned long active_vlans[64U] ;
   u32 bd_number ;
   u32 rx_buffer_len ;
   u16 mng_vlan_id ;
   u16 link_speed ;
   u16 link_duplex ;
   u16 eeprom_vers ;
   unsigned long state ;
   u32 itr ;
   u32 itr_setting ;
   u16 tx_itr ;
   u16 rx_itr ;
   struct e1000_ring *tx_ring ;
   u32 tx_fifo_limit ;
   struct napi_struct napi ;
   unsigned int uncorr_errors ;
   unsigned int corr_errors ;
   unsigned int restart_queue ;
   u32 txd_cmd ;
   bool detect_tx_hung ;
   bool tx_hang_recheck ;
   u8 tx_timeout_factor ;
   u32 tx_int_delay ;
   u32 tx_abs_int_delay ;
   unsigned int total_tx_bytes ;
   unsigned int total_tx_packets ;
   unsigned int total_rx_bytes ;
   unsigned int total_rx_packets ;
   u64 tpt_old ;
   u64 colc_old ;
   u32 gotc ;
   u64 gotc_old ;
   u32 tx_timeout_count ;
   u32 tx_fifo_head ;
   u32 tx_head_addr ;
   u32 tx_fifo_size ;
   u32 tx_dma_failed ;
   u32 tx_hwtstamp_timeouts ;
   u32 tx_hwtstamp_skipped ;
   bool (*clean_rx)(struct e1000_ring *, int *, int ) ;
   void (*alloc_rx_buf)(struct e1000_ring *, int , gfp_t ) ;
   struct e1000_ring *rx_ring ;
   u32 rx_int_delay ;
   u32 rx_abs_int_delay ;
   u64 hw_csum_err ;
   u64 hw_csum_good ;
   u64 rx_hdr_split ;
   u32 gorc ;
   u64 gorc_old ;
   u32 alloc_rx_buff_failed ;
   u32 rx_dma_failed ;
   u32 rx_hwtstamp_cleared ;
   unsigned int rx_ps_pages ;
   u16 rx_ps_bsize0 ;
   u32 max_frame_size ;
   u32 min_frame_size ;
   struct net_device *netdev ;
   struct pci_dev *pdev ;
   struct e1000_hw hw ;
   spinlock_t stats64_lock ;
   struct e1000_hw_stats stats ;
   struct e1000_phy_info phy_info ;
   struct e1000_phy_stats phy_stats ;
   struct e1000_phy_regs phy_regs ;
   struct e1000_ring test_tx_ring ;
   struct e1000_ring test_rx_ring ;
   u32 test_icr ;
   u32 msg_enable ;
   unsigned int num_vectors ;
   struct msix_entry *msix_entries ;
   int int_mode ;
   u32 eiac_mask ;
   u32 eeprom_wol ;
   u32 wol ;
   u32 pba ;
   u32 max_hw_frame_size ;
   bool fc_autoneg ;
   unsigned int flags ;
   unsigned int flags2 ;
   struct work_struct downshift_task ;
   struct work_struct update_phy_task ;
   struct work_struct print_hang_task ;
   int phy_hang_count ;
   u16 tx_ring_count ;
   u16 rx_ring_count ;
   struct hwtstamp_config hwtstamp_config ;
   struct delayed_work systim_overflow_work ;
   struct sk_buff *tx_hwtstamp_skb ;
   unsigned long tx_hwtstamp_start ;
   struct work_struct tx_hwtstamp_work ;
   spinlock_t systim_lock ;
   struct cyclecounter cc ;
   struct timecounter tc ;
   struct ptp_clock *ptp_clock ;
   struct ptp_clock_info ptp_clock_info ;
   struct pm_qos_request pm_qos_req ;
   s32 ptp_delta ;
   u16 eee_advert ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
struct e1000_info {
   enum e1000_mac_type mac ;
   unsigned int flags ;
   unsigned int flags2 ;
   u32 pba ;
   u32 max_hw_frame_size ;
   s32 (*get_variants)(struct e1000_adapter *) ;
   struct e1000_mac_operations *mac_ops ;
   struct e1000_phy_operations *phy_ops ;
   struct e1000_nvm_operations *nvm_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct ich8_hsfsts {
   u16 flcdone : 1 ;
   u16 flcerr : 1 ;
   u16 dael : 1 ;
   u16 berasesz : 2 ;
   u16 flcinprog : 1 ;
   u16 reserved1 : 2 ;
   u16 reserved2 : 6 ;
   u16 fldesvalid : 1 ;
   u16 flockdn : 1 ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
union ich8_hws_flash_status {
   struct ich8_hsfsts hsf_status ;
   u16 regval ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct ich8_hsflctl {
   u16 flcgo : 1 ;
   u16 flcycle : 2 ;
   u16 reserved : 5 ;
   u16 fldbcount : 2 ;
   u16 flockdn : 6 ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
union ich8_hws_flash_ctrl {
   struct ich8_hsflctl hsf_ctrl ;
   u16 regval ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct ich8_pr {
   u32 base : 13 ;
   u32 reserved1 : 2 ;
   u32 rpe : 1 ;
   u32 limit : 13 ;
   u32 reserved2 : 2 ;
   u32 wpe : 1 ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
union ich8_flash_protected_range {
   struct ich8_pr range ;
   u32 regval ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_host_mng_command_header {
   u8 command_id ;
   u8 checksum ;
   u16 reserved1 ;
   u16 reserved2 ;
   u16 command_length ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_2263 {
   int __val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
enum tk_offsets {
    TK_OFFS_REAL = 0,
    TK_OFFS_BOOT = 1,
    TK_OFFS_TAI = 2,
    TK_OFFS_MAX = 3
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_2345 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
enum refcount_saturation_type {
    REFCOUNT_ADD_NOT_ZERO_OVF = 0,
    REFCOUNT_ADD_OVF = 1,
    REFCOUNT_ADD_UAF = 2,
    REFCOUNT_SUB_UAF = 3,
    REFCOUNT_DEC_LEAK = 4
};
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_2455 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_2455 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 1919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
typedef enum irqreturn irqreturn_t;
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 288 
struct hd_geometry;
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_2632 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_2631 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_2632 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_2631 read_descriptor_t;
#line 1771 
struct block_device_operations;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_2653 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_2655 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_11313 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_11313 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_2720 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_2721 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_2722 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_2723 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_2720 ports ;
   struct __anonstruct_icmpt_2721 icmpt ;
   struct __anonstruct_dnports_2722 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_2723 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_2724 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_2724 u ;
} __attribute__((__aligned__(8)));
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_2849 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_2848 {
   struct __anonstruct_2849 __anonCompField___anonunion_2848_153 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_2848 __anonCompField_sock_cgroup_data_154 ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 178 
struct request_sock;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_2889 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_2889 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_2890 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_2890 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2893 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2894 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_2896 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_2897 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2895 {
   struct __anonstruct_elv_2896 elv ;
   struct __anonstruct_flush_2897 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_2898 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_2893 __anonCompField_request_164 ;
   union __anonunion_2894 __anonCompField_request_165 ;
   union __anonunion_2895 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_2898 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_2925 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_2924 {
   void *validation_data ;
   struct __anonstruct_2925 __anonCompField___anonunion_2924_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_2924 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_2999 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_3000 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_2998 {
   struct __anonstruct_2999 __anonCompField___anonunion_2998_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_3000 __anonCompField___anonunion_2998_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_2998 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_3002 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_3002 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_3015 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_3015 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_3037 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_3037 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_3039 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3038 {
   __addrpair skc_addrpair ;
   struct __anonstruct_3039 __anonCompField___anonunion_3038_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3040 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_3042 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3041 {
   __portpair skc_portpair ;
   struct __anonstruct_3042 __anonCompField___anonunion_3041_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3043 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3044 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3045 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3046 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3047 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_3038 __anonCompField_sock_common_178 ;
   union __anonunion_3040 __anonCompField_sock_common_179 ;
   union __anonunion_3041 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_3043 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_3044 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_3045 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_3046 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_3047 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_3048 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3049 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_3050 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_3048 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_3049 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_3050 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_3085 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_3085 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/udp.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_3182 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_3182 __anonCompField_ip_ra_chain_196 ;
   struct callback_head rcu ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mii.h"
struct mii_ioctl_data {
   __u16 phy_id ;
   __u16 reg_num ;
   __u16 val_in ;
   __u16 val_out ;
};
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_read_3194 {
   __le64 buffer_addr ;
   __le64 reserved ;
};
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_csum_ip_3198 {
   __le16 ip_id ;
   __le16 csum ;
};
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
union __anonunion_hi_dword_3197 {
   __le32 rss ;
   struct __anonstruct_csum_ip_3198 csum_ip ;
};
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_lower_3196 {
   __le32 mrq ;
   union __anonunion_hi_dword_3197 hi_dword ;
};
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_upper_3199 {
   __le32 status_error ;
   __le16 length ;
   __le16 vlan ;
};
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_wb_3195 {
   struct __anonstruct_lower_3196 lower ;
   struct __anonstruct_upper_3199 upper ;
};
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
union e1000_rx_desc_extended {
   struct __anonstruct_read_3194 read ;
   struct __anonstruct_wb_3195 wb ;
};
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_read_3200 {
   __le64 buffer_addr[4U] ;
};
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_csum_ip_3204 {
   __le16 ip_id ;
   __le16 csum ;
};
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
union __anonunion_hi_dword_3203 {
   __le32 rss ;
   struct __anonstruct_csum_ip_3204 csum_ip ;
};
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_lower_3202 {
   __le32 mrq ;
   union __anonunion_hi_dword_3203 hi_dword ;
};
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_middle_3205 {
   __le32 status_error ;
   __le16 length0 ;
   __le16 vlan ;
};
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_upper_3206 {
   __le16 header_status ;
   __le16 length[3U] ;
};
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_wb_3201 {
   struct __anonstruct_lower_3202 lower ;
   struct __anonstruct_middle_3205 middle ;
   struct __anonstruct_upper_3206 upper ;
   __le64 reserved ;
};
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
union e1000_rx_desc_packet_split {
   struct __anonstruct_read_3200 read ;
   struct __anonstruct_wb_3201 wb ;
};
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_flags_3208 {
   __le16 length ;
   u8 cso ;
   u8 cmd ;
};
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
union __anonunion_lower_3207 {
   __le32 data ;
   struct __anonstruct_flags_3208 flags ;
};
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_fields_3210 {
   u8 status ;
   u8 css ;
   __le16 special ;
};
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
union __anonunion_upper_3209 {
   __le32 data ;
   struct __anonstruct_fields_3210 fields ;
};
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_tx_desc {
   __le64 buffer_addr ;
   union __anonunion_lower_3207 lower ;
   union __anonunion_upper_3209 upper ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_ip_fields_3212 {
   u8 ipcss ;
   u8 ipcso ;
   __le16 ipcse ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
union __anonunion_lower_setup_3211 {
   __le32 ip_config ;
   struct __anonstruct_ip_fields_3212 ip_fields ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_tcp_fields_3214 {
   u8 tucss ;
   u8 tucso ;
   __le16 tucse ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
union __anonunion_upper_setup_3213 {
   __le32 tcp_config ;
   struct __anonstruct_tcp_fields_3214 tcp_fields ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_fields_3216 {
   u8 status ;
   u8 hdr_len ;
   __le16 mss ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
union __anonunion_tcp_seg_setup_3215 {
   __le32 data ;
   struct __anonstruct_fields_3216 fields ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_context_desc {
   union __anonunion_lower_setup_3211 lower_setup ;
   union __anonunion_upper_setup_3213 upper_setup ;
   __le32 cmd_and_length ;
   union __anonunion_tcp_seg_setup_3215 tcp_seg_setup ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
struct e1000_reg_info {
   u32 ofs ;
   char *name ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
struct my_u0 {
   __le64 a ;
   __le64 b ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
struct my_u1 {
   __le64 a ;
   __le64 b ;
   __le64 c ;
   __le64 d ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct cpuinfo_x86;
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
union __anonunion_4785 {
   __u32 x86_capability[20U] ;
   unsigned long x86_capability_alignment ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct cpuinfo_x86 {
   __u8 x86 ;
   __u8 x86_vendor ;
   __u8 x86_model ;
   __u8 x86_stepping ;
   int x86_tlbsize ;
   __u8 x86_virt_bits ;
   __u8 x86_phys_bits ;
   __u8 x86_coreid_bits ;
   __u8 cu_id ;
   __u32 extended_cpuid_level ;
   int cpuid_level ;
   union __anonunion_4785 __anonCompField_cpuinfo_x86_22 ;
   char x86_vendor_id[16U] ;
   char x86_model_id[64U] ;
   unsigned int x86_cache_size ;
   int x86_cache_alignment ;
   int x86_cache_max_rmid ;
   int x86_cache_occ_scale ;
   int x86_power ;
   unsigned long loops_per_jiffy ;
   u16 x86_max_cores ;
   u16 apicid ;
   u16 initial_apicid ;
   u16 x86_clflush_size ;
   u16 booted_cores ;
   u16 phys_proc_id ;
   u16 logical_proc_id ;
   u16 cpu_core_id ;
   u16 cpu_die_id ;
   u16 logical_die_id ;
   u16 cpu_index ;
   u32 microcode ;
   u8 x86_cache_bits ;
   unsigned int initialized : 1 ;
} __attribute__((__designated_init__));
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tsc.h"
struct system_counterval_t;
#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
struct system_time_snapshot {
   u64 cycles ;
   ktime_t real ;
   ktime_t raw ;
   unsigned int clock_was_set_seq ;
   u8 cs_was_changed_seq ;
};
#line 262 
struct clocksource;
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
struct system_counterval_t {
   u64 cycles ;
   struct clocksource *cs ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/clocksource.h"
struct arch_clocksource_data {
   int vclock_mode ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clocksource.h"
struct clocksource {
   u64 (*read)(struct clocksource *) ;
   u64 mask ;
   u32 mult ;
   u32 shift ;
   u64 max_idle_ns ;
   u32 maxadj ;
   struct arch_clocksource_data archdata ;
   u64 max_cycles ;
   char *name ;
   struct list_head list ;
   int rating ;
   int (*enable)(struct clocksource *) ;
   void (*disable)(struct clocksource *) ;
   unsigned long flags ;
   void (*suspend)(struct clocksource *) ;
   void (*resume)(struct clocksource *) ;
   void (*mark_unstable)(struct clocksource *) ;
   void (*tick_stable)(struct clocksource *) ;
   struct list_head wd_list ;
   u64 cs_last ;
   u64 wd_last ;
   struct module *owner ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
struct e1000_stats {
   char stat_string[32U] ;
   int type ;
   int sizeof_stat ;
   int stat_offset ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
enum ldv_16519 {
    enable_option = 0,
    range_option = 1,
    list_option = 2
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
struct e1000_opt_list {
   int i ;
   char *str ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
struct __anonstruct_r_7637 {
   int min ;
   int max ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
struct __anonstruct_l_7638 {
   int nr ;
   struct e1000_opt_list *p ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
union __anonunion_arg_7636 {
   struct __anonstruct_r_7637 r ;
   struct __anonstruct_l_7638 l ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
struct e1000_option {
   enum ldv_16519 type ;
   char *name ;
   char *err ;
   int def ;
   union __anonunion_arg_7636 arg ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_10149 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_10149 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_10150 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_10150 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_10166 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_10166 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_10170 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_10170 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_10171 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_10172 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_10171 __anonCompField_media_link_90 ;
   union __anonunion_10172 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_10174 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_10173 {
   struct __anonstruct_dev_10174 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_10173 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_10188 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_10189 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_10187 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_10188 i2c ;
   struct __anonstruct_custom_10189 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_10187 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_11090 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_11090 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_5 {
   int arg0 ;
   int signal_pending ;
};
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_e1000_intr_15 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_e1000_get_coalesce_22 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_e1000_driver_23 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_10_25 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_write(void *p, unsigned int size)
{
  #line 40 
  return (_Bool)1;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ich8lan.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_write((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ich8lan.i.aux"
#line 651 
static void cif_mutex_lock_nvm_mutex(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned short readw(void *addr)
{
  #line 58 
  unsigned short ret;
  #line 59 
  ldv_inline_asm();
  #line 58 
  return ret;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writew(unsigned short val, void *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 61 
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ich8lan.i.aux"
static void cif_mutex_unlock_nvm_mutex(struct mutex *lock);
#line 4750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1084 
int pci_read_config_word(struct pci_dev *, int, u16 *);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/crc32.h"
#line 11 
u32 crc32_le(u32, unsigned char *, size_t);
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.h"
#line 7 
s32 e1000e_blink_led_generic(struct e1000_hw *hw);
#line 12 
#line 12 
s32 e1000e_config_fc_after_link_up(struct e1000_hw *hw);
#line 13 
#line 13 
s32 e1000e_disable_pcie_master(struct e1000_hw *hw);
#line 15 
#line 15 
s32 e1000e_get_auto_rd_done(struct e1000_hw *hw);
#line 16 
#line 16 
s32 e1000e_get_bus_info_pcie(struct e1000_hw *hw);
#line 17 
#line 17 
void e1000_set_lan_id_single_port(struct e1000_hw *hw);
#line 19 
#line 19 
s32 e1000e_get_speed_and_duplex_copper(struct e1000_hw *hw, u16 *speed, u16 *duplex);
#line 23 
#line 23 
s32 e1000e_id_led_init_generic(struct e1000_hw *hw);
#line 26 
#line 26 
void e1000e_update_mc_addr_list_generic(struct e1000_hw *hw, u8 *mc_addr_list, u32 mc_addr_count);
#line 28 
#line 28 
s32 e1000e_set_fc_watermarks(struct e1000_hw *hw);
#line 30 
#line 30 
s32 e1000e_setup_led_generic(struct e1000_hw *hw);
#line 35 
#line 35 
void e1000e_clear_hw_cntrs_base(struct e1000_hw *hw);
#line 37 
#line 37 
void e1000e_init_rx_addrs(struct e1000_hw *hw, u16 rar_count);
#line 41 
#line 41 
void e1000e_set_pcie_no_snoop(struct e1000_hw *hw, u32 no_snoop);
#line 46 
#line 46 
u32 e1000e_rar_get_count_generic(struct e1000_hw *hw);
#line 47 
#line 47 
int e1000e_rar_set_generic(struct e1000_hw *hw, u8 *addr, u32 index);
#line 48 
#line 48 
void e1000e_config_collision_dist_generic(struct e1000_hw *hw);
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.h"
#line 7 
s32 e1000e_check_downshift(struct e1000_hw *hw);
#line 8 
#line 8 
s32 e1000_check_polarity_m88(struct e1000_hw *hw);
#line 9 
#line 9 
s32 e1000_check_polarity_igp(struct e1000_hw *hw);
#line 10 
#line 10 
s32 e1000_check_polarity_ife(struct e1000_hw *hw);
#line 12 
#line 12 
s32 e1000e_copper_link_setup_igp(struct e1000_hw *hw);
#line 13 
#line 13 
s32 e1000e_copper_link_setup_m88(struct e1000_hw *hw);
#line 14 
#line 14 
s32 e1000e_phy_force_speed_duplex_igp(struct e1000_hw *hw);
#line 15 
#line 15 
s32 e1000e_phy_force_speed_duplex_m88(struct e1000_hw *hw);
#line 16 
#line 16 
s32 e1000_phy_force_speed_duplex_ife(struct e1000_hw *hw);
#line 17 
#line 17 
s32 e1000e_get_cable_length_m88(struct e1000_hw *hw);
#line 18 
#line 18 
s32 e1000e_get_cable_length_igp_2(struct e1000_hw *hw);
#line 19 
#line 19 
s32 e1000e_get_cfg_done_generic(struct e1000_hw *hw);
#line 20 
#line 20 
s32 e1000e_get_phy_id(struct e1000_hw *hw);
#line 21 
#line 21 
s32 e1000e_get_phy_info_igp(struct e1000_hw *hw);
#line 22 
#line 22 
s32 e1000e_get_phy_info_m88(struct e1000_hw *hw);
#line 23 
#line 23 
s32 e1000_get_phy_info_ife(struct e1000_hw *hw);
#line 24 
#line 24 
s32 e1000e_phy_sw_reset(struct e1000_hw *hw);
#line 26 
#line 26 
s32 e1000e_phy_hw_reset_generic(struct e1000_hw *hw);
#line 28 
#line 28 
s32 e1000e_read_kmrn_reg(struct e1000_hw *hw, u32 offset, u16 *data);
#line 29 
#line 29 
s32 e1000e_read_kmrn_reg_locked(struct e1000_hw *hw, u32 offset, u16 *data);
#line 30 
#line 30 
s32 e1000_set_page_igp(struct e1000_hw *hw, u16 page);
#line 31 
#line 31 
s32 e1000e_read_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 *data);
#line 32 
#line 32 
s32 e1000e_read_phy_reg_igp_locked(struct e1000_hw *hw, u32 offset, u16 *data);
#line 35 
#line 35 
s32 e1000e_setup_copper_link(struct e1000_hw *hw);
#line 36 
#line 36 
s32 e1000e_write_kmrn_reg(struct e1000_hw *hw, u32 offset, u16 data);
#line 37 
#line 37 
s32 e1000e_write_kmrn_reg_locked(struct e1000_hw *hw, u32 offset, u16 data);
#line 38 
#line 38 
s32 e1000e_write_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 data);
#line 39 
#line 39 
s32 e1000e_write_phy_reg_igp_locked(struct e1000_hw *hw, u32 offset, u16 data);
#line 41 
#line 41 
s32 e1000e_phy_has_link_generic(struct e1000_hw *hw, u32 iterations, u32 usec_interval, bool *success);
#line 43 
#line 43 
s32 e1000e_phy_init_script_igp3(struct e1000_hw *hw);
#line 44 
#line 44 
enum e1000_phy_type e1000e_get_phy_type_from_id(u32 phy_id);
#line 45 
#line 45 
s32 e1000e_determine_phy_address(struct e1000_hw *hw);
#line 46 
#line 46 
s32 e1000e_write_phy_reg_bm(struct e1000_hw *hw, u32 offset, u16 data);
#line 47 
#line 47 
s32 e1000e_read_phy_reg_bm(struct e1000_hw *hw, u32 offset, u16 *data);
#line 48 
#line 48 
s32 e1000_enable_phy_wakeup_reg_access_bm(struct e1000_hw *hw, u16 *phy_reg);
#line 49 
#line 49 
s32 e1000_disable_phy_wakeup_reg_access_bm(struct e1000_hw *hw, u16 *phy_reg);
#line 52 
#line 52 
void e1000_power_up_phy_copper(struct e1000_hw *hw);
#line 53 
#line 53 
void e1000_power_down_phy_copper(struct e1000_hw *hw);
#line 55 
#line 55 
s32 e1000e_write_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 data);
#line 56 
#line 56 
s32 e1000_read_phy_reg_hv(struct e1000_hw *hw, u32 offset, u16 *data);
#line 57 
#line 57 
s32 e1000_read_phy_reg_hv_locked(struct e1000_hw *hw, u32 offset, u16 *data);
#line 58 
#line 58 
s32 e1000_read_phy_reg_page_hv(struct e1000_hw *hw, u32 offset, u16 *data);
#line 59 
#line 59 
s32 e1000_write_phy_reg_hv(struct e1000_hw *hw, u32 offset, u16 data);
#line 60 
#line 60 
s32 e1000_write_phy_reg_hv_locked(struct e1000_hw *hw, u32 offset, u16 data);
#line 61 
#line 61 
s32 e1000_write_phy_reg_page_hv(struct e1000_hw *hw, u32 offset, u16 data);
#line 62 
#line 62 
s32 e1000_link_stall_workaround_hv(struct e1000_hw *hw);
#line 63 
#line 63 
s32 e1000_copper_link_setup_82577(struct e1000_hw *hw);
#line 64 
#line 64 
s32 e1000_check_polarity_82577(struct e1000_hw *hw);
#line 65 
#line 65 
s32 e1000_get_phy_info_82577(struct e1000_hw *hw);
#line 66 
#line 66 
s32 e1000_phy_force_speed_duplex_82577(struct e1000_hw *hw);
#line 67 
#line 67 
s32 e1000_get_cable_length_82577(struct e1000_hw *hw);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.h"
#line 15 
s32 e1000e_validate_nvm_checksum_generic(struct e1000_hw *hw);
#line 17 
#line 17 
s32 e1000e_update_nvm_checksum_generic(struct e1000_hw *hw);
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.h"
#line 4116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000e_write_protect_nvm_ich8lan(struct e1000_hw *hw);
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.h"
#line 5185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000e_set_kmrn_lock_loss_workaround_ich8lan(struct e1000_hw *hw, bool state);
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.h"
#line 5208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000e_igp3_phy_powerdown_workaround_ich8lan(struct e1000_hw *hw);
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.h"
#line 5259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000e_gig_downshift_workaround_ich8lan(struct e1000_hw *hw);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.h"
#line 5294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000_suspend_workarounds_ich8lan(struct e1000_hw *hw);
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.h"
#line 5418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000_resume_workarounds_pchlan(struct e1000_hw *hw);
#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.h"
#line 2269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_configure_k1_ich8lan(struct e1000_hw *hw, bool k1_enable);
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.h"
#line 2486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000_copy_rx_addrs_to_phy_ich8lan(struct e1000_hw *hw);
#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.h"
#line 2527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_lv_jumbo_workaround_ich8lan(struct e1000_hw *hw, bool enable);
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.h"
#line 772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_read_emi_reg_locked(struct e1000_hw *hw, u16 addr, u16 *data);
#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.h"
#line 785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_write_emi_reg_locked(struct e1000_hw *hw, u16 addr, u16 data);
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.h"
#line 804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_set_eee_pchlan(struct e1000_hw *hw);
#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.h"
#line 1075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_enable_ulp_lpt_lp(struct e1000_hw *hw, bool to_sx);
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 5796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_ich8_info;
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 5812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_ich9_info;
#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 5829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_ich10_info;
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 5846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_pch_info;
#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 5865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_pch2_info;
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 5886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_pch_lpt_info;
#line 500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 5907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_pch_spt_info;
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 5927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_pch_cnp_info;
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1000_phy_hw_reset(struct e1000_hw *hw)
{
  #line 512 
  return (*(hw->phy.ops.reset))(hw);
}

#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1e_rphy(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 517 
  return (*(hw->phy.ops.read_reg))(hw,offset,data);
}

#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1e_rphy_locked(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 522 
  return (*(hw->phy.ops.read_reg_locked))(hw,offset,data);
}

#line 525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1e_wphy(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 527 
  return (*(hw->phy.ops.write_reg))(hw,offset,(unsigned short)((int)data));
}

#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1e_wphy_locked(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 532 
  return (*(hw->phy.ops.write_reg_locked))(hw,offset,
                                        (unsigned short)((int)data));
}

#line 535 
#line 535 
void e1000e_reload_nvm_generic(struct e1000_hw *hw);
#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1000e_update_nvm_checksum(struct e1000_hw *hw)
{
  #line 552 
  return (*(hw->nvm.ops.update))(hw);
}

#line 555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1000_read_nvm(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 558 
  return (*(hw->nvm.ops.read))(hw,(unsigned short)((int)offset),
                            (unsigned short)((int)words),data);
}

#line 561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1000_write_nvm(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 564 
  return (*(hw->nvm.ops.write))(hw,(unsigned short)((int)offset),
                             (unsigned short)((int)words),data);
}

#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static u32 __er32(struct e1000_hw *hw, unsigned long reg)
{
  #line 574 
  return readl(hw->hw_addr + reg);
}

#line 580 
#line 580 
void __ew32(struct e1000_hw *hw, unsigned long reg, u32 val);
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
#line 5687 
static void e1000_clear_hw_cntrs_ich8lan(struct e1000_hw *hw);
#line 98 
#line 4847 
static void e1000_initialize_hw_bits_ich8lan(struct e1000_hw *hw);
#line 99 
#line 4412 
static s32 e1000_erase_flash_bank_ich8lan(struct e1000_hw *hw, u32 bank);
#line 100 
#line 4381 
static s32 e1000_retry_write_flash_byte_ich8lan(struct e1000_hw *hw, u32 offset, u8 byte);
#line 102 
#line 3529 
static s32 e1000_read_flash_byte_ich8lan(struct e1000_hw *hw, u32 offset, u8 *data);
#line 104 
#line 3512 
static s32 e1000_read_flash_word_ich8lan(struct e1000_hw *hw, u32 offset, u16 *data);
#line 106 
#line 3560 
static s32 e1000_read_flash_data_ich8lan(struct e1000_hw *hw, u32 offset, u8 size, u16 *data);
#line 108 
#line 3636 
static s32 e1000_read_flash_data32_ich8lan(struct e1000_hw *hw, u32 offset, u32 *data);
#line 110 
#line 3495 
static s32 e1000_read_flash_dword_ich8lan(struct e1000_hw *hw, u32 offset, u32 *data);
#line 112 
#line 4246 
static s32 e1000_write_flash_data32_ich8lan(struct e1000_hw *hw, u32 offset, u32 data);
#line 114 
#line 4347 
static s32 e1000_retry_write_flash_dword_ich8lan(struct e1000_hw *hw, u32 offset, u32 dword);
#line 116 
#line 5125 
static s32 e1000_kmrn_lock_loss_workaround_ich8lan(struct e1000_hw *hw);
#line 117 
#line 5482 
static s32 e1000_cleanup_led_ich8lan(struct e1000_hw *hw);
#line 118 
#line 5497 
static s32 e1000_led_on_ich8lan(struct e1000_hw *hw);
#line 119 
#line 5513 
static s32 e1000_led_off_ich8lan(struct e1000_hw *hw);
#line 120 
#line 4554 
static s32 e1000_id_led_init_pchlan(struct e1000_hw *hw);
#line 121 
#line 5530 
static s32 e1000_setup_led_pchlan(struct e1000_hw *hw);
#line 122 
#line 5541 
static s32 e1000_cleanup_led_pchlan(struct e1000_hw *hw);
#line 123 
#line 5552 
static s32 e1000_led_on_pchlan(struct e1000_hw *hw);
#line 124 
#line 5582 
static s32 e1000_led_off_pchlan(struct e1000_hw *hw);
#line 125 
#line 2924 
static s32 e1000_set_lplu_state_pchlan(struct e1000_hw *hw, bool active);
#line 126 
#line 5672 
static void e1000_power_down_phy_copper_ich8lan(struct e1000_hw *hw);
#line 127 
#line 2799 
static void e1000_lan_init_done_ich8lan(struct e1000_hw *hw);
#line 128 
#line 2192 
static s32 e1000_k1_gig_workaround_hv(struct e1000_hw *hw, bool link);
#line 129 
#line 2384 
static s32 e1000_set_mdio_slow_mode_hv(struct e1000_hw *hw);
#line 130 
#line 1797 
static bool e1000_check_mng_mode_ich8lan(struct e1000_hw *hw);
#line 131 
#line 1815 
static bool e1000_check_mng_mode_pchlan(struct e1000_hw *hw);
#line 132 
#line 1835 
static int e1000_rar_set_pch2lan(struct e1000_hw *hw, u8 *addr, u32 index);
#line 133 
#line 1938 
static int e1000_rar_set_pch_lpt(struct e1000_hw *hw, u8 *addr, u32 index);
#line 134 
#line 1901 
static u32 e1000_rar_get_count_pch_lpt(struct e1000_hw *hw);
#line 135 
#line 2727 
static s32 e1000_k1_workaround_lv(struct e1000_hw *hw);
#line 136 
#line 2775 
static void e1000_gate_hw_phy_config_ich8lan(struct e1000_hw *hw, bool gate);
#line 137 
#line 1219 
static s32 e1000_disable_ulp_lpt_lp(struct e1000_hw *hw, bool force);
#line 138 
#line 5066 
static s32 e1000_setup_copper_link_pch_lpt(struct e1000_hw *hw);
#line 139 
#line 2320 
static s32 e1000_oem_bits_config_ich8lan(struct e1000_hw *hw, bool d0_state);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
__inline static u16 __er16flash(struct e1000_hw *hw, unsigned long reg)
{
  #line 143 
  return readw(hw->flash_address + reg);
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
__inline static u32 __er32flash(struct e1000_hw *hw, unsigned long reg)
{
  #line 148 
  return readl(hw->flash_address + reg);
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
__inline static void __ew16flash(struct e1000_hw *hw, unsigned long reg, u16 val)
{
  #line 153 
  writew((unsigned short)((int)val),hw->flash_address + reg);
  #line 154 
  return;
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
__inline static void __ew32flash(struct e1000_hw *hw, unsigned long reg, u32 val)
{
  #line 158 
  writel(val,hw->flash_address + reg);
  #line 159 
  return;
}

#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static bool e1000_phy_is_accessible_pchlan(struct e1000_hw *hw)
{
  #line 181 
  u16 retry_count;
  #line 178 
  u16 phy_reg = (unsigned short)0U;
  #line 179 
  u32 phy_id = 0U;
  #line 180 
  s32 ret_val = 0;
  #line 182 
  u32 mac_reg = 0U;
  #line 184 
  retry_count = (unsigned short)0U;
  #line 184 
  while ((unsigned int)retry_count <= 1U) {
    #line 185 
    ret_val = e1e_rphy_locked(hw,2U,& phy_reg);
    #line 186 
    if (ret_val != 0 || (unsigned int)phy_reg == 65535U) 
                                                         #line 187 
                                                         goto __Cont;
    #line 188 
    phy_id = (unsigned int)((int)phy_reg << 16);
    #line 190 
    ret_val = e1e_rphy_locked(hw,3U,& phy_reg);
    #line 191 
    if (ret_val != 0 || (unsigned int)phy_reg == 65535U) {
      #line 192 
      phy_id = 0U;
      #line 193 
      goto __Cont;
    }
    #line 195 
    phy_id = ((unsigned int)phy_reg & 4294967280U) | phy_id;
    #line 196 
    break;
    #line 184 
    __Cont: 
            #line 184 
    retry_count = (u16)((int)retry_count + 1);
  }
  #line 199 
  if (hw->phy.id != 0U) {
    #line 200 
    if (hw->phy.id == phy_id) 
                              #line 201 
                              goto out;
  }
  else 
    #line 202 
    if (phy_id != 0U) {
      #line 203 
      hw->phy.id = phy_id;
      #line 204 
      hw->phy.revision = (unsigned int)phy_reg & 15U;
      #line 205 
      goto out;
    }
  #line 211 
  if (hw->mac.type <= (unsigned int)e1000_pch2lan) {
    #line 212 
    (*(hw->phy.ops.release))(hw);
    #line 213 
    ret_val = e1000_set_mdio_slow_mode_hv(hw);
    #line 214 
    if (ret_val == 0) 
                      #line 215 
                      ret_val = e1000e_get_phy_id(hw);
    #line 216 
    (*(hw->phy.ops.acquire))(hw);
  }
  #line 219 
  if (ret_val != 0) 
                    #line 220 
                    return (_Bool)0;
  #line 221 
  out: 
       #line 221 
  ;
  #line 222 
  if (hw->mac.type > (unsigned int)e1000_pch2lan) {
    #line 224 
    if ((__er32(hw,23380UL) & 32768U) == 0U) {
      #line 226 
      e1e_rphy_locked(hw,24631U,& phy_reg);
      #line 227 
      phy_reg = (unsigned short)((unsigned int)phy_reg & 65534U);
      #line 228 
      e1e_wphy_locked(hw,24631U,(unsigned short)((int)phy_reg));
      #line 231 
      mac_reg = __er32(hw,24UL);
      #line 232 
      mac_reg &= 4294965247U;
      #line 233 
      __ew32(hw,24UL,mac_reg);
    }
  }
  #line 237 
  return (_Bool)1;
}

#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_toggle_lanphypc_pch_lpt(struct e1000_hw *hw)
{
  #line 249 
  u32 mac_reg;
  #line 252 
  mac_reg = __er32(hw,60UL);
  #line 253 
  mac_reg &= 4093640703U;
  #line 254 
  mac_reg |= 134217728U;
  #line 255 
  __ew32(hw,60UL,mac_reg);
  #line 258 
  mac_reg = __er32(hw,0UL);
  #line 259 
  mac_reg |= 65536U;
  #line 260 
  mac_reg &= 4294836223U;
  #line 261 
  __ew32(hw,0UL,mac_reg);
  #line 262 
  __er32(hw,8UL);
  #line 263 
  usleep_range(10UL,20UL);
  #line 264 
  mac_reg &= 4294901759U;
  #line 265 
  __ew32(hw,0UL,mac_reg);
  #line 266 
  __er32(hw,8UL);
  #line 268 
  if (hw->mac.type <= (unsigned int)e1000_pch2lan) 
                                                   #line 269 
                                                   msleep(50U);
  else {
    #line 271 
    u16 count = (unsigned short)20U;
    #line 273 
    while (1) {
      #line 274 
      usleep_range(5000UL,6000UL);
      #line 274 
      if ((__er32(hw,24UL) & 4U) == 0U) {
        #line 275 
        u16 tmp_0;
        #line 275 
        tmp_0 = count;
        #line 275 
        count = (u16)((int)count - 1);
        #line 275 
        ;
        #line 275 
        if (! ((unsigned int)tmp_0 != 0U)) 
                                           #line 273 
                                           break;
      }
      else 
           #line 273 
           break;
    }
    #line 277 
    msleep(30U);
  }
  #line 279 
  return;
}

#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_init_phy_workarounds_pchlan(struct e1000_hw *hw)
{
  #line 291 
  u32 mac_reg;
  #line 292 
  s32 ret_val;
  #line 290 
  struct e1000_adapter *adapter = hw->adapter;
  #line 291 
  u32 fwsm = __er32(hw,23380UL);
  #line 297 
  e1000_gate_hw_phy_config_ich8lan(hw,(_Bool)1);
  #line 302 
  hw->dev_spec.ich8lan.ulp_state = e1000_ulp_state_unknown;
  #line 303 
  e1000_disable_ulp_lpt_lp(hw,(_Bool)1);
  #line 305 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 306 
  if (ret_val != 0) {
    {
      #line 307 
      bool branch;
      #line 307 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_phy_workarounds_pchlan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Failed to initialize PHY flow\n", .lineno = (unsigned int)307U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 307 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 307 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 307 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,(hw->adapter)->netdev,(char *)"Failed to initialize PHY flow\n");
    }
    #line 308 
    goto out;
  }
  #line 315 
  switch ((unsigned int)hw->mac.type) {
    #line 316 
    case (unsigned int)11: 
                           #line 316 
    ;
    #line 317 
    case (unsigned int)12: 
                           #line 317 
    ;
    #line 318 
    case (unsigned int)13: 
                           #line 318 
    ;
    #line 319 
    case (unsigned int)14: 
                           #line 319 
    ;
    #line 320 
    if ((int)e1000_phy_is_accessible_pchlan(hw) != 0) 
                                                      #line 321 
                                                      break;
    #line 326 
    mac_reg = __er32(hw,24UL);
    #line 327 
    mac_reg |= 2048U;
    #line 328 
    __ew32(hw,24UL,mac_reg);
    #line 334 
    msleep(50U);
    #line 337 
    case (unsigned int)10: 
                           #line 337 
    ;
    #line 338 
    if ((int)e1000_phy_is_accessible_pchlan(hw) != 0) 
                                                      #line 339 
                                                      break;
    #line 342 
    case (unsigned int)9: 
                          #line 342 
    ;
    #line 343 
    if (hw->mac.type == (unsigned int)e1000_pchlan && (fwsm & 32768U) != 0U) 
      #line 345 
      break;
    #line 347 
    if ((*(hw->phy.ops.check_reset_block))(hw) != 0) {
      {
        #line 348 
        bool branch_0;
        #line 348 
        struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_phy_workarounds_pchlan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Required LANPHYPC toggle blocked by ME\n", .lineno = (unsigned int)348U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 348 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
        #line 348 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 348 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,(hw->adapter)->netdev,(char *)"Required LANPHYPC toggle blocked by ME\n");
      }
      #line 349 
      ret_val = -2;
      #line 350 
      break;
    }
    #line 354 
    e1000_toggle_lanphypc_pch_lpt(hw);
    #line 355 
    if (hw->mac.type > (unsigned int)e1000_pch2lan) {
      #line 356 
      if ((int)e1000_phy_is_accessible_pchlan(hw) != 0) 
                                                        #line 357 
                                                        break;
      #line 362 
      mac_reg = __er32(hw,24UL);
      #line 363 
      mac_reg &= 4294965247U;
      #line 364 
      __ew32(hw,24UL,mac_reg);
      #line 366 
      if ((int)e1000_phy_is_accessible_pchlan(hw) != 0) 
                                                        #line 367 
                                                        break;
      #line 369 
      ret_val = -2;
    }
    #line 371 
    break;
    #line 372 
    default: 
             #line 372 
    ;
    #line 373 
    break;
  }
  #line 376 
  (*(hw->phy.ops.release))(hw);
  #line 377 
  if (ret_val == 0) {
    #line 380 
    if ((*(hw->phy.ops.check_reset_block))(hw) != 0) {
      #line 381 
      netdev_err(adapter->netdev,(char *)"Reset blocked by ME\n");
      #line 382 
      goto out;
    }
    #line 390 
    ret_val = e1000e_phy_hw_reset_generic(hw);
    #line 391 
    if (ret_val != 0) 
                      #line 392 
                      goto out;
    #line 400 
    ret_val = (*(hw->phy.ops.check_reset_block))(hw);
    #line 401 
    if (ret_val != 0) 
                      #line 402 
                      netdev_err(adapter->netdev,(char *)"ME blocked access to PHY after reset\n");
  }
  #line 405 
  out: 
       #line 405 
  ;
  #line 407 
  if (hw->mac.type == (unsigned int)e1000_pch2lan && (fwsm & 32768U) == 0U) {
    #line 409 
    usleep_range(10000UL,11000UL);
    #line 410 
    e1000_gate_hw_phy_config_ich8lan(hw,(_Bool)0);
  }
  #line 413 
  return ret_val;
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_init_phy_params_pchlan(struct e1000_hw *hw)
{
  #line 425 
  s32 ret_val;
  #line 424 
  struct e1000_phy_info *phy = & hw->phy;
  #line 427 
  phy->addr = 1U;
  #line 428 
  phy->reset_delay_us = 100U;
  #line 430 
  phy->ops.set_page = & e1000_set_page_igp;
  #line 431 
  phy->ops.read_reg = & e1000_read_phy_reg_hv;
  #line 432 
  phy->ops.read_reg_locked = & e1000_read_phy_reg_hv_locked;
  #line 433 
  phy->ops.read_reg_page = & e1000_read_phy_reg_page_hv;
  #line 434 
  phy->ops.set_d0_lplu_state = & e1000_set_lplu_state_pchlan;
  #line 435 
  phy->ops.set_d3_lplu_state = & e1000_set_lplu_state_pchlan;
  #line 436 
  phy->ops.write_reg = & e1000_write_phy_reg_hv;
  #line 437 
  phy->ops.write_reg_locked = & e1000_write_phy_reg_hv_locked;
  #line 438 
  phy->ops.write_reg_page = & e1000_write_phy_reg_page_hv;
  #line 439 
  phy->ops.power_up = & e1000_power_up_phy_copper;
  #line 440 
  phy->ops.power_down = & e1000_power_down_phy_copper_ich8lan;
  #line 441 
  phy->autoneg_mask = (unsigned short)47U;
  #line 443 
  phy->id = 0U;
  #line 445 
  ret_val = e1000_init_phy_workarounds_pchlan(hw);
  #line 446 
  if (ret_val != 0) 
                    #line 447 
                    return ret_val;
  #line 449 
  if (phy->id == 0U) 
    #line 450 
    switch ((unsigned int)hw->mac.type) {
      #line 451 
      default: 
               #line 451 
      ;
      #line 452 
      ret_val = e1000e_get_phy_id(hw);
      #line 453 
      if (ret_val != 0) 
                        #line 454 
                        return ret_val;
      #line 455 
      if (phy->id != 0U && phy->id != 4294967280U) 
                                                   #line 456 
                                                   break;
      #line 458 
      case (unsigned int)10: 
                             #line 458 
      ;
      #line 459 
      case (unsigned int)11: 
                             #line 459 
      ;
      #line 460 
      case (unsigned int)12: 
                             #line 460 
      ;
      #line 461 
      case (unsigned int)13: 
                             #line 461 
      ;
      #line 462 
      case (unsigned int)14: 
                             #line 462 
      ;
      #line 466 
      ret_val = e1000_set_mdio_slow_mode_hv(hw);
      #line 467 
      if (ret_val != 0) 
                        #line 468 
                        return ret_val;
      #line 469 
      ret_val = e1000e_get_phy_id(hw);
      #line 470 
      if (ret_val != 0) 
                        #line 471 
                        return ret_val;
      #line 472 
      break;
    }
  #line 474 
  phy->type = e1000e_get_phy_type_from_id(phy->id);
  #line 476 
  switch ((unsigned int)phy->type) {
    #line 477 
    case (unsigned int)10: 
                           #line 477 
    ;
    #line 478 
    case (unsigned int)11: 
                           #line 478 
    ;
    #line 479 
    case (unsigned int)12: 
                           #line 479 
    ;
    #line 480 
    phy->ops.check_polarity = & e1000_check_polarity_82577;
    #line 481 
    phy->ops.force_speed_duplex = & e1000_phy_force_speed_duplex_82577;
    #line 483 
    phy->ops.get_cable_length = & e1000_get_cable_length_82577;
    #line 484 
    phy->ops.get_info = & e1000_get_phy_info_82577;
    #line 485 
    phy->ops.commit = & e1000e_phy_sw_reset;
    #line 486 
    break;
    #line 487 
    case (unsigned int)9: 
                          #line 487 
    ;
    #line 488 
    phy->ops.check_polarity = & e1000_check_polarity_m88;
    #line 489 
    phy->ops.force_speed_duplex = & e1000e_phy_force_speed_duplex_m88;
    #line 490 
    phy->ops.get_cable_length = & e1000e_get_cable_length_m88;
    #line 491 
    phy->ops.get_info = & e1000e_get_phy_info_m88;
    #line 492 
    break;
    #line 493 
    default: 
             #line 493 
    ;
    #line 494 
    ret_val = -2;
    #line 495 
    break;
  }
  #line 498 
  return ret_val;
}

#line 507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_init_phy_params_ich8lan(struct e1000_hw *hw)
{
  #line 510 
  s32 ret_val;
  #line 509 
  struct e1000_phy_info *phy = & hw->phy;
  #line 511 
  u16 i = (unsigned short)0U;
  #line 513 
  phy->addr = 1U;
  #line 514 
  phy->reset_delay_us = 100U;
  #line 516 
  phy->ops.power_up = & e1000_power_up_phy_copper;
  #line 517 
  phy->ops.power_down = & e1000_power_down_phy_copper_ich8lan;
  #line 522 
  ret_val = e1000e_determine_phy_address(hw);
  #line 523 
  if (ret_val != 0) {
    #line 524 
    phy->ops.write_reg = & e1000e_write_phy_reg_bm;
    #line 525 
    phy->ops.read_reg = & e1000e_read_phy_reg_bm;
    #line 526 
    ret_val = e1000e_determine_phy_address(hw);
    #line 527 
    if (ret_val != 0) {
      {
        #line 528 
        bool branch;
        #line 528 
        struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_phy_params_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Cannot determine PHY addr. Erroring out\n", .lineno = (unsigned int)528U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 528 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
        #line 528 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 528 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,(hw->adapter)->netdev,(char *)"Cannot determine PHY addr. Erroring out\n");
      }
      #line 529 
      return ret_val;
    }
  }
  #line 533 
  phy->id = 0U;
  #line 534 
  while (1) {
    #line 534 
    if (e1000e_get_phy_type_from_id(phy->id) == (unsigned int)e1000_phy_unknown) {
      #line 534 
      u16 tmp_1;
      #line 534 
      tmp_1 = i;
      #line 534 
      i = (u16)((int)i + 1);
      #line 534 
      ;
      #line 534 
      if (! ((unsigned int)tmp_1 <= 99U)) 
                                          #line 534 
                                          break;
    }
    else 
         #line 534 
         break;
    #line 536 
    usleep_range(1000UL,1100UL);
    #line 537 
    ret_val = e1000e_get_phy_id(hw);
    #line 538 
    if (ret_val != 0) 
                      #line 539 
                      return ret_val;
  }
  #line 543 
  switch (phy->id) {
    #line 544 
    case (u32)44565392: 
                        #line 544 
    ;
    #line 545 
    phy->type = e1000_phy_igp_3;
    #line 546 
    phy->autoneg_mask = (unsigned short)47U;
    #line 547 
    phy->ops.read_reg_locked = & e1000e_read_phy_reg_igp_locked;
    #line 548 
    phy->ops.write_reg_locked = & e1000e_write_phy_reg_igp_locked;
    #line 549 
    phy->ops.get_info = & e1000e_get_phy_info_igp;
    #line 550 
    phy->ops.check_polarity = & e1000_check_polarity_igp;
    #line 551 
    phy->ops.force_speed_duplex = & e1000e_phy_force_speed_duplex_igp;
    #line 552 
    break;
    #line 553 
    case (u32)44565296: 
                        #line 553 
    ;
    #line 554 
    case (u32)44565280: 
                        #line 554 
    ;
    #line 555 
    case (u32)44565264: 
                        #line 555 
    ;
    #line 556 
    phy->type = e1000_phy_ife;
    #line 557 
    phy->autoneg_mask = (unsigned short)15U;
    #line 558 
    phy->ops.get_info = & e1000_get_phy_info_ife;
    #line 559 
    phy->ops.check_polarity = & e1000_check_polarity_ife;
    #line 560 
    phy->ops.force_speed_duplex = & e1000_phy_force_speed_duplex_ife;
    #line 561 
    break;
    #line 562 
    case (u32)21040304: 
                        #line 562 
    ;
    #line 563 
    phy->type = e1000_phy_bm;
    #line 564 
    phy->autoneg_mask = (unsigned short)47U;
    #line 565 
    phy->ops.read_reg = & e1000e_read_phy_reg_bm;
    #line 566 
    phy->ops.write_reg = & e1000e_write_phy_reg_bm;
    #line 567 
    phy->ops.commit = & e1000e_phy_sw_reset;
    #line 568 
    phy->ops.get_info = & e1000e_get_phy_info_m88;
    #line 569 
    phy->ops.check_polarity = & e1000_check_polarity_m88;
    #line 570 
    phy->ops.force_speed_duplex = & e1000e_phy_force_speed_duplex_m88;
    #line 571 
    break;
    #line 572 
    default: 
             #line 572 
    ;
    #line 573 
    return -2;
  }
  #line 576 
  return 0;
}

#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_init_nvm_params_ich8lan(struct e1000_hw *hw)
{
  #line 590 
  u32 gfpreg;
  #line 590 
  u32 sector_base_addr;
  #line 590 
  u32 sector_end_addr;
  #line 591 
  u16 i;
  #line 592 
  u32 nvm_size;
  #line 588 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 589 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  #line 594 
  nvm->type = e1000_nvm_flash_sw;
  #line 596 
  if (hw->mac.type > (unsigned int)e1000_pch_lpt) {
    #line 603 
    nvm->flash_base_addr = 0U;
    #line 604 
    nvm_size = (((__er32(hw,12UL) >> 1) & 31U) + 1U) * 4096U;
    #line 606 
    nvm->flash_bank_size = nvm_size / 2U;
    #line 608 
    nvm->flash_bank_size /= 2U;
    #line 610 
    hw->flash_address = hw->hw_addr + 57344U;
  }
  else {
    #line 613 
    if (hw->flash_address == (void *)0) {
      {
        #line 614 
        bool branch;
        #line 614 
        struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_nvm_params_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"ERROR: Flash registers not mapped\n", .lineno = (unsigned int)614U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 614 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
        #line 614 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 614 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,(hw->adapter)->netdev,(char *)"ERROR: Flash registers not mapped\n");
      }
      #line 615 
      return -3;
    }
    #line 618 
    gfpreg = __er32flash(hw,0UL);
    #line 624 
    sector_base_addr = gfpreg & 8191U;
    #line 625 
    sector_end_addr = ((gfpreg >> 16) & 8191U) + 1U;
    #line 628 
    nvm->flash_base_addr = sector_base_addr << 12;
    #line 634 
    nvm->flash_bank_size = (sector_end_addr - sector_base_addr) << 12;
    #line 636 
    nvm->flash_bank_size /= 2U;
    #line 638 
    nvm->flash_bank_size /= 2U;
  }
  #line 641 
  nvm->word_size = (unsigned short)2048U;
  #line 644 
  i = (unsigned short)0U;
  #line 644 
  while ((int)nvm->word_size > (int)i) {
    #line 645 
    dev_spec->shadow_ram[(int)i].modified = (_Bool)0;
    #line 646 
    dev_spec->shadow_ram[(int)i].value = (unsigned short)65535U;
    #line 644 
    i = (u16)((int)i + 1);
  }
  #line 649 
  return 0;
}

#line 659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_init_mac_params_ich8lan(struct e1000_hw *hw)
{
  #line 661 
  struct e1000_mac_info *mac = & hw->mac;
  #line 664 
  hw->phy.media_type = e1000_media_type_copper;
  #line 667 
  mac->mta_reg_count = (unsigned short)32U;
  #line 669 
  mac->rar_entry_count = (unsigned short)7U;
  #line 670 
  if (mac->type == (unsigned int)e1000_ich8lan) 
                                                #line 671 
                                                mac->rar_entry_count = (u16)((int)mac->rar_entry_count - 1);
  #line 673 
  mac->has_fwsm = (_Bool)1;
  #line 675 
  mac->arc_subsystem_valid = (_Bool)0;
  #line 677 
  mac->adaptive_ifs = (_Bool)1;
  #line 680 
  switch ((unsigned int)mac->type) {
    #line 681 
    case (unsigned int)6: 
                          #line 681 
    ;
    #line 682 
    case (unsigned int)7: 
                          #line 682 
    ;
    #line 683 
    case (unsigned int)8: 
                          #line 683 
    ;
    #line 685 
    mac->ops.check_mng_mode = & e1000_check_mng_mode_ich8lan;
    #line 687 
    mac->ops.id_led_init = & e1000e_id_led_init_generic;
    #line 689 
    mac->ops.blink_led = & e1000e_blink_led_generic;
    #line 691 
    mac->ops.setup_led = & e1000e_setup_led_generic;
    #line 693 
    mac->ops.cleanup_led = & e1000_cleanup_led_ich8lan;
    #line 695 
    mac->ops.led_on = & e1000_led_on_ich8lan;
    #line 696 
    mac->ops.led_off = & e1000_led_off_ich8lan;
    #line 697 
    break;
    #line 698 
    case (unsigned int)10: 
                           #line 698 
    ;
    #line 699 
    mac->rar_entry_count = (unsigned short)5U;
    #line 700 
    mac->ops.rar_set = & e1000_rar_set_pch2lan;
    #line 702 
    case (unsigned int)11: 
                           #line 702 
    ;
    #line 703 
    case (unsigned int)12: 
                           #line 703 
    ;
    #line 704 
    case (unsigned int)13: 
                           #line 704 
    ;
    #line 705 
    case (unsigned int)14: 
                           #line 705 
    ;
    #line 706 
    case (unsigned int)9: 
                          #line 706 
    ;
    #line 708 
    mac->ops.check_mng_mode = & e1000_check_mng_mode_pchlan;
    #line 710 
    mac->ops.id_led_init = & e1000_id_led_init_pchlan;
    #line 712 
    mac->ops.setup_led = & e1000_setup_led_pchlan;
    #line 714 
    mac->ops.cleanup_led = & e1000_cleanup_led_pchlan;
    #line 716 
    mac->ops.led_on = & e1000_led_on_pchlan;
    #line 717 
    mac->ops.led_off = & e1000_led_off_pchlan;
    #line 718 
    break;
    #line 719 
    default: 
             #line 719 
    ;
    #line 720 
    break;
  }
  #line 723 
  if (mac->type > (unsigned int)e1000_pch2lan) {
    #line 724 
    mac->rar_entry_count = (unsigned short)12U;
    #line 725 
    mac->ops.rar_set = & e1000_rar_set_pch_lpt;
    #line 726 
    mac->ops.setup_physical_interface = & e1000_setup_copper_link_pch_lpt;
    #line 728 
    mac->ops.rar_get_count = & e1000_rar_get_count_pch_lpt;
  }
  #line 732 
  if (mac->type == (unsigned int)e1000_ich8lan) 
                                                #line 733 
                                                e1000e_set_kmrn_lock_loss_workaround_ich8lan(hw,(_Bool)1);
  #line 735 
  return 0;
}

#line 747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 __e1000_access_emi_reg_locked(struct e1000_hw *hw, u16 address, u16 *data, bool read)
{
  #line 750 
  s32 ret_val;
  #line 752 
  ret_val = e1e_wphy_locked(hw,16U,(unsigned short)((int)address));
  #line 753 
  if (ret_val != 0) 
                    #line 754 
                    return ret_val;
  #line 756 
  if ((int)read != 0) 
                      #line 757 
                      ret_val = e1e_rphy_locked(hw,17U,data); else 
                                                                   #line 759 
                                                                   ret_val = e1e_wphy_locked(hw,17U,(unsigned short)((int)*data));
  #line 761 
  return ret_val;
}

#line 772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_read_emi_reg_locked(struct e1000_hw *hw, u16 addr, u16 *data)
{
  #line 774 
  return __e1000_access_emi_reg_locked(hw,(unsigned short)((int)addr),data,
                                    (_Bool)1);
}

#line 785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_write_emi_reg_locked(struct e1000_hw *hw, u16 addr, u16 data)
{
  #line 787 
  return __e1000_access_emi_reg_locked(hw,(unsigned short)((int)addr),& data,
                                    (_Bool)0);
}

#line 804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_set_eee_pchlan(struct e1000_hw *hw)
{
  #line 807 
  s32 ret_val;
  #line 808 
  u16 lpa;
  #line 808 
  u16 pcs_status;
  #line 808 
  u16 adv;
  #line 808 
  u16 adv_addr;
  #line 808 
  u16 lpi_ctrl;
  #line 808 
  u16 data;
  #line 806 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  #line 810 
  switch ((unsigned int)hw->phy.type) {
    #line 811 
    case (unsigned int)11: 
                           #line 811 
    ;
    #line 812 
    lpa = (unsigned short)1039U;
    #line 813 
    pcs_status = (unsigned short)6190U;
    #line 814 
    adv_addr = (unsigned short)1038U;
    #line 815 
    break;
    #line 816 
    case (unsigned int)12: 
                           #line 816 
    ;
    #line 817 
    lpa = (unsigned short)32770U;
    #line 818 
    pcs_status = (unsigned short)37889U;
    #line 819 
    adv_addr = (unsigned short)32769U;
    #line 820 
    break;
    #line 821 
    default: 
             #line 821 
    ;
    #line 822 
    return 0;
  }
  #line 825 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 826 
  if (ret_val != 0) 
                    #line 827 
                    return ret_val;
  #line 829 
  ret_val = e1e_rphy_locked(hw,24724U,& lpi_ctrl);
  #line 830 
  if (ret_val != 0) 
                    #line 831 
                    goto release;
  #line 834 
  lpi_ctrl = (unsigned short)((unsigned int)lpi_ctrl & 40959U);
  #line 837 
  if (! dev_spec->eee_disable) {
    #line 839 
    ret_val = e1000_read_emi_reg_locked(hw,(unsigned short)((int)lpa),& dev_spec->eee_lp_ability);
    #line 841 
    if (ret_val != 0) 
                      #line 842 
                      goto release;
    #line 845 
    ret_val = e1000_read_emi_reg_locked(hw,(unsigned short)((int)adv_addr),& adv);
    #line 846 
    if (ret_val != 0) 
                      #line 847 
                      goto release;
    #line 852 
    if ((((int)dev_spec->eee_lp_ability & (int)adv) & 4) != 0) 
                                                               #line 853 
                                                               lpi_ctrl = (unsigned short)((unsigned int)lpi_ctrl | 16384U);
    #line 855 
    if ((((int)dev_spec->eee_lp_ability & (int)adv) & 2) != 0) {
      #line 856 
      e1e_rphy_locked(hw,5U,& data);
      #line 857 
      if (((int)data & 256) != 0) 
                                  #line 858 
                                  lpi_ctrl = (unsigned short)((unsigned int)lpi_ctrl | 8192U); else 
                                                                    #line 864 
                                                                    dev_spec->eee_lp_ability = (unsigned short)((unsigned int)dev_spec->eee_lp_ability & 65533U);
    }
  }
  #line 869 
  if (hw->phy.type == (unsigned int)e1000_phy_82579) {
    #line 870 
    ret_val = e1000_read_emi_reg_locked(hw,(unsigned short)17426,& data);
    #line 872 
    if (ret_val != 0) 
                      #line 873 
                      goto release;
    #line 875 
    data = (unsigned short)((unsigned int)data & 65531U);
    #line 876 
    ret_val = e1000_write_emi_reg_locked(hw,(unsigned short)17426,(unsigned short)((int)data));
  }
  #line 881 
  ret_val = e1000_read_emi_reg_locked(hw,(unsigned short)((int)pcs_status),& data);
  #line 882 
  if (ret_val != 0) 
                    #line 883 
                    goto release;
  #line 885 
  ret_val = e1e_wphy_locked(hw,24724U,(unsigned short)((int)lpi_ctrl));
  #line 886 
  release: 
           #line 886 
  ;
  #line 887 
  (*(hw->phy.ops.release))(hw);
  #line 889 
  return ret_val;
}

#line 903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_k1_workaround_lpt_lp(struct e1000_hw *hw, bool link)
{
  #line 908 
  u16 reg;
  #line 905 
  u32 fextnvm6 = __er32(hw,16UL);
  #line 906 
  u32 status = __er32(hw,8UL);
  #line 907 
  s32 ret_val = 0;
  #line 910 
  if ((int)link != 0 && (status & 128U) != 0U) {
    #line 911 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 912 
    if (ret_val != 0) 
                      #line 913 
                      return ret_val;
    #line 915 
    ret_val = e1000e_read_kmrn_reg_locked(hw,7U,& reg);
    #line 918 
    if (ret_val != 0) 
                      #line 919 
                      goto release;
    #line 921 
    ret_val = e1000e_write_kmrn_reg_locked(hw,7U,(unsigned short)((int)reg & 65533));
    #line 926 
    if (ret_val != 0) 
                      #line 927 
                      goto release;
    #line 929 
    usleep_range(10UL,20UL);
    #line 931 
    __ew32(hw,16UL,fextnvm6 | 256U);
    #line 933 
    ret_val = e1000e_write_kmrn_reg_locked(hw,7U,(unsigned short)((int)reg));
    #line 937 
    release: 
             #line 937 
    ;
    #line 938 
    (*(hw->phy.ops.release))(hw);
  }
  else {
    #line 941 
    fextnvm6 &= 4294967039U;
    #line 943 
    if ((hw->phy.revision > 5U || ! link) || (status & 64U) != 0U && (status & 1U) != 0U) 
      #line 946 
      goto update_fextnvm6;
    #line 948 
    ret_val = e1e_rphy(hw,24658U,& reg);
    #line 949 
    if (ret_val != 0) 
                      #line 950 
                      return ret_val;
    #line 953 
    reg = (unsigned short)((unsigned int)reg & 49407U);
    #line 955 
    if ((status & 64U) != 0U) {
      #line 957 
      reg = (unsigned short)((unsigned int)reg | 1280U);
      #line 960 
      fextnvm6 &= 4294966783U;
    }
    else {
      #line 963 
      reg = (unsigned short)((unsigned int)reg | 12800U);
      #line 967 
      fextnvm6 |= 512U;
    }
    #line 970 
    ret_val = e1e_wphy(hw,24658U,(unsigned short)((int)reg));
    #line 971 
    if (ret_val != 0) 
                      #line 972 
                      return ret_val;
    #line 974 
    update_fextnvm6: 
                     #line 974 
    ;
    #line 975 
    __ew32(hw,16UL,fextnvm6);
  }
  #line 978 
  return ret_val;
}

#line 997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_platform_pm_pch_lpt(struct e1000_hw *hw, bool link)
{
  #line 999 
  u32 reg = (unsigned int)((((int)link << 31) | ((int)link << 15)) | 1073741824);
  #line 1001 
  u16 lat_enc = (unsigned short)0U;
  #line 1003 
  if ((int)link != 0) {
    #line 1052 
    unsigned short __UNIQUE_ID___x448;
    #line 1052 
    int tmp_3;
    #line 1004 
    u16 speed;
    #line 1004 
    u16 duplex;
    #line 1005 
    u16 max_snoop;
    #line 1005 
    u16 max_nosnoop;
    #line 1006 
    u16 max_ltr_enc;
    #line 1007 
    u64 value;
    #line 1008 
    u32 rxa;
    #line 1004 
    u16 scale = (unsigned short)0U;
    #line 1010 
    if ((hw->adapter)->max_frame_size == 0U) {
      {
        #line 1011 
        bool branch;
        #line 1011 
        struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"e1000e", .function = (char *)"e1000_platform_pm_pch_lpt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"max_frame_size not set.\n", .lineno = (unsigned int)1011U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1011 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
        #line 1011 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 1011 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,(hw->adapter)->netdev,(char *)"max_frame_size not set.\n");
      }
      #line 1012 
      return -3;
    }
    #line 1015 
    (*(hw->mac.ops.get_link_up_info))(hw,& speed,& duplex);
    #line 1016 
    if ((unsigned int)speed == 0U) {
      {
        #line 1017 
        bool branch_0;
        #line 1017 
        struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"e1000e", .function = (char *)"e1000_platform_pm_pch_lpt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Speed not set.\n", .lineno = (unsigned int)1017U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1017 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
        #line 1017 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 1017 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,(hw->adapter)->netdev,(char *)"Speed not set.\n");
      }
      #line 1018 
      return -3;
    }
    #line 1022 
    rxa = __er32(hw,4096UL) & 65535U;
    #line 1032 
    rxa *= 512U;
    #line 1033 
    if ((hw->adapter)->max_frame_size < rxa) 
                                             #line 1033 
                                             value = (unsigned long long)((rxa - (hw->adapter)->max_frame_size) * (unsigned int)(16000 / (int)speed)); else 
                                                                    #line 1033 
                                                                    value = 0ULL;
    #line 1037 
    while (value > 1023ULL) {
      #line 1038 
      scale = (u16)((int)scale + 1);
      #line 1039 
      value = (value + 31ULL) / 32ULL;
    }
    #line 1041 
    if ((unsigned int)scale > 5U) {
      {
        #line 1042 
        bool branch_1;
        #line 1042 
        struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"e1000e", .function = (char *)"e1000_platform_pm_pch_lpt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Invalid LTR latency scale %d\n", .lineno = (unsigned int)1042U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1042 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
        #line 1042 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 1042 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,(hw->adapter)->netdev,(char *)"Invalid LTR latency scale %d\n",(int)scale);
      }
      #line 1043 
      return -3;
    }
    #line 1045 
    lat_enc = (unsigned short)(((int)scale << 10U) | (int)((unsigned short)value));
    #line 1048 
    pci_read_config_word((hw->adapter)->pdev,168,& max_snoop);
    #line 1050 
    pci_read_config_word((hw->adapter)->pdev,170,& max_nosnoop);
    {
      #line 1052 
      __UNIQUE_ID___x448 = max_snoop;
      #line 1052 
      unsigned short __UNIQUE_ID___y449 = max_nosnoop;
      #line 1052 
      if ((int)__UNIQUE_ID___x448 > (int)__UNIQUE_ID___y449) 
                                                             #line 1052 
                                                             tmp_3 = (int)__UNIQUE_ID___x448; else 
                                                                    #line 1052 
                                                                    tmp_3 = (int)__UNIQUE_ID___y449;
      }
    #line 1052 
    max_ltr_enc = (unsigned short)tmp_3;
    #line 1054 
    if ((int)lat_enc > (int)max_ltr_enc) 
                                         #line 1055 
                                         lat_enc = max_ltr_enc;
  }
  #line 1059 
  reg = (unsigned int)((int)lat_enc | ((int)lat_enc << 16)) | reg;
  #line 1060 
  __ew32(hw,248UL,reg);
  #line 1062 
  return 0;
}

#line 1075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_enable_ulp_lpt_lp(struct e1000_hw *hw, bool to_sx)
{
  #line 1077 
  u32 mac_reg;
  #line 1079 
  u16 phy_reg;
  #line 1078 
  s32 ret_val = 0;
  #line 1080 
  u16 oem_reg = (unsigned short)0U;
  #line 1082 
  if (((((hw->mac.type <= (unsigned int)e1000_pch2lan || (unsigned int)((hw->adapter)->pdev)->device == 5434U) || (unsigned int)((hw->adapter)->pdev)->device == 5435U) || (unsigned int)((hw->adapter)->pdev)->device == 5536U) || (unsigned int)((hw->adapter)->pdev)->device == 5537U) || hw->dev_spec.ich8lan.ulp_state == (unsigned int)e1000_ulp_state_on) 
    #line 1088 
    return 0;
  #line 1090 
  if ((__er32(hw,23380UL) & 32768U) != 0U) {
    #line 1092 
    mac_reg = __er32(hw,23376UL);
    #line 1093 
    mac_reg |= 6144U;
    #line 1094 
    __ew32(hw,23376UL,mac_reg);
    #line 1096 
    goto out;
  }
  #line 1099 
  if (! to_sx) {
    #line 1100 
    int i = 0;
    #line 1103 
    while (1) {
      #line 1103 
      if (! ((__er32(hw,44UL) & 4U) == 0U)) 
                                            #line 1103 
                                            break;
      {
        #line 1108 
        int tmp_1;
        #line 1105 
        if ((__er32(hw,8UL) & 2U) != 0U) 
                                         #line 1106 
                                         return -2;
        #line 1108 
        tmp_1 = i;
        #line 1108 
        i ++;
        #line 1108 
        ;
        #line 1108 
        if (tmp_1 == 100) 
                          #line 1109 
                          break;
        #line 1111 
        msleep(50U);
      }
    }
    {
      #line 1113 
      bool branch;
      #line 1113 
      struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"e1000e", .function = (char *)"e1000_enable_ulp_lpt_lp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"CABLE_DISCONNECTED %s set after %dmsec\n", .lineno = (unsigned int)1113U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1113 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
      #line 1113 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1113 
        char *tmp_4;
        #line 1113 
        ;
        #line 1113 
        if ((__er32(hw,44UL) & 4U) != 0U) 
                                          #line 1113 
                                          tmp_4 = (char *)""; else 
                                                                   #line 1113 
                                                                   tmp_4 = (char *)"not";
        #line 1113 
        ;
        #line 1113 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,(hw->adapter)->netdev,(char *)"CABLE_DISCONNECTED %s set after %dmsec\n",tmp_4,i * 50);
      }
    }
  }
  #line 1118 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 1119 
  if (ret_val != 0) 
                    #line 1120 
                    goto out;
  #line 1123 
  ret_val = e1000_read_phy_reg_hv_locked(hw,24631U,& phy_reg);
  #line 1124 
  if (ret_val != 0) 
                    #line 1125 
                    goto release;
  #line 1126 
  phy_reg = (unsigned short)((unsigned int)phy_reg | 1U);
  #line 1127 
  e1000_write_phy_reg_hv_locked(hw,24631U,(unsigned short)((int)phy_reg));
  #line 1130 
  mac_reg = __er32(hw,24UL);
  #line 1131 
  mac_reg |= 2048U;
  #line 1132 
  __ew32(hw,24UL,mac_reg);
  #line 1137 
  if (hw->phy.type == (unsigned int)e1000_phy_i217 && hw->phy.revision == 6U) {
    #line 1138 
    ret_val = e1000_read_phy_reg_hv_locked(hw,24601U,& oem_reg);
    #line 1140 
    if (ret_val != 0) 
                      #line 1141 
                      goto release;
    #line 1143 
    phy_reg = oem_reg;
    #line 1144 
    phy_reg = (unsigned short)((unsigned int)phy_reg | 68U);
    #line 1146 
    ret_val = e1000_write_phy_reg_hv_locked(hw,24601U,(unsigned short)((int)phy_reg));
    #line 1149 
    if (ret_val != 0) 
                      #line 1150 
                      goto release;
  }
  #line 1156 
  ret_val = e1000_read_phy_reg_hv_locked(hw,24944U,& phy_reg);
  #line 1157 
  if (ret_val != 0) 
                    #line 1158 
                    goto release;
  #line 1159 
  phy_reg = (unsigned short)((unsigned int)phy_reg | 4352U);
  #line 1161 
  if ((int)to_sx != 0) {
    #line 1162 
    if ((__er32(hw,22536UL) & 1U) != 0U) 
                                         #line 1163 
                                         phy_reg = (unsigned short)((unsigned int)phy_reg | 64U); else 
                                                                    #line 1165 
                                                                    phy_reg = (unsigned short)((unsigned int)phy_reg & 65471U);
    #line 1167 
    phy_reg = (unsigned short)((unsigned int)phy_reg | 16U);
    #line 1168 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 65503U);
  }
  else {
    #line 1170 
    phy_reg = (unsigned short)((unsigned int)phy_reg | 32U);
    #line 1171 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 65519U);
    #line 1172 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 65471U);
  }
  #line 1174 
  e1000_write_phy_reg_hv_locked(hw,24944U,(unsigned short)((int)phy_reg));
  #line 1177 
  mac_reg = __er32(hw,228UL);
  #line 1178 
  mac_reg |= 32U;
  #line 1179 
  __ew32(hw,228UL,mac_reg);
  #line 1182 
  phy_reg = (unsigned short)((unsigned int)phy_reg | 1U);
  #line 1183 
  e1000_write_phy_reg_hv_locked(hw,24944U,(unsigned short)((int)phy_reg));
  #line 1185 
  if ((hw->phy.type == (unsigned int)e1000_phy_i217 && hw->phy.revision == 6U) && (int)to_sx != 0) {
    #line 1186 
    if ((__er32(hw,8UL) & 2U) != 0U) {
      #line 1187 
      ret_val = e1000_write_phy_reg_hv_locked(hw,24601U,(unsigned short)((int)oem_reg));
      #line 1189 
      if (ret_val != 0) 
                        #line 1190 
                        goto release;
    }
  }
  #line 1193 
  release: 
           #line 1193 
  ;
  #line 1194 
  (*(hw->phy.ops.release))(hw);
  #line 1195 
  out: 
       #line 1195 
  ;
  #line 1196 
  if (ret_val != 0) {
    #line 1197 
    bool branch_0;
    #line 1197 
    struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"e1000e", .function = (char *)"e1000_enable_ulp_lpt_lp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Error in ULP enable flow: %d\n", .lineno = (unsigned int)1197U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1197 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
    #line 1197 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 1197 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,(hw->adapter)->netdev,(char *)"Error in ULP enable flow: %d\n",ret_val);
  }
  else 
       #line 1199 
       hw->dev_spec.ich8lan.ulp_state = e1000_ulp_state_on;
  #line 1201 
  return ret_val;
}

#line 1219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_disable_ulp_lpt_lp(struct e1000_hw *hw, bool force)
{
  #line 1222 
  u32 mac_reg;
  #line 1223 
  u16 phy_reg;
  #line 1221 
  s32 ret_val = 0;
  #line 1224 
  int i = 0;
  #line 1226 
  if (((((hw->mac.type <= (unsigned int)e1000_pch2lan || (unsigned int)((hw->adapter)->pdev)->device == 5434U) || (unsigned int)((hw->adapter)->pdev)->device == 5435U) || (unsigned int)((hw->adapter)->pdev)->device == 5536U) || (unsigned int)((hw->adapter)->pdev)->device == 5537U) || hw->dev_spec.ich8lan.ulp_state == (unsigned int)e1000_ulp_state_off) 
    #line 1232 
    return 0;
  #line 1234 
  if ((__er32(hw,23380UL) & 32768U) != 0U) {
    #line 1235 
    if ((int)force != 0) {
      #line 1237 
      mac_reg = __er32(hw,23376UL);
      #line 1238 
      mac_reg &= 4294965247U;
      #line 1239 
      mac_reg |= 4096U;
      #line 1240 
      __ew32(hw,23376UL,mac_reg);
    }
    #line 1244 
    while (1) {
      #line 1244 
      if (! ((__er32(hw,23380UL) & 1024U) != 0U)) 
                                                  #line 1244 
                                                  break;
      {
        #line 1245 
        int tmp;
        #line 1245 
        tmp = i;
        #line 1245 
        i ++;
        #line 1245 
        ;
        #line 1245 
        if (tmp == 30) {
          #line 1246 
          ret_val = -2;
          #line 1247 
          goto out;
        }
        #line 1250 
        usleep_range(10000UL,11000UL);
      }
    }
    {
      #line 1252 
      bool branch;
      #line 1252 
      struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"e1000e", .function = (char *)"e1000_disable_ulp_lpt_lp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"ULP_CONFIG_DONE cleared after %dmsec\n", .lineno = (unsigned int)1252U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1252 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
      #line 1252 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1252 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,(hw->adapter)->netdev,(char *)"ULP_CONFIG_DONE cleared after %dmsec\n",i * 10);
    }
    #line 1254 
    if ((int)force != 0) {
      #line 1255 
      mac_reg = __er32(hw,23376UL);
      #line 1256 
      mac_reg &= 4294963199U;
      #line 1257 
      __ew32(hw,23376UL,mac_reg);
    }
    else {
      #line 1260 
      mac_reg = __er32(hw,23376UL);
      #line 1261 
      mac_reg &= 4294965247U;
      #line 1262 
      __ew32(hw,23376UL,mac_reg);
    }
    #line 1265 
    goto out;
  }
  #line 1268 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 1269 
  if (ret_val != 0) 
                    #line 1270 
                    goto out;
  #line 1272 
  if ((int)force != 0) 
                       #line 1274 
                       e1000_toggle_lanphypc_pch_lpt(hw);
  #line 1277 
  ret_val = e1000_read_phy_reg_hv_locked(hw,24631U,& phy_reg);
  #line 1278 
  if (ret_val != 0) {
    #line 1282 
    mac_reg = __er32(hw,24UL);
    #line 1283 
    mac_reg |= 2048U;
    #line 1284 
    __ew32(hw,24UL,mac_reg);
    #line 1286 
    msleep(50U);
    #line 1288 
    ret_val = e1000_read_phy_reg_hv_locked(hw,24631U,& phy_reg);
    #line 1290 
    if (ret_val != 0) 
                      #line 1291 
                      goto release;
  }
  #line 1293 
  phy_reg = (unsigned short)((unsigned int)phy_reg & 65534U);
  #line 1294 
  e1000_write_phy_reg_hv_locked(hw,24631U,(unsigned short)((int)phy_reg));
  #line 1297 
  mac_reg = __er32(hw,24UL);
  #line 1298 
  mac_reg &= 4294965247U;
  #line 1299 
  __ew32(hw,24UL,mac_reg);
  #line 1304 
  ret_val = e1000_read_phy_reg_hv_locked(hw,24657U,& phy_reg);
  #line 1305 
  if (ret_val != 0) 
                    #line 1306 
                    goto release;
  #line 1307 
  phy_reg = (unsigned short)((unsigned int)phy_reg | 16384U);
  #line 1308 
  e1000_write_phy_reg_hv_locked(hw,24657U,(unsigned short)((int)phy_reg));
  #line 1311 
  ret_val = e1000_read_phy_reg_hv_locked(hw,24944U,& phy_reg);
  #line 1312 
  if (ret_val != 0) 
                    #line 1313 
                    goto release;
  #line 1314 
  phy_reg = (unsigned short)((unsigned int)phy_reg & 57995U);
  #line 1322 
  e1000_write_phy_reg_hv_locked(hw,24944U,(unsigned short)((int)phy_reg));
  #line 1325 
  phy_reg = (unsigned short)((unsigned int)phy_reg | 1U);
  #line 1326 
  e1000_write_phy_reg_hv_locked(hw,24944U,(unsigned short)((int)phy_reg));
  #line 1329 
  mac_reg = __er32(hw,228UL);
  #line 1330 
  mac_reg &= 4294967263U;
  #line 1331 
  __ew32(hw,228UL,mac_reg);
  #line 1333 
  release: 
           #line 1333 
  ;
  #line 1334 
  (*(hw->phy.ops.release))(hw);
  #line 1335 
  if ((int)force != 0) {
    #line 1336 
    e1000_phy_hw_reset(hw);
    #line 1337 
    msleep(50U);
  }
  #line 1339 
  out: 
       #line 1339 
  ;
  #line 1340 
  if (ret_val != 0) {
    #line 1341 
    bool branch_0;
    #line 1341 
    struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"e1000e", .function = (char *)"e1000_disable_ulp_lpt_lp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Error in ULP disable flow: %d\n", .lineno = (unsigned int)1341U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1341 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
    #line 1341 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 1341 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,(hw->adapter)->netdev,(char *)"Error in ULP disable flow: %d\n",ret_val);
  }
  else 
       #line 1343 
       hw->dev_spec.ich8lan.ulp_state = e1000_ulp_state_off;
  #line 1345 
  return ret_val;
}

#line 1356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_check_for_copper_link_ich8lan(struct e1000_hw *hw)
{
  #line 1359 
  s32 ret_val;
  #line 1360 
  u16 emi_addr;
  #line 1361 
  bool link;
  #line 1362 
  u16 phy_reg;
  #line 1358 
  struct e1000_mac_info *mac = & hw->mac;
  #line 1359 
  s32 tipg_reg = 0;
  #line 1360 
  u16 emi_val = (unsigned short)0U;
  #line 1369 
  if (! mac->get_link_status) 
                              #line 1370 
                              return 0;
  #line 1371 
  mac->get_link_status = (_Bool)0;
  #line 1377 
  ret_val = e1000e_phy_has_link_generic(hw,1U,0U,& link);
  #line 1378 
  if (ret_val != 0) 
                    #line 1379 
                    goto out;
  #line 1381 
  if (hw->mac.type == (unsigned int)e1000_pchlan) {
    #line 1382 
    ret_val = e1000_k1_gig_workaround_hv(hw,(_Bool)((bool)((int)link) != 0));
    #line 1383 
    if (ret_val != 0) 
                      #line 1384 
                      goto out;
  }
  #line 1391 
  if (hw->mac.type > (unsigned int)e1000_pchlan && (int)link != 0) {
    #line 1392 
    u16 speed;
    #line 1392 
    u16 duplex;
    #line 1394 
    e1000e_get_speed_and_duplex_copper(hw,& speed,& duplex);
    #line 1395 
    tipg_reg = (int)__er32(hw,1040UL);
    #line 1396 
    tipg_reg &= -1024;
    #line 1398 
    if ((unsigned int)duplex == 1U && (unsigned int)speed == 10U) {
      #line 1399 
      tipg_reg |= 255;
      #line 1401 
      emi_val = (unsigned short)0U;
    }
    else 
      #line 1402 
      if ((hw->mac.type > (unsigned int)e1000_pch_lpt && (unsigned int)duplex == 2U) && (unsigned int)speed != 1000U) {
        #line 1404 
        tipg_reg |= 12;
        #line 1405 
        emi_val = (unsigned short)1U;
      }
      else {
        #line 1409 
        tipg_reg |= 8;
        #line 1410 
        emi_val = (unsigned short)1U;
      }
    #line 1413 
    __ew32(hw,1040UL,(unsigned int)tipg_reg);
    #line 1415 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 1416 
    if (ret_val != 0) 
                      #line 1417 
                      goto out;
    #line 1419 
    if (hw->mac.type == (unsigned int)e1000_pch2lan) 
                                                     #line 1420 
                                                     emi_addr = (unsigned short)13330U; else 
                                                                    #line 1422 
                                                                    emi_addr = (unsigned short)45580U;
    #line 1423 
    ret_val = e1000_write_emi_reg_locked(hw,(unsigned short)((int)emi_addr),(unsigned short)((int)emi_val));
    #line 1425 
    if (hw->mac.type > (unsigned int)e1000_pch2lan) {
      #line 1426 
      u16 phy_reg_0;
      #line 1428 
      e1e_rphy_locked(hw,24732U,& phy_reg_0);
      #line 1429 
      phy_reg_0 = (unsigned short)((unsigned int)phy_reg_0 & 63488U);
      #line 1430 
      if ((unsigned int)speed == 100U || (unsigned int)speed == 10U) 
        #line 1431 
        phy_reg_0 = (unsigned short)((unsigned int)phy_reg_0 | 1000U); else 
                                                                    #line 1433 
                                                                    phy_reg_0 = (unsigned short)((unsigned int)phy_reg_0 | 250U);
      #line 1434 
      e1e_wphy_locked(hw,24732U,(unsigned short)((int)phy_reg_0));
      #line 1436 
      if ((unsigned int)speed == 1000U) {
        #line 1437 
        (*(hw->phy.ops.read_reg_locked))(hw,24657U,& phy_reg_0);
        #line 1440 
        phy_reg_0 = (unsigned short)((unsigned int)phy_reg_0 | 512U);
        #line 1442 
        (*(hw->phy.ops.write_reg_locked))(hw,24657U,(unsigned short)((int)phy_reg_0));
      }
    }
    #line 1446 
    (*(hw->phy.ops.release))(hw);
    #line 1448 
    if (ret_val != 0) 
                      #line 1449 
                      goto out;
    #line 1451 
    if (hw->mac.type > (unsigned int)e1000_pch_lpt) {
      #line 1452 
      u16 data;
      #line 1453 
      u16 ptr_gap;
      #line 1455 
      if ((unsigned int)speed == 1000U) {
        #line 1456 
        ret_val = (*(hw->phy.ops.acquire))(hw);
        #line 1457 
        if (ret_val != 0) 
                          #line 1458 
                          goto out;
        #line 1460 
        ret_val = e1e_rphy_locked(hw,24852U,& data);
        #line 1463 
        if (ret_val != 0) {
          #line 1464 
          (*(hw->phy.ops.release))(hw);
          #line 1465 
          goto out;
        }
        #line 1468 
        ptr_gap = (unsigned short)((unsigned int)((unsigned short)((int)data >> 2)) & 1023U);
        #line 1469 
        if ((unsigned int)ptr_gap <= 23U) {
          #line 1470 
          data = (unsigned short)((unsigned int)data & 61443U);
          #line 1471 
          data = (unsigned short)((unsigned int)data | 96U);
          #line 1472 
          ret_val = e1e_wphy_locked(hw,24852U,(unsigned short)((int)data));
        }
        #line 1477 
        (*(hw->phy.ops.release))(hw);
        #line 1478 
        if (ret_val != 0) 
                          #line 1479 
                          goto out;
      }
      else {
        #line 1481 
        ret_val = (*(hw->phy.ops.acquire))(hw);
        #line 1482 
        if (ret_val != 0) 
                          #line 1483 
                          goto out;
        #line 1485 
        ret_val = e1e_wphy_locked(hw,24852U,(unsigned short)49187);
        #line 1488 
        (*(hw->phy.ops.release))(hw);
        #line 1489 
        if (ret_val != 0) 
                          #line 1490 
                          goto out;
      }
    }
  }
  #line 1501 
  if (hw->mac.type > (unsigned int)e1000_pch2lan) {
    #line 1502 
    u32 mac_reg;
    #line 1504 
    mac_reg = __er32(hw,36UL);
    #line 1505 
    mac_reg &= 4294967288U;
    #line 1506 
    mac_reg |= 7U;
    #line 1507 
    __ew32(hw,36UL,mac_reg);
  }
  #line 1511 
  if (((unsigned int)((hw->adapter)->pdev)->device + 60071U <= 1U || (unsigned int)((hw->adapter)->pdev)->device == 5538U) || (unsigned int)((hw->adapter)->pdev)->device == 5539U) {
    #line 1515 
    ret_val = e1000_k1_workaround_lpt_lp(hw,(_Bool)((bool)((int)link) != 0));
    #line 1516 
    if (ret_val != 0) 
                      #line 1517 
                      goto out;
  }
  #line 1519 
  if (hw->mac.type > (unsigned int)e1000_pch2lan) {
    #line 1523 
    ret_val = e1000_platform_pm_pch_lpt(hw,(_Bool)((bool)((int)link) != 0));
    #line 1524 
    if (ret_val != 0) 
                      #line 1525 
                      goto out;
  }
  #line 1529 
  hw->dev_spec.ich8lan.eee_lp_ability = (unsigned short)0U;
  #line 1531 
  if (hw->mac.type > (unsigned int)e1000_pch2lan) {
    #line 1532 
    u32 fextnvm6 = __er32(hw,16UL);
    #line 1534 
    if (hw->mac.type == (unsigned int)e1000_pch_spt) {
      #line 1536 
      u32 pcieanacfg = __er32(hw,3864UL);
      #line 1538 
      if ((pcieanacfg & 2147483648U) != 0U) 
                                            #line 1539 
                                            fextnvm6 |= 2147483648U; else 
                                                                    #line 1541 
                                                                    fextnvm6 &= 2147483647U;
    }
    #line 1544 
    __ew32(hw,16UL,fextnvm6);
  }
  #line 1547 
  if (! link) 
              #line 1548 
              goto out;
  #line 1550 
  switch ((unsigned int)hw->mac.type) {
    #line 1551 
    case (unsigned int)10: 
                           #line 1551 
    ;
    #line 1552 
    ret_val = e1000_k1_workaround_lv(hw);
    #line 1553 
    if (ret_val != 0) 
                      #line 1554 
                      return ret_val;
    #line 1556 
    case (unsigned int)9: 
                          #line 1556 
    ;
    #line 1557 
    if (hw->phy.type == (unsigned int)e1000_phy_82578) {
      #line 1558 
      ret_val = e1000_link_stall_workaround_hv(hw);
      #line 1559 
      if (ret_val != 0) 
                        #line 1560 
                        return ret_val;
    }
    #line 1568 
    e1e_rphy(hw,24656U,& phy_reg);
    #line 1569 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 36863U);
    #line 1571 
    if ((__er32(hw,8UL) & 1U) != 1U) 
                                     #line 1572 
                                     phy_reg = (unsigned short)((unsigned int)phy_reg | 4096U);
    #line 1574 
    e1e_wphy(hw,24656U,(unsigned short)((int)phy_reg));
    #line 1575 
    break;
    #line 1576 
    default: 
             #line 1576 
    ;
    #line 1577 
    break;
  }
  #line 1583 
  e1000e_check_downshift(hw);
  #line 1586 
  if (hw->phy.type > (unsigned int)e1000_phy_82579) {
    #line 1587 
    ret_val = e1000_set_eee_pchlan(hw);
    #line 1588 
    if (ret_val != 0) 
                      #line 1589 
                      return ret_val;
  }
  #line 1595 
  if (! mac->autoneg) 
                      #line 1596 
                      return -3;
  #line 1602 
  (*(mac->ops.config_collision_dist))(hw);
  #line 1609 
  ret_val = e1000e_config_fc_after_link_up(hw);
  #line 1610 
  if (ret_val != 0) {
    #line 1611 
    bool branch;
    #line 1611 
    struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"e1000e", .function = (char *)"e1000_check_for_copper_link_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Error configuring flow control\n", .lineno = (unsigned int)1611U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1611 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
    #line 1611 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1611 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,(hw->adapter)->netdev,(char *)"Error configuring flow control\n");
  }
  #line 1613 
  return ret_val;
  #line 1615 
  out: 
       #line 1615 
  ;
  #line 1616 
  mac->get_link_status = (_Bool)1;
  #line 1617 
  return ret_val;
}

#line 1620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_get_variants_ich8lan(struct e1000_adapter *adapter)
{
  #line 1623 
  s32 rc;
  #line 1622 
  struct e1000_hw *hw = & adapter->hw;
  #line 1625 
  rc = e1000_init_mac_params_ich8lan(hw);
  #line 1626 
  if (rc != 0) 
               #line 1627 
               return rc;
  #line 1629 
  rc = e1000_init_nvm_params_ich8lan(hw);
  #line 1630 
  if (rc != 0) 
               #line 1631 
               return rc;
  #line 1633 
  switch ((unsigned int)hw->mac.type) {
    #line 1634 
    case (unsigned int)6: 
                          #line 1634 
    ;
    #line 1635 
    case (unsigned int)7: 
                          #line 1635 
    ;
    #line 1636 
    case (unsigned int)8: 
                          #line 1636 
    ;
    #line 1637 
    rc = e1000_init_phy_params_ich8lan(hw);
    #line 1638 
    break;
    #line 1639 
    case (unsigned int)9: 
                          #line 1639 
    ;
    #line 1640 
    case (unsigned int)10: 
                           #line 1640 
    ;
    #line 1641 
    case (unsigned int)11: 
                           #line 1641 
    ;
    #line 1642 
    case (unsigned int)12: 
                           #line 1642 
    ;
    #line 1643 
    case (unsigned int)13: 
                           #line 1643 
    ;
    #line 1644 
    case (unsigned int)14: 
                           #line 1644 
    ;
    #line 1645 
    rc = e1000_init_phy_params_pchlan(hw);
    #line 1646 
    break;
    #line 1647 
    default: 
             #line 1647 
    ;
    #line 1648 
    break;
  }
  #line 1650 
  if (rc != 0) 
               #line 1651 
               return rc;
  #line 1656 
  if (adapter->hw.phy.type == (unsigned int)e1000_phy_ife) 
                                                           #line 1656 
                                                           goto _LOR;
  else 
    #line 1656 
    if (adapter->hw.mac.type > (unsigned int)e1000_pchlan) {
      #line 1657 
      if ((__er32(hw,24UL) & 4096U) == 0U) {
        #line 1656 
        _LOR: {
                #line 1659 
                adapter->flags &= 4294967167U;
                #line 1660 
                adapter->max_hw_frame_size = 1522U;
                #line 1662 
                hw->mac.ops.blink_led = (s32 (*)(struct e1000_hw *))0;
              }
      }
    }
  #line 1665 
  if (adapter->hw.mac.type == (unsigned int)e1000_ich8lan && adapter->hw.phy.type != (unsigned int)e1000_phy_ife) 
    #line 1667 
    adapter->flags |= 33554432U;
  #line 1670 
  if (adapter->hw.mac.type == (unsigned int)e1000_pch2lan) {
    #line 1670 
    if ((__er32(hw,23380UL) & 32768U) != 0U) 
                                             #line 1672 
                                             adapter->flags2 |= 2048U;
  }
  #line 1674 
  return 0;
}

#line 1677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static struct mutex nvm_mutex = {.wait_lock = {.__anonCompField_spinlock_25 = {.rlock = {.magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.name = (char *)"nvm_mutex.wait_lock"}}}}, .wait_list = {.next = & nvm_mutex.wait_list, .prev = & nvm_mutex.wait_list}, .magic = (void *)(& nvm_mutex), .dep_map = {.name = (char *)"nvm_mutex"}};
#line 1685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_acquire_nvm_ich8lan(struct e1000_hw *hw)
{
  #line 1687 
  cif_mutex_lock_nvm_mutex(& nvm_mutex);
  #line 1689 
  return 0;
}

#line 1698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_release_nvm_ich8lan(struct e1000_hw *hw)
{
  #line 1700 
  cif_mutex_unlock_nvm_mutex(& nvm_mutex);
  #line 1701 
  return;
}

#line 1710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_acquire_swflag_ich8lan(struct e1000_hw *hw)
{
  #line 1712 
  u32 extcnf_ctrl;
  #line 1712 
  u32 timeout = 100U;
  #line 1713 
  s32 ret_val = 0;
  #line 1715 
  if ((int)test_and_set_bit(2L,& (hw->adapter)->state) != 0) {
    {
      #line 1717 
      bool branch;
      #line 1717 
      struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"e1000e", .function = (char *)"e1000_acquire_swflag_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"contention for Phy access\n", .lineno = (unsigned int)1717U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1717 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
      #line 1717 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1717 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug455,(hw->adapter)->netdev,(char *)"contention for Phy access\n");
    }
    #line 1718 
    return -2;
  }
  #line 1721 
  while (timeout != 0U) {
    #line 1722 
    extcnf_ctrl = __er32(hw,3840UL);
    #line 1723 
    if ((extcnf_ctrl & 32U) == 0U) 
                                   #line 1724 
                                   break;
    #line 1726 
    __const_udelay(4295000UL);
    #line 1727 
    timeout --;
  }
  #line 1730 
  if (timeout == 0U) {
    {
      #line 1731 
      bool branch_0;
      #line 1731 
      struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"e1000e", .function = (char *)"e1000_acquire_swflag_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"SW has already locked the resource.\n", .lineno = (unsigned int)1731U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1731 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
      #line 1731 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1731 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug456,(hw->adapter)->netdev,(char *)"SW has already locked the resource.\n");
    }
    #line 1732 
    ret_val = -3;
    #line 1733 
    goto out;
  }
  #line 1736 
  timeout = 1000U;
  #line 1738 
  extcnf_ctrl |= 32U;
  #line 1739 
  __ew32(hw,3840UL,extcnf_ctrl);
  #line 1741 
  while (timeout != 0U) {
    #line 1742 
    extcnf_ctrl = __er32(hw,3840UL);
    #line 1743 
    if ((extcnf_ctrl & 32U) != 0U) 
                                   #line 1744 
                                   break;
    #line 1746 
    __const_udelay(4295000UL);
    #line 1747 
    timeout --;
  }
  #line 1750 
  if (timeout == 0U) {
    {
      #line 1751 
      bool branch_1;
      #line 1751 
      struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"e1000e", .function = (char *)"e1000_acquire_swflag_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Failed to acquire the semaphore, FW or HW has it: FWSM=0x%8.8x EXTCNF_CTRL=0x%8.8x)\n", .lineno = (unsigned int)1751U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1751 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
      #line 1751 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 1751 
        ;
        #line 1751 
        ;
        #line 1751 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,(hw->adapter)->netdev,(char *)"Failed to acquire the semaphore, FW or HW has it: FWSM=0x%8.8x EXTCNF_CTRL=0x%8.8x)\n",__er32(hw,23380UL),extcnf_ctrl);
      }
    }
    #line 1753 
    extcnf_ctrl &= 4294967263U;
    #line 1754 
    __ew32(hw,3840UL,extcnf_ctrl);
    #line 1755 
    ret_val = -3;
    #line 1756 
    goto out;
  }
  #line 1759 
  out: 
       #line 1759 
  ;
  #line 1760 
  if (ret_val != 0) 
                    #line 1761 
                    cif_clear_bit(2L,& (hw->adapter)->state);
  #line 1763 
  return ret_val;
}

#line 1773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_release_swflag_ich8lan(struct e1000_hw *hw)
{
  #line 1775 
  u32 extcnf_ctrl;
  #line 1777 
  extcnf_ctrl = __er32(hw,3840UL);
  #line 1779 
  if ((extcnf_ctrl & 32U) != 0U) {
    #line 1780 
    extcnf_ctrl &= 4294967263U;
    #line 1781 
    __ew32(hw,3840UL,extcnf_ctrl);
  }
  else {
    #line 1783 
    bool branch;
    #line 1783 
    struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"e1000e", .function = (char *)"e1000_release_swflag_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Semaphore unexpectedly released by sw/fw/hw\n", .lineno = (unsigned int)1783U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1783 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
    #line 1783 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1783 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug458,(hw->adapter)->netdev,(char *)"Semaphore unexpectedly released by sw/fw/hw\n");
  }
  #line 1786 
  cif_clear_bit(2L,& (hw->adapter)->state);
  #line 1787 
  return;
}

#line 1797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static bool e1000_check_mng_mode_ich8lan(struct e1000_hw *hw)
{
  #line 1799 
  u32 fwsm;
  #line 1801 
  fwsm = __er32(hw,23380UL);
  #line 1802 
  return (_Bool)(((fwsm & 32768U) != 0U && (fwsm & 14U) == 4U) != 0);
}

#line 1815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static bool e1000_check_mng_mode_pchlan(struct e1000_hw *hw)
{
  #line 1817 
  u32 fwsm;
  #line 1819 
  fwsm = __er32(hw,23380UL);
  #line 1820 
  return (_Bool)(((fwsm & 32768U) != 0U && (fwsm & 4U) != 0U) != 0);
}

#line 1835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static int e1000_rar_set_pch2lan(struct e1000_hw *hw, u8 *addr, u32 index)
{
  #line 1837 
  u32 rar_low;
  #line 1837 
  u32 rar_high;
  #line 1842 
  rar_low = (((unsigned int)*addr | ((unsigned int)*(addr + 1U) << 8)) | ((unsigned int)*(addr + 2U) << 16)) | ((unsigned int)*(addr + 3U) << 24);
  #line 1846 
  rar_high = (unsigned int)*(addr + 4U) | ((unsigned int)*(addr + 5U) << 8);
  #line 1849 
  if (rar_low != 0U || rar_high != 0U) 
                                       #line 1850 
                                       rar_high |= 2147483648U;
  #line 1852 
  if (index == 0U) {
    #line 1853 
    u32 tmp;
    #line 1855 
    u32 tmp_0;
    #line 1853 
    ;
    #line 1853 
    if (index <= 15U) 
                      #line 1853 
                      tmp = (index + 2688U) * 8U; else 
                                                       #line 1853 
                                                       tmp = (index + 2700U) * 8U;
    #line 1853 
    ;
    #line 1853 
    __ew32(hw,(unsigned long)tmp,rar_low);
    #line 1854 
    __er32(hw,8UL);
    #line 1855 
    ;
    #line 1855 
    if (index <= 15U) 
                      #line 1855 
                      tmp_0 = index * 8U + 21508U; else 
                                                        #line 1855 
                                                        tmp_0 = (index + 4294967280U) * 8U + 21732U;
    #line 1855 
    ;
    #line 1855 
    __ew32(hw,(unsigned long)tmp_0,rar_high);
    #line 1856 
    __er32(hw,8UL);
    #line 1857 
    return 0;
  }
  #line 1863 
  if ((unsigned int)hw->mac.rar_entry_count > index) {
    #line 1864 
    s32 ret_val;
    #line 1866 
    ret_val = e1000_acquire_swflag_ich8lan(hw);
    #line 1867 
    if (ret_val != 0) 
                      #line 1868 
                      goto out;
    #line 1870 
    __ew32(hw,(unsigned long)((index + 2694U) * 8U),rar_low);
    #line 1871 
    __er32(hw,8UL);
    #line 1872 
    __ew32(hw,(unsigned long)((index + 4294967295U) * 8U + 21564U),rar_high);
    #line 1873 
    __er32(hw,8UL);
    #line 1875 
    e1000_release_swflag_ich8lan(hw);
    #line 1878 
    ;
    #line 1878 
    if (__er32(hw,(unsigned long)((index + 2694U) * 8U)) == rar_low) {
      #line 1878 
      ;
      #line 1878 
      if (__er32(hw,(unsigned long)((index + 4294967295U) * 8U + 21564U)) == rar_high) 
        #line 1880 
        return 0;
    }
    {
      #line 1882 
      bool branch;
      #line 1882 
      struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"e1000e", .function = (char *)"e1000_rar_set_pch2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"SHRA[%d] might be locked by ME - FWSM=0x%8.8x\n", .lineno = (unsigned int)1882U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1882 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
      #line 1882 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1882 
        ;
        #line 1882 
        ;
        #line 1882 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug459,(hw->adapter)->netdev,(char *)"SHRA[%d] might be locked by ME - FWSM=0x%8.8x\n",index + 4294967295U,__er32(hw,23380UL));
      }
    }
  }
  #line 1886 
  out: 
       #line 1886 
  ;
  {
    #line 1887 
    bool branch_0;
    #line 1887 
    struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"e1000e", .function = (char *)"e1000_rar_set_pch2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Failed to write receive address at index %d\n", .lineno = (unsigned int)1887U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1887 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
    #line 1887 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 1887 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug460,(hw->adapter)->netdev,(char *)"Failed to write receive address at index %d\n",index);
  }
  #line 1888 
  return -3;
}

#line 1901  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static u32 e1000_rar_get_count_pch_lpt(struct e1000_hw *hw)
{
  #line 1903 
  u32 wlock_mac;
  #line 1904 
  u32 num_entries;
  #line 1906 
  wlock_mac = __er32(hw,23380UL) & 896U;
  #line 1907 
  wlock_mac >>= 7;
  #line 1909 
  switch (wlock_mac) {
    #line 1910 
    case (u32)0: 
                 #line 1910 
    ;
    #line 1912 
    num_entries = (unsigned int)hw->mac.rar_entry_count;
    #line 1913 
    break;
    #line 1914 
    case (u32)1: 
                 #line 1914 
    ;
    #line 1916 
    num_entries = 1U;
    #line 1917 
    break;
    #line 1918 
    default: 
             #line 1918 
    ;
    #line 1920 
    num_entries = wlock_mac + 1U;
    #line 1921 
    break;
  }
  #line 1924 
  return num_entries;
}

#line 1938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static int e1000_rar_set_pch_lpt(struct e1000_hw *hw, u8 *addr, u32 index)
{
  #line 1940 
  u32 rar_low;
  #line 1940 
  u32 rar_high;
  #line 1941 
  u32 wlock_mac;
  #line 1946 
  rar_low = (((unsigned int)*addr | ((unsigned int)*(addr + 1U) << 8)) | ((unsigned int)*(addr + 2U) << 16)) | ((unsigned int)*(addr + 3U) << 24);
  #line 1949 
  rar_high = (unsigned int)*(addr + 4U) | ((unsigned int)*(addr + 5U) << 8);
  #line 1952 
  if (rar_low != 0U || rar_high != 0U) 
                                       #line 1953 
                                       rar_high |= 2147483648U;
  #line 1955 
  if (index == 0U) {
    #line 1956 
    u32 tmp;
    #line 1958 
    u32 tmp_0;
    #line 1956 
    ;
    #line 1956 
    if (index <= 15U) 
                      #line 1956 
                      tmp = (index + 2688U) * 8U; else 
                                                       #line 1956 
                                                       tmp = (index + 2700U) * 8U;
    #line 1956 
    ;
    #line 1956 
    __ew32(hw,(unsigned long)tmp,rar_low);
    #line 1957 
    __er32(hw,8UL);
    #line 1958 
    ;
    #line 1958 
    if (index <= 15U) 
                      #line 1958 
                      tmp_0 = index * 8U + 21508U; else 
                                                        #line 1958 
                                                        tmp_0 = (index + 4294967280U) * 8U + 21732U;
    #line 1958 
    ;
    #line 1958 
    __ew32(hw,(unsigned long)tmp_0,rar_high);
    #line 1959 
    __er32(hw,8UL);
    #line 1960 
    return 0;
  }
  #line 1966 
  if ((unsigned int)hw->mac.rar_entry_count > index) {
    #line 1967 
    wlock_mac = __er32(hw,23380UL) & 896U;
    #line 1968 
    wlock_mac >>= 7;
    #line 1971 
    if (wlock_mac == 1U) 
                         #line 1972 
                         goto out;
    #line 1974 
    if (wlock_mac == 0U || index <= wlock_mac) {
      #line 1975 
      s32 ret_val;
      #line 1977 
      ret_val = e1000_acquire_swflag_ich8lan(hw);
      #line 1979 
      if (ret_val != 0) 
                        #line 1980 
                        goto out;
      #line 1982 
      __ew32(hw,(unsigned long)((index + 2688U) * 8U),rar_low);
      #line 1983 
      __er32(hw,8UL);
      #line 1984 
      __ew32(hw,(unsigned long)((index + 4294967295U) * 8U + 21516U),rar_high);
      #line 1985 
      __er32(hw,8UL);
      #line 1987 
      e1000_release_swflag_ich8lan(hw);
      #line 1990 
      ;
      #line 1990 
      if (__er32(hw,(unsigned long)((index + 2688U) * 8U)) == rar_low) {
        #line 1990 
        ;
        #line 1990 
        if (__er32(hw,(unsigned long)((index + 4294967295U) * 8U + 21516U)) == rar_high) 
          #line 1992 
          return 0;
      }
    }
  }
  #line 1996 
  out: 
       #line 1996 
  ;
  {
    #line 1997 
    bool branch;
    #line 1997 
    struct _ddebug __UNIQUE_ID_ddebug461 = {.modname = (char *)"e1000e", .function = (char *)"e1000_rar_set_pch_lpt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Failed to write receive address at index %d\n", .lineno = (unsigned int)1997U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1997 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug461.key.dd_key_false.key,(_Bool)0);
    #line 1997 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1997 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug461,(hw->adapter)->netdev,(char *)"Failed to write receive address at index %d\n",index);
  }
  #line 1998 
  return -3;
}

#line 2009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_check_reset_block_ich8lan(struct e1000_hw *hw)
{
  #line 2017 
  int tmp_1;
  #line 2011 
  bool blocked = (_Bool)0;
  #line 2012 
  int i = 0;
  #line 2014 
  while (1) {
    #line 2014 
    blocked = (_Bool)((__er32(hw,23380UL) & 64U) == 0U);
    #line 2014 
    if ((int)blocked != 0) {
      #line 2014 
      int tmp_0;
      #line 2014 
      tmp_0 = i;
      #line 2014 
      i ++;
      #line 2014 
      ;
      #line 2014 
      if (! (tmp_0 <= 29)) 
                           #line 2014 
                           break;
    }
    else 
         #line 2014 
         break;
    #line 2016 
    usleep_range(10000UL,11000UL);
  }
  #line 2017 
  if ((int)blocked != 0) 
                         #line 2017 
                         tmp_1 = 12; else 
                                          #line 2017 
                                          tmp_1 = 0;
  #line 2017 
  return tmp_1;
}

#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_write_smbus_addr(struct e1000_hw *hw)
{
  #line 2029 
  u16 phy_data;
  #line 2033 
  s32 ret_val;
  #line 2030 
  u32 strap = __er32(hw,12UL);
  #line 2031 
  u32 freq = (strap >> 12) & 3U;
  #line 2035 
  strap &= 16646144U;
  #line 2037 
  ret_val = e1000_read_phy_reg_hv_locked(hw,24602U,& phy_data);
  #line 2038 
  if (ret_val != 0) 
                    #line 2039 
                    return ret_val;
  #line 2041 
  phy_data = (unsigned short)((unsigned int)phy_data & 65408U);
  #line 2042 
  phy_data = (unsigned short)((int)((unsigned short)(strap >> 17)) | (int)phy_data);
  #line 2043 
  phy_data = (unsigned short)((unsigned int)phy_data | 640U);
  #line 2045 
  if (hw->phy.type == (unsigned int)e1000_phy_i217) {
    #line 2047 
    u32 tmp_1;
    #line 2047 
    tmp_1 = freq;
    #line 2047 
    freq --;
    #line 2047 
    ;
    #line 2047 
    if (tmp_1 != 0U) {
      #line 2048 
      phy_data = (unsigned short)((unsigned int)phy_data & 61183U);
      #line 2049 
      phy_data = (unsigned short)(((unsigned int)((int)((unsigned short)freq) << 8U) & 256U) | (unsigned int)phy_data);
      #line 2051 
      phy_data = (unsigned short)(((unsigned int)((int)((unsigned short)freq) << 11U) & 4096U) | (unsigned int)phy_data);
    }
    else {
      #line 2054 
      bool branch;
      #line 2054 
      struct _ddebug __UNIQUE_ID_ddebug462 = {.modname = (char *)"e1000e", .function = (char *)"e1000_write_smbus_addr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Unsupported SMB frequency in PHY\n", .lineno = (unsigned int)2054U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2054 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug462.key.dd_key_false.key,(_Bool)0);
      #line 2054 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2054 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug462,(hw->adapter)->netdev,(char *)"Unsupported SMB frequency in PHY\n");
    }
  }
  #line 2058 
  return e1000_write_phy_reg_hv_locked(hw,24602U,
                                      (unsigned short)((int)phy_data));
}

#line 2068  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_sw_lcd_config_ich8lan(struct e1000_hw *hw)
{
  #line 2071 
  u32 i;
  #line 2071 
  u32 data;
  #line 2071 
  u32 cnf_size;
  #line 2071 
  u32 cnf_base_addr;
  #line 2071 
  u32 sw_cfg_mask;
  #line 2073 
  u16 word_addr;
  #line 2073 
  u16 reg_data;
  #line 2073 
  u16 reg_addr;
  #line 2070 
  struct e1000_phy_info *phy = & hw->phy;
  #line 2072 
  s32 ret_val = 0;
  #line 2073 
  u16 phy_page = (unsigned short)0U;
  #line 2081 
  switch ((unsigned int)hw->mac.type) {
    #line 2082 
    case (unsigned int)6: 
                          #line 2082 
    ;
    #line 2083 
    if (phy->type != (unsigned int)e1000_phy_igp_3) 
                                                    #line 2084 
                                                    return ret_val;
    #line 2086 
    if ((unsigned int)((hw->adapter)->pdev)->device + 61366U <= 1U) {
      #line 2088 
      sw_cfg_mask = 1U;
      #line 2089 
      break;
    }
    #line 2092 
    case (unsigned int)9: 
                          #line 2092 
    ;
    #line 2093 
    case (unsigned int)10: 
                           #line 2093 
    ;
    #line 2094 
    case (unsigned int)11: 
                           #line 2094 
    ;
    #line 2095 
    case (unsigned int)12: 
                           #line 2095 
    ;
    #line 2096 
    case (unsigned int)13: 
                           #line 2096 
    ;
    #line 2097 
    case (unsigned int)14: 
                           #line 2097 
    ;
    #line 2098 
    sw_cfg_mask = 134217728U;
    #line 2099 
    break;
    #line 2100 
    default: 
             #line 2100 
    ;
    #line 2101 
    return ret_val;
  }
  #line 2104 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 2105 
  if (ret_val != 0) 
                    #line 2106 
                    return ret_val;
  #line 2108 
  data = __er32(hw,40UL);
  #line 2109 
  if ((data & sw_cfg_mask) == 0U) 
                                  #line 2110 
                                  goto release;
  #line 2115 
  data = __er32(hw,3840UL);
  #line 2116 
  if (hw->mac.type <= (unsigned int)e1000_pchlan && (data & 1U) != 0U) 
    #line 2118 
    goto release;
  #line 2120 
  cnf_size = __er32(hw,3848UL);
  #line 2121 
  cnf_size &= 16711680U;
  #line 2122 
  cnf_size >>= 16;
  #line 2123 
  if (cnf_size == 0U) 
                      #line 2124 
                      goto release;
  #line 2126 
  cnf_base_addr = data & 268369920U;
  #line 2127 
  cnf_base_addr >>= 16;
  #line 2129 
  if (hw->mac.type == (unsigned int)e1000_pchlan && (data & 8U) == 0U || hw->mac.type > (unsigned int)e1000_pchlan) {
    #line 2137 
    ret_val = e1000_write_smbus_addr(hw);
    #line 2138 
    if (ret_val != 0) 
                      #line 2139 
                      goto release;
    #line 2141 
    data = __er32(hw,3584UL);
    #line 2142 
    ret_val = e1000_write_phy_reg_hv_locked(hw,24606U,(unsigned short)((int)((unsigned short)data)));
    #line 2144 
    if (ret_val != 0) 
                      #line 2145 
                      goto release;
  }
  #line 2151 
  word_addr = (unsigned short)((int)((unsigned short)cnf_base_addr) << 1U);
  #line 2153 
  i = 0U;
  #line 2153 
  while (i < cnf_size) {
    #line 2154 
    ret_val = e1000_read_nvm(hw,(unsigned short)((int)((unsigned int)((unsigned short)i) * 2U + (unsigned int)word_addr)),(unsigned short)1,& reg_data);
    #line 2155 
    if (ret_val != 0) 
                      #line 2156 
                      goto release;
    #line 2158 
    ret_val = e1000_read_nvm(hw,(unsigned short)((int)(((unsigned int)((unsigned short)i) * 2U + (unsigned int)word_addr) + 1U)),(unsigned short)1,& reg_addr);
    #line 2160 
    if (ret_val != 0) 
                      #line 2161 
                      goto release;
    #line 2164 
    if ((unsigned int)reg_addr == 31U) {
      #line 2165 
      phy_page = reg_data;
      #line 2166 
      goto __Cont;
    }
    #line 2169 
    reg_addr = (unsigned short)((unsigned int)reg_addr & 31U);
    #line 2170 
    reg_addr = (unsigned short)((int)reg_addr | (int)phy_page);
    #line 2172 
    ret_val = e1e_wphy_locked(hw,(unsigned int)reg_addr,(unsigned short)((int)reg_data));
    #line 2173 
    if (ret_val != 0) 
                      #line 2174 
                      goto release;
    #line 2153 
    __Cont: 
            #line 2153 
    i ++;
  }
  #line 2177 
  release: 
           #line 2177 
  ;
  #line 2178 
  (*(hw->phy.ops.release))(hw);
  #line 2179 
  return ret_val;
}

#line 2192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_k1_gig_workaround_hv(struct e1000_hw *hw, bool link)
{
  #line 2194 
  s32 ret_val = 0;
  #line 2195 
  u16 status_reg = (unsigned short)0U;
  #line 2196 
  bool k1_enable = hw->dev_spec.ich8lan.nvm_k1_enabled;
  #line 2198 
  if (hw->mac.type != (unsigned int)e1000_pchlan) 
                                                  #line 2199 
                                                  return 0;
  #line 2202 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 2203 
  if (ret_val != 0) 
                    #line 2204 
                    return ret_val;
  #line 2207 
  if ((int)link != 0) {
    #line 2208 
    if (hw->phy.type == (unsigned int)e1000_phy_82578) {
      #line 2209 
      ret_val = e1e_rphy_locked(hw,17U,& status_reg);
      #line 2211 
      if (ret_val != 0) 
                        #line 2212 
                        goto release;
      #line 2214 
      status_reg = (unsigned short)((unsigned int)status_reg & 52224U);
      #line 2218 
      if ((unsigned int)status_reg == 35840U) 
                                              #line 2221 
                                              k1_enable = (_Bool)0;
    }
    #line 2224 
    if (hw->phy.type == (unsigned int)e1000_phy_82577) {
      #line 2225 
      ret_val = e1e_rphy_locked(hw,26U,& status_reg);
      #line 2226 
      if (ret_val != 0) 
                        #line 2227 
                        goto release;
      #line 2229 
      status_reg = (unsigned short)((unsigned int)status_reg & 4928U);
      #line 2233 
      if ((unsigned int)status_reg == 4672U) 
                                             #line 2236 
                                             k1_enable = (_Bool)0;
    }
    #line 2240 
    ret_val = e1e_wphy_locked(hw,24659U,(unsigned short)256);
    #line 2241 
    if (ret_val != 0) 
                      #line 2242 
                      goto release;
  }
  else {
    #line 2246 
    ret_val = e1e_wphy_locked(hw,24659U,(unsigned short)16640);
    #line 2247 
    if (ret_val != 0) 
                      #line 2248 
                      goto release;
  }
  #line 2251 
  ret_val = e1000_configure_k1_ich8lan(hw,(_Bool)((bool)((int)k1_enable) != 0));
  #line 2253 
  release: 
           #line 2253 
  ;
  #line 2254 
  (*(hw->phy.ops.release))(hw);
  #line 2256 
  return ret_val;
}

#line 2269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_configure_k1_ich8lan(struct e1000_hw *hw, bool k1_enable)
{
  #line 2271 
  s32 ret_val;
  #line 2272 
  u32 ctrl_reg = 0U;
  #line 2273 
  u32 ctrl_ext = 0U;
  #line 2274 
  u32 reg = 0U;
  #line 2275 
  u16 kmrn_reg = (unsigned short)0U;
  #line 2277 
  ret_val = e1000e_read_kmrn_reg_locked(hw,7U,& kmrn_reg);
  #line 2279 
  if (ret_val != 0) 
                    #line 2280 
                    return ret_val;
  #line 2282 
  if ((int)k1_enable != 0) 
                           #line 2283 
                           kmrn_reg = (unsigned short)((unsigned int)kmrn_reg | 2U); else 
                                                                    #line 2285 
                                                                    kmrn_reg = (unsigned short)((unsigned int)kmrn_reg & 65533U);
  #line 2287 
  ret_val = e1000e_write_kmrn_reg_locked(hw,7U,(unsigned short)((int)kmrn_reg));
  #line 2289 
  if (ret_val != 0) 
                    #line 2290 
                    return ret_val;
  #line 2292 
  usleep_range(20UL,40UL);
  #line 2293 
  ctrl_ext = __er32(hw,24UL);
  #line 2294 
  ctrl_reg = __er32(hw,0UL);
  #line 2296 
  reg = ctrl_reg & 4294966527U;
  #line 2297 
  reg |= 2048U;
  #line 2298 
  __ew32(hw,0UL,reg);
  #line 2300 
  __ew32(hw,24UL,ctrl_ext | 32768U);
  #line 2301 
  __er32(hw,8UL);
  #line 2302 
  usleep_range(20UL,40UL);
  #line 2303 
  __ew32(hw,0UL,ctrl_reg);
  #line 2304 
  __ew32(hw,24UL,ctrl_ext);
  #line 2305 
  __er32(hw,8UL);
  #line 2306 
  usleep_range(20UL,40UL);
  #line 2308 
  return 0;
}

#line 2320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_oem_bits_config_ich8lan(struct e1000_hw *hw, bool d0_state)
{
  #line 2323 
  u32 mac_reg;
  #line 2324 
  u16 oem_reg;
  #line 2322 
  s32 ret_val = 0;
  #line 2326 
  if (hw->mac.type <= (unsigned int)e1000_ich10lan) 
                                                    #line 2327 
                                                    return ret_val;
  #line 2329 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 2330 
  if (ret_val != 0) 
                    #line 2331 
                    return ret_val;
  #line 2333 
  if (hw->mac.type == (unsigned int)e1000_pchlan) {
    #line 2334 
    mac_reg = __er32(hw,3840UL);
    #line 2335 
    if ((mac_reg & 8U) != 0U) 
                              #line 2336 
                              goto release;
  }
  #line 2339 
  mac_reg = __er32(hw,40UL);
  #line 2340 
  if ((mac_reg & 134217728U) == 0U) 
                                    #line 2341 
                                    goto release;
  #line 2343 
  mac_reg = __er32(hw,3856UL);
  #line 2345 
  ret_val = e1e_rphy_locked(hw,24601U,& oem_reg);
  #line 2346 
  if (ret_val != 0) 
                    #line 2347 
                    goto release;
  #line 2349 
  oem_reg = (unsigned short)((unsigned int)oem_reg & 65467U);
  #line 2351 
  if ((int)d0_state != 0) {
    #line 2352 
    if ((mac_reg & 64U) != 0U) 
                               #line 2353 
                               oem_reg = (unsigned short)((unsigned int)oem_reg | 64U);
    #line 2355 
    if ((mac_reg & 2U) != 0U) 
                              #line 2356 
                              oem_reg = (unsigned short)((unsigned int)oem_reg | 4U);
  }
  else {
    #line 2358 
    if ((mac_reg & 72U) != 0U) 
                               #line 2360 
                               oem_reg = (unsigned short)((unsigned int)oem_reg | 64U);
    #line 2362 
    if ((mac_reg & 6U) != 0U) 
                              #line 2364 
                              oem_reg = (unsigned short)((unsigned int)oem_reg | 4U);
  }
  #line 2368 
  if ((int)d0_state != 0 || hw->mac.type != (unsigned int)e1000_pchlan) {
    #line 2368 
    if ((*(hw->phy.ops.check_reset_block))(hw) == 0) 
                                                     #line 2370 
                                                     oem_reg = (unsigned short)((unsigned int)oem_reg | 1024U);
  }
  #line 2372 
  ret_val = e1e_wphy_locked(hw,24601U,(unsigned short)((int)oem_reg));
  #line 2374 
  release: 
           #line 2374 
  ;
  #line 2375 
  (*(hw->phy.ops.release))(hw);
  #line 2377 
  return ret_val;
}

#line 2384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_set_mdio_slow_mode_hv(struct e1000_hw *hw)
{
  #line 2386 
  s32 ret_val;
  #line 2387 
  u16 data;
  #line 2389 
  ret_val = e1e_rphy(hw,24624U,& data);
  #line 2390 
  if (ret_val != 0) 
                    #line 2391 
                    return ret_val;
  #line 2393 
  data = (unsigned short)((unsigned int)data | 1024U);
  #line 2395 
  ret_val = e1e_wphy(hw,24624U,(unsigned short)((int)data));
  #line 2397 
  return ret_val;
}

#line 2404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_hv_phy_workarounds_ich8lan(struct e1000_hw *hw)
{
  #line 2407 
  u16 phy_data;
  #line 2406 
  s32 ret_val = 0;
  #line 2409 
  if (hw->mac.type != (unsigned int)e1000_pchlan) 
                                                  #line 2410 
                                                  return 0;
  #line 2413 
  if (hw->phy.type == (unsigned int)e1000_phy_82577) {
    #line 2414 
    ret_val = e1000_set_mdio_slow_mode_hv(hw);
    #line 2415 
    if (ret_val != 0) 
                      #line 2416 
                      return ret_val;
  }
  #line 2419 
  if (hw->phy.type == (unsigned int)e1000_phy_82577 && hw->phy.revision + 4294967295U <= 1U || hw->phy.type == (unsigned int)e1000_phy_82578 && hw->phy.revision == 1U) {
    #line 2423 
    ret_val = e1e_wphy(hw,24633U,(unsigned short)17457);
    #line 2424 
    if (ret_val != 0) 
                      #line 2425 
                      return ret_val;
    #line 2428 
    ret_val = e1e_wphy(hw,24656U,(unsigned short)41476);
    #line 2429 
    if (ret_val != 0) 
                      #line 2430 
                      return ret_val;
  }
  #line 2433 
  if (hw->phy.type == (unsigned int)e1000_phy_82578) 
    #line 2437 
    if (hw->phy.revision <= 1U) {
      #line 2438 
      e1000e_phy_sw_reset(hw);
      #line 2439 
      ret_val = e1e_wphy(hw,0U,(unsigned short)12608);
      #line 2440 
      if (ret_val != 0) 
                        #line 2441 
                        return ret_val;
    }
  #line 2446 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 2447 
  if (ret_val != 0) 
                    #line 2448 
                    return ret_val;
  #line 2450 
  hw->phy.addr = 1U;
  #line 2451 
  ret_val = e1000e_write_phy_reg_mdic(hw,31U,(unsigned short)0);
  #line 2452 
  (*(hw->phy.ops.release))(hw);
  #line 2453 
  if (ret_val != 0) 
                    #line 2454 
                    return ret_val;
  #line 2459 
  ret_val = e1000_k1_gig_workaround_hv(hw,(_Bool)1);
  #line 2460 
  if (ret_val != 0) 
                    #line 2461 
                    return ret_val;
  #line 2464 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 2465 
  if (ret_val != 0) 
                    #line 2466 
                    return ret_val;
  #line 2467 
  ret_val = e1e_rphy_locked(hw,24625U,& phy_data);
  #line 2468 
  if (ret_val != 0) 
                    #line 2469 
                    goto release;
  #line 2470 
  ret_val = e1e_wphy_locked(hw,24625U,(unsigned short)((int)phy_data & 255));
  #line 2471 
  if (ret_val != 0) 
                    #line 2472 
                    goto release;
  #line 2475 
  ret_val = e1000_write_emi_reg_locked(hw,(unsigned short)2183,(unsigned short)52);
  #line 2476 
  release: 
           #line 2476 
  ;
  #line 2477 
  (*(hw->phy.ops.release))(hw);
  #line 2479 
  return ret_val;
}

#line 2486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000_copy_rx_addrs_to_phy_ich8lan(struct e1000_hw *hw)
{
  #line 2488 
  u32 mac_reg;
  #line 2489 
  u16 i;
  #line 2490 
  s32 ret_val;
  #line 2489 
  u16 phy_reg = (unsigned short)0U;
  #line 2492 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 2493 
  if (ret_val != 0) 
                    #line 2494 
                    return;
  #line 2495 
  ret_val = e1000_enable_phy_wakeup_reg_access_bm(hw,& phy_reg);
  #line 2496 
  if (ret_val != 0) 
                    #line 2497 
                    goto release;
  #line 2500 
  i = (unsigned short)0U;
  #line 2500 
  while ((int)hw->mac.rar_entry_count > (int)i) {
    {
      #line 2501 
      int tmp;
      #line 2507 
      int tmp_0;
      #line 2501 
      if ((unsigned int)i <= 15U) 
                                  #line 2501 
                                  tmp = ((int)i + 2688) * 8; else 
                                                                  #line 2501 
                                                                  tmp = ((int)i + 2700) * 8;
      #line 2501 
      ;
      #line 2501 
      mac_reg = __er32(hw,(unsigned long)tmp);
      #line 2502 
      (*(hw->phy.ops.write_reg_page))(hw,(unsigned int)((((((int)i << 2) + 16) & 31) | 25600) | (((((int)i << 2) + 16) << 16) & -2097152)),(unsigned short)((int)((unsigned short)mac_reg)));
      #line 2504 
      (*(hw->phy.ops.write_reg_page))(hw,(unsigned int)((((((int)i << 2) + 17) & 31) | 25600) | (((((int)i << 2) + 17) << 16) & -2097152)),(unsigned short)((int)((unsigned short)(mac_reg >> 16))));
      #line 2507 
      if ((unsigned int)i <= 15U) 
                                  #line 2507 
                                  tmp_0 = (int)i * 8 + 21508; else 
                                                                   #line 2507 
                                                                   tmp_0 = ((int)i + -16) * 8 + 21732;
      #line 2507 
      ;
      #line 2507 
      mac_reg = __er32(hw,(unsigned long)tmp_0);
      #line 2508 
      (*(hw->phy.ops.write_reg_page))(hw,(unsigned int)((((((int)i << 2) + 18) & 31) | 25600) | (((((int)i << 2) + 18) << 16) & -2097152)),(unsigned short)((int)((unsigned short)mac_reg)));
      #line 2510 
      (*(hw->phy.ops.write_reg_page))(hw,(unsigned int)((((((int)i << 2) + 19) & 31) | 25600) | (((((int)i << 2) + 19) << 16) & -2097152)),(unsigned short)((int)((unsigned short)(mac_reg >> 16)) & 32768));
    }
    #line 2500 
    i = (u16)((int)i + 1);
  }
  #line 2515 
  e1000_disable_phy_wakeup_reg_access_bm(hw,& phy_reg);
  #line 2517 
  release: 
           #line 2517 
  ;
  #line 2518 
  (*(hw->phy.ops.release))(hw);
  #line 2519 
  return;
}

#line 2527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_lv_jumbo_workaround_ich8lan(struct e1000_hw *hw, bool enable)
{
  #line 2530 
  u16 phy_reg;
  #line 2530 
  u16 data;
  #line 2531 
  u32 mac_reg;
  #line 2532 
  u16 i;
  #line 2529 
  s32 ret_val = 0;
  #line 2534 
  if (hw->mac.type <= (unsigned int)e1000_pchlan) 
                                                  #line 2535 
                                                  return 0;
  #line 2538 
  e1e_rphy(hw,24628U,& phy_reg);
  #line 2539 
  ret_val = e1e_wphy(hw,24628U,(unsigned short)((int)((unsigned int)phy_reg | 16384U)));
  #line 2540 
  if (ret_val != 0) 
                    #line 2541 
                    return ret_val;
  #line 2543 
  if ((int)enable != 0) {
    #line 2547 
    i = (unsigned short)0U;
    #line 2547 
    while ((int)hw->mac.rar_entry_count > (int)i) {
      {
        #line 2549 
        u32 addr_high;
        #line 2549 
        u32 addr_low;
        #line 2551 
        int tmp;
        #line 2554 
        int tmp_0;
        #line 2548 
        u8 mac_addr[6U] = {(unsigned char)0U};
        #line 2551 
        if ((unsigned int)i <= 15U) 
                                    #line 2551 
                                    tmp = (int)i * 8 + 21508; else 
                                                                   #line 2551 
                                                                   tmp = ((int)i + -16) * 8 + 21732;
        #line 2551 
        ;
        #line 2551 
        addr_high = __er32(hw,(unsigned long)tmp);
        #line 2552 
        if ((addr_high & 2147483648U) == 0U) 
                                             #line 2553 
                                             goto __Cont;
        #line 2554 
        if ((unsigned int)i <= 15U) 
                                    #line 2554 
                                    tmp_0 = ((int)i + 2688) * 8; else 
                                                                   #line 2554 
                                                                   tmp_0 = ((int)i + 2700) * 8;
        #line 2554 
        ;
        #line 2554 
        addr_low = __er32(hw,(unsigned long)tmp_0);
        #line 2555 
        mac_addr[0] = (unsigned char)addr_low;
        #line 2556 
        mac_addr[1] = (unsigned char)(addr_low >> 8);
        #line 2557 
        mac_addr[2] = (unsigned char)(addr_low >> 16);
        #line 2558 
        mac_addr[3] = (unsigned char)(addr_low >> 24);
        #line 2559 
        mac_addr[4] = (unsigned char)addr_high;
        #line 2560 
        mac_addr[5] = (unsigned char)(addr_high >> 8);
        #line 2562 
        ;
        #line 2562 
        ;
        #line 2562 
        __ew32(hw,(unsigned long)(((int)i + 6100) * 4),~ crc32_le(4294967295U,(unsigned char *)(& mac_addr),6UL));
      }
      #line 2547 
      __Cont: 
              #line 2547 
      i = (u16)((int)i + 1);
    }
    #line 2566 
    e1000_copy_rx_addrs_to_phy_ich8lan(hw);
    #line 2569 
    mac_reg = __er32(hw,24324UL);
    #line 2570 
    mac_reg &= 4294950911U;
    #line 2571 
    mac_reg |= 229376U;
    #line 2572 
    __ew32(hw,24324UL,mac_reg);
    #line 2574 
    mac_reg = __er32(hw,256UL);
    #line 2575 
    mac_reg |= 67108864U;
    #line 2576 
    __ew32(hw,256UL,mac_reg);
    #line 2578 
    ret_val = e1000e_read_kmrn_reg(hw,1U,& data);
    #line 2581 
    if (ret_val != 0) 
                      #line 2582 
                      return ret_val;
    #line 2583 
    ret_val = e1000e_write_kmrn_reg(hw,1U,(unsigned short)((int)((unsigned int)data | 1U)));
    #line 2586 
    if (ret_val != 0) 
                      #line 2587 
                      return ret_val;
    #line 2588 
    ret_val = e1000e_read_kmrn_reg(hw,16U,& data);
    #line 2591 
    if (ret_val != 0) 
                      #line 2592 
                      return ret_val;
    #line 2593 
    data = (unsigned short)((unsigned int)data & 61695U);
    #line 2594 
    data = (unsigned short)((unsigned int)data | 2816U);
    #line 2595 
    ret_val = e1000e_write_kmrn_reg(hw,16U,(unsigned short)((int)data));
    #line 2598 
    if (ret_val != 0) 
                      #line 2599 
                      return ret_val;
    #line 2602 
    e1e_rphy(hw,24631U,& data);
    #line 2603 
    data = (unsigned short)((unsigned int)data & 61471U);
    #line 2604 
    data = (unsigned short)((unsigned int)data | 1760U);
    #line 2605 
    ret_val = e1e_wphy(hw,24631U,(unsigned short)((int)data));
    #line 2606 
    if (ret_val != 0) 
                      #line 2607 
                      return ret_val;
    #line 2608 
    e1e_rphy(hw,24624U,& data);
    #line 2609 
    data = (unsigned short)((unsigned int)data & 57343U);
    #line 2610 
    ret_val = e1e_wphy(hw,24624U,(unsigned short)((int)data));
    #line 2611 
    if (ret_val != 0) 
                      #line 2612 
                      return ret_val;
    #line 2613 
    e1e_rphy(hw,24852U,& data);
    #line 2614 
    data = (unsigned short)((unsigned int)data & 61443U);
    #line 2615 
    data = (unsigned short)((unsigned int)data | 124U);
    #line 2616 
    ret_val = e1e_wphy(hw,24852U,(unsigned short)((int)data));
    #line 2617 
    if (ret_val != 0) 
                      #line 2618 
                      return ret_val;
    #line 2619 
    ret_val = e1e_wphy(hw,24855U,(unsigned short)61696);
    #line 2620 
    if (ret_val != 0) 
                      #line 2621 
                      return ret_val;
    #line 2622 
    e1e_rphy(hw,24657U,& data);
    #line 2623 
    ret_val = e1e_wphy(hw,24657U,(unsigned short)((int)((unsigned int)data | 1024U)));
    #line 2624 
    if (ret_val != 0) 
                      #line 2625 
                      return ret_val;
  }
  else {
    #line 2628 
    mac_reg = __er32(hw,24324UL);
    #line 2629 
    mac_reg &= 4294721535U;
    #line 2630 
    __ew32(hw,24324UL,mac_reg);
    #line 2632 
    mac_reg = __er32(hw,256UL);
    #line 2633 
    mac_reg &= 4227858431U;
    #line 2634 
    __ew32(hw,256UL,mac_reg);
    #line 2636 
    ret_val = e1000e_read_kmrn_reg(hw,1U,& data);
    #line 2639 
    if (ret_val != 0) 
                      #line 2640 
                      return ret_val;
    #line 2641 
    ret_val = e1000e_write_kmrn_reg(hw,1U,(unsigned short)((int)data & 65534));
    #line 2644 
    if (ret_val != 0) 
                      #line 2645 
                      return ret_val;
    #line 2646 
    ret_val = e1000e_read_kmrn_reg(hw,16U,& data);
    #line 2649 
    if (ret_val != 0) 
                      #line 2650 
                      return ret_val;
    #line 2651 
    data = (unsigned short)((unsigned int)data & 61695U);
    #line 2652 
    data = (unsigned short)((unsigned int)data | 2816U);
    #line 2653 
    ret_val = e1000e_write_kmrn_reg(hw,16U,(unsigned short)((int)data));
    #line 2656 
    if (ret_val != 0) 
                      #line 2657 
                      return ret_val;
    #line 2660 
    e1e_rphy(hw,24631U,& data);
    #line 2661 
    data = (unsigned short)((unsigned int)data & 61471U);
    #line 2662 
    ret_val = e1e_wphy(hw,24631U,(unsigned short)((int)data));
    #line 2663 
    if (ret_val != 0) 
                      #line 2664 
                      return ret_val;
    #line 2665 
    e1e_rphy(hw,24624U,& data);
    #line 2666 
    data = (unsigned short)((unsigned int)data | 8192U);
    #line 2667 
    ret_val = e1e_wphy(hw,24624U,(unsigned short)((int)data));
    #line 2668 
    if (ret_val != 0) 
                      #line 2669 
                      return ret_val;
    #line 2670 
    e1e_rphy(hw,24852U,& data);
    #line 2671 
    data = (unsigned short)((unsigned int)data & 61443U);
    #line 2672 
    data = (unsigned short)((unsigned int)data | 32U);
    #line 2673 
    ret_val = e1e_wphy(hw,24852U,(unsigned short)((int)data));
    #line 2674 
    if (ret_val != 0) 
                      #line 2675 
                      return ret_val;
    #line 2676 
    ret_val = e1e_wphy(hw,24855U,(unsigned short)32256);
    #line 2677 
    if (ret_val != 0) 
                      #line 2678 
                      return ret_val;
    #line 2679 
    e1e_rphy(hw,24657U,& data);
    #line 2680 
    ret_val = e1e_wphy(hw,24657U,(unsigned short)((int)data & 64511));
    #line 2681 
    if (ret_val != 0) 
                      #line 2682 
                      return ret_val;
  }
  #line 2686 
  return e1e_wphy(hw,24628U,(unsigned short)((int)phy_reg & 49151));
}

#line 2693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_lv_phy_workarounds_ich8lan(struct e1000_hw *hw)
{
  #line 2695 
  s32 ret_val = 0;
  #line 2697 
  if (hw->mac.type != (unsigned int)e1000_pch2lan) 
                                                   #line 2698 
                                                   return 0;
  #line 2701 
  ret_val = e1000_set_mdio_slow_mode_hv(hw);
  #line 2702 
  if (ret_val != 0) 
                    #line 2703 
                    return ret_val;
  #line 2705 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 2706 
  if (ret_val != 0) 
                    #line 2707 
                    return ret_val;
  #line 2709 
  ret_val = e1000_write_emi_reg_locked(hw,(unsigned short)2127,(unsigned short)52);
  #line 2710 
  if (ret_val != 0) 
                    #line 2711 
                    goto release;
  #line 2713 
  ret_val = e1000_write_emi_reg_locked(hw,(unsigned short)9233,(unsigned short)5);
  #line 2714 
  release: 
           #line 2714 
  ;
  #line 2715 
  (*(hw->phy.ops.release))(hw);
  #line 2717 
  return ret_val;
}

#line 2727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_k1_workaround_lv(struct e1000_hw *hw)
{
  #line 2729 
  s32 ret_val = 0;
  #line 2730 
  u16 status_reg = (unsigned short)0U;
  #line 2732 
  if (hw->mac.type != (unsigned int)e1000_pch2lan) 
                                                   #line 2733 
                                                   return 0;
  #line 2736 
  ret_val = e1e_rphy(hw,26U,& status_reg);
  #line 2737 
  if (ret_val != 0) 
                    #line 2738 
                    return ret_val;
  #line 2740 
  if (((int)status_reg & 4160) == 4160) 
    #line 2742 
    if (((int)status_reg & 768) != 0) {
      #line 2744 
      u16 pm_phy_reg;
      #line 2747 
      ret_val = e1e_rphy(hw,24657U,& pm_phy_reg);
      #line 2748 
      if (ret_val != 0) 
                        #line 2749 
                        return ret_val;
      #line 2750 
      pm_phy_reg = (unsigned short)((unsigned int)pm_phy_reg & 49151U);
      #line 2751 
      ret_val = e1e_wphy(hw,24657U,(unsigned short)((int)pm_phy_reg));
      #line 2752 
      if (ret_val != 0) 
                        #line 2753 
                        return ret_val;
    }
    else {
      #line 2755 
      u32 mac_reg;
      #line 2757 
      mac_reg = __er32(hw,36UL);
      #line 2758 
      mac_reg &= 4294967288U;
      #line 2759 
      mac_reg |= 3U;
      #line 2760 
      __ew32(hw,36UL,mac_reg);
    }
  #line 2764 
  return ret_val;
}

#line 2775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_gate_hw_phy_config_ich8lan(struct e1000_hw *hw, bool gate)
{
  #line 2777 
  u32 extcnf_ctrl;
  #line 2779 
  if (hw->mac.type <= (unsigned int)e1000_pchlan) 
                                                  #line 2780 
                                                  return;
  #line 2782 
  extcnf_ctrl = __er32(hw,3840UL);
  #line 2784 
  if ((int)gate != 0) 
                      #line 2785 
                      extcnf_ctrl |= 128U; else 
                                                #line 2787 
                                                extcnf_ctrl &= 4294967167U;
  #line 2789 
  __ew32(hw,3840UL,extcnf_ctrl);
  #line 2790 
  return;
}

#line 2799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_lan_init_done_ich8lan(struct e1000_hw *hw)
{
  #line 2801 
  u32 data;
  #line 2801 
  u32 loop = 1500U;
  #line 2804 
  while (1) {
    #line 2805 
    data = __er32(hw,8UL);
    #line 2806 
    data &= 512U;
    #line 2807 
    usleep_range(100UL,200UL);
    #line 2808 
    if (data == 0U) {
      #line 2808 
      loop --;
      #line 2808 
      if (! (loop != 0U)) 
                          #line 2804 
                          break;
    }
    else 
         #line 2804 
         break;
  }
  #line 2814 
  if (loop == 0U) {
    #line 2815 
    bool branch;
    #line 2815 
    struct _ddebug __UNIQUE_ID_ddebug463 = {.modname = (char *)"e1000e", .function = (char *)"e1000_lan_init_done_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"LAN_INIT_DONE not set, increase timeout\n", .lineno = (unsigned int)2815U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2815 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug463.key.dd_key_false.key,(_Bool)0);
    #line 2815 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2815 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug463,(hw->adapter)->netdev,(char *)"LAN_INIT_DONE not set, increase timeout\n");
  }
  #line 2818 
  data = __er32(hw,8UL);
  #line 2819 
  data &= 4294966783U;
  #line 2820 
  __ew32(hw,8UL,data);
  #line 2821 
  return;
}

#line 2827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_post_phy_reset_ich8lan(struct e1000_hw *hw)
{
  #line 2830 
  u16 reg;
  #line 2829 
  s32 ret_val = 0;
  #line 2832 
  if ((*(hw->phy.ops.check_reset_block))(hw) != 0) 
                                                   #line 2833 
                                                   return 0;
  #line 2836 
  usleep_range(10000UL,11000UL);
  #line 2839 
  switch ((unsigned int)hw->mac.type) {
    #line 2840 
    case (unsigned int)9: 
                          #line 2840 
    ;
    #line 2841 
    ret_val = e1000_hv_phy_workarounds_ich8lan(hw);
    #line 2842 
    if (ret_val != 0) 
                      #line 2843 
                      return ret_val;
    #line 2844 
    break;
    #line 2845 
    case (unsigned int)10: 
                           #line 2845 
    ;
    #line 2846 
    ret_val = e1000_lv_phy_workarounds_ich8lan(hw);
    #line 2847 
    if (ret_val != 0) 
                      #line 2848 
                      return ret_val;
    #line 2849 
    break;
    #line 2850 
    default: 
             #line 2850 
    ;
    #line 2851 
    break;
  }
  #line 2855 
  if (hw->mac.type > (unsigned int)e1000_ich10lan) {
    #line 2856 
    e1e_rphy(hw,24625U,& reg);
    #line 2857 
    reg = (unsigned short)((unsigned int)reg & 65519U);
    #line 2858 
    e1e_wphy(hw,24625U,(unsigned short)((int)reg));
  }
  #line 2862 
  ret_val = e1000_sw_lcd_config_ich8lan(hw);
  #line 2863 
  if (ret_val != 0) 
                    #line 2864 
                    return ret_val;
  #line 2867 
  ret_val = e1000_oem_bits_config_ich8lan(hw,(_Bool)1);
  #line 2869 
  if (hw->mac.type == (unsigned int)e1000_pch2lan) {
    #line 2871 
    if ((__er32(hw,23380UL) & 32768U) == 0U) {
      #line 2872 
      usleep_range(10000UL,11000UL);
      #line 2873 
      e1000_gate_hw_phy_config_ich8lan(hw,(_Bool)0);
    }
    #line 2877 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 2878 
    if (ret_val != 0) 
                      #line 2879 
                      return ret_val;
    #line 2880 
    ret_val = e1000_write_emi_reg_locked(hw,(unsigned short)18437,(unsigned short)4999);
    #line 2883 
    (*(hw->phy.ops.release))(hw);
  }
  #line 2886 
  return ret_val;
}

#line 2897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_phy_hw_reset_ich8lan(struct e1000_hw *hw)
{
  #line 2899 
  s32 ret_val = 0;
  #line 2902 
  if (hw->mac.type == (unsigned int)e1000_pch2lan) {
    #line 2902 
    if ((__er32(hw,23380UL) & 32768U) == 0U) 
                                             #line 2904 
                                             e1000_gate_hw_phy_config_ich8lan(hw,(_Bool)1);
  }
  #line 2906 
  ret_val = e1000e_phy_hw_reset_generic(hw);
  #line 2907 
  if (ret_val != 0) 
                    #line 2908 
                    return ret_val;
  #line 2910 
  return e1000_post_phy_reset_ich8lan(hw);
}

#line 2924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_set_lplu_state_pchlan(struct e1000_hw *hw, bool active)
{
  #line 2926 
  s32 ret_val;
  #line 2927 
  u16 oem_reg;
  #line 2929 
  ret_val = e1e_rphy(hw,24601U,& oem_reg);
  #line 2930 
  if (ret_val != 0) 
                    #line 2931 
                    return ret_val;
  #line 2933 
  if ((int)active != 0) 
                        #line 2934 
                        oem_reg = (unsigned short)((unsigned int)oem_reg | 4U); else 
                                                                    #line 2936 
                                                                    oem_reg = (unsigned short)((unsigned int)oem_reg & 65531U);
  #line 2938 
  if ((*(hw->phy.ops.check_reset_block))(hw) == 0) 
                                                   #line 2939 
                                                   oem_reg = (unsigned short)((unsigned int)oem_reg | 1024U);
  #line 2941 
  return e1e_wphy(hw,24601U,(unsigned short)((int)oem_reg));
}

#line 2957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_set_d0_lplu_state_ich8lan(struct e1000_hw *hw, bool active)
{
  #line 2960 
  u32 phy_ctrl;
  #line 2962 
  u16 data;
  #line 2959 
  struct e1000_phy_info *phy = & hw->phy;
  #line 2961 
  s32 ret_val = 0;
  #line 2964 
  if (phy->type == (unsigned int)e1000_phy_ife) 
                                                #line 2965 
                                                return 0;
  #line 2967 
  phy_ctrl = __er32(hw,3856UL);
  #line 2969 
  if ((int)active != 0) {
    #line 2970 
    phy_ctrl |= 2U;
    #line 2971 
    __ew32(hw,3856UL,phy_ctrl);
    #line 2973 
    if (phy->type != (unsigned int)e1000_phy_igp_3) 
                                                    #line 2974 
                                                    return 0;
    #line 2979 
    if (hw->mac.type == (unsigned int)e1000_ich8lan) 
                                                     #line 2980 
                                                     e1000e_gig_downshift_workaround_ich8lan(hw);
    #line 2983 
    ret_val = e1e_rphy(hw,16U,& data);
    #line 2984 
    if (ret_val != 0) 
                      #line 2985 
                      return ret_val;
    #line 2986 
    data = (unsigned short)((unsigned int)data & 65407U);
    #line 2987 
    ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
    #line 2988 
    if (ret_val != 0) 
                      #line 2989 
                      return ret_val;
  }
  else {
    #line 2991 
    phy_ctrl &= 4294967293U;
    #line 2992 
    __ew32(hw,3856UL,phy_ctrl);
    #line 2994 
    if (phy->type != (unsigned int)e1000_phy_igp_3) 
                                                    #line 2995 
                                                    return 0;
    #line 3002 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) {
      #line 3003 
      ret_val = e1e_rphy(hw,16U,& data);
      #line 3005 
      if (ret_val != 0) 
                        #line 3006 
                        return ret_val;
      #line 3008 
      data = (unsigned short)((unsigned int)data | 128U);
      #line 3009 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
      #line 3011 
      if (ret_val != 0) 
                        #line 3012 
                        return ret_val;
    }
    else 
      #line 3013 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) {
        #line 3014 
        ret_val = e1e_rphy(hw,16U,& data);
        #line 3016 
        if (ret_val != 0) 
                          #line 3017 
                          return ret_val;
        #line 3019 
        data = (unsigned short)((unsigned int)data & 65407U);
        #line 3020 
        ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
        #line 3022 
        if (ret_val != 0) 
                          #line 3023 
                          return ret_val;
      }
  }
  #line 3027 
  return 0;
}

#line 3043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_set_d3_lplu_state_ich8lan(struct e1000_hw *hw, bool active)
{
  #line 3046 
  u32 phy_ctrl;
  #line 3048 
  u16 data;
  #line 3045 
  struct e1000_phy_info *phy = & hw->phy;
  #line 3047 
  s32 ret_val = 0;
  #line 3050 
  phy_ctrl = __er32(hw,3856UL);
  #line 3052 
  if (! active) {
    #line 3053 
    phy_ctrl &= 4294967291U;
    #line 3054 
    __ew32(hw,3856UL,phy_ctrl);
    #line 3056 
    if (phy->type != (unsigned int)e1000_phy_igp_3) 
                                                    #line 3057 
                                                    return 0;
    #line 3064 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) {
      #line 3065 
      ret_val = e1e_rphy(hw,16U,& data);
      #line 3067 
      if (ret_val != 0) 
                        #line 3068 
                        return ret_val;
      #line 3070 
      data = (unsigned short)((unsigned int)data | 128U);
      #line 3071 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
      #line 3073 
      if (ret_val != 0) 
                        #line 3074 
                        return ret_val;
    }
    else 
      #line 3075 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) {
        #line 3076 
        ret_val = e1e_rphy(hw,16U,& data);
        #line 3078 
        if (ret_val != 0) 
                          #line 3079 
                          return ret_val;
        #line 3081 
        data = (unsigned short)((unsigned int)data & 65407U);
        #line 3082 
        ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
        #line 3084 
        if (ret_val != 0) 
                          #line 3085 
                          return ret_val;
      }
  }
  else 
    #line 3087 
    if (((unsigned int)phy->autoneg_advertised == 47U || (unsigned int)phy->autoneg_advertised == 15U) || (unsigned int)phy->autoneg_advertised == 3U) {
      #line 3090 
      phy_ctrl |= 4U;
      #line 3091 
      __ew32(hw,3856UL,phy_ctrl);
      #line 3093 
      if (phy->type != (unsigned int)e1000_phy_igp_3) 
                                                      #line 3094 
                                                      return 0;
      #line 3099 
      if (hw->mac.type == (unsigned int)e1000_ich8lan) 
                                                       #line 3100 
                                                       e1000e_gig_downshift_workaround_ich8lan(hw);
      #line 3103 
      ret_val = e1e_rphy(hw,16U,& data);
      #line 3104 
      if (ret_val != 0) 
                        #line 3105 
                        return ret_val;
      #line 3107 
      data = (unsigned short)((unsigned int)data & 65407U);
      #line 3108 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
    }
  #line 3111 
  return ret_val;
}

#line 3122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_valid_nvm_bank_detect_ich8lan(struct e1000_hw *hw, u32 *bank)
{
  #line 3124 
  u32 eecd;
  #line 3130 
  s32 ret_val;
  #line 3125 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 3126 
  u32 bank1_offset = nvm->flash_bank_size * 2U;
  #line 3127 
  u32 act_offset = 39U;
  #line 3128 
  u32 nvm_dword = 0U;
  #line 3129 
  u8 sig_byte = (unsigned char)0U;
  #line 3132 
  switch ((unsigned int)hw->mac.type) {
    #line 3133 
    case (unsigned int)12: 
                           #line 3133 
    ;
    #line 3134 
    case (unsigned int)13: 
                           #line 3134 
    ;
    #line 3135 
    case (unsigned int)14: 
                           #line 3135 
    ;
    #line 3136 
    bank1_offset = nvm->flash_bank_size;
    #line 3137 
    act_offset = 19U;
    #line 3140 
    *bank = 0U;
    #line 3143 
    ret_val = e1000_read_flash_dword_ich8lan(hw,act_offset,& nvm_dword);
    #line 3145 
    if (ret_val != 0) 
                      #line 3146 
                      return ret_val;
    #line 3147 
    sig_byte = (unsigned char)(nvm_dword >> 8);
    #line 3148 
    if (((unsigned int)sig_byte & 192U) == 128U) {
      #line 3150 
      *bank = 0U;
      #line 3151 
      return 0;
    }
    #line 3155 
    ret_val = e1000_read_flash_dword_ich8lan(hw,act_offset + bank1_offset,& nvm_dword);
    #line 3158 
    if (ret_val != 0) 
                      #line 3159 
                      return ret_val;
    #line 3160 
    sig_byte = (unsigned char)(nvm_dword >> 8);
    #line 3161 
    if (((unsigned int)sig_byte & 192U) == 128U) {
      #line 3163 
      *bank = 1U;
      #line 3164 
      return 0;
    }
    {
      #line 3167 
      bool branch;
      #line 3167 
      struct _ddebug __UNIQUE_ID_ddebug464 = {.modname = (char *)"e1000e", .function = (char *)"e1000_valid_nvm_bank_detect_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"ERROR: No valid NVM bank present\n", .lineno = (unsigned int)3167U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3167 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug464.key.dd_key_false.key,(_Bool)0);
      #line 3167 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3167 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug464,(hw->adapter)->netdev,(char *)"ERROR: No valid NVM bank present\n");
    }
    #line 3168 
    return -1;
    #line 3169 
    case (unsigned int)6: 
                          #line 3169 
    ;
    #line 3170 
    case (unsigned int)7: 
                          #line 3170 
    ;
    #line 3171 
    eecd = __er32(hw,16UL);
    #line 3172 
    if ((eecd & 768U) == 768U) {
      #line 3174 
      if ((eecd & 4194304U) != 0U) 
                                   #line 3175 
                                   *bank = 1U; else 
                                                    #line 3177 
                                                    *bank = 0U;
      #line 3179 
      return 0;
    }
    {
      #line 3181 
      bool branch_0;
      #line 3181 
      struct _ddebug __UNIQUE_ID_ddebug465 = {.modname = (char *)"e1000e", .function = (char *)"e1000_valid_nvm_bank_detect_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Unable to determine valid NVM bank via EEC - reading flash signature\n", .lineno = (unsigned int)3181U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3181 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug465.key.dd_key_false.key,(_Bool)0);
      #line 3181 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 3181 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug465,(hw->adapter)->netdev,(char *)"Unable to determine valid NVM bank via EEC - reading flash signature\n");
    }
    #line 3183 
    default: 
             #line 3183 
    ;
    #line 3185 
    *bank = 0U;
    #line 3188 
    ret_val = e1000_read_flash_byte_ich8lan(hw,act_offset,& sig_byte);
    #line 3190 
    if (ret_val != 0) 
                      #line 3191 
                      return ret_val;
    #line 3192 
    if (((unsigned int)sig_byte & 192U) == 128U) {
      #line 3194 
      *bank = 0U;
      #line 3195 
      return 0;
    }
    #line 3199 
    ret_val = e1000_read_flash_byte_ich8lan(hw,act_offset + bank1_offset,& sig_byte);
    #line 3202 
    if (ret_val != 0) 
                      #line 3203 
                      return ret_val;
    #line 3204 
    if (((unsigned int)sig_byte & 192U) == 128U) {
      #line 3206 
      *bank = 1U;
      #line 3207 
      return 0;
    }
    {
      #line 3210 
      bool branch_1;
      #line 3210 
      struct _ddebug __UNIQUE_ID_ddebug466 = {.modname = (char *)"e1000e", .function = (char *)"e1000_valid_nvm_bank_detect_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"ERROR: No valid NVM bank present\n", .lineno = (unsigned int)3210U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3210 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug466.key.dd_key_false.key,(_Bool)0);
      #line 3210 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 3210 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug466,(hw->adapter)->netdev,(char *)"ERROR: No valid NVM bank present\n");
    }
    #line 3211 
    return -1;
  }
}

#line 3224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_read_nvm_spt(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 3229 
  u32 act_offset;
  #line 3233 
  u16 offset_to_read;
  #line 3234 
  u16 i;
  #line 3227 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 3228 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  #line 3230 
  s32 ret_val = 0;
  #line 3231 
  u32 bank = 0U;
  #line 3232 
  u32 dword = 0U;
  #line 3236 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      #line 3238 
      bool branch;
      #line 3238 
      struct _ddebug __UNIQUE_ID_ddebug467 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_nvm_spt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"nvm parameter(s) out of bounds\n", .lineno = (unsigned int)3238U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3238 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug467.key.dd_key_false.key,(_Bool)0);
      #line 3238 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3238 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug467,(hw->adapter)->netdev,(char *)"nvm parameter(s) out of bounds\n");
    }
    #line 3239 
    ret_val = -1;
    #line 3240 
    goto out;
  }
  #line 3243 
  (*(nvm->ops.acquire))(hw);
  #line 3245 
  ret_val = e1000_valid_nvm_bank_detect_ich8lan(hw,& bank);
  #line 3246 
  if (ret_val != 0) {
    {
      #line 3247 
      bool branch_0;
      #line 3247 
      struct _ddebug __UNIQUE_ID_ddebug468 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_nvm_spt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Could not detect valid bank, assuming bank 0\n", .lineno = (unsigned int)3247U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3247 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug468.key.dd_key_false.key,(_Bool)0);
      #line 3247 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 3247 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug468,(hw->adapter)->netdev,(char *)"Could not detect valid bank, assuming bank 0\n");
    }
    #line 3248 
    bank = 0U;
  }
  #line 3251 
  if (bank != 0U) 
                  #line 3251 
                  act_offset = nvm->flash_bank_size; else 
                                                          #line 3251 
                                                          act_offset = 0U;
  #line 3252 
  act_offset = (unsigned int)offset + act_offset;
  #line 3254 
  ret_val = 0;
  #line 3256 
  i = (unsigned short)0U;
  #line 3256 
  while ((int)i < (int)words) {
    #line 3257 
    if ((int)words - (int)i == 1) 
      #line 3258 
      if ((int)dev_spec->shadow_ram[(int)offset + (int)i].modified != 0) 
        #line 3259 
        *(data + (unsigned long)i) = dev_spec->shadow_ram[(int)offset + (int)i].value;
      else {
        #line 3262 
        offset_to_read = (unsigned short)((unsigned int)((int)((unsigned short)act_offset) + (int)i) & 65534U);
        #line 3264 
        ret_val = e1000_read_flash_dword_ich8lan(hw,(unsigned int)offset_to_read,& dword);
        #line 3268 
        if (ret_val != 0) 
                          #line 3269 
                          break;
        #line 3270 
        if ((((unsigned int)i + act_offset) & 1U) == 0U) 
                                                         #line 3271 
                                                         *(data + (unsigned long)i) = (unsigned short)dword; else 
                                                                    #line 3273 
                                                                    *(data + (unsigned long)i) = (unsigned short)(dword >> 16);
      }
    else {
      #line 3276 
      offset_to_read = (unsigned short)((int)((unsigned short)act_offset) + (int)i);
      #line 3277 
      if (! dev_spec->shadow_ram[(int)offset + (int)i].modified || ! dev_spec->shadow_ram[((int)offset + (int)i) + 1].modified) {
        #line 3279 
        ret_val = e1000_read_flash_dword_ich8lan(hw,(unsigned int)offset_to_read,& dword);
        #line 3283 
        if (ret_val != 0) 
                          #line 3284 
                          break;
      }
      #line 3286 
      if ((int)dev_spec->shadow_ram[(int)offset + (int)i].modified != 0) 
        #line 3287 
        *(data + (unsigned long)i) = dev_spec->shadow_ram[(int)offset + (int)i].value; else 
                                                                    #line 3290 
                                                                    *(data + (unsigned long)i) = (unsigned short)dword;
      #line 3291 
      if ((int)dev_spec->shadow_ram[(int)offset + (int)i].modified != 0) 
        #line 3292 
        *(data + ((unsigned long)i + (unsigned long)1U)) = dev_spec->shadow_ram[((int)offset + (int)i) + 1].value; else 
                                                                    #line 3295 
                                                                    *(data + ((unsigned long)i + (unsigned long)1U)) = (unsigned short)(dword >> 16);
    }
    #line 3256 
    i = (unsigned short)((unsigned int)i + 2U);
  }
  #line 3299 
  (*(nvm->ops.release))(hw);
  #line 3301 
  out: 
       #line 3301 
  ;
  #line 3302 
  if (ret_val != 0) {
    #line 3303 
    bool branch_1;
    #line 3303 
    struct _ddebug __UNIQUE_ID_ddebug469 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_nvm_spt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"NVM read error: %d\n", .lineno = (unsigned int)3303U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3303 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug469.key.dd_key_false.key,(_Bool)0);
    #line 3303 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 3303 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug469,(hw->adapter)->netdev,(char *)"NVM read error: %d\n",ret_val);
  }
  #line 3305 
  return ret_val;
}

#line 3317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_read_nvm_ich8lan(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 3322 
  u32 act_offset;
  #line 3325 
  u16 i;
  #line 3325 
  u16 word;
  #line 3320 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 3321 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  #line 3323 
  s32 ret_val = 0;
  #line 3324 
  u32 bank = 0U;
  #line 3327 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      #line 3329 
      bool branch;
      #line 3329 
      struct _ddebug __UNIQUE_ID_ddebug470 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_nvm_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"nvm parameter(s) out of bounds\n", .lineno = (unsigned int)3329U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3329 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug470.key.dd_key_false.key,(_Bool)0);
      #line 3329 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3329 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug470,(hw->adapter)->netdev,(char *)"nvm parameter(s) out of bounds\n");
    }
    #line 3330 
    ret_val = -1;
    #line 3331 
    goto out;
  }
  #line 3334 
  (*(nvm->ops.acquire))(hw);
  #line 3336 
  ret_val = e1000_valid_nvm_bank_detect_ich8lan(hw,& bank);
  #line 3337 
  if (ret_val != 0) {
    {
      #line 3338 
      bool branch_0;
      #line 3338 
      struct _ddebug __UNIQUE_ID_ddebug471 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_nvm_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Could not detect valid bank, assuming bank 0\n", .lineno = (unsigned int)3338U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3338 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug471.key.dd_key_false.key,(_Bool)0);
      #line 3338 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 3338 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug471,(hw->adapter)->netdev,(char *)"Could not detect valid bank, assuming bank 0\n");
    }
    #line 3339 
    bank = 0U;
  }
  #line 3342 
  if (bank != 0U) 
                  #line 3342 
                  act_offset = nvm->flash_bank_size; else 
                                                          #line 3342 
                                                          act_offset = 0U;
  #line 3343 
  act_offset = (unsigned int)offset + act_offset;
  #line 3345 
  ret_val = 0;
  #line 3346 
  i = (unsigned short)0U;
  #line 3346 
  while ((int)i < (int)words) {
    #line 3347 
    if ((int)dev_spec->shadow_ram[(int)offset + (int)i].modified != 0) 
      #line 3348 
      *(data + (unsigned long)i) = dev_spec->shadow_ram[(int)offset + (int)i].value;
    else {
      #line 3350 
      ret_val = e1000_read_flash_word_ich8lan(hw,(unsigned int)i + act_offset,& word);
      #line 3353 
      if (ret_val != 0) 
                        #line 3354 
                        break;
      #line 3355 
      *(data + (unsigned long)i) = word;
    }
    #line 3346 
    i = (u16)((int)i + 1);
  }
  #line 3359 
  (*(nvm->ops.release))(hw);
  #line 3361 
  out: 
       #line 3361 
  ;
  #line 3362 
  if (ret_val != 0) {
    #line 3363 
    bool branch_1;
    #line 3363 
    struct _ddebug __UNIQUE_ID_ddebug472 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_nvm_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"NVM read error: %d\n", .lineno = (unsigned int)3363U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3363 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug472.key.dd_key_false.key,(_Bool)0);
    #line 3363 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 3363 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug472,(hw->adapter)->netdev,(char *)"NVM read error: %d\n",ret_val);
  }
  #line 3365 
  return ret_val;
}

#line 3375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_flash_cycle_init_ich8lan(struct e1000_hw *hw)
{
  #line 3377 
  union ich8_hws_flash_status hsfsts;
  #line 3378 
  s32 ret_val = -1;
  #line 3380 
  hsfsts.regval = __er16flash(hw,4UL);
  #line 3383 
  if ((unsigned int)hsfsts.hsf_status.fldesvalid == 0U) {
    {
      #line 3384 
      bool branch;
      #line 3384 
      struct _ddebug __UNIQUE_ID_ddebug473 = {.modname = (char *)"e1000e", .function = (char *)"e1000_flash_cycle_init_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Flash descriptor invalid.  SW Sequencing must be used.\n", .lineno = (unsigned int)3384U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3384 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug473.key.dd_key_false.key,(_Bool)0);
      #line 3384 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3384 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug473,(hw->adapter)->netdev,(char *)"Flash descriptor invalid.  SW Sequencing must be used.\n");
    }
    #line 3385 
    return -1;
  }
  #line 3389 
  hsfsts.hsf_status.flcerr = (unsigned short)1U;
  #line 3390 
  hsfsts.hsf_status.dael = (unsigned short)1U;
  #line 3391 
  if (hw->mac.type > (unsigned int)e1000_pch_lpt) 
                                                  #line 3392 
                                                  __ew32flash(hw,4UL,(unsigned int)hsfsts.regval); else 
                                                                    #line 3394 
                                                                    __ew16flash(hw,4UL,(unsigned short)((int)hsfsts.regval));
  #line 3404 
  if ((unsigned int)hsfsts.hsf_status.flcinprog == 0U) {
    #line 3409 
    hsfsts.hsf_status.flcdone = (unsigned short)1U;
    #line 3410 
    if (hw->mac.type > (unsigned int)e1000_pch_lpt) 
                                                    #line 3411 
                                                    __ew32flash(hw,4UL,(unsigned int)hsfsts.regval); else 
                                                                    #line 3413 
                                                                    __ew16flash(hw,4UL,(unsigned short)((int)hsfsts.regval));
    #line 3414 
    ret_val = 0;
  }
  else {
    #line 3416 
    s32 i;
    #line 3421 
    i = 0;
    #line 3421 
    while (i <= 9999999) {
      #line 3422 
      hsfsts.regval = __er16flash(hw,4UL);
      #line 3423 
      if ((unsigned int)hsfsts.hsf_status.flcinprog == 0U) {
        #line 3424 
        ret_val = 0;
        #line 3425 
        break;
      }
      #line 3427 
      __const_udelay(4295UL);
      #line 3421 
      i ++;
    }
    #line 3429 
    if (ret_val == 0) {
      #line 3433 
      hsfsts.hsf_status.flcdone = (unsigned short)1U;
      #line 3434 
      if (hw->mac.type > (unsigned int)e1000_pch_lpt) 
                                                      #line 3435 
                                                      __ew32flash(hw,4UL,(unsigned int)hsfsts.regval); else 
                                                                    #line 3438 
                                                                    __ew16flash(hw,4UL,(unsigned short)((int)hsfsts.regval));
    }
    else {
      #line 3440 
      bool branch_0;
      #line 3440 
      struct _ddebug __UNIQUE_ID_ddebug474 = {.modname = (char *)"e1000e", .function = (char *)"e1000_flash_cycle_init_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Flash controller busy, cannot get access\n", .lineno = (unsigned int)3440U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3440 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug474.key.dd_key_false.key,(_Bool)0);
      #line 3440 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 3440 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug474,(hw->adapter)->netdev,(char *)"Flash controller busy, cannot get access\n");
    }
  }
  #line 3444 
  return ret_val;
}

#line 3454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_flash_cycle_ich8lan(struct e1000_hw *hw, u32 timeout)
{
  #line 3456 
  union ich8_hws_flash_ctrl hsflctl;
  #line 3457 
  union ich8_hws_flash_status hsfsts;
  #line 3458 
  u32 i = 0U;
  #line 3461 
  if (hw->mac.type > (unsigned int)e1000_pch_lpt) {
    #line 3462 
    hsflctl.regval = (unsigned short)(__er32flash(hw,4UL) >> 16);
  }
  else 
       #line 3464 
       hsflctl.regval = __er16flash(hw,6UL);
  #line 3465 
  hsflctl.hsf_ctrl.flcgo = (unsigned short)1U;
  #line 3467 
  if (hw->mac.type > (unsigned int)e1000_pch_lpt) 
                                                  #line 3468 
                                                  __ew32flash(hw,4UL,(unsigned int)((int)hsflctl.regval << 16)); else 
                                                                    #line 3470 
                                                                    __ew16flash(hw,6UL,(unsigned short)((int)hsflctl.regval));
  #line 3473 
  while (1) {
    #line 3479 
    u32 tmp_0;
    #line 3474 
    hsfsts.regval = __er16flash(hw,4UL);
    #line 3475 
    if ((unsigned int)hsfsts.hsf_status.flcdone != 0U) 
                                                       #line 3476 
                                                       break;
    #line 3477 
    __const_udelay(4295UL);
    #line 3479 
    tmp_0 = i;
    #line 3479 
    i ++;
    #line 3479 
    ;
    #line 3479 
    if (! (tmp_0 < timeout)) 
                             #line 3473 
                             break;
  }
  #line 3480 
  if ((unsigned int)hsfsts.hsf_status.flcdone != 0U && (unsigned int)hsfsts.hsf_status.flcerr == 0U) 
    #line 3481 
    return 0;
  #line 3483 
  return -1;
}

#line 3495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_read_flash_dword_ich8lan(struct e1000_hw *hw, u32 offset, u32 *data)
{
  #line 3499 
  offset <<= 1;
  #line 3500 
  return e1000_read_flash_data32_ich8lan(hw,offset,data);
}

#line 3512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_read_flash_word_ich8lan(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 3516 
  offset <<= 1;
  #line 3518 
  return e1000_read_flash_data_ich8lan(hw,offset,(unsigned char)2,data);
}

#line 3529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_read_flash_byte_ich8lan(struct e1000_hw *hw, u32 offset, u8 *data)
{
  #line 3532 
  s32 ret_val;
  #line 3533 
  u16 word = (unsigned short)0U;
  #line 3538 
  if (hw->mac.type > (unsigned int)e1000_pch_lpt) 
                                                  #line 3539 
                                                  return -1; else 
                                                                  #line 3541 
                                                                  ret_val = e1000_read_flash_data_ich8lan(hw,offset,(unsigned char)1,& word);
  #line 3543 
  if (ret_val != 0) 
                    #line 3544 
                    return ret_val;
  #line 3546 
  *data = (unsigned char)word;
  #line 3548 
  return 0;
}

#line 3560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_read_flash_data_ich8lan(struct e1000_hw *hw, u32 offset, u8 size, u16 *data)
{
  #line 3563 
  union ich8_hws_flash_status hsfsts;
  #line 3564 
  union ich8_hws_flash_ctrl hsflctl;
  #line 3565 
  u32 flash_linear_addr;
  #line 3566 
  u32 flash_data = 0U;
  #line 3567 
  s32 ret_val = -1;
  #line 3568 
  u8 count = (unsigned char)0U;
  #line 3570 
  if ((unsigned int)size + 255U > 1U || offset > 16777215U) 
                                                            #line 3571 
                                                            return -1;
  #line 3573 
  flash_linear_addr = (offset & 16777215U) + hw->nvm.flash_base_addr;
  #line 3576 
  while (1) {
    #line 3622 
    u8 tmp_0;
    #line 3577 
    __const_udelay(4295UL);
    #line 3579 
    ret_val = e1000_flash_cycle_init_ich8lan(hw);
    #line 3580 
    if (ret_val != 0) 
                      #line 3581 
                      break;
    #line 3583 
    hsflctl.regval = __er16flash(hw,6UL);
    #line 3585 
    hsflctl.hsf_ctrl.fldbcount = (unsigned short)((unsigned int)size + 255U);
    #line 3586 
    hsflctl.hsf_ctrl.flcycle = (unsigned short)0U;
    #line 3587 
    __ew16flash(hw,6UL,(unsigned short)((int)hsflctl.regval));
    #line 3589 
    __ew32flash(hw,8UL,flash_linear_addr);
    #line 3591 
    ret_val = e1000_flash_cycle_ich8lan(hw,10000000U);
    #line 3600 
    if (ret_val == 0) {
      #line 3601 
      flash_data = __er32flash(hw,16UL);
      #line 3602 
      if ((unsigned int)size == 1U) 
                                    #line 3603 
                                    *data = (unsigned short)((unsigned char)flash_data);
      else 
        #line 3604 
        if ((unsigned int)size == 2U) 
                                      #line 3605 
                                      *data = (unsigned short)flash_data;
      #line 3606 
      break;
    }
    else {
      #line 3613 
      hsfsts.regval = __er16flash(hw,4UL);
      #line 3614 
      if ((unsigned int)hsfsts.hsf_status.flcerr != 0U) 
                                                        #line 3616 
                                                        goto __Cont;
      else 
        #line 3617 
        if ((unsigned int)hsfsts.hsf_status.flcdone == 0U) {
          {
            #line 3618 
            bool branch;
            #line 3618 
            struct _ddebug __UNIQUE_ID_ddebug475 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_flash_data_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Timeout error - flash cycle did not complete.\n", .lineno = (unsigned int)3618U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 3618 
            branch = arch_static_branch(& __UNIQUE_ID_ddebug475.key.dd_key_false.key,(_Bool)0);
            #line 3618 
            if ((long)((long)((int)branch != 0)) != 0L) 
                                                        #line 3618 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug475,(hw->adapter)->netdev,(char *)"Timeout error - flash cycle did not complete.\n");
          }
          #line 3619 
          break;
        }
    }
    #line 3576 
    __Cont: { /* sequence */
              #line 3622 
              tmp_0 = count;
              #line 3622 
              count = (u8)((int)count + 1);
              #line 3622 
              ;
            }
    #line 3622 
    if (! ((unsigned int)tmp_0 <= 9U)) 
                                       #line 3576 
                                       break;
  }
  #line 3624 
  return ret_val;
}

#line 3636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_read_flash_data32_ich8lan(struct e1000_hw *hw, u32 offset, u32 *data)
{
  #line 3639 
  union ich8_hws_flash_status hsfsts;
  #line 3640 
  union ich8_hws_flash_ctrl hsflctl;
  #line 3641 
  u32 flash_linear_addr;
  #line 3642 
  s32 ret_val = -1;
  #line 3643 
  u8 count = (unsigned char)0U;
  #line 3645 
  if (offset > 16777215U || hw->mac.type <= (unsigned int)e1000_pch_lpt) 
    #line 3646 
    return -1;
  #line 3647 
  flash_linear_addr = (offset & 16777215U) + hw->nvm.flash_base_addr;
  #line 3650 
  while (1) {
    #line 3697 
    u8 tmp_1;
    {
      #line 3651 
      __const_udelay(4295UL);
      #line 3653 
      ret_val = e1000_flash_cycle_init_ich8lan(hw);
      #line 3654 
      if (ret_val != 0) 
                        #line 3655 
                        break;
      #line 3659 
      hsflctl.regval = (unsigned short)(__er32flash(hw,4UL) >> 16);
      #line 3662 
      hsflctl.hsf_ctrl.fldbcount = (unsigned short)3U;
      #line 3663 
      hsflctl.hsf_ctrl.flcycle = (unsigned short)0U;
      #line 3667 
      __ew32flash(hw,4UL,(unsigned int)hsflctl.regval << 16);
      #line 3668 
      __ew32flash(hw,8UL,flash_linear_addr);
      #line 3670 
      ret_val = e1000_flash_cycle_ich8lan(hw,10000000U);
      #line 3679 
      if (ret_val == 0) {
        #line 3680 
        *data = __er32flash(hw,16UL);
        #line 3681 
        break;
      }
      else {
        #line 3688 
        hsfsts.regval = __er16flash(hw,4UL);
        #line 3689 
        if ((unsigned int)hsfsts.hsf_status.flcerr != 0U) 
                                                          #line 3691 
                                                          goto __Cont;
        else 
          #line 3692 
          if ((unsigned int)hsfsts.hsf_status.flcdone == 0U) {
            {
              #line 3693 
              bool branch;
              #line 3693 
              struct _ddebug __UNIQUE_ID_ddebug476 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_flash_data32_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Timeout error - flash cycle did not complete.\n", .lineno = (unsigned int)3693U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 3693 
              branch = arch_static_branch(& __UNIQUE_ID_ddebug476.key.dd_key_false.key,(_Bool)0);
              #line 3693 
              if ((long)((long)((int)branch != 0)) != 0L) 
                                                          #line 3693 
                                                          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug476,(hw->adapter)->netdev,(char *)"Timeout error - flash cycle did not complete.\n");
            }
            #line 3694 
            break;
          }
      }
    }
    #line 3650 
    __Cont: { /* sequence */
              #line 3697 
              tmp_1 = count;
              #line 3697 
              count = (u8)((int)count + 1);
              #line 3697 
              ;
            }
    #line 3697 
    if (! ((unsigned int)tmp_1 <= 9U)) 
                                       #line 3650 
                                       break;
  }
  #line 3699 
  return ret_val;
}

#line 3711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_write_nvm_ich8lan(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 3716 
  u16 i;
  #line 3714 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 3715 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  #line 3718 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      #line 3720 
      bool branch;
      #line 3720 
      struct _ddebug __UNIQUE_ID_ddebug477 = {.modname = (char *)"e1000e", .function = (char *)"e1000_write_nvm_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"nvm parameter(s) out of bounds\n", .lineno = (unsigned int)3720U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3720 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug477.key.dd_key_false.key,(_Bool)0);
      #line 3720 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3720 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug477,(hw->adapter)->netdev,(char *)"nvm parameter(s) out of bounds\n");
    }
    #line 3721 
    return -1;
  }
  #line 3724 
  (*(nvm->ops.acquire))(hw);
  #line 3726 
  i = (unsigned short)0U;
  #line 3726 
  while ((int)i < (int)words) {
    #line 3727 
    dev_spec->shadow_ram[(int)offset + (int)i].modified = (_Bool)1;
    #line 3728 
    dev_spec->shadow_ram[(int)offset + (int)i].value = *(data + (unsigned long)i);
    #line 3726 
    i = (u16)((int)i + 1);
  }
  #line 3731 
  (*(nvm->ops.release))(hw);
  #line 3733 
  return 0;
}

#line 3747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_update_nvm_checksum_spt(struct e1000_hw *hw)
{
  #line 3751 
  u32 i;
  #line 3751 
  u32 act_offset;
  #line 3751 
  u32 new_bank_offset;
  #line 3751 
  u32 old_bank_offset;
  #line 3751 
  u32 bank;
  #line 3752 
  s32 ret_val;
  #line 3749 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 3750 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  #line 3753 
  u32 dword = 0U;
  #line 3755 
  ret_val = e1000e_update_nvm_checksum_generic(hw);
  #line 3756 
  if (ret_val != 0) 
                    #line 3757 
                    goto out;
  #line 3759 
  if (nvm->type != (unsigned int)e1000_nvm_flash_sw) 
                                                     #line 3760 
                                                     goto out;
  #line 3762 
  (*(nvm->ops.acquire))(hw);
  #line 3768 
  ret_val = e1000_valid_nvm_bank_detect_ich8lan(hw,& bank);
  #line 3769 
  if (ret_val != 0) {
    {
      #line 3770 
      bool branch;
      #line 3770 
      struct _ddebug __UNIQUE_ID_ddebug478 = {.modname = (char *)"e1000e", .function = (char *)"e1000_update_nvm_checksum_spt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Could not detect valid bank, assuming bank 0\n", .lineno = (unsigned int)3770U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3770 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug478.key.dd_key_false.key,(_Bool)0);
      #line 3770 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3770 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug478,(hw->adapter)->netdev,(char *)"Could not detect valid bank, assuming bank 0\n");
    }
    #line 3771 
    bank = 0U;
  }
  #line 3774 
  if (bank == 0U) {
    #line 3775 
    new_bank_offset = nvm->flash_bank_size;
    #line 3776 
    old_bank_offset = 0U;
    #line 3777 
    ret_val = e1000_erase_flash_bank_ich8lan(hw,1U);
    #line 3778 
    if (ret_val != 0) 
                      #line 3779 
                      goto release;
  }
  else {
    #line 3781 
    old_bank_offset = nvm->flash_bank_size;
    #line 3782 
    new_bank_offset = 0U;
    #line 3783 
    ret_val = e1000_erase_flash_bank_ich8lan(hw,0U);
    #line 3784 
    if (ret_val != 0) 
                      #line 3785 
                      goto release;
  }
  #line 3787 
  i = 0U;
  #line 3787 
  while (i <= 2047U) {
    #line 3792 
    ret_val = e1000_read_flash_dword_ich8lan(hw,i + old_bank_offset,& dword);
    #line 3796 
    if ((int)dev_spec->shadow_ram[i].modified != 0) {
      #line 3797 
      dword &= 4294901760U;
      #line 3798 
      dword = (unsigned int)dev_spec->shadow_ram[i].value | dword;
    }
    #line 3800 
    if ((int)dev_spec->shadow_ram[i + 1U].modified != 0) {
      #line 3801 
      dword &= 65535U;
      #line 3802 
      dword = (unsigned int)((int)dev_spec->shadow_ram[i + 1U].value << 16) | dword;
    }
    #line 3805 
    if (ret_val != 0) 
                      #line 3806 
                      break;
    #line 3815 
    if (i == 18U) 
                  #line 3816 
                  dword |= 3221225472U;
    #line 3819 
    act_offset = (i + new_bank_offset) << 1;
    #line 3821 
    usleep_range(100UL,200UL);
    #line 3824 
    act_offset = i + new_bank_offset;
    #line 3825 
    ret_val = e1000_retry_write_flash_dword_ich8lan(hw,act_offset,dword);
    #line 3827 
    if (ret_val != 0) 
                      #line 3828 
                      break;
    #line 3787 
    i += 2U;
  }
  #line 3834 
  if (ret_val != 0) {
    {
      #line 3836 
      bool branch_0;
      #line 3836 
      struct _ddebug __UNIQUE_ID_ddebug479 = {.modname = (char *)"e1000e", .function = (char *)"e1000_update_nvm_checksum_spt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Flash commit failed.\n", .lineno = (unsigned int)3836U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3836 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug479.key.dd_key_false.key,(_Bool)0);
      #line 3836 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 3836 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug479,(hw->adapter)->netdev,(char *)"Flash commit failed.\n");
    }
    #line 3837 
    goto release;
  }
  #line 3845 
  act_offset = new_bank_offset + 19U;
  #line 3848 
  act_offset --;
  #line 3849 
  ret_val = e1000_read_flash_dword_ich8lan(hw,act_offset,& dword);
  #line 3851 
  if (ret_val != 0) 
                    #line 3852 
                    goto release;
  #line 3854 
  dword &= 3221225471U;
  #line 3855 
  ret_val = e1000_retry_write_flash_dword_ich8lan(hw,act_offset,dword);
  #line 3857 
  if (ret_val != 0) 
                    #line 3858 
                    goto release;
  #line 3865 
  act_offset = (old_bank_offset + 19U) * 2U + 1U;
  #line 3868 
  act_offset = old_bank_offset + 18U;
  #line 3869 
  ret_val = e1000_read_flash_dword_ich8lan(hw,act_offset,& dword);
  #line 3871 
  if (ret_val != 0) 
                    #line 3872 
                    goto release;
  #line 3874 
  dword &= 16777215U;
  #line 3875 
  ret_val = e1000_retry_write_flash_dword_ich8lan(hw,act_offset,dword);
  #line 3877 
  if (ret_val != 0) 
                    #line 3878 
                    goto release;
  #line 3881 
  i = 0U;
  #line 3881 
  while (i <= 2047U) {
    #line 3882 
    dev_spec->shadow_ram[i].modified = (_Bool)0;
    #line 3883 
    dev_spec->shadow_ram[i].value = (unsigned short)65535U;
    #line 3881 
    i ++;
  }
  #line 3886 
  release: 
           #line 3886 
  ;
  #line 3887 
  (*(nvm->ops.release))(hw);
  #line 3892 
  if (ret_val == 0) {
    #line 3893 
    (*(nvm->ops.reload))(hw);
    #line 3894 
    usleep_range(10000UL,11000UL);
  }
  #line 3897 
  out: 
       #line 3897 
  ;
  #line 3898 
  if (ret_val != 0) {
    #line 3899 
    bool branch_1;
    #line 3899 
    struct _ddebug __UNIQUE_ID_ddebug480 = {.modname = (char *)"e1000e", .function = (char *)"e1000_update_nvm_checksum_spt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"NVM update error: %d\n", .lineno = (unsigned int)3899U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3899 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug480.key.dd_key_false.key,(_Bool)0);
    #line 3899 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 3899 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug480,(hw->adapter)->netdev,(char *)"NVM update error: %d\n",ret_val);
  }
  #line 3901 
  return ret_val;
}

#line 3915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_update_nvm_checksum_ich8lan(struct e1000_hw *hw)
{
  #line 3919 
  u32 i;
  #line 3919 
  u32 act_offset;
  #line 3919 
  u32 new_bank_offset;
  #line 3919 
  u32 old_bank_offset;
  #line 3919 
  u32 bank;
  #line 3920 
  s32 ret_val;
  #line 3917 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 3918 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  #line 3921 
  u16 data = (unsigned short)0U;
  #line 3923 
  ret_val = e1000e_update_nvm_checksum_generic(hw);
  #line 3924 
  if (ret_val != 0) 
                    #line 3925 
                    goto out;
  #line 3927 
  if (nvm->type != (unsigned int)e1000_nvm_flash_sw) 
                                                     #line 3928 
                                                     goto out;
  #line 3930 
  (*(nvm->ops.acquire))(hw);
  #line 3936 
  ret_val = e1000_valid_nvm_bank_detect_ich8lan(hw,& bank);
  #line 3937 
  if (ret_val != 0) {
    {
      #line 3938 
      bool branch;
      #line 3938 
      struct _ddebug __UNIQUE_ID_ddebug481 = {.modname = (char *)"e1000e", .function = (char *)"e1000_update_nvm_checksum_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Could not detect valid bank, assuming bank 0\n", .lineno = (unsigned int)3938U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3938 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug481.key.dd_key_false.key,(_Bool)0);
      #line 3938 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3938 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug481,(hw->adapter)->netdev,(char *)"Could not detect valid bank, assuming bank 0\n");
    }
    #line 3939 
    bank = 0U;
  }
  #line 3942 
  if (bank == 0U) {
    #line 3943 
    new_bank_offset = nvm->flash_bank_size;
    #line 3944 
    old_bank_offset = 0U;
    #line 3945 
    ret_val = e1000_erase_flash_bank_ich8lan(hw,1U);
    #line 3946 
    if (ret_val != 0) 
                      #line 3947 
                      goto release;
  }
  else {
    #line 3949 
    old_bank_offset = nvm->flash_bank_size;
    #line 3950 
    new_bank_offset = 0U;
    #line 3951 
    ret_val = e1000_erase_flash_bank_ich8lan(hw,0U);
    #line 3952 
    if (ret_val != 0) 
                      #line 3953 
                      goto release;
  }
  #line 3955 
  i = 0U;
  #line 3955 
  while (i <= 2047U) {
    #line 3956 
    if ((int)dev_spec->shadow_ram[i].modified != 0) 
                                                    #line 3957 
                                                    data = dev_spec->shadow_ram[i].value;
    else {
      #line 3959 
      ret_val = e1000_read_flash_word_ich8lan(hw,i + old_bank_offset,& data);
      #line 3962 
      if (ret_val != 0) 
                        #line 3963 
                        break;
    }
    #line 3973 
    if (i == 19U) 
                  #line 3974 
                  data = (unsigned short)((unsigned int)data | 49152U);
    #line 3977 
    act_offset = (i + new_bank_offset) << 1;
    #line 3979 
    usleep_range(100UL,200UL);
    #line 3981 
    ret_val = e1000_retry_write_flash_byte_ich8lan(hw,act_offset,(unsigned char)((int)((unsigned char)data)));
    #line 3984 
    if (ret_val != 0) 
                      #line 3985 
                      break;
    #line 3987 
    usleep_range(100UL,200UL);
    #line 3988 
    ret_val = e1000_retry_write_flash_byte_ich8lan(hw,act_offset + 1U,(unsigned char)((int)((unsigned char)((int)data >> 8))));
    #line 3991 
    if (ret_val != 0) 
                      #line 3992 
                      break;
    #line 3955 
    i ++;
  }
  #line 3998 
  if (ret_val != 0) {
    {
      #line 4000 
      bool branch_0;
      #line 4000 
      struct _ddebug __UNIQUE_ID_ddebug482 = {.modname = (char *)"e1000e", .function = (char *)"e1000_update_nvm_checksum_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Flash commit failed.\n", .lineno = (unsigned int)4000U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 4000 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug482.key.dd_key_false.key,(_Bool)0);
      #line 4000 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 4000 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug482,(hw->adapter)->netdev,(char *)"Flash commit failed.\n");
    }
    #line 4001 
    goto release;
  }
  #line 4009 
  act_offset = new_bank_offset + 19U;
  #line 4010 
  ret_val = e1000_read_flash_word_ich8lan(hw,act_offset,& data);
  #line 4011 
  if (ret_val != 0) 
                    #line 4012 
                    goto release;
  #line 4014 
  data = (unsigned short)((unsigned int)data & 49151U);
  #line 4015 
  ret_val = e1000_retry_write_flash_byte_ich8lan(hw,act_offset * 2U + 1U,(unsigned char)((int)((unsigned char)((int)data >> 8))));
  #line 4018 
  if (ret_val != 0) 
                    #line 4019 
                    goto release;
  #line 4026 
  act_offset = (old_bank_offset + 19U) * 2U + 1U;
  #line 4027 
  ret_val = e1000_retry_write_flash_byte_ich8lan(hw,act_offset,(unsigned char)0);
  #line 4028 
  if (ret_val != 0) 
                    #line 4029 
                    goto release;
  #line 4032 
  i = 0U;
  #line 4032 
  while (i <= 2047U) {
    #line 4033 
    dev_spec->shadow_ram[i].modified = (_Bool)0;
    #line 4034 
    dev_spec->shadow_ram[i].value = (unsigned short)65535U;
    #line 4032 
    i ++;
  }
  #line 4037 
  release: 
           #line 4037 
  ;
  #line 4038 
  (*(nvm->ops.release))(hw);
  #line 4043 
  if (ret_val == 0) {
    #line 4044 
    (*(nvm->ops.reload))(hw);
    #line 4045 
    usleep_range(10000UL,11000UL);
  }
  #line 4048 
  out: 
       #line 4048 
  ;
  #line 4049 
  if (ret_val != 0) {
    #line 4050 
    bool branch_1;
    #line 4050 
    struct _ddebug __UNIQUE_ID_ddebug483 = {.modname = (char *)"e1000e", .function = (char *)"e1000_update_nvm_checksum_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"NVM update error: %d\n", .lineno = (unsigned int)4050U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4050 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug483.key.dd_key_false.key,(_Bool)0);
    #line 4050 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 4050 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug483,(hw->adapter)->netdev,(char *)"NVM update error: %d\n",ret_val);
  }
  #line 4052 
  return ret_val;
}

#line 4063  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_validate_nvm_checksum_ich8lan(struct e1000_hw *hw)
{
  #line 4065 
  s32 ret_val;
  #line 4066 
  u16 data;
  #line 4067 
  u16 word;
  #line 4068 
  u16 valid_csum_mask;
  #line 4075 
  switch ((unsigned int)hw->mac.type) {
    #line 4076 
    case (unsigned int)11: 
                           #line 4076 
    ;
    #line 4077 
    case (unsigned int)12: 
                           #line 4077 
    ;
    #line 4078 
    case (unsigned int)13: 
                           #line 4078 
    ;
    #line 4079 
    case (unsigned int)14: 
                           #line 4079 
    ;
    #line 4080 
    word = (unsigned short)3U;
    #line 4081 
    valid_csum_mask = (unsigned short)1U;
    #line 4082 
    break;
    #line 4083 
    default: 
             #line 4083 
    ;
    #line 4084 
    word = (unsigned short)25U;
    #line 4085 
    valid_csum_mask = (unsigned short)64U;
    #line 4086 
    break;
  }
  #line 4089 
  ret_val = e1000_read_nvm(hw,(unsigned short)((int)word),(unsigned short)1,& data);
  #line 4090 
  if (ret_val != 0) 
                    #line 4091 
                    return ret_val;
  #line 4093 
  if ((unsigned int)((int)data & (int)valid_csum_mask) == 0U) {
    #line 4094 
    data = (unsigned short)((int)data | (int)valid_csum_mask);
    #line 4095 
    ret_val = e1000_write_nvm(hw,(unsigned short)((int)word),(unsigned short)1,& data);
    #line 4096 
    if (ret_val != 0) 
                      #line 4097 
                      return ret_val;
    #line 4098 
    ret_val = e1000e_update_nvm_checksum(hw);
    #line 4099 
    if (ret_val != 0) 
                      #line 4100 
                      return ret_val;
  }
  #line 4103 
  return e1000e_validate_nvm_checksum_generic(hw);
}

#line 4116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000e_write_protect_nvm_ich8lan(struct e1000_hw *hw)
{
  #line 4119 
  union ich8_flash_protected_range pr0;
  #line 4120 
  union ich8_hws_flash_status hsfsts;
  #line 4121 
  u32 gfpreg;
  #line 4118 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 4123 
  (*(nvm->ops.acquire))(hw);
  #line 4125 
  gfpreg = __er32flash(hw,0UL);
  #line 4128 
  pr0.regval = __er32flash(hw,116UL);
  #line 4129 
  pr0.range.base = (unsigned int)gfpreg;
  #line 4130 
  pr0.range.limit = (unsigned int)(gfpreg >> 16);
  #line 4131 
  pr0.range.wpe = (unsigned int)1U;
  #line 4132 
  __ew32flash(hw,116UL,pr0.regval);
  #line 4139 
  hsfsts.regval = __er16flash(hw,4UL);
  #line 4140 
  hsfsts.hsf_status.flockdn = (unsigned short)1U;
  #line 4141 
  __ew32flash(hw,4UL,(unsigned int)hsfsts.regval);
  #line 4143 
  (*(nvm->ops.release))(hw);
  #line 4144 
  return;
}

#line 4155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_write_flash_data_ich8lan(struct e1000_hw *hw, u32 offset, u8 size, u16 data)
{
  #line 4158 
  union ich8_hws_flash_status hsfsts;
  #line 4159 
  union ich8_hws_flash_ctrl hsflctl;
  #line 4160 
  u32 flash_linear_addr;
  #line 4162 
  s32 ret_val;
  #line 4161 
  u32 flash_data = 0U;
  #line 4163 
  u8 count = (unsigned char)0U;
  #line 4165 
  if (hw->mac.type > (unsigned int)e1000_pch_lpt) {
    #line 4166 
    if ((unsigned int)size != 4U || offset > 16777215U) 
                                                        #line 4167 
                                                        return -1;
  }
  else 
    #line 4169 
    if ((unsigned int)size + 255U > 1U || offset > 16777215U) 
                                                              #line 4170 
                                                              return -1;
  #line 4173 
  flash_linear_addr = (offset & 16777215U) + hw->nvm.flash_base_addr;
  #line 4176 
  while (1) {
    #line 4233 
    u8 tmp_1;
    #line 4177 
    __const_udelay(4295UL);
    #line 4179 
    ret_val = e1000_flash_cycle_init_ich8lan(hw);
    #line 4180 
    if (ret_val != 0) 
                      #line 4181 
                      break;
    #line 4185 
    if (hw->mac.type > (unsigned int)e1000_pch_lpt) {
      #line 4186 
      hsflctl.regval = (unsigned short)(__er32flash(hw,4UL) >> 16);
    }
    else 
         #line 4188 
         hsflctl.regval = __er16flash(hw,6UL);
    #line 4191 
    hsflctl.hsf_ctrl.fldbcount = (unsigned short)((unsigned int)size + 255U);
    #line 4192 
    hsflctl.hsf_ctrl.flcycle = (unsigned short)2U;
    #line 4197 
    if (hw->mac.type > (unsigned int)e1000_pch_lpt) 
                                                    #line 4198 
                                                    __ew32flash(hw,4UL,(unsigned int)((int)hsflctl.regval << 16)); else 
                                                                    #line 4200 
                                                                    __ew16flash(hw,6UL,(unsigned short)((int)hsflctl.regval));
    #line 4202 
    __ew32flash(hw,8UL,flash_linear_addr);
    #line 4204 
    if ((unsigned int)size == 1U) 
                                  #line 4205 
                                  flash_data = (unsigned int)data & 255U; else 
                                                                    #line 4207 
                                                                    flash_data = (unsigned int)data;
    #line 4209 
    __ew32flash(hw,16UL,flash_data);
    #line 4214 
    ret_val = e1000_flash_cycle_ich8lan(hw,10000000U);
    #line 4217 
    if (ret_val == 0) 
                      #line 4218 
                      break;
    #line 4225 
    hsfsts.regval = __er16flash(hw,4UL);
    #line 4226 
    if ((unsigned int)hsfsts.hsf_status.flcerr != 0U) 
                                                      #line 4228 
                                                      goto __Cont;
    #line 4229 
    if ((unsigned int)hsfsts.hsf_status.flcdone == 0U) {
      {
        #line 4230 
        bool branch;
        #line 4230 
        struct _ddebug __UNIQUE_ID_ddebug484 = {.modname = (char *)"e1000e", .function = (char *)"e1000_write_flash_data_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Timeout error - flash cycle did not complete.\n", .lineno = (unsigned int)4230U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 4230 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug484.key.dd_key_false.key,(_Bool)0);
        #line 4230 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 4230 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug484,(hw->adapter)->netdev,(char *)"Timeout error - flash cycle did not complete.\n");
      }
      #line 4231 
      break;
    }
    #line 4176 
    __Cont: { /* sequence */
              #line 4233 
              tmp_1 = count;
              #line 4233 
              count = (u8)((int)count + 1);
              #line 4233 
              ;
            }
    #line 4233 
    if (! ((unsigned int)tmp_1 <= 9U)) 
                                       #line 4176 
                                       break;
  }
  #line 4235 
  return ret_val;
}

#line 4246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_write_flash_data32_ich8lan(struct e1000_hw *hw, u32 offset, u32 data)
{
  #line 4249 
  union ich8_hws_flash_status hsfsts;
  #line 4250 
  union ich8_hws_flash_ctrl hsflctl;
  #line 4251 
  u32 flash_linear_addr;
  #line 4252 
  s32 ret_val;
  #line 4253 
  u8 count = (unsigned char)0U;
  #line 4255 
  if (hw->mac.type > (unsigned int)e1000_pch_lpt) 
    #line 4256 
    if (offset > 16777215U) 
                            #line 4257 
                            return -1;
  #line 4259 
  flash_linear_addr = (offset & 16777215U) + hw->nvm.flash_base_addr;
  #line 4261 
  while (1) {
    #line 4317 
    u8 tmp_1;
    #line 4262 
    __const_udelay(4295UL);
    #line 4264 
    ret_val = e1000_flash_cycle_init_ich8lan(hw);
    #line 4265 
    if (ret_val != 0) 
                      #line 4266 
                      break;
    #line 4271 
    if (hw->mac.type > (unsigned int)e1000_pch_lpt) {
      #line 4272 
      hsflctl.regval = (unsigned short)(__er32flash(hw,4UL) >> 16);
    }
    else 
         #line 4275 
         hsflctl.regval = __er16flash(hw,6UL);
    #line 4277 
    hsflctl.hsf_ctrl.fldbcount = (unsigned short)3U;
    #line 4278 
    hsflctl.hsf_ctrl.flcycle = (unsigned short)2U;
    #line 4284 
    if (hw->mac.type > (unsigned int)e1000_pch_lpt) 
                                                    #line 4285 
                                                    __ew32flash(hw,4UL,(unsigned int)((int)hsflctl.regval << 16)); else 
                                                                    #line 4287 
                                                                    __ew16flash(hw,6UL,(unsigned short)((int)hsflctl.regval));
    #line 4289 
    __ew32flash(hw,8UL,flash_linear_addr);
    #line 4291 
    __ew32flash(hw,16UL,data);
    #line 4296 
    ret_val = e1000_flash_cycle_ich8lan(hw,10000000U);
    #line 4300 
    if (ret_val == 0) 
                      #line 4301 
                      break;
    #line 4308 
    hsfsts.regval = __er16flash(hw,4UL);
    #line 4310 
    if ((unsigned int)hsfsts.hsf_status.flcerr != 0U) 
                                                      #line 4312 
                                                      goto __Cont;
    #line 4313 
    if ((unsigned int)hsfsts.hsf_status.flcdone == 0U) {
      {
        #line 4314 
        bool branch;
        #line 4314 
        struct _ddebug __UNIQUE_ID_ddebug485 = {.modname = (char *)"e1000e", .function = (char *)"e1000_write_flash_data32_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Timeout error - flash cycle did not complete.\n", .lineno = (unsigned int)4314U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 4314 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug485.key.dd_key_false.key,(_Bool)0);
        #line 4314 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 4314 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug485,(hw->adapter)->netdev,(char *)"Timeout error - flash cycle did not complete.\n");
      }
      #line 4315 
      break;
    }
    #line 4261 
    __Cont: { /* sequence */
              #line 4317 
              tmp_1 = count;
              #line 4317 
              count = (u8)((int)count + 1);
              #line 4317 
              ;
            }
    #line 4317 
    if (! ((unsigned int)tmp_1 <= 9U)) 
                                       #line 4261 
                                       break;
  }
  #line 4319 
  return ret_val;
}

#line 4330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_write_flash_byte_ich8lan(struct e1000_hw *hw, u32 offset, u8 data)
{
  #line 4333 
  u16 word = (unsigned short)data;
  #line 4335 
  return e1000_write_flash_data_ich8lan(hw,offset,(unsigned char)1,
                                     (unsigned short)((int)word));
}

#line 4347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_retry_write_flash_dword_ich8lan(struct e1000_hw *hw, u32 offset, u32 dword)
{
  #line 4350 
  s32 ret_val;
  #line 4351 
  u16 program_retries;
  #line 4354 
  offset <<= 1;
  #line 4355 
  ret_val = e1000_write_flash_data32_ich8lan(hw,offset,dword);
  #line 4357 
  if (ret_val == 0) 
                    #line 4358 
                    return ret_val;
  #line 4359 
  program_retries = (unsigned short)0U;
  #line 4359 
  while ((unsigned int)program_retries <= 99U) {
    {
      #line 4360 
      bool branch;
      #line 4360 
      struct _ddebug __UNIQUE_ID_ddebug486 = {.modname = (char *)"e1000e", .function = (char *)"e1000_retry_write_flash_dword_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Retrying Byte %8.8X at offset %u\n", .lineno = (unsigned int)4360U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 4360 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug486.key.dd_key_false.key,(_Bool)0);
      #line 4360 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 4360 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug486,(hw->adapter)->netdev,(char *)"Retrying Byte %8.8X at offset %u\n",dword,offset);
    }
    #line 4361 
    usleep_range(100UL,200UL);
    #line 4362 
    ret_val = e1000_write_flash_data32_ich8lan(hw,offset,dword);
    #line 4363 
    if (ret_val == 0) 
                      #line 4364 
                      break;
    #line 4359 
    program_retries = (u16)((int)program_retries + 1);
  }
  #line 4366 
  if ((unsigned int)program_retries == 100U) 
                                             #line 4367 
                                             return -1;
  #line 4369 
  return 0;
}

#line 4381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_retry_write_flash_byte_ich8lan(struct e1000_hw *hw, u32 offset, u8 byte)
{
  #line 4384 
  s32 ret_val;
  #line 4385 
  u16 program_retries;
  #line 4387 
  ret_val = e1000_write_flash_byte_ich8lan(hw,offset,(unsigned char)((int)byte));
  #line 4388 
  if (ret_val == 0) 
                    #line 4389 
                    return ret_val;
  #line 4391 
  program_retries = (unsigned short)0U;
  #line 4391 
  while ((unsigned int)program_retries <= 99U) {
    {
      #line 4392 
      bool branch;
      #line 4392 
      struct _ddebug __UNIQUE_ID_ddebug487 = {.modname = (char *)"e1000e", .function = (char *)"e1000_retry_write_flash_byte_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Retrying Byte %2.2X at offset %u\n", .lineno = (unsigned int)4392U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 4392 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug487.key.dd_key_false.key,(_Bool)0);
      #line 4392 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 4392 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug487,(hw->adapter)->netdev,(char *)"Retrying Byte %2.2X at offset %u\n",(int)byte,offset);
    }
    #line 4393 
    usleep_range(100UL,200UL);
    #line 4394 
    ret_val = e1000_write_flash_byte_ich8lan(hw,offset,(unsigned char)((int)byte));
    #line 4395 
    if (ret_val == 0) 
                      #line 4396 
                      break;
    #line 4391 
    program_retries = (u16)((int)program_retries + 1);
  }
  #line 4398 
  if ((unsigned int)program_retries == 100U) 
                                             #line 4399 
                                             return -1;
  #line 4401 
  return 0;
}

#line 4412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_erase_flash_bank_ich8lan(struct e1000_hw *hw, u32 bank)
{
  #line 4415 
  union ich8_hws_flash_status hsfsts;
  #line 4416 
  union ich8_hws_flash_ctrl hsflctl;
  #line 4417 
  u32 flash_linear_addr;
  #line 4420 
  s32 ret_val;
  #line 4422 
  s32 j;
  #line 4422 
  s32 iteration;
  #line 4422 
  s32 sector_size;
  #line 4462 
  u32 tmp;
  #line 4414 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 4419 
  u32 flash_bank_size = nvm->flash_bank_size * 2U;
  #line 4421 
  s32 count = 0;
  #line 4424 
  hsfsts.regval = __er16flash(hw,4UL);
  #line 4438 
  switch ((int)hsfsts.hsf_status.berasesz) {
    #line 4439 
    case 0: 
            #line 4439 
    ;
    #line 4441 
    sector_size = 256;
    #line 4442 
    iteration = (int)(flash_bank_size / 256U);
    #line 4443 
    break;
    #line 4444 
    case 1: 
            #line 4444 
    ;
    #line 4445 
    sector_size = 4096;
    #line 4446 
    iteration = 1;
    #line 4447 
    break;
    #line 4448 
    case 2: 
            #line 4448 
    ;
    #line 4449 
    sector_size = 8192;
    #line 4450 
    iteration = 1;
    #line 4451 
    break;
    #line 4452 
    case 3: 
            #line 4452 
    ;
    #line 4453 
    sector_size = 65536;
    #line 4454 
    iteration = 1;
    #line 4455 
    break;
    #line 4456 
    default: 
             #line 4456 
    ;
    #line 4457 
    return -1;
  }
  #line 4461 
  flash_linear_addr = hw->nvm.flash_base_addr;
  #line 4462 
  if (bank != 0U) 
                  #line 4462 
                  tmp = flash_bank_size; else 
                                              #line 4462 
                                              tmp = 0U;
  #line 4462 
  flash_linear_addr = tmp + flash_linear_addr;
  #line 4464 
  j = 0;
  #line 4464 
  while (j < iteration) {
    #line 4465 
    while (1) {
      {
        #line 4466 
        u32 timeout = 10000000U;
        #line 4469 
        ret_val = e1000_flash_cycle_init_ich8lan(hw);
        #line 4470 
        if (ret_val != 0) 
                          #line 4471 
                          return ret_val;
        #line 4476 
        if (hw->mac.type > (unsigned int)e1000_pch_lpt) {
          #line 4477 
          hsflctl.regval = (unsigned short)(__er32flash(hw,4UL) >> 16);
        }
        else 
             #line 4480 
             hsflctl.regval = __er16flash(hw,6UL);
        #line 4482 
        hsflctl.hsf_ctrl.flcycle = (unsigned short)3U;
        #line 4483 
        if (hw->mac.type > (unsigned int)e1000_pch_lpt) 
                                                        #line 4484 
                                                        __ew32flash(hw,4UL,(unsigned int)((int)hsflctl.regval << 16)); else 
                                                                    #line 4487 
                                                                    __ew16flash(hw,6UL,(unsigned short)((int)hsflctl.regval));
        #line 4493 
        flash_linear_addr = (unsigned int)(j * sector_size) + flash_linear_addr;
        #line 4494 
        __ew32flash(hw,8UL,flash_linear_addr);
        #line 4496 
        ret_val = e1000_flash_cycle_ich8lan(hw,timeout);
        #line 4497 
        if (ret_val == 0) 
                          #line 4498 
                          break;
        #line 4504 
        hsfsts.regval = __er16flash(hw,4UL);
        #line 4505 
        if ((unsigned int)hsfsts.hsf_status.flcerr != 0U) 
                                                          #line 4507 
                                                          goto __Cont;
        else 
          #line 4508 
          if ((unsigned int)hsfsts.hsf_status.flcdone == 0U) 
                                                             #line 4509 
                                                             return ret_val;
      }
      #line 4465 
      __Cont: 
              #line 4510 
      count ++;
      #line 4510 
      if (! (count <= 9)) 
                          #line 4465 
                          break;
    }
    #line 4464 
    j ++;
  }
  #line 4513 
  return 0;
}

#line 4525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_valid_led_default_ich8lan(struct e1000_hw *hw, u16 *data)
{
  #line 4527 
  s32 ret_val;
  #line 4529 
  ret_val = e1000_read_nvm(hw,(unsigned short)4,(unsigned short)1,data);
  #line 4530 
  if (ret_val != 0) {
    {
      #line 4531 
      bool branch;
      #line 4531 
      struct _ddebug __UNIQUE_ID_ddebug488 = {.modname = (char *)"e1000e", .function = (char *)"e1000_valid_led_default_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)4531U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 4531 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug488.key.dd_key_false.key,(_Bool)0);
      #line 4531 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 4531 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug488,(hw->adapter)->netdev,(char *)"NVM Read Error\n");
    }
    #line 4532 
    return ret_val;
  }
  #line 4535 
  if ((unsigned int)*data + 65535U > 65533U) 
                                             #line 4536 
                                             *data = (unsigned short)6529U;
  #line 4538 
  return 0;
}

#line 4554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_id_led_init_pchlan(struct e1000_hw *hw)
{
  #line 4557 
  s32 ret_val;
  #line 4560 
  u16 data;
  #line 4560 
  u16 i;
  #line 4560 
  u16 temp;
  #line 4560 
  u16 shift;
  #line 4556 
  struct e1000_mac_info *mac = & hw->mac;
  #line 4558 
  u32 ledctl_on = 2U;
  #line 4559 
  u32 ledctl_off = 10U;
  #line 4563 
  ret_val = (*(hw->nvm.ops.valid_led_default))(hw,& data);
  #line 4564 
  if (ret_val != 0) 
                    #line 4565 
                    return ret_val;
  #line 4567 
  mac->ledctl_default = __er32(hw,3584UL);
  #line 4568 
  mac->ledctl_mode1 = mac->ledctl_default;
  #line 4569 
  mac->ledctl_mode2 = mac->ledctl_default;
  #line 4571 
  i = (unsigned short)0U;
  #line 4571 
  while ((unsigned int)i <= 3U) {
    #line 4572 
    temp = (unsigned short)((unsigned int)((unsigned short)((int)data >> ((int)i << 2))) & 15U);
    #line 4573 
    shift = (unsigned short)((unsigned int)i * 5U);
    #line 4574 
    switch ((int)temp) {
      #line 4575 
      case 4: 
              #line 4575 
      ;
      #line 4576 
      case 5: 
              #line 4576 
      ;
      #line 4577 
      case 6: 
              #line 4577 
      ;
      #line 4578 
      mac->ledctl_mode1 &= (unsigned int)(~ (31 << (int)shift));
      #line 4579 
      mac->ledctl_mode1 |= 2U << (int)shift;
      #line 4580 
      break;
      #line 4581 
      case 7: 
              #line 4581 
      ;
      #line 4582 
      case 8: 
              #line 4582 
      ;
      #line 4583 
      case 9: 
              #line 4583 
      ;
      #line 4584 
      mac->ledctl_mode1 &= (unsigned int)(~ (31 << (int)shift));
      #line 4585 
      mac->ledctl_mode1 |= 10U << (int)shift;
      #line 4586 
      break;
      #line 4587 
      default: 
               #line 4587 
      ;
      #line 4589 
      break;
    }
    #line 4591 
    switch ((int)temp) {
      #line 4592 
      case 2: 
              #line 4592 
      ;
      #line 4593 
      case 5: 
              #line 4593 
      ;
      #line 4594 
      case 8: 
              #line 4594 
      ;
      #line 4595 
      mac->ledctl_mode2 &= (unsigned int)(~ (31 << (int)shift));
      #line 4596 
      mac->ledctl_mode2 |= 2U << (int)shift;
      #line 4597 
      break;
      #line 4598 
      case 3: 
              #line 4598 
      ;
      #line 4599 
      case 6: 
              #line 4599 
      ;
      #line 4600 
      case 9: 
              #line 4600 
      ;
      #line 4601 
      mac->ledctl_mode2 &= (unsigned int)(~ (31 << (int)shift));
      #line 4602 
      mac->ledctl_mode2 |= 10U << (int)shift;
      #line 4603 
      break;
      #line 4604 
      default: 
               #line 4604 
      ;
      #line 4606 
      break;
    }
    #line 4571 
    i = (u16)((int)i + 1);
  }
  #line 4610 
  return 0;
}

#line 4620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_get_bus_info_ich8lan(struct e1000_hw *hw)
{
  #line 4623 
  s32 ret_val;
  #line 4622 
  struct e1000_bus_info *bus = & hw->bus;
  #line 4625 
  ret_val = e1000e_get_bus_info_pcie(hw);
  #line 4632 
  if (bus->width == (unsigned int)e1000_bus_width_unknown) 
                                                           #line 4633 
                                                           bus->width = e1000_bus_width_pcie_x1;
  #line 4635 
  return ret_val;
}

#line 4645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_reset_hw_ich8lan(struct e1000_hw *hw)
{
  #line 4648 
  u16 kum_cfg;
  #line 4649 
  u32 ctrl;
  #line 4649 
  u32 reg;
  #line 4650 
  s32 ret_val;
  #line 4647 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  #line 4655 
  ret_val = e1000e_disable_pcie_master(hw);
  #line 4656 
  if (ret_val != 0) {
    #line 4657 
    bool branch;
    #line 4657 
    struct _ddebug __UNIQUE_ID_ddebug489 = {.modname = (char *)"e1000e", .function = (char *)"e1000_reset_hw_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"PCI-E Master disable polling has failed.\n", .lineno = (unsigned int)4657U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4657 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug489.key.dd_key_false.key,(_Bool)0);
    #line 4657 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 4657 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug489,(hw->adapter)->netdev,(char *)"PCI-E Master disable polling has failed.\n");
  }
  {
    #line 4659 
    bool branch_0;
    #line 4659 
    struct _ddebug __UNIQUE_ID_ddebug490 = {.modname = (char *)"e1000e", .function = (char *)"e1000_reset_hw_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Masking off all interrupts\n", .lineno = (unsigned int)4659U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4659 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug490.key.dd_key_false.key,(_Bool)0);
    #line 4659 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 4659 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug490,(hw->adapter)->netdev,(char *)"Masking off all interrupts\n");
  }
  #line 4660 
  __ew32(hw,216UL,4294967295U);
  #line 4666 
  __ew32(hw,256UL,0U);
  #line 4667 
  __ew32(hw,1024UL,8U);
  #line 4668 
  __er32(hw,8UL);
  #line 4670 
  usleep_range(10000UL,11000UL);
  #line 4673 
  if (hw->mac.type == (unsigned int)e1000_ich8lan) {
    #line 4675 
    __ew32(hw,4096UL,8U);
    #line 4677 
    __ew32(hw,4104UL,16U);
  }
  #line 4680 
  if (hw->mac.type == (unsigned int)e1000_pchlan) {
    #line 4682 
    ret_val = e1000_read_nvm(hw,(unsigned short)27,(unsigned short)1,& kum_cfg);
    #line 4683 
    if (ret_val != 0) 
                      #line 4684 
                      return ret_val;
    #line 4686 
    if (((int)kum_cfg & 1) != 0) 
                                 #line 4687 
                                 dev_spec->nvm_k1_enabled = (_Bool)1; else 
                                                                    #line 4689 
                                                                    dev_spec->nvm_k1_enabled = (_Bool)0;
  }
  #line 4692 
  ctrl = __er32(hw,0UL);
  #line 4694 
  if ((*(hw->phy.ops.check_reset_block))(hw) == 0) {
    #line 4699 
    ctrl |= 2147483648U;
    #line 4704 
    if (hw->mac.type == (unsigned int)e1000_pch2lan) {
      #line 4704 
      if ((__er32(hw,23380UL) & 32768U) == 0U) 
                                               #line 4706 
                                               e1000_gate_hw_phy_config_ich8lan(hw,(_Bool)1);
    }
  }
  #line 4708 
  ret_val = e1000_acquire_swflag_ich8lan(hw);
  {
    #line 4709 
    bool branch_1;
    #line 4709 
    struct _ddebug __UNIQUE_ID_ddebug491 = {.modname = (char *)"e1000e", .function = (char *)"e1000_reset_hw_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Issuing a global reset to ich8lan\n", .lineno = (unsigned int)4709U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4709 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug491.key.dd_key_false.key,(_Bool)0);
    #line 4709 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 4709 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug491,(hw->adapter)->netdev,(char *)"Issuing a global reset to ich8lan\n");
  }
  #line 4710 
  __ew32(hw,0UL,ctrl | 67108864U);
  #line 4712 
  msleep(20U);
  #line 4715 
  if (hw->mac.type == (unsigned int)e1000_pch2lan) {
    #line 4716 
    reg = __er32(hw,60UL);
    #line 4717 
    reg &= 4093640703U;
    #line 4718 
    reg |= 134217728U;
    #line 4719 
    __ew32(hw,60UL,reg);
  }
  #line 4722 
  if (ret_val == 0) 
                    #line 4723 
                    cif_clear_bit(2L,& (hw->adapter)->state);
  #line 4725 
  if ((ctrl & 2147483648U) != 0U) {
    #line 4726 
    ret_val = (*(hw->phy.ops.get_cfg_done))(hw);
    #line 4727 
    if (ret_val != 0) 
                      #line 4728 
                      return ret_val;
    #line 4730 
    ret_val = e1000_post_phy_reset_ich8lan(hw);
    #line 4731 
    if (ret_val != 0) 
                      #line 4732 
                      return ret_val;
  }
  #line 4739 
  if (hw->mac.type == (unsigned int)e1000_pchlan) 
                                                  #line 4740 
                                                  __ew32(hw,24400UL,1701143909U);
  #line 4742 
  __ew32(hw,216UL,4294967295U);
  #line 4743 
  __er32(hw,192UL);
  #line 4745 
  reg = __er32(hw,12292UL);
  #line 4746 
  reg |= 327680U;
  #line 4747 
  __ew32(hw,12292UL,reg);
  #line 4749 
  return 0;
}

#line 4764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_init_hw_ich8lan(struct e1000_hw *hw)
{
  #line 4767 
  u32 ctrl_ext;
  #line 4767 
  u32 txdctl;
  #line 4767 
  u32 snoop;
  #line 4768 
  s32 ret_val;
  #line 4769 
  u16 i;
  #line 4766 
  struct e1000_mac_info *mac = & hw->mac;
  #line 4771 
  e1000_initialize_hw_bits_ich8lan(hw);
  #line 4774 
  ret_val = (*(mac->ops.id_led_init))(hw);
  #line 4776 
  if (ret_val != 0) {
    #line 4777 
    bool branch;
    #line 4777 
    struct _ddebug __UNIQUE_ID_ddebug492 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_hw_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Error initializing identification LED\n", .lineno = (unsigned int)4777U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4777 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug492.key.dd_key_false.key,(_Bool)0);
    #line 4777 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 4777 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug492,(hw->adapter)->netdev,(char *)"Error initializing identification LED\n");
  }
  #line 4780 
  e1000e_init_rx_addrs(hw,(unsigned short)((int)mac->rar_entry_count));
  {
    #line 4783 
    bool branch_0;
    #line 4783 
    struct _ddebug __UNIQUE_ID_ddebug493 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_hw_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Zeroing the MTA\n", .lineno = (unsigned int)4783U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4783 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug493.key.dd_key_false.key,(_Bool)0);
    #line 4783 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 4783 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug493,(hw->adapter)->netdev,(char *)"Zeroing the MTA\n");
  }
  #line 4784 
  i = (unsigned short)0U;
  #line 4784 
  while ((int)mac->mta_reg_count > (int)i) {
    #line 4785 
    __ew32(hw,(unsigned long)(((int)i << 2) + 20992),0U);
    #line 4784 
    i = (u16)((int)i + 1);
  }
  #line 4791 
  if (hw->phy.type == (unsigned int)e1000_phy_82578) {
    #line 4792 
    e1e_rphy(hw,24625U,& i);
    #line 4793 
    i = (unsigned short)((unsigned int)i & 65519U);
    #line 4794 
    e1e_wphy(hw,24625U,(unsigned short)((int)i));
    #line 4795 
    ret_val = e1000_phy_hw_reset_ich8lan(hw);
    #line 4796 
    if (ret_val != 0) 
                      #line 4797 
                      return ret_val;
  }
  #line 4801 
  ret_val = (*(mac->ops.setup_link))(hw);
  #line 4804 
  txdctl = __er32(hw,14376UL);
  #line 4805 
  txdctl = (txdctl & 4274061311U) | 16842752U;
  #line 4807 
  txdctl = (txdctl & 4278190016U) | 16777247U;
  #line 4809 
  __ew32(hw,14376UL,txdctl);
  #line 4810 
  txdctl = __er32(hw,14632UL);
  #line 4811 
  txdctl = (txdctl & 4274061311U) | 16842752U;
  #line 4813 
  txdctl = (txdctl & 4278190016U) | 16777247U;
  #line 4815 
  __ew32(hw,14632UL,txdctl);
  #line 4820 
  if (mac->type == (unsigned int)e1000_ich8lan) 
                                                #line 4821 
                                                snoop = 63U; else 
                                                                  #line 4823 
                                                                  snoop = 4294967232U;
  #line 4824 
  e1000e_set_pcie_no_snoop(hw,snoop);
  #line 4826 
  ctrl_ext = __er32(hw,24UL);
  #line 4827 
  ctrl_ext |= 131072U;
  #line 4828 
  __ew32(hw,24UL,ctrl_ext);
  #line 4835 
  e1000_clear_hw_cntrs_ich8lan(hw);
  #line 4837 
  return ret_val;
}

#line 4847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_initialize_hw_bits_ich8lan(struct e1000_hw *hw)
{
  #line 4849 
  u32 reg;
  #line 4852 
  reg = __er32(hw,24UL);
  #line 4853 
  reg |= 4194304U;
  #line 4855 
  if (hw->mac.type > (unsigned int)e1000_ich10lan) 
                                                   #line 4856 
                                                   reg |= 1048576U;
  #line 4857 
  __ew32(hw,24UL,reg);
  #line 4860 
  reg = __er32(hw,14376UL);
  #line 4861 
  reg |= 4194304U;
  #line 4862 
  __ew32(hw,14376UL,reg);
  #line 4865 
  reg = __er32(hw,14632UL);
  #line 4866 
  reg |= 4194304U;
  #line 4867 
  __ew32(hw,14632UL,reg);
  #line 4870 
  reg = __er32(hw,14400UL);
  #line 4871 
  if (hw->mac.type == (unsigned int)e1000_ich8lan) 
                                                   #line 4872 
                                                   reg |= 805306368U;
  #line 4873 
  reg |= 226492416U;
  #line 4874 
  __ew32(hw,14400UL,reg);
  #line 4877 
  reg = __er32(hw,14656UL);
  #line 4878 
  if ((__er32(hw,1024UL) & 268435456U) != 0U) 
                                              #line 4879 
                                              reg &= 4026531839U; else 
                                                                    #line 4881 
                                                                    reg |= 268435456U;
  #line 4882 
  reg |= 1157627904U;
  #line 4883 
  __ew32(hw,14656UL,reg);
  #line 4886 
  if (hw->mac.type == (unsigned int)e1000_ich8lan) {
    #line 4887 
    reg = __er32(hw,8UL);
    #line 4888 
    reg &= 2147483647U;
    #line 4889 
    __ew32(hw,8UL,reg);
  }
  #line 4895 
  reg = __er32(hw,20488UL);
  #line 4896 
  reg |= 192U;
  #line 4901 
  if (hw->mac.type == (unsigned int)e1000_ich8lan) 
                                                   #line 4902 
                                                   reg |= 196608U;
  #line 4903 
  __ew32(hw,20488UL,reg);
  #line 4906 
  if (hw->mac.type > (unsigned int)e1000_pch2lan) {
    #line 4907 
    reg = __er32(hw,4108UL);
    #line 4908 
    reg |= 65536U;
    #line 4909 
    __ew32(hw,4108UL,reg);
    #line 4911 
    reg = __er32(hw,0UL);
    #line 4912 
    reg |= 524288U;
    #line 4913 
    __ew32(hw,0UL,reg);
  }
  #line 4915 
  return;
}

#line 4927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_setup_link_ich8lan(struct e1000_hw *hw)
{
  #line 4929 
  s32 ret_val;
  #line 4931 
  if ((*(hw->phy.ops.check_reset_block))(hw) != 0) 
                                                   #line 4932 
                                                   return 0;
  #line 4938 
  if (hw->fc.requested_mode == (unsigned int)e1000_fc_default) 
    #line 4940 
    if (hw->mac.type == (unsigned int)e1000_pchlan) 
                                                    #line 4941 
                                                    hw->fc.requested_mode = e1000_fc_rx_pause; else 
                                                                    #line 4943 
                                                                    hw->fc.requested_mode = e1000_fc_full;
  #line 4949 
  hw->fc.current_mode = hw->fc.requested_mode;
  {
    #line 4951 
    bool branch;
    #line 4951 
    struct _ddebug __UNIQUE_ID_ddebug494 = {.modname = (char *)"e1000e", .function = (char *)"e1000_setup_link_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"After fix-ups FlowControl is now = %x\n", .lineno = (unsigned int)4951U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4951 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug494.key.dd_key_false.key,(_Bool)0);
    #line 4951 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 4951 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug494,(hw->adapter)->netdev,(char *)"After fix-ups FlowControl is now = %x\n",(unsigned int)hw->fc.current_mode);
  }
  #line 4954 
  ret_val = (*(hw->mac.ops.setup_physical_interface))(hw);
  #line 4955 
  if (ret_val != 0) 
                    #line 4956 
                    return ret_val;
  #line 4958 
  __ew32(hw,368UL,(unsigned int)hw->fc.pause_time);
  #line 4959 
  if (((hw->phy.type == (unsigned int)e1000_phy_82578 || hw->phy.type == (unsigned int)e1000_phy_82579) || hw->phy.type == (unsigned int)e1000_phy_i217) || hw->phy.type == (unsigned int)e1000_phy_82577) {
    #line 4963 
    __ew32(hw,24384UL,(unsigned int)hw->fc.refresh_time);
    #line 4965 
    ret_val = e1e_wphy(hw,24635U,(unsigned short)((int)hw->fc.pause_time));
    #line 4967 
    if (ret_val != 0) 
                      #line 4968 
                      return ret_val;
  }
  #line 4971 
  return e1000e_set_fc_watermarks(hw);
}

#line 4982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_setup_copper_link_ich8lan(struct e1000_hw *hw)
{
  #line 4984 
  u32 ctrl;
  #line 4985 
  s32 ret_val;
  #line 4986 
  u16 reg_data;
  #line 4988 
  ctrl = __er32(hw,0UL);
  #line 4989 
  ctrl |= 64U;
  #line 4990 
  ctrl &= 4294961151U;
  #line 4991 
  __ew32(hw,0UL,ctrl);
  #line 4997 
  ret_val = e1000e_write_kmrn_reg(hw,4U,(unsigned short)65535);
  #line 4998 
  if (ret_val != 0) 
                    #line 4999 
                    return ret_val;
  #line 5000 
  ret_val = e1000e_read_kmrn_reg(hw,9U,& reg_data);
  #line 5002 
  if (ret_val != 0) 
                    #line 5003 
                    return ret_val;
  #line 5004 
  reg_data = (unsigned short)((unsigned int)reg_data | 63U);
  #line 5005 
  ret_val = e1000e_write_kmrn_reg(hw,9U,(unsigned short)((int)reg_data));
  #line 5007 
  if (ret_val != 0) 
                    #line 5008 
                    return ret_val;
  #line 5010 
  switch ((unsigned int)hw->phy.type) {
    #line 5011 
    case (unsigned int)6: 
                          #line 5011 
    ;
    #line 5012 
    ret_val = e1000e_copper_link_setup_igp(hw);
    #line 5013 
    if (ret_val != 0) 
                      #line 5014 
                      return ret_val;
    #line 5015 
    break;
    #line 5016 
    case (unsigned int)8: 
                          #line 5016 
    ;
    #line 5017 
    case (unsigned int)9: 
                          #line 5017 
    ;
    #line 5018 
    ret_val = e1000e_copper_link_setup_m88(hw);
    #line 5019 
    if (ret_val != 0) 
                      #line 5020 
                      return ret_val;
    #line 5021 
    break;
    #line 5022 
    case (unsigned int)10: 
                           #line 5022 
    ;
    #line 5023 
    case (unsigned int)11: 
                           #line 5023 
    ;
    #line 5024 
    ret_val = e1000_copper_link_setup_82577(hw);
    #line 5025 
    if (ret_val != 0) 
                      #line 5026 
                      return ret_val;
    #line 5027 
    break;
    #line 5028 
    case (unsigned int)7: 
                          #line 5028 
    ;
    #line 5029 
    ret_val = e1e_rphy(hw,28U,& reg_data);
    #line 5030 
    if (ret_val != 0) 
                      #line 5031 
                      return ret_val;
    #line 5033 
    reg_data = (unsigned short)((unsigned int)reg_data & 65407U);
    #line 5035 
    switch ((int)hw->phy.mdix) {
      #line 5036 
      case 1: 
              #line 5036 
      ;
      #line 5037 
      reg_data = (unsigned short)((unsigned int)reg_data & 65471U);
      #line 5038 
      break;
      #line 5039 
      case 2: 
              #line 5039 
      ;
      #line 5040 
      reg_data = (unsigned short)((unsigned int)reg_data | 64U);
      #line 5041 
      break;
      #line 5042 
      case 0: 
              #line 5042 
      ;
      #line 5043 
      default: 
               #line 5043 
      ;
      #line 5044 
      reg_data = (unsigned short)((unsigned int)reg_data | 128U);
      #line 5045 
      break;
    }
    #line 5047 
    ret_val = e1e_wphy(hw,28U,(unsigned short)((int)reg_data));
    #line 5048 
    if (ret_val != 0) 
                      #line 5049 
                      return ret_val;
    #line 5050 
    break;
    #line 5051 
    default: 
             #line 5051 
    ;
    #line 5052 
    break;
  }
  #line 5055 
  return e1000e_setup_copper_link(hw);
}

#line 5066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_setup_copper_link_pch_lpt(struct e1000_hw *hw)
{
  #line 5068 
  u32 ctrl;
  #line 5069 
  s32 ret_val;
  #line 5071 
  ctrl = __er32(hw,0UL);
  #line 5072 
  ctrl |= 64U;
  #line 5073 
  ctrl &= 4294961151U;
  #line 5074 
  __ew32(hw,0UL,ctrl);
  #line 5076 
  ret_val = e1000_copper_link_setup_82577(hw);
  #line 5077 
  if (ret_val != 0) 
                    #line 5078 
                    return ret_val;
  #line 5080 
  return e1000e_setup_copper_link(hw);
}

#line 5093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_get_link_up_info_ich8lan(struct e1000_hw *hw, u16 *speed, u16 *duplex)
{
  #line 5096 
  s32 ret_val;
  #line 5098 
  ret_val = e1000e_get_speed_and_duplex_copper(hw,speed,duplex);
  #line 5099 
  if (ret_val != 0) 
                    #line 5100 
                    return ret_val;
  #line 5102 
  if ((hw->mac.type == (unsigned int)e1000_ich8lan && hw->phy.type == (unsigned int)e1000_phy_igp_3) && (unsigned int)*speed == 1000U) 
    #line 5104 
    ret_val = e1000_kmrn_lock_loss_workaround_ich8lan(hw);
  #line 5107 
  return ret_val;
}

#line 5125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_kmrn_lock_loss_workaround_ich8lan(struct e1000_hw *hw)
{
  #line 5128 
  u32 phy_ctrl;
  #line 5129 
  s32 ret_val;
  #line 5130 
  u16 i;
  #line 5130 
  u16 data;
  #line 5131 
  bool link;
  #line 5127 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  #line 5133 
  if (! dev_spec->kmrn_lock_loss_workaround_enabled) 
                                                     #line 5134 
                                                     return 0;
  #line 5140 
  ret_val = e1000e_phy_has_link_generic(hw,1U,0U,& link);
  #line 5141 
  if (! link) 
              #line 5142 
              return 0;
  #line 5144 
  i = (unsigned short)0U;
  #line 5144 
  while ((unsigned int)i <= 9U) {
    #line 5146 
    ret_val = e1e_rphy(hw,24659U,& data);
    #line 5147 
    if (ret_val != 0) 
                      #line 5148 
                      return ret_val;
    #line 5150 
    ret_val = e1e_rphy(hw,24659U,& data);
    #line 5151 
    if (ret_val != 0) 
                      #line 5152 
                      return ret_val;
    #line 5155 
    if (((int)data & 2) == 0) 
                              #line 5156 
                              return 0;
    #line 5159 
    e1000_phy_hw_reset(hw);
    #line 5160 
    __const_udelay(21475000UL);
    #line 5144 
    i = (u16)((int)i + 1);
  }
  #line 5163 
  phy_ctrl = __er32(hw,3856UL);
  #line 5164 
  phy_ctrl |= 72U;
  #line 5166 
  __ew32(hw,3856UL,phy_ctrl);
  #line 5171 
  e1000e_gig_downshift_workaround_ich8lan(hw);
  #line 5174 
  return -2;
}

#line 5185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000e_set_kmrn_lock_loss_workaround_ich8lan(struct e1000_hw *hw, bool state)
{
  #line 5188 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  #line 5190 
  if (hw->mac.type != (unsigned int)e1000_ich8lan) {
    {
      #line 5191 
      bool branch;
      #line 5191 
      struct _ddebug __UNIQUE_ID_ddebug495 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_set_kmrn_lock_loss_workaround_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Workaround applies to ICH8 only.\n", .lineno = (unsigned int)5191U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 5191 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug495.key.dd_key_false.key,(_Bool)0);
      #line 5191 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 5191 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug495,(hw->adapter)->netdev,(char *)"Workaround applies to ICH8 only.\n");
    }
    #line 5192 
    return;
  }
  #line 5195 
  dev_spec->kmrn_lock_loss_workaround_enabled = state;
  #line 5196 
  return;
}

#line 5208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000e_igp3_phy_powerdown_workaround_ich8lan(struct e1000_hw *hw)
{
  #line 5210 
  u32 reg;
  #line 5211 
  u16 data;
  #line 5212 
  u8 retry = (unsigned char)0U;
  #line 5214 
  if (hw->phy.type != (unsigned int)e1000_phy_igp_3) 
                                                     #line 5215 
                                                     return;
  #line 5218 
  while (1) {
    #line 5220 
    reg = __er32(hw,3856UL);
    #line 5221 
    reg |= 72U;
    #line 5223 
    __ew32(hw,3856UL,reg);
    #line 5228 
    if (hw->mac.type == (unsigned int)e1000_ich8lan) 
                                                     #line 5229 
                                                     e1000e_gig_downshift_workaround_ich8lan(hw);
    #line 5232 
    e1e_rphy(hw,24850U,& data);
    #line 5233 
    data = (unsigned short)((unsigned int)data & 64767U);
    #line 5234 
    e1e_wphy(hw,24850U,(unsigned short)((int)((unsigned int)data | 512U)));
    #line 5237 
    e1e_rphy(hw,24850U,& data);
    #line 5238 
    data = (unsigned short)((unsigned int)data & 768U);
    #line 5239 
    if ((unsigned int)data == 512U || (unsigned int)retry != 0U) 
                                                                 #line 5240 
                                                                 break;
    #line 5243 
    reg = __er32(hw,0UL);
    #line 5244 
    __ew32(hw,0UL,reg | 2147483648U);
    #line 5245 
    retry = (u8)((int)retry + 1);
    #line 5246 
    if (! ((unsigned int)retry != 0U)) 
                                       #line 5218 
                                       break;
  }
  #line 5247 
  return;
}

#line 5259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000e_gig_downshift_workaround_ich8lan(struct e1000_hw *hw)
{
  #line 5261 
  s32 ret_val;
  #line 5262 
  u16 reg_data;
  #line 5264 
  if (hw->mac.type != (unsigned int)e1000_ich8lan || hw->phy.type == (unsigned int)e1000_phy_ife) 
    #line 5265 
    return;
  #line 5267 
  ret_val = e1000e_read_kmrn_reg(hw,3U,& reg_data);
  #line 5269 
  if (ret_val != 0) 
                    #line 5270 
                    return;
  #line 5271 
  reg_data = (unsigned short)((unsigned int)reg_data | 4096U);
  #line 5272 
  ret_val = e1000e_write_kmrn_reg(hw,3U,(unsigned short)((int)reg_data));
  #line 5274 
  if (ret_val != 0) 
                    #line 5275 
                    return;
  #line 5276 
  reg_data = (unsigned short)((unsigned int)reg_data & 61439U);
  #line 5277 
  e1000e_write_kmrn_reg(hw,3U,(unsigned short)((int)reg_data));
  #line 5278 
  return;
}

#line 5294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000_suspend_workarounds_ich8lan(struct e1000_hw *hw)
{
  #line 5297 
  u32 phy_ctrl;
  #line 5298 
  s32 ret_val;
  #line 5296 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  #line 5300 
  phy_ctrl = __er32(hw,3856UL);
  #line 5301 
  phy_ctrl |= 64U;
  #line 5303 
  if (hw->phy.type == (unsigned int)e1000_phy_i217) {
    #line 5304 
    u16 phy_reg;
    #line 5304 
    u16 device_id = ((hw->adapter)->pdev)->device;
    #line 5306 
    if ((((unsigned int)device_id + 60071U <= 1U || (unsigned int)device_id == 5538U) || (unsigned int)device_id == 5539U) || hw->mac.type > (unsigned int)e1000_pch_lpt) {
      #line 5311 
      u32 fextnvm6 = __er32(hw,16UL);
      #line 5313 
      __ew32(hw,16UL,fextnvm6 & 4294967039U);
    }
    #line 5316 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 5317 
    if (ret_val != 0) 
                      #line 5318 
                      goto out;
    #line 5320 
    if (! dev_spec->eee_disable) {
      #line 5321 
      u16 eee_advert;
      #line 5323 
      ret_val = e1000_read_emi_reg_locked(hw,(unsigned short)32769,& eee_advert);
      #line 5327 
      if (ret_val != 0) 
                        #line 5328 
                        goto release;
      #line 5335 
      if ((((int)eee_advert & 2) != 0 && ((int)dev_spec->eee_lp_ability & 2) != 0) && ((int)hw->phy.autoneg_advertised & 8) != 0) {
        #line 5339 
        phy_ctrl &= 4294967289U;
        #line 5343 
        e1e_rphy_locked(hw,24722U,& phy_reg);
        #line 5345 
        phy_reg = (unsigned short)((unsigned int)phy_reg | 2048U);
        #line 5346 
        e1e_wphy_locked(hw,24722U,(unsigned short)((int)phy_reg));
      }
    }
    #line 5358 
    if ((__er32(hw,23380UL) & 32768U) == 0U) {
      #line 5360 
      e1e_rphy_locked(hw,4219910U,& phy_reg);
      #line 5361 
      phy_reg = (unsigned short)((unsigned int)phy_reg | 128U);
      #line 5362 
      e1e_wphy_locked(hw,4219910U,(unsigned short)((int)phy_reg));
      #line 5367 
      e1e_rphy_locked(hw,24636U,& phy_reg);
      #line 5368 
      phy_reg = (unsigned short)((unsigned int)phy_reg | 4096U);
      #line 5369 
      e1e_wphy_locked(hw,24636U,(unsigned short)((int)phy_reg));
      #line 5372 
      e1e_rphy_locked(hw,24730U,& phy_reg);
      #line 5373 
      phy_reg = (unsigned short)((unsigned int)phy_reg & 65519U);
      #line 5374 
      e1e_wphy_locked(hw,24730U,(unsigned short)((int)phy_reg));
    }
    #line 5380 
    e1e_rphy_locked(hw,24733U,& phy_reg);
    #line 5381 
    phy_reg = (unsigned short)((unsigned int)phy_reg | 2U);
    #line 5382 
    e1e_wphy_locked(hw,24733U,(unsigned short)((int)phy_reg));
    #line 5384 
    release: 
             #line 5384 
    ;
    #line 5385 
    (*(hw->phy.ops.release))(hw);
  }
  #line 5387 
  out: 
       #line 5387 
  ;
  #line 5388 
  __ew32(hw,3856UL,phy_ctrl);
  #line 5390 
  if (hw->mac.type == (unsigned int)e1000_ich8lan) 
                                                   #line 5391 
                                                   e1000e_gig_downshift_workaround_ich8lan(hw);
  #line 5393 
  if (hw->mac.type > (unsigned int)e1000_ich10lan) {
    #line 5394 
    e1000_oem_bits_config_ich8lan(hw,(_Bool)0);
    #line 5397 
    if (hw->mac.type == (unsigned int)e1000_pchlan) 
                                                    #line 5398 
                                                    e1000e_phy_hw_reset_generic(hw);
    #line 5400 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 5401 
    if (ret_val != 0) 
                      #line 5402 
                      return;
    #line 5403 
    e1000_write_smbus_addr(hw);
    #line 5404 
    (*(hw->phy.ops.release))(hw);
  }
  #line 5406 
  return;
}

#line 5418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000_resume_workarounds_pchlan(struct e1000_hw *hw)
{
  #line 5420 
  s32 ret_val;
  #line 5422 
  if (hw->mac.type <= (unsigned int)e1000_pchlan) 
                                                  #line 5423 
                                                  return;
  #line 5425 
  ret_val = e1000_init_phy_workarounds_pchlan(hw);
  #line 5426 
  if (ret_val != 0) {
    {
      #line 5427 
      bool branch;
      #line 5427 
      struct _ddebug __UNIQUE_ID_ddebug496 = {.modname = (char *)"e1000e", .function = (char *)"e1000_resume_workarounds_pchlan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Failed to init PHY flow ret_val=%d\n", .lineno = (unsigned int)5427U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 5427 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug496.key.dd_key_false.key,(_Bool)0);
      #line 5427 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 5427 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug496,(hw->adapter)->netdev,(char *)"Failed to init PHY flow ret_val=%d\n",ret_val);
    }
    #line 5428 
    return;
  }
  #line 5436 
  if (hw->phy.type == (unsigned int)e1000_phy_i217) {
    #line 5437 
    u16 phy_reg;
    #line 5439 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 5440 
    if (ret_val != 0) {
      {
        #line 5441 
        bool branch_0;
        #line 5441 
        struct _ddebug __UNIQUE_ID_ddebug497 = {.modname = (char *)"e1000e", .function = (char *)"e1000_resume_workarounds_pchlan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Failed to setup iRST\n", .lineno = (unsigned int)5441U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 5441 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug497.key.dd_key_false.key,(_Bool)0);
        #line 5441 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 5441 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug497,(hw->adapter)->netdev,(char *)"Failed to setup iRST\n");
      }
      #line 5442 
      return;
    }
    #line 5446 
    e1e_rphy_locked(hw,24722U,& phy_reg);
    #line 5447 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 63487U);
    #line 5448 
    e1e_wphy_locked(hw,24722U,(unsigned short)((int)phy_reg));
    #line 5450 
    if ((__er32(hw,23380UL) & 32768U) == 0U) {
      #line 5454 
      ret_val = e1e_rphy_locked(hw,24730U,& phy_reg);
      #line 5455 
      if (ret_val != 0) 
                        #line 5456 
                        goto release;
      #line 5457 
      phy_reg = (unsigned short)((unsigned int)phy_reg | 16U);
      #line 5458 
      e1e_wphy_locked(hw,24730U,(unsigned short)((int)phy_reg));
      #line 5461 
      e1e_wphy_locked(hw,4219910U,(unsigned short)0);
    }
    #line 5464 
    ret_val = e1e_rphy_locked(hw,24733U,& phy_reg);
    #line 5465 
    if (ret_val != 0) 
                      #line 5466 
                      goto release;
    #line 5467 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 65533U);
    #line 5468 
    e1e_wphy_locked(hw,24733U,(unsigned short)((int)phy_reg));
    #line 5469 
    release: 
             #line 5469 
    ;
    #line 5470 
    if (ret_val != 0) {
      #line 5471 
      bool branch_1;
      #line 5471 
      struct _ddebug __UNIQUE_ID_ddebug498 = {.modname = (char *)"e1000e", .function = (char *)"e1000_resume_workarounds_pchlan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Error %d in resume workarounds\n", .lineno = (unsigned int)5471U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 5471 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug498.key.dd_key_false.key,(_Bool)0);
      #line 5471 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 5471 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug498,(hw->adapter)->netdev,(char *)"Error %d in resume workarounds\n",ret_val);
    }
    #line 5472 
    (*(hw->phy.ops.release))(hw);
  }
  #line 5474 
  return;
}

#line 5482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_cleanup_led_ich8lan(struct e1000_hw *hw)
{
  #line 5484 
  if (hw->phy.type == (unsigned int)e1000_phy_ife) {
    #line 5485 
    return e1e_wphy(hw,27U,(unsigned short)0);
  }
  #line 5487 
  __ew32(hw,3584UL,hw->mac.ledctl_default);
  #line 5488 
  return 0;
}

#line 5497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_led_on_ich8lan(struct e1000_hw *hw)
{
  #line 5499 
  if (hw->phy.type == (unsigned int)e1000_phy_ife) {
    #line 5500 
    return e1e_wphy(hw,27U,(unsigned short)39);
  }
  #line 5503 
  __ew32(hw,3584UL,hw->mac.ledctl_mode2);
  #line 5504 
  return 0;
}

#line 5513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_led_off_ich8lan(struct e1000_hw *hw)
{
  #line 5515 
  if (hw->phy.type == (unsigned int)e1000_phy_ife) {
    #line 5516 
    return e1e_wphy(hw,27U,(unsigned short)38);
  }
  #line 5520 
  __ew32(hw,3584UL,hw->mac.ledctl_mode1);
  #line 5521 
  return 0;
}

#line 5530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_setup_led_pchlan(struct e1000_hw *hw)
{
  #line 5532 
  return e1e_wphy(hw,24606U,
               (unsigned short)((int)((unsigned short)hw->mac.ledctl_mode1)));
}

#line 5541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_cleanup_led_pchlan(struct e1000_hw *hw)
{
  #line 5543 
  return e1e_wphy(hw,24606U,
               (unsigned short)((int)((unsigned short)hw->mac.ledctl_default)));
}

#line 5552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_led_on_pchlan(struct e1000_hw *hw)
{
  #line 5555 
  u32 i;
  #line 5555 
  u32 led;
  #line 5554 
  u16 data = (unsigned short)hw->mac.ledctl_mode2;
  #line 5560 
  if ((__er32(hw,8UL) & 2U) == 0U) {
    #line 5561 
    i = 0U;
    #line 5561 
    while (i <= 2U) {
      #line 5562 
      led = (unsigned int)((int)data >> i * 5U) & 31U;
      #line 5563 
      if ((led & 7U) != 2U) 
                            #line 5565 
                            goto __Cont;
      #line 5566 
      if ((led & 8U) != 0U) 
                            #line 5567 
                            data = (unsigned short)(~ (8 << i * 5U) & (int)data); else 
                                                                    #line 5569 
                                                                    data = (unsigned short)((8 << i * 5U) | (int)data);
      #line 5561 
      __Cont: 
              #line 5561 
      i ++;
    }
  }
  #line 5573 
  return e1e_wphy(hw,24606U,(unsigned short)((int)data));
}

#line 5582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_led_off_pchlan(struct e1000_hw *hw)
{
  #line 5585 
  u32 i;
  #line 5585 
  u32 led;
  #line 5584 
  u16 data = (unsigned short)hw->mac.ledctl_mode1;
  #line 5590 
  if ((__er32(hw,8UL) & 2U) == 0U) {
    #line 5591 
    i = 0U;
    #line 5591 
    while (i <= 2U) {
      #line 5592 
      led = (unsigned int)((int)data >> i * 5U) & 31U;
      #line 5593 
      if ((led & 7U) != 2U) 
                            #line 5595 
                            goto __Cont;
      #line 5596 
      if ((led & 8U) != 0U) 
                            #line 5597 
                            data = (unsigned short)(~ (8 << i * 5U) & (int)data); else 
                                                                    #line 5599 
                                                                    data = (unsigned short)((8 << i * 5U) | (int)data);
      #line 5591 
      __Cont: 
              #line 5591 
      i ++;
    }
  }
  #line 5603 
  return e1e_wphy(hw,24606U,(unsigned short)((int)data));
}

#line 5618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_get_cfg_done_ich8lan(struct e1000_hw *hw)
{
  #line 5622 
  u32 status;
  #line 5620 
  s32 ret_val = 0;
  #line 5621 
  u32 bank = 0U;
  #line 5624 
  e1000e_get_cfg_done_generic(hw);
  #line 5627 
  if (hw->mac.type > (unsigned int)e1000_ich9lan) 
                                                  #line 5628 
                                                  e1000_lan_init_done_ich8lan(hw);
  else {
    #line 5630 
    ret_val = e1000e_get_auto_rd_done(hw);
    #line 5631 
    if (ret_val != 0) {
      {
        #line 5636 
        bool branch;
        #line 5636 
        struct _ddebug __UNIQUE_ID_ddebug499 = {.modname = (char *)"e1000e", .function = (char *)"e1000_get_cfg_done_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"Auto Read Done did not complete\n", .lineno = (unsigned int)5636U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 5636 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug499.key.dd_key_false.key,(_Bool)0);
        #line 5636 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 5636 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug499,(hw->adapter)->netdev,(char *)"Auto Read Done did not complete\n");
      }
      #line 5637 
      ret_val = 0;
    }
  }
  #line 5642 
  status = __er32(hw,8UL);
  #line 5643 
  if ((status & 1024U) != 0U) 
                              #line 5644 
                              __ew32(hw,8UL,status & 4294966271U);
  else {
    #line 5646 
    bool branch_0;
    #line 5646 
    struct _ddebug __UNIQUE_ID_ddebug500 = {.modname = (char *)"e1000e", .function = (char *)"e1000_get_cfg_done_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"PHY Reset Asserted not set - needs delay\n", .lineno = (unsigned int)5646U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 5646 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug500.key.dd_key_false.key,(_Bool)0);
    #line 5646 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 5646 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug500,(hw->adapter)->netdev,(char *)"PHY Reset Asserted not set - needs delay\n");
  }
  #line 5649 
  if (hw->mac.type <= (unsigned int)e1000_ich9lan) {
    #line 5650 
    if ((__er32(hw,16UL) & 256U) == 0U) 
      #line 5650 
      if (hw->phy.type == (unsigned int)e1000_phy_igp_3) 
                                                         #line 5652 
                                                         e1000e_phy_init_script_igp3(hw);
  }
  else {
    #line 5655 
    if (e1000_valid_nvm_bank_detect_ich8lan(hw,& bank) != 0) {
      {
        #line 5657 
        bool branch_1;
        #line 5657 
        struct _ddebug __UNIQUE_ID_ddebug501 = {.modname = (char *)"e1000e", .function = (char *)"e1000_get_cfg_done_ich8lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = (char *)"EEPROM not present\n", .lineno = (unsigned int)5657U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 5657 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug501.key.dd_key_false.key,(_Bool)0);
        #line 5657 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 5657 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug501,(hw->adapter)->netdev,(char *)"EEPROM not present\n");
      }
      #line 5658 
      ret_val = -3;
    }
  }
  #line 5662 
  return ret_val;
}

#line 5672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_power_down_phy_copper_ich8lan(struct e1000_hw *hw)
{
  #line 5675 
  if (! (*(hw->mac.ops.check_mng_mode))(hw)) {
    #line 5675 
    if ((*(hw->phy.ops.check_reset_block))(hw) == 0) 
                                                     #line 5677 
                                                     e1000_power_down_phy_copper(hw);
  }
  #line 5678 
  return;
}

#line 5687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_clear_hw_cntrs_ich8lan(struct e1000_hw *hw)
{
  #line 5689 
  u16 phy_data;
  #line 5690 
  s32 ret_val;
  #line 5692 
  e1000e_clear_hw_cntrs_base(hw);
  #line 5694 
  __er32(hw,16388UL);
  #line 5695 
  __er32(hw,16396UL);
  #line 5696 
  __er32(hw,16436UL);
  #line 5697 
  __er32(hw,16444UL);
  #line 5698 
  __er32(hw,16632UL);
  #line 5699 
  __er32(hw,16636UL);
  #line 5701 
  __er32(hw,16564UL);
  #line 5702 
  __er32(hw,16568UL);
  #line 5703 
  __er32(hw,16572UL);
  #line 5705 
  __er32(hw,16640UL);
  #line 5706 
  __er32(hw,16676UL);
  #line 5709 
  if (((hw->phy.type == (unsigned int)e1000_phy_82578 || hw->phy.type == (unsigned int)e1000_phy_82579) || hw->phy.type == (unsigned int)e1000_phy_i217) || hw->phy.type == (unsigned int)e1000_phy_82577) {
    #line 5713 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 5714 
    if (ret_val != 0) 
                      #line 5715 
                      return;
    #line 5716 
    ret_val = (*(hw->phy.ops.set_page))(hw,(unsigned short)24896);
    #line 5718 
    if (ret_val != 0) 
                      #line 5719 
                      goto release;
    #line 5720 
    (*(hw->phy.ops.read_reg_page))(hw,24912U,& phy_data);
    #line 5721 
    (*(hw->phy.ops.read_reg_page))(hw,24913U,& phy_data);
    #line 5722 
    (*(hw->phy.ops.read_reg_page))(hw,24914U,& phy_data);
    #line 5723 
    (*(hw->phy.ops.read_reg_page))(hw,24915U,& phy_data);
    #line 5724 
    (*(hw->phy.ops.read_reg_page))(hw,24916U,& phy_data);
    #line 5725 
    (*(hw->phy.ops.read_reg_page))(hw,24917U,& phy_data);
    #line 5726 
    (*(hw->phy.ops.read_reg_page))(hw,24919U,& phy_data);
    #line 5727 
    (*(hw->phy.ops.read_reg_page))(hw,24920U,& phy_data);
    #line 5728 
    (*(hw->phy.ops.read_reg_page))(hw,24921U,& phy_data);
    #line 5729 
    (*(hw->phy.ops.read_reg_page))(hw,24922U,& phy_data);
    #line 5730 
    (*(hw->phy.ops.read_reg_page))(hw,24923U,& phy_data);
    #line 5731 
    (*(hw->phy.ops.read_reg_page))(hw,24924U,& phy_data);
    #line 5732 
    (*(hw->phy.ops.read_reg_page))(hw,24925U,& phy_data);
    #line 5733 
    (*(hw->phy.ops.read_reg_page))(hw,24926U,& phy_data);
    #line 5734 
    release: 
             #line 5734 
    ;
    #line 5735 
    (*(hw->phy.ops.release))(hw);
  }
  #line 5737 
  return;
}

#line 5739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static struct e1000_mac_operations ich8_mac_ops = {.check_for_link = & e1000_check_for_copper_link_ich8lan, .clear_hw_cntrs = & e1000_clear_hw_cntrs_ich8lan, .get_bus_info = & e1000_get_bus_info_ich8lan, .set_lan_id = & e1000_set_lan_id_single_port, .get_link_up_info = & e1000_get_link_up_info_ich8lan, .update_mc_addr_list = & e1000e_update_mc_addr_list_generic, .reset_hw = & e1000_reset_hw_ich8lan, .init_hw = & e1000_init_hw_ich8lan, .setup_link = & e1000_setup_link_ich8lan, .setup_physical_interface = & e1000_setup_copper_link_ich8lan, .config_collision_dist = & e1000e_config_collision_dist_generic, .rar_set = & e1000e_rar_set_generic, .rar_get_count = & e1000e_rar_get_count_generic};
#line 5760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static struct e1000_phy_operations ich8_phy_ops = {.acquire = & e1000_acquire_swflag_ich8lan, .check_reset_block = & e1000_check_reset_block_ich8lan, .get_cfg_done = & e1000_get_cfg_done_ich8lan, .get_cable_length = & e1000e_get_cable_length_igp_2, .read_reg = & e1000e_read_phy_reg_igp, .release = & e1000_release_swflag_ich8lan, .reset = & e1000_phy_hw_reset_ich8lan, .set_d0_lplu_state = & e1000_set_d0_lplu_state_ich8lan, .set_d3_lplu_state = & e1000_set_d3_lplu_state_ich8lan, .write_reg = & e1000e_write_phy_reg_igp};
#line 5774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static struct e1000_nvm_operations ich8_nvm_ops = {.acquire = & e1000_acquire_nvm_ich8lan, .read = & e1000_read_nvm_ich8lan, .release = & e1000_release_nvm_ich8lan, .reload = & e1000e_reload_nvm_generic, .update = & e1000_update_nvm_checksum_ich8lan, .valid_led_default = & e1000_valid_led_default_ich8lan, .validate = & e1000_validate_nvm_checksum_ich8lan, .write = & e1000_write_nvm_ich8lan};
#line 5785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static struct e1000_nvm_operations spt_nvm_ops = {.acquire = & e1000_acquire_nvm_ich8lan, .read = & e1000_read_nvm_spt, .release = & e1000_release_nvm_ich8lan, .reload = & e1000e_reload_nvm_generic, .update = & e1000_update_nvm_checksum_spt, .valid_led_default = & e1000_valid_led_default_ich8lan, .validate = & e1000_validate_nvm_checksum_ich8lan, .write = & e1000_write_nvm_ich8lan};
#line 5796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_ich8_info = {.mac = e1000_ich8lan, .flags = 33323U, .pba = 8U, .max_hw_frame_size = 1522U, .get_variants = & e1000_get_variants_ich8lan, .mac_ops = & ich8_mac_ops, .phy_ops = & ich8_phy_ops, .nvm_ops = & ich8_nvm_ops};
#line 5812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_ich9_info = {.mac = e1000_ich9lan, .flags = 33451U, .pba = 18U, .max_hw_frame_size = 9234U, .get_variants = & e1000_get_variants_ich8lan, .mac_ops = & ich8_mac_ops, .phy_ops = & ich8_phy_ops, .nvm_ops = & ich8_nvm_ops};
#line 5829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_ich10_info = {.mac = e1000_ich10lan, .flags = 33451U, .pba = 18U, .max_hw_frame_size = 9234U, .get_variants = & e1000_get_variants_ich8lan, .mac_ops = & ich8_mac_ops, .phy_ops = & ich8_phy_ops, .nvm_ops = & ich8_nvm_ops};
#line 5846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_pch_info = {.mac = e1000_pchlan, .flags = 295595U, .flags2 = 16U, .pba = 26U, .max_hw_frame_size = 4096U, .get_variants = & e1000_get_variants_ich8lan, .mac_ops = & ich8_mac_ops, .phy_ops = & ich8_phy_ops, .nvm_ops = & ich8_nvm_ops};
#line 5865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_pch2_info = {.mac = e1000_pch2lan, .flags = 49835U, .flags2 = 16432U, .pba = 26U, .max_hw_frame_size = 9022U, .get_variants = & e1000_get_variants_ich8lan, .mac_ops = & ich8_mac_ops, .phy_ops = & ich8_phy_ops, .nvm_ops = & ich8_nvm_ops};
#line 5886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_pch_lpt_info = {.mac = e1000_pch_lpt, .flags = 49835U, .flags2 = 16432U, .pba = 26U, .max_hw_frame_size = 9022U, .get_variants = & e1000_get_variants_ich8lan, .mac_ops = & ich8_mac_ops, .phy_ops = & ich8_phy_ops, .nvm_ops = & ich8_nvm_ops};
#line 5907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_pch_spt_info = {.mac = e1000_pch_spt, .flags = 49835U, .flags2 = 48U, .pba = 26U, .max_hw_frame_size = 9022U, .get_variants = & e1000_get_variants_ich8lan, .mac_ops = & ich8_mac_ops, .phy_ops = & ich8_phy_ops, .nvm_ops = & spt_nvm_ops};
#line 5927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info e1000_pch_cnp_info = {.mac = e1000_pch_cnp, .flags = 49835U, .flags2 = 48U, .pba = 26U, .max_hw_frame_size = 9022U, .get_variants = & e1000_get_variants_ich8lan, .mac_ops = & ich8_mac_ops, .phy_ops = & ich8_phy_ops, .nvm_ops = & spt_nvm_ops};
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ich8lan.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 131 
  ldv_clear_bit(nr,addr);
  #line 132 
  return;
}

#line 651  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ich8lan.i.aux"
static void cif_mutex_lock_nvm_mutex(struct mutex *lock)
{
  #line 654 
  ldv_mutex_model_lock(lock,(char *)"nvm_mutex");
  #line 655 
  return;
}

#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ich8lan.i.aux"
static void cif_mutex_unlock_nvm_mutex(struct mutex *lock)
{
  #line 661 
  ldv_mutex_model_unlock(lock,(char *)"nvm_mutex");
  #line 662 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/82571.i.aux"
#line 651 
static void cif_mutex_lock_swflag_mutex(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/82571.i.aux"
static void cif_mutex_unlock_swflag_mutex(struct mutex *lock);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.h"
#line 8 
s32 e1000e_check_for_copper_link(struct e1000_hw *hw);
#line 9 
#line 9 
s32 e1000e_check_for_fiber_link(struct e1000_hw *hw);
#line 11 
#line 11 
s32 e1000e_cleanup_led_generic(struct e1000_hw *hw);
#line 21 
#line 21 
s32 e1000e_get_speed_and_duplex_fiber_serdes(struct e1000_hw *hw, u16 *speed, u16 *duplex);
#line 24 
#line 24 
s32 e1000e_led_on_generic(struct e1000_hw *hw);
#line 25 
#line 25 
s32 e1000e_led_off_generic(struct e1000_hw *hw);
#line 29 
#line 29 
s32 e1000e_setup_fiber_serdes_link(struct e1000_hw *hw);
#line 31 
#line 31 
s32 e1000e_setup_link_generic(struct e1000_hw *hw);
#line 39 
#line 39 
s32 e1000_check_alt_mac_addr_generic(struct e1000_hw *hw);
#line 43 
#line 43 
void e1000_write_vfta_generic(struct e1000_hw *hw, u32 offset, u32 value);
#line 45 
#line 45 
void e1000_set_lan_id_multi_port_pcie(struct e1000_hw *hw);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.h"
#line 11 
s32 e1000e_check_reset_block_generic(struct e1000_hw *hw);
#line 33 
#line 33 
s32 e1000e_read_phy_reg_m88(struct e1000_hw *hw, u32 offset, u16 *data);
#line 34 
#line 34 
s32 e1000e_set_d3_lplu_state(struct e1000_hw *hw, bool active);
#line 40 
#line 40 
s32 e1000e_write_phy_reg_m88(struct e1000_hw *hw, u32 offset, u16 data);
#line 50 
#line 50 
s32 e1000e_read_phy_reg_bm2(struct e1000_hw *hw, u32 offset, u16 *data);
#line 51 
#line 51 
s32 e1000e_write_phy_reg_bm2(struct e1000_hw *hw, u32 offset, u16 data);
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.h"
#line 7 
s32 e1000e_acquire_nvm(struct e1000_hw *hw);
#line 9 
#line 9 
s32 e1000e_poll_eerd_eewr_done(struct e1000_hw *hw, int ee_reg);
#line 10 
#line 10 
s32 e1000_read_mac_addr_generic(struct e1000_hw *hw);
#line 13 
#line 13 
s32 e1000e_read_nvm_eerd(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);
#line 16 
#line 16 
s32 e1000e_write_nvm_spi(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);
#line 18 
#line 18 
void e1000e_release_nvm(struct e1000_hw *hw);
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.h"
#line 7 
bool e1000e_check_mng_mode_generic(struct e1000_hw *hw);
#line 8 
#line 8 
bool e1000e_enable_tx_pkt_filtering(struct e1000_hw *hw);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.h"
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
bool e1000_check_phy_82574(struct e1000_hw *hw);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.h"
#line 1682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
bool e1000e_get_laa_state_82571(struct e1000_hw *hw);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.h"
#line 1697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
void e1000e_set_laa_state_82571(struct e1000_hw *hw, bool state);
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 1945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
struct e1000_info e1000_82571_info;
#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 1966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
struct e1000_info e1000_82572_info;
#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 1984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
struct e1000_info e1000_82573_info;
#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 2002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
struct e1000_info e1000_82574_info;
#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
struct e1000_info e1000_82583_info;
#line 22 
#line 388 
static s32 e1000_get_phy_id_82571(struct e1000_hw *hw);
#line 23 
#line 1420 
static s32 e1000_setup_copper_link_82571(struct e1000_hw *hw);
#line 24 
#line 1455 
static s32 e1000_setup_fiber_serdes_link_82571(struct e1000_hw *hw);
#line 25 
#line 1494 
static s32 e1000_check_for_serdes_link_82571(struct e1000_hw *hw);
#line 26 
#line 805 
static s32 e1000_write_nvm_eewr_82571(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);
#line 28 
#line 1726 
static s32 e1000_fix_nvm_checksum_82571(struct e1000_hw *hw);
#line 29 
#line 1142 
static void e1000_initialize_hw_bits_82571(struct e1000_hw *hw);
#line 30 
#line 1815 
static void e1000_clear_hw_cntrs_82571(struct e1000_hw *hw);
#line 31 
#line 1318 
static bool e1000_check_mng_mode_82574(struct e1000_hw *hw);
#line 32 
#line 1332 
static s32 e1000_led_on_82574(struct e1000_hw *hw);
#line 33 
#line 493 
static void e1000_put_hw_semaphore_82571(struct e1000_hw *hw);
#line 34 
#line 1796 
static void e1000_power_down_phy_copper_82571(struct e1000_hw *hw);
#line 35 
#line 544 
static void e1000_put_hw_semaphore_82573(struct e1000_hw *hw);
#line 36 
#line 562 
static s32 e1000_get_hw_semaphore_82574(struct e1000_hw *hw);
#line 37 
#line 580 
static void e1000_put_hw_semaphore_82574(struct e1000_hw *hw);
#line 38 
#line 598 
static s32 e1000_set_d0_lplu_state_82574(struct e1000_hw *hw, bool active);
#line 39 
#line 622 
static s32 e1000_set_d3_lplu_state_82574(struct e1000_hw *hw, bool active);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_init_phy_params_82571(struct e1000_hw *hw)
{
  #line 48 
  s32 ret_val;
  #line 47 
  struct e1000_phy_info *phy = & hw->phy;
  #line 50 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) {
    #line 51 
    phy->type = e1000_phy_none;
    #line 52 
    return 0;
  }
  #line 55 
  phy->addr = 1U;
  #line 56 
  phy->autoneg_mask = (unsigned short)47U;
  #line 57 
  phy->reset_delay_us = 100U;
  #line 59 
  phy->ops.power_up = & e1000_power_up_phy_copper;
  #line 60 
  phy->ops.power_down = & e1000_power_down_phy_copper_82571;
  #line 62 
  switch ((unsigned int)hw->mac.type) {
    #line 63 
    case (unsigned int)0: 
                          #line 63 
    ;
    #line 64 
    case (unsigned int)1: 
                          #line 64 
    ;
    #line 65 
    phy->type = e1000_phy_igp_2;
    #line 66 
    break;
    #line 67 
    case (unsigned int)2: 
                          #line 67 
    ;
    #line 68 
    phy->type = e1000_phy_m88;
    #line 69 
    break;
    #line 70 
    case (unsigned int)3: 
                          #line 70 
    ;
    #line 71 
    case (unsigned int)4: 
                          #line 71 
    ;
    #line 72 
    phy->type = e1000_phy_bm;
    #line 73 
    phy->ops.acquire = & e1000_get_hw_semaphore_82574;
    #line 74 
    phy->ops.release = & e1000_put_hw_semaphore_82574;
    #line 75 
    phy->ops.set_d0_lplu_state = & e1000_set_d0_lplu_state_82574;
    #line 76 
    phy->ops.set_d3_lplu_state = & e1000_set_d3_lplu_state_82574;
    #line 77 
    break;
    #line 78 
    default: 
             #line 78 
    ;
    #line 79 
    return -2;
  }
  #line 83 
  ret_val = e1000_get_phy_id_82571(hw);
  #line 84 
  if (ret_val != 0) {
    {
      #line 85 
      bool branch;
      #line 85 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_phy_params_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"Error getting PHY ID\n", .lineno = (unsigned int)85U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 85 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 85 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 85 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,(hw->adapter)->netdev,(char *)"Error getting PHY ID\n");
    }
    #line 86 
    return ret_val;
  }
  #line 90 
  switch ((unsigned int)hw->mac.type) {
    #line 91 
    case (unsigned int)0: 
                          #line 91 
    ;
    #line 92 
    case (unsigned int)1: 
                          #line 92 
    ;
    #line 93 
    if (phy->id != 44565376U) 
                              #line 94 
                              ret_val = -2;
    #line 95 
    break;
    #line 96 
    case (unsigned int)2: 
                          #line 96 
    ;
    #line 97 
    if (phy->id != 21040320U) 
                              #line 98 
                              ret_val = -2;
    #line 99 
    break;
    #line 100 
    case (unsigned int)3: 
                          #line 100 
    ;
    #line 101 
    case (unsigned int)4: 
                          #line 101 
    ;
    #line 102 
    if (phy->id != 21040305U) 
                              #line 103 
                              ret_val = -2;
    #line 104 
    break;
    #line 105 
    default: 
             #line 105 
    ;
    #line 106 
    ret_val = -2;
    #line 107 
    break;
  }
  #line 110 
  if (ret_val != 0) {
    #line 111 
    bool branch_0;
    #line 111 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_phy_params_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"PHY ID unknown: type = 0x%08x\n", .lineno = (unsigned int)111U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 111 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 111 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 111 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,(hw->adapter)->netdev,(char *)"PHY ID unknown: type = 0x%08x\n",phy->id);
  }
  #line 113 
  return ret_val;
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_init_nvm_params_82571(struct e1000_hw *hw)
{
  #line 124 
  u16 size;
  #line 122 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 123 
  u32 eecd = __er32(hw,16UL);
  #line 126 
  nvm->opcode_bits = (unsigned short)8U;
  #line 127 
  nvm->delay_usec = (unsigned short)1U;
  #line 128 
  switch ((unsigned int)nvm->override) {
    #line 129 
    case (unsigned int)2: 
                          #line 129 
    ;
    #line 130 
    nvm->page_size = (unsigned short)32U;
    #line 131 
    nvm->address_bits = (unsigned short)16U;
    #line 132 
    break;
    #line 133 
    case (unsigned int)1: 
                          #line 133 
    ;
    #line 134 
    nvm->page_size = (unsigned short)8U;
    #line 135 
    nvm->address_bits = (unsigned short)8U;
    #line 136 
    break;
    #line 137 
    default: 
             #line 137 
    ;
    #line 138 
    if ((eecd & 1024U) != 0U) 
                              #line 138 
                              nvm->page_size = (unsigned short)32U; else 
                                                                    #line 138 
                                                                    nvm->page_size = (unsigned short)8U;
    #line 139 
    if ((eecd & 1024U) != 0U) 
                              #line 139 
                              nvm->address_bits = (unsigned short)16U; else 
                                                                    #line 139 
                                                                    nvm->address_bits = (unsigned short)8U;
    #line 140 
    break;
  }
  #line 143 
  switch ((unsigned int)hw->mac.type) {
    #line 144 
    case (unsigned int)2: 
                          #line 144 
    ;
    #line 145 
    case (unsigned int)3: 
                          #line 145 
    ;
    #line 146 
    case (unsigned int)4: 
                          #line 146 
    ;
    #line 147 
    if (((eecd >> 15) & 3U) == 3U) {
      #line 148 
      nvm->type = e1000_nvm_flash_hw;
      #line 149 
      nvm->word_size = (unsigned short)2048U;
      #line 153 
      eecd &= 4293918719U;
      #line 154 
      __ew32(hw,16UL,eecd);
      #line 155 
      break;
    }
    #line 158 
    default: 
             #line 158 
    ;
    #line 159 
    nvm->type = e1000_nvm_eeprom_spi;
    #line 160 
    size = (unsigned short)((unsigned int)((unsigned short)(eecd >> 11)) & 15U);
    #line 165 
    size = (unsigned short)((unsigned int)size + 6U);
    #line 168 
    if ((unsigned int)size > 14U) 
                                  #line 169 
                                  size = (unsigned short)14U;
    #line 170 
    nvm->word_size = (unsigned short)(1UL << (int)size);
    #line 171 
    break;
  }
  #line 175 
  switch ((unsigned int)hw->mac.type) {
    #line 176 
    case (unsigned int)3: 
                          #line 176 
    ;
    #line 177 
    case (unsigned int)4: 
                          #line 177 
    ;
    #line 178 
    nvm->ops.acquire = & e1000_get_hw_semaphore_82574;
    #line 179 
    nvm->ops.release = & e1000_put_hw_semaphore_82574;
    #line 180 
    break;
    #line 181 
    default: 
             #line 181 
    ;
    #line 182 
    break;
  }
  #line 185 
  return 0;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_init_mac_params_82571(struct e1000_hw *hw)
{
  #line 194 
  struct e1000_mac_info *mac = & hw->mac;
  #line 195 
  u32 swsm = 0U;
  #line 196 
  u32 swsm2 = 0U;
  #line 197 
  bool force_clear_smbi = (_Bool)0;
  #line 200 
  switch ((int)((hw->adapter)->pdev)->device) {
    #line 201 
    case 4191: 
               #line 201 
    ;
    #line 202 
    case 4222: 
               #line 202 
    ;
    #line 203 
    case 4261: 
               #line 203 
    ;
    #line 204 
    hw->phy.media_type = e1000_media_type_fiber;
    #line 205 
    mac->ops.setup_physical_interface = & e1000_setup_fiber_serdes_link_82571;
    #line 207 
    mac->ops.check_for_link = & e1000e_check_for_fiber_link;
    #line 208 
    mac->ops.get_link_up_info = & e1000e_get_speed_and_duplex_fiber_serdes;
    #line 210 
    break;
    #line 211 
    case 4192: 
               #line 211 
    ;
    #line 212 
    case 4313: 
               #line 212 
    ;
    #line 213 
    case 4314: 
               #line 213 
    ;
    #line 214 
    case 4223: 
               #line 214 
    ;
    #line 215 
    hw->phy.media_type = e1000_media_type_internal_serdes;
    #line 216 
    mac->ops.setup_physical_interface = & e1000_setup_fiber_serdes_link_82571;
    #line 218 
    mac->ops.check_for_link = & e1000_check_for_serdes_link_82571;
    #line 219 
    mac->ops.get_link_up_info = & e1000e_get_speed_and_duplex_fiber_serdes;
    #line 221 
    break;
    #line 222 
    default: 
             #line 222 
    ;
    #line 223 
    hw->phy.media_type = e1000_media_type_copper;
    #line 224 
    mac->ops.setup_physical_interface = & e1000_setup_copper_link_82571;
    #line 226 
    mac->ops.check_for_link = & e1000e_check_for_copper_link;
    #line 227 
    mac->ops.get_link_up_info = & e1000e_get_speed_and_duplex_copper;
    #line 228 
    break;
  }
  #line 232 
  mac->mta_reg_count = (unsigned short)128U;
  #line 234 
  mac->rar_entry_count = (unsigned short)15U;
  #line 236 
  mac->adaptive_ifs = (_Bool)1;
  #line 239 
  switch ((unsigned int)hw->mac.type) {
    #line 240 
    case (unsigned int)2: 
                          #line 240 
    ;
    #line 241 
    mac->ops.set_lan_id = & e1000_set_lan_id_single_port;
    #line 242 
    mac->ops.check_mng_mode = & e1000e_check_mng_mode_generic;
    #line 243 
    mac->ops.led_on = & e1000e_led_on_generic;
    #line 244 
    mac->ops.blink_led = & e1000e_blink_led_generic;
    #line 247 
    mac->has_fwsm = (_Bool)1;
    #line 251 
    mac->arc_subsystem_valid = (_Bool)((__er32(hw,23380UL) & 14U) != 0U);
    #line 253 
    break;
    #line 254 
    case (unsigned int)3: 
                          #line 254 
    ;
    #line 255 
    case (unsigned int)4: 
                          #line 255 
    ;
    #line 256 
    mac->ops.set_lan_id = & e1000_set_lan_id_single_port;
    #line 257 
    mac->ops.check_mng_mode = & e1000_check_mng_mode_82574;
    #line 258 
    mac->ops.led_on = & e1000_led_on_82574;
    #line 259 
    break;
    #line 260 
    default: 
             #line 260 
    ;
    #line 261 
    mac->ops.check_mng_mode = & e1000e_check_mng_mode_generic;
    #line 262 
    mac->ops.led_on = & e1000e_led_on_generic;
    #line 263 
    mac->ops.blink_led = & e1000e_blink_led_generic;
    #line 266 
    mac->has_fwsm = (_Bool)1;
    #line 267 
    break;
  }
  #line 276 
  switch ((unsigned int)hw->mac.type) {
    #line 277 
    case (unsigned int)0: 
                          #line 277 
    ;
    #line 278 
    case (unsigned int)1: 
                          #line 278 
    ;
    #line 279 
    swsm2 = __er32(hw,23384UL);
    #line 281 
    if ((swsm2 & 2U) == 0U) {
      #line 283 
      __ew32(hw,23384UL,swsm2 | 2U);
      #line 284 
      force_clear_smbi = (_Bool)1;
    }
    else 
         #line 286 
         force_clear_smbi = (_Bool)0;
    #line 288 
    break;
    #line 289 
    default: 
             #line 289 
    ;
    #line 290 
    force_clear_smbi = (_Bool)1;
    #line 291 
    break;
  }
  #line 294 
  if ((int)force_clear_smbi != 0) {
    #line 296 
    swsm = __er32(hw,23376UL);
    #line 297 
    if ((swsm & 1U) != 0U) {
      #line 302 
      bool branch;
      #line 302 
      struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_mac_params_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"Please update your 82571 Bootagent\n", .lineno = (unsigned int)302U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 302 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
      #line 302 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 302 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,(hw->adapter)->netdev,(char *)"Please update your 82571 Bootagent\n");
    }
    #line 304 
    __ew32(hw,23376UL,swsm & 4294967294U);
  }
  #line 308 
  hw->dev_spec.e82571.smb_counter = 0U;
  #line 310 
  return 0;
}

#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_get_variants_82571(struct e1000_adapter *adapter)
{
  #line 316 
  int global_quad_port_a;
  #line 319 
  s32 rc;
  #line 315 
  struct e1000_hw *hw = & adapter->hw;
  #line 317 
  struct pci_dev *pdev = adapter->pdev;
  #line 318 
  int is_port_b = (int)__er32(hw,8UL) & 4;
  #line 321 
  rc = e1000_init_mac_params_82571(hw);
  #line 322 
  if (rc != 0) 
               #line 323 
               return rc;
  #line 325 
  rc = e1000_init_nvm_params_82571(hw);
  #line 326 
  if (rc != 0) 
               #line 327 
               return rc;
  #line 329 
  rc = e1000_init_phy_params_82571(hw);
  #line 330 
  if (rc != 0) 
               #line 331 
               return rc;
  #line 334 
  switch ((int)pdev->device) {
    #line 335 
    case 4260: 
               #line 335 
    ;
    #line 336 
    case 4261: 
               #line 336 
    ;
    #line 337 
    case 4284: 
               #line 337 
    ;
    #line 338 
    case 4309: 
               #line 338 
    ;
    #line 339 
    adapter->flags |= 8192U;
    #line 341 
    if (global_quad_port_a == 0) 
                                 #line 342 
                                 adapter->flags |= 4096U;
    #line 344 
    global_quad_port_a ++;
    #line 345 
    if (global_quad_port_a == 4) 
                                 #line 346 
                                 global_quad_port_a = 0;
    #line 347 
    break;
    #line 348 
    default: 
             #line 348 
    ;
    #line 349 
    break;
  }
  #line 352 
  switch ((unsigned int)adapter->hw.mac.type) {
    #line 353 
    case (unsigned int)0: 
                          #line 353 
    ;
    #line 355 
    if ((unsigned int)pdev->device + 61346U <= 2U && is_port_b != 0) 
      #line 359 
      adapter->flags &= 4294967287U;
    #line 361 
    if (((unsigned long)adapter->flags & 8192UL) != 0UL && ((unsigned long)adapter->flags & 4096UL) == 0UL) 
      #line 363 
      adapter->flags &= 4294967287U;
    #line 365 
    if ((unsigned int)pdev->device == 4314U) 
                                             #line 366 
                                             adapter->flags &= 4294967287U;
    #line 367 
    break;
    #line 368 
    case (unsigned int)2: 
                          #line 368 
    ;
    #line 369 
    if ((unsigned int)pdev->device == 4250U) {
      #line 370 
      adapter->flags |= 128U;
      #line 371 
      adapter->max_hw_frame_size = 9234U;
    }
    #line 373 
    break;
    #line 374 
    default: 
             #line 374 
    ;
    #line 375 
    break;
  }
  #line 378 
  return 0;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_get_phy_id_82571(struct e1000_hw *hw)
{
  #line 391 
  s32 ret_val;
  #line 390 
  struct e1000_phy_info *phy = & hw->phy;
  #line 392 
  u16 phy_id = (unsigned short)0U;
  #line 394 
  switch ((unsigned int)hw->mac.type) {
    #line 395 
    case (unsigned int)0: 
                          #line 395 
    ;
    #line 396 
    case (unsigned int)1: 
                          #line 396 
    ;
    #line 402 
    phy->id = 44565376U;
    #line 403 
    break;
    #line 404 
    case (unsigned int)2: 
                          #line 404 
    ;
    #line 405 
    return e1000e_get_phy_id(hw);
    #line 406 
    case (unsigned int)3: 
                          #line 406 
    ;
    #line 407 
    case (unsigned int)4: 
                          #line 407 
    ;
    #line 408 
    ret_val = e1e_rphy(hw,2U,& phy_id);
    #line 409 
    if (ret_val != 0) 
                      #line 410 
                      return ret_val;
    #line 412 
    phy->id = (unsigned int)((int)phy_id << 16);
    #line 413 
    usleep_range(20UL,40UL);
    #line 414 
    ret_val = e1e_rphy(hw,3U,& phy_id);
    #line 415 
    if (ret_val != 0) 
                      #line 416 
                      return ret_val;
    #line 418 
    phy->id |= (unsigned int)phy_id;
    #line 419 
    phy->revision = (unsigned int)phy_id & 15U;
    #line 420 
    break;
    #line 421 
    default: 
             #line 421 
    ;
    #line 422 
    return -2;
  }
  #line 425 
  return 0;
}

#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_get_hw_semaphore_82571(struct e1000_hw *hw)
{
  #line 436 
  u32 swsm;
  #line 437 
  s32 sw_timeout = (int)hw->nvm.word_size + 1;
  #line 438 
  s32 fw_timeout = (int)hw->nvm.word_size + 1;
  #line 439 
  s32 i = 0;
  #line 448 
  if (hw->dev_spec.e82571.smb_counter > 2U) 
                                            #line 449 
                                            sw_timeout = 1;
  #line 452 
  while (i < sw_timeout) {
    #line 453 
    swsm = __er32(hw,23376UL);
    #line 454 
    if ((swsm & 1U) == 0U) 
                           #line 455 
                           break;
    #line 457 
    usleep_range(50UL,100UL);
    #line 458 
    i ++;
  }
  #line 461 
  if (i == sw_timeout) {
    {
      #line 462 
      bool branch;
      #line 462 
      struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"e1000e", .function = (char *)"e1000_get_hw_semaphore_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"Driver can\'t access device - SMBI bit is set.\n", .lineno = (unsigned int)462U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 462 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
      #line 462 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 462 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,(hw->adapter)->netdev,(char *)"Driver can\'t access device - SMBI bit is set.\n");
    }
    #line 463 
    (hw->dev_spec.e82571.smb_counter) ++;
  }
  #line 466 
  i = 0;
  #line 466 
  while (i < fw_timeout) {
    {
      #line 467 
      swsm = __er32(hw,23376UL);
      #line 468 
      __ew32(hw,23376UL,swsm | 2U);
      #line 471 
      if ((__er32(hw,23376UL) & 2U) != 0U) 
                                           #line 472 
                                           break;
      #line 474 
      usleep_range(50UL,100UL);
    }
    #line 466 
    i ++;
  }
  #line 477 
  if (i == fw_timeout) {
    #line 479 
    e1000_put_hw_semaphore_82571(hw);
    {
      #line 480 
      bool branch_0;
      #line 480 
      struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"e1000e", .function = (char *)"e1000_get_hw_semaphore_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"Driver can\'t access the NVM\n", .lineno = (unsigned int)480U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 480 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
      #line 480 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 480 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,(hw->adapter)->netdev,(char *)"Driver can\'t access the NVM\n");
    }
    #line 481 
    return -1;
  }
  #line 484 
  return 0;
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_put_hw_semaphore_82571(struct e1000_hw *hw)
{
  #line 495 
  u32 swsm;
  #line 497 
  swsm = __er32(hw,23376UL);
  #line 498 
  swsm &= 4294967292U;
  #line 499 
  __ew32(hw,23376UL,swsm);
  #line 500 
  return;
}

#line 509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_get_hw_semaphore_82573(struct e1000_hw *hw)
{
  #line 511 
  u32 extcnf_ctrl;
  #line 512 
  s32 i = 0;
  #line 514 
  extcnf_ctrl = __er32(hw,3840UL);
  #line 515 
  while (1) {
    #line 516 
    extcnf_ctrl |= 32U;
    #line 517 
    __ew32(hw,3840UL,extcnf_ctrl);
    #line 518 
    extcnf_ctrl = __er32(hw,3840UL);
    #line 520 
    if ((extcnf_ctrl & 32U) != 0U) 
                                   #line 521 
                                   break;
    #line 523 
    usleep_range(2000UL,4000UL);
    #line 524 
    i ++;
    #line 525 
    if (! (i <= 9)) 
                    #line 515 
                    break;
  }
  #line 527 
  if (i == 10) {
    #line 529 
    e1000_put_hw_semaphore_82573(hw);
    {
      #line 530 
      bool branch;
      #line 530 
      struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"e1000e", .function = (char *)"e1000_get_hw_semaphore_82573", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"Driver can\'t access the PHY\n", .lineno = (unsigned int)530U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 530 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
      #line 530 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 530 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,(hw->adapter)->netdev,(char *)"Driver can\'t access the PHY\n");
    }
    #line 531 
    return -2;
  }
  #line 534 
  return 0;
}

#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_put_hw_semaphore_82573(struct e1000_hw *hw)
{
  #line 546 
  u32 extcnf_ctrl;
  #line 548 
  extcnf_ctrl = __er32(hw,3840UL);
  #line 549 
  extcnf_ctrl &= 4294967263U;
  #line 550 
  __ew32(hw,3840UL,extcnf_ctrl);
  #line 551 
  return;
}

#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static struct mutex swflag_mutex = {.wait_lock = {.__anonCompField_spinlock_25 = {.rlock = {.magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.name = (char *)"swflag_mutex.wait_lock"}}}}, .wait_list = {.next = & swflag_mutex.wait_list, .prev = & swflag_mutex.wait_list}, .magic = (void *)(& swflag_mutex), .dep_map = {.name = (char *)"swflag_mutex"}};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_get_hw_semaphore_82574(struct e1000_hw *hw)
{
  #line 564 
  s32 ret_val;
  #line 566 
  cif_mutex_lock_swflag_mutex(& swflag_mutex);
  #line 567 
  ret_val = e1000_get_hw_semaphore_82573(hw);
  #line 568 
  if (ret_val != 0) 
                    #line 569 
                    cif_mutex_unlock_swflag_mutex(& swflag_mutex);
  #line 570 
  return ret_val;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_put_hw_semaphore_82574(struct e1000_hw *hw)
{
  #line 582 
  e1000_put_hw_semaphore_82573(hw);
  #line 583 
  cif_mutex_unlock_swflag_mutex(& swflag_mutex);
  #line 584 
  return;
}

#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_set_d0_lplu_state_82574(struct e1000_hw *hw, bool active)
{
  #line 600 
  u32 data = __er32(hw,3856UL);
  #line 602 
  if ((int)active != 0) 
                        #line 603 
                        data |= 2U; else 
                                         #line 605 
                                         data &= 4294967293U;
  #line 607 
  __ew32(hw,3856UL,data);
  #line 608 
  return 0;
}

#line 622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_set_d3_lplu_state_82574(struct e1000_hw *hw, bool active)
{
  #line 624 
  u32 data = __er32(hw,3856UL);
  #line 626 
  if (! active) 
                #line 627 
                data &= 4294967291U;
  else 
    #line 628 
    if (((unsigned int)hw->phy.autoneg_advertised == 47U || (unsigned int)hw->phy.autoneg_advertised == 15U) || (unsigned int)hw->phy.autoneg_advertised == 3U) 
      #line 631 
      data |= 4U;
  #line 634 
  __ew32(hw,3856UL,data);
  #line 635 
  return 0;
}

#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_acquire_nvm_82571(struct e1000_hw *hw)
{
  #line 649 
  s32 ret_val;
  #line 651 
  ret_val = e1000_get_hw_semaphore_82571(hw);
  #line 652 
  if (ret_val != 0) 
                    #line 653 
                    return ret_val;
  #line 655 
  switch ((unsigned int)hw->mac.type) {
    #line 656 
    case (unsigned int)2: 
                          #line 656 
    ;
    #line 657 
    break;
    #line 658 
    default: 
             #line 658 
    ;
    #line 659 
    ret_val = e1000e_acquire_nvm(hw);
    #line 660 
    break;
  }
  #line 663 
  if (ret_val != 0) 
                    #line 664 
                    e1000_put_hw_semaphore_82571(hw);
  #line 666 
  return ret_val;
}

#line 675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_release_nvm_82571(struct e1000_hw *hw)
{
  #line 677 
  e1000e_release_nvm(hw);
  #line 678 
  e1000_put_hw_semaphore_82571(hw);
  #line 679 
  return;
}

#line 693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_write_nvm_82571(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 696 
  s32 ret_val;
  #line 698 
  switch ((unsigned int)hw->mac.type) {
    #line 699 
    case (unsigned int)2: 
                          #line 699 
    ;
    #line 700 
    case (unsigned int)3: 
                          #line 700 
    ;
    #line 701 
    case (unsigned int)4: 
                          #line 701 
    ;
    #line 702 
    ret_val = e1000_write_nvm_eewr_82571(hw,(unsigned short)((int)offset),(unsigned short)((int)words),data);
    #line 703 
    break;
    #line 704 
    case (unsigned int)0: 
                          #line 704 
    ;
    #line 705 
    case (unsigned int)1: 
                          #line 705 
    ;
    #line 706 
    ret_val = e1000e_write_nvm_spi(hw,(unsigned short)((int)offset),(unsigned short)((int)words),data);
    #line 707 
    break;
    #line 708 
    default: 
             #line 708 
    ;
    #line 709 
    ret_val = -1;
    #line 710 
    break;
  }
  #line 713 
  return ret_val;
}

#line 724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_update_nvm_checksum_82571(struct e1000_hw *hw)
{
  #line 726 
  u32 eecd;
  #line 727 
  s32 ret_val;
  #line 728 
  u16 i;
  #line 730 
  ret_val = e1000e_update_nvm_checksum_generic(hw);
  #line 731 
  if (ret_val != 0) 
                    #line 732 
                    return ret_val;
  #line 737 
  if (hw->nvm.type != (unsigned int)e1000_nvm_flash_hw) 
                                                        #line 738 
                                                        return 0;
  #line 741 
  i = (unsigned short)0U;
  #line 741 
  while ((unsigned int)i <= 1999U) {
    {
      #line 742 
      usleep_range(1000UL,2000UL);
      #line 743 
      if ((__er32(hw,16UL) & 524288U) == 0U) 
                                             #line 744 
                                             break;
    }
    #line 741 
    i = (u16)((int)i + 1);
  }
  #line 747 
  if ((unsigned int)i == 2000U) 
                                #line 748 
                                return -1;
  #line 751 
  if ((__er32(hw,4156UL) & 65280U) == 56064U) {
    #line 755 
    __ew32(hw,36608UL,64U);
    #line 756 
    __er32(hw,8UL);
    #line 757 
    __ew32(hw,36608UL,128U);
  }
  #line 761 
  eecd = __er32(hw,16UL) | 524288U;
  #line 762 
  __ew32(hw,16UL,eecd);
  #line 764 
  i = (unsigned short)0U;
  #line 764 
  while ((unsigned int)i <= 1999U) {
    {
      #line 765 
      usleep_range(1000UL,2000UL);
      #line 766 
      if ((__er32(hw,16UL) & 524288U) == 0U) 
                                             #line 767 
                                             break;
    }
    #line 764 
    i = (u16)((int)i + 1);
  }
  #line 770 
  if ((unsigned int)i == 2000U) 
                                #line 771 
                                return -1;
  #line 773 
  return 0;
}

#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_validate_nvm_checksum_82571(struct e1000_hw *hw)
{
  #line 785 
  if (hw->nvm.type == (unsigned int)e1000_nvm_flash_hw) 
                                                        #line 786 
                                                        e1000_fix_nvm_checksum_82571(hw);
  #line 788 
  return e1000e_validate_nvm_checksum_generic(hw);
}

#line 805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_write_nvm_eewr_82571(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 809 
  u32 i;
  #line 808 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 809 
  u32 eewr = 0U;
  #line 810 
  s32 ret_val = 0;
  #line 815 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      #line 817 
      bool branch;
      #line 817 
      struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"e1000e", .function = (char *)"e1000_write_nvm_eewr_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"nvm parameter(s) out of bounds\n", .lineno = (unsigned int)817U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 817 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
      #line 817 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 817 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,(hw->adapter)->netdev,(char *)"nvm parameter(s) out of bounds\n");
    }
    #line 818 
    return -1;
  }
  #line 821 
  i = 0U;
  #line 821 
  while ((unsigned int)words > i) {
    #line 822 
    eewr = ((unsigned int)((int)*(data + (unsigned long)i) << 16) | (((unsigned int)offset + i) << 2)) | 1U;
    #line 826 
    ret_val = e1000e_poll_eerd_eewr_done(hw,1);
    #line 827 
    if (ret_val != 0) 
                      #line 828 
                      break;
    #line 830 
    __ew32(hw,4140UL,eewr);
    #line 832 
    ret_val = e1000e_poll_eerd_eewr_done(hw,1);
    #line 833 
    if (ret_val != 0) 
                      #line 834 
                      break;
    #line 821 
    i ++;
  }
  #line 837 
  return ret_val;
}

#line 846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_get_cfg_done_82571(struct e1000_hw *hw)
{
  #line 848 
  s32 timeout = 100;
  #line 850 
  while (timeout != 0) {
    #line 851 
    if ((__er32(hw,4112UL) & 262144U) != 0U) 
                                             #line 852 
                                             break;
    #line 853 
    usleep_range(1000UL,2000UL);
    #line 854 
    timeout --;
  }
  #line 856 
  if (timeout == 0) {
    {
      #line 857 
      bool branch;
      #line 857 
      struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"e1000e", .function = (char *)"e1000_get_cfg_done_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"MNG configuration cycle has not completed.\n", .lineno = (unsigned int)857U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 857 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
      #line 857 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 857 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,(hw->adapter)->netdev,(char *)"MNG configuration cycle has not completed.\n");
    }
    #line 858 
    return -9;
  }
  #line 861 
  return 0;
}

#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_set_d0_lplu_state_82571(struct e1000_hw *hw, bool active)
{
  #line 878 
  s32 ret_val;
  #line 879 
  u16 data;
  #line 877 
  struct e1000_phy_info *phy = & hw->phy;
  #line 881 
  ret_val = e1e_rphy(hw,25U,& data);
  #line 882 
  if (ret_val != 0) 
                    #line 883 
                    return ret_val;
  #line 885 
  if ((int)active != 0) {
    #line 886 
    data = (unsigned short)((unsigned int)data | 2U);
    #line 887 
    ret_val = e1e_wphy(hw,25U,(unsigned short)((int)data));
    #line 888 
    if (ret_val != 0) 
                      #line 889 
                      return ret_val;
    #line 892 
    ret_val = e1e_rphy(hw,16U,& data);
    #line 893 
    if (ret_val != 0) 
                      #line 894 
                      return ret_val;
    #line 895 
    data = (unsigned short)((unsigned int)data & 65407U);
    #line 896 
    ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
    #line 897 
    if (ret_val != 0) 
                      #line 898 
                      return ret_val;
  }
  else {
    #line 900 
    data = (unsigned short)((unsigned int)data & 65533U);
    #line 901 
    ret_val = e1e_wphy(hw,25U,(unsigned short)((int)data));
    #line 907 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) {
      #line 908 
      ret_val = e1e_rphy(hw,16U,& data);
      #line 910 
      if (ret_val != 0) 
                        #line 911 
                        return ret_val;
      #line 913 
      data = (unsigned short)((unsigned int)data | 128U);
      #line 914 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
      #line 916 
      if (ret_val != 0) 
                        #line 917 
                        return ret_val;
    }
    else 
      #line 918 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) {
        #line 919 
        ret_val = e1e_rphy(hw,16U,& data);
        #line 921 
        if (ret_val != 0) 
                          #line 922 
                          return ret_val;
        #line 924 
        data = (unsigned short)((unsigned int)data & 65407U);
        #line 925 
        ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
        #line 927 
        if (ret_val != 0) 
                          #line 928 
                          return ret_val;
      }
  }
  #line 932 
  return 0;
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_reset_hw_82571(struct e1000_hw *hw)
{
  #line 943 
  u32 ctrl;
  #line 943 
  u32 ctrl_ext;
  #line 943 
  u32 eecd;
  #line 943 
  u32 tctl;
  #line 944 
  s32 ret_val;
  #line 949 
  ret_val = e1000e_disable_pcie_master(hw);
  #line 950 
  if (ret_val != 0) {
    #line 951 
    bool branch;
    #line 951 
    struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"e1000e", .function = (char *)"e1000_reset_hw_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"PCI-E Master disable polling has failed.\n", .lineno = (unsigned int)951U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 951 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
    #line 951 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 951 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,(hw->adapter)->netdev,(char *)"PCI-E Master disable polling has failed.\n");
  }
  {
    #line 953 
    bool branch_0;
    #line 953 
    struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"e1000e", .function = (char *)"e1000_reset_hw_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"Masking off all interrupts\n", .lineno = (unsigned int)953U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 953 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
    #line 953 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 953 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,(hw->adapter)->netdev,(char *)"Masking off all interrupts\n");
  }
  #line 954 
  __ew32(hw,216UL,4294967295U);
  #line 956 
  __ew32(hw,256UL,0U);
  #line 957 
  tctl = __er32(hw,1024UL);
  #line 958 
  tctl &= 4294967293U;
  #line 959 
  __ew32(hw,1024UL,tctl);
  #line 960 
  __er32(hw,8UL);
  #line 962 
  usleep_range(10000UL,11000UL);
  #line 967 
  switch ((unsigned int)hw->mac.type) {
    #line 968 
    case (unsigned int)2: 
                          #line 968 
    ;
    #line 969 
    ret_val = e1000_get_hw_semaphore_82573(hw);
    #line 970 
    break;
    #line 971 
    case (unsigned int)3: 
                          #line 971 
    ;
    #line 972 
    case (unsigned int)4: 
                          #line 972 
    ;
    #line 973 
    ret_val = e1000_get_hw_semaphore_82574(hw);
    #line 974 
    break;
    #line 975 
    default: 
             #line 975 
    ;
    #line 976 
    break;
  }
  #line 979 
  ctrl = __er32(hw,0UL);
  {
    #line 981 
    bool branch_1;
    #line 981 
    struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"e1000e", .function = (char *)"e1000_reset_hw_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"Issuing a global reset to MAC\n", .lineno = (unsigned int)981U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 981 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
    #line 981 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 981 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,(hw->adapter)->netdev,(char *)"Issuing a global reset to MAC\n");
  }
  #line 982 
  __ew32(hw,0UL,ctrl | 67108864U);
  #line 985 
  switch ((unsigned int)hw->mac.type) {
    #line 986 
    case (unsigned int)2: 
                          #line 986 
    ;
    #line 988 
    if (ret_val == 0) 
                      #line 989 
                      e1000_put_hw_semaphore_82573(hw);
    #line 990 
    break;
    #line 991 
    case (unsigned int)3: 
                          #line 991 
    ;
    #line 992 
    case (unsigned int)4: 
                          #line 992 
    ;
    #line 994 
    if (ret_val == 0) 
                      #line 995 
                      e1000_put_hw_semaphore_82574(hw);
    #line 996 
    break;
    #line 997 
    default: 
             #line 997 
    ;
    #line 998 
    break;
  }
  #line 1001 
  if (hw->nvm.type == (unsigned int)e1000_nvm_flash_hw) {
    #line 1002 
    usleep_range(10UL,20UL);
    #line 1003 
    ctrl_ext = __er32(hw,24UL);
    #line 1004 
    ctrl_ext |= 8192U;
    #line 1005 
    __ew32(hw,24UL,ctrl_ext);
    #line 1006 
    __er32(hw,8UL);
  }
  #line 1009 
  ret_val = e1000e_get_auto_rd_done(hw);
  #line 1010 
  if (ret_val != 0) 
                    #line 1012 
                    return ret_val;
  #line 1019 
  switch ((unsigned int)hw->mac.type) {
    #line 1020 
    case (unsigned int)0: 
                          #line 1020 
    ;
    #line 1021 
    case (unsigned int)1: 
                          #line 1021 
    ;
    #line 1025 
    eecd = __er32(hw,16UL);
    #line 1026 
    eecd &= 4294967103U;
    #line 1027 
    __ew32(hw,16UL,eecd);
    #line 1028 
    break;
    #line 1029 
    case (unsigned int)2: 
                          #line 1029 
    ;
    #line 1030 
    case (unsigned int)3: 
                          #line 1030 
    ;
    #line 1031 
    case (unsigned int)4: 
                          #line 1031 
    ;
    #line 1032 
    msleep(25U);
    #line 1033 
    break;
    #line 1034 
    default: 
             #line 1034 
    ;
    #line 1035 
    break;
  }
  #line 1039 
  __ew32(hw,216UL,4294967295U);
  #line 1040 
  __er32(hw,192UL);
  #line 1042 
  if (hw->mac.type == (unsigned int)e1000_82571) {
    #line 1044 
    ret_val = e1000_check_alt_mac_addr_generic(hw);
    #line 1045 
    if (ret_val != 0) 
                      #line 1046 
                      return ret_val;
    #line 1048 
    e1000e_set_laa_state_82571(hw,(_Bool)1);
  }
  #line 1052 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes) 
    #line 1053 
    hw->mac.serdes_link_state = e1000_serdes_link_down;
  #line 1055 
  return 0;
}

#line 1064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_init_hw_82571(struct e1000_hw *hw)
{
  #line 1067 
  u32 reg_data;
  #line 1068 
  s32 ret_val;
  #line 1069 
  u16 i;
  #line 1066 
  struct e1000_mac_info *mac = & hw->mac;
  #line 1069 
  u16 rar_count = mac->rar_entry_count;
  #line 1071 
  e1000_initialize_hw_bits_82571(hw);
  #line 1074 
  ret_val = (*(mac->ops.id_led_init))(hw);
  #line 1076 
  if (ret_val != 0) {
    #line 1077 
    bool branch;
    #line 1077 
    struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_hw_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"Error initializing identification LED\n", .lineno = (unsigned int)1077U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1077 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
    #line 1077 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1077 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,(hw->adapter)->netdev,(char *)"Error initializing identification LED\n");
  }
  {
    #line 1080 
    bool branch_0;
    #line 1080 
    struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_hw_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"Initializing the IEEE VLAN\n", .lineno = (unsigned int)1080U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1080 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
    #line 1080 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 1080 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,(hw->adapter)->netdev,(char *)"Initializing the IEEE VLAN\n");
  }
  #line 1081 
  (*(mac->ops.clear_vfta))(hw);
  #line 1088 
  if ((int)e1000e_get_laa_state_82571(hw) != 0) 
                                                #line 1089 
                                                rar_count = (u16)((int)rar_count - 1);
  #line 1090 
  e1000e_init_rx_addrs(hw,(unsigned short)((int)rar_count));
  {
    #line 1093 
    bool branch_1;
    #line 1093 
    struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_hw_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"Zeroing the MTA\n", .lineno = (unsigned int)1093U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1093 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
    #line 1093 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 1093 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,(hw->adapter)->netdev,(char *)"Zeroing the MTA\n");
  }
  #line 1094 
  i = (unsigned short)0U;
  #line 1094 
  while ((int)mac->mta_reg_count > (int)i) {
    #line 1095 
    __ew32(hw,(unsigned long)(((int)i << 2) + 20992),0U);
    #line 1094 
    i = (u16)((int)i + 1);
  }
  #line 1098 
  ret_val = (*(mac->ops.setup_link))(hw);
  #line 1101 
  reg_data = __er32(hw,14376UL);
  #line 1102 
  reg_data = (reg_data & 4269867007U) | 21037056U;
  #line 1104 
  __ew32(hw,14376UL,reg_data);
  #line 1107 
  switch ((unsigned int)mac->type) {
    #line 1108 
    case (unsigned int)2: 
                          #line 1108 
    ;
    #line 1109 
    e1000e_enable_tx_pkt_filtering(hw);
    #line 1111 
    case (unsigned int)3: 
                          #line 1111 
    ;
    #line 1112 
    case (unsigned int)4: 
                          #line 1112 
    ;
    #line 1113 
    reg_data = __er32(hw,23296UL);
    #line 1114 
    reg_data |= 134217728U;
    #line 1115 
    __ew32(hw,23296UL,reg_data);
    #line 1116 
    break;
    #line 1117 
    default: 
             #line 1117 
    ;
    #line 1118 
    reg_data = __er32(hw,14632UL);
    #line 1119 
    reg_data = (reg_data & 4269867007U) | 21037056U;
    #line 1122 
    __ew32(hw,14632UL,reg_data);
    #line 1123 
    break;
  }
  #line 1131 
  e1000_clear_hw_cntrs_82571(hw);
  #line 1133 
  return ret_val;
}

#line 1142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_initialize_hw_bits_82571(struct e1000_hw *hw)
{
  #line 1144 
  u32 reg;
  #line 1147 
  reg = __er32(hw,14376UL);
  #line 1148 
  reg |= 4194304U;
  #line 1149 
  __ew32(hw,14376UL,reg);
  #line 1152 
  reg = __er32(hw,14632UL);
  #line 1153 
  reg |= 4194304U;
  #line 1154 
  __ew32(hw,14632UL,reg);
  #line 1157 
  reg = __er32(hw,14400UL);
  #line 1158 
  reg &= 2281701375U;
  #line 1159 
  switch ((unsigned int)hw->mac.type) {
    #line 1160 
    case (unsigned int)0: 
                          #line 1160 
    ;
    #line 1161 
    case (unsigned int)1: 
                          #line 1161 
    ;
    #line 1162 
    reg |= 125829120U;
    #line 1163 
    break;
    #line 1164 
    case (unsigned int)3: 
                          #line 1164 
    ;
    #line 1165 
    case (unsigned int)4: 
                          #line 1165 
    ;
    #line 1166 
    reg |= 67108864U;
    #line 1167 
    break;
    #line 1168 
    default: 
             #line 1168 
    ;
    #line 1169 
    break;
  }
  #line 1171 
  __ew32(hw,14400UL,reg);
  #line 1174 
  reg = __er32(hw,14656UL);
  #line 1175 
  switch ((unsigned int)hw->mac.type) {
    #line 1176 
    case (unsigned int)0: 
                          #line 1176 
    ;
    #line 1177 
    case (unsigned int)1: 
                          #line 1177 
    ;
    #line 1178 
    reg &= 2684354559U;
    #line 1179 
    reg |= 121634816U;
    #line 1180 
    if ((__er32(hw,1024UL) & 268435456U) != 0U) 
                                                #line 1181 
                                                reg &= 4026531839U; else 
                                                                    #line 1183 
                                                                    reg |= 268435456U;
    #line 1184 
    __ew32(hw,14656UL,reg);
    #line 1185 
    break;
    #line 1186 
    default: 
             #line 1186 
    ;
    #line 1187 
    break;
  }
  #line 1191 
  switch ((unsigned int)hw->mac.type) {
    #line 1192 
    case (unsigned int)2: 
                          #line 1192 
    ;
    #line 1193 
    case (unsigned int)3: 
                          #line 1193 
    ;
    #line 1194 
    case (unsigned int)4: 
                          #line 1194 
    ;
    #line 1195 
    reg = __er32(hw,0UL);
    #line 1196 
    reg &= 3758096383U;
    #line 1197 
    __ew32(hw,0UL,reg);
    #line 1198 
    break;
    #line 1199 
    default: 
             #line 1199 
    ;
    #line 1200 
    break;
  }
  #line 1204 
  switch ((unsigned int)hw->mac.type) {
    #line 1205 
    case (unsigned int)2: 
                          #line 1205 
    ;
    #line 1206 
    case (unsigned int)3: 
                          #line 1206 
    ;
    #line 1207 
    case (unsigned int)4: 
                          #line 1207 
    ;
    #line 1208 
    reg = __er32(hw,24UL);
    #line 1209 
    reg &= 4286578687U;
    #line 1210 
    reg |= 4194304U;
    #line 1211 
    __ew32(hw,24UL,reg);
    #line 1212 
    break;
    #line 1213 
    default: 
             #line 1213 
    ;
    #line 1214 
    break;
  }
  #line 1217 
  if (hw->mac.type == (unsigned int)e1000_82571) {
    #line 1218 
    reg = __er32(hw,4352UL);
    #line 1219 
    reg |= 1U;
    #line 1220 
    __ew32(hw,4352UL,reg);
  }
  #line 1226 
  if (hw->mac.type <= (unsigned int)e1000_82572) {
    #line 1227 
    reg = __er32(hw,24UL);
    #line 1228 
    reg &= 4294443007U;
    #line 1229 
    __ew32(hw,24UL,reg);
  }
  #line 1235 
  if (hw->mac.type <= (unsigned int)e1000_82573) {
    #line 1236 
    reg = __er32(hw,20488UL);
    #line 1237 
    reg |= 196608U;
    #line 1238 
    __ew32(hw,20488UL,reg);
  }
  #line 1242 
  switch ((unsigned int)hw->mac.type) {
    #line 1243 
    case (unsigned int)3: 
                          #line 1243 
    ;
    #line 1244 
    case (unsigned int)4: 
                          #line 1244 
    ;
    #line 1245 
    reg = __er32(hw,23296UL);
    #line 1246 
    reg |= 4194304U;
    #line 1247 
    __ew32(hw,23296UL,reg);
    #line 1255 
    reg = __er32(hw,23396UL);
    #line 1256 
    reg |= 1U;
    #line 1257 
    __ew32(hw,23396UL,reg);
    #line 1258 
    break;
    #line 1259 
    default: 
             #line 1259 
    ;
    #line 1260 
    break;
  }
  #line 1262 
  return;
}

#line 1271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_clear_vfta_82571(struct e1000_hw *hw)
{
  #line 1273 
  u32 offset;
  #line 1274 
  u32 vfta_value = 0U;
  #line 1275 
  u32 vfta_offset = 0U;
  #line 1276 
  u32 vfta_bit_in_reg = 0U;
  #line 1278 
  switch ((unsigned int)hw->mac.type) {
    #line 1279 
    case (unsigned int)2: 
                          #line 1279 
    ;
    #line 1280 
    case (unsigned int)3: 
                          #line 1280 
    ;
    #line 1281 
    case (unsigned int)4: 
                          #line 1281 
    ;
    #line 1282 
    if ((unsigned int)hw->mng_cookie.vlan_id != 0U) {
      #line 1289 
      vfta_offset = (unsigned int)((int)hw->mng_cookie.vlan_id >> 5) & 127U;
      #line 1292 
      vfta_bit_in_reg = (unsigned int)(1UL << ((int)hw->mng_cookie.vlan_id & 31));
    }
    #line 1296 
    break;
    #line 1297 
    default: 
             #line 1297 
    ;
    #line 1298 
    break;
  }
  #line 1300 
  offset = 0U;
  #line 1300 
  while (offset <= 127U) {
    #line 1305 
    if (offset == vfta_offset) 
                               #line 1305 
                               vfta_value = vfta_bit_in_reg; else 
                                                                  #line 1305 
                                                                  vfta_value = 0U;
    #line 1306 
    __ew32(hw,(unsigned long)((offset << 2) + 22016U),vfta_value);
    #line 1307 
    __er32(hw,8UL);
    #line 1300 
    offset ++;
  }
  #line 1309 
  return;
}

#line 1318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static bool e1000_check_mng_mode_82574(struct e1000_hw *hw)
{
  #line 1320 
  u16 data;
  #line 1322 
  e1000_read_nvm(hw,(unsigned short)15,(unsigned short)1,& data);
  #line 1323 
  return (_Bool)(((int)data & 24576) != 0);
}

#line 1332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_led_on_82574(struct e1000_hw *hw)
{
  #line 1334 
  u32 ctrl;
  #line 1335 
  u32 i;
  #line 1337 
  ctrl = hw->mac.ledctl_mode2;
  #line 1338 
  if ((__er32(hw,8UL) & 2U) == 0U) {
    #line 1342 
    i = 0U;
    #line 1342 
    while (i <= 3U) {
      #line 1343 
      if (((hw->mac.ledctl_mode2 >> i * 8U) & 255U) == 14U) 
                                                            #line 1345 
                                                            ctrl = (unsigned int)(64 << i * 8U) | ctrl;
      #line 1342 
      i ++;
    }
  }
  #line 1347 
  __ew32(hw,3584UL,ctrl);
  #line 1349 
  return 0;
}

#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
bool e1000_check_phy_82574(struct e1000_hw *hw)
{
  #line 1362 
  s32 ret_val;
  #line 1360 
  u16 status_1kbt = (unsigned short)0U;
  #line 1361 
  u16 receive_errors = (unsigned short)0U;
  #line 1367 
  ret_val = e1e_rphy(hw,21U,& receive_errors);
  #line 1368 
  if (ret_val != 0) 
                    #line 1369 
                    return (_Bool)0;
  #line 1370 
  if ((unsigned int)receive_errors == 65535U) {
    #line 1371 
    ret_val = e1e_rphy(hw,10U,& status_1kbt);
    #line 1372 
    if (ret_val != 0) 
                      #line 1373 
                      return (_Bool)0;
    #line 1374 
    if (((int)status_1kbt & 255) == 255) 
                                         #line 1376 
                                         return (_Bool)1;
  }
  #line 1379 
  return (_Bool)0;
}

#line 1392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_setup_link_82571(struct e1000_hw *hw)
{
  #line 1398 
  switch ((unsigned int)hw->mac.type) {
    #line 1399 
    case (unsigned int)2: 
                          #line 1399 
    ;
    #line 1400 
    case (unsigned int)3: 
                          #line 1400 
    ;
    #line 1401 
    case (unsigned int)4: 
                          #line 1401 
    ;
    #line 1402 
    if (hw->fc.requested_mode == (unsigned int)e1000_fc_default) 
                                                                 #line 1403 
                                                                 hw->fc.requested_mode = e1000_fc_full;
    #line 1404 
    break;
    #line 1405 
    default: 
             #line 1405 
    ;
    #line 1406 
    break;
  }
  #line 1409 
  return e1000e_setup_link_generic(hw);
}

#line 1420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_setup_copper_link_82571(struct e1000_hw *hw)
{
  #line 1422 
  u32 ctrl;
  #line 1423 
  s32 ret_val;
  #line 1425 
  ctrl = __er32(hw,0UL);
  #line 1426 
  ctrl |= 64U;
  #line 1427 
  ctrl &= 4294961151U;
  #line 1428 
  __ew32(hw,0UL,ctrl);
  #line 1430 
  switch ((unsigned int)hw->phy.type) {
    #line 1431 
    case (unsigned int)2: 
                          #line 1431 
    ;
    #line 1432 
    case (unsigned int)8: 
                          #line 1432 
    ;
    #line 1433 
    ret_val = e1000e_copper_link_setup_m88(hw);
    #line 1434 
    break;
    #line 1435 
    case (unsigned int)4: 
                          #line 1435 
    ;
    #line 1436 
    ret_val = e1000e_copper_link_setup_igp(hw);
    #line 1437 
    break;
    #line 1438 
    default: 
             #line 1438 
    ;
    #line 1439 
    return -2;
  }
  #line 1442 
  if (ret_val != 0) 
                    #line 1443 
                    return ret_val;
  #line 1445 
  return e1000e_setup_copper_link(hw);
}

#line 1455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_setup_fiber_serdes_link_82571(struct e1000_hw *hw)
{
  #line 1457 
  switch ((unsigned int)hw->mac.type) {
    #line 1458 
    case (unsigned int)0: 
                          #line 1458 
    ;
    #line 1459 
    case (unsigned int)1: 
                          #line 1459 
    ;
    #line 1466 
    __ew32(hw,36UL,1024U);
    #line 1467 
    break;
    #line 1468 
    default: 
             #line 1468 
    ;
    #line 1469 
    break;
  }
  #line 1472 
  return e1000e_setup_fiber_serdes_link(hw);
}

#line 1494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_check_for_serdes_link_82571(struct e1000_hw *hw)
{
  #line 1497 
  u32 rxcw;
  #line 1498 
  u32 ctrl;
  #line 1499 
  u32 status;
  #line 1500 
  u32 txcw;
  #line 1501 
  u32 i;
  #line 1496 
  struct e1000_mac_info *mac = & hw->mac;
  #line 1502 
  s32 ret_val = 0;
  #line 1504 
  ctrl = __er32(hw,0UL);
  #line 1505 
  status = __er32(hw,8UL);
  #line 1506 
  __er32(hw,384UL);
  #line 1508 
  usleep_range(10UL,20UL);
  #line 1509 
  rxcw = __er32(hw,384UL);
  #line 1511 
  if ((rxcw & 1073741824U) != 0U && (rxcw & 134217728U) == 0U) 
    #line 1513 
    switch ((unsigned int)mac->serdes_link_state) {
      #line 1514 
      case (unsigned int)2: 
                            #line 1514 
      ;
      #line 1515 
      if ((status & 2U) == 0U) {
        #line 1519 
        mac->serdes_link_state = e1000_serdes_link_autoneg_progress;
        #line 1521 
        mac->serdes_has_link = (_Bool)0;
        {
          #line 1522 
          bool branch;
          #line 1522 
          struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"e1000e", .function = (char *)"e1000_check_for_serdes_link_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"AN_UP     -> AN_PROG\n", .lineno = (unsigned int)1522U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1522 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
          #line 1522 
          if ((long)((long)((int)branch != 0)) != 0L) 
                                                      #line 1522 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug455,(hw->adapter)->netdev,(char *)"AN_UP     -> AN_PROG\n");
        }
      }
      else 
           #line 1524 
           mac->serdes_has_link = (_Bool)1;
      #line 1526 
      break;
      #line 1528 
      case (unsigned int)3: 
                            #line 1528 
      ;
      #line 1534 
      if ((rxcw & 536870912U) != 0U) {
        #line 1536 
        __ew32(hw,376UL,mac->txcw);
        #line 1537 
        __ew32(hw,0UL,ctrl & 4294967231U);
        #line 1538 
        mac->serdes_link_state = e1000_serdes_link_autoneg_progress;
        #line 1540 
        mac->serdes_has_link = (_Bool)0;
        {
          #line 1541 
          bool branch_0;
          #line 1541 
          struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"e1000e", .function = (char *)"e1000_check_for_serdes_link_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"FORCED_UP -> AN_PROG\n", .lineno = (unsigned int)1541U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1541 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
          #line 1541 
          if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                        #line 1541 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug456,(hw->adapter)->netdev,(char *)"FORCED_UP -> AN_PROG\n");
        }
      }
      else 
           #line 1543 
           mac->serdes_has_link = (_Bool)1;
      #line 1545 
      break;
      #line 1547 
      case (unsigned int)1: 
                            #line 1547 
      ;
      #line 1548 
      if ((rxcw & 536870912U) != 0U) 
        #line 1553 
        if ((status & 2U) != 0U) {
          #line 1554 
          mac->serdes_link_state = e1000_serdes_link_autoneg_complete;
          {
            #line 1556 
            bool branch_1;
            #line 1556 
            struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"e1000e", .function = (char *)"e1000_check_for_serdes_link_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"AN_PROG   -> AN_UP\n", .lineno = (unsigned int)1556U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 1556 
            branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
            #line 1556 
            if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                          #line 1556 
                                                          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,(hw->adapter)->netdev,(char *)"AN_PROG   -> AN_UP\n");
          }
          #line 1557 
          mac->serdes_has_link = (_Bool)1;
        }
        else {
          #line 1560 
          mac->serdes_link_state = e1000_serdes_link_down;
          {
            #line 1562 
            bool branch_2;
            #line 1562 
            struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"e1000e", .function = (char *)"e1000_check_for_serdes_link_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"AN_PROG   -> DOWN\n", .lineno = (unsigned int)1562U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 1562 
            branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
            #line 1562 
            if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                          #line 1562 
                                                          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug458,(hw->adapter)->netdev,(char *)"AN_PROG   -> DOWN\n");
          }
        }
      else {
        #line 1569 
        __ew32(hw,376UL,mac->txcw & 2147483647U);
        #line 1570 
        ctrl |= 65U;
        #line 1571 
        __ew32(hw,0UL,ctrl);
        #line 1574 
        ret_val = e1000e_config_fc_after_link_up(hw);
        #line 1575 
        if (ret_val != 0) {
          {
            #line 1576 
            bool branch_3;
            #line 1576 
            struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"e1000e", .function = (char *)"e1000_check_for_serdes_link_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"Error config flow control\n", .lineno = (unsigned int)1576U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 1576 
            branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
            #line 1576 
            if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                          #line 1576 
                                                          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug459,(hw->adapter)->netdev,(char *)"Error config flow control\n");
          }
          #line 1577 
          break;
        }
        #line 1579 
        mac->serdes_link_state = e1000_serdes_link_forced_up;
        #line 1581 
        mac->serdes_has_link = (_Bool)1;
        {
          #line 1582 
          bool branch_4;
          #line 1582 
          struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"e1000e", .function = (char *)"e1000_check_for_serdes_link_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"AN_PROG   -> FORCED_UP\n", .lineno = (unsigned int)1582U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1582 
          branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
          #line 1582 
          if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                        #line 1582 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug460,(hw->adapter)->netdev,(char *)"AN_PROG   -> FORCED_UP\n");
        }
      }
      #line 1584 
      break;
      #line 1586 
      case (unsigned int)0: 
                            #line 1586 
      ;
      #line 1587 
      default: 
               #line 1587 
      ;
      #line 1592 
      __ew32(hw,376UL,mac->txcw);
      #line 1593 
      __ew32(hw,0UL,ctrl & 4294967231U);
      #line 1594 
      mac->serdes_link_state = e1000_serdes_link_autoneg_progress;
      #line 1596 
      mac->serdes_has_link = (_Bool)0;
      {
        #line 1597 
        bool branch_5;
        #line 1597 
        struct _ddebug __UNIQUE_ID_ddebug461 = {.modname = (char *)"e1000e", .function = (char *)"e1000_check_for_serdes_link_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"DOWN      -> AN_PROG\n", .lineno = (unsigned int)1597U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1597 
        branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug461.key.dd_key_false.key,(_Bool)0);
        #line 1597 
        if ((long)((long)((int)branch_5 != 0)) != 0L) 
                                                      #line 1597 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug461,(hw->adapter)->netdev,(char *)"DOWN      -> AN_PROG\n");
      }
      #line 1598 
      break;
    }
  else 
    #line 1601 
    if ((rxcw & 1073741824U) == 0U) {
      #line 1602 
      mac->serdes_has_link = (_Bool)0;
      #line 1603 
      mac->serdes_link_state = e1000_serdes_link_down;
      {
        #line 1604 
        bool branch_6;
        #line 1604 
        struct _ddebug __UNIQUE_ID_ddebug462 = {.modname = (char *)"e1000e", .function = (char *)"e1000_check_for_serdes_link_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"ANYSTATE  -> DOWN\n", .lineno = (unsigned int)1604U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1604 
        branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug462.key.dd_key_false.key,(_Bool)0);
        #line 1604 
        if ((long)((long)((int)branch_6 != 0)) != 0L) 
                                                      #line 1604 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug462,(hw->adapter)->netdev,(char *)"ANYSTATE  -> DOWN\n");
      }
    }
    else {
      #line 1610 
      i = 0U;
      #line 1610 
      while (i <= 4U) {
        #line 1611 
        usleep_range(10UL,20UL);
        #line 1612 
        rxcw = __er32(hw,384UL);
        #line 1613 
        if ((rxcw & 1073741824U) != 0U && (rxcw & 536870912U) != 0U) 
          #line 1615 
          goto __Cont;
        #line 1617 
        if ((rxcw & 134217728U) != 0U) {
          #line 1618 
          mac->serdes_has_link = (_Bool)0;
          #line 1619 
          mac->serdes_link_state = e1000_serdes_link_down;
          {
            #line 1621 
            bool branch_7;
            #line 1621 
            struct _ddebug __UNIQUE_ID_ddebug463 = {.modname = (char *)"e1000e", .function = (char *)"e1000_check_for_serdes_link_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"ANYSTATE  -> DOWN\n", .lineno = (unsigned int)1621U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 1621 
            branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug463.key.dd_key_false.key,(_Bool)0);
            #line 1621 
            if ((long)((long)((int)branch_7 != 0)) != 0L) 
                                                          #line 1621 
                                                          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug463,(hw->adapter)->netdev,(char *)"ANYSTATE  -> DOWN\n");
          }
          #line 1622 
          break;
        }
        #line 1610 
        __Cont: 
                #line 1610 
        i ++;
      }
      #line 1626 
      if (i == 5U) {
        #line 1627 
        txcw = __er32(hw,376UL);
        #line 1628 
        txcw |= 2147483648U;
        #line 1629 
        __ew32(hw,376UL,txcw);
        #line 1630 
        mac->serdes_link_state = e1000_serdes_link_autoneg_progress;
        #line 1632 
        mac->serdes_has_link = (_Bool)0;
        {
          #line 1633 
          bool branch_8;
          #line 1633 
          struct _ddebug __UNIQUE_ID_ddebug464 = {.modname = (char *)"e1000e", .function = (char *)"e1000_check_for_serdes_link_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"ANYSTATE  -> AN_PROG\n", .lineno = (unsigned int)1633U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1633 
          branch_8 = arch_static_branch(& __UNIQUE_ID_ddebug464.key.dd_key_false.key,(_Bool)0);
          #line 1633 
          if ((long)((long)((int)branch_8 != 0)) != 0L) 
                                                        #line 1633 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug464,(hw->adapter)->netdev,(char *)"ANYSTATE  -> AN_PROG\n");
        }
      }
    }
  #line 1638 
  return ret_val;
}

#line 1649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_valid_led_default_82571(struct e1000_hw *hw, u16 *data)
{
  #line 1651 
  s32 ret_val;
  #line 1653 
  ret_val = e1000_read_nvm(hw,(unsigned short)4,(unsigned short)1,data);
  #line 1654 
  if (ret_val != 0) {
    {
      #line 1655 
      bool branch;
      #line 1655 
      struct _ddebug __UNIQUE_ID_ddebug465 = {.modname = (char *)"e1000e", .function = (char *)"e1000_valid_led_default_82571", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)1655U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1655 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug465.key.dd_key_false.key,(_Bool)0);
      #line 1655 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1655 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug465,(hw->adapter)->netdev,(char *)"NVM Read Error\n");
    }
    #line 1656 
    return ret_val;
  }
  #line 1659 
  switch ((unsigned int)hw->mac.type) {
    #line 1660 
    case (unsigned int)2: 
                          #line 1660 
    ;
    #line 1661 
    case (unsigned int)3: 
                          #line 1661 
    ;
    #line 1662 
    case (unsigned int)4: 
                          #line 1662 
    ;
    #line 1663 
    if ((unsigned int)*data == 63302U) 
                                       #line 1664 
                                       *data = (unsigned short)6161U;
    #line 1665 
    break;
    #line 1666 
    default: 
             #line 1666 
    ;
    #line 1667 
    if ((unsigned int)*data + 65535U > 65533U) 
                                               #line 1669 
                                               *data = (unsigned short)35089U;
    #line 1670 
    break;
  }
  #line 1673 
  return 0;
}

#line 1682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
bool e1000e_get_laa_state_82571(struct e1000_hw *hw)
{
  #line 1684 
  if (hw->mac.type != (unsigned int)e1000_82571) 
                                                 #line 1685 
                                                 return (_Bool)0;
  #line 1687 
  return hw->dev_spec.e82571.laa_is_present;
}

#line 1697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
void e1000e_set_laa_state_82571(struct e1000_hw *hw, bool state)
{
  #line 1699 
  if (hw->mac.type != (unsigned int)e1000_82571) 
                                                 #line 1700 
                                                 return;
  #line 1702 
  hw->dev_spec.e82571.laa_is_present = state;
  #line 1705 
  if ((int)state != 0) 
                       #line 1712 
                       (*(hw->mac.ops.rar_set))(hw,(u8 *)(& hw->mac.addr),(unsigned int)((int)hw->mac.rar_entry_count + -1));
  #line 1714 
  return;
}

#line 1726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_fix_nvm_checksum_82571(struct e1000_hw *hw)
{
  #line 1729 
  s32 ret_val;
  #line 1730 
  u16 data;
  #line 1728 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 1732 
  if (nvm->type != (unsigned int)e1000_nvm_flash_hw) 
                                                     #line 1733 
                                                     return 0;
  #line 1738 
  ret_val = e1000_read_nvm(hw,(unsigned short)16,(unsigned short)1,& data);
  #line 1739 
  if (ret_val != 0) 
                    #line 1740 
                    return ret_val;
  #line 1742 
  if (((int)data & 16) == 0) {
    #line 1750 
    ret_val = e1000_read_nvm(hw,(unsigned short)35,(unsigned short)1,& data);
    #line 1751 
    if (ret_val != 0) 
                      #line 1752 
                      return ret_val;
    #line 1754 
    if (((int)data & 32768) == 0) {
      #line 1755 
      data = (unsigned short)((unsigned int)data | 32768U);
      #line 1756 
      ret_val = e1000_write_nvm(hw,(unsigned short)35,(unsigned short)1,& data);
      #line 1757 
      if (ret_val != 0) 
                        #line 1758 
                        return ret_val;
      #line 1759 
      ret_val = e1000e_update_nvm_checksum(hw);
      #line 1760 
      if (ret_val != 0) 
                        #line 1761 
                        return ret_val;
    }
  }
  #line 1765 
  return 0;
}

#line 1772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_read_mac_addr_82571(struct e1000_hw *hw)
{
  #line 1774 
  if (hw->mac.type == (unsigned int)e1000_82571) {
    #line 1775 
    s32 ret_val;
    #line 1781 
    ret_val = e1000_check_alt_mac_addr_generic(hw);
    #line 1782 
    if (ret_val != 0) 
                      #line 1783 
                      return ret_val;
  }
  #line 1786 
  return e1000_read_mac_addr_generic(hw);
}

#line 1796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_power_down_phy_copper_82571(struct e1000_hw *hw)
{
  #line 1798 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1799 
  struct e1000_mac_info *mac = & hw->mac;
  #line 1801 
  if (phy->ops.check_reset_block == (s32 (*)(struct e1000_hw *))0) 
                                                                   #line 1802 
                                                                   return;
  #line 1805 
  if (! (*(mac->ops.check_mng_mode))(hw)) {
    #line 1805 
    if ((*(phy->ops.check_reset_block))(hw) == 0) 
                                                  #line 1806 
                                                  e1000_power_down_phy_copper(hw);
  }
  #line 1807 
  return;
}

#line 1815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_clear_hw_cntrs_82571(struct e1000_hw *hw)
{
  #line 1817 
  e1000e_clear_hw_cntrs_base(hw);
  #line 1819 
  __er32(hw,16476UL);
  #line 1820 
  __er32(hw,16480UL);
  #line 1821 
  __er32(hw,16484UL);
  #line 1822 
  __er32(hw,16488UL);
  #line 1823 
  __er32(hw,16492UL);
  #line 1824 
  __er32(hw,16496UL);
  #line 1825 
  __er32(hw,16600UL);
  #line 1826 
  __er32(hw,16604UL);
  #line 1827 
  __er32(hw,16608UL);
  #line 1828 
  __er32(hw,16612UL);
  #line 1829 
  __er32(hw,16616UL);
  #line 1830 
  __er32(hw,16620UL);
  #line 1832 
  __er32(hw,16388UL);
  #line 1833 
  __er32(hw,16396UL);
  #line 1834 
  __er32(hw,16436UL);
  #line 1835 
  __er32(hw,16444UL);
  #line 1836 
  __er32(hw,16632UL);
  #line 1837 
  __er32(hw,16636UL);
  #line 1839 
  __er32(hw,16564UL);
  #line 1840 
  __er32(hw,16568UL);
  #line 1841 
  __er32(hw,16572UL);
  #line 1843 
  __er32(hw,16640UL);
  #line 1844 
  __er32(hw,16676UL);
  #line 1846 
  __er32(hw,16644UL);
  #line 1847 
  __er32(hw,16648UL);
  #line 1848 
  __er32(hw,16652UL);
  #line 1849 
  __er32(hw,16656UL);
  #line 1850 
  __er32(hw,16664UL);
  #line 1851 
  __er32(hw,16668UL);
  #line 1852 
  __er32(hw,16672UL);
  #line 1853 
  return;
}

#line 1855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static struct e1000_mac_operations e82571_mac_ops = {.id_led_init = & e1000e_id_led_init_generic, .cleanup_led = & e1000e_cleanup_led_generic, .clear_hw_cntrs = & e1000_clear_hw_cntrs_82571, .clear_vfta = & e1000_clear_vfta_82571, .get_bus_info = & e1000e_get_bus_info_pcie, .set_lan_id = & e1000_set_lan_id_multi_port_pcie, .led_off = & e1000e_led_off_generic, .update_mc_addr_list = & e1000e_update_mc_addr_list_generic, .reset_hw = & e1000_reset_hw_82571, .init_hw = & e1000_init_hw_82571, .setup_link = & e1000_setup_link_82571, .setup_led = & e1000e_setup_led_generic, .write_vfta = & e1000_write_vfta_generic, .config_collision_dist = & e1000e_config_collision_dist_generic, .rar_set = & e1000e_rar_set_generic, .read_mac_addr = & e1000_read_mac_addr_82571, .rar_get_count = & e1000e_rar_get_count_generic};
#line 1880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static struct e1000_phy_operations e82_phy_ops_igp = {.acquire = & e1000_get_hw_semaphore_82571, .check_polarity = & e1000_check_polarity_igp, .check_reset_block = & e1000e_check_reset_block_generic, .force_speed_duplex = & e1000e_phy_force_speed_duplex_igp, .get_cfg_done = & e1000_get_cfg_done_82571, .get_cable_length = & e1000e_get_cable_length_igp_2, .get_info = & e1000e_get_phy_info_igp, .read_reg = & e1000e_read_phy_reg_igp, .release = & e1000_put_hw_semaphore_82571, .reset = & e1000e_phy_hw_reset_generic, .set_d0_lplu_state = & e1000_set_d0_lplu_state_82571, .set_d3_lplu_state = & e1000e_set_d3_lplu_state, .write_reg = & e1000e_write_phy_reg_igp};
#line 1898  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static struct e1000_phy_operations e82_phy_ops_m88 = {.acquire = & e1000_get_hw_semaphore_82571, .check_polarity = & e1000_check_polarity_m88, .check_reset_block = & e1000e_check_reset_block_generic, .commit = & e1000e_phy_sw_reset, .force_speed_duplex = & e1000e_phy_force_speed_duplex_m88, .get_cfg_done = & e1000e_get_cfg_done_generic, .get_cable_length = & e1000e_get_cable_length_m88, .get_info = & e1000e_get_phy_info_m88, .read_reg = & e1000e_read_phy_reg_m88, .release = & e1000_put_hw_semaphore_82571, .reset = & e1000e_phy_hw_reset_generic, .set_d0_lplu_state = & e1000_set_d0_lplu_state_82571, .set_d3_lplu_state = & e1000e_set_d3_lplu_state, .write_reg = & e1000e_write_phy_reg_m88};
#line 1916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static struct e1000_phy_operations e82_phy_ops_bm = {.acquire = & e1000_get_hw_semaphore_82571, .check_polarity = & e1000_check_polarity_m88, .check_reset_block = & e1000e_check_reset_block_generic, .commit = & e1000e_phy_sw_reset, .force_speed_duplex = & e1000e_phy_force_speed_duplex_m88, .get_cfg_done = & e1000e_get_cfg_done_generic, .get_cable_length = & e1000e_get_cable_length_m88, .get_info = & e1000e_get_phy_info_m88, .read_reg = & e1000e_read_phy_reg_bm2, .release = & e1000_put_hw_semaphore_82571, .reset = & e1000e_phy_hw_reset_generic, .set_d0_lplu_state = & e1000_set_d0_lplu_state_82571, .set_d3_lplu_state = & e1000e_set_d3_lplu_state, .write_reg = & e1000e_write_phy_reg_bm2};
#line 1934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
static struct e1000_nvm_operations e82571_nvm_ops = {.acquire = & e1000_acquire_nvm_82571, .read = & e1000e_read_nvm_eerd, .release = & e1000_release_nvm_82571, .reload = & e1000e_reload_nvm_generic, .update = & e1000_update_nvm_checksum_82571, .valid_led_default = & e1000_valid_led_default_82571, .validate = & e1000_validate_nvm_checksum_82571, .write = & e1000_write_nvm_82571};
#line 1945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
struct e1000_info e1000_82571_info = {.flags = 6490284U, .flags2 = 72U, .pba = 38U, .max_hw_frame_size = 9234U, .get_variants = & e1000_get_variants_82571, .mac_ops = & e82571_mac_ops, .phy_ops = & e82_phy_ops_igp, .nvm_ops = & e82571_nvm_ops};
#line 1966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
struct e1000_info e1000_82572_info = {.mac = e1000_82572, .flags = 4260012U, .flags2 = 72U, .pba = 38U, .max_hw_frame_size = 9234U, .get_variants = & e1000_get_variants_82571, .mac_ops = & e82571_mac_ops, .phy_ops = & e82_phy_ops_igp, .nvm_ops = & e82571_nvm_ops};
#line 1984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
struct e1000_info e1000_82573_info = {.mac = e1000_82573, .flags = 67661U, .flags2 = 136U, .pba = 20U, .max_hw_frame_size = 1522U, .get_variants = & e1000_get_variants_82571, .mac_ops = & e82571_mac_ops, .phy_ops = & e82_phy_ops_m88, .nvm_ops = & e82571_nvm_ops};
#line 2002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
struct e1000_info e1000_82574_info = {.mac = e1000_82574, .flags = 85165U, .flags2 = 18120U, .pba = 32U, .max_hw_frame_size = 9234U, .get_variants = & e1000_get_variants_82571, .mac_ops = & e82571_mac_ops, .phy_ops = & e82_phy_ops_bm, .nvm_ops = & e82571_nvm_ops};
#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/82571.c"
struct e1000_info e1000_82583_info = {.mac = e1000_82583, .flags = 84141U, .flags2 = 17544U, .pba = 32U, .max_hw_frame_size = 9234U, .get_variants = & e1000_get_variants_82571, .mac_ops = & e82571_mac_ops, .phy_ops = & e82_phy_ops_bm, .nvm_ops = & e82571_nvm_ops};
#line 651  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/82571.i.aux"
static void cif_mutex_lock_swflag_mutex(struct mutex *lock)
{
  #line 654 
  ldv_mutex_model_lock(lock,(char *)"swflag_mutex");
  #line 655 
  return;
}

#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/82571.i.aux"
static void cif_mutex_unlock_swflag_mutex(struct mutex *lock)
{
  #line 661 
  ldv_mutex_model_unlock(lock,(char *)"swflag_mutex");
  #line 662 
  return;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.h"
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.c"
s32 e1000e_mng_write_dhcp_info(struct e1000_hw *hw, u8 *buffer, u16 length);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.h"
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.c"
bool e1000e_enable_mng_pass_thru(struct e1000_hw *hw);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.c"
static u8 e1000_calculate_checksum(u8 *buffer, u32 length)
{
  #line 16 
  u32 i;
  #line 17 
  u8 sum = (unsigned char)0U;
  #line 19 
  if (buffer == (u8 *)0U) 
                          #line 20 
                          return (unsigned char)0U;
  #line 22 
  i = 0U;
  #line 22 
  while (i < length) {
    #line 23 
    sum = (unsigned char)((int)*(buffer + (unsigned long)i) + (int)sum);
    #line 22 
    i ++;
  }
  #line 25 
  return (unsigned char)(- ((int)sum));
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.c"
static s32 e1000_mng_enable_host_if(struct e1000_hw *hw)
{
  #line 40 
  u32 hicr;
  #line 41 
  u8 i;
  #line 43 
  if (! hw->mac.arc_subsystem_valid) {
    {
      #line 44 
      bool branch;
      #line 44 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"e1000e", .function = (char *)"e1000_mng_enable_host_if", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.c", .format = (char *)"ARC subsystem not valid.\n", .lineno = (unsigned int)44U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 44 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 44 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 44 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,(hw->adapter)->netdev,(char *)"ARC subsystem not valid.\n");
    }
    #line 45 
    return -11;
  }
  #line 49 
  hicr = __er32(hw,36608UL);
  #line 50 
  if ((hicr & 1U) == 0U) {
    {
      #line 51 
      bool branch_0;
      #line 51 
      struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"e1000e", .function = (char *)"e1000_mng_enable_host_if", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.c", .format = (char *)"E1000_HOST_EN bit disabled.\n", .lineno = (unsigned int)51U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 51 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
      #line 51 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 51 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,(hw->adapter)->netdev,(char *)"E1000_HOST_EN bit disabled.\n");
    }
    #line 52 
    return -11;
  }
  #line 55 
  i = (unsigned char)0U;
  #line 55 
  while ((unsigned int)i <= 9U) {
    #line 56 
    hicr = __er32(hw,36608UL);
    #line 57 
    if ((hicr & 2U) == 0U) 
                           #line 58 
                           break;
    #line 59 
    __const_udelay(4295000UL);
    #line 55 
    i = (u8)((int)i + 1);
  }
  #line 62 
  if ((unsigned int)i == 10U) {
    {
      #line 63 
      bool branch_1;
      #line 63 
      struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"e1000e", .function = (char *)"e1000_mng_enable_host_if", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.c", .format = (char *)"Previous command timeout failed.\n", .lineno = (unsigned int)63U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 63 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
      #line 63 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 63 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,(hw->adapter)->netdev,(char *)"Previous command timeout failed.\n");
    }
    #line 64 
    return -11;
  }
  #line 67 
  return 0;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.c"
bool e1000e_check_mng_mode_generic(struct e1000_hw *hw)
{
  #line 79 
  u32 fwsm = __er32(hw,23380UL);
  #line 81 
  return (_Bool)((fwsm & 14U) == 6U);
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.c"
bool e1000e_enable_tx_pkt_filtering(struct e1000_hw *hw)
{
  #line 96 
  u32 offset;
  #line 97 
  s32 ret_val;
  #line 97 
  s32 hdr_csum;
  #line 97 
  s32 csum;
  #line 98 
  u8 i;
  #line 98 
  u8 len;
  #line 94 
  struct e1000_host_mng_dhcp_cookie *hdr = & hw->mng_cookie;
  #line 95 
  u32 *buffer = (u32 *)(& hw->mng_cookie);
  #line 100 
  hw->mac.tx_pkt_filtering = (_Bool)1;
  #line 103 
  if (! (*(hw->mac.ops.check_mng_mode))(hw)) {
    #line 104 
    hw->mac.tx_pkt_filtering = (_Bool)0;
    #line 105 
    return hw->mac.tx_pkt_filtering;
  }
  #line 111 
  ret_val = e1000_mng_enable_host_if(hw);
  #line 112 
  if (ret_val != 0) {
    #line 113 
    hw->mac.tx_pkt_filtering = (_Bool)0;
    #line 114 
    return hw->mac.tx_pkt_filtering;
  }
  #line 118 
  len = (unsigned char)4U;
  #line 119 
  offset = 444U;
  #line 120 
  i = (unsigned char)0U;
  #line 120 
  while ((int)i < (int)len) {
    #line 121 
    *(buffer + (unsigned long)i) = readl(hw->hw_addr + ((unsigned long)(((unsigned int)i + offset) << 2) + (unsigned long)34816U));
    #line 120 
    i = (u8)((int)i + 1);
  }
  #line 123 
  hdr_csum = (int)hdr->checksum;
  #line 124 
  hdr->checksum = (unsigned char)0U;
  #line 125 
  csum = (int)e1000_calculate_checksum((u8 *)hdr,16U);
  #line 131 
  if (hdr_csum != csum || hdr->signature != 1414349129U) {
    #line 132 
    hw->mac.tx_pkt_filtering = (_Bool)1;
    #line 133 
    return hw->mac.tx_pkt_filtering;
  }
  #line 137 
  if (((int)hdr->status & 1) == 0) 
                                   #line 138 
                                   hw->mac.tx_pkt_filtering = (_Bool)0;
  #line 140 
  return hw->mac.tx_pkt_filtering;
}

#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.c"
static s32 e1000_mng_write_cmd_header(struct e1000_hw *hw, struct e1000_host_mng_command_header *hdr)
{
  #line 153 
  u16 i;
  #line 153 
  u16 length = (unsigned short)8U;
  #line 157 
  hdr->checksum = e1000_calculate_checksum((u8 *)hdr,(unsigned int)length);
  #line 159 
  length = (unsigned short)((int)length >> 2);
  #line 161 
  i = (unsigned short)0U;
  #line 161 
  while ((int)i < (int)length) {
    #line 162 
    __ew32(hw,(unsigned long)(((int)i << 2) + 34816),*((u32 *)hdr + (unsigned long)i));
    #line 163 
    __er32(hw,8UL);
    #line 161 
    i = (u16)((int)i + 1);
  }
  #line 166 
  return 0;
}

#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.c"
static s32 e1000_mng_host_if_write(struct e1000_hw *hw, u8 *buffer, u16 length, u16 offset, u8 *sum)
{
  #line 184 
  u8 *tmp;
  #line 187 
  u16 remaining;
  #line 187 
  u16 i;
  #line 187 
  u16 j;
  #line 187 
  u16 prev_bytes;
  #line 185 
  u8 *bufptr = buffer;
  #line 186 
  u32 data = 0U;
  #line 191 
  if ((unsigned int)length == 0U || (int)offset + (int)length > 1784) 
    #line 192 
    return -4;
  #line 194 
  tmp = (u8 *)(& data);
  #line 195 
  prev_bytes = (unsigned short)((unsigned int)offset & 3U);
  #line 196 
  offset = (unsigned short)((int)offset >> 2);
  #line 198 
  if ((unsigned int)prev_bytes != 0U) {
    #line 199 
    data = readl(hw->hw_addr + ((unsigned long)((int)offset << 2) + (unsigned long)34816U));
    #line 200 
    j = prev_bytes;
    #line 200 
    while ((unsigned int)j <= 3U) {
      {
        #line 201 
        u8 *tmp_0;
        #line 201 
        tmp_0 = bufptr;
        #line 201 
        bufptr ++;
        #line 201 
        *(tmp + (unsigned long)j) = *tmp_0;
        #line 202 
        *sum = (unsigned char)((int)*sum + (int)*(tmp + (unsigned long)j));
      }
      #line 200 
      j = (u16)((int)j + 1);
    }
    #line 204 
    __ew32(hw,(unsigned long)(((int)offset << 2) + 34816),data);
    #line 205 
    length = (unsigned short)(((int)prev_bytes - (int)j) + (int)length);
    #line 206 
    offset = (u16)((int)offset + 1);
  }
  #line 209 
  remaining = (unsigned short)((unsigned int)length & 3U);
  #line 210 
  length = (unsigned short)((int)length - (int)remaining);
  #line 213 
  length = (unsigned short)((int)length >> 2);
  #line 218 
  i = (unsigned short)0U;
  #line 218 
  while ((int)i < (int)length) {
    #line 219 
    j = (unsigned short)0U;
    #line 219 
    while ((unsigned int)j <= 3U) {
      {
        #line 220 
        u8 *tmp_1;
        #line 220 
        tmp_1 = bufptr;
        #line 220 
        bufptr ++;
        #line 220 
        *(tmp + (unsigned long)j) = *tmp_1;
        #line 221 
        *sum = (unsigned char)((int)*sum + (int)*(tmp + (unsigned long)j));
      }
      #line 219 
      j = (u16)((int)j + 1);
    }
    #line 224 
    __ew32(hw,(unsigned long)((((int)offset + (int)i) << 2) + 34816),data);
    #line 218 
    i = (u16)((int)i + 1);
  }
  #line 226 
  if ((unsigned int)remaining != 0U) {
    #line 227 
    j = (unsigned short)0U;
    #line 227 
    while ((unsigned int)j <= 3U) {
      #line 228 
      if ((int)j < (int)remaining) {
        #line 229 
        u8 *tmp_2;
        #line 229 
        tmp_2 = bufptr;
        #line 229 
        bufptr ++;
        #line 229 
        *(tmp + (unsigned long)j) = *tmp_2;
      }
      else 
           #line 231 
           *(tmp + (unsigned long)j) = (unsigned char)0U;
      #line 233 
      *sum = (unsigned char)((int)*sum + (int)*(tmp + (unsigned long)j));
      #line 227 
      j = (u16)((int)j + 1);
    }
    #line 235 
    __ew32(hw,(unsigned long)((((int)offset + (int)i) << 2) + 34816),data);
  }
  #line 238 
  return 0;
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.c"
s32 e1000e_mng_write_dhcp_info(struct e1000_hw *hw, u8 *buffer, u16 length)
{
  #line 251 
  struct e1000_host_mng_command_header hdr;
  #line 252 
  s32 ret_val;
  #line 253 
  u32 hicr;
  #line 255 
  hdr.command_id = (unsigned char)64U;
  #line 256 
  hdr.command_length = length;
  #line 257 
  hdr.reserved1 = (unsigned short)0U;
  #line 258 
  hdr.reserved2 = (unsigned short)0U;
  #line 259 
  hdr.checksum = (unsigned char)0U;
  #line 262 
  ret_val = e1000_mng_enable_host_if(hw);
  #line 263 
  if (ret_val != 0) 
                    #line 264 
                    return ret_val;
  #line 267 
  ret_val = e1000_mng_host_if_write(hw,buffer,(unsigned short)((int)length),(unsigned short)8,& hdr.checksum);
  #line 269 
  if (ret_val != 0) 
                    #line 270 
                    return ret_val;
  #line 273 
  ret_val = e1000_mng_write_cmd_header(hw,& hdr);
  #line 274 
  if (ret_val != 0) 
                    #line 275 
                    return ret_val;
  #line 278 
  hicr = __er32(hw,36608UL);
  #line 279 
  __ew32(hw,36608UL,hicr | 2U);
  #line 281 
  return 0;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/manage.c"
bool e1000e_enable_mng_pass_thru(struct e1000_hw *hw)
{
  #line 293 
  u32 manc;
  #line 294 
  u32 fwsm;
  #line 294 
  u32 factps;
  #line 296 
  manc = __er32(hw,22560UL);
  #line 298 
  if ((manc & 131072U) == 0U) 
                              #line 299 
                              return (_Bool)0;
  #line 301 
  if ((int)hw->mac.has_fwsm != 0) {
    #line 302 
    fwsm = __er32(hw,23380UL);
    #line 303 
    factps = __er32(hw,23344UL);
    #line 305 
    if ((factps & 536870912U) == 0U && (fwsm & 14U) == 4U) 
                                                           #line 308 
                                                           return (_Bool)1;
  }
  else 
    #line 309 
    if ((unsigned int)hw->mac.type + 4294967293U <= 1U) {
      #line 311 
      u16 data;
      #line 312 
      s32 ret_val;
      #line 314 
      factps = __er32(hw,23344UL);
      #line 315 
      ret_val = e1000_read_nvm(hw,(unsigned short)15,(unsigned short)1,& data);
      #line 316 
      if (ret_val != 0) 
                        #line 317 
                        return (_Bool)0;
      #line 319 
      if ((factps & 536870912U) == 0U && ((int)data & 24576) == 16384) 
        #line 322 
        return (_Bool)1;
    }
    else 
      #line 323 
      if ((manc & 1U) != 0U && (manc & 2U) == 0U) 
                                                  #line 325 
                                                  return (_Bool)1;
  #line 328 
  return (_Bool)0;
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 16 
#line 16 
struct task_struct *ldv_get_current(void);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 265  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 307  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 272  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 279  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_write((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/swab.h"
__inline static __u16 __swab16p(__u16 *p)
{
  #line 166 
  return __builtin_bswap16((unsigned short)((int)*p));
}

#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/swab.h"
__inline static void __swab16s(__u16 *p)
{
  #line 235 
  *p = __swab16p(p);
  #line 236 
  return;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 487 
void print_hex_dump(char *, char *, int, int, int, void *, size_t, bool);
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 286  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 15 
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 88 
#line 300  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static size_t cif_strlen(char *s);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 15 
void __cmpxchg_wrong_size(void);
#line 17 
#line 17 
void __xadd_wrong_size(void);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_2263 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_dec_and_test(atomic_t *v)
{
  #line 125 
  bool c;
  #line 126 
  ldv_inline_asm();
  #line 125 
  return c;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_fetch_add(int i, atomic_t *v)
{
  #line 184 
  int __ret;
  #line 184 
  __ret = i;
  #line 184 
  switch (4UL) {
    #line 184 
    case (unsigned long)1: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)2: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)4: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)8: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    default: 
             #line 184 
    ;
    #line 184 
    __xadd_wrong_size();
  }
  #line 184 
  return __ret;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
  #line 200 
  bool success;
  {
    #line 200 
    int *_old = old;
    #line 200 
    int __old = *_old;
    #line 200 
    int __new = new;
    #line 200 
    switch (4UL) {
      #line 200 
      case (unsigned long)1: 
                             #line 200 
      ;
      {
        #line 200 
        u8 *__ptr = (u8 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      case (unsigned long)2: 
                             #line 200 
      ;
      {
        #line 200 
        u16 *__ptr_0 = (u16 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      case (unsigned long)4: 
                             #line 200 
      ;
      {
        #line 200 
        u32 *__ptr_1 = (u32 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      case (unsigned long)8: 
                             #line 200 
      ;
      {
        #line 200 
        u64 *__ptr_2 = (u64 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      default: 
               #line 200 
      ;
      #line 200 
      __cmpxchg_wrong_size();
    }
    #line 200 
    if ((long)(! success) != 0L) 
                                 #line 200 
                                 *_old = __old;
    }
  #line 200 
  return (_Bool)((long)((long)((int)success != 0)) != 0L);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_write((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_fetch_add(int i, atomic_t *v)
{
  #line 111 
  kasan_check_write((void *)v,4U);
  #line 112 
  return arch_atomic_fetch_add(i,v);
}

#line 237 
#line 335  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void atomic_inc(atomic_t *v);
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
  #line 693 
  kasan_check_write((void *)v,4U);
  #line 694 
  kasan_check_write((void *)old,4U);
  #line 695 
  return arch_atomic_try_cmpxchg(v,old,new);
}

#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_dec_and_test(atomic_t *v)
{
  #line 747 
  kasan_check_write((void *)v,4U);
  #line 748 
  return arch_atomic_dec_and_test(v);
}

#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static int atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
  #line 1086 
  int c = atomic_read(v);
  #line 1088 
  while (! ((long)(c == u) != 0L)) {
    #line 1091 
    if (atomic_try_cmpxchg(v,& c,c + a)) 
                                         #line 1088 
                                         break;
  }
  #line 1093 
  return c;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static bool atomic_add_unless(atomic_t *v, int a, int u)
{
  #line 1111 
  ;
  #line 1111 
  return (_Bool)(atomic_fetch_add_unless(v,a,u) != u);
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 1030  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_spin_lock_stats64_lock_of_e1000_adapter(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 1039  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_spin_unlock_stats64_lock_of_e1000_adapter(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 967  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_spin_unlock_irqrestore_systim_lock_of_e1000_adapter(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 958 
static void cif___ldv_spin_lock_systim_lock_of_e1000_adapter(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 22 
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 25 
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 22 
void *ldv_vzalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static s64 ktime_to_ns(ktime_t kt)
{
  #line 99 
  return kt;
}

#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static ktime_t ns_to_ktime(u64 ns)
{
  #line 267 
  return (long long)ns;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 43 
void ktime_get_real_ts64(struct timespec64 *);
#line 68 
#line 68 
ktime_t ktime_get_with_offset(enum tk_offsets);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
__inline static ktime_t ktime_get_real(void)
{
  #line 79 
  return ktime_get_with_offset((enum tk_offsets)TK_OFFS_REAL);
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 976  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 1022  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 209 
unsigned long round_jiffies(unsigned long);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 554 
#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_2345 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_44.__anonCompField___anonunion_186_39.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
#line 206 
void *ioremap(resource_size_t, unsigned long);
#line 209 
#line 209 
void iounmap(void *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 1000  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void *cif_vzalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 1007  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_vfree(void *addr);
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 527 
struct page *alloc_pages_current(gfp_t, unsigned int);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 532 
  return alloc_pages_current(gfp_mask,order);
}

#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
#line 114 
void refcount_warn_saturate(refcount_t *, enum refcount_saturation_type);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_add(int i, refcount_t *r)
{
  #line 188 
  int old = atomic_fetch_add(i,& r->refs);
  #line 190 
  if ((long)(old == 0) != 0L) 
                              #line 191 
                              refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_UAF);
  else 
    #line 192 
    if ((long)(old < 0) != 0L || (long)(old + i < 0) != 0L) 
                                                            #line 193 
                                                            refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_OVF);
  #line 194 
  return;
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_inc(refcount_t *r)
{
  #line 228 
  refcount_add(1,r);
  #line 229 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
#line 104 
int device_wakeup_enable(struct device *);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_pm_set_driver_flags(struct device *dev, u32 flags)
{
  #line 1483 
  dev->power.driver_flags = flags;
  #line 1484 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 984  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 992  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 236 
bool disable_hardirq(unsigned int);
#line 239 
#line 239 
void enable_irq(unsigned int);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 137 
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static void pagefault_disabled_inc(void)
{
  #line 168 
  (ldv_get_current()->pagefault_disabled) ++;
  #line 169 
  return;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static void pagefault_disabled_dec(void)
{
  #line 173 
  (ldv_get_current()->pagefault_disabled) --;
  #line 174 
  return;
}

#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static void pagefault_disable(void)
{
  #line 185 
  pagefault_disabled_inc();
  #line 186 
  ldv_inline_asm();
  #line 187 
  return;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static void pagefault_enable(void)
{
  #line 195 
  ldv_inline_asm();
  #line 200 
  pagefault_disabled_dec();
  #line 201 
  return;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 607 
#line 608  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 629  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_channel_offline(struct pci_dev *pdev)
{
  #line 490 
  return pdev->error_state != 1U;
}

#line 1087 
#line 1087 
int pci_write_config_word(struct pci_dev *, int, u16);
#line 1090 
#line 1090 
int pcie_capability_read_word(struct pci_dev *, int, u16 *);
#line 1092 
#line 1092 
int pcie_capability_write_word(struct pci_dev *, int, u16);
#line 1094 
#line 1094 
int pcie_capability_clear_and_set_word(struct pci_dev *, int, u16, u16);
#line 1111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pcie_capability_clear_word(struct pci_dev *dev, int pos, u16 clear)
{
  #line 1114 
  return pcie_capability_clear_and_set_word(dev,pos,
                                         (unsigned short)((int)clear),
                                         (unsigned short)0);
}

#line 1133 
#line 1133 
int pci_enable_device_mem(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1161 
#line 1161 
void pci_clear_master(struct pci_dev *);
#line 1202 
#line 1202 
int pci_select_bars(struct pci_dev *, unsigned long);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1237 
#line 1237 
int pci_enable_wake(struct pci_dev *, pci_power_t, bool);
#line 1239 
#line 1239 
int pci_prepare_to_sleep(struct pci_dev *);
#line 1241 
#line 1241 
bool pci_dev_run_wake(struct pci_dev *);
#line 1287 
#line 1287 
int pci_request_selected_regions_exclusive(struct pci_dev *, int, char *);
#line 1288 
#line 1288 
void pci_release_selected_regions(struct pci_dev *, int);
#line 1346 
#line 1080  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1088  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 12 
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
#line 31 
#line 31 
void __page_ref_mod_and_test(struct page *, int, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count(struct page *page)
{
  #line 67 
  return atomic_read(& page->_refcount);
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_dec_and_test(struct page *page)
{
  #line 139 
  int ret = (int)atomic_dec_and_test(& page->_refcount);
  #line 141 
  if ((int)static_key_false(& __tracepoint_page_ref_mod_and_test.key) != 0) 
    #line 142 
    __page_ref_mod_and_test(page,-1,ret);
  #line 143 
  return ret;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int put_page_testzero(struct page *page)
{
  #line 592 
  if ((long)(page_ref_count(page) == 0) != 0L) {
    #line 592 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 593 
    ldv_inline_asm();
    #line 594 
    ldv_inline_asm();
    #line 595 
    ldv_inline_asm();
    #line 592 
    ;
  }
  #line 593 
  return page_ref_dec_and_test(page);
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 736 
#line 736 
void __put_page(struct page *);
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static enum zone_type page_zonenum(struct page *page)
{
  #line 937 
  return (enum zone_type)((unsigned int)(page->flags >> 51UL) & 7U);
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_zone_device_page(struct page *page)
{
  #line 943 
  return (_Bool)(page_zonenum(page) == (unsigned int)ZONE_DEVICE);
}

#line 955 
#line 955 
void __put_devmap_managed_page(struct page *);
#line 956 
#line 956 
extern struct static_key_false devmap_managed_key;
#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool put_devmap_managed_page(struct page *page)
{
  #line 959 
  bool branch;
  #line 959 
  branch = arch_static_branch(& devmap_managed_key.key,(_Bool)0);
  #line 959 
  if ((long)((long)((int)branch != 0)) == 0L) 
                                              #line 960 
                                              return (_Bool)0;
  #line 961 
  if (! is_zone_device_page(page)) 
                                   #line 962 
                                   return (_Bool)0;
  #line 963 
  switch ((unsigned int)(page->__anonCompField_page_44.__anonCompField___anonunion_186_43.pgmap)->type) {
    #line 964 
    case (unsigned int)1: 
                          #line 964 
    ;
    #line 965 
    case (unsigned int)2: 
                          #line 965 
    ;
    #line 966 
    __put_devmap_managed_page(page);
    #line 967 
    return (_Bool)1;
    #line 968 
    default: 
             #line 968 
    ;
    #line 969 
    break;
  }
  #line 971 
  return (_Bool)0;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void put_page(struct page *page)
{
  #line 1023 
  page = compound_head(page);
  #line 1031 
  if ((int)put_devmap_managed_page(page) != 0) 
                                               #line 1032 
                                               return;
  #line 1034 
  if (put_page_testzero(page) != 0) 
                                    #line 1035 
                                    __put_page(page);
  #line 1036 
  return;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  #line 1375 
  return (_Bool)(page->__anonCompField_page_44.__anonCompField___anonunion_186_32.index == 18446744073709551615UL);
}

#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1431 
void pci_disable_msi(struct pci_dev *);
#line 1433 
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1436 
#line 1436 
int pci_enable_msi(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1547 
#line 1547 
int pci_disable_link_state(struct pci_dev *, int);
#line 1548 
#line 1548 
int pci_disable_link_state_locked(struct pci_dev *, int);
#line 1633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_release_mem_regions(struct pci_dev *pdev)
{
  #line 1635 
  ;
  #line 1635 
  pci_release_selected_regions(pdev,pci_select_bars(pdev,512UL));
  #line 1637 
  return;
}

#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page)
{
  #line 93 
  __preempt_count_add(1);
  #line 94 
  ldv_inline_asm();
  #line 94 
  pagefault_disable();
  #line 95 
  return lowmem_page_address(page);
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr)
{
  #line 101 
  pagefault_enable();
  #line 104 
  ldv_inline_asm();
  #line 102 
  __preempt_count_sub(1);
  #line 104 
  return;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_2653 __u;
  #line 93 
  union __anonunion___u_2655 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 99 
#line 99 
void dql_reset(struct dql *);
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
#line 244 
int net_ratelimit(void);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  #line 25 
  ldv_inline_asm();
  #line 30 
  return (unsigned short)(~ sum >> 16);
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 90 
  ldv_inline_asm();
  #line 98 
  return sum;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 117 
  return csum_fold(csum_tcpudp_nofold(saddr,daddr,len,(unsigned char)((int)proto),sum));
}

#line 180 
#line 180 
__sum16 csum_ipv6_magic(struct in6_addr *, struct in6_addr *, __u32, __u8, __wsum);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  #line 337 
  frag->bv_len = size;
  #line 338 
  return;
}

#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1126 
#line 1126 
int __skb_pad(struct sk_buff *, int, bool);
#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
  #line 1407 
  return & ((struct skb_shared_info *)skb_end_pointer(skb))->hwtstamps;
}

#line 1580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_get(struct sk_buff *skb)
{
  #line 1582 
  refcount_inc(& skb->users);
  #line 1583 
  return skb;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2105 
  skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
  #line 2112 
  frag->bv_page = page;
  #line 2113 
  frag->bv_offset = (unsigned int)off;
  #line 2114 
  skb_frag_size_set(frag,(unsigned int)size);
  #line 2116 
  page = compound_head(page);
  #line 2117 
  if ((int)page_is_pfmemalloc(page) != 0) 
                                          #line 2118 
                                          skb->pfmemalloc = (unsigned char)1U;
  #line 2119 
  return;
}

#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2138 
  __skb_fill_page_desc(skb,i,page,off,size);
  #line 2139 
  ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
  #line 2140 
  return;
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_tail_pointer(struct sk_buff *skb)
{
  #line 2158 
  skb->tail = (unsigned int)(skb->data - skb->head);
  #line 2159 
  return;
}

#line 2161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_tail_pointer(struct sk_buff *skb, int offset)
{
  #line 2163 
  skb_reset_tail_pointer(skb);
  #line 2164 
  skb->tail += (unsigned int)offset;
  #line 2165 
  return;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_tailroom(struct sk_buff *skb)
{
  #line 2312 
  int tmp_0;
  #line 2312 
  if ((int)skb_is_nonlinear(skb) == 0) 
                                       #line 2312 
                                       tmp_0 = (int)(skb->end - skb->tail); else 
                                                                    #line 2312 
                                                                    tmp_0 = 0;
  #line 2312 
  return tmp_0;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_checksum_start_offset(struct sk_buff *skb)
{
  #line 2551 
  ;
  #line 2551 
  return (int)((unsigned int)skb->__anonCompField_sk_buff_94.__anonCompField___anonunion_526_93.csum_start - skb_headroom(skb));
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff *skb)
{
  #line 2576 
  ;
  #line 2576 
  return (int)(skb_network_header(skb) - skb->data);
}

#line 2637 
#line 2637 
int ___pskb_trim(struct sk_buff *, unsigned int);
#line 2639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_length(struct sk_buff *skb, unsigned int len)
{
  #line 2641 
  int __ret_warn_on;
  {
    #line 2641 
    __ret_warn_on = (int)skb_is_nonlinear(skb) != 0;
    #line 2641 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 2642 
      ldv_inline_asm();
      #line 2643 
      ldv_inline_asm();
    }
    }
  #line 2641 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 2642 
                                                return;
  #line 2643 
  skb->len = len;
  #line 2644 
  skb_set_tail_pointer(skb,(int)len);
  #line 2645 
  return;
}

#line 2647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_trim(struct sk_buff *skb, unsigned int len)
{
  #line 2649 
  __skb_set_length(skb,len);
  #line 2650 
  return;
}

#line 2652 
#line 2652 
void skb_trim(struct sk_buff *, unsigned int);
#line 2654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __pskb_trim(struct sk_buff *skb, unsigned int len)
{
  #line 2656 
  if (skb->data_len != 0U) {
    #line 2657 
    return ___pskb_trim(skb,len);
  }
  #line 2658 
  __skb_trim(skb,len);
  #line 2659 
  return 0;
}

#line 2662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int pskb_trim(struct sk_buff *skb, unsigned int len)
{
  #line 2664 
  int tmp_0;
  #line 2664 
  if (skb->len > len) 
                      #line 2664 
                      tmp_0 = __pskb_trim(skb,len); else 
                                                         #line 2664 
                                                         tmp_0 = 0;
  #line 2664 
  return tmp_0;
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length, gfp_t gfp)
{
  #line 2801 
  struct sk_buff *skb = __netdev_alloc_skb(dev,length,gfp);
  #line 2805 
  return skb;
}

#line 2820 
#line 2820 
struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);
#line 2822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *napi_alloc_skb(struct napi_struct *napi, unsigned int length)
{
  #line 2825 
  return __napi_alloc_skb(napi,length,2592U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned(skb));
}

#line 3186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_put_padto(struct sk_buff *skb, unsigned int len, bool free_on_error)
{
  #line 3189 
  unsigned int size = skb->len;
  #line 3191 
  if ((long)(size < len) != 0L) {
    #line 3192 
    len -= size;
    #line 3193 
    if (__skb_pad(skb,(int)len,(_Bool)((bool)((int)free_on_error) != 0)) != 0) 
      #line 3194 
      return -12;
    #line 3195 
    __skb_put(skb,len);
  }
  #line 3197 
  return 0;
}

#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  #line 3212 
  return __skb_put_padto(skb,len,(_Bool)1);
}

#line 3622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data_offset(struct sk_buff *skb, int offset, void *from, unsigned int len)
{
  #line 3627 
  memcpy((void *)(skb->data + (unsigned long)offset),from,(unsigned long)len);
  #line 3628 
  return;
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 4396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso_v6(struct sk_buff *skb)
{
  #line 4398 
  ;
  #line 4398 
  return (_Bool)((((struct skb_shared_info *)skb_end_pointer(skb))->gso_type & 16U) != 0U);
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit_0(0L,& n->state);
  #line 517 
  cif_clear_bit_0(3L,& n->state);
  #line 518 
  return;
}

#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_synchronize(struct napi_struct *n)
{
  #line 531 
  while (1) {
    #line 531 
    if (! ((int)test_bit(0L,& n->state) != 0)) 
                                               #line 531 
                                               break;
    #line 532 
    msleep(1U);
  }
  #line 536 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2679 
#line 1064  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_0(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_start_queue(struct net_device *dev)
{
  #line 3117 
  netif_tx_start_queue(netdev_get_tx_queue(dev,0U));
  #line 3118 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  #line 3141 
  netif_tx_wake_queue(netdev_get_tx_queue(dev,0U));
  #line 3142 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_queue_stopped(struct net_device *dev)
{
  #line 3187 
  return netif_tx_queue_stopped(netdev_get_tx_queue(dev,0U));
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit_0(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_sent_queue(struct net_device *dev, unsigned int bytes)
{
  #line 3290 
  ;
  #line 3290 
  netdev_tx_sent_queue(netdev_get_tx_queue(dev,0U),bytes);
  #line 3291 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_set_bit(1L,& dev_queue->state) != 0) 
                                                         #line 3321 
                                                         netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_completed_queue(struct net_device *dev, unsigned int pkts, unsigned int bytes)
{
  #line 3338 
  ;
  #line 3338 
  ;
  #line 3338 
  netdev_tx_completed_queue(netdev_get_tx_queue(dev,0U),pkts,bytes);
  #line 3339 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit_0(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_reset_queue(struct net_device *dev_queue)
{
  #line 3358 
  netdev_tx_reset_queue(netdev_get_tx_queue(dev_queue,0U));
  #line 3359 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3616 
#line 3616 
void __dev_kfree_skb_irq(struct sk_buff *, enum skb_free_reason);
#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_irq(struct sk_buff *skb)
{
  #line 3640 
  __dev_kfree_skb_irq(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3641 
  return;
}

#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_consume_skb_any(struct sk_buff *skb)
{
  #line 3655 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  #line 3656 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3808 
#line 3808 
unsigned long dev_trans_start(struct net_device *);
#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_device_present(struct net_device *dev)
{
  #line 3878 
  return test_bit(1L,& dev->state);
}

#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  #line 3926 
  if ((unsigned int)debug_value > 31U) 
                                       #line 3927 
                                       return (unsigned int)default_msg_enable_bits;
  #line 3928 
  if (debug_value == 0) 
                        #line 3929 
                        return 0U;
  #line 3931 
  return (1U << debug_value) + 4294967295U;
}

#line 4131 
#line 1056  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1072  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 4529 
#line 4529 
netdev_features_t passthru_features_check(struct sk_buff *, struct net_device *, netdev_features_t);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 1048  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int __tcp_hdrlen(struct tcphdr *th)
{
  #line 31 
  return (unsigned int)((int)th->doff * 4);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff *skb)
{
  #line 36 
  return __tcp_hdrlen(tcp_hdr(skb));
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_qos.h"
#line 148 
void pm_qos_add_request(struct pm_qos_request *, int, s32);
#line 150 
#line 150 
void pm_qos_update_request(struct pm_qos_request *, s32);
#line 154 
#line 154 
void pm_qos_remove_request(struct pm_qos_request *);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
#line 38 
int __pm_runtime_idle(struct device *, int);
#line 40 
#line 40 
int __pm_runtime_resume(struct device *, int);
#line 42 
#line 42 
int pm_schedule_suspend(struct device *, unsigned int);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static void pm_runtime_get_noresume(struct device *dev)
{
  #line 70 
  atomic_inc(& dev->power.usage_count);
  #line 71 
  return;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static void pm_runtime_put_noidle(struct device *dev)
{
  #line 75 
  atomic_add_unless(& dev->power.usage_count,-1,0);
  #line 76 
  return;
}

#line 83 
#line 1014  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static bool cif_pm_runtime_suspended(struct device *dev);
#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_resume(struct device *dev)
{
  #line 201 
  return __pm_runtime_resume(dev,0);
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_get_sync(struct device *dev)
{
  #line 226 
  return __pm_runtime_resume(dev,4);
}

#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_put(struct device *dev)
{
  #line 231 
  return __pm_runtime_idle(dev,5);
}

#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_put_sync(struct device *dev)
{
  #line 242 
  return __pm_runtime_idle(dev,4);
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/aer.h"
#line 45 
int pci_enable_pcie_error_reporting(struct pci_dev *);
#line 46 
#line 46 
int pci_disable_pcie_error_reporting(struct pci_dev *);
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
#line 99 
void timecounter_init(struct timecounter *, struct cyclecounter *, u64);
#line 127 
#line 127 
u64 timecounter_cyc2time(struct timecounter *, u64);
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
__inline static void ptp_read_system_prets(struct ptp_system_timestamp *sts)
{
  #line 268 
  if (sts != (struct ptp_system_timestamp *)0) 
                                               #line 269 
                                               ktime_get_real_ts64(& sts->pre_ts);
  #line 270 
  return;
}

#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
__inline static void ptp_read_system_postts(struct ptp_system_timestamp *sts)
{
  #line 274 
  if (sts != (struct ptp_system_timestamp *)0) 
                                               #line 275 
                                               ktime_get_real_ts64(& sts->post_ts);
  #line 276 
  return;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
  #line 53 
  return (struct mii_ioctl_data *)(& rq->ifr_ifru);
}

#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.h"
#line 40 
void e1000e_reset_adaptive(struct e1000_hw *hw);
#line 42 
#line 42 
void e1000e_update_adaptive(struct e1000_hw *hw);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.h"
#line 54 
s32 e1000e_read_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 *data);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.h"
#line 11 
s32 e1000_read_pba_string_generic(struct e1000_hw *hw, u8 *pba_num, u32 pba_num_size);
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 3488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
s32 e1000e_get_base_timinca(struct e1000_adapter *adapter, u32 *timinca);
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
char e1000e_driver_name[7U];
#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
char e1000e_driver_version[8U];
#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 465 
void e1000e_check_options(struct e1000_adapter *adapter);
#line 466 
#line 466 
void e1000e_set_ethtool_ops(struct net_device *netdev);
#line 468 
#line 4598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
int e1000e_open(struct net_device *netdev);
#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 4706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
int e1000e_close(struct net_device *netdev);
#line 470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 4203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_up(struct e1000_adapter *adapter);
#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 4250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_down(struct e1000_adapter *adapter, bool reset);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 4312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_reinit_locked(struct e1000_adapter *adapter);
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 3945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_reset(struct e1000_adapter *adapter);
#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 3769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_power_up_phy(struct e1000_adapter *adapter);
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 2356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
int e1000e_setup_rx_resources(struct e1000_ring *rx_ring);
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 2322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
int e1000e_setup_tx_resources(struct e1000_ring *tx_ring);
#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 2456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_free_rx_resources(struct e1000_ring *rx_ring);
#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 2435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_free_tx_resources(struct e1000_ring *tx_ring);
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 5975  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats);
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 2046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_set_interrupt_capability(struct e1000_adapter *adapter);
#line 482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 2028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_reset_interrupt_capability(struct e1000_adapter *adapter);
#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 2258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_get_hw_control(struct e1000_adapter *adapter);
#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 2284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_release_hw_control(struct e1000_adapter *adapter);
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 2608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_write_itr(struct e1000_adapter *adapter, u32 itr);
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
unsigned int copybreak;
#line 502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 1395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
struct e1000_info e1000_es2_info;
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
#line 504 
void e1000e_ptp_init(struct e1000_adapter *adapter);
#line 505 
#line 505 
void e1000e_ptp_remove(struct e1000_adapter *adapter);
#line 507 
#line 4369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
u64 e1000e_read_systim(struct e1000_adapter *adapter, struct ptp_system_timestamp *sts);
#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1000e_read_mac_addr(struct e1000_hw *hw)
{
  #line 539 
  if (hw->mac.ops.read_mac_addr != (s32 (*)(struct e1000_hw *))0) {
    #line 540 
    return (*(hw->mac.ops.read_mac_addr))(hw);
  }
  #line 542 
  return e1000_read_mac_addr_generic(hw);
}

#line 545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1000_validate_nvm_checksum(struct e1000_hw *hw)
{
  #line 547 
  return (*(hw->nvm.ops.validate))(hw);
}

#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1000_get_phy_info(struct e1000_hw *hw)
{
  #line 569 
  return (*(hw->phy.ops.get_info))(hw);
}

#line 579 
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
s32 __ew32_prepare(struct e1000_hw *hw);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
char e1000e_driver_name[7U] = {(char)'e', (char)'1', (char)'0', (char)'0', (char)'0', (char)'e'};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
char e1000e_driver_version[8U] = {(char)'3', (char)'.', (char)'2', (char)'.', (char)'6'};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int debug = -1;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static struct e1000_info *e1000_info_tbl[14U] = {& e1000_82571_info, & e1000_82572_info, & e1000_82573_info, & e1000_82574_info, & e1000_82583_info, & e1000_es2_info, & e1000_ich8_info, & e1000_ich9_info, & e1000_ich10_info, & e1000_pch_info, & e1000_pch2_info, & e1000_pch_lpt_info, & e1000_pch_spt_info, & e1000_pch_cnp_info};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static struct e1000_reg_info e1000_reg_info_tbl[34U] = {{.name = (char *)"CTRL"}, {.ofs = 8U, .name = (char *)"STATUS"}, {.ofs = 24U, .name = (char *)"CTRL_EXT"}, {.ofs = 192U, .name = (char *)"ICR"}, {.ofs = 256U, .name = (char *)"RCTL"}, {.ofs = 10248U, .name = (char *)"RDLEN"}, {.ofs = 10256U, .name = (char *)"RDH"}, {.ofs = 10264U, .name = (char *)"RDT"}, {.ofs = 10272U, .name = (char *)"RDTR"}, {.ofs = 10280U, .name = (char *)"RXDCTL"}, {.ofs = 8200U, .name = (char *)"ERT"}, {.ofs = 10240U, .name = (char *)"RDBAL"}, {.ofs = 10244U, .name = (char *)"RDBAH"}, {.ofs = 9232U, .name = (char *)"RDFH"}, {.ofs = 9240U, .name = (char *)"RDFT"}, {.ofs = 9248U, .name = (char *)"RDFHS"}, {.ofs = 9256U, .name = (char *)"RDFTS"}, {.ofs = 9264U, .name = (char *)"RDFPC"}, {.ofs = 1024U, .name = (char *)"TCTL"}, {.ofs = 14336U, .name = (char *)"TDBAL"}, {.ofs = 14340U, .name = (char *)"TDBAH"}, {.ofs = 14344U, .name = (char *)"TDLEN"}, {.ofs = 14352U, .name = (char *)"TDH"}, {.ofs = 14360U, .name = (char *)"TDT"}, {.ofs = 14368U, .name = (char *)"TIDV"}, {.ofs = 14376U, .name = (char *)"TXDCTL"}, {.ofs = 14380U, .name = (char *)"TADV"}, {.ofs = 14400U, .name = (char *)"TARC"}, {.ofs = 13328U, .name = (char *)"TDFH"}, {.ofs = 13336U, .name = (char *)"TDFT"}, {.ofs = 13344U, .name = (char *)"TDFHS"}, {.ofs = 13352U, .name = (char *)"TDFTS"}, {.ofs = 13360U, .name = (char *)"TDFPC"}};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
s32 __ew32_prepare(struct e1000_hw *hw)
{
  #line 124 
  s32 i = 2000;
  #line 126 
  while (1) {
    #line 126 
    if ((__er32(hw,23380UL) & 16777216U) != 0U) {
      #line 126 
      i --;
      #line 126 
      if (! (i != 0)) 
                      #line 126 
                      break;
    }
    else 
         #line 126 
         break;
    #line 127 
    __const_udelay(214750UL);
  }
  #line 129 
  return i;
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void __ew32(struct e1000_hw *hw, unsigned long reg, u32 val)
{
  #line 134 
  if (((unsigned long)(hw->adapter)->flags2 & 2048UL) != 0UL) 
                                                              #line 135 
                                                              __ew32_prepare(hw);
  #line 137 
  writel(val,hw->hw_addr + reg);
  #line 138 
  return;
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_regdump(struct e1000_hw *hw, struct e1000_reg_info *reginfo)
{
  #line 148 
  char rname[16U];
  #line 149 
  u32 regs[8U];
  #line 147 
  int n = 0;
  #line 151 
  switch (reginfo->ofs) {
    #line 152 
    case (u32)10280: 
                     #line 152 
    ;
    #line 153 
    n = 0;
    #line 153 
    while (n <= 1) {
      #line 154 
      int tmp;
      #line 154 
      if (n <= 3) 
                  #line 154 
                  tmp = n * 256 + 10280; else 
                                              #line 154 
                                              tmp = n * 64 + 49192;
      #line 154 
      ;
      #line 154 
      regs[n] = __er32(hw,(unsigned long)tmp);
      #line 153 
      n ++;
    }
    #line 155 
    break;
    #line 156 
    case (u32)14376: 
                     #line 156 
    ;
    #line 157 
    n = 0;
    #line 157 
    while (n <= 1) {
      #line 158 
      int tmp_0;
      #line 158 
      if (n <= 3) 
                  #line 158 
                  tmp_0 = n * 256 + 14376; else 
                                                #line 158 
                                                tmp_0 = n * 64 + 57384;
      #line 158 
      ;
      #line 158 
      regs[n] = __er32(hw,(unsigned long)tmp_0);
      #line 157 
      n ++;
    }
    #line 159 
    break;
    #line 160 
    case (u32)14400: 
                     #line 160 
    ;
    #line 161 
    n = 0;
    #line 161 
    while (n <= 1) {
      #line 162 
      regs[n] = __er32(hw,(unsigned long)(n * 256 + 14400));
      #line 161 
      n ++;
    }
    #line 163 
    break;
    #line 164 
    default: 
             #line 164 
    ;
    #line 165 
    ;
    #line 165 
    printk((char *)"\001",reginfo->name,__er32(hw,(unsigned long)reginfo->ofs));
    #line 167 
    return;
  }
  #line 170 
  snprintf((char *)(& rname),16UL,(char *)"%s%s",reginfo->name,(char *)"[0-1]");
  #line 171 
  printk((char *)"\001",(char *)(& rname),regs[0],regs[1]);
  #line 172 
  return;
}

#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_dump_ps_pages(struct e1000_adapter *adapter, struct e1000_buffer *bi)
{
  #line 177 
  int i;
  #line 178 
  struct e1000_ps_page *ps_page;
  #line 180 
  i = 0;
  #line 180 
  while (adapter->rx_ps_pages > (unsigned int)i) {
    #line 181 
    ps_page = bi->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.ps_pages + (unsigned long)i;
    #line 183 
    if (ps_page->page != (struct page *)0) {
      #line 184 
      printk((char *)"\001",i);
      #line 185 
      print_hex_dump((char *)"\001",(char *)"",1,16,1,lowmem_page_address(ps_page->page),4096UL,(_Bool)1);
    }
    #line 180 
    i ++;
  }
  #line 189 
  return;
}

#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_dump(struct e1000_adapter *adapter)
{
  #line 200 
  struct e1000_reg_info *reginfo;
  #line 202 
  struct e1000_tx_desc *tx_desc;
  #line 206 
  struct my_u0 *u0;
  #line 207 
  struct e1000_buffer *buffer_info;
  #line 209 
  union e1000_rx_desc_packet_split *rx_desc_ps;
  #line 210 
  union e1000_rx_desc_extended *rx_desc;
  #line 216 
  struct my_u1 *u1;
  #line 217 
  u32 staterr;
  #line 198 
  struct net_device *netdev = adapter->netdev;
  #line 199 
  struct e1000_hw *hw = & adapter->hw;
  #line 201 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  #line 208 
  struct e1000_ring *rx_ring = adapter->rx_ring;
  #line 218 
  int i = 0;
  #line 220 
  if ((adapter->msg_enable & 8192U) == 0U) 
                                           #line 221 
                                           return;
  #line 224 
  if (netdev != (struct net_device *)0) {
    #line 225 
    _dev_info(& (adapter->pdev)->dev,(char *)"Net device Info\n");
    #line 226 
    printk((char *)"\001");
    #line 227 
    ;
    #line 227 
    ;
    #line 227 
    printk((char *)"\001",(char *)(& netdev->name),netdev->state,dev_trans_start(netdev));
  }
  #line 232 
  _dev_info(& (adapter->pdev)->dev,(char *)"Register Dump\n");
  #line 233 
  printk((char *)"\001");
  #line 234 
  reginfo = (struct e1000_reg_info *)(& e1000_reg_info_tbl);
  #line 234 
  while (reginfo->name != (char *)0) {
    #line 236 
    e1000_regdump(hw,reginfo);
    #line 235 
    reginfo ++;
  }
  #line 240 
  if (netdev == (struct net_device *)0) 
                                        #line 241 
                                        return;
  else {
    #line 240 
    if (! netif_running(netdev)) 
                                 #line 241 
                                 return;
  }
  #line 243 
  _dev_info(& (adapter->pdev)->dev,(char *)"Tx Ring Summary\n");
  #line 244 
  printk((char *)"\001");
  #line 245 
  buffer_info = tx_ring->buffer_info + (unsigned long)tx_ring->next_to_clean;
  #line 246 
  printk((char *)"\001",0,(int)tx_ring->next_to_use,(int)tx_ring->next_to_clean,buffer_info->dma,(int)buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.length,(int)buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.next_to_watch,(unsigned long long)buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.time_stamp);
  #line 254 
  if ((adapter->msg_enable & 1024U) == 0U) 
                                           #line 255 
                                           goto rx_ring_summary;
  #line 257 
  _dev_info(& (adapter->pdev)->dev,(char *)"Tx Ring Dump\n");
  #line 286 
  printk((char *)"\001");
  #line 287 
  printk((char *)"\001");
  #line 288 
  printk((char *)"\001");
  #line 289 
  i = 0;
  #line 289 
  while (tx_ring->desc != (void *)0 && tx_ring->count > (unsigned int)i) {
    {
      #line 302 
      int tmp_1;
      #line 290 
      char *next_desc;
      #line 302 
      int tmp_2;
      #line 291 
      tx_desc = (struct e1000_tx_desc *)tx_ring->desc + (unsigned long)i;
      #line 292 
      buffer_info = tx_ring->buffer_info + (unsigned long)i;
      #line 293 
      u0 = (struct my_u0 *)tx_desc;
      #line 294 
      if ((int)tx_ring->next_to_use == i && (int)tx_ring->next_to_clean == i) 
        #line 295 
        next_desc = (char *)" NTC/U";
      else 
        #line 296 
        if ((int)tx_ring->next_to_use == i) 
                                            #line 297 
                                            next_desc = (char *)" NTU";
        else 
          #line 298 
          if ((int)tx_ring->next_to_clean == i) 
                                                #line 299 
                                                next_desc = (char *)" NTC"; else 
                                                                    #line 301 
                                                                    next_desc = (char *)"";
      #line 302 
      ;
      #line 302 
      ;
      #line 302 
      ;
      #line 302 
      ;
      #line 302 
      ;
      #line 302 
      ;
      #line 302 
      ;
      #line 302 
      ;
      #line 302 
      ;
      #line 302 
      if ((u0->b & 536870912ULL) != 0ULL) {
        #line 302 
        if ((u0->b & 1048576ULL) != 0ULL) 
                                          #line 302 
                                          tmp_1 = 100; else 
                                                            #line 302 
                                                            tmp_1 = 99;
        #line 302 
        tmp_2 = tmp_1;
      }
      else 
           #line 302 
           tmp_2 = 108;
      #line 302 
      printk((char *)"\001",tmp_2,i,u0->a,u0->b,buffer_info->dma,(int)buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.length,(int)buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.next_to_watch,(unsigned long long)buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.time_stamp,buffer_info->skb,next_desc);
      #line 313 
      if ((adapter->msg_enable & 4096U) != 0U && buffer_info->skb != (struct sk_buff *)0) 
        #line 314 
        print_hex_dump((char *)"\001",(char *)"",1,16,1,(void *)(buffer_info->skb)->data,(unsigned long)(buffer_info->skb)->len,(_Bool)1);
    }
    #line 289 
    i ++;
  }
  #line 320 
  rx_ring_summary: 
                   #line 320 
  ;
  #line 321 
  _dev_info(& (adapter->pdev)->dev,(char *)"Rx Ring Summary\n");
  #line 322 
  printk((char *)"\001");
  #line 323 
  printk((char *)"\001",0,(int)rx_ring->next_to_use,(int)rx_ring->next_to_clean);
  #line 327 
  if ((adapter->msg_enable & 2048U) == 0U) 
                                           #line 328 
                                           return;
  #line 330 
  _dev_info(& (adapter->pdev)->dev,(char *)"Rx Ring Dump\n");
  #line 331 
  switch (adapter->rx_ps_pages) {
    #line 332 
    case (unsigned int)1: 
                          #line 332 
    ;
    #line 333 
    case (unsigned int)2: 
                          #line 333 
    ;
    #line 334 
    case (unsigned int)3: 
                          #line 334 
    ;
    #line 347 
    printk((char *)"\001");
    #line 359 
    printk((char *)"\001");
    #line 360 
    i = 0;
    #line 360 
    while (rx_ring->count > (unsigned int)i) {
      {
        #line 361 
        char *next_desc_0;
        #line 362 
        buffer_info = rx_ring->buffer_info + (unsigned long)i;
        #line 363 
        rx_desc_ps = (union e1000_rx_desc_packet_split *)rx_ring->desc + (unsigned long)i;
        #line 364 
        u1 = (struct my_u1 *)rx_desc_ps;
        #line 365 
        staterr = rx_desc_ps->wb.middle.status_error;
        #line 368 
        if ((int)rx_ring->next_to_use == i) 
                                            #line 369 
                                            next_desc_0 = (char *)" NTU";
        else 
          #line 370 
          if ((int)rx_ring->next_to_clean == i) 
                                                #line 371 
                                                next_desc_0 = (char *)" NTC"; else 
                                                                    #line 373 
                                                                    next_desc_0 = (char *)"";
        #line 375 
        if ((staterr & 1U) != 0U) 
                                  #line 377 
                                  printk((char *)"\001",(char *)"RWB",i,u1->a,u1->b,u1->c,u1->d,buffer_info->skb,next_desc_0);
        else {
          #line 385 
          printk((char *)"\001",(char *)"R  ",i,u1->a,u1->b,u1->c,u1->d,buffer_info->dma,buffer_info->skb,next_desc_0);
          #line 394 
          if ((adapter->msg_enable & 4096U) != 0U) 
                                                   #line 395 
                                                   e1000e_dump_ps_pages(adapter,buffer_info);
        }
      }
      #line 360 
      i ++;
    }
    #line 399 
    break;
    #line 400 
    default: 
             #line 400 
    ;
    #line 401 
    case (unsigned int)0: 
                          #line 401 
    ;
    #line 410 
    printk((char *)"\001");
    #line 424 
    printk((char *)"\001");
    #line 426 
    i = 0;
    #line 426 
    while (rx_ring->count > (unsigned int)i) {
      {
        #line 427 
        char *next_desc_1;
        #line 429 
        buffer_info = rx_ring->buffer_info + (unsigned long)i;
        #line 430 
        rx_desc = (union e1000_rx_desc_extended *)rx_ring->desc + (unsigned long)i;
        #line 431 
        u1 = (struct my_u1 *)rx_desc;
        #line 432 
        staterr = rx_desc->wb.upper.status_error;
        #line 434 
        if ((int)rx_ring->next_to_use == i) 
                                            #line 435 
                                            next_desc_1 = (char *)" NTU";
        else 
          #line 436 
          if ((int)rx_ring->next_to_clean == i) 
                                                #line 437 
                                                next_desc_1 = (char *)" NTC"; else 
                                                                    #line 439 
                                                                    next_desc_1 = (char *)"";
        #line 441 
        if ((staterr & 1U) != 0U) 
                                  #line 443 
                                  printk((char *)"\001",(char *)"RWB",i,u1->a,u1->b,buffer_info->skb,next_desc_1);
        else {
          #line 449 
          printk((char *)"\001",(char *)"R  ",i,u1->a,u1->b,buffer_info->dma,buffer_info->skb,next_desc_1);
          #line 456 
          if ((adapter->msg_enable & 4096U) != 0U && buffer_info->skb != (struct sk_buff *)0) 
            #line 458 
            print_hex_dump((char *)"\001",(char *)"",1,16,1,(void *)(buffer_info->skb)->data,(unsigned long)adapter->rx_buffer_len,(_Bool)1);
        }
      }
      #line 426 
      i ++;
    }
  }
  #line 466 
  return;
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_desc_unused(struct e1000_ring *ring)
{
  #line 474 
  if ((int)ring->next_to_clean > (int)ring->next_to_use) 
                                                         #line 475 
                                                         return ((int)ring->next_to_clean - (int)ring->next_to_use) + -1;
  #line 477 
  return (int)(((ring->count + (unsigned int)ring->next_to_clean) - (unsigned int)ring->next_to_use) + 4294967295U);
}

#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_systim_to_hwtstamp(struct e1000_adapter *adapter, struct skb_shared_hwtstamps *hwtstamps, u64 systim)
{
  #line 498 
  u64 ns;
  #line 499 
  unsigned long flags;
  #line 501 
  cif___ldv_spin_lock_systim_lock_of_e1000_adapter(& adapter->systim_lock);
  #line 502 
  ns = timecounter_cyc2time(& adapter->tc,systim);
  #line 503 
  cif_spin_unlock_irqrestore_systim_lock_of_e1000_adapter(& adapter->systim_lock,flags);
  #line 505 
  memset((void *)hwtstamps,0,8UL);
  #line 506 
  hwtstamps->hwtstamp = ns_to_ktime(ns);
  #line 507 
  return;
}

#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_rx_hwtstamp(struct e1000_adapter *adapter, u32 status, struct sk_buff *skb)
{
  #line 523 
  u64 rxstmp;
  #line 522 
  struct e1000_hw *hw = & adapter->hw;
  #line 525 
  if (((unsigned long)adapter->flags & 16384UL) == 0UL || (status & 256U) == 0U) 
    #line 528 
    return;
  else {
    #line 526 
    if ((__er32(hw,46624UL) & 1U) == 0U) 
                                         #line 528 
                                         return;
  }
  #line 537 
  rxstmp = (unsigned long long)__er32(hw,46628UL);
  #line 538 
  rxstmp = ((unsigned long long)__er32(hw,46632UL) << 32) | rxstmp;
  #line 539 
  ;
  #line 539 
  ;
  #line 539 
  e1000e_systim_to_hwtstamp(adapter,skb_hwtstamps(skb),rxstmp);
  #line 541 
  adapter->flags2 &= 4294959103U;
  #line 542 
  return;
}

#line 551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_receive_skb(struct e1000_adapter *adapter, struct net_device *netdev, struct sk_buff *skb, u32 staterr, __le16 vlan)
{
  #line 555 
  u16 tag = vlan;
  #line 557 
  e1000e_rx_hwtstamp(adapter,staterr,skb);
  #line 559 
  skb->protocol = eth_type_trans(skb,netdev);
  #line 561 
  if ((staterr & 8U) != 0U) 
                            #line 562 
                            __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)tag));
  #line 564 
  napi_gro_receive(& adapter->napi,skb);
  #line 565 
  return;
}

#line 574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_rx_checksum(struct e1000_adapter *adapter, u32 status_err, struct sk_buff *skb)
{
  #line 577 
  u16 status = (unsigned short)status_err;
  #line 578 
  u8 errors = (unsigned char)(status_err >> 24);
  #line 580 
  skb_checksum_none_assert(skb);
  #line 583 
  if (((adapter->netdev)->features & 549755813888ULL) == 0ULL) 
                                                               #line 584 
                                                               return;
  #line 587 
  if (((int)status & 4) != 0) 
                              #line 588 
                              return;
  #line 591 
  if (((int)errors & 96) != 0) {
    #line 593 
    (adapter->hw_csum_err) ++;
    #line 594 
    return;
  }
  #line 598 
  if (((int)status & 48) == 0) 
                               #line 599 
                               return;
  #line 602 
  skb->ip_summed = (unsigned char)1U;
  #line 603 
  (adapter->hw_csum_good) ++;
  #line 604 
  return;
}

#line 606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_update_rdt_wa(struct e1000_ring *rx_ring, unsigned int i)
{
  #line 608 
  struct e1000_adapter *adapter = rx_ring->adapter;
  #line 609 
  struct e1000_hw *hw = & adapter->hw;
  #line 610 
  s32 ret_val = __ew32_prepare(hw);
  #line 612 
  writel(i,rx_ring->tail);
  #line 614 
  if ((long)(ret_val == 0) != 0L) {
    #line 614 
    ;
    #line 614 
    if ((long)(readl(rx_ring->tail) != i) != 0L) {
      #line 615 
      u32 rctl = __er32(hw,256UL);
      #line 617 
      __ew32(hw,256UL,rctl & 4294967293U);
      #line 618 
      netdev_err(adapter->netdev,(char *)"ME firmware caused invalid RDT - resetting\n");
      #line 619 
      cif_schedule_work(& adapter->reset_task);
    }
  }
  #line 621 
  return;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_update_tdt_wa(struct e1000_ring *tx_ring, unsigned int i)
{
  #line 625 
  struct e1000_adapter *adapter = tx_ring->adapter;
  #line 626 
  struct e1000_hw *hw = & adapter->hw;
  #line 627 
  s32 ret_val = __ew32_prepare(hw);
  #line 629 
  writel(i,tx_ring->tail);
  #line 631 
  if ((long)(ret_val == 0) != 0L) {
    #line 631 
    ;
    #line 631 
    if ((long)(readl(tx_ring->tail) != i) != 0L) {
      #line 632 
      u32 tctl = __er32(hw,1024UL);
      #line 634 
      __ew32(hw,1024UL,tctl & 4294967293U);
      #line 635 
      netdev_err(adapter->netdev,(char *)"ME firmware caused invalid TDT - resetting\n");
      #line 636 
      cif_schedule_work(& adapter->reset_task);
    }
  }
  #line 638 
  return;
}

#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_alloc_rx_buffers(struct e1000_ring *rx_ring, int cleaned_count, gfp_t gfp)
{
  #line 650 
  union e1000_rx_desc_extended *rx_desc;
  #line 651 
  struct e1000_buffer *buffer_info;
  #line 652 
  struct sk_buff *skb;
  #line 653 
  unsigned int i;
  #line 647 
  struct e1000_adapter *adapter = rx_ring->adapter;
  #line 648 
  struct net_device *netdev = adapter->netdev;
  #line 649 
  struct pci_dev *pdev = adapter->pdev;
  #line 654 
  unsigned int bufsz = adapter->rx_buffer_len;
  #line 656 
  i = (unsigned int)rx_ring->next_to_use;
  #line 657 
  buffer_info = rx_ring->buffer_info + (unsigned long)i;
  #line 659 
  while (1) {
    #line 659 
    int tmp_0;
    #line 659 
    tmp_0 = cleaned_count;
    #line 659 
    cleaned_count --;
    #line 659 
    ;
    #line 659 
    if (! (tmp_0 != 0)) 
                        #line 659 
                        break;
    {
      #line 660 
      skb = buffer_info->skb;
      #line 661 
      if (skb != (struct sk_buff *)0) {
        #line 662 
        skb_trim(skb,0U);
        #line 663 
        goto map_skb;
      }
      #line 666 
      skb = __netdev_alloc_skb_ip_align(netdev,bufsz,gfp);
      #line 667 
      if (skb == (struct sk_buff *)0) {
        #line 669 
        (adapter->alloc_rx_buff_failed) ++;
        #line 670 
        break;
      }
      #line 673 
      buffer_info->skb = skb;
      #line 674 
      map_skb: 
               #line 674 
      ;
      #line 675 
      buffer_info->dma = dma_map_single_attrs(& pdev->dev,(void *)skb->data,(unsigned long)adapter->rx_buffer_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 678 
      if (dma_mapping_error(& pdev->dev,buffer_info->dma) != 0) {
        #line 679 
        _dev_err(& pdev->dev,(char *)"Rx DMA map failed\n");
        #line 680 
        (adapter->rx_dma_failed) ++;
        #line 681 
        break;
      }
      #line 684 
      rx_desc = (union e1000_rx_desc_extended *)rx_ring->desc + (unsigned long)i;
      #line 685 
      rx_desc->read.buffer_addr = buffer_info->dma;
      #line 687 
      if ((long)((i & 15U) == 0U) != 0L) {
        #line 689 
        ldv_inline_asm();
        #line 694 
        if (((unsigned long)adapter->flags2 & 2048UL) != 0UL) 
                                                              #line 695 
                                                              e1000e_update_rdt_wa(rx_ring,i); else 
                                                                    #line 697 
                                                                    writel(i,rx_ring->tail);
      }
      #line 699 
      i ++;
      #line 700 
      if (rx_ring->count == i) 
                               #line 701 
                               i = 0U;
      #line 702 
      buffer_info = rx_ring->buffer_info + (unsigned long)i;
    }
  }
  #line 705 
  rx_ring->next_to_use = (unsigned short)i;
  #line 706 
  return;
}

#line 712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_alloc_rx_buffers_ps(struct e1000_ring *rx_ring, int cleaned_count, gfp_t gfp)
{
  #line 718 
  union e1000_rx_desc_packet_split *rx_desc;
  #line 719 
  struct e1000_buffer *buffer_info;
  #line 720 
  struct e1000_ps_page *ps_page;
  #line 721 
  struct sk_buff *skb;
  #line 722 
  unsigned int i;
  #line 722 
  unsigned int j;
  #line 715 
  struct e1000_adapter *adapter = rx_ring->adapter;
  #line 716 
  struct net_device *netdev = adapter->netdev;
  #line 717 
  struct pci_dev *pdev = adapter->pdev;
  #line 724 
  i = (unsigned int)rx_ring->next_to_use;
  #line 725 
  buffer_info = rx_ring->buffer_info + (unsigned long)i;
  #line 727 
  while (1) {
    #line 727 
    int tmp_1;
    #line 727 
    tmp_1 = cleaned_count;
    #line 727 
    cleaned_count --;
    #line 727 
    ;
    #line 727 
    if (! (tmp_1 != 0)) 
                        #line 727 
                        break;
    {
      #line 728 
      rx_desc = (union e1000_rx_desc_packet_split *)rx_ring->desc + (unsigned long)i;
      #line 730 
      j = 0U;
      #line 730 
      while (j <= 2U) {
        #line 731 
        ps_page = buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.ps_pages + (unsigned long)j;
        #line 732 
        if (adapter->rx_ps_pages <= j) {
          #line 734 
          rx_desc->read.buffer_addr[j + 1U] = 18446744073709551615ULL;
          #line 736 
          goto __Cont;
        }
        #line 738 
        if (ps_page->page == (struct page *)0) {
          #line 739 
          ps_page->page = alloc_pages(gfp,0U);
          #line 740 
          if (ps_page->page == (struct page *)0) {
            #line 741 
            (adapter->alloc_rx_buff_failed) ++;
            #line 742 
            goto no_buffers;
          }
          #line 744 
          ps_page->dma = dma_map_page_attrs(& pdev->dev,ps_page->page,0UL,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
          #line 748 
          if (dma_mapping_error(& pdev->dev,ps_page->dma) != 0) {
            #line 750 
            _dev_err(& (adapter->pdev)->dev,(char *)"Rx DMA page map failed\n");
            #line 752 
            (adapter->rx_dma_failed) ++;
            #line 753 
            goto no_buffers;
          }
        }
        #line 760 
        rx_desc->read.buffer_addr[j + 1U] = ps_page->dma;
        #line 730 
        __Cont: 
                #line 730 
        j ++;
      }
      #line 764 
      skb = __netdev_alloc_skb_ip_align(netdev,(unsigned int)adapter->rx_ps_bsize0,gfp);
      #line 767 
      if (skb == (struct sk_buff *)0) {
        #line 768 
        (adapter->alloc_rx_buff_failed) ++;
        #line 769 
        break;
      }
      #line 772 
      buffer_info->skb = skb;
      #line 773 
      buffer_info->dma = dma_map_single_attrs(& pdev->dev,(void *)skb->data,(unsigned long)adapter->rx_ps_bsize0,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 776 
      if (dma_mapping_error(& pdev->dev,buffer_info->dma) != 0) {
        #line 777 
        _dev_err(& pdev->dev,(char *)"Rx DMA map failed\n");
        #line 778 
        (adapter->rx_dma_failed) ++;
        #line 780 
        dev_kfree_skb_any(skb);
        #line 781 
        buffer_info->skb = (struct sk_buff *)0;
        #line 782 
        break;
      }
      #line 785 
      rx_desc->read.buffer_addr[0] = buffer_info->dma;
      #line 787 
      if ((long)((i & 15U) == 0U) != 0L) {
        #line 789 
        ldv_inline_asm();
        #line 794 
        if (((unsigned long)adapter->flags2 & 2048UL) != 0UL) 
                                                              #line 795 
                                                              e1000e_update_rdt_wa(rx_ring,i << 1); else 
                                                                    #line 797 
                                                                    writel(i << 1,rx_ring->tail);
      }
      #line 800 
      i ++;
      #line 801 
      if (rx_ring->count == i) 
                               #line 802 
                               i = 0U;
      #line 803 
      buffer_info = rx_ring->buffer_info + (unsigned long)i;
    }
  }
  #line 806 
  no_buffers: 
              #line 806 
  ;
  #line 807 
  rx_ring->next_to_use = (unsigned short)i;
  #line 808 
  return;
}

#line 816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_alloc_jumbo_rx_buffers(struct e1000_ring *rx_ring, int cleaned_count, gfp_t gfp)
{
  #line 822 
  union e1000_rx_desc_extended *rx_desc;
  #line 823 
  struct e1000_buffer *buffer_info;
  #line 824 
  struct sk_buff *skb;
  #line 825 
  unsigned int i;
  #line 819 
  struct e1000_adapter *adapter = rx_ring->adapter;
  #line 820 
  struct net_device *netdev = adapter->netdev;
  #line 821 
  struct pci_dev *pdev = adapter->pdev;
  #line 826 
  unsigned int bufsz = 240U;
  #line 828 
  i = (unsigned int)rx_ring->next_to_use;
  #line 829 
  buffer_info = rx_ring->buffer_info + (unsigned long)i;
  #line 831 
  while (1) {
    #line 831 
    int tmp_0;
    #line 831 
    tmp_0 = cleaned_count;
    #line 831 
    cleaned_count --;
    #line 831 
    ;
    #line 831 
    if (! (tmp_0 != 0)) 
                        #line 831 
                        break;
    #line 832 
    skb = buffer_info->skb;
    #line 833 
    if (skb != (struct sk_buff *)0) {
      #line 834 
      skb_trim(skb,0U);
      #line 835 
      goto check_page;
    }
    #line 838 
    skb = __netdev_alloc_skb_ip_align(netdev,bufsz,gfp);
    #line 839 
    if ((long)(skb == (struct sk_buff *)0) != 0L) {
      #line 841 
      (adapter->alloc_rx_buff_failed) ++;
      #line 842 
      break;
    }
    #line 845 
    buffer_info->skb = skb;
    #line 846 
    check_page: 
                #line 846 
    ;
    #line 848 
    if (buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.page == (struct page *)0) {
      #line 849 
      buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.page = alloc_pages(gfp,0U);
      #line 850 
      if ((long)(buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.page == (struct page *)0) != 0L) {
        #line 851 
        (adapter->alloc_rx_buff_failed) ++;
        #line 852 
        break;
      }
    }
    #line 856 
    if (buffer_info->dma == 0ULL) {
      #line 857 
      buffer_info->dma = dma_map_page_attrs(& pdev->dev,buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.page,0UL,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 861 
      if (dma_mapping_error(& pdev->dev,buffer_info->dma) != 0) {
        #line 862 
        (adapter->alloc_rx_buff_failed) ++;
        #line 863 
        break;
      }
    }
    #line 867 
    rx_desc = (union e1000_rx_desc_extended *)rx_ring->desc + (unsigned long)i;
    #line 868 
    rx_desc->read.buffer_addr = buffer_info->dma;
    #line 870 
    i ++;
    #line 870 
    ;
    #line 870 
    if ((long)(i == rx_ring->count) != 0L) 
                                           #line 871 
                                           i = 0U;
    #line 872 
    buffer_info = rx_ring->buffer_info + (unsigned long)i;
  }
  #line 875 
  if ((long)((unsigned int)rx_ring->next_to_use != i) != 0L) {
    #line 877 
    unsigned int tmp_1;
    #line 876 
    rx_ring->next_to_use = (unsigned short)i;
    #line 877 
    tmp_1 = i;
    #line 877 
    i --;
    #line 877 
    ;
    #line 877 
    if ((long)(tmp_1 == 0U) != 0L) 
                                   #line 878 
                                   i = rx_ring->count + 4294967295U;
    #line 879 
    ldv_inline_asm();
    #line 886 
    if (((unsigned long)adapter->flags2 & 2048UL) != 0UL) 
                                                          #line 887 
                                                          e1000e_update_rdt_wa(rx_ring,i); else 
                                                                    #line 889 
                                                                    writel(i,rx_ring->tail);
  }
  #line 891 
  return;
}

#line 893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
__inline static void e1000_rx_hash(struct net_device *netdev, __le32 rss, struct sk_buff *skb)
{
  #line 896 
  if ((netdev->features & 274877906944ULL) != 0ULL) 
                                                    #line 897 
                                                    skb_set_hash(skb,rss,(enum pkt_hash_types)PKT_HASH_TYPE_L3);
  #line 898 
  return;
}

#line 907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static bool e1000_clean_rx_irq(struct e1000_ring *rx_ring, int *work_done, int work_to_do)
{
  #line 914 
  union e1000_rx_desc_extended *rx_desc;
  #line 914 
  union e1000_rx_desc_extended *next_rxd;
  #line 915 
  struct e1000_buffer *buffer_info;
  #line 915 
  struct e1000_buffer *next_buffer;
  #line 916 
  u32 length;
  #line 916 
  u32 staterr;
  #line 917 
  unsigned int i;
  #line 910 
  struct e1000_adapter *adapter = rx_ring->adapter;
  #line 911 
  struct net_device *netdev = adapter->netdev;
  #line 912 
  struct pci_dev *pdev = adapter->pdev;
  #line 913 
  struct e1000_hw *hw = & adapter->hw;
  #line 918 
  int cleaned_count = 0;
  #line 919 
  bool cleaned = (_Bool)0;
  #line 920 
  unsigned int total_rx_bytes = 0U;
  #line 920 
  unsigned int total_rx_packets = 0U;
  #line 922 
  i = (unsigned int)rx_ring->next_to_clean;
  #line 923 
  rx_desc = (union e1000_rx_desc_extended *)rx_ring->desc + (unsigned long)i;
  #line 924 
  staterr = rx_desc->wb.upper.status_error;
  #line 925 
  buffer_info = rx_ring->buffer_info + (unsigned long)i;
  #line 927 
  while ((staterr & 1U) != 0U) {
    #line 928 
    struct sk_buff *skb;
    #line 930 
    if (*work_done >= work_to_do) 
                                  #line 931 
                                  break;
    #line 932 
    (*work_done) ++;
    #line 933 
    ldv_inline_asm();
    #line 935 
    skb = buffer_info->skb;
    #line 936 
    buffer_info->skb = (struct sk_buff *)0;
    #line 938 
    __builtin_prefetch((void const *)((void *)skb->data));
    #line 940 
    i ++;
    #line 941 
    if (rx_ring->count == i) 
                             #line 942 
                             i = 0U;
    #line 943 
    next_rxd = (union e1000_rx_desc_extended *)rx_ring->desc + (unsigned long)i;
    #line 944 
    __builtin_prefetch((void const *)((void *)next_rxd));
    #line 946 
    next_buffer = rx_ring->buffer_info + (unsigned long)i;
    #line 948 
    cleaned = (_Bool)1;
    #line 949 
    cleaned_count ++;
    #line 950 
    dma_unmap_single_attrs(& pdev->dev,buffer_info->dma,(unsigned long)adapter->rx_buffer_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
    #line 952 
    buffer_info->dma = 0ULL;
    #line 954 
    length = (unsigned int)rx_desc->wb.upper.length;
    #line 962 
    if ((long)((staterr & 2U) == 0U) != 0L) 
                                            #line 963 
                                            adapter->flags2 |= 4U;
    #line 965 
    if (((unsigned long)adapter->flags2 & 4UL) != 0UL) {
      {
        #line 967 
        bool branch;
        #line 967 
        struct _ddebug __UNIQUE_ID_ddebug540 = {.modname = (char *)"e1000e", .function = (char *)"e1000_clean_rx_irq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c", .format = (char *)"Receive packet consumed multiple buffers\n", .lineno = (unsigned int)967U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 967 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug540.key.dd_key_false.key,(_Bool)0);
        #line 967 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 967 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug540,(hw->adapter)->netdev,(char *)"Receive packet consumed multiple buffers\n");
      }
      #line 969 
      buffer_info->skb = skb;
      #line 970 
      if ((staterr & 2U) != 0U) 
                                #line 971 
                                adapter->flags2 &= 4294967291U;
      #line 972 
      goto next_desc;
    }
    #line 975 
    if ((long)((staterr & 2533359616U) != 0U) != 0L && (long)((netdev->features & 8796093022208ULL) == 0ULL) != 0L) {
      #line 978 
      buffer_info->skb = skb;
      #line 979 
      goto next_desc;
    }
    #line 983 
    if (((unsigned long)adapter->flags2 & 1UL) == 0UL) 
      #line 988 
      if ((netdev->features & 4398046511104ULL) != 0ULL) 
                                                         #line 989 
                                                         total_rx_bytes += 4294967292U; else 
                                                                    #line 991 
                                                                    length += 4294967292U;
    #line 994 
    total_rx_bytes += length;
    #line 995 
    total_rx_packets ++;
    #line 1001 
    if (length < copybreak) {
      #line 1002 
      struct sk_buff *new_skb = napi_alloc_skb(& adapter->napi,length);
      #line 1004 
      if (new_skb != (struct sk_buff *)0) {
        #line 1005 
        skb_copy_to_linear_data_offset(new_skb,0,(void *)skb->data,length);
        #line 1012 
        buffer_info->skb = skb;
        #line 1013 
        skb = new_skb;
      }
    }
    #line 1018 
    skb_put(skb,length);
    #line 1021 
    e1000_rx_checksum(adapter,staterr,skb);
    #line 1023 
    e1000_rx_hash(netdev,rx_desc->wb.lower.hi_dword.rss,skb);
    #line 1025 
    e1000_receive_skb(adapter,netdev,skb,staterr,(unsigned short)((int)rx_desc->wb.upper.vlan));
    #line 1028 
    next_desc: 
               #line 1028 
    ;
    #line 1029 
    rx_desc->wb.upper.status_error &= 4294967040U;
    #line 1032 
    if (cleaned_count > 15) {
      #line 1033 
      (*(adapter->alloc_rx_buf))(rx_ring,cleaned_count,2592U);
      #line 1035 
      cleaned_count = 0;
    }
    #line 1039 
    rx_desc = next_rxd;
    #line 1040 
    buffer_info = next_buffer;
    #line 1042 
    staterr = rx_desc->wb.upper.status_error;
  }
  #line 1044 
  rx_ring->next_to_clean = (unsigned short)i;
  #line 1046 
  cleaned_count = e1000_desc_unused(rx_ring);
  #line 1047 
  if (cleaned_count != 0) 
                          #line 1048 
                          (*(adapter->alloc_rx_buf))(rx_ring,cleaned_count,2592U);
  #line 1050 
  adapter->total_rx_bytes += total_rx_bytes;
  #line 1051 
  adapter->total_rx_packets += total_rx_packets;
  #line 1052 
  return cleaned;
}

#line 1055  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_put_txbuf(struct e1000_ring *tx_ring, struct e1000_buffer *buffer_info, bool drop)
{
  #line 1059 
  struct e1000_adapter *adapter = tx_ring->adapter;
  #line 1061 
  if (buffer_info->dma != 0ULL) {
    #line 1062 
    if ((unsigned int)buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.mapped_as_page != 0U) 
      #line 1063 
      dma_unmap_page_attrs(& (adapter->pdev)->dev,buffer_info->dma,(unsigned long)buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.length,(enum dma_data_direction)DMA_TO_DEVICE,0UL); else 
                                                                    #line 1066 
                                                                    dma_unmap_single_attrs(& (adapter->pdev)->dev,buffer_info->dma,(unsigned long)buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.length,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 1068 
    buffer_info->dma = 0ULL;
  }
  #line 1070 
  if (buffer_info->skb != (struct sk_buff *)0) {
    #line 1071 
    if ((int)drop != 0) 
                        #line 1072 
                        dev_kfree_skb_any(buffer_info->skb); else 
                                                                  #line 1074 
                                                                  dev_consume_skb_any(buffer_info->skb);
    #line 1075 
    buffer_info->skb = (struct sk_buff *)0;
  }
  #line 1077 
  buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.time_stamp = 0UL;
  #line 1078 
  return;
}

#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_print_hw_hang(struct work_struct *work)
{
  #line 1082 
  void *__mptr;
  #line 1091 
  u16 phy_status;
  #line 1091 
  u16 phy_1000t_status;
  #line 1091 
  u16 phy_ext_status;
  #line 1092 
  u16 pci_status;
  #line 1082 
  __mptr = (void *)work;
  #line 1082 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709539208U));
  #line 1085 
  struct net_device *netdev = adapter->netdev;
  #line 1086 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  #line 1087 
  unsigned int i = (unsigned int)tx_ring->next_to_clean;
  #line 1088 
  unsigned int eop = (unsigned int)(tx_ring->buffer_info + (unsigned long)i)->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.next_to_watch;
  #line 1089 
  struct e1000_tx_desc *eop_desc = (struct e1000_tx_desc *)tx_ring->desc + (unsigned long)eop;
  #line 1090 
  struct e1000_hw *hw = & adapter->hw;
  #line 1094 
  if ((int)test_bit(3L,& adapter->state) != 0) 
                                               #line 1095 
                                               return;
  #line 1097 
  if (! adapter->tx_hang_recheck && ((unsigned long)adapter->flags2 & 64UL) != 0UL) {
    #line 1101 
    __ew32(hw,14368UL,adapter->tx_int_delay | 2147483648U);
    #line 1103 
    __er32(hw,8UL);
    #line 1107 
    __ew32(hw,14368UL,adapter->tx_int_delay | 2147483648U);
    #line 1109 
    __er32(hw,8UL);
    #line 1110 
    adapter->tx_hang_recheck = (_Bool)1;
    #line 1111 
    return;
  }
  #line 1113 
  adapter->tx_hang_recheck = (_Bool)0;
  #line 1115 
  if (__er32(hw,14352UL) == __er32(hw,14360UL)) {
    {
      #line 1116 
      bool branch;
      #line 1116 
      struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"e1000e", .function = (char *)"e1000_print_hw_hang", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c", .format = (char *)"false hang detected, ignoring\n", .lineno = (unsigned int)1116U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1116 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
      #line 1116 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1116 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug541,(hw->adapter)->netdev,(char *)"false hang detected, ignoring\n");
    }
    #line 1117 
    return;
  }
  #line 1121 
  netif_stop_queue(netdev);
  #line 1123 
  e1e_rphy(hw,1U,& phy_status);
  #line 1124 
  e1e_rphy(hw,10U,& phy_1000t_status);
  #line 1125 
  e1e_rphy(hw,15U,& phy_ext_status);
  #line 1127 
  pci_read_config_word(adapter->pdev,6,& pci_status);
  #line 1130 
  ;
  #line 1130 
  ;
  #line 1130 
  ;
  #line 1130 
  ;
  #line 1130 
  ;
  #line 1130 
  ;
  #line 1130 
  ;
  #line 1130 
  ;
  #line 1130 
  ;
  #line 1130 
  ;
  #line 1130 
  ;
  #line 1130 
  netdev_err(adapter->netdev,(char *)"Detected Hardware Unit Hang:\n",readl(tx_ring->head),readl(tx_ring->tail),(int)tx_ring->next_to_use,(int)tx_ring->next_to_clean,(tx_ring->buffer_info + (unsigned long)eop)->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.time_stamp,eop,jiffies,(int)eop_desc->upper.fields.status,__er32(hw,8UL),(int)phy_status,(int)phy_1000t_status,(int)phy_ext_status,(int)pci_status);
  #line 1150 
  e1000e_dump(adapter);
  #line 1153 
  if (hw->mac.type == (unsigned int)e1000_pchlan) {
    #line 1153 
    if ((__er32(hw,0UL) & 268435456U) != 0U) 
                                             #line 1154 
                                             netdev_err(adapter->netdev,(char *)"Try turning off Tx pause (flow control) via ethtool\n");
  }
  #line 1155 
  return;
}

#line 1165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_tx_hwtstamp_work(struct work_struct *work)
{
  #line 1167 
  void *__mptr;
  #line 1167 
  __mptr = (void *)work;
  #line 1167 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709538904U));
  #line 1169 
  struct e1000_hw *hw = & adapter->hw;
  #line 1171 
  if ((__er32(hw,46612UL) & 1U) != 0U) {
    #line 1173 
    struct skb_shared_hwtstamps shhwtstamps;
    #line 1174 
    u64 txstmp;
    #line 1172 
    struct sk_buff *skb = adapter->tx_hwtstamp_skb;
    #line 1176 
    txstmp = (unsigned long long)__er32(hw,46616UL);
    #line 1177 
    txstmp = ((unsigned long long)__er32(hw,46620UL) << 32) | txstmp;
    #line 1179 
    e1000e_systim_to_hwtstamp(adapter,& shhwtstamps,txstmp);
    #line 1184 
    adapter->tx_hwtstamp_skb = (struct sk_buff *)0;
    #line 1185 
    ldv_inline_asm();
    #line 1187 
    skb_tstamp_tx(skb,& shhwtstamps);
    #line 1188 
    dev_consume_skb_any(skb);
  }
  else {
    {
      #line 1189 
      unsigned long __dummy;
      #line 1189 
      unsigned long __dummy2;
      }
    #line 1189 
    if (1 != 0) {
      {
        #line 1189 
        unsigned long __dummy_0;
        #line 1189 
        unsigned long __dummy2_0;
        }
      #line 1189 
      if (1 != 0) 
        #line 1189 
        if ((long)((adapter->tx_hwtstamp_start + (unsigned long)((int)adapter->tx_timeout_factor * 250)) - jiffies) < 0L) {
          #line 1191 
          dev_kfree_skb_any(adapter->tx_hwtstamp_skb);
          #line 1192 
          adapter->tx_hwtstamp_skb = (struct sk_buff *)0;
          #line 1193 
          (adapter->tx_hwtstamp_timeouts) ++;
          #line 1194 
          netdev_warn(adapter->netdev,(char *)"clearing Tx timestamp hang\n");
        }
        else 
             #line 1197 
             cif_schedule_work(& adapter->tx_hwtstamp_work);
      else 
           #line 1197 
           cif_schedule_work(& adapter->tx_hwtstamp_work);
    }
    else 
         #line 1197 
         cif_schedule_work(& adapter->tx_hwtstamp_work);
  }
  #line 1198 
  return;
}

#line 1208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static bool e1000_clean_tx_irq(struct e1000_ring *tx_ring)
{
  #line 1213 
  struct e1000_tx_desc *tx_desc;
  #line 1213 
  struct e1000_tx_desc *eop_desc;
  #line 1214 
  struct e1000_buffer *buffer_info;
  #line 1215 
  unsigned int i;
  #line 1215 
  unsigned int eop;
  #line 1210 
  struct e1000_adapter *adapter = tx_ring->adapter;
  #line 1211 
  struct net_device *netdev = adapter->netdev;
  #line 1212 
  struct e1000_hw *hw = & adapter->hw;
  #line 1216 
  unsigned int count = 0U;
  #line 1217 
  unsigned int total_tx_bytes = 0U;
  #line 1217 
  unsigned int total_tx_packets = 0U;
  #line 1218 
  unsigned int bytes_compl = 0U;
  #line 1218 
  unsigned int pkts_compl = 0U;
  #line 1220 
  i = (unsigned int)tx_ring->next_to_clean;
  #line 1221 
  eop = (unsigned int)(tx_ring->buffer_info + (unsigned long)i)->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.next_to_watch;
  #line 1222 
  eop_desc = (struct e1000_tx_desc *)tx_ring->desc + (unsigned long)eop;
  #line 1224 
  while ((eop_desc->upper.data & 1U) != 0U && tx_ring->count > count) {
    #line 1226 
    bool cleaned = (_Bool)0;
    #line 1227 
    ldv_inline_asm();
    #line 1229 
    while (! cleaned) {
      #line 1230 
      tx_desc = (struct e1000_tx_desc *)tx_ring->desc + (unsigned long)i;
      #line 1231 
      buffer_info = tx_ring->buffer_info + (unsigned long)i;
      #line 1232 
      cleaned = (_Bool)(i == eop);
      #line 1234 
      if ((int)cleaned != 0) {
        #line 1235 
        total_tx_packets = buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.segs + total_tx_packets;
        #line 1236 
        total_tx_bytes = buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.bytecount + total_tx_bytes;
        #line 1237 
        if (buffer_info->skb != (struct sk_buff *)0) {
          #line 1238 
          bytes_compl = (buffer_info->skb)->len + bytes_compl;
          #line 1239 
          pkts_compl ++;
        }
      }
      #line 1243 
      e1000_put_txbuf(tx_ring,buffer_info,(_Bool)0);
      #line 1244 
      tx_desc->upper.data = 0U;
      #line 1246 
      i ++;
      #line 1247 
      if (tx_ring->count == i) 
                               #line 1248 
                               i = 0U;
      #line 1229 
      count ++;
    }
    #line 1251 
    if ((unsigned int)tx_ring->next_to_use == i) 
                                                 #line 1252 
                                                 break;
    #line 1253 
    eop = (unsigned int)(tx_ring->buffer_info + (unsigned long)i)->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.next_to_watch;
    #line 1254 
    eop_desc = (struct e1000_tx_desc *)tx_ring->desc + (unsigned long)eop;
  }
  #line 1257 
  tx_ring->next_to_clean = (unsigned short)i;
  #line 1259 
  netdev_completed_queue(netdev,pkts_compl,bytes_compl);
  #line 1262 
  if (count != 0U) {
    #line 1262 
    if ((int)netif_carrier_ok(netdev) != 0) {
      #line 1262 
      if (e1000_desc_unused(tx_ring) > 31) {
        #line 1265 
        ldv_inline_asm();
        #line 1269 
        if ((int)netif_queue_stopped(netdev) != 0) {
          #line 1270 
          if (! test_bit(3L,& adapter->state)) {
            #line 1271 
            netif_wake_queue(netdev);
            #line 1272 
            (adapter->restart_queue) ++;
          }
        }
      }
    }
  }
  #line 1276 
  if ((int)adapter->detect_tx_hung != 0) {
    #line 1280 
    adapter->detect_tx_hung = (_Bool)0;
    {
      #line 1282 
      unsigned long __dummy;
      #line 1282 
      unsigned long __dummy2;
      }
    #line 1281 
    if (1 != 0) {
      {
        #line 1282 
        unsigned long __dummy_0;
        #line 1282 
        unsigned long __dummy2_0;
        }
      #line 1282 
      if (1 != 0) 
        #line 1282 
        if ((long)(((tx_ring->buffer_info + (unsigned long)i)->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.time_stamp + (unsigned long)((int)adapter->tx_timeout_factor * 250)) - jiffies) < 0L) 
          #line 1281 
          if ((tx_ring->buffer_info + (unsigned long)i)->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.time_stamp != 0UL) {
            #line 1283 
            if ((__er32(hw,8UL) & 16U) == 0U) 
                                              #line 1285 
                                              cif_schedule_work(& adapter->print_hang_task); else 
                                                                    #line 1287 
                                                                    adapter->tx_hang_recheck = (_Bool)0;
          }
          else 
               #line 1287 
               adapter->tx_hang_recheck = (_Bool)0;
        else 
             #line 1287 
             adapter->tx_hang_recheck = (_Bool)0;
      else 
           #line 1287 
           adapter->tx_hang_recheck = (_Bool)0;
    }
    else 
         #line 1287 
         adapter->tx_hang_recheck = (_Bool)0;
  }
  #line 1289 
  adapter->total_tx_bytes += total_tx_bytes;
  #line 1290 
  adapter->total_tx_packets += total_tx_packets;
  #line 1291 
  return (_Bool)(tx_ring->count > count);
}

#line 1301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static bool e1000_clean_rx_irq_ps(struct e1000_ring *rx_ring, int *work_done, int work_to_do)
{
  #line 1306 
  union e1000_rx_desc_packet_split *rx_desc;
  #line 1306 
  union e1000_rx_desc_packet_split *next_rxd;
  #line 1309 
  struct e1000_buffer *buffer_info;
  #line 1309 
  struct e1000_buffer *next_buffer;
  #line 1310 
  struct e1000_ps_page *ps_page;
  #line 1311 
  struct sk_buff *skb;
  #line 1312 
  unsigned int i;
  #line 1312 
  unsigned int j;
  #line 1313 
  u32 length;
  #line 1313 
  u32 staterr;
  #line 1304 
  struct e1000_adapter *adapter = rx_ring->adapter;
  #line 1305 
  struct e1000_hw *hw = & adapter->hw;
  #line 1307 
  struct net_device *netdev = adapter->netdev;
  #line 1308 
  struct pci_dev *pdev = adapter->pdev;
  #line 1314 
  int cleaned_count = 0;
  #line 1315 
  bool cleaned = (_Bool)0;
  #line 1316 
  unsigned int total_rx_bytes = 0U;
  #line 1316 
  unsigned int total_rx_packets = 0U;
  #line 1318 
  i = (unsigned int)rx_ring->next_to_clean;
  #line 1319 
  rx_desc = (union e1000_rx_desc_packet_split *)rx_ring->desc + (unsigned long)i;
  #line 1320 
  staterr = rx_desc->wb.middle.status_error;
  #line 1321 
  buffer_info = rx_ring->buffer_info + (unsigned long)i;
  #line 1323 
  while ((staterr & 1U) != 0U) {
    #line 1324 
    if (*work_done >= work_to_do) 
                                  #line 1325 
                                  break;
    #line 1326 
    (*work_done) ++;
    #line 1327 
    skb = buffer_info->skb;
    #line 1328 
    ldv_inline_asm();
    #line 1331 
    __builtin_prefetch((void const *)((void *)skb->data));
    #line 1333 
    i ++;
    #line 1334 
    if (rx_ring->count == i) 
                             #line 1335 
                             i = 0U;
    #line 1336 
    next_rxd = (union e1000_rx_desc_packet_split *)rx_ring->desc + (unsigned long)i;
    #line 1337 
    __builtin_prefetch((void const *)((void *)next_rxd));
    #line 1339 
    next_buffer = rx_ring->buffer_info + (unsigned long)i;
    #line 1341 
    cleaned = (_Bool)1;
    #line 1342 
    cleaned_count ++;
    #line 1343 
    dma_unmap_single_attrs(& pdev->dev,buffer_info->dma,(unsigned long)adapter->rx_ps_bsize0,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
    #line 1345 
    buffer_info->dma = 0ULL;
    #line 1348 
    if ((staterr & 2U) == 0U) 
                              #line 1349 
                              adapter->flags2 |= 4U;
    #line 1351 
    if (((unsigned long)adapter->flags2 & 4UL) != 0UL) {
      {
        #line 1352 
        bool branch;
        #line 1352 
        struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"e1000e", .function = (char *)"e1000_clean_rx_irq_ps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c", .format = (char *)"Packet Split buffers didn\'t pick up the full packet\n", .lineno = (unsigned int)1352U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1352 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
        #line 1352 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 1352 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug542,(hw->adapter)->netdev,(char *)"Packet Split buffers didn\'t pick up the full packet\n");
      }
      #line 1353 
      dev_kfree_skb_irq(skb);
      #line 1354 
      if ((staterr & 2U) != 0U) 
                                #line 1355 
                                adapter->flags2 &= 4294967291U;
      #line 1356 
      goto next_desc;
    }
    #line 1359 
    if ((long)((staterr & 2533359616U) != 0U) != 0L && (long)((netdev->features & 8796093022208ULL) == 0ULL) != 0L) {
      #line 1361 
      dev_kfree_skb_irq(skb);
      #line 1362 
      goto next_desc;
    }
    #line 1365 
    length = (unsigned int)rx_desc->wb.middle.length0;
    #line 1367 
    if (length == 0U) {
      {
        #line 1368 
        bool branch_0;
        #line 1368 
        struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"e1000e", .function = (char *)"e1000_clean_rx_irq_ps", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c", .format = (char *)"Last part of the packet spanning multiple descriptors\n", .lineno = (unsigned int)1368U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1368 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
        #line 1368 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 1368 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug543,(hw->adapter)->netdev,(char *)"Last part of the packet spanning multiple descriptors\n");
      }
      #line 1369 
      dev_kfree_skb_irq(skb);
      #line 1370 
      goto next_desc;
    }
    #line 1374 
    skb_put(skb,length);
    {
      #line 1380 
      int l1 = (int)rx_desc->wb.upper.length[0];
      #line 1387 
      if ((l1 != 0 && (unsigned int)l1 <= copybreak) && length + (unsigned int)l1 <= (unsigned int)adapter->rx_ps_bsize0) {
        #line 1389 
        u8 *vaddr;
        #line 1391 
        ps_page = buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.ps_pages;
        #line 1397 
        dma_sync_single_for_cpu(& pdev->dev,ps_page->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
        #line 1401 
        vaddr = (u8 *)kmap_atomic(ps_page->page);
        #line 1402 
        ;
        #line 1402 
        ;
        #line 1402 
        memcpy((void *)skb_tail_pointer(skb),(void *)vaddr,(unsigned long)l1);
        #line 1403 
        __kunmap_atomic((void *)vaddr);
        #line 1404 
        dma_sync_single_for_device(& pdev->dev,ps_page->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
        #line 1410 
        if (((unsigned long)adapter->flags2 & 1UL) == 0UL) 
          #line 1411 
          if ((netdev->features & 4398046511104ULL) == 0ULL) 
                                                             #line 1412 
                                                             l1 += -4;
        #line 1415 
        skb_put(skb,(unsigned int)l1);
        #line 1416 
        goto copydone;
      }
    }
    #line 1420 
    j = 0U;
    #line 1420 
    while (j <= 2U) {
      #line 1421 
      length = (unsigned int)rx_desc->wb.upper.length[j];
      #line 1422 
      if (length == 0U) 
                        #line 1423 
                        break;
      #line 1425 
      ps_page = buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.ps_pages + (unsigned long)j;
      #line 1426 
      dma_unmap_page_attrs(& pdev->dev,ps_page->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 1428 
      ps_page->dma = 0ULL;
      #line 1429 
      skb_fill_page_desc(skb,(int)j,ps_page->page,0,(int)length);
      #line 1430 
      ps_page->page = (struct page *)0;
      #line 1431 
      skb->len += length;
      #line 1432 
      skb->data_len += length;
      #line 1433 
      skb->truesize += 4096U;
      #line 1420 
      j ++;
    }
    #line 1439 
    if (((unsigned long)adapter->flags2 & 1UL) == 0UL) 
      #line 1440 
      if ((netdev->features & 4398046511104ULL) == 0ULL) 
                                                         #line 1441 
                                                         pskb_trim(skb,skb->len + 4294967292U);
    #line 1444 
    copydone: 
              #line 1444 
    ;
    #line 1445 
    total_rx_bytes = skb->len + total_rx_bytes;
    #line 1446 
    total_rx_packets ++;
    #line 1448 
    e1000_rx_checksum(adapter,staterr,skb);
    #line 1450 
    e1000_rx_hash(netdev,rx_desc->wb.lower.hi_dword.rss,skb);
    #line 1452 
    if (((int)rx_desc->wb.upper.header_status & 32768) != 0) 
                                                             #line 1454 
                                                             (adapter->rx_hdr_split) ++;
    #line 1456 
    e1000_receive_skb(adapter,netdev,skb,staterr,(unsigned short)((int)rx_desc->wb.middle.vlan));
    #line 1459 
    next_desc: 
               #line 1459 
    ;
    #line 1460 
    rx_desc->wb.middle.status_error &= 4294967040U;
    #line 1461 
    buffer_info->skb = (struct sk_buff *)0;
    #line 1464 
    if (cleaned_count > 15) {
      #line 1465 
      (*(adapter->alloc_rx_buf))(rx_ring,cleaned_count,2592U);
      #line 1467 
      cleaned_count = 0;
    }
    #line 1471 
    rx_desc = next_rxd;
    #line 1472 
    buffer_info = next_buffer;
    #line 1474 
    staterr = rx_desc->wb.middle.status_error;
  }
  #line 1476 
  rx_ring->next_to_clean = (unsigned short)i;
  #line 1478 
  cleaned_count = e1000_desc_unused(rx_ring);
  #line 1479 
  if (cleaned_count != 0) 
                          #line 1480 
                          (*(adapter->alloc_rx_buf))(rx_ring,cleaned_count,2592U);
  #line 1482 
  adapter->total_rx_bytes += total_rx_bytes;
  #line 1483 
  adapter->total_rx_packets += total_rx_packets;
  #line 1484 
  return cleaned;
}

#line 1490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_consume_page(struct e1000_buffer *bi, struct sk_buff *skb, u16 length)
{
  #line 1493 
  bi->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.page = (struct page *)0;
  #line 1494 
  skb->len += (unsigned int)length;
  #line 1495 
  skb->data_len += (unsigned int)length;
  #line 1496 
  skb->truesize += 4096U;
  #line 1497 
  return;
}

#line 1506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static bool e1000_clean_jumbo_rx_irq(struct e1000_ring *rx_ring, int *work_done, int work_to_do)
{
  #line 1512 
  union e1000_rx_desc_extended *rx_desc;
  #line 1512 
  union e1000_rx_desc_extended *next_rxd;
  #line 1513 
  struct e1000_buffer *buffer_info;
  #line 1513 
  struct e1000_buffer *next_buffer;
  #line 1514 
  u32 length;
  #line 1514 
  u32 staterr;
  #line 1515 
  unsigned int i;
  #line 1519 
  struct skb_shared_info *shinfo;
  #line 1509 
  struct e1000_adapter *adapter = rx_ring->adapter;
  #line 1510 
  struct net_device *netdev = adapter->netdev;
  #line 1511 
  struct pci_dev *pdev = adapter->pdev;
  #line 1516 
  int cleaned_count = 0;
  #line 1517 
  bool cleaned = (_Bool)0;
  #line 1518 
  unsigned int total_rx_bytes = 0U;
  #line 1518 
  unsigned int total_rx_packets = 0U;
  #line 1521 
  i = (unsigned int)rx_ring->next_to_clean;
  #line 1522 
  rx_desc = (union e1000_rx_desc_extended *)rx_ring->desc + (unsigned long)i;
  #line 1523 
  staterr = rx_desc->wb.upper.status_error;
  #line 1524 
  buffer_info = rx_ring->buffer_info + (unsigned long)i;
  #line 1526 
  while ((staterr & 1U) != 0U) {
    #line 1527 
    struct sk_buff *skb;
    #line 1529 
    if (*work_done >= work_to_do) 
                                  #line 1530 
                                  break;
    #line 1531 
    (*work_done) ++;
    #line 1532 
    ldv_inline_asm();
    #line 1534 
    skb = buffer_info->skb;
    #line 1535 
    buffer_info->skb = (struct sk_buff *)0;
    #line 1537 
    i ++;
    #line 1538 
    if (rx_ring->count == i) 
                             #line 1539 
                             i = 0U;
    #line 1540 
    next_rxd = (union e1000_rx_desc_extended *)rx_ring->desc + (unsigned long)i;
    #line 1541 
    __builtin_prefetch((void const *)((void *)next_rxd));
    #line 1543 
    next_buffer = rx_ring->buffer_info + (unsigned long)i;
    #line 1545 
    cleaned = (_Bool)1;
    #line 1546 
    cleaned_count ++;
    #line 1547 
    dma_unmap_page_attrs(& pdev->dev,buffer_info->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
    #line 1549 
    buffer_info->dma = 0ULL;
    #line 1551 
    length = (unsigned int)rx_desc->wb.upper.length;
    #line 1554 
    if ((long)((staterr & 2U) != 0U) != 0L && (((long)((staterr & 2533359616U) != 0U) != 0L && (long)((netdev->features & 8796093022208ULL) == 0ULL) != 0L) != 0) != 0) {
      #line 1558 
      buffer_info->skb = skb;
      #line 1560 
      if (rx_ring->rx_skb_top != (struct sk_buff *)0) 
                                                      #line 1561 
                                                      dev_kfree_skb_irq(rx_ring->rx_skb_top);
      #line 1562 
      rx_ring->rx_skb_top = (struct sk_buff *)0;
      #line 1563 
      goto next_desc;
    }
    #line 1566 
    if ((staterr & 2U) == 0U) {
      #line 1568 
      if (rx_ring->rx_skb_top == (struct sk_buff *)0) {
        #line 1570 
        rx_ring->rx_skb_top = skb;
        #line 1571 
        skb_fill_page_desc(rx_ring->rx_skb_top,0,buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.page,0,(int)length);
      }
      else {
        #line 1575 
        shinfo = (struct skb_shared_info *)skb_end_pointer(rx_ring->rx_skb_top);
        #line 1576 
        skb_fill_page_desc(rx_ring->rx_skb_top,(int)shinfo->nr_frags,buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.page,0,(int)length);
        #line 1580 
        buffer_info->skb = skb;
      }
      #line 1582 
      e1000_consume_page(buffer_info,rx_ring->rx_skb_top,(unsigned short)((int)((unsigned short)length)));
      #line 1583 
      goto next_desc;
    }
    else 
      #line 1585 
      if (rx_ring->rx_skb_top != (struct sk_buff *)0) {
        #line 1587 
        shinfo = (struct skb_shared_info *)skb_end_pointer(rx_ring->rx_skb_top);
        #line 1588 
        skb_fill_page_desc(rx_ring->rx_skb_top,(int)shinfo->nr_frags,buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.page,0,(int)length);
        #line 1594 
        buffer_info->skb = skb;
        #line 1595 
        skb = rx_ring->rx_skb_top;
        #line 1596 
        rx_ring->rx_skb_top = (struct sk_buff *)0;
        #line 1597 
        e1000_consume_page(buffer_info,skb,(unsigned short)((int)((unsigned short)length)));
      }
      else 
        #line 1602 
        if (length <= copybreak) {
          #line 1603 
          ;
          #line 1603 
          if ((unsigned int)skb_tailroom(skb) >= length) {
            #line 1604 
            u8 *vaddr;
            #line 1605 
            vaddr = (u8 *)kmap_atomic(buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.page);
            #line 1606 
            ;
            #line 1606 
            ;
            #line 1606 
            memcpy((void *)skb_tail_pointer(skb),(void *)vaddr,(unsigned long)length);
            #line 1608 
            __kunmap_atomic((void *)vaddr);
            #line 1612 
            skb_put(skb,length);
          }
          else 
               #line 1602 
               goto _LAND;
        }
        else {
          #line 1602 
          _LAND: {
                   #line 1614 
                   skb_fill_page_desc(skb,0,buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.page,0,(int)length);
                   #line 1617 
                   e1000_consume_page(buffer_info,skb,(unsigned short)((int)((unsigned short)length)));
                 }
        }
    #line 1624 
    e1000_rx_checksum(adapter,staterr,skb);
    #line 1626 
    e1000_rx_hash(netdev,rx_desc->wb.lower.hi_dword.rss,skb);
    #line 1629 
    total_rx_bytes = skb->len + total_rx_bytes;
    #line 1630 
    total_rx_packets ++;
    #line 1633 
    if (! pskb_may_pull(skb,14U)) {
      #line 1634 
      netdev_err(adapter->netdev,(char *)"pskb_may_pull failed.\n");
      #line 1635 
      dev_kfree_skb_irq(skb);
      #line 1636 
      goto next_desc;
    }
    #line 1639 
    e1000_receive_skb(adapter,netdev,skb,staterr,(unsigned short)((int)rx_desc->wb.upper.vlan));
    #line 1642 
    next_desc: 
               #line 1642 
    ;
    #line 1643 
    rx_desc->wb.upper.status_error &= 4294967040U;
    #line 1646 
    if ((long)(cleaned_count > 15) != 0L) {
      #line 1647 
      (*(adapter->alloc_rx_buf))(rx_ring,cleaned_count,2592U);
      #line 1649 
      cleaned_count = 0;
    }
    #line 1653 
    rx_desc = next_rxd;
    #line 1654 
    buffer_info = next_buffer;
    #line 1656 
    staterr = rx_desc->wb.upper.status_error;
  }
  #line 1658 
  rx_ring->next_to_clean = (unsigned short)i;
  #line 1660 
  cleaned_count = e1000_desc_unused(rx_ring);
  #line 1661 
  if (cleaned_count != 0) 
                          #line 1662 
                          (*(adapter->alloc_rx_buf))(rx_ring,cleaned_count,2592U);
  #line 1664 
  adapter->total_rx_bytes += total_rx_bytes;
  #line 1665 
  adapter->total_rx_packets += total_rx_packets;
  #line 1666 
  return cleaned;
}

#line 1673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_clean_rx_ring(struct e1000_ring *rx_ring)
{
  #line 1676 
  struct e1000_buffer *buffer_info;
  #line 1677 
  struct e1000_ps_page *ps_page;
  #line 1679 
  unsigned int i;
  #line 1679 
  unsigned int j;
  #line 1675 
  struct e1000_adapter *adapter = rx_ring->adapter;
  #line 1678 
  struct pci_dev *pdev = adapter->pdev;
  #line 1682 
  i = 0U;
  #line 1682 
  while (rx_ring->count > i) {
    #line 1683 
    buffer_info = rx_ring->buffer_info + (unsigned long)i;
    #line 1684 
    if (buffer_info->dma != 0ULL) {
      #line 1685 
      if (adapter->clean_rx == & e1000_clean_rx_irq) 
                                                     #line 1686 
                                                     dma_unmap_single_attrs(& pdev->dev,buffer_info->dma,(unsigned long)adapter->rx_buffer_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      else 
        #line 1689 
        if (adapter->clean_rx == & e1000_clean_jumbo_rx_irq) 
                                                             #line 1690 
                                                             dma_unmap_page_attrs(& pdev->dev,buffer_info->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
        else 
          #line 1692 
          if (adapter->clean_rx == & e1000_clean_rx_irq_ps) 
                                                            #line 1693 
                                                            dma_unmap_single_attrs(& pdev->dev,buffer_info->dma,(unsigned long)adapter->rx_ps_bsize0,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 1696 
      buffer_info->dma = 0ULL;
    }
    #line 1699 
    if (buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.page != (struct page *)0) {
      #line 1700 
      put_page(buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.page);
      #line 1701 
      buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.page = (struct page *)0;
    }
    #line 1704 
    if (buffer_info->skb != (struct sk_buff *)0) {
      #line 1705 
      consume_skb(buffer_info->skb);
      #line 1706 
      buffer_info->skb = (struct sk_buff *)0;
    }
    #line 1709 
    j = 0U;
    #line 1709 
    while (j <= 2U) {
      #line 1710 
      ps_page = buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.ps_pages + (unsigned long)j;
      #line 1711 
      if (ps_page->page == (struct page *)0) 
                                             #line 1712 
                                             break;
      #line 1713 
      dma_unmap_page_attrs(& pdev->dev,ps_page->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 1715 
      ps_page->dma = 0ULL;
      #line 1716 
      put_page(ps_page->page);
      #line 1717 
      ps_page->page = (struct page *)0;
      #line 1709 
      j ++;
    }
    #line 1682 
    i ++;
  }
  #line 1722 
  if (rx_ring->rx_skb_top != (struct sk_buff *)0) {
    #line 1723 
    consume_skb(rx_ring->rx_skb_top);
    #line 1724 
    rx_ring->rx_skb_top = (struct sk_buff *)0;
  }
  #line 1728 
  memset(rx_ring->desc,0,(unsigned long)rx_ring->size);
  #line 1730 
  rx_ring->next_to_clean = (unsigned short)0U;
  #line 1731 
  rx_ring->next_to_use = (unsigned short)0U;
  #line 1732 
  adapter->flags2 &= 4294967291U;
  #line 1733 
  return;
}

#line 1735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_downshift_workaround(struct work_struct *work)
{
  #line 1737 
  void *__mptr;
  #line 1737 
  __mptr = (void *)work;
  #line 1737 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709539368U));
  #line 1741 
  if ((int)test_bit(3L,& adapter->state) != 0) 
                                               #line 1742 
                                               return;
  #line 1744 
  e1000e_gig_downshift_workaround_ich8lan(& adapter->hw);
  #line 1745 
  return;
}

#line 1752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static irqreturn_t e1000_intr_msi(int irq, void *data)
{
  #line 1754 
  struct net_device *netdev = (struct net_device *)data;
  #line 1755 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1756 
  struct e1000_hw *hw = & adapter->hw;
  #line 1757 
  u32 icr = __er32(hw,192UL);
  #line 1760 
  if ((icr & 4U) != 0U) {
    #line 1761 
    hw->mac.get_link_status = (_Bool)1;
    #line 1765 
    if (((unsigned long)adapter->flags & 33554432UL) != 0UL) {
      #line 1765 
      if ((__er32(hw,8UL) & 2U) == 0U) 
                                       #line 1767 
                                       cif_schedule_work(& adapter->downshift_task);
    }
    #line 1773 
    if ((int)netif_carrier_ok(netdev) != 0) 
      #line 1773 
      if (((unsigned long)adapter->flags & 16777216UL) != 0UL) {
        #line 1776 
        u32 rctl = __er32(hw,256UL);
        #line 1778 
        __ew32(hw,256UL,rctl & 4294967293U);
        #line 1779 
        adapter->flags |= 1073741824U;
      }
    #line 1782 
    if (! test_bit(3L,& adapter->state)) 
                                         #line 1783 
                                         cif_mod_timer(& adapter->watchdog_timer,jiffies + 1UL);
  }
  #line 1787 
  if ((icr & 4194304U) != 0U && hw->mac.type > (unsigned int)e1000_pch2lan) {
    #line 1788 
    u32 pbeccsts = __er32(hw,4108UL);
    #line 1790 
    adapter->corr_errors += pbeccsts & 255U;
    #line 1792 
    adapter->uncorr_errors += (pbeccsts >> 8) & 255U;
    #line 1797 
    cif_schedule_work(& adapter->reset_task);
    #line 1800 
    return IRQ_HANDLED;
  }
  #line 1803 
  if ((int)napi_schedule_prep(& adapter->napi) != 0) {
    #line 1804 
    adapter->total_tx_bytes = 0U;
    #line 1805 
    adapter->total_tx_packets = 0U;
    #line 1806 
    adapter->total_rx_bytes = 0U;
    #line 1807 
    adapter->total_rx_packets = 0U;
    #line 1808 
    __napi_schedule(& adapter->napi);
  }
  #line 1811 
  return IRQ_HANDLED;
}

#line 1819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static irqreturn_t e1000_intr(int irq, void *data)
{
  #line 1824 
  u32 rctl;
  #line 1821 
  struct net_device *netdev = (struct net_device *)data;
  #line 1822 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1823 
  struct e1000_hw *hw = & adapter->hw;
  #line 1824 
  u32 icr = __er32(hw,192UL);
  #line 1826 
  if (icr == 0U) 
                 #line 1827 
                 return IRQ_NONE;
  else {
    #line 1826 
    if ((int)test_bit(3L,& adapter->state) != 0) 
                                                 #line 1827 
                                                 return IRQ_NONE;
  }
  #line 1832 
  if ((icr & 2147483648U) == 0U) 
                                 #line 1833 
                                 return IRQ_NONE;
  #line 1840 
  if ((icr & 4U) != 0U) {
    #line 1841 
    hw->mac.get_link_status = (_Bool)1;
    #line 1845 
    if (((unsigned long)adapter->flags & 33554432UL) != 0UL) {
      #line 1845 
      if ((__er32(hw,8UL) & 2U) == 0U) 
                                       #line 1847 
                                       cif_schedule_work(& adapter->downshift_task);
    }
    #line 1854 
    if ((int)netif_carrier_ok(netdev) != 0) 
      #line 1854 
      if (((unsigned long)adapter->flags & 16777216UL) != 0UL) {
        #line 1857 
        rctl = __er32(hw,256UL);
        #line 1858 
        __ew32(hw,256UL,rctl & 4294967293U);
        #line 1859 
        adapter->flags |= 1073741824U;
      }
    #line 1862 
    if (! test_bit(3L,& adapter->state)) 
                                         #line 1863 
                                         cif_mod_timer(& adapter->watchdog_timer,jiffies + 1UL);
  }
  #line 1867 
  if ((icr & 4194304U) != 0U && hw->mac.type > (unsigned int)e1000_pch2lan) {
    #line 1868 
    u32 pbeccsts = __er32(hw,4108UL);
    #line 1870 
    adapter->corr_errors += pbeccsts & 255U;
    #line 1872 
    adapter->uncorr_errors += (pbeccsts >> 8) & 255U;
    #line 1877 
    cif_schedule_work(& adapter->reset_task);
    #line 1880 
    return IRQ_HANDLED;
  }
  #line 1883 
  if ((int)napi_schedule_prep(& adapter->napi) != 0) {
    #line 1884 
    adapter->total_tx_bytes = 0U;
    #line 1885 
    adapter->total_tx_packets = 0U;
    #line 1886 
    adapter->total_rx_bytes = 0U;
    #line 1887 
    adapter->total_rx_packets = 0U;
    #line 1888 
    __napi_schedule(& adapter->napi);
  }
  #line 1891 
  return IRQ_HANDLED;
}

#line 1894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static irqreturn_t e1000_msix_other(int irq, void *data)
{
  #line 1896 
  struct net_device *netdev = (struct net_device *)data;
  #line 1897 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1898 
  struct e1000_hw *hw = & adapter->hw;
  #line 1899 
  u32 icr = __er32(hw,192UL);
  #line 1901 
  if ((adapter->eiac_mask & icr) != 0U) 
                                        #line 1902 
                                        __ew32(hw,200UL,adapter->eiac_mask & icr);
  #line 1904 
  if ((icr & 4U) != 0U) {
    #line 1905 
    hw->mac.get_link_status = (_Bool)1;
    #line 1907 
    if (! test_bit(3L,& adapter->state)) 
                                         #line 1908 
                                         cif_mod_timer(& adapter->watchdog_timer,jiffies + 1UL);
  }
  #line 1911 
  if (! test_bit(3L,& adapter->state)) 
                                       #line 1912 
                                       __ew32(hw,208UL,17236548U);
  #line 1914 
  return IRQ_HANDLED;
}

#line 1917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static irqreturn_t e1000_intr_msix_tx(int irq, void *data)
{
  #line 1919 
  struct net_device *netdev = (struct net_device *)data;
  #line 1920 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1921 
  struct e1000_hw *hw = & adapter->hw;
  #line 1922 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  #line 1924 
  adapter->total_tx_bytes = 0U;
  #line 1925 
  adapter->total_tx_packets = 0U;
  #line 1927 
  if (! e1000_clean_tx_irq(tx_ring)) 
                                     #line 1929 
                                     __ew32(hw,200UL,tx_ring->ims_val);
  #line 1931 
  if (! test_bit(3L,& adapter->state)) 
                                       #line 1932 
                                       __ew32(hw,208UL,(adapter->tx_ring)->ims_val);
  #line 1934 
  return IRQ_HANDLED;
}

#line 1937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static irqreturn_t e1000_intr_msix_rx(int irq, void *data)
{
  #line 1939 
  struct net_device *netdev = (struct net_device *)data;
  #line 1940 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1941 
  struct e1000_ring *rx_ring = adapter->rx_ring;
  #line 1946 
  if (rx_ring->set_itr != 0) {
    #line 1947 
    unsigned int tmp_0;
    #line 1947 
    if (rx_ring->itr_val != 0U) 
                                #line 1947 
                                tmp_0 = 1000000000U / (rx_ring->itr_val * 256U); else 
                                                                    #line 1947 
                                                                    tmp_0 = 0U;
    #line 1947 
    u32 itr = tmp_0;
    #line 1950 
    writel(itr,rx_ring->itr_register);
    #line 1951 
    rx_ring->set_itr = 0;
  }
  #line 1954 
  if ((int)napi_schedule_prep(& adapter->napi) != 0) {
    #line 1955 
    adapter->total_rx_bytes = 0U;
    #line 1956 
    adapter->total_rx_packets = 0U;
    #line 1957 
    __napi_schedule(& adapter->napi);
  }
  #line 1959 
  return IRQ_HANDLED;
}

#line 1968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_configure_msix(struct e1000_adapter *adapter)
{
  #line 1974 
  u32 ctrl_ext;
  #line 1970 
  struct e1000_hw *hw = & adapter->hw;
  #line 1971 
  struct e1000_ring *rx_ring = adapter->rx_ring;
  #line 1972 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  #line 1973 
  int vector = 0;
  #line 1974 
  u32 ivar = 0U;
  #line 1976 
  adapter->eiac_mask = 0U;
  #line 1979 
  if (hw->mac.type == (unsigned int)e1000_82574) {
    #line 1980 
    u32 rfctl = __er32(hw,20488UL);
    #line 1982 
    rfctl |= 4096U;
    #line 1983 
    __ew32(hw,20488UL,rfctl);
  }
  #line 1987 
  rx_ring->ims_val = 1048576U;
  #line 1988 
  adapter->eiac_mask |= rx_ring->ims_val;
  #line 1989 
  if (rx_ring->itr_val != 0U) 
                              #line 1990 
                              writel(1000000000U / (rx_ring->itr_val * 256U),rx_ring->itr_register); else 
                                                                    #line 1993 
                                                                    writel(1U,rx_ring->itr_register);
  #line 1994 
  ivar = (unsigned int)(vector | 8);
  #line 1997 
  tx_ring->ims_val = 4194304U;
  #line 1998 
  vector ++;
  #line 1999 
  if (tx_ring->itr_val != 0U) 
                              #line 2000 
                              writel(1000000000U / (tx_ring->itr_val * 256U),tx_ring->itr_register); else 
                                                                    #line 2003 
                                                                    writel(1U,tx_ring->itr_register);
  #line 2004 
  adapter->eiac_mask |= tx_ring->ims_val;
  #line 2005 
  ivar = ((unsigned int)(vector << 8) | ivar) | 2048U;
  #line 2008 
  vector ++;
  #line 2009 
  ivar = ((unsigned int)(vector << 16) | ivar) | 524288U;
  #line 2010 
  if (rx_ring->itr_val != 0U) 
                              #line 2011 
                              writel(1000000000U / (rx_ring->itr_val * 256U),hw->hw_addr + (unsigned long)((vector + 58) * 4)); else 
                                                                    #line 2014 
                                                                    writel(1U,hw->hw_addr + (unsigned long)((vector + 58) * 4));
  #line 2017 
  ivar |= 2147483648U;
  #line 2019 
  __ew32(hw,228UL,ivar);
  #line 2022 
  ctrl_ext = __er32(hw,24UL) & 4160749567U;
  #line 2023 
  ctrl_ext |= 2164260864U;
  #line 2024 
  __ew32(hw,24UL,ctrl_ext);
  #line 2025 
  __er32(hw,8UL);
  #line 2026 
  return;
}

#line 2028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_reset_interrupt_capability(struct e1000_adapter *adapter)
{
  #line 2030 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    #line 2031 
    pci_disable_msix(adapter->pdev);
    #line 2032 
    kfree((void *)adapter->msix_entries);
    #line 2033 
    adapter->msix_entries = (struct msix_entry *)0;
  }
  else 
    #line 2034 
    if (((unsigned long)adapter->flags & 134217728UL) != 0UL) {
      #line 2035 
      pci_disable_msi(adapter->pdev);
      #line 2036 
      adapter->flags &= 4160749567U;
    }
  #line 2038 
  return;
}

#line 2046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_set_interrupt_capability(struct e1000_adapter *adapter)
{
  #line 2048 
  int err;
  #line 2049 
  int i;
  #line 2051 
  switch (adapter->int_mode) {
    #line 2052 
    case 2: 
            #line 2052 
    ;
    #line 2053 
    if (((unsigned long)adapter->flags & 1024UL) != 0UL) {
      #line 2054 
      adapter->num_vectors = 3U;
      #line 2055 
      adapter->msix_entries = (struct msix_entry *)kcalloc((unsigned long)adapter->num_vectors,8UL,3264U);
      #line 2059 
      if (adapter->msix_entries != (struct msix_entry *)0) {
        #line 2060 
        struct e1000_adapter *a = adapter;
        #line 2062 
        i = 0;
        #line 2062 
        while (adapter->num_vectors > (unsigned int)i) {
          #line 2063 
          (adapter->msix_entries + (unsigned long)i)->entry = (unsigned short)i;
          #line 2062 
          i ++;
        }
        #line 2065 
        err = pci_enable_msix_range(a->pdev,a->msix_entries,(int)a->num_vectors,(int)a->num_vectors);
        #line 2069 
        if (err > 0) 
                     #line 2070 
                     return;
      }
      #line 2073 
      netdev_err(adapter->netdev,(char *)"Failed to initialize MSI-X interrupts.  Falling back to MSI interrupts.\n");
      #line 2074 
      e1000e_reset_interrupt_capability(adapter);
    }
    #line 2076 
    adapter->int_mode = 1;
    #line 2078 
    case 1: 
            #line 2078 
    ;
    #line 2079 
    if (pci_enable_msi(adapter->pdev) == 0) 
                                            #line 2080 
                                            adapter->flags |= 134217728U;
    else {
      #line 2082 
      adapter->int_mode = 0;
      #line 2083 
      netdev_err(adapter->netdev,(char *)"Failed to initialize MSI interrupts.  Falling back to legacy interrupts.\n");
    }
    #line 2086 
    case 0: 
            #line 2086 
    ;
    #line 2088 
    break;
  }
  #line 2092 
  adapter->num_vectors = 1U;
  #line 2093 
  return;
}

#line 2101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_request_msix(struct e1000_adapter *adapter)
{
  #line 2103 
  struct net_device *netdev = adapter->netdev;
  #line 2104 
  int err = 0;
  #line 2104 
  int vector = 0;
  #line 2106 
  if (cif_strlen((char *)(& netdev->name)) <= 10UL) 
                                                    #line 2107 
                                                    snprintf((char *)(& (adapter->rx_ring)->name),20UL,(char *)"%.14s-rx-0",(char *)(& netdev->name)); else 
                                                                    #line 2111 
                                                                    memcpy((void *)(& (adapter->rx_ring)->name),(void *)(& netdev->name),16UL);
  #line 2112 
  err = cif_request_irq((adapter->msix_entries + (unsigned long)vector)->vector,& e1000_intr_msix_rx,0UL,(char *)(& (adapter->rx_ring)->name),(void *)netdev);
  #line 2115 
  if (err != 0) 
                #line 2116 
                return err;
  #line 2117 
  (adapter->rx_ring)->itr_register = adapter->hw.hw_addr + (unsigned long)((vector + 58) * 4);
  #line 2119 
  (adapter->rx_ring)->itr_val = adapter->itr;
  #line 2120 
  vector ++;
  #line 2122 
  if (cif_strlen((char *)(& netdev->name)) <= 10UL) 
                                                    #line 2123 
                                                    snprintf((char *)(& (adapter->tx_ring)->name),20UL,(char *)"%.14s-tx-0",(char *)(& netdev->name)); else 
                                                                    #line 2127 
                                                                    memcpy((void *)(& (adapter->tx_ring)->name),(void *)(& netdev->name),16UL);
  #line 2128 
  err = cif_request_irq((adapter->msix_entries + (unsigned long)vector)->vector,& e1000_intr_msix_tx,0UL,(char *)(& (adapter->tx_ring)->name),(void *)netdev);
  #line 2131 
  if (err != 0) 
                #line 2132 
                return err;
  #line 2133 
  (adapter->tx_ring)->itr_register = adapter->hw.hw_addr + (unsigned long)((vector + 58) * 4);
  #line 2135 
  (adapter->tx_ring)->itr_val = adapter->itr;
  #line 2136 
  vector ++;
  #line 2138 
  err = cif_request_irq((adapter->msix_entries + (unsigned long)vector)->vector,& e1000_msix_other,0UL,(char *)(& netdev->name),(void *)netdev);
  #line 2140 
  if (err != 0) 
                #line 2141 
                return err;
  #line 2143 
  e1000_configure_msix(adapter);
  #line 2145 
  return 0;
}

#line 2154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_request_irq(struct e1000_adapter *adapter)
{
  #line 2157 
  int err;
  #line 2156 
  struct net_device *netdev = adapter->netdev;
  #line 2159 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    #line 2160 
    err = e1000_request_msix(adapter);
    #line 2161 
    if (err == 0) 
                  #line 2162 
                  return err;
    #line 2164 
    e1000e_reset_interrupt_capability(adapter);
    #line 2165 
    adapter->int_mode = 1;
    #line 2166 
    e1000e_set_interrupt_capability(adapter);
  }
  #line 2168 
  if (((unsigned long)adapter->flags & 134217728UL) != 0UL) {
    #line 2169 
    err = cif_request_irq((adapter->pdev)->irq,& e1000_intr_msi,0UL,(char *)(& netdev->name),(void *)netdev);
    #line 2171 
    if (err == 0) 
                  #line 2172 
                  return err;
    #line 2175 
    e1000e_reset_interrupt_capability(adapter);
    #line 2176 
    adapter->int_mode = 0;
  }
  #line 2179 
  err = cif_request_irq((adapter->pdev)->irq,& e1000_intr,128UL,(char *)(& netdev->name),(void *)netdev);
  #line 2181 
  if (err != 0) 
                #line 2182 
                netdev_err(adapter->netdev,(char *)"Unable to allocate interrupt, Error: %d\n",err);
  #line 2184 
  return err;
}

#line 2187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_free_irq(struct e1000_adapter *adapter)
{
  #line 2189 
  struct net_device *netdev = adapter->netdev;
  #line 2191 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    #line 2192 
    int vector = 0;
    #line 2194 
    cif_free_irq((adapter->msix_entries + (unsigned long)vector)->vector,(void *)netdev);
    #line 2195 
    vector ++;
    #line 2197 
    cif_free_irq((adapter->msix_entries + (unsigned long)vector)->vector,(void *)netdev);
    #line 2198 
    vector ++;
    #line 2201 
    cif_free_irq((adapter->msix_entries + (unsigned long)vector)->vector,(void *)netdev);
    #line 2202 
    return;
  }
  #line 2205 
  cif_free_irq((adapter->pdev)->irq,(void *)netdev);
  #line 2206 
  return;
}

#line 2211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_irq_disable(struct e1000_adapter *adapter)
{
  #line 2213 
  struct e1000_hw *hw = & adapter->hw;
  #line 2215 
  __ew32(hw,216UL,4294967295U);
  #line 2216 
  if (adapter->msix_entries != (struct msix_entry *)0) 
                                                       #line 2217 
                                                       __ew32(hw,220UL,0U);
  #line 2218 
  __er32(hw,8UL);
  #line 2220 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    #line 2221 
    int i;
    #line 2223 
    i = 0;
    #line 2223 
    while (adapter->num_vectors > (unsigned int)i) {
      #line 2224 
      synchronize_irq((adapter->msix_entries + (unsigned long)i)->vector);
      #line 2223 
      i ++;
    }
  }
  else 
       #line 2226 
       synchronize_irq((adapter->pdev)->irq);
  #line 2227 
  return;
}

#line 2233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_irq_enable(struct e1000_adapter *adapter)
{
  #line 2235 
  struct e1000_hw *hw = & adapter->hw;
  #line 2237 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    #line 2238 
    __ew32(hw,220UL,adapter->eiac_mask & 32505856U);
    #line 2239 
    __ew32(hw,208UL,adapter->eiac_mask | 17236548U);
  }
  else 
    #line 2241 
    if (hw->mac.type > (unsigned int)e1000_pch2lan) 
                                                    #line 2242 
                                                    __ew32(hw,208UL,4194461U); else 
                                                                    #line 2244 
                                                                    __ew32(hw,208UL,157U);
  #line 2246 
  __er32(hw,8UL);
  #line 2247 
  return;
}

#line 2258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_get_hw_control(struct e1000_adapter *adapter)
{
  #line 2261 
  u32 ctrl_ext;
  #line 2262 
  u32 swsm;
  #line 2260 
  struct e1000_hw *hw = & adapter->hw;
  #line 2265 
  if (((unsigned long)adapter->flags & 64UL) != 0UL) {
    #line 2266 
    swsm = __er32(hw,23376UL);
    #line 2267 
    __ew32(hw,23376UL,swsm | 8U);
  }
  else 
    #line 2268 
    if (((unsigned long)adapter->flags & 32UL) != 0UL) {
      #line 2269 
      ctrl_ext = __er32(hw,24UL);
      #line 2270 
      __ew32(hw,24UL,ctrl_ext | 268435456U);
    }
  #line 2272 
  return;
}

#line 2284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_release_hw_control(struct e1000_adapter *adapter)
{
  #line 2287 
  u32 ctrl_ext;
  #line 2288 
  u32 swsm;
  #line 2286 
  struct e1000_hw *hw = & adapter->hw;
  #line 2291 
  if (((unsigned long)adapter->flags & 64UL) != 0UL) {
    #line 2292 
    swsm = __er32(hw,23376UL);
    #line 2293 
    __ew32(hw,23376UL,swsm & 4294967287U);
  }
  else 
    #line 2294 
    if (((unsigned long)adapter->flags & 32UL) != 0UL) {
      #line 2295 
      ctrl_ext = __er32(hw,24UL);
      #line 2296 
      __ew32(hw,24UL,ctrl_ext & 4026531839U);
    }
  #line 2298 
  return;
}

#line 2303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_alloc_ring_dma(struct e1000_adapter *adapter, struct e1000_ring *ring)
{
  #line 2306 
  struct pci_dev *pdev = adapter->pdev;
  #line 2308 
  ring->desc = dma_alloc_coherent(& pdev->dev,(unsigned long)ring->size,& ring->dma,3264U);
  #line 2310 
  if (ring->desc == (void *)0) 
                               #line 2311 
                               return -12;
  #line 2313 
  return 0;
}

#line 2322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
int e1000e_setup_tx_resources(struct e1000_ring *tx_ring)
{
  #line 2325 
  int size;
  #line 2324 
  struct e1000_adapter *adapter = tx_ring->adapter;
  #line 2325 
  int err = -12;
  #line 2327 
  size = (int)(tx_ring->count * 40U);
  #line 2328 
  tx_ring->buffer_info = (struct e1000_buffer *)cif_vzalloc((unsigned long)size);
  #line 2329 
  if (tx_ring->buffer_info == (struct e1000_buffer *)0) 
                                                        #line 2330 
                                                        goto err;
  #line 2333 
  tx_ring->size = tx_ring->count * 16U;
  #line 2334 
  tx_ring->size = (tx_ring->size + 4095U) & 4294963200U;
  #line 2336 
  err = e1000_alloc_ring_dma(adapter,tx_ring);
  #line 2337 
  if (err != 0) 
                #line 2338 
                goto err;
  #line 2340 
  tx_ring->next_to_use = (unsigned short)0U;
  #line 2341 
  tx_ring->next_to_clean = (unsigned short)0U;
  #line 2343 
  return 0;
  #line 2344 
  err: 
       #line 2344 
  ;
  #line 2345 
  cif_vfree((void *)tx_ring->buffer_info);
  #line 2346 
  netdev_err(adapter->netdev,(char *)"Unable to allocate memory for the transmit descriptor ring\n");
  #line 2347 
  return err;
}

#line 2356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
int e1000e_setup_rx_resources(struct e1000_ring *rx_ring)
{
  #line 2359 
  struct e1000_buffer *buffer_info;
  #line 2360 
  int i;
  #line 2360 
  int size;
  #line 2360 
  int desc_len;
  #line 2358 
  struct e1000_adapter *adapter = rx_ring->adapter;
  #line 2360 
  int err = -12;
  #line 2362 
  size = (int)(rx_ring->count * 40U);
  #line 2363 
  rx_ring->buffer_info = (struct e1000_buffer *)cif_vzalloc((unsigned long)size);
  #line 2364 
  if (rx_ring->buffer_info == (struct e1000_buffer *)0) 
                                                        #line 2365 
                                                        goto err;
  #line 2367 
  i = 0;
  #line 2367 
  while (rx_ring->count > (unsigned int)i) {
    #line 2368 
    buffer_info = rx_ring->buffer_info + (unsigned long)i;
    #line 2369 
    buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.ps_pages = (struct e1000_ps_page *)kcalloc(3UL,16UL,3264U);
    #line 2372 
    if (buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.ps_pages == (struct e1000_ps_page *)0) 
      #line 2373 
      goto err_pages;
    #line 2367 
    i ++;
  }
  #line 2376 
  desc_len = 32;
  #line 2379 
  rx_ring->size = rx_ring->count * (unsigned int)desc_len;
  #line 2380 
  rx_ring->size = (rx_ring->size + 4095U) & 4294963200U;
  #line 2382 
  err = e1000_alloc_ring_dma(adapter,rx_ring);
  #line 2383 
  if (err != 0) 
                #line 2384 
                goto err_pages;
  #line 2386 
  rx_ring->next_to_clean = (unsigned short)0U;
  #line 2387 
  rx_ring->next_to_use = (unsigned short)0U;
  #line 2388 
  rx_ring->rx_skb_top = (struct sk_buff *)0;
  #line 2390 
  return 0;
  #line 2392 
  err_pages: 
             #line 2392 
  ;
  #line 2393 
  i = 0;
  #line 2393 
  while (rx_ring->count > (unsigned int)i) {
    #line 2394 
    buffer_info = rx_ring->buffer_info + (unsigned long)i;
    #line 2395 
    kfree((void *)buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.ps_pages);
    #line 2393 
    i ++;
  }
  #line 2397 
  err: 
       #line 2397 
  ;
  #line 2398 
  cif_vfree((void *)rx_ring->buffer_info);
  #line 2399 
  netdev_err(adapter->netdev,(char *)"Unable to allocate memory for the receive descriptor ring\n");
  #line 2400 
  return err;
}

#line 2407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_clean_tx_ring(struct e1000_ring *tx_ring)
{
  #line 2410 
  struct e1000_buffer *buffer_info;
  #line 2411 
  unsigned long size;
  #line 2412 
  unsigned int i;
  #line 2409 
  struct e1000_adapter *adapter = tx_ring->adapter;
  #line 2414 
  i = 0U;
  #line 2414 
  while (tx_ring->count > i) {
    #line 2415 
    buffer_info = tx_ring->buffer_info + (unsigned long)i;
    #line 2416 
    e1000_put_txbuf(tx_ring,buffer_info,(_Bool)0);
    #line 2414 
    i ++;
  }
  #line 2419 
  netdev_reset_queue(adapter->netdev);
  #line 2420 
  size = (unsigned long)tx_ring->count * 40UL;
  #line 2421 
  memset((void *)tx_ring->buffer_info,0,size);
  #line 2423 
  memset(tx_ring->desc,0,(unsigned long)tx_ring->size);
  #line 2425 
  tx_ring->next_to_use = (unsigned short)0U;
  #line 2426 
  tx_ring->next_to_clean = (unsigned short)0U;
  #line 2427 
  return;
}

#line 2435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_free_tx_resources(struct e1000_ring *tx_ring)
{
  #line 2437 
  struct e1000_adapter *adapter = tx_ring->adapter;
  #line 2438 
  struct pci_dev *pdev = adapter->pdev;
  #line 2440 
  e1000_clean_tx_ring(tx_ring);
  #line 2442 
  cif_vfree((void *)tx_ring->buffer_info);
  #line 2443 
  tx_ring->buffer_info = (struct e1000_buffer *)0;
  #line 2445 
  dma_free_coherent(& pdev->dev,(unsigned long)tx_ring->size,tx_ring->desc,tx_ring->dma);
  #line 2447 
  tx_ring->desc = (void *)0;
  #line 2448 
  return;
}

#line 2456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_free_rx_resources(struct e1000_ring *rx_ring)
{
  #line 2460 
  int i;
  #line 2458 
  struct e1000_adapter *adapter = rx_ring->adapter;
  #line 2459 
  struct pci_dev *pdev = adapter->pdev;
  #line 2462 
  e1000_clean_rx_ring(rx_ring);
  #line 2464 
  i = 0;
  #line 2464 
  while (rx_ring->count > (unsigned int)i) {
    #line 2465 
    kfree((void *)(rx_ring->buffer_info + (unsigned long)i)->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_164.ps_pages);
    #line 2464 
    i ++;
  }
  #line 2467 
  cif_vfree((void *)rx_ring->buffer_info);
  #line 2468 
  rx_ring->buffer_info = (struct e1000_buffer *)0;
  #line 2470 
  dma_free_coherent(& pdev->dev,(unsigned long)rx_ring->size,rx_ring->desc,rx_ring->dma);
  #line 2472 
  rx_ring->desc = (void *)0;
  #line 2473 
  return;
}

#line 2491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static unsigned int e1000_update_itr(u16 itr_setting, int packets, int bytes)
{
  #line 2493 
  unsigned int retval = (unsigned int)itr_setting;
  #line 2495 
  if (packets == 0) 
                    #line 2496 
                    return (unsigned int)itr_setting;
  #line 2498 
  switch ((int)itr_setting) {
    #line 2499 
    case 0: 
            #line 2499 
    ;
    #line 2501 
    if (bytes / packets > 8000) 
                                #line 2502 
                                retval = 2U;
    else 
      #line 2503 
      if (packets <= 4 && bytes > 512) 
                                       #line 2504 
                                       retval = 1U;
    #line 2505 
    break;
    #line 2506 
    case 1: 
            #line 2506 
    ;
    #line 2507 
    if (bytes > 10000) {
      #line 2509 
      if (bytes / packets > 8000) 
                                  #line 2510 
                                  retval = 2U;
      else 
        #line 2511 
        if (packets <= 9 || bytes / packets > 1200) 
                                                    #line 2512 
                                                    retval = 2U;
        else 
          #line 2513 
          if (packets > 35) 
                            #line 2514 
                            retval = 0U;
    }
    else 
      #line 2515 
      if (bytes / packets > 2000) 
                                  #line 2516 
                                  retval = 2U;
      else 
        #line 2517 
        if (packets <= 2 && bytes <= 511) 
                                          #line 2518 
                                          retval = 0U;
    #line 2520 
    break;
    #line 2521 
    case 2: 
            #line 2521 
    ;
    #line 2522 
    if (bytes > 25000) {
      #line 2523 
      if (packets > 35) 
                        #line 2524 
                        retval = 1U;
    }
    else 
      #line 2525 
      if (bytes <= 5999) 
                         #line 2526 
                         retval = 1U;
    #line 2528 
    break;
  }
  #line 2531 
  return retval;
}

#line 2534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_set_itr(struct e1000_adapter *adapter)
{
  #line 2565 
  u16 __UNIQUE_ID___x544;
  #line 2565 
  int tmp_1;
  #line 2536 
  u16 current_itr;
  #line 2537 
  u32 new_itr = adapter->itr;
  #line 2540 
  if ((unsigned int)adapter->link_speed != 1000U) {
    #line 2541 
    current_itr = (unsigned short)0U;
    #line 2542 
    new_itr = 4000U;
    #line 2543 
    goto set_itr_now;
  }
  #line 2546 
  if (((unsigned long)adapter->flags2 & 256UL) != 0UL) {
    #line 2547 
    new_itr = 0U;
    #line 2548 
    goto set_itr_now;
  }
  #line 2551 
  adapter->tx_itr = (unsigned short)e1000_update_itr((unsigned short)((int)adapter->tx_itr),
                       (int)adapter->total_tx_packets,
                       (int)adapter->total_tx_bytes);
  #line 2555 
  if (adapter->itr_setting == 3U && (unsigned int)adapter->tx_itr == 0U) 
    #line 2556 
    adapter->tx_itr = (unsigned short)1U;
  #line 2558 
  adapter->rx_itr = (unsigned short)e1000_update_itr((unsigned short)((int)adapter->rx_itr),
                         (int)adapter->total_rx_packets,
                         (int)adapter->total_rx_bytes);
  #line 2562 
  if (adapter->itr_setting == 3U && (unsigned int)adapter->rx_itr == 0U) 
    #line 2563 
    adapter->rx_itr = (unsigned short)1U;
  {
    #line 2565 
    __UNIQUE_ID___x544 = adapter->rx_itr;
    #line 2565 
    u16 __UNIQUE_ID___y545 = adapter->tx_itr;
    #line 2565 
    if ((int)__UNIQUE_ID___x544 > (int)__UNIQUE_ID___y545) 
                                                           #line 2565 
                                                           tmp_1 = (int)__UNIQUE_ID___x544; else 
                                                                    #line 2565 
                                                                    tmp_1 = (int)__UNIQUE_ID___y545;
    }
  #line 2565 
  current_itr = (unsigned short)tmp_1;
  #line 2568 
  switch ((int)current_itr) {
    #line 2569 
    case 0: 
            #line 2569 
    ;
    #line 2570 
    new_itr = 70000U;
    #line 2571 
    break;
    #line 2572 
    case 1: 
            #line 2572 
    ;
    #line 2573 
    new_itr = 20000U;
    #line 2574 
    break;
    #line 2575 
    case 2: 
            #line 2575 
    ;
    #line 2576 
    new_itr = 4000U;
    #line 2577 
    break;
    #line 2578 
    default: 
             #line 2578 
    ;
    #line 2579 
    break;
  }
  #line 2582 
  set_itr_now: 
               #line 2582 
  ;
  #line 2583 
  if (adapter->itr != new_itr) {
    #line 2588 
    if (adapter->itr < new_itr) {
      #line 2589 
      u32 tmp_3;
      #line 2589 
      u32 __UNIQUE_ID___x546;
      {
        #line 2589 
        __UNIQUE_ID___x546 = adapter->itr + (new_itr >> 2);
        #line 2589 
        u32 __UNIQUE_ID___y547 = new_itr;
        #line 2589 
        if (__UNIQUE_ID___x546 < __UNIQUE_ID___y547) 
                                                     #line 2589 
                                                     tmp_3 = __UNIQUE_ID___x546; else 
                                                                    #line 2589 
                                                                    tmp_3 = __UNIQUE_ID___y547;
        }
      #line 2588 
      new_itr = tmp_3;
    }
    else 
         #line 2588 
         new_itr = new_itr;
    #line 2590 
    adapter->itr = new_itr;
    #line 2591 
    (adapter->rx_ring)->itr_val = new_itr;
    #line 2592 
    if (adapter->msix_entries != (struct msix_entry *)0) 
                                                         #line 2593 
                                                         (adapter->rx_ring)->set_itr = 1; else 
                                                                    #line 2595 
                                                                    e1000e_write_itr(adapter,new_itr);
  }
  #line 2597 
  return;
}

#line 2608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_write_itr(struct e1000_adapter *adapter, u32 itr)
{
  #line 2611 
  unsigned int tmp;
  #line 2610 
  struct e1000_hw *hw = & adapter->hw;
  #line 2611 
  if (itr != 0U) 
                 #line 2611 
                 tmp = 1000000000U / (itr * 256U); else 
                                                        #line 2611 
                                                        tmp = 0U;
  #line 2611 
  u32 new_itr = tmp;
  #line 2613 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    #line 2614 
    int vector;
    #line 2616 
    vector = 0;
    #line 2616 
    while (adapter->num_vectors > (unsigned int)vector) {
      #line 2617 
      writel(new_itr,hw->hw_addr + (unsigned long)((vector + 58) * 4));
      #line 2616 
      vector ++;
    }
  }
  else 
       #line 2619 
       __ew32(hw,196UL,new_itr);
  #line 2620 
  return;
}

#line 2627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_alloc_queues(struct e1000_adapter *adapter)
{
  #line 2629 
  int size = 120;
  #line 2631 
  adapter->tx_ring = (struct e1000_ring *)kzalloc((unsigned long)size,3264U);
  #line 2632 
  if (adapter->tx_ring == (struct e1000_ring *)0) 
                                                  #line 2633 
                                                  goto err;
  #line 2634 
  (adapter->tx_ring)->count = (unsigned int)adapter->tx_ring_count;
  #line 2635 
  (adapter->tx_ring)->adapter = adapter;
  #line 2637 
  adapter->rx_ring = (struct e1000_ring *)kzalloc((unsigned long)size,3264U);
  #line 2638 
  if (adapter->rx_ring == (struct e1000_ring *)0) 
                                                  #line 2639 
                                                  goto err;
  #line 2640 
  (adapter->rx_ring)->count = (unsigned int)adapter->rx_ring_count;
  #line 2641 
  (adapter->rx_ring)->adapter = adapter;
  #line 2643 
  return 0;
  #line 2644 
  err: 
       #line 2644 
  ;
  #line 2645 
  netdev_err(adapter->netdev,(char *)"Unable to allocate memory for queues\n");
  #line 2646 
  kfree((void *)adapter->rx_ring);
  #line 2647 
  kfree((void *)adapter->tx_ring);
  #line 2648 
  return -12;
}

#line 2656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_poll(struct napi_struct *napi, int budget)
{
  #line 2658 
  void *__mptr;
  #line 2658 
  __mptr = (void *)napi;
  #line 2658 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709550576U));
  #line 2660 
  struct e1000_hw *hw = & adapter->hw;
  #line 2661 
  struct net_device *poll_dev = adapter->netdev;
  #line 2662 
  int tx_cleaned = 1;
  #line 2662 
  int work_done = 0;
  #line 2664 
  adapter = (struct e1000_adapter *)netdev_priv(poll_dev);
  #line 2666 
  if (adapter->msix_entries == (struct msix_entry *)0 || ((adapter->rx_ring)->ims_val & (adapter->tx_ring)->ims_val) != 0U) {
    #line 2668 
    tx_cleaned = (int)e1000_clean_tx_irq(adapter->tx_ring);
  }
  #line 2670 
  (*(adapter->clean_rx))(adapter->rx_ring,& work_done,budget);
  #line 2672 
  if (tx_cleaned == 0 || work_done == budget) 
                                              #line 2673 
                                              return budget;
  #line 2678 
  if ((long)((int)napi_complete_done(napi,work_done) != 0) != 0L) {
    #line 2679 
    if ((adapter->itr_setting & 3U) != 0U) 
                                           #line 2680 
                                           e1000_set_itr(adapter);
    #line 2681 
    if (! test_bit(3L,& adapter->state)) 
      #line 2682 
      if (adapter->msix_entries != (struct msix_entry *)0) 
                                                           #line 2683 
                                                           __ew32(hw,208UL,(adapter->rx_ring)->ims_val); else 
                                                                    #line 2685 
                                                                    e1000_irq_enable(adapter);
  }
  #line 2689 
  return work_done;
}

#line 2692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 2697 
  u32 vfta;
  #line 2697 
  u32 index;
  #line 2695 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 2696 
  struct e1000_hw *hw = & adapter->hw;
  #line 2700 
  if (((int)adapter->hw.mng_cookie.status & 2) != 0 && (int)adapter->mng_vlan_id == (int)vid) 
    #line 2703 
    return 0;
  #line 2706 
  if (((unsigned long)adapter->flags & 4UL) != 0UL) {
    #line 2707 
    index = (unsigned int)((int)vid >> 5) & 127U;
    #line 2708 
    vfta = readl(hw->hw_addr + ((unsigned long)(index << 2) + (unsigned long)22016U));
    #line 2709 
    vfta = (unsigned int)(1UL << ((int)vid & 31)) | vfta;
    #line 2710 
    (*(hw->mac.ops.write_vfta))(hw,index,vfta);
  }
  #line 2713 
  cif_set_bit((long)vid,(unsigned long *)(& adapter->active_vlans));
  #line 2715 
  return 0;
}

#line 2718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 2723 
  u32 vfta;
  #line 2723 
  u32 index;
  #line 2721 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 2722 
  struct e1000_hw *hw = & adapter->hw;
  #line 2725 
  if (((int)adapter->hw.mng_cookie.status & 2) != 0 && (int)adapter->mng_vlan_id == (int)vid) {
    #line 2729 
    e1000e_release_hw_control(adapter);
    #line 2730 
    return 0;
  }
  #line 2734 
  if (((unsigned long)adapter->flags & 4UL) != 0UL) {
    #line 2735 
    index = (unsigned int)((int)vid >> 5) & 127U;
    #line 2736 
    vfta = readl(hw->hw_addr + ((unsigned long)(index << 2) + (unsigned long)22016U));
    #line 2737 
    vfta = ~ ((unsigned int)(1UL << ((int)vid & 31))) & vfta;
    #line 2738 
    (*(hw->mac.ops.write_vfta))(hw,index,vfta);
  }
  #line 2741 
  cif_clear_bit_0((long)vid,(unsigned long *)(& adapter->active_vlans));
  #line 2743 
  return 0;
}

#line 2750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_vlan_filter_disable(struct e1000_adapter *adapter)
{
  #line 2754 
  u32 rctl;
  #line 2752 
  struct net_device *netdev = adapter->netdev;
  #line 2753 
  struct e1000_hw *hw = & adapter->hw;
  #line 2756 
  if (((unsigned long)adapter->flags & 4UL) != 0UL) {
    #line 2758 
    rctl = __er32(hw,256UL);
    #line 2759 
    rctl &= 4294180863U;
    #line 2760 
    __ew32(hw,256UL,rctl);
    #line 2762 
    if ((unsigned int)adapter->mng_vlan_id != 65535U) {
      #line 2763 
      e1000_vlan_rx_kill_vid(netdev,(unsigned short)129,(unsigned short)((int)adapter->mng_vlan_id));
      #line 2765 
      adapter->mng_vlan_id = (unsigned short)65535U;
    }
  }
  #line 2768 
  return;
}

#line 2774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_vlan_filter_enable(struct e1000_adapter *adapter)
{
  #line 2777 
  u32 rctl;
  #line 2776 
  struct e1000_hw *hw = & adapter->hw;
  #line 2779 
  if (((unsigned long)adapter->flags & 4UL) != 0UL) {
    #line 2781 
    rctl = __er32(hw,256UL);
    #line 2782 
    rctl |= 262144U;
    #line 2783 
    rctl &= 4294443007U;
    #line 2784 
    __ew32(hw,256UL,rctl);
  }
  #line 2786 
  return;
}

#line 2792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_vlan_strip_disable(struct e1000_adapter *adapter)
{
  #line 2795 
  u32 ctrl;
  #line 2794 
  struct e1000_hw *hw = & adapter->hw;
  #line 2798 
  ctrl = __er32(hw,0UL);
  #line 2799 
  ctrl &= 3221225471U;
  #line 2800 
  __ew32(hw,0UL,ctrl);
  #line 2801 
  return;
}

#line 2807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_vlan_strip_enable(struct e1000_adapter *adapter)
{
  #line 2810 
  u32 ctrl;
  #line 2809 
  struct e1000_hw *hw = & adapter->hw;
  #line 2813 
  ctrl = __er32(hw,0UL);
  #line 2814 
  ctrl |= 1073741824U;
  #line 2815 
  __ew32(hw,0UL,ctrl);
  #line 2816 
  return;
}

#line 2818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_update_mng_vlan(struct e1000_adapter *adapter)
{
  #line 2820 
  struct net_device *netdev = adapter->netdev;
  #line 2821 
  u16 vid = adapter->hw.mng_cookie.vlan_id;
  #line 2822 
  u16 old_vid = adapter->mng_vlan_id;
  #line 2824 
  if (((int)adapter->hw.mng_cookie.status & 2) != 0) {
    #line 2825 
    e1000_vlan_rx_add_vid(netdev,(unsigned short)129,(unsigned short)((int)vid));
    #line 2826 
    adapter->mng_vlan_id = vid;
  }
  #line 2829 
  if ((unsigned int)old_vid != 65535U && (int)vid != (int)old_vid) 
                                                                   #line 2830 
                                                                   e1000_vlan_rx_kill_vid(netdev,(unsigned short)129,(unsigned short)((int)old_vid));
  #line 2831 
  return;
}

#line 2833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_restore_vlan(struct e1000_adapter *adapter)
{
  #line 2835 
  u16 vid;
  #line 2837 
  e1000_vlan_rx_add_vid(adapter->netdev,(unsigned short)129,(unsigned short)0);
  #line 2839 
  vid = (unsigned short)cif_find_first_bit((unsigned long *)(& adapter->active_vlans),4096UL);
  #line 2839 
  while ((unsigned int)vid <= 4095U) {
    #line 2840 
    e1000_vlan_rx_add_vid(adapter->netdev,(unsigned short)129,(unsigned short)((int)vid));
    #line 2839 
    vid = (unsigned short)cif_find_next_bit((unsigned long *)(& adapter->active_vlans),4096UL,
                          (unsigned long)((int)vid + 1));
  }
  #line 2841 
  return;
}

#line 2843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_init_manageability_pt(struct e1000_adapter *adapter)
{
  #line 2846 
  u32 manc;
  #line 2846 
  u32 manc2h;
  #line 2846 
  u32 mdef;
  #line 2846 
  u32 i;
  #line 2846 
  u32 j;
  #line 2845 
  struct e1000_hw *hw = & adapter->hw;
  #line 2848 
  if (((unsigned long)adapter->flags & 1048576UL) == 0UL) 
                                                          #line 2849 
                                                          return;
  #line 2851 
  manc = __er32(hw,22560UL);
  #line 2857 
  manc |= 2097152U;
  #line 2858 
  manc2h = __er32(hw,22624UL);
  #line 2860 
  switch ((unsigned int)hw->mac.type) {
    #line 2861 
    default: 
             #line 2861 
    ;
    #line 2862 
    manc2h |= 96U;
    #line 2863 
    break;
    #line 2864 
    case (unsigned int)3: 
                          #line 2864 
    ;
    #line 2865 
    case (unsigned int)4: 
                          #line 2865 
    ;
    #line 2869 
    i = 0U;
    #line 2869 
    j = 0U;
    #line 2869 
    while (i <= 7U) {
      #line 2870 
      mdef = __er32(hw,(unsigned long)((i + 5668U) * 4U));
      #line 2873 
      if ((mdef & 4294964223U) != 0U) 
                                      #line 2874 
                                      goto __Cont;
      #line 2877 
      if (mdef != 0U) 
                      #line 2878 
                      manc2h = (unsigned int)(1UL << i) | manc2h;
      #line 2880 
      j |= mdef;
      #line 2869 
      __Cont: 
              #line 2869 
      i ++;
    }
    #line 2883 
    if (j == 3072U) 
                    #line 2884 
                    break;
    #line 2887 
    i = 0U;
    #line 2887 
    j = 0U;
    #line 2887 
    while (i <= 7U) {
      #line 2888 
      if (__er32(hw,(unsigned long)((i + 5668U) * 4U)) == 0U) {
        #line 2889 
        __ew32(hw,(unsigned long)((i + 5668U) * 4U),3072U);
        #line 2891 
        manc2h |= 2U;
        #line 2892 
        j ++;
        #line 2893 
        break;
      }
      #line 2887 
      i ++;
    }
    #line 2896 
    if (j == 0U) 
                 #line 2897 
                 netdev_warn(adapter->netdev,(char *)"Unable to create IPMI pass-through filter\n");
    #line 2898 
    break;
  }
  #line 2901 
  __ew32(hw,22624UL,manc2h);
  #line 2902 
  __ew32(hw,22560UL,manc);
  #line 2903 
  return;
}

#line 2911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_configure_tx(struct e1000_adapter *adapter)
{
  #line 2915 
  u64 tdba;
  #line 2916 
  u32 tdlen;
  #line 2916 
  u32 tctl;
  #line 2916 
  u32 tarc;
  #line 2913 
  struct e1000_hw *hw = & adapter->hw;
  #line 2914 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  #line 2919 
  tdba = tx_ring->dma;
  #line 2920 
  tdlen = tx_ring->count * 16U;
  #line 2921 
  __ew32(hw,14336UL,(unsigned int)tdba);
  #line 2922 
  __ew32(hw,14340UL,(unsigned int)(tdba >> 32));
  #line 2923 
  __ew32(hw,14344UL,tdlen);
  #line 2924 
  __ew32(hw,14352UL,0U);
  #line 2925 
  __ew32(hw,14360UL,0U);
  #line 2926 
  tx_ring->head = adapter->hw.hw_addr + 14352U;
  #line 2927 
  tx_ring->tail = adapter->hw.hw_addr + 14360U;
  #line 2929 
  writel(0U,tx_ring->head);
  #line 2930 
  if (((unsigned long)adapter->flags2 & 2048UL) != 0UL) 
                                                        #line 2931 
                                                        e1000e_update_tdt_wa(tx_ring,0U); else 
                                                                    #line 2933 
                                                                    writel(0U,tx_ring->tail);
  #line 2936 
  __ew32(hw,14368UL,adapter->tx_int_delay);
  #line 2938 
  __ew32(hw,14380UL,adapter->tx_abs_int_delay);
  #line 2940 
  if (((unsigned long)adapter->flags2 & 64UL) != 0UL) {
    #line 2941 
    u32 txdctl = __er32(hw,14376UL);
    #line 2943 
    txdctl &= 4290822336U;
    #line 2954 
    txdctl |= 21037343U;
    #line 2955 
    __ew32(hw,14376UL,txdctl);
  }
  #line 2958 
  ;
  #line 2958 
  __ew32(hw,14632UL,__er32(hw,14376UL));
  #line 2961 
  tctl = __er32(hw,1024UL);
  #line 2962 
  tctl &= 4294963215U;
  #line 2963 
  tctl |= 16777464U;
  #line 2966 
  if (((unsigned long)adapter->flags & 4194304UL) != 0UL) {
    #line 2967 
    tarc = __er32(hw,14400UL);
    #line 2972 
    tarc |= 2097152U;
    #line 2973 
    __ew32(hw,14400UL,tarc);
  }
  #line 2977 
  if (((unsigned long)adapter->flags & 8388608UL) != 0UL) {
    #line 2978 
    tarc = __er32(hw,14400UL);
    #line 2979 
    tarc |= 1U;
    #line 2980 
    __ew32(hw,14400UL,tarc);
    #line 2981 
    tarc = __er32(hw,14656UL);
    #line 2982 
    tarc |= 1U;
    #line 2983 
    __ew32(hw,14656UL,tarc);
  }
  #line 2987 
  adapter->txd_cmd = 50331648U;
  #line 2990 
  if (adapter->tx_int_delay != 0U) 
                                   #line 2991 
                                   adapter->txd_cmd |= 2147483648U;
  #line 2994 
  adapter->txd_cmd |= 134217728U;
  #line 2996 
  __ew32(hw,1024UL,tctl);
  #line 2998 
  (*(hw->mac.ops.config_collision_dist))(hw);
  #line 3001 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) {
    #line 3002 
    u32 reg_val;
    #line 3004 
    reg_val = __er32(hw,3880UL);
    #line 3005 
    reg_val |= 65536U;
    #line 3006 
    __ew32(hw,3880UL,reg_val);
    #line 3008 
    reg_val = __er32(hw,14400UL);
    #line 3013 
    reg_val &= 3489660927U;
    #line 3014 
    reg_val |= 536870912U;
    #line 3015 
    __ew32(hw,14400UL,reg_val);
  }
  #line 3017 
  return;
}

#line 3025  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_setup_rctl(struct e1000_adapter *adapter)
{
  #line 3028 
  u32 rctl;
  #line 3028 
  u32 rfctl;
  #line 3126 
  unsigned int tmp_0;
  #line 3027 
  struct e1000_hw *hw = & adapter->hw;
  #line 3029 
  u32 pages = 0U;
  #line 3035 
  if (hw->mac.type > (unsigned int)e1000_pchlan) {
    #line 3036 
    s32 ret_val;
    #line 3038 
    if ((adapter->netdev)->mtu > 1500U) 
                                        #line 3039 
                                        ret_val = e1000_lv_jumbo_workaround_ich8lan(hw,(_Bool)1); else 
                                                                    #line 3041 
                                                                    ret_val = e1000_lv_jumbo_workaround_ich8lan(hw,(_Bool)0);
    #line 3043 
    if (ret_val != 0) {
      #line 3044 
      bool branch;
      #line 3044 
      struct _ddebug __UNIQUE_ID_ddebug548 = {.modname = (char *)"e1000e", .function = (char *)"e1000_setup_rctl", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c", .format = (char *)"failed to enable|disable jumbo frame workaround mode\n", .lineno = (unsigned int)3044U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3044 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug548.key.dd_key_false.key,(_Bool)0);
      #line 3044 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3044 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug548,(hw->adapter)->netdev,(char *)"failed to enable|disable jumbo frame workaround mode\n");
    }
  }
  #line 3048 
  rctl = __er32(hw,256UL);
  #line 3049 
  rctl &= 4294955007U;
  #line 3050 
  rctl = ((adapter->hw.mac.mc_filter_type << 12) | rctl) | 32770U;
  #line 3055 
  rctl &= 4294967291U;
  #line 3058 
  if ((adapter->netdev)->mtu <= 1500U) 
                                       #line 3059 
                                       rctl &= 4294967263U; else 
                                                                 #line 3061 
                                                                 rctl |= 32U;
  #line 3067 
  if (((unsigned long)adapter->flags2 & 1UL) != 0UL) 
                                                     #line 3068 
                                                     rctl |= 67108864U;
  #line 3071 
  if (hw->phy.type == (unsigned int)e1000_phy_82577 && (rctl & 32U) != 0U) {
    #line 3072 
    u16 phy_data;
    #line 3074 
    e1e_rphy(hw,24666U,& phy_data);
    #line 3075 
    phy_data = (unsigned short)((unsigned int)phy_data & 65528U);
    #line 3076 
    phy_data = (unsigned short)((unsigned int)phy_data | 4U);
    #line 3077 
    e1e_wphy(hw,24666U,(unsigned short)((int)phy_data));
    #line 3079 
    e1e_rphy(hw,22U,& phy_data);
    #line 3080 
    phy_data = (unsigned short)((unsigned int)phy_data & 4095U);
    #line 3081 
    phy_data = (unsigned short)((unsigned int)phy_data | 16384U);
    #line 3082 
    e1e_wphy(hw,16U,(unsigned short)10275);
    #line 3083 
    e1e_wphy(hw,17U,(unsigned short)3);
    #line 3084 
    e1e_wphy(hw,22U,(unsigned short)((int)phy_data));
  }
  #line 3088 
  rctl &= 4294770687U;
  #line 3089 
  rctl |= 33554432U;
  #line 3090 
  switch (adapter->rx_buffer_len) {
    #line 3091 
    case (u32)2048: 
                    #line 3091 
    ;
    #line 3092 
    default: 
             #line 3092 
    ;
    #line 3093 
    rctl = rctl;
    #line 3094 
    rctl &= 4261412863U;
    #line 3095 
    break;
    #line 3096 
    case (u32)4096: 
                    #line 3096 
    ;
    #line 3097 
    rctl |= 196608U;
    #line 3098 
    break;
    #line 3099 
    case (u32)8192: 
                    #line 3099 
    ;
    #line 3100 
    rctl |= 131072U;
    #line 3101 
    break;
    #line 3102 
    case (u32)16384: 
                     #line 3102 
    ;
    #line 3103 
    rctl |= 65536U;
    #line 3104 
    break;
  }
  #line 3108 
  rfctl = __er32(hw,20488UL);
  #line 3109 
  rfctl |= 32768U;
  #line 3110 
  __ew32(hw,20488UL,rfctl);
  #line 3126 
  if (((unsigned long)(adapter->netdev)->mtu & 4095UL) != 0UL) 
                                                               #line 3126 
                                                               tmp_0 = 1U; else 
                                                                    #line 3126 
                                                                    tmp_0 = 0U;
  #line 3126 
  pages = ((adapter->netdev)->mtu >> 12) + tmp_0;
  #line 3127 
  if (pages <= 3U && (rctl & 32U) != 0U) 
                                         #line 3128 
                                         adapter->rx_ps_pages = pages; else 
                                                                    #line 3130 
                                                                    adapter->rx_ps_pages = 0U;
  #line 3132 
  if (adapter->rx_ps_pages != 0U) {
    #line 3133 
    u32 psrctl = 0U;
    #line 3136 
    rctl |= 1024U;
    #line 3138 
    psrctl = (unsigned int)((int)adapter->rx_ps_bsize0 >> 7) | psrctl;
    #line 3140 
    switch (adapter->rx_ps_pages) {
      #line 3141 
      case (unsigned int)3: 
                            #line 3141 
      ;
      #line 3142 
      psrctl |= 67108864U;
      #line 3144 
      case (unsigned int)2: 
                            #line 3144 
      ;
      #line 3145 
      psrctl |= 262144U;
      #line 3147 
      case (unsigned int)1: 
                            #line 3147 
      ;
      #line 3148 
      psrctl |= 1024U;
      #line 3149 
      break;
    }
    #line 3152 
    __ew32(hw,8560UL,psrctl);
  }
  #line 3156 
  if (((adapter->netdev)->features & 8796093022208ULL) != 0ULL) {
    #line 3160 
    rctl |= 8421380U;
    #line 3164 
    rctl &= 4289986559U;
  }
  #line 3172 
  __ew32(hw,256UL,rctl);
  #line 3174 
  adapter->flags &= 3221225471U;
  #line 3175 
  return;
}

#line 3183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_configure_rx(struct e1000_adapter *adapter)
{
  #line 3187 
  u64 rdba;
  #line 3188 
  u32 rdlen;
  #line 3188 
  u32 rctl;
  #line 3188 
  u32 rxcsum;
  #line 3188 
  u32 ctrl_ext;
  #line 3185 
  struct e1000_hw *hw = & adapter->hw;
  #line 3186 
  struct e1000_ring *rx_ring = adapter->rx_ring;
  #line 3190 
  if (adapter->rx_ps_pages != 0U) {
    #line 3192 
    rdlen = rx_ring->count * 32U;
    #line 3194 
    adapter->clean_rx = & e1000_clean_rx_irq_ps;
    #line 3195 
    adapter->alloc_rx_buf = & e1000_alloc_rx_buffers_ps;
  }
  else 
    #line 3196 
    if ((adapter->netdev)->mtu > 1518U) {
      #line 3197 
      rdlen = rx_ring->count * 16U;
      #line 3198 
      adapter->clean_rx = & e1000_clean_jumbo_rx_irq;
      #line 3199 
      adapter->alloc_rx_buf = & e1000_alloc_jumbo_rx_buffers;
    }
    else {
      #line 3201 
      rdlen = rx_ring->count * 16U;
      #line 3202 
      adapter->clean_rx = & e1000_clean_rx_irq;
      #line 3203 
      adapter->alloc_rx_buf = & e1000_alloc_rx_buffers;
    }
  #line 3207 
  rctl = __er32(hw,256UL);
  #line 3208 
  if (((unsigned long)adapter->flags2 & 1024UL) == 0UL) 
                                                        #line 3209 
                                                        __ew32(hw,256UL,rctl & 4294967293U);
  #line 3210 
  __er32(hw,8UL);
  #line 3211 
  usleep_range(10000UL,11000UL);
  #line 3213 
  if (((unsigned long)adapter->flags2 & 64UL) != 0UL) {
    #line 3222 
    __ew32(hw,10280UL,17040416U);
    #line 3223 
    __ew32(hw,10536UL,17040416U);
  }
  #line 3227 
  __ew32(hw,10272UL,adapter->rx_int_delay);
  #line 3230 
  __ew32(hw,10284UL,adapter->rx_abs_int_delay);
  #line 3231 
  if (adapter->itr_setting != 0U && adapter->itr != 0U) 
                                                        #line 3232 
                                                        e1000e_write_itr(adapter,adapter->itr);
  #line 3234 
  ctrl_ext = __er32(hw,24UL);
  #line 3236 
  ctrl_ext |= 134217728U;
  #line 3237 
  __ew32(hw,224UL,4294967295U);
  #line 3238 
  __ew32(hw,24UL,ctrl_ext);
  #line 3239 
  __er32(hw,8UL);
  #line 3244 
  rdba = rx_ring->dma;
  #line 3245 
  __ew32(hw,10240UL,(unsigned int)rdba);
  #line 3246 
  __ew32(hw,10244UL,(unsigned int)(rdba >> 32));
  #line 3247 
  __ew32(hw,10248UL,rdlen);
  #line 3248 
  __ew32(hw,10256UL,0U);
  #line 3249 
  __ew32(hw,10264UL,0U);
  #line 3250 
  rx_ring->head = adapter->hw.hw_addr + 10256U;
  #line 3251 
  rx_ring->tail = adapter->hw.hw_addr + 10264U;
  #line 3253 
  writel(0U,rx_ring->head);
  #line 3254 
  if (((unsigned long)adapter->flags2 & 2048UL) != 0UL) 
                                                        #line 3255 
                                                        e1000e_update_rdt_wa(rx_ring,0U); else 
                                                                    #line 3257 
                                                                    writel(0U,rx_ring->tail);
  #line 3260 
  rxcsum = __er32(hw,20480UL);
  #line 3261 
  if (((adapter->netdev)->features & 549755813888ULL) != 0ULL) 
                                                               #line 3262 
                                                               rxcsum |= 512U; else 
                                                                    #line 3264 
                                                                    rxcsum &= 4294966783U;
  #line 3265 
  __ew32(hw,20480UL,rxcsum);
  #line 3270 
  if ((adapter->netdev)->mtu > 1500U) {
    #line 3271 
    u32 lat = (((__er32(hw,4096UL) & 65535U) * 1024U - adapter->max_frame_size) * 8U) / 1000U;
    #line 3275 
    if (((unsigned long)adapter->flags & 512UL) != 0UL) {
      #line 3276 
      u32 rxdctl = __er32(hw,10280UL);
      #line 3278 
      __ew32(hw,10280UL,rxdctl | 259U);
    }
    #line 3281 
    _dev_info(& (adapter->pdev)->dev,(char *)"Some CPU C-states have been disabled in order to enable jumbo frames\n");
    #line 3283 
    pm_qos_update_request(& adapter->pm_qos_req,(int)lat);
  }
  else 
       #line 3285 
       pm_qos_update_request(& adapter->pm_qos_req,-1);
  #line 3290 
  __ew32(hw,256UL,rctl);
  #line 3291 
  return;
}

#line 3302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_write_mc_addr_list(struct net_device *netdev)
{
  #line 3322 
  void *__mptr;
  #line 3306 
  struct netdev_hw_addr *ha;
  #line 3307 
  u8 *mta_list;
  #line 3308 
  int i;
  #line 3304 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 3305 
  struct e1000_hw *hw = & adapter->hw;
  #line 3310 
  if (netdev->mc.count == 0) {
    #line 3312 
    (*(hw->mac.ops.update_mc_addr_list))(hw,(u8 *)0U,0U);
    #line 3313 
    return 0;
  }
  #line 3316 
  mta_list = (u8 *)kcalloc((unsigned long)netdev->mc.count,6UL,2592U);
  #line 3317 
  if (mta_list == (u8 *)0U) 
                            #line 3318 
                            return -12;
  #line 3321 
  i = 0;
  #line 3322 
  __mptr = (void *)netdev->mc.list.next;
  #line 3322 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 3322 
  while (& ha->list != & netdev->mc.list) {
    #line 3322 
    void *__mptr_0;
    #line 3323 
    int tmp_3;
    #line 3323 
    ;
    #line 3323 
    tmp_3 = i;
    #line 3323 
    i ++;
    #line 3323 
    ;
    #line 3323 
    memcpy((void *)(mta_list + (unsigned long)(tmp_3 * 6)),(void *)(& ha->addr),6UL);
    #line 3322 
    __mptr_0 = (void *)ha->list.next;
    #line 3322 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 3325 
  (*(hw->mac.ops.update_mc_addr_list))(hw,mta_list,(unsigned int)i);
  #line 3326 
  kfree((void *)mta_list);
  #line 3328 
  return netdev->mc.count;
}

#line 3340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_write_uc_addr_list(struct net_device *netdev)
{
  #line 3344 
  unsigned int rar_entries;
  #line 3342 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 3343 
  struct e1000_hw *hw = & adapter->hw;
  #line 3345 
  int count = 0;
  #line 3347 
  rar_entries = (*(hw->mac.ops.rar_get_count))(hw);
  #line 3350 
  rar_entries --;
  #line 3353 
  if (((unsigned long)adapter->flags & 2097152UL) != 0UL) 
                                                          #line 3354 
                                                          rar_entries --;
  #line 3357 
  if ((unsigned int)netdev->uc.count > rar_entries) 
                                                    #line 3358 
                                                    return -12;
  #line 3360 
  if (netdev->uc.count != 0 && rar_entries != 0U) {
    #line 3366 
    void *__mptr;
    #line 3361 
    struct netdev_hw_addr *ha;
    #line 3366 
    __mptr = (void *)netdev->uc.list.next;
    #line 3366 
    ha = ((struct netdev_hw_addr *)__mptr);
    #line 3366 
    while (& ha->list != & netdev->uc.list) {
      #line 3366 
      void *__mptr_0;
      {
        #line 3367 
        int ret_val;
        #line 3371 
        unsigned int tmp_2;
        #line 3369 
        if (rar_entries == 0U) 
                               #line 3370 
                               break;
        #line 3371 
        tmp_2 = rar_entries;
        #line 3371 
        rar_entries --;
        #line 3371 
        ;
        #line 3371 
        ;
        #line 3371 
        ;
        #line 3371 
        ret_val = (*(hw->mac.ops.rar_set))(hw,(u8 *)(& ha->addr),tmp_2);
        #line 3372 
        if (ret_val < 0) 
                         #line 3373 
                         return -12;
        #line 3374 
        count ++;
      }
      #line 3366 
      __mptr_0 = (void *)ha->list.next;
      #line 3366 
      ha = ((struct netdev_hw_addr *)__mptr_0);
    }
  }
  #line 3379 
  while (rar_entries != 0U) {
    {
      #line 3380 
      unsigned int tmp_3;
      #line 3381 
      unsigned int tmp_4;
      #line 3380 
      if (rar_entries <= 15U) 
                              #line 3380 
                              tmp_3 = rar_entries * 8U + 21508U; else 
                                                                   #line 3380 
                                                                   tmp_3 = (rar_entries + 4294967280U) * 8U + 21732U;
      #line 3380 
      ;
      #line 3380 
      __ew32(hw,(unsigned long)tmp_3,0U);
      #line 3381 
      if (rar_entries <= 15U) 
                              #line 3381 
                              tmp_4 = (rar_entries + 2688U) * 8U; else 
                                                                    #line 3381 
                                                                    tmp_4 = (rar_entries + 2700U) * 8U;
      #line 3381 
      ;
      #line 3381 
      __ew32(hw,(unsigned long)tmp_4,0U);
    }
    #line 3379 
    rar_entries --;
  }
  #line 3383 
  __er32(hw,8UL);
  #line 3385 
  return count;
}

#line 3397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_set_rx_mode(struct net_device *netdev)
{
  #line 3401 
  u32 rctl;
  #line 3399 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 3400 
  struct e1000_hw *hw = & adapter->hw;
  #line 3403 
  if ((int)cif_pm_runtime_suspended(netdev->dev.parent) != 0) 
                                                              #line 3404 
                                                              return;
  #line 3407 
  rctl = __er32(hw,256UL);
  #line 3410 
  rctl &= 4294967271U;
  #line 3412 
  if ((netdev->flags & 256U) != 0U) {
    #line 3413 
    rctl |= 24U;
    #line 3415 
    e1000e_vlan_filter_disable(adapter);
  }
  else {
    #line 3417 
    int count;
    #line 3419 
    if ((netdev->flags & 512U) != 0U) 
                                      #line 3420 
                                      rctl |= 16U;
    else {
      #line 3426 
      count = e1000e_write_mc_addr_list(netdev);
      #line 3427 
      if (count < 0) 
                     #line 3428 
                     rctl |= 16U;
    }
    #line 3430 
    e1000e_vlan_filter_enable(adapter);
    #line 3435 
    count = e1000e_write_uc_addr_list(netdev);
    #line 3436 
    if (count < 0) 
                   #line 3437 
                   rctl |= 8U;
  }
  #line 3440 
  __ew32(hw,256UL,rctl);
  #line 3442 
  if ((netdev->features & 256ULL) != 0ULL) 
                                           #line 3443 
                                           e1000e_vlan_strip_enable(adapter); else 
                                                                    #line 3445 
                                                                    e1000e_vlan_strip_disable(adapter);
  #line 3446 
  return;
}

#line 3448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_setup_rss_hash(struct e1000_adapter *adapter)
{
  #line 3451 
  u32 mrqc;
  #line 3451 
  u32 rxcsum;
  #line 3452 
  u32 rss_key[10U];
  #line 3453 
  int i;
  #line 3450 
  struct e1000_hw *hw = & adapter->hw;
  #line 3455 
  netdev_rss_key_fill((void *)(& rss_key),40UL);
  #line 3456 
  i = 0;
  #line 3456 
  while (i <= 9) {
    #line 3457 
    __ew32(hw,(unsigned long)((i + 5920) * 4),rss_key[i]);
    #line 3456 
    i ++;
  }
  #line 3460 
  i = 0;
  #line 3460 
  while (i <= 31) {
    #line 3461 
    __ew32(hw,(unsigned long)((i + 5888) * 4),0U);
    #line 3460 
    i ++;
  }
  #line 3466 
  rxcsum = __er32(hw,20480UL);
  #line 3467 
  rxcsum |= 8192U;
  #line 3469 
  __ew32(hw,20480UL,rxcsum);
  #line 3471 
  mrqc = 3604480U;
  #line 3477 
  __ew32(hw,22552UL,mrqc);
  #line 3478 
  return;
}

#line 3488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
s32 e1000e_get_base_timinca(struct e1000_adapter *adapter, u32 *timinca)
{
  #line 3491 
  u32 incvalue;
  #line 3491 
  u32 incperiod;
  #line 3491 
  u32 shift;
  #line 3490 
  struct e1000_hw *hw = & adapter->hw;
  #line 3496 
  if (hw->mac.type > (unsigned int)e1000_pch2lan) {
    #line 3496 
    if ((__er32(hw,46612UL) & 16U) == 0U) {
      #line 3497 
      if ((__er32(hw,46624UL) & 16U) == 0U) {
        #line 3499 
        u32 fextnvm7 = __er32(hw,228UL);
        #line 3501 
        if (((unsigned long)fextnvm7 & 1UL) == 0UL) {
          #line 3502 
          __ew32(hw,228UL,fextnvm7 | 1U);
          #line 3503 
          __er32(hw,8UL);
        }
      }
    }
  }
  #line 3507 
  switch ((unsigned int)hw->mac.type) {
    #line 3508 
    case (unsigned int)10: 
                           #line 3508 
    ;
    #line 3510 
    incperiod = 3U;
    #line 3511 
    incvalue = 125U;
    #line 3512 
    shift = 17U;
    #line 3513 
    adapter->cc.shift = shift + 2U;
    #line 3514 
    break;
    #line 3515 
    case (unsigned int)11: 
                           #line 3515 
    ;
    #line 3516 
    if ((__er32(hw,46624UL) & 32U) != 0U) {
      #line 3518 
      incperiod = 3U;
      #line 3519 
      incvalue = 125U;
      #line 3520 
      shift = 17U;
      #line 3521 
      adapter->cc.shift = shift + 2U;
    }
    else {
      #line 3524 
      incperiod = 1U;
      #line 3525 
      incvalue = 40U;
      #line 3526 
      shift = 18U;
      #line 3527 
      adapter->cc.shift = shift;
    }
    #line 3529 
    break;
    #line 3530 
    case (unsigned int)12: 
                           #line 3530 
    ;
    #line 3532 
    incperiod = 3U;
    #line 3533 
    incvalue = 125U;
    #line 3534 
    shift = 14U;
    #line 3535 
    adapter->cc.shift = shift;
    #line 3536 
    break;
    #line 3537 
    case (unsigned int)13: 
                           #line 3537 
    ;
    #line 3538 
    case (unsigned int)14: 
                           #line 3538 
    ;
    #line 3539 
    if ((__er32(hw,46624UL) & 32U) != 0U) {
      #line 3541 
      incperiod = 3U;
      #line 3542 
      incvalue = 125U;
      #line 3543 
      shift = 14U;
      #line 3544 
      adapter->cc.shift = shift;
    }
    else {
      #line 3547 
      incperiod = 1U;
      #line 3548 
      incvalue = 26U;
      #line 3549 
      shift = 19U;
      #line 3550 
      adapter->cc.shift = shift;
    }
    #line 3552 
    break;
    #line 3553 
    case (unsigned int)3: 
                          #line 3553 
    ;
    #line 3554 
    case (unsigned int)4: 
                          #line 3554 
    ;
    #line 3556 
    incperiod = 1U;
    #line 3557 
    incvalue = 40U;
    #line 3558 
    shift = 18U;
    #line 3559 
    adapter->cc.shift = shift;
    #line 3560 
    break;
    #line 3561 
    default: 
             #line 3561 
    ;
    #line 3562 
    return -22;
  }
  #line 3565 
  *timinca = (incperiod << 24) | ((incvalue << shift) & 16777215U);
  #line 3568 
  return 0;
}

#line 3586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_config_hwtstamp(struct e1000_adapter *adapter, struct hwtstamp_config *config)
{
  #line 3596 
  u32 regval;
  #line 3589 
  struct e1000_hw *hw = & adapter->hw;
  #line 3590 
  u32 tsync_tx_ctl = 16U;
  #line 3591 
  u32 tsync_rx_ctl = 16U;
  #line 3592 
  u32 rxmtrl = 0U;
  #line 3593 
  u16 rxudp = (unsigned short)0U;
  #line 3594 
  bool is_l4 = (_Bool)0;
  #line 3595 
  bool is_l2 = (_Bool)0;
  #line 3598 
  if (((unsigned long)adapter->flags & 16384UL) == 0UL) 
                                                        #line 3599 
                                                        return -22;
  #line 3602 
  if (config->flags != 0) 
                          #line 3603 
                          return -22;
  #line 3605 
  switch (config->tx_type) {
    #line 3606 
    case 0: 
            #line 3606 
    ;
    #line 3607 
    tsync_tx_ctl = 0U;
    #line 3608 
    break;
    #line 3609 
    case 1: 
            #line 3609 
    ;
    #line 3610 
    break;
    #line 3611 
    default: 
             #line 3611 
    ;
    #line 3612 
    return -34;
  }
  #line 3615 
  switch (config->rx_filter) {
    #line 3616 
    case 0: 
            #line 3616 
    ;
    #line 3617 
    tsync_rx_ctl = 0U;
    #line 3618 
    break;
    #line 3619 
    case 4: 
            #line 3619 
    ;
    #line 3620 
    tsync_rx_ctl |= 2U;
    #line 3621 
    rxmtrl = 0U;
    #line 3622 
    is_l4 = (_Bool)1;
    #line 3623 
    break;
    #line 3624 
    case 5: 
            #line 3624 
    ;
    #line 3625 
    tsync_rx_ctl |= 2U;
    #line 3626 
    rxmtrl = 65536U;
    #line 3627 
    is_l4 = (_Bool)1;
    #line 3628 
    break;
    #line 3629 
    case 10: 
             #line 3629 
    ;
    #line 3631 
    tsync_rx_ctl = tsync_rx_ctl;
    #line 3632 
    rxmtrl = 0U;
    #line 3633 
    is_l2 = (_Bool)1;
    #line 3634 
    break;
    #line 3635 
    case 11: 
             #line 3635 
    ;
    #line 3637 
    tsync_rx_ctl = tsync_rx_ctl;
    #line 3638 
    rxmtrl = 16777216U;
    #line 3639 
    is_l2 = (_Bool)1;
    #line 3640 
    break;
    #line 3641 
    case 7: 
            #line 3641 
    ;
    #line 3645 
    case 13: 
             #line 3645 
    ;
    #line 3647 
    tsync_rx_ctl |= 4U;
    #line 3648 
    rxmtrl = 0U;
    #line 3649 
    is_l2 = (_Bool)1;
    #line 3650 
    is_l4 = (_Bool)1;
    #line 3651 
    break;
    #line 3652 
    case 8: 
            #line 3652 
    ;
    #line 3656 
    case 14: 
             #line 3656 
    ;
    #line 3658 
    tsync_rx_ctl |= 4U;
    #line 3659 
    rxmtrl = 16777216U;
    #line 3660 
    is_l2 = (_Bool)1;
    #line 3661 
    is_l4 = (_Bool)1;
    #line 3662 
    break;
    #line 3663 
    case 6: 
            #line 3663 
    ;
    #line 3664 
    case 9: 
            #line 3664 
    ;
    #line 3668 
    case 12: 
             #line 3668 
    ;
    #line 3669 
    tsync_rx_ctl |= 10U;
    #line 3670 
    config->rx_filter = 12;
    #line 3671 
    is_l2 = (_Bool)1;
    #line 3672 
    is_l4 = (_Bool)1;
    #line 3673 
    break;
    #line 3674 
    case 3: 
            #line 3674 
    ;
    #line 3679 
    case 15: 
             #line 3679 
    ;
    #line 3680 
    case 1: 
            #line 3680 
    ;
    #line 3681 
    is_l2 = (_Bool)1;
    #line 3682 
    is_l4 = (_Bool)1;
    #line 3683 
    tsync_rx_ctl |= 8U;
    #line 3684 
    config->rx_filter = 1;
    #line 3685 
    break;
    #line 3686 
    default: 
             #line 3686 
    ;
    #line 3687 
    return -34;
  }
  #line 3690 
  adapter->hwtstamp_config = *config;
  #line 3693 
  regval = __er32(hw,46612UL);
  #line 3694 
  regval &= 4294967279U;
  #line 3695 
  regval |= tsync_tx_ctl;
  #line 3696 
  __ew32(hw,46612UL,regval);
  #line 3697 
  ;
  #line 3697 
  if (((__er32(hw,46612UL) ^ regval) & 16U) != 0U) {
    #line 3699 
    netdev_err(adapter->netdev,(char *)"Timesync Tx Control register not set as expected\n");
    #line 3700 
    return -11;
  }
  #line 3704 
  regval = __er32(hw,46624UL);
  #line 3705 
  regval &= 4294967265U;
  #line 3706 
  regval |= tsync_rx_ctl;
  #line 3707 
  __ew32(hw,46624UL,regval);
  #line 3708 
  ;
  #line 3708 
  if (((__er32(hw,46624UL) ^ regval) & 30U) != 0U) {
    #line 3712 
    netdev_err(adapter->netdev,(char *)"Timesync Rx Control register not set as expected\n");
    #line 3713 
    return -11;
  }
  #line 3717 
  if ((int)is_l2 != 0) 
                       #line 3718 
                       rxmtrl |= 35063U;
  #line 3721 
  __ew32(hw,46644UL,rxmtrl);
  #line 3724 
  if ((int)is_l4 != 0) {
    #line 3725 
    rxudp = (unsigned short)319U;
    #line 3726 
    __swab16s(& rxudp);
  }
  #line 3728 
  __ew32(hw,46648UL,(unsigned int)rxudp);
  #line 3730 
  __er32(hw,8UL);
  #line 3733 
  __er32(hw,46632UL);
  #line 3734 
  __er32(hw,46620UL);
  #line 3736 
  return 0;
}

#line 3743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_configure(struct e1000_adapter *adapter)
{
  #line 3745 
  struct e1000_ring *rx_ring = adapter->rx_ring;
  #line 3747 
  e1000e_set_rx_mode(adapter->netdev);
  #line 3749 
  e1000_restore_vlan(adapter);
  #line 3750 
  e1000_init_manageability_pt(adapter);
  #line 3752 
  e1000_configure_tx(adapter);
  #line 3754 
  if (((adapter->netdev)->features & 274877906944ULL) != 0ULL) 
                                                               #line 3755 
                                                               e1000e_setup_rss_hash(adapter);
  #line 3756 
  e1000_setup_rctl(adapter);
  #line 3757 
  e1000_configure_rx(adapter);
  #line 3758 
  ;
  #line 3758 
  (*(adapter->alloc_rx_buf))(rx_ring,e1000_desc_unused(rx_ring),3264U);
  #line 3759 
  return;
}

#line 3769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_power_up_phy(struct e1000_adapter *adapter)
{
  #line 3771 
  if (adapter->hw.phy.ops.power_up != (void (*)(struct e1000_hw *))0) 
    #line 3772 
    (*(adapter->hw.phy.ops.power_up))(& adapter->hw);
  #line 3774 
  (*(adapter->hw.mac.ops.setup_link))(& adapter->hw);
  #line 3775 
  return;
}

#line 3783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_power_down_phy(struct e1000_adapter *adapter)
{
  #line 3785 
  if (adapter->hw.phy.ops.power_down != (void (*)(struct e1000_hw *))0) 
    #line 3786 
    (*(adapter->hw.phy.ops.power_down))(& adapter->hw);
  #line 3787 
  return;
}

#line 3797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_flush_tx_ring(struct e1000_adapter *adapter)
{
  #line 3802 
  u32 tdt;
  #line 3802 
  u32 tctl;
  #line 3799 
  struct e1000_hw *hw = & adapter->hw;
  #line 3800 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  #line 3801 
  struct e1000_tx_desc *tx_desc = (struct e1000_tx_desc *)0;
  #line 3802 
  u32 txd_lower = 33554432U;
  #line 3803 
  u16 size = (unsigned short)512U;
  #line 3805 
  tctl = __er32(hw,1024UL);
  #line 3806 
  __ew32(hw,1024UL,tctl | 2U);
  #line 3807 
  tdt = __er32(hw,14360UL);
  #line 3808 
  if ((long)((unsigned int)tx_ring->next_to_use != tdt) != 0L) {
    #line 3809 
    ldv_inline_asm();
    #line 3810 
    ldv_inline_asm();
    #line 3811 
    ldv_inline_asm();
    #line 3808 
    ;
  }
  #line 3809 
  tx_desc = (struct e1000_tx_desc *)tx_ring->desc + (unsigned long)tx_ring->next_to_use;
  #line 3810 
  tx_desc->buffer_addr = tx_ring->dma;
  #line 3812 
  tx_desc->lower.data = (unsigned int)size | txd_lower;
  #line 3813 
  tx_desc->upper.data = 0U;
  #line 3814 
  ldv_inline_asm();
  #line 3816 
  tx_ring->next_to_use = (u16)((int)tx_ring->next_to_use + 1);
  #line 3817 
  if ((unsigned int)tx_ring->next_to_use == tx_ring->count) 
                                                            #line 3818 
                                                            tx_ring->next_to_use = (unsigned short)0U;
  #line 3819 
  __ew32(hw,14360UL,(unsigned int)tx_ring->next_to_use);
  #line 3820 
  usleep_range(200UL,250UL);
  #line 3821 
  return;
}

#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_flush_rx_ring(struct e1000_adapter *adapter)
{
  #line 3830 
  u32 rctl;
  #line 3830 
  u32 rxdctl;
  #line 3831 
  struct e1000_hw *hw = & adapter->hw;
  #line 3833 
  rctl = __er32(hw,256UL);
  #line 3834 
  __ew32(hw,256UL,rctl & 4294967293U);
  #line 3835 
  __er32(hw,8UL);
  #line 3836 
  usleep_range(100UL,150UL);
  #line 3838 
  rxdctl = __er32(hw,10280UL);
  #line 3840 
  rxdctl &= 4294950912U;
  #line 3845 
  rxdctl |= 16777503U;
  #line 3847 
  __ew32(hw,10280UL,rxdctl);
  #line 3849 
  __ew32(hw,256UL,rctl | 2U);
  #line 3850 
  __er32(hw,8UL);
  #line 3851 
  usleep_range(100UL,150UL);
  #line 3852 
  __ew32(hw,256UL,rctl & 4294967293U);
  #line 3853 
  return;
}

#line 3866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_flush_desc_rings(struct e1000_adapter *adapter)
{
  #line 3868 
  u16 hang_state;
  #line 3869 
  u32 fext_nvm11;
  #line 3869 
  u32 tdlen;
  #line 3870 
  struct e1000_hw *hw = & adapter->hw;
  #line 3873 
  fext_nvm11 = __er32(hw,23484UL);
  #line 3874 
  fext_nvm11 |= 8192U;
  #line 3875 
  __ew32(hw,23484UL,fext_nvm11);
  #line 3877 
  tdlen = __er32(hw,14344UL);
  #line 3878 
  pci_read_config_word(adapter->pdev,228,& hang_state);
  #line 3880 
  if (((int)hang_state & 256) == 0 || tdlen == 0U) 
                                                   #line 3881 
                                                   return;
  #line 3882 
  e1000_flush_tx_ring(adapter);
  #line 3884 
  pci_read_config_word(adapter->pdev,228,& hang_state);
  #line 3886 
  if (((int)hang_state & 256) != 0) 
                                    #line 3887 
                                    e1000_flush_rx_ring(adapter);
  #line 3888 
  return;
}

#line 3899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_systim_reset(struct e1000_adapter *adapter)
{
  #line 3903 
  unsigned long flags;
  #line 3904 
  u32 timinca;
  #line 3905 
  s32 ret_val;
  #line 3901 
  struct ptp_clock_info *info = & adapter->ptp_clock_info;
  #line 3902 
  struct e1000_hw *hw = & adapter->hw;
  #line 3907 
  if (((unsigned long)adapter->flags & 16384UL) == 0UL) 
                                                        #line 3908 
                                                        return;
  #line 3910 
  if (info->adjfreq != (int (*)(struct ptp_clock_info *, s32 ))0) 
                                                                  #line 3912 
                                                                  ret_val = (*(info->adjfreq))(info,adapter->ptp_delta);
  else {
    #line 3915 
    ret_val = e1000e_get_base_timinca(adapter,& timinca);
    #line 3916 
    if (ret_val == 0) 
                      #line 3917 
                      __ew32(hw,46600UL,timinca);
  }
  #line 3920 
  if (ret_val != 0) {
    #line 3921 
    _dev_warn(& (adapter->pdev)->dev,(char *)"Failed to restore TIMINCA clock rate delta: %d\n",ret_val);
    #line 3924 
    return;
  }
  #line 3928 
  cif___ldv_spin_lock_systim_lock_of_e1000_adapter(& adapter->systim_lock);
  #line 3929 
  ;
  #line 3929 
  ;
  #line 3929 
  timecounter_init(& adapter->tc,& adapter->cc,(unsigned long long)ktime_to_ns(ktime_get_real()));
  #line 3931 
  cif_spin_unlock_irqrestore_systim_lock_of_e1000_adapter(& adapter->systim_lock,flags);
  #line 3934 
  e1000e_config_hwtstamp(adapter,& adapter->hwtstamp_config);
  #line 3935 
  return;
}

#line 3945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_reset(struct e1000_adapter *adapter)
{
  #line 4073 
  unsigned int __UNIQUE_ID___x552;
  #line 4073 
  unsigned int tmp_2;
  #line 3950 
  u32 tx_space;
  #line 3950 
  u32 min_tx_space;
  #line 3950 
  u32 min_rx_space;
  #line 3952 
  u16 hwm;
  #line 3947 
  struct e1000_mac_info *mac = & adapter->hw.mac;
  #line 3948 
  struct e1000_fc_info *fc = & adapter->hw.fc;
  #line 3949 
  struct e1000_hw *hw = & adapter->hw;
  #line 3951 
  u32 pba = adapter->pba;
  #line 3955 
  __ew32(hw,4096UL,pba);
  #line 3957 
  if (adapter->max_frame_size > 1522U) {
    #line 3965 
    pba = __er32(hw,4096UL);
    #line 3967 
    tx_space = pba >> 16;
    #line 3969 
    pba &= 65535U;
    #line 3973 
    min_tx_space = (adapter->max_frame_size + 12U) * 2U;
    #line 3975 
    min_tx_space = (min_tx_space + 1023U) & 4294966272U;
    #line 3976 
    min_tx_space >>= 10;
    #line 3978 
    min_rx_space = adapter->max_frame_size;
    #line 3979 
    min_rx_space = (min_rx_space + 1023U) & 4294966272U;
    #line 3980 
    min_rx_space >>= 10;
    #line 3986 
    if (tx_space < min_tx_space && min_tx_space - tx_space < pba) {
      #line 3988 
      pba = (tx_space - min_tx_space) + pba;
      #line 3993 
      if (pba < min_rx_space) 
                              #line 3994 
                              pba = min_rx_space;
    }
    #line 3997 
    __ew32(hw,4096UL,pba);
  }
  #line 4008 
  if (((unsigned long)adapter->flags & 262144UL) != 0UL) 
                                                         #line 4009 
                                                         fc->pause_time = (unsigned short)65535U; else 
                                                                    #line 4011 
                                                                    fc->pause_time = (unsigned short)1664U;
  #line 4012 
  fc->send_xon = (_Bool)1;
  #line 4013 
  fc->current_mode = fc->requested_mode;
  #line 4015 
  switch ((unsigned int)hw->mac.type) {
    #line 4027 
    u32 __UNIQUE_ID___x550;
    #line 4027 
    u32 tmp;
    #line 4016 
    case (unsigned int)7: 
                          #line 4016 
    ;
    #line 4017 
    case (unsigned int)8: 
                          #line 4017 
    ;
    #line 4018 
    if ((adapter->netdev)->mtu > 1500U) {
      #line 4019 
      pba = 14U;
      #line 4020 
      __ew32(hw,4096UL,pba);
      #line 4021 
      fc->high_water = 10240U;
      #line 4022 
      fc->low_water = fc->high_water + 4294967288U;
      #line 4023 
      break;
    }
    #line 4026 
    default: 
             #line 4026 
    ;
    {
      #line 4027 
      __UNIQUE_ID___x550 = (pba * 9216U) / 10U;
      #line 4027 
      u32 __UNIQUE_ID___y551 = (pba << 10) - adapter->max_frame_size;
      #line 4027 
      if (__UNIQUE_ID___x550 < __UNIQUE_ID___y551) 
                                                   #line 4027 
                                                   tmp = __UNIQUE_ID___x550; else 
                                                                    #line 4027 
                                                                    tmp = __UNIQUE_ID___y551;
      }
    #line 4027 
    hwm = (unsigned short)tmp;
    #line 4030 
    fc->high_water = (unsigned int)hwm & 65528U;
    #line 4031 
    fc->low_water = fc->high_water + 4294967288U;
    #line 4032 
    break;
    #line 4033 
    case (unsigned int)9: 
                          #line 4033 
    ;
    #line 4037 
    if ((adapter->netdev)->mtu > 1500U) {
      #line 4038 
      fc->high_water = 13568U;
      #line 4039 
      fc->low_water = 5376U;
    }
    else {
      #line 4041 
      fc->high_water = 20480U;
      #line 4042 
      fc->low_water = 12288U;
    }
    #line 4044 
    fc->refresh_time = (unsigned short)4096U;
    #line 4045 
    break;
    #line 4046 
    case (unsigned int)10: 
                           #line 4046 
    ;
    #line 4047 
    case (unsigned int)11: 
                           #line 4047 
    ;
    #line 4048 
    case (unsigned int)12: 
                           #line 4048 
    ;
    #line 4049 
    case (unsigned int)13: 
                           #line 4049 
    ;
    #line 4051 
    case (unsigned int)14: 
                           #line 4051 
    ;
    #line 4052 
    fc->refresh_time = (unsigned short)65535U;
    #line 4053 
    fc->pause_time = (unsigned short)65535U;
    #line 4055 
    if ((adapter->netdev)->mtu <= 1500U) {
      #line 4056 
      fc->high_water = 23584U;
      #line 4057 
      fc->low_water = 20552U;
      #line 4058 
      break;
    }
    #line 4061 
    pba = 14U;
    #line 4062 
    __ew32(hw,4096UL,pba);
    #line 4063 
    fc->high_water = (pba * 9216U) / 10U & 65528U;
    #line 4064 
    fc->low_water = (pba * 8192U) / 10U & 65528U;
    #line 4065 
    break;
  }
  {
    #line 4073 
    __UNIQUE_ID___x552 = ((__er32(hw,4096UL) >> 16) << 10) + 4294967200U;
    #line 4073 
    unsigned int __UNIQUE_ID___y553 = 24576U;
    #line 4073 
    if (__UNIQUE_ID___x552 < __UNIQUE_ID___y553) 
                                                 #line 4073 
                                                 tmp_2 = __UNIQUE_ID___x552; else 
                                                                    #line 4073 
                                                                    tmp_2 = __UNIQUE_ID___y553;
    }
  #line 4073 
  adapter->tx_fifo_limit = tmp_2;
  #line 4079 
  if ((adapter->itr_setting & 3U) != 0U) 
    #line 4080 
    if (adapter->max_frame_size * 2U > pba << 10) {
      #line 4081 
      if (((unsigned long)adapter->flags2 & 256UL) == 0UL) {
        #line 4082 
        _dev_info(& (adapter->pdev)->dev,(char *)"Interrupt Throttle Rate off\n");
        #line 4084 
        adapter->flags2 |= 256U;
        #line 4085 
        e1000e_write_itr(adapter,0U);
      }
    }
    else 
      #line 4087 
      if (((unsigned long)adapter->flags2 & 256UL) != 0UL) {
        #line 4088 
        _dev_info(& (adapter->pdev)->dev,(char *)"Interrupt Throttle Rate on\n");
        #line 4090 
        adapter->flags2 &= 4294967039U;
        #line 4091 
        adapter->itr = 20000U;
        #line 4092 
        e1000e_write_itr(adapter,adapter->itr);
      }
  #line 4096 
  if (hw->mac.type > (unsigned int)e1000_pch_lpt) 
                                                  #line 4097 
                                                  e1000_flush_desc_rings(adapter);
  #line 4099 
  (*(mac->ops.reset_hw))(hw);
  #line 4104 
  if (((unsigned long)adapter->flags & 1UL) != 0UL) 
                                                    #line 4105 
                                                    e1000e_get_hw_control(adapter);
  #line 4107 
  __ew32(hw,22528UL,0U);
  #line 4109 
  if ((*(mac->ops.init_hw))(hw) != 0) 
                                      #line 4110 
                                      netdev_err(adapter->netdev,(char *)"Hardware Error\n");
  #line 4112 
  e1000_update_mng_vlan(adapter);
  #line 4115 
  __ew32(hw,56UL,33024U);
  #line 4117 
  e1000e_reset_adaptive(hw);
  #line 4120 
  e1000e_systim_reset(adapter);
  #line 4123 
  if (((unsigned long)adapter->flags2 & 32UL) != 0UL) {
    #line 4124 
    s32 ret_val;
    #line 4125 
    u16 adv_addr;
    #line 4147 
    int tmp_5;
    #line 4127 
    switch ((unsigned int)hw->phy.type) {
      #line 4128 
      case (unsigned int)11: 
                             #line 4128 
      ;
      #line 4129 
      adv_addr = (unsigned short)1038U;
      #line 4130 
      break;
      #line 4131 
      case (unsigned int)12: 
                             #line 4131 
      ;
      #line 4132 
      adv_addr = (unsigned short)32769U;
      #line 4133 
      break;
      #line 4134 
      default: 
               #line 4134 
      ;
      #line 4135 
      _dev_err(& (adapter->pdev)->dev,(char *)"Invalid PHY type setting EEE advertisement\n");
      #line 4137 
      return;
    }
    #line 4140 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 4141 
    if (ret_val != 0) {
      #line 4142 
      _dev_err(& (adapter->pdev)->dev,(char *)"EEE advertisement - unable to acquire PHY\n");
      #line 4144 
      return;
    }
    #line 4147 
    if (hw->dev_spec.ich8lan.eee_disable) 
                                          #line 4147 
                                          tmp_5 = 0; else 
                                                          #line 4147 
                                                          tmp_5 = (int)adapter->eee_advert;
    #line 4147 
    ;
    #line 4147 
    ;
    #line 4147 
    e1000_write_emi_reg_locked(hw,(unsigned short)((int)adv_addr),(unsigned short)tmp_5);
    #line 4151 
    (*(hw->phy.ops.release))(hw);
  }
  #line 4154 
  if (! netif_running(adapter->netdev)) {
    #line 4155 
    if (! test_bit(0L,& adapter->state)) 
                                         #line 4156 
                                         e1000_power_down_phy(adapter);
  }
  #line 4158 
  e1000_get_phy_info(hw);
  #line 4160 
  if (((unsigned long)adapter->flags & 2048UL) != 0UL && ((unsigned long)adapter->flags & 67108864UL) == 0UL) {
    #line 4162 
    u16 phy_data = (unsigned short)0U;
    #line 4167 
    e1e_rphy(hw,25U,& phy_data);
    #line 4168 
    phy_data = (unsigned short)((unsigned int)phy_data & 65534U);
    #line 4169 
    e1e_wphy(hw,25U,(unsigned short)((int)phy_data));
  }
  #line 4171 
  if (hw->mac.type > (unsigned int)e1000_pch_lpt && adapter->int_mode == 0) {
    #line 4172 
    u32 reg;
    #line 4175 
    reg = __er32(hw,228UL);
    #line 4176 
    reg |= 4U;
    #line 4177 
    __ew32(hw,228UL,reg);
    #line 4179 
    reg = __er32(hw,23476UL);
    #line 4180 
    reg |= 6144U;
    #line 4182 
    __ew32(hw,23476UL,reg);
  }
  #line 4184 
  return;
}

#line 4193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_trigger_lsc(struct e1000_adapter *adapter)
{
  #line 4195 
  struct e1000_hw *hw = & adapter->hw;
  #line 4197 
  if (adapter->msix_entries != (struct msix_entry *)0) 
                                                       #line 4198 
                                                       __ew32(hw,200UL,16777220U); else 
                                                                    #line 4200 
                                                                    __ew32(hw,200UL,4U);
  #line 4201 
  return;
}

#line 4203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_up(struct e1000_adapter *adapter)
{
  #line 4206 
  e1000_configure(adapter);
  #line 4208 
  cif_clear_bit_0(3L,& adapter->state);
  #line 4210 
  if (adapter->msix_entries != (struct msix_entry *)0) 
                                                       #line 4211 
                                                       e1000_configure_msix(adapter);
  #line 4212 
  e1000_irq_enable(adapter);
  #line 4216 
  e1000e_trigger_lsc(adapter);
  #line 4217 
  return;
}

#line 4219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_flush_descriptors(struct e1000_adapter *adapter)
{
  #line 4221 
  struct e1000_hw *hw = & adapter->hw;
  #line 4223 
  if (((unsigned long)adapter->flags2 & 64UL) == 0UL) 
                                                      #line 4224 
                                                      return;
  #line 4227 
  __ew32(hw,14368UL,adapter->tx_int_delay | 2147483648U);
  #line 4228 
  __ew32(hw,10272UL,adapter->rx_int_delay | 2147483648U);
  #line 4231 
  __er32(hw,8UL);
  #line 4236 
  __ew32(hw,14368UL,adapter->tx_int_delay | 2147483648U);
  #line 4237 
  __ew32(hw,10272UL,adapter->rx_int_delay | 2147483648U);
  #line 4240 
  __er32(hw,8UL);
  #line 4241 
  return;
}

#line 4243 
#line 4915 
static void e1000e_update_stats(struct e1000_adapter *adapter);
#line 4250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_down(struct e1000_adapter *adapter, bool reset)
{
  #line 4254 
  u32 tctl;
  #line 4254 
  u32 rctl;
  #line 4252 
  struct net_device *netdev = adapter->netdev;
  #line 4253 
  struct e1000_hw *hw = & adapter->hw;
  #line 4259 
  cif_set_bit(3L,& adapter->state);
  #line 4261 
  netif_carrier_off(netdev);
  #line 4264 
  rctl = __er32(hw,256UL);
  #line 4265 
  if (((unsigned long)adapter->flags2 & 1024UL) == 0UL) 
                                                        #line 4266 
                                                        __ew32(hw,256UL,rctl & 4294967293U);
  #line 4269 
  netif_stop_queue(netdev);
  #line 4272 
  tctl = __er32(hw,1024UL);
  #line 4273 
  tctl &= 4294967293U;
  #line 4274 
  __ew32(hw,1024UL,tctl);
  #line 4277 
  __er32(hw,8UL);
  #line 4278 
  usleep_range(10000UL,11000UL);
  #line 4280 
  e1000_irq_disable(adapter);
  #line 4282 
  napi_synchronize(& adapter->napi);
  #line 4284 
  cif_del_timer_sync(& adapter->watchdog_timer);
  #line 4285 
  cif_del_timer_sync(& adapter->phy_info_timer);
  #line 4287 
  cif_spin_lock_stats64_lock_of_e1000_adapter(& adapter->stats64_lock);
  #line 4288 
  e1000e_update_stats(adapter);
  #line 4289 
  cif_spin_unlock_stats64_lock_of_e1000_adapter(& adapter->stats64_lock);
  #line 4291 
  e1000e_flush_descriptors(adapter);
  #line 4293 
  adapter->link_speed = (unsigned short)0U;
  #line 4294 
  adapter->link_duplex = (unsigned short)0U;
  #line 4297 
  if (hw->mac.type > (unsigned int)e1000_pchlan && (adapter->netdev)->mtu > 1500U) {
    #line 4298 
    if (e1000_lv_jumbo_workaround_ich8lan(hw,(_Bool)0) != 0) {
      #line 4300 
      bool branch;
      #line 4300 
      struct _ddebug __UNIQUE_ID_ddebug554 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_down", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c", .format = (char *)"failed to disable jumbo frame workaround mode\n", .lineno = (unsigned int)4300U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 4300 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug554.key.dd_key_false.key,(_Bool)0);
      #line 4300 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 4300 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug554,(hw->adapter)->netdev,(char *)"failed to disable jumbo frame workaround mode\n");
    }
  }
  #line 4302 
  if (pci_channel_offline(adapter->pdev) == 0) 
    #line 4303 
    if ((int)reset != 0) 
                         #line 4304 
                         e1000e_reset(adapter);
    else 
      #line 4305 
      if (hw->mac.type > (unsigned int)e1000_pch_lpt) 
                                                      #line 4306 
                                                      e1000_flush_desc_rings(adapter);
  #line 4308 
  e1000_clean_tx_ring(adapter->tx_ring);
  #line 4309 
  e1000_clean_rx_ring(adapter->rx_ring);
  #line 4310 
  return;
}

#line 4312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_reinit_locked(struct e1000_adapter *adapter)
{
  #line 4314 
  __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c",4314,0);
  #line 4315 
  while (1) {
    #line 4315 
    if (! ((int)test_and_set_bit(1L,& adapter->state) != 0)) 
                                                             #line 4315 
                                                             break;
    #line 4316 
    usleep_range(1000UL,1100UL);
  }
  #line 4317 
  e1000e_down(adapter,(_Bool)1);
  #line 4318 
  e1000e_up(adapter);
  #line 4319 
  cif_clear_bit_0(1L,& adapter->state);
  #line 4320 
  return;
}

#line 4333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static u64 e1000e_sanitize_systim(struct e1000_hw *hw, u64 systim, struct ptp_system_timestamp *sts)
{
  #line 4336 
  u64 time_delta;
  #line 4336 
  u64 rem;
  #line 4336 
  u64 temp;
  #line 4337 
  u64 systim_next;
  #line 4338 
  u32 incvalue;
  #line 4339 
  int i;
  #line 4341 
  incvalue = __er32(hw,46600UL) & 16777215U;
  #line 4342 
  i = 0;
  #line 4342 
  while (i <= 49) {
    {
      #line 4352 
      uint32_t __rem;
      #line 4352 
      uint32_t tmp_3;
      #line 4344 
      ptp_read_system_prets(sts);
      #line 4345 
      systim_next = (unsigned long long)__er32(hw,46592UL);
      #line 4346 
      ptp_read_system_postts(sts);
      #line 4347 
      systim_next = ((unsigned long long)__er32(hw,46596UL) << 32) | systim_next;
      #line 4349 
      time_delta = systim_next - systim;
      #line 4350 
      temp = time_delta;
      #line 4352 
      if (incvalue != 0U) {
        {
          #line 4352 
          uint32_t __base = incvalue;
          #line 4352 
          __rem = (unsigned int)(temp % (unsigned long long)__base);
          #line 4352 
          temp /= (unsigned long long)__base;
          }
        #line 4352 
        tmp_3 = __rem;
      }
      else 
           #line 4352 
           tmp_3 = (unsigned int)(time_delta != 0ULL);
      #line 4352 
      rem = (unsigned long long)tmp_3;
      #line 4354 
      systim = systim_next;
      #line 4356 
      if (time_delta <= 34359738367ULL && rem == 0ULL) 
                                                       #line 4357 
                                                       break;
    }
    #line 4342 
    i ++;
  }
  #line 4360 
  return systim;
}

#line 4369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
u64 e1000e_read_systim(struct e1000_adapter *adapter, struct ptp_system_timestamp *sts)
{
  #line 4373 
  u32 systimel;
  #line 4373 
  u32 systimel_2;
  #line 4373 
  u32 systimeh;
  #line 4374 
  u64 systim;
  #line 4372 
  struct e1000_hw *hw = & adapter->hw;
  #line 4381 
  ptp_read_system_prets(sts);
  #line 4382 
  systimel = __er32(hw,46592UL);
  #line 4383 
  ptp_read_system_postts(sts);
  #line 4384 
  systimeh = __er32(hw,46596UL);
  #line 4386 
  if (systimel > 4278190079U) {
    #line 4387 
    ptp_read_system_prets(sts);
    #line 4388 
    systimel_2 = __er32(hw,46592UL);
    #line 4389 
    ptp_read_system_postts(sts);
    #line 4390 
    if (systimel > systimel_2) {
      #line 4394 
      systimeh = __er32(hw,46596UL);
      #line 4395 
      systimel = systimel_2;
    }
  }
  #line 4398 
  systim = (unsigned long long)systimel;
  #line 4399 
  systim = ((unsigned long long)systimeh << 32) | systim;
  #line 4401 
  if (((unsigned long)adapter->flags2 & 16384UL) != 0UL) 
                                                         #line 4402 
                                                         systim = e1000e_sanitize_systim(hw,systim,sts);
  #line 4404 
  return systim;
}

#line 4411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static u64 e1000e_cyclecounter_read(struct cyclecounter *cc)
{
  #line 4413 
  void *__mptr;
  #line 4413 
  __mptr = (void *)cc;
  #line 4413 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709538752U));
  #line 4416 
  return e1000e_read_systim(adapter,(struct ptp_system_timestamp *)0);
}

#line 4427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_sw_init(struct e1000_adapter *adapter)
{
  #line 4429 
  struct net_device *netdev = adapter->netdev;
  #line 4431 
  adapter->rx_buffer_len = 1522U;
  #line 4432 
  adapter->rx_ps_bsize0 = (unsigned short)128U;
  #line 4433 
  adapter->max_frame_size = netdev->mtu + 22U;
  #line 4434 
  adapter->min_frame_size = 64U;
  #line 4435 
  adapter->tx_ring_count = (unsigned short)256U;
  #line 4436 
  adapter->rx_ring_count = (unsigned short)256U;
  #line 4438 
  spinlock_check(& adapter->stats64_lock);
  {
    #line 4438 
    struct lock_class_key __key;
    #line 4438 
    __raw_spin_lock_init(& adapter->stats64_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->stats64_lock)->rlock",& __key);
  }
  #line 4440 
  e1000e_set_interrupt_capability(adapter);
  #line 4442 
  if (e1000_alloc_queues(adapter) != 0) 
                                        #line 4443 
                                        return -12;
  #line 4446 
  if (((unsigned long)adapter->flags & 16384UL) != 0UL) {
    #line 4447 
    adapter->cc.read = & e1000e_cyclecounter_read;
    #line 4448 
    adapter->cc.mask = 18446744073709551615ULL;
    #line 4449 
    adapter->cc.mult = 1U;
    #line 4452 
    spinlock_check(& adapter->systim_lock);
    {
      #line 4452 
      struct lock_class_key __key_0;
      #line 4452 
      __raw_spin_lock_init(& adapter->systim_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->systim_lock)->rlock",& __key_0);
    }
    {
      #line 4453 
      struct lock_class_key __key_1;
      #line 4453 
      __init_work(& adapter->tx_hwtstamp_work,0);
      #line 4453 
      atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
      #line 4453 
      adapter->tx_hwtstamp_work.data = __constr_expr_44;
      #line 4453 
      lockdep_init_map(& adapter->tx_hwtstamp_work.lockdep_map,(char *)"(work_completion)",& __key_1,0);
      #line 4453 
      INIT_LIST_HEAD(& adapter->tx_hwtstamp_work.entry);
      #line 4453 
      adapter->tx_hwtstamp_work.func = & e1000e_tx_hwtstamp_work;
    }
  }
  #line 4457 
  e1000_irq_disable(adapter);
  #line 4459 
  cif_set_bit(3L,& adapter->state);
  #line 4460 
  return 0;
}

#line 4468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static irqreturn_t e1000_intr_msi_test(int irq, void *data)
{
  #line 4470 
  struct net_device *netdev = (struct net_device *)data;
  #line 4471 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 4472 
  struct e1000_hw *hw = & adapter->hw;
  #line 4473 
  u32 icr = __er32(hw,192UL);
  {
    #line 4475 
    bool branch;
    #line 4475 
    struct _ddebug __UNIQUE_ID_ddebug555 = {.modname = (char *)"e1000e", .function = (char *)"e1000_intr_msi_test", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c", .format = (char *)"icr is %08X\n", .lineno = (unsigned int)4475U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4475 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug555.key.dd_key_false.key,(_Bool)0);
    #line 4475 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 4475 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug555,(hw->adapter)->netdev,(char *)"icr is %08X\n",icr);
  }
  #line 4476 
  if ((icr & 8U) != 0U) {
    #line 4477 
    adapter->flags &= 2147483647U;
    #line 4478 
    ldv_inline_asm();
  }
  #line 4484 
  return IRQ_HANDLED;
}

#line 4493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_test_msi_interrupt(struct e1000_adapter *adapter)
{
  #line 4497 
  int err;
  #line 4495 
  struct net_device *netdev = adapter->netdev;
  #line 4496 
  struct e1000_hw *hw = & adapter->hw;
  #line 4501 
  __er32(hw,192UL);
  #line 4504 
  e1000_free_irq(adapter);
  #line 4505 
  e1000e_reset_interrupt_capability(adapter);
  #line 4510 
  adapter->flags |= 2147483648U;
  #line 4512 
  err = pci_enable_msi(adapter->pdev);
  #line 4513 
  if (err != 0) 
                #line 4514 
                goto msi_test_failed;
  #line 4516 
  err = cif_request_irq((adapter->pdev)->irq,& e1000_intr_msi_test,0UL,(char *)(& netdev->name),(void *)netdev);
  #line 4518 
  if (err != 0) {
    #line 4519 
    pci_disable_msi(adapter->pdev);
    #line 4520 
    goto msi_test_failed;
  }
  #line 4522 
  ldv_inline_asm();
  #line 4528 
  e1000_irq_enable(adapter);
  #line 4531 
  __ew32(hw,200UL,8U);
  #line 4532 
  __er32(hw,8UL);
  #line 4533 
  msleep(100U);
  #line 4535 
  e1000_irq_disable(adapter);
  #line 4536 
  ldv_inline_asm();
  #line 4539 
  if (((unsigned long)adapter->flags & 2147483648UL) != 0UL) {
    #line 4540 
    adapter->int_mode = 0;
    #line 4541 
    netdev_info(adapter->netdev,(char *)"MSI interrupt test failed, using legacy interrupt.\n");
  }
  else {
    #line 4543 
    bool branch;
    #line 4543 
    struct _ddebug __UNIQUE_ID_ddebug556 = {.modname = (char *)"e1000e", .function = (char *)"e1000_test_msi_interrupt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c", .format = (char *)"MSI interrupt test succeeded!\n", .lineno = (unsigned int)4543U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4543 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug556.key.dd_key_false.key,(_Bool)0);
    #line 4543 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 4543 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug556,(hw->adapter)->netdev,(char *)"MSI interrupt test succeeded!\n");
  }
  #line 4546 
  cif_free_irq((adapter->pdev)->irq,(void *)netdev);
  #line 4547 
  pci_disable_msi(adapter->pdev);
  #line 4549 
  msi_test_failed: 
                   #line 4549 
  ;
  #line 4550 
  e1000e_set_interrupt_capability(adapter);
  #line 4551 
  return e1000_request_irq(adapter);
}

#line 4560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_test_msi(struct e1000_adapter *adapter)
{
  #line 4562 
  int err;
  #line 4563 
  u16 pci_cmd;
  #line 4565 
  if (((unsigned long)adapter->flags & 134217728UL) == 0UL) 
                                                            #line 4566 
                                                            return 0;
  #line 4569 
  pci_read_config_word(adapter->pdev,4,& pci_cmd);
  #line 4570 
  if (((int)pci_cmd & 256) != 0) 
                                 #line 4571 
                                 pci_write_config_word(adapter->pdev,4,(unsigned short)((int)pci_cmd & 65279));
  #line 4574 
  err = e1000_test_msi_interrupt(adapter);
  #line 4577 
  if (((int)pci_cmd & 256) != 0) {
    #line 4578 
    pci_read_config_word(adapter->pdev,4,& pci_cmd);
    #line 4579 
    pci_cmd = (unsigned short)((unsigned int)pci_cmd | 256U);
    #line 4580 
    pci_write_config_word(adapter->pdev,4,(unsigned short)((int)pci_cmd));
  }
  #line 4583 
  return err;
}

#line 4598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
int e1000e_open(struct net_device *netdev)
{
  #line 4603 
  int err;
  #line 4600 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 4601 
  struct e1000_hw *hw = & adapter->hw;
  #line 4602 
  struct pci_dev *pdev = adapter->pdev;
  #line 4606 
  if ((int)test_bit(0L,& adapter->state) != 0) 
                                               #line 4607 
                                               return -16;
  #line 4609 
  pm_runtime_get_sync(& pdev->dev);
  #line 4611 
  netif_carrier_off(netdev);
  #line 4612 
  netif_stop_queue(netdev);
  #line 4615 
  err = e1000e_setup_tx_resources(adapter->tx_ring);
  #line 4616 
  if (err != 0) 
                #line 4617 
                goto err_setup_tx;
  #line 4620 
  err = e1000e_setup_rx_resources(adapter->rx_ring);
  #line 4621 
  if (err != 0) 
                #line 4622 
                goto err_setup_rx;
  #line 4627 
  if (((unsigned long)adapter->flags & 1UL) != 0UL) {
    #line 4628 
    e1000e_get_hw_control(adapter);
    #line 4629 
    e1000e_reset(adapter);
  }
  #line 4632 
  e1000e_power_up_phy(adapter);
  #line 4634 
  adapter->mng_vlan_id = (unsigned short)65535U;
  #line 4635 
  if (((int)adapter->hw.mng_cookie.status & 2) != 0) 
                                                     #line 4636 
                                                     e1000_update_mng_vlan(adapter);
  #line 4639 
  pm_qos_add_request(& adapter->pm_qos_req,1,-1);
  #line 4647 
  e1000_configure(adapter);
  #line 4649 
  err = e1000_request_irq(adapter);
  #line 4650 
  if (err != 0) 
                #line 4651 
                goto err_req_irq;
  #line 4657 
  if (adapter->int_mode != 0) {
    #line 4658 
    err = e1000_test_msi(adapter);
    #line 4659 
    if (err != 0) {
      #line 4660 
      netdev_err(adapter->netdev,(char *)"Interrupt allocation failed\n");
      #line 4661 
      goto err_req_irq;
    }
  }
  #line 4666 
  cif_clear_bit_0(3L,& adapter->state);
  #line 4668 
  napi_enable(& adapter->napi);
  #line 4670 
  e1000_irq_enable(adapter);
  #line 4672 
  adapter->tx_hang_recheck = (_Bool)0;
  #line 4674 
  hw->mac.get_link_status = (_Bool)1;
  #line 4675 
  pm_runtime_put(& pdev->dev);
  #line 4677 
  e1000e_trigger_lsc(adapter);
  #line 4679 
  return 0;
  #line 4681 
  err_req_irq: 
               #line 4681 
  ;
  #line 4682 
  pm_qos_remove_request(& adapter->pm_qos_req);
  #line 4683 
  e1000e_release_hw_control(adapter);
  #line 4684 
  e1000_power_down_phy(adapter);
  #line 4685 
  e1000e_free_rx_resources(adapter->rx_ring);
  #line 4686 
  err_setup_rx: 
                #line 4686 
  ;
  #line 4687 
  e1000e_free_tx_resources(adapter->tx_ring);
  #line 4688 
  err_setup_tx: 
                #line 4688 
  ;
  #line 4689 
  e1000e_reset(adapter);
  #line 4690 
  pm_runtime_put_sync(& pdev->dev);
  #line 4692 
  return err;
}

#line 4706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
int e1000e_close(struct net_device *netdev)
{
  #line 4708 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 4709 
  struct pci_dev *pdev = adapter->pdev;
  #line 4710 
  int count = 25;
  #line 4712 
  while (1) {
    #line 4712 
    if ((int)test_bit(1L,& adapter->state) != 0) {
      #line 4712 
      int tmp_1;
      #line 4712 
      tmp_1 = count;
      #line 4712 
      count --;
      #line 4712 
      ;
      #line 4712 
      if (! (tmp_1 != 0)) 
                          #line 4712 
                          break;
    }
    else 
         #line 4712 
         break;
    #line 4713 
    usleep_range(10000UL,11000UL);
  }
  {
    #line 4715 
    int __ret_warn_on = (int)test_bit(1L,& adapter->state) != 0;
    #line 4715 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 4716 
      ldv_inline_asm();
      #line 4717 
      ldv_inline_asm();
    }
    #line 4715 
    long tmp_3 = (long)(__ret_warn_on != 0);
  }
  #line 4717 
  pm_runtime_get_sync(& pdev->dev);
  #line 4719 
  if ((int)netif_device_present(netdev) != 0) {
    #line 4720 
    e1000e_down(adapter,(_Bool)1);
    #line 4721 
    e1000_free_irq(adapter);
    #line 4724 
    printk((char *)"\001",(char *)(& netdev->name));
  }
  #line 4727 
  napi_disable(& adapter->napi);
  #line 4729 
  e1000e_free_tx_resources(adapter->tx_ring);
  #line 4730 
  e1000e_free_rx_resources(adapter->rx_ring);
  #line 4735 
  if (((int)adapter->hw.mng_cookie.status & 2) != 0) 
                                                     #line 4736 
                                                     e1000_vlan_rx_kill_vid(netdev,(unsigned short)129,(unsigned short)((int)adapter->mng_vlan_id));
  #line 4742 
  if (((unsigned long)adapter->flags & 1UL) != 0UL) {
    #line 4743 
    if (! test_bit(0L,& adapter->state)) 
                                         #line 4744 
                                         e1000e_release_hw_control(adapter);
  }
  #line 4746 
  pm_qos_remove_request(& adapter->pm_qos_req);
  #line 4748 
  pm_runtime_put_sync(& pdev->dev);
  #line 4750 
  return 0;
}

#line 4760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_set_mac(struct net_device *netdev, void *p)
{
  #line 4762 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 4763 
  struct e1000_hw *hw = & adapter->hw;
  #line 4764 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 4766 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 4767 
                                                      return -99;
  #line 4769 
  memcpy((void *)netdev->dev_addr,(void *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  #line 4770 
  memcpy((void *)(& adapter->hw.mac.addr),(void *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  #line 4772 
  (*(hw->mac.ops.rar_set))(& adapter->hw,(u8 *)(& adapter->hw.mac.addr),0U);
  #line 4774 
  if (((unsigned long)adapter->flags & 2097152UL) != 0UL) {
    #line 4776 
    e1000e_set_laa_state_82571(& adapter->hw,(_Bool)1);
    #line 4785 
    (*(hw->mac.ops.rar_set))(& adapter->hw,(u8 *)(& adapter->hw.mac.addr),(unsigned int)((int)adapter->hw.mac.rar_entry_count + -1));
  }
  #line 4789 
  return 0;
}

#line 4800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_update_phy_task(struct work_struct *work)
{
  #line 4802 
  void *__mptr;
  #line 4802 
  __mptr = (void *)work;
  #line 4802 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709539288U));
  #line 4805 
  struct e1000_hw *hw = & adapter->hw;
  #line 4807 
  if ((int)test_bit(3L,& adapter->state) != 0) 
                                               #line 4808 
                                               return;
  #line 4810 
  e1000_get_phy_info(hw);
  #line 4813 
  if (hw->phy.type > (unsigned int)e1000_phy_82577) 
                                                    #line 4814 
                                                    e1000_set_eee_pchlan(hw);
  #line 4815 
  return;
}

#line 4824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_update_phy_info(struct timer_list *t)
{
  #line 4826 
  void *__mptr;
  #line 4826 
  __mptr = (void *)t;
  #line 4826 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709551528U));
  #line 4828 
  if ((int)test_bit(3L,& adapter->state) != 0) 
                                               #line 4829 
                                               return;
  #line 4831 
  cif_schedule_work(& adapter->update_phy_task);
  #line 4832 
  return;
}

#line 4840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_update_phy_stats(struct e1000_adapter *adapter)
{
  #line 4843 
  s32 ret_val;
  #line 4844 
  u16 phy_data;
  #line 4842 
  struct e1000_hw *hw = & adapter->hw;
  #line 4846 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 4847 
  if (ret_val != 0) 
                    #line 4848 
                    return;
  #line 4853 
  hw->phy.addr = 1U;
  #line 4854 
  ret_val = e1000e_read_phy_reg_mdic(hw,31U,& phy_data);
  #line 4856 
  if (ret_val != 0) 
                    #line 4857 
                    goto release;
  #line 4858 
  if ((unsigned int)phy_data != 24896U) {
    #line 4859 
    ret_val = (*(hw->phy.ops.set_page))(hw,(unsigned short)24896);
    #line 4861 
    if (ret_val != 0) 
                      #line 4862 
                      goto release;
  }
  #line 4866 
  (*(hw->phy.ops.read_reg_page))(hw,24912U,& phy_data);
  #line 4867 
  ret_val = (*(hw->phy.ops.read_reg_page))(hw,24913U,& phy_data);
  #line 4868 
  if (ret_val == 0) 
                    #line 4869 
                    adapter->stats.scc += (unsigned long long)phy_data;
  #line 4872 
  (*(hw->phy.ops.read_reg_page))(hw,24914U,& phy_data);
  #line 4873 
  ret_val = (*(hw->phy.ops.read_reg_page))(hw,24915U,& phy_data);
  #line 4874 
  if (ret_val == 0) 
                    #line 4875 
                    adapter->stats.ecol += (unsigned long long)phy_data;
  #line 4878 
  (*(hw->phy.ops.read_reg_page))(hw,24916U,& phy_data);
  #line 4879 
  ret_val = (*(hw->phy.ops.read_reg_page))(hw,24917U,& phy_data);
  #line 4880 
  if (ret_val == 0) 
                    #line 4881 
                    adapter->stats.mcc += (unsigned long long)phy_data;
  #line 4884 
  (*(hw->phy.ops.read_reg_page))(hw,24919U,& phy_data);
  #line 4885 
  ret_val = (*(hw->phy.ops.read_reg_page))(hw,24920U,& phy_data);
  #line 4886 
  if (ret_val == 0) 
                    #line 4887 
                    adapter->stats.latecol += (unsigned long long)phy_data;
  #line 4890 
  (*(hw->phy.ops.read_reg_page))(hw,24921U,& phy_data);
  #line 4891 
  ret_val = (*(hw->phy.ops.read_reg_page))(hw,24922U,& phy_data);
  #line 4892 
  if (ret_val == 0) 
                    #line 4893 
                    hw->mac.collision_delta = (unsigned int)phy_data;
  #line 4896 
  (*(hw->phy.ops.read_reg_page))(hw,24923U,& phy_data);
  #line 4897 
  ret_val = (*(hw->phy.ops.read_reg_page))(hw,24924U,& phy_data);
  #line 4898 
  if (ret_val == 0) 
                    #line 4899 
                    adapter->stats.dc += (unsigned long long)phy_data;
  #line 4902 
  (*(hw->phy.ops.read_reg_page))(hw,24925U,& phy_data);
  #line 4903 
  ret_val = (*(hw->phy.ops.read_reg_page))(hw,24926U,& phy_data);
  #line 4904 
  if (ret_val == 0) 
                    #line 4905 
                    adapter->stats.tncrs += (unsigned long long)phy_data;
  #line 4907 
  release: 
           #line 4907 
  ;
  #line 4908 
  (*(hw->phy.ops.release))(hw);
  #line 4909 
  return;
}

#line 4915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_update_stats(struct e1000_adapter *adapter)
{
  #line 4917 
  struct net_device *netdev = adapter->netdev;
  #line 4918 
  struct e1000_hw *hw = & adapter->hw;
  #line 4919 
  struct pci_dev *pdev = adapter->pdev;
  #line 4924 
  if ((unsigned int)adapter->link_speed == 0U) 
                                               #line 4925 
                                               return;
  #line 4926 
  if (pci_channel_offline(pdev) != 0) 
                                      #line 4927 
                                      return;
  #line 4929 
  adapter->stats.crcerrs += (unsigned long long)__er32(hw,16384UL);
  #line 4930 
  adapter->stats.gprc += (unsigned long long)__er32(hw,16500UL);
  #line 4931 
  adapter->stats.gorc += (unsigned long long)__er32(hw,16520UL);
  #line 4932 
  __er32(hw,16524UL);
  #line 4933 
  adapter->stats.bprc += (unsigned long long)__er32(hw,16504UL);
  #line 4934 
  adapter->stats.mprc += (unsigned long long)__er32(hw,16508UL);
  #line 4935 
  adapter->stats.roc += (unsigned long long)__er32(hw,16556UL);
  #line 4937 
  adapter->stats.mpc += (unsigned long long)__er32(hw,16400UL);
  #line 4940 
  if ((unsigned int)adapter->link_duplex == 1U) {
    #line 4941 
    if (((unsigned long)adapter->flags2 & 16UL) != 0UL) 
                                                        #line 4942 
                                                        e1000e_update_phy_stats(adapter);
    else {
      #line 4944 
      adapter->stats.scc += (unsigned long long)__er32(hw,16404UL);
      #line 4945 
      adapter->stats.ecol += (unsigned long long)__er32(hw,16408UL);
      #line 4946 
      adapter->stats.mcc += (unsigned long long)__er32(hw,16412UL);
      #line 4947 
      adapter->stats.latecol += (unsigned long long)__er32(hw,16416UL);
      #line 4948 
      adapter->stats.dc += (unsigned long long)__er32(hw,16432UL);
      #line 4950 
      hw->mac.collision_delta = __er32(hw,16424UL);
      #line 4952 
      if ((unsigned int)hw->mac.type + 4294967293U > 1U) {
        #line 4954 
        adapter->stats.tncrs += (unsigned long long)__er32(hw,16436UL);
      }
    }
    #line 4956 
    adapter->stats.colc += (unsigned long long)hw->mac.collision_delta;
  }
  #line 4959 
  adapter->stats.xonrxc += (unsigned long long)__er32(hw,16456UL);
  #line 4960 
  adapter->stats.xontxc += (unsigned long long)__er32(hw,16460UL);
  #line 4961 
  adapter->stats.xoffrxc += (unsigned long long)__er32(hw,16464UL);
  #line 4962 
  adapter->stats.xofftxc += (unsigned long long)__er32(hw,16468UL);
  #line 4963 
  adapter->stats.gptc += (unsigned long long)__er32(hw,16512UL);
  #line 4964 
  adapter->stats.gotc += (unsigned long long)__er32(hw,16528UL);
  #line 4965 
  __er32(hw,16532UL);
  #line 4966 
  adapter->stats.rnbc += (unsigned long long)__er32(hw,16544UL);
  #line 4967 
  adapter->stats.ruc += (unsigned long long)__er32(hw,16548UL);
  #line 4969 
  adapter->stats.mptc += (unsigned long long)__er32(hw,16624UL);
  #line 4970 
  adapter->stats.bptc += (unsigned long long)__er32(hw,16628UL);
  #line 4974 
  hw->mac.tx_packet_delta = __er32(hw,16596UL);
  #line 4975 
  adapter->stats.tpt += (unsigned long long)hw->mac.tx_packet_delta;
  #line 4977 
  adapter->stats.algnerrc += (unsigned long long)__er32(hw,16388UL);
  #line 4978 
  adapter->stats.rxerrc += (unsigned long long)__er32(hw,16396UL);
  #line 4979 
  adapter->stats.cexterr += (unsigned long long)__er32(hw,16444UL);
  #line 4980 
  adapter->stats.tsctc += (unsigned long long)__er32(hw,16632UL);
  #line 4981 
  adapter->stats.tsctfc += (unsigned long long)__er32(hw,16636UL);
  #line 4984 
  netdev->stats.multicast = (unsigned long)adapter->stats.mprc;
  #line 4985 
  netdev->stats.collisions = (unsigned long)adapter->stats.colc;
  #line 4992 
  netdev->stats.rx_errors = (unsigned long)(((((adapter->stats.rxerrc + adapter->stats.crcerrs) + adapter->stats.algnerrc) + adapter->stats.ruc) + adapter->stats.roc) + adapter->stats.cexterr);
  #line 4995 
  netdev->stats.rx_length_errors = (unsigned long)(adapter->stats.ruc + adapter->stats.roc);
  #line 4997 
  netdev->stats.rx_crc_errors = (unsigned long)adapter->stats.crcerrs;
  #line 4998 
  netdev->stats.rx_frame_errors = (unsigned long)adapter->stats.algnerrc;
  #line 4999 
  netdev->stats.rx_missed_errors = (unsigned long)adapter->stats.mpc;
  #line 5002 
  netdev->stats.tx_errors = (unsigned long)(adapter->stats.ecol + adapter->stats.latecol);
  #line 5003 
  netdev->stats.tx_aborted_errors = (unsigned long)adapter->stats.ecol;
  #line 5004 
  netdev->stats.tx_window_errors = (unsigned long)adapter->stats.latecol;
  #line 5005 
  netdev->stats.tx_carrier_errors = (unsigned long)adapter->stats.tncrs;
  #line 5010 
  adapter->stats.mgptc += (unsigned long long)__er32(hw,16572UL);
  #line 5011 
  adapter->stats.mgprc += (unsigned long long)__er32(hw,16564UL);
  #line 5012 
  adapter->stats.mgpdc += (unsigned long long)__er32(hw,16568UL);
  #line 5015 
  if (hw->mac.type > (unsigned int)e1000_pch2lan) {
    #line 5016 
    u32 pbeccsts = __er32(hw,4108UL);
    #line 5018 
    adapter->corr_errors += pbeccsts & 255U;
    #line 5020 
    adapter->uncorr_errors += (pbeccsts >> 8) & 255U;
  }
  #line 5023 
  return;
}

#line 5030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_phy_read_status(struct e1000_adapter *adapter)
{
  #line 5032 
  struct e1000_hw *hw = & adapter->hw;
  #line 5033 
  struct e1000_phy_regs *phy = & adapter->phy_regs;
  #line 5035 
  if (cif_pm_runtime_suspended((adapter->pdev)->dev.parent)) {
    #line 5035 
    _LAND_0: {
               #line 5054 
               phy->bmcr = (unsigned short)4416U;
               #line 5055 
               phy->bmsr = (unsigned short)30985U;
               #line 5058 
               phy->advertise = (unsigned short)3553U;
               #line 5060 
               phy->lpa = (unsigned short)0U;
               #line 5061 
               phy->expansion = (unsigned short)4U;
               #line 5062 
               phy->ctrl1000 = (unsigned short)512U;
               #line 5063 
               phy->stat1000 = (unsigned short)0U;
               #line 5064 
               phy->estatus = (unsigned short)12288U;
             }
  }
  else {
    #line 5035 
    if ((__er32(hw,8UL) & 2U) != 0U) {
      #line 5036 
      if (adapter->hw.phy.media_type == (unsigned int)e1000_media_type_copper) {
        #line 5038 
        int ret_val;
        #line 5040 
        ret_val = e1e_rphy(hw,0U,& phy->bmcr);
        #line 5041 
        ret_val = e1e_rphy(hw,1U,& phy->bmsr) | ret_val;
        #line 5042 
        ret_val = e1e_rphy(hw,4U,& phy->advertise) | ret_val;
        #line 5043 
        ret_val = e1e_rphy(hw,5U,& phy->lpa) | ret_val;
        #line 5044 
        ret_val = e1e_rphy(hw,6U,& phy->expansion) | ret_val;
        #line 5045 
        ret_val = e1e_rphy(hw,9U,& phy->ctrl1000) | ret_val;
        #line 5046 
        ret_val = e1e_rphy(hw,10U,& phy->stat1000) | ret_val;
        #line 5047 
        ret_val = e1e_rphy(hw,15U,& phy->estatus) | ret_val;
        #line 5048 
        if (ret_val != 0) 
                          #line 5049 
                          netdev_warn(adapter->netdev,(char *)"Error reading PHY register\n");
      }
      else 
           #line 5035 
           goto _LAND_0;
    }
    else 
         #line 5035 
         goto _LAND_0;
  }
  #line 5066 
  return;
}

#line 5068  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_print_link_info(struct e1000_adapter *adapter)
{
  #line 5074 
  char *tmp_0;
  #line 5074 
  char *tmp_1;
  #line 5074 
  char *tmp_2;
  #line 5074 
  char *tmp_3;
  #line 5070 
  struct e1000_hw *hw = & adapter->hw;
  #line 5071 
  u32 ctrl = __er32(hw,0UL);
  #line 5074 
  if ((ctrl & 268435456U) == 0U || (ctrl & 134217728U) == 0U) {
    #line 5074 
    if ((ctrl & 134217728U) == 0U) {
      #line 5074 
      if ((ctrl & 268435456U) != 0U) 
                                     #line 5074 
                                     tmp_0 = (char *)"Tx"; else 
                                                                #line 5074 
                                                                tmp_0 = (char *)"None";
      #line 5074 
      tmp_1 = tmp_0;
    }
    else 
         #line 5074 
         tmp_1 = (char *)"Rx";
    #line 5074 
    tmp_2 = tmp_1;
  }
  else 
       #line 5074 
       tmp_2 = (char *)"Rx/Tx";
  #line 5074 
  if ((unsigned int)adapter->link_duplex == 2U) 
                                                #line 5074 
                                                tmp_3 = (char *)"Full"; else 
                                                                    #line 5074 
                                                                    tmp_3 = (char *)"Half";
  #line 5074 
  ;
  #line 5074 
  ;
  #line 5074 
  printk((char *)"\001",(char *)(& (adapter->netdev)->name),(int)adapter->link_speed,tmp_3,tmp_2);
  #line 5075 
  return;
}

#line 5082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static bool e1000e_has_link(struct e1000_adapter *adapter)
{
  #line 5084 
  struct e1000_hw *hw = & adapter->hw;
  #line 5085 
  bool link_active = (_Bool)0;
  #line 5086 
  s32 ret_val = 0;
  #line 5093 
  switch ((unsigned int)hw->phy.media_type) {
    #line 5094 
    case (unsigned int)1: 
                          #line 5094 
    ;
    #line 5095 
    if ((int)hw->mac.get_link_status != 0) {
      #line 5096 
      ret_val = (*(hw->mac.ops.check_for_link))(hw);
      #line 5097 
      link_active = (_Bool)(! ((int)hw->mac.get_link_status != 0));
    }
    else 
         #line 5099 
         link_active = (_Bool)1;
    #line 5101 
    break;
    #line 5102 
    case (unsigned int)2: 
                          #line 5102 
    ;
    #line 5103 
    ret_val = (*(hw->mac.ops.check_for_link))(hw);
    #line 5104 
    link_active = (_Bool)((__er32(hw,8UL) & 2U) != 0U);
    #line 5105 
    break;
    #line 5106 
    case (unsigned int)3: 
                          #line 5106 
    ;
    #line 5107 
    ret_val = (*(hw->mac.ops.check_for_link))(hw);
    #line 5108 
    link_active = hw->mac.serdes_has_link;
    #line 5109 
    break;
    #line 5110 
    default: 
             #line 5110 
    ;
    #line 5111 
    case (unsigned int)0: 
                          #line 5111 
    ;
    #line 5112 
    break;
  }
  #line 5115 
  if (ret_val == -2 && hw->phy.type == (unsigned int)e1000_phy_igp_3) {
    #line 5115 
    if ((__er32(hw,0UL) & 64U) != 0U) 
                                      #line 5118 
                                      netdev_info(adapter->netdev,(char *)"Gigabit has been disabled, downgrading speed\n");
  }
  #line 5121 
  return link_active;
}

#line 5124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_enable_receives(struct e1000_adapter *adapter)
{
  #line 5127 
  if (((unsigned long)adapter->flags & 16777216UL) != 0UL && ((unsigned long)adapter->flags & 1073741824UL) != 0UL) {
    #line 5129 
    struct e1000_hw *hw = & adapter->hw;
    #line 5130 
    u32 rctl = __er32(hw,256UL);
    #line 5132 
    __ew32(hw,256UL,rctl | 2U);
    #line 5133 
    adapter->flags &= 3221225471U;
  }
  #line 5135 
  return;
}

#line 5137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_check_82574_phy_workaround(struct e1000_adapter *adapter)
{
  #line 5139 
  struct e1000_hw *hw = & adapter->hw;
  #line 5144 
  if ((int)e1000_check_phy_82574(hw) != 0) 
                                           #line 5145 
                                           (adapter->phy_hang_count) ++; else 
                                                                    #line 5147 
                                                                    adapter->phy_hang_count = 0;
  #line 5149 
  if (adapter->phy_hang_count > 1) {
    #line 5150 
    adapter->phy_hang_count = 0;
    {
      #line 5151 
      bool branch;
      #line 5151 
      struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_check_82574_phy_workaround", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c", .format = (char *)"PHY appears hung - resetting\n", .lineno = (unsigned int)5151U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 5151 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
      #line 5151 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 5151 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug558,(hw->adapter)->netdev,(char *)"PHY appears hung - resetting\n");
    }
    #line 5152 
    cif_schedule_work(& adapter->reset_task);
  }
  #line 5154 
  return;
}

#line 5160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_watchdog(struct timer_list *t)
{
  #line 5162 
  void *__mptr;
  #line 5162 
  __mptr = (void *)t;
  #line 5162 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)__mptr);
  #line 5165 
  cif_schedule_work(& adapter->watchdog_task);
  #line 5166 
  return;
}

#line 5170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_watchdog_task(struct work_struct *work)
{
  #line 5172 
  void *__mptr;
  #line 5181 
  u32 link;
  #line 5181 
  u32 tctl;
  #line 5181 
  u32 pcim_state;
  #line 5172 
  __mptr = (void *)work;
  #line 5172 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709551272U));
  #line 5175 
  struct net_device *netdev = adapter->netdev;
  #line 5176 
  struct e1000_mac_info *mac = & adapter->hw.mac;
  #line 5177 
  struct e1000_phy_info *phy = & adapter->hw.phy;
  #line 5178 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  #line 5179 
  u32 dmoff_exit_timeout = 100U;
  #line 5179 
  u32 tries = 0U;
  #line 5180 
  struct e1000_hw *hw = & adapter->hw;
  #line 5183 
  if ((int)test_bit(3L,& adapter->state) != 0) 
                                               #line 5184 
                                               return;
  #line 5186 
  link = (unsigned int)e1000e_has_link(adapter);
  #line 5187 
  if ((int)netif_carrier_ok(netdev) != 0) 
    #line 5187 
    if (link != 0U) {
      #line 5189 
      pm_runtime_resume(netdev->dev.parent);
      #line 5191 
      e1000e_enable_receives(adapter);
      #line 5192 
      goto link_up;
    }
  #line 5195 
  if ((int)e1000e_enable_tx_pkt_filtering(hw) != 0) 
    #line 5195 
    if ((int)adapter->mng_vlan_id != (int)adapter->hw.mng_cookie.vlan_id) 
      #line 5197 
      e1000_update_mng_vlan(adapter);
  #line 5199 
  if (link != 0U) {
    #line 5200 
    if (! netif_carrier_ok(netdev)) {
      #line 5201 
      bool txb2b = (_Bool)1;
      #line 5204 
      pm_runtime_resume(netdev->dev.parent);
      #line 5207 
      pcim_state = __er32(hw,8UL);
      #line 5208 
      while ((pcim_state & 1073741824U) != 0U) {
        #line 5209 
        u32 tmp_5;
        #line 5209 
        tmp_5 = tries;
        #line 5209 
        tries ++;
        #line 5209 
        ;
        #line 5209 
        if (tmp_5 == dmoff_exit_timeout) {
          {
            #line 5210 
            bool branch;
            #line 5210 
            struct _ddebug __UNIQUE_ID_ddebug559 = {.modname = (char *)"e1000e", .function = (char *)"e1000_watchdog_task", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c", .format = (char *)"Error in exiting dmoff\n", .lineno = (unsigned int)5210U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 5210 
            branch = arch_static_branch(& __UNIQUE_ID_ddebug559.key.dd_key_false.key,(_Bool)0);
            #line 5210 
            if ((long)((long)((int)branch != 0)) != 0L) 
                                                        #line 5210 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug559,(hw->adapter)->netdev,(char *)"Error in exiting dmoff\n");
          }
          #line 5211 
          break;
        }
        #line 5213 
        usleep_range(10000UL,20000UL);
        #line 5214 
        pcim_state = __er32(hw,8UL);
        #line 5217 
        if ((pcim_state & 1073741824U) == 0U) 
                                              #line 5218 
                                              e1000_phy_hw_reset(& adapter->hw);
      }
      #line 5222 
      e1000_phy_read_status(adapter);
      #line 5223 
      (*(mac->ops.get_link_up_info))(& adapter->hw,& adapter->link_speed,& adapter->link_duplex);
      #line 5226 
      e1000_print_link_info(adapter);
      #line 5229 
      e1000e_check_downshift(hw);
      #line 5230 
      if ((int)phy->speed_downgraded != 0) 
                                           #line 5231 
                                           netdev_warn(netdev,(char *)"Link Speed was downgraded by SmartSpeed\n");
      #line 5237 
      if ((((hw->phy.type == (unsigned int)e1000_phy_igp_3 || hw->phy.type == (unsigned int)e1000_phy_bm) && (int)hw->mac.autoneg != 0) && ((unsigned int)adapter->link_speed == 10U || (unsigned int)adapter->link_speed == 100U)) && (unsigned int)adapter->link_duplex == 1U) {
        #line 5243 
        u16 autoneg_exp;
        #line 5245 
        e1e_rphy(hw,6U,& autoneg_exp);
        #line 5247 
        if (((int)autoneg_exp & 1) == 0) 
                                         #line 5248 
                                         netdev_info(adapter->netdev,(char *)"Autonegotiated half duplex but link partner cannot autoneg.  Try forcing full duplex if link gets many collisions.\n");
      }
      #line 5252 
      adapter->tx_timeout_factor = (unsigned char)1U;
      #line 5253 
      switch ((int)adapter->link_speed) {
        #line 5254 
        case 10: 
                 #line 5254 
        ;
        #line 5255 
        txb2b = (_Bool)0;
        #line 5256 
        adapter->tx_timeout_factor = (unsigned char)16U;
        #line 5257 
        break;
        #line 5258 
        case 100: 
                  #line 5258 
        ;
        #line 5259 
        txb2b = (_Bool)0;
        #line 5260 
        adapter->tx_timeout_factor = (unsigned char)10U;
        #line 5261 
        break;
      }
      #line 5267 
      if (((unsigned long)adapter->flags & 4194304UL) != 0UL && ! txb2b) {
        #line 5269 
        u32 tarc0;
        #line 5271 
        tarc0 = __er32(hw,14400UL);
        #line 5272 
        tarc0 &= 4292870143U;
        #line 5273 
        __ew32(hw,14400UL,tarc0);
      }
      #line 5279 
      if (((unsigned long)adapter->flags & 536870912UL) == 0UL) 
        #line 5280 
        switch ((int)adapter->link_speed) {
          #line 5281 
          case 10: 
                   #line 5281 
          ;
          #line 5282 
          case 100: 
                    #line 5282 
          ;
          #line 5283 
          netdev_info(adapter->netdev,(char *)"10/100 speed: disabling TSO\n");
          #line 5284 
          netdev->features &= 18446744073709486079ULL;
          #line 5285 
          netdev->features &= 18446744073708503039ULL;
          #line 5286 
          break;
          #line 5287 
          case 1000: 
                     #line 5287 
          ;
          #line 5288 
          netdev->features |= 65536ULL;
          #line 5289 
          netdev->features |= 1048576ULL;
          #line 5290 
          break;
          #line 5291 
          default: 
                   #line 5291 
          ;
          #line 5293 
          break;
        }
      #line 5300 
      tctl = __er32(hw,1024UL);
      #line 5301 
      tctl |= 2U;
      #line 5302 
      __ew32(hw,1024UL,tctl);
      #line 5307 
      if (phy->ops.cfg_on_link_up != (s32 (*)(struct e1000_hw *))0) 
                                                                    #line 5308 
                                                                    (*(phy->ops.cfg_on_link_up))(hw);
      #line 5310 
      netif_wake_queue(netdev);
      #line 5311 
      netif_carrier_on(netdev);
      #line 5313 
      if (! test_bit(3L,& adapter->state)) {
        #line 5314 
        ;
        #line 5314 
        cif_mod_timer(& adapter->phy_info_timer,round_jiffies(jiffies + 500UL));
      }
    }
  }
  else {
    #line 5318 
    if ((int)netif_carrier_ok(netdev) != 0) {
      #line 5319 
      adapter->link_speed = (unsigned short)0U;
      #line 5320 
      adapter->link_duplex = (unsigned short)0U;
      #line 5322 
      printk((char *)"\001",(char *)(& (adapter->netdev)->name));
      #line 5323 
      netif_carrier_off(netdev);
      #line 5324 
      netif_stop_queue(netdev);
      #line 5325 
      if (! test_bit(3L,& adapter->state)) {
        #line 5326 
        ;
        #line 5326 
        cif_mod_timer(& adapter->phy_info_timer,round_jiffies(jiffies + 500UL));
      }
      #line 5333 
      if (((unsigned long)adapter->flags & 16777216UL) != 0UL) 
                                                               #line 5334 
                                                               adapter->flags |= 1073741824U; else 
                                                                    #line 5336 
                                                                    pm_schedule_suspend(netdev->dev.parent,100U);
    }
  }
  #line 5341 
  link_up: 
           #line 5341 
  ;
  #line 5342 
  cif_spin_lock_stats64_lock_of_e1000_adapter(& adapter->stats64_lock);
  #line 5343 
  e1000e_update_stats(adapter);
  #line 5345 
  mac->tx_packet_delta = (unsigned int)adapter->stats.tpt - (unsigned int)adapter->tpt_old;
  #line 5346 
  adapter->tpt_old = adapter->stats.tpt;
  #line 5347 
  mac->collision_delta = (unsigned int)adapter->stats.colc - (unsigned int)adapter->colc_old;
  #line 5348 
  adapter->colc_old = adapter->stats.colc;
  #line 5350 
  adapter->gorc = (unsigned int)adapter->stats.gorc - (unsigned int)adapter->gorc_old;
  #line 5351 
  adapter->gorc_old = adapter->stats.gorc;
  #line 5352 
  adapter->gotc = (unsigned int)adapter->stats.gotc - (unsigned int)adapter->gotc_old;
  #line 5353 
  adapter->gotc_old = adapter->stats.gotc;
  #line 5354 
  cif_spin_unlock_stats64_lock_of_e1000_adapter(& adapter->stats64_lock);
  #line 5360 
  if (! netif_carrier_ok(netdev)) {
    #line 5361 
    ;
    #line 5361 
    if ((unsigned int)(e1000_desc_unused(tx_ring) + 1) < tx_ring->count) 
      #line 5362 
      adapter->flags |= 1073741824U;
  }
  #line 5365 
  if (((unsigned long)adapter->flags & 1073741824UL) != 0UL) {
    #line 5366 
    cif_schedule_work(& adapter->reset_task);
    #line 5368 
    return;
  }
  #line 5371 
  e1000e_update_adaptive(& adapter->hw);
  #line 5374 
  if (adapter->itr_setting == 4U) {
    #line 5380 
    u32 tmp_14;
    #line 5383 
    u32 tmp_15;
    #line 5379 
    u32 goc = (adapter->gotc + adapter->gorc) / 10000U;
    #line 5380 
    if (adapter->gotc > adapter->gorc) 
                                       #line 5380 
                                       tmp_14 = (adapter->gotc - adapter->gorc) / 10000U; else 
                                                                    #line 5380 
                                                                    tmp_14 = (adapter->gorc - adapter->gotc) / 10000U;
    #line 5380 
    u32 dif = tmp_14;
    #line 5383 
    if (goc != 0U) 
                   #line 5383 
                   tmp_15 = (dif * 6000U) / goc + 2000U; else 
                                                              #line 5383 
                                                              tmp_15 = 8000U;
    #line 5383 
    u32 itr = tmp_15;
    #line 5385 
    e1000e_write_itr(adapter,itr);
  }
  #line 5389 
  if (adapter->msix_entries != (struct msix_entry *)0) 
                                                       #line 5390 
                                                       __ew32(hw,200UL,(adapter->rx_ring)->ims_val); else 
                                                                    #line 5392 
                                                                    __ew32(hw,200UL,16U);
  #line 5395 
  e1000e_flush_descriptors(adapter);
  #line 5398 
  adapter->detect_tx_hung = (_Bool)1;
  #line 5403 
  if ((int)e1000e_get_laa_state_82571(hw) != 0) 
                                                #line 5404 
                                                (*(hw->mac.ops.rar_set))(hw,(u8 *)(& adapter->hw.mac.addr),0U);
  #line 5406 
  if (((unsigned long)adapter->flags2 & 512UL) != 0UL) 
                                                       #line 5407 
                                                       e1000e_check_82574_phy_workaround(adapter);
  #line 5410 
  if (adapter->hwtstamp_config.rx_filter != 0) 
    #line 5411 
    if (((unsigned long)adapter->flags2 & 8192UL) != 0UL) {
      #line 5411 
      if ((__er32(hw,46624UL) & 1U) != 0U) {
        #line 5413 
        __er32(hw,46632UL);
        #line 5414 
        (adapter->rx_hwtstamp_cleared) ++;
      }
      else 
           #line 5416 
           adapter->flags2 |= 8192U;
    }
    else 
         #line 5416 
         adapter->flags2 |= 8192U;
  #line 5421 
  if (! test_bit(3L,& adapter->state)) {
    #line 5422 
    ;
    #line 5422 
    cif_mod_timer(& adapter->watchdog_timer,round_jiffies(jiffies + 500UL));
  }
  #line 5424 
  return;
}

#line 5435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_tso(struct e1000_ring *tx_ring, struct sk_buff *skb, __be16 protocol)
{
  #line 5438 
  struct e1000_context_desc *context_desc;
  #line 5439 
  struct e1000_buffer *buffer_info;
  #line 5440 
  unsigned int i;
  #line 5442 
  u16 mss;
  #line 5443 
  u8 ipcss;
  #line 5443 
  u8 ipcso;
  #line 5443 
  u8 tucss;
  #line 5443 
  u8 tucso;
  #line 5443 
  u8 hdr_len;
  #line 5444 
  int err;
  #line 5441 
  u32 cmd_length = 0U;
  #line 5442 
  u16 ipcse = (unsigned short)0U;
  #line 5446 
  if (! skb_is_gso(skb)) 
                         #line 5447 
                         return 0;
  #line 5449 
  err = skb_cow_head(skb,0U);
  #line 5450 
  if (err < 0) 
               #line 5451 
               return err;
  #line 5453 
  hdr_len = (unsigned char)((int)((unsigned char)skb_transport_offset(skb)) + (int)((unsigned char)tcp_hdrlen(skb)));
  #line 5454 
  mss = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 5455 
  if ((unsigned int)protocol == 8U) {
    #line 5456 
    struct iphdr *iph = ip_hdr(skb);
    #line 5457 
    iph->tot_len = (unsigned short)0U;
    #line 5458 
    iph->check = (unsigned short)0U;
    #line 5459 
    tcp_hdr(skb)->check = (unsigned short)(~ ((int)csum_tcpudp_magic(iph->saddr,iph->daddr,0U,(unsigned char)6,0U)));
    #line 5461 
    cmd_length = 33554432U;
    #line 5462 
    ipcse = (unsigned short)((unsigned int)((unsigned short)skb_transport_offset(skb)) + 65535U);
  }
  else {
    #line 5463 
    if ((int)skb_is_gso_v6(skb) != 0) {
      #line 5464 
      ipv6_hdr(skb)->payload_len = (unsigned short)0U;
      #line 5465 
      tcp_hdr(skb)->check = (unsigned short)(~ ((int)csum_ipv6_magic(& ipv6_hdr(skb)->saddr,& ipv6_hdr(skb)->daddr,0U,
                         (unsigned char)6,0U)));
      #line 5468 
      ipcse = (unsigned short)0U;
    }
  }
  #line 5470 
  ipcss = (unsigned char)skb_network_offset(skb);
  #line 5471 
  ipcso = (unsigned char)((void *)(& ip_hdr(skb)->check) - (void *)skb->data);
  #line 5472 
  tucss = (unsigned char)skb_transport_offset(skb);
  #line 5473 
  tucso = (unsigned char)((void *)(& tcp_hdr(skb)->check) - (void *)skb->data);
  #line 5475 
  cmd_length = ((skb->len - (unsigned int)hdr_len) | cmd_length) | 620756992U;
  #line 5478 
  i = (unsigned int)tx_ring->next_to_use;
  #line 5479 
  context_desc = (struct e1000_context_desc *)tx_ring->desc + (unsigned long)i;
  #line 5480 
  buffer_info = tx_ring->buffer_info + (unsigned long)i;
  #line 5482 
  context_desc->lower_setup.ip_fields.ipcss = ipcss;
  #line 5483 
  context_desc->lower_setup.ip_fields.ipcso = ipcso;
  #line 5484 
  context_desc->lower_setup.ip_fields.ipcse = ipcse;
  #line 5485 
  context_desc->upper_setup.tcp_fields.tucss = tucss;
  #line 5486 
  context_desc->upper_setup.tcp_fields.tucso = tucso;
  #line 5487 
  context_desc->upper_setup.tcp_fields.tucse = (unsigned short)0U;
  #line 5488 
  context_desc->tcp_seg_setup.fields.mss = mss;
  #line 5489 
  context_desc->tcp_seg_setup.fields.hdr_len = hdr_len;
  #line 5490 
  context_desc->cmd_and_length = cmd_length;
  #line 5492 
  buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.time_stamp = jiffies;
  #line 5493 
  buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.next_to_watch = (unsigned short)i;
  #line 5495 
  i ++;
  #line 5496 
  if (tx_ring->count == i) 
                           #line 5497 
                           i = 0U;
  #line 5498 
  tx_ring->next_to_use = (unsigned short)i;
  #line 5500 
  return 1;
}

#line 5503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static bool e1000_tx_csum(struct e1000_ring *tx_ring, struct sk_buff *skb, __be16 protocol)
{
  #line 5507 
  struct e1000_context_desc *context_desc;
  #line 5508 
  struct e1000_buffer *buffer_info;
  #line 5509 
  unsigned int i;
  #line 5510 
  u8 css;
  #line 5506 
  struct e1000_adapter *adapter = tx_ring->adapter;
  #line 5511 
  u32 cmd_len = 536870912U;
  #line 5513 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 5514 
                                          return (_Bool)0;
  #line 5516 
  switch ((int)protocol) {
    #line 5517 
    case 8: 
            #line 5517 
    ;
    #line 5518 
    ;
    #line 5518 
    if ((unsigned int)ip_hdr(skb)->protocol == 6U) 
                                                   #line 5519 
                                                   cmd_len |= 16777216U;
    #line 5520 
    break;
    #line 5521 
    case 56710: 
                #line 5521 
    ;
    #line 5523 
    ;
    #line 5523 
    if ((unsigned int)ipv6_hdr(skb)->nexthdr == 6U) 
                                                    #line 5524 
                                                    cmd_len |= 16777216U;
    #line 5525 
    break;
    #line 5526 
    default: 
             #line 5526 
    ;
    #line 5527 
    if ((long)(net_ratelimit() != 0) != 0L) {
      #line 5528 
      ;
      #line 5528 
      netdev_warn(adapter->netdev,(char *)"checksum_partial proto=%x!\n",(int)__builtin_bswap16((unsigned short)((int)protocol)));
    }
    #line 5530 
    break;
  }
  #line 5533 
  css = (unsigned char)skb_checksum_start_offset(skb);
  #line 5535 
  i = (unsigned int)tx_ring->next_to_use;
  #line 5536 
  buffer_info = tx_ring->buffer_info + (unsigned long)i;
  #line 5537 
  context_desc = (struct e1000_context_desc *)tx_ring->desc + (unsigned long)i;
  #line 5539 
  context_desc->lower_setup.ip_config = 0U;
  #line 5540 
  context_desc->upper_setup.tcp_fields.tucss = css;
  #line 5541 
  context_desc->upper_setup.tcp_fields.tucso = (unsigned char)((int)((unsigned char)skb->__anonCompField_sk_buff_94.__anonCompField___anonunion_526_93.csum_offset) + (int)css);
  #line 5542 
  context_desc->upper_setup.tcp_fields.tucse = (unsigned short)0U;
  #line 5543 
  context_desc->tcp_seg_setup.data = 0U;
  #line 5544 
  context_desc->cmd_and_length = cmd_len;
  #line 5546 
  buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.time_stamp = jiffies;
  #line 5547 
  buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.next_to_watch = (unsigned short)i;
  #line 5549 
  i ++;
  #line 5550 
  if (tx_ring->count == i) 
                           #line 5551 
                           i = 0U;
  #line 5552 
  tx_ring->next_to_use = (unsigned short)i;
  #line 5554 
  return (_Bool)1;
}

#line 5557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_tx_map(struct e1000_ring *tx_ring, struct sk_buff *skb, unsigned int first, unsigned int max_per_txd, unsigned int nr_frags)
{
  #line 5563 
  struct e1000_buffer *buffer_info;
  #line 5565 
  unsigned int size;
  #line 5565 
  unsigned int i;
  #line 5566 
  unsigned int f;
  #line 5566 
  unsigned int bytecount;
  #line 5566 
  unsigned int segs;
  #line 5561 
  struct e1000_adapter *adapter = tx_ring->adapter;
  #line 5562 
  struct pci_dev *pdev = adapter->pdev;
  #line 5564 
  unsigned int len = skb_headlen(skb);
  #line 5565 
  unsigned int offset = 0U;
  #line 5565 
  unsigned int count = 0U;
  #line 5568 
  i = (unsigned int)tx_ring->next_to_use;
  #line 5570 
  while (len != 0U) {
    #line 5572 
    unsigned int tmp_0;
    #line 5572 
    unsigned int __UNIQUE_ID___x560;
    #line 5571 
    buffer_info = tx_ring->buffer_info + (unsigned long)i;
    {
      #line 5572 
      __UNIQUE_ID___x560 = len;
      #line 5572 
      unsigned int __UNIQUE_ID___y561 = max_per_txd;
      #line 5572 
      if (__UNIQUE_ID___x560 < __UNIQUE_ID___y561) 
                                                   #line 5572 
                                                   tmp_0 = __UNIQUE_ID___x560; else 
                                                                    #line 5572 
                                                                    tmp_0 = __UNIQUE_ID___y561;
      }
    #line 5572 
    size = tmp_0;
    #line 5574 
    buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.length = (unsigned short)size;
    #line 5575 
    buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.time_stamp = jiffies;
    #line 5576 
    buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.next_to_watch = (unsigned short)i;
    #line 5577 
    buffer_info->dma = dma_map_single_attrs(& pdev->dev,(void *)(skb->data + (unsigned long)offset),(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 5580 
    buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.mapped_as_page = (unsigned short)0U;
    #line 5581 
    if (dma_mapping_error(& pdev->dev,buffer_info->dma) != 0) 
                                                              #line 5582 
                                                              goto dma_error;
    #line 5584 
    len -= size;
    #line 5585 
    offset += size;
    #line 5586 
    count ++;
    #line 5588 
    if (len != 0U) {
      #line 5589 
      i ++;
      #line 5590 
      if (tx_ring->count == i) 
                               #line 5591 
                               i = 0U;
    }
  }
  #line 5595 
  f = 0U;
  #line 5595 
  while (f < nr_frags) {
    {
      #line 5596 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[f];
      #line 5598 
      len = skb_frag_size(frag);
      #line 5599 
      offset = 0U;
      #line 5601 
      while (len != 0U) {
        #line 5607 
        unsigned int __UNIQUE_ID___x562;
        #line 5607 
        unsigned int tmp_4;
        #line 5602 
        i ++;
        #line 5603 
        if (tx_ring->count == i) 
                                 #line 5604 
                                 i = 0U;
        #line 5606 
        buffer_info = tx_ring->buffer_info + (unsigned long)i;
        {
          #line 5607 
          __UNIQUE_ID___x562 = len;
          #line 5607 
          unsigned int __UNIQUE_ID___y563 = max_per_txd;
          #line 5607 
          if (__UNIQUE_ID___x562 < __UNIQUE_ID___y563) 
                                                       #line 5607 
                                                       tmp_4 = __UNIQUE_ID___x562; else 
                                                                    #line 5607 
                                                                    tmp_4 = __UNIQUE_ID___y563;
          }
        #line 5607 
        size = tmp_4;
        #line 5609 
        buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.length = (unsigned short)size;
        #line 5610 
        buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.time_stamp = jiffies;
        #line 5611 
        buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.next_to_watch = (unsigned short)i;
        #line 5612 
        buffer_info->dma = skb_frag_dma_map(& pdev->dev,frag,(unsigned long)offset,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE);
        #line 5615 
        buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.mapped_as_page = (unsigned short)1U;
        #line 5616 
        if (dma_mapping_error(& pdev->dev,buffer_info->dma) != 0) 
                                                                  #line 5617 
                                                                  goto dma_error;
        #line 5619 
        len -= size;
        #line 5620 
        offset += size;
        #line 5621 
        count ++;
      }
    }
    #line 5595 
    f ++;
  }
  #line 5625 
  ;
  #line 5625 
  if ((int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs != 0) {
    #line 5625 
    segs = (unsigned int)((int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs);
  }
  else 
       #line 5625 
       segs = 1U;
  #line 5627 
  bytecount = (segs + 4294967295U) * skb_headlen(skb) + skb->len;
  #line 5629 
  (tx_ring->buffer_info + (unsigned long)i)->skb = skb;
  #line 5630 
  (tx_ring->buffer_info + (unsigned long)i)->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.segs = segs;
  #line 5631 
  (tx_ring->buffer_info + (unsigned long)i)->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.bytecount = bytecount;
  #line 5632 
  (tx_ring->buffer_info + (unsigned long)first)->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.next_to_watch = (unsigned short)i;
  #line 5634 
  return (int)count;
  #line 5636 
  dma_error: 
             #line 5636 
  ;
  #line 5637 
  _dev_err(& pdev->dev,(char *)"Tx DMA map failed\n");
  #line 5638 
  buffer_info->dma = 0ULL;
  #line 5639 
  if (count != 0U) 
                   #line 5640 
                   count --;
  #line 5642 
  while (1) {
    #line 5642 
    unsigned int tmp_10;
    #line 5642 
    tmp_10 = count;
    #line 5642 
    count --;
    #line 5642 
    ;
    #line 5642 
    if (! (tmp_10 != 0U)) 
                          #line 5642 
                          break;
    #line 5643 
    if (i == 0U) 
                 #line 5644 
                 i = tx_ring->count + i;
    #line 5645 
    i --;
    #line 5646 
    buffer_info = tx_ring->buffer_info + (unsigned long)i;
    #line 5647 
    e1000_put_txbuf(tx_ring,buffer_info,(_Bool)1);
  }
  #line 5650 
  return 0;
}

#line 5653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_tx_queue(struct e1000_ring *tx_ring, int tx_flags, int count)
{
  #line 5657 
  struct e1000_buffer *buffer_info;
  #line 5659 
  unsigned int i;
  #line 5655 
  struct e1000_adapter *adapter = tx_ring->adapter;
  #line 5656 
  struct e1000_tx_desc *tx_desc = (struct e1000_tx_desc *)0;
  #line 5658 
  u32 txd_upper = 0U;
  #line 5658 
  u32 txd_lower = 33554432U;
  #line 5661 
  if ((tx_flags & 4) != 0) {
    #line 5662 
    txd_lower |= 605028352U;
    #line 5664 
    txd_upper |= 512U;
    #line 5666 
    if ((tx_flags & 8) != 0) 
                             #line 5667 
                             txd_upper |= 256U;
  }
  #line 5670 
  if ((tx_flags & 1) != 0) {
    #line 5671 
    txd_lower |= 537919488U;
    #line 5672 
    txd_upper |= 512U;
  }
  #line 5675 
  if ((tx_flags & 2) != 0) {
    #line 5676 
    txd_lower |= 1073741824U;
    #line 5677 
    txd_upper = ((unsigned int)tx_flags & 4294901760U) | txd_upper;
  }
  #line 5680 
  if ((long)((tx_flags & 16) != 0) != 0L) 
                                          #line 5681 
                                          txd_lower &= 4261412863U;
  #line 5683 
  if ((long)((tx_flags & 32) != 0) != 0L) {
    #line 5684 
    txd_lower |= 537919488U;
    #line 5685 
    txd_upper |= 16U;
  }
  #line 5688 
  i = (unsigned int)tx_ring->next_to_use;
  #line 5690 
  while (1) {
    #line 5691 
    buffer_info = tx_ring->buffer_info + (unsigned long)i;
    #line 5692 
    tx_desc = (struct e1000_tx_desc *)tx_ring->desc + (unsigned long)i;
    #line 5693 
    tx_desc->buffer_addr = buffer_info->dma;
    #line 5694 
    tx_desc->lower.data = (unsigned int)buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.length | txd_lower;
    #line 5696 
    tx_desc->upper.data = txd_upper;
    #line 5698 
    i ++;
    #line 5699 
    if (tx_ring->count == i) 
                             #line 5700 
                             i = 0U;
    #line 5701 
    count --;
    #line 5701 
    if (! (count > 0)) 
                       #line 5690 
                       break;
  }
  #line 5703 
  tx_desc->lower.data |= adapter->txd_cmd;
  #line 5706 
  if ((long)((tx_flags & 16) != 0) != 0L) 
                                          #line 5707 
                                          tx_desc->lower.data &= 4261412863U;
  #line 5708 
  ldv_inline_asm();
  #line 5716 
  tx_ring->next_to_use = (unsigned short)i;
  #line 5717 
  return;
}

#line 5720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_transfer_dhcp_info(struct e1000_adapter *adapter, struct sk_buff *skb)
{
  #line 5724 
  u16 length;
  #line 5724 
  u16 offset;
  #line 5723 
  struct e1000_hw *hw = & adapter->hw;
  #line 5726 
  if ((unsigned int)skb->vlan_present != 0U && ((int)skb->vlan_tci != (int)adapter->hw.mng_cookie.vlan_id || ((int)adapter->hw.mng_cookie.status & 2) == 0)) 
    #line 5730 
    return 0;
  #line 5732 
  if (skb->len <= 282U) 
                        #line 5733 
                        return 0;
  #line 5735 
  if ((unsigned int)((struct ethhdr *)skb->data)->h_proto != 8U) 
                                                                 #line 5736 
                                                                 return 0;
  {
    #line 5740 
    struct udphdr *udp;
    #line 5739 
    struct iphdr *ip = (struct iphdr *)(skb->data + 14U);
    #line 5742 
    if ((unsigned int)ip->protocol != 17U) 
                                           #line 5743 
                                           return 0;
    #line 5745 
    udp = (struct udphdr *)((u8 *)ip + (unsigned long)((int)ip->ihl << 2));
    #line 5746 
    if ((unsigned int)__builtin_bswap16((unsigned short)((int)udp->dest)) != 67U) 
      #line 5747 
      return 0;
    #line 5749 
    offset = (unsigned short)(((u8 *)udp + 8U) - skb->data);
    #line 5750 
    length = (unsigned short)((int)((unsigned short)skb->len) - (int)offset);
    #line 5751 
    return e1000e_mng_write_dhcp_info(hw,(u8 *)udp + 8U,
                                   (unsigned short)((int)length));
  }
  #line 5754 
  return 0;
}

#line 5757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int __e1000_maybe_stop_tx(struct e1000_ring *tx_ring, int size)
{
  #line 5759 
  struct e1000_adapter *adapter = tx_ring->adapter;
  #line 5761 
  netif_stop_queue(adapter->netdev);
  #line 5762 
  ldv_inline_asm();
  #line 5771 
  ;
  #line 5771 
  if (e1000_desc_unused(tx_ring) < size) 
                                         #line 5772 
                                         return -16;
  #line 5775 
  netif_start_queue(adapter->netdev);
  #line 5776 
  (adapter->restart_queue) ++;
  #line 5777 
  return 0;
}

#line 5780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_maybe_stop_tx(struct e1000_ring *tx_ring, int size)
{
  #line 5782 
  if ((long)(tx_ring->count < (unsigned int)size) != 0L) {
    #line 5783 
    ldv_inline_asm();
    #line 5784 
    ldv_inline_asm();
    #line 5785 
    ldv_inline_asm();
    #line 5782 
    ;
  }
  #line 5784 
  ;
  #line 5784 
  if (e1000_desc_unused(tx_ring) >= size) 
                                          #line 5785 
                                          return 0;
  #line 5786 
  return __e1000_maybe_stop_tx(tx_ring,size);
}

#line 5789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static netdev_tx_t e1000_xmit_frame(struct sk_buff *skb, struct net_device *netdev)
{
  #line 5794 
  unsigned int first;
  #line 5797 
  unsigned int nr_frags;
  #line 5798 
  unsigned int mss;
  #line 5800 
  int tso;
  #line 5801 
  unsigned int f;
  #line 5792 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 5793 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  #line 5795 
  unsigned int tx_flags = 0U;
  #line 5796 
  unsigned int len = skb_headlen(skb);
  #line 5799 
  int count = 0;
  #line 5802 
  __be16 protocol = vlan_get_protocol(skb);
  #line 5804 
  if ((int)test_bit(3L,& adapter->state) != 0) {
    #line 5805 
    dev_kfree_skb_any(skb);
    #line 5806 
    return NETDEV_TX_OK;
  }
  #line 5809 
  if (skb->len == 0U) {
    #line 5810 
    dev_kfree_skb_any(skb);
    #line 5811 
    return NETDEV_TX_OK;
  }
  #line 5817 
  if (skb_put_padto(skb,17U) != 0) 
                                   #line 5818 
                                   return NETDEV_TX_OK;
  #line 5820 
  mss = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 5821 
  if (mss != 0U) {
    #line 5822 
    u8 hdr_len;
    #line 5828 
    hdr_len = (unsigned char)((int)((unsigned char)skb_transport_offset(skb)) + (int)((unsigned char)tcp_hdrlen(skb)));
    #line 5832 
    if (skb->data_len != 0U && (unsigned int)hdr_len == len) {
      #line 5835 
      unsigned int tmp_7;
      #line 5835 
      unsigned int __UNIQUE_ID___x565;
      #line 5833 
      unsigned int pull_size;
      {
        #line 5835 
        __UNIQUE_ID___x565 = 4U;
        #line 5835 
        unsigned int __UNIQUE_ID___y566 = skb->data_len;
        #line 5835 
        if (__UNIQUE_ID___x565 < __UNIQUE_ID___y566) 
                                                     #line 5835 
                                                     tmp_7 = __UNIQUE_ID___x565; else 
                                                                    #line 5835 
                                                                    tmp_7 = __UNIQUE_ID___y566;
        }
      #line 5835 
      pull_size = tmp_7;
      #line 5836 
      if (__pskb_pull_tail(skb,(int)pull_size) == (void *)0) {
        #line 5837 
        netdev_err(adapter->netdev,(char *)"__pskb_pull_tail failed.\n");
        #line 5838 
        dev_kfree_skb_any(skb);
        #line 5839 
        return NETDEV_TX_OK;
      }
      #line 5841 
      len = skb_headlen(skb);
    }
  }
  #line 5846 
  if (mss != 0U || (unsigned int)skb->ip_summed == 3U) 
                                                       #line 5847 
                                                       count ++;
  #line 5848 
  count ++;
  #line 5850 
  count = (int)(((adapter->tx_fifo_limit + len) + 4294967295U) / adapter->tx_fifo_limit + (unsigned int)count);
  #line 5852 
  nr_frags = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 5853 
  f = 0U;
  #line 5853 
  while (f < nr_frags) {
    #line 5855 
    count = (int)(((skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[f]) + adapter->tx_fifo_limit) + 4294967295U) / adapter->tx_fifo_limit + (unsigned int)count);
    #line 5853 
    f ++;
  }
  #line 5857 
  if ((int)adapter->hw.mac.tx_pkt_filtering != 0) 
                                                  #line 5858 
                                                  e1000_transfer_dhcp_info(adapter,skb);
  #line 5863 
  if (e1000_maybe_stop_tx(tx_ring,count + 2) != 0) 
                                                   #line 5864 
                                                   return NETDEV_TX_BUSY;
  #line 5866 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 5867 
    tx_flags |= 2U;
    #line 5868 
    tx_flags = (unsigned int)((int)skb->vlan_tci << 16) | tx_flags;
  }
  #line 5872 
  first = (unsigned int)tx_ring->next_to_use;
  #line 5874 
  tso = e1000_tso(tx_ring,skb,(unsigned short)((int)protocol));
  #line 5875 
  if (tso < 0) {
    #line 5876 
    dev_kfree_skb_any(skb);
    #line 5877 
    return NETDEV_TX_OK;
  }
  #line 5880 
  if (tso != 0) 
                #line 5881 
                tx_flags |= 4U;
  else {
    #line 5882 
    if ((int)e1000_tx_csum(tx_ring,skb,(unsigned short)((int)protocol)) != 0) 
      #line 5883 
      tx_flags |= 1U;
  }
  #line 5889 
  if ((unsigned int)protocol == 8U) 
                                    #line 5890 
                                    tx_flags |= 8U;
  #line 5892 
  if ((long)((unsigned int)skb->no_fcs != 0U) != 0L) 
                                                     #line 5893 
                                                     tx_flags |= 16U;
  #line 5896 
  count = e1000_tx_map(tx_ring,skb,first,adapter->tx_fifo_limit,nr_frags);
  #line 5898 
  if (count != 0) {
    #line 5899 
    ;
    #line 5899 
    if ((long)(((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 1) != 0) != 0L) 
      #line 5899 
      if (((unsigned long)adapter->flags & 16384UL) != 0UL) 
        #line 5901 
        if (adapter->tx_hwtstamp_skb == (struct sk_buff *)0) {
          #line 5902 
          ((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags = (unsigned char)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags | 4U);
          #line 5903 
          tx_flags |= 32U;
          #line 5904 
          adapter->tx_hwtstamp_skb = skb_get(skb);
          #line 5905 
          adapter->tx_hwtstamp_start = jiffies;
          #line 5906 
          cif_schedule_work(& adapter->tx_hwtstamp_work);
        }
        else 
             #line 5908 
             (adapter->tx_hwtstamp_skipped) ++;
    #line 5912 
    skb_tx_timestamp(skb);
    #line 5914 
    netdev_sent_queue(netdev,skb->len);
    #line 5915 
    e1000_tx_queue(tx_ring,(int)tx_flags,count);
    #line 5917 
    e1000_maybe_stop_tx(tx_ring,(int)((((unsigned long)adapter->tx_fifo_limit + 4095UL) / (unsigned long)adapter->tx_fifo_limit) * (unsigned long)17U + (unsigned long)2U));
    #line 5922 
    if (netdev_xmit_more()) {
      #line 5922 
      if ((int)netif_xmit_stopped(netdev_get_tx_queue(netdev,0U)) != 0) {
        #line 5922 
        _LOR: 
              #line 5924 
        ;
        #line 5924 
        if (((unsigned long)adapter->flags2 & 2048UL) != 0UL) 
                                                              #line 5925 
                                                              e1000e_update_tdt_wa(tx_ring,(unsigned int)tx_ring->next_to_use); else 
                                                                    #line 5928 
                                                                    writel((unsigned int)tx_ring->next_to_use,tx_ring->tail);
      }
    }
    else 
         #line 5922 
         goto _LOR;
  }
  else {
    #line 5931 
    dev_kfree_skb_any(skb);
    #line 5932 
    (tx_ring->buffer_info + (unsigned long)first)->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.time_stamp = 0UL;
    #line 5933 
    tx_ring->next_to_use = (unsigned short)first;
  }
  #line 5936 
  return NETDEV_TX_OK;
}

#line 5943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_tx_timeout(struct net_device *netdev)
{
  #line 5945 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 5948 
  (adapter->tx_timeout_count) ++;
  #line 5949 
  cif_schedule_work(& adapter->reset_task);
  #line 5950 
  return;
}

#line 5952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_reset_task(struct work_struct *work)
{
  #line 5955 
  void *__mptr;
  #line 5954 
  struct e1000_adapter *adapter;
  #line 5955 
  __mptr = (void *)work;
  #line 5955 
  adapter = ((struct e1000_adapter *)(__mptr + 18446744073709551352U));
  #line 5958 
  if ((int)test_bit(3L,& adapter->state) != 0) 
                                               #line 5959 
                                               return;
  #line 5961 
  if (((unsigned long)adapter->flags & 1073741824UL) == 0UL) {
    #line 5962 
    e1000e_dump(adapter);
    #line 5963 
    netdev_err(adapter->netdev,(char *)"Reset adapter unexpectedly\n");
  }
  #line 5965 
  e1000e_reinit_locked(adapter);
  #line 5966 
  return;
}

#line 5975  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
{
  #line 5978 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 5980 
  cif_spin_lock_stats64_lock_of_e1000_adapter(& adapter->stats64_lock);
  #line 5981 
  e1000e_update_stats(adapter);
  #line 5983 
  stats->rx_bytes = adapter->stats.gorc;
  #line 5984 
  stats->rx_packets = adapter->stats.gprc;
  #line 5985 
  stats->tx_bytes = adapter->stats.gotc;
  #line 5986 
  stats->tx_packets = adapter->stats.gptc;
  #line 5987 
  stats->multicast = adapter->stats.mprc;
  #line 5988 
  stats->collisions = adapter->stats.colc;
  #line 5995 
  stats->rx_errors = ((((adapter->stats.rxerrc + adapter->stats.crcerrs) + adapter->stats.algnerrc) + adapter->stats.ruc) + adapter->stats.roc) + adapter->stats.cexterr;
  #line 5998 
  stats->rx_length_errors = adapter->stats.ruc + adapter->stats.roc;
  #line 5999 
  stats->rx_crc_errors = adapter->stats.crcerrs;
  #line 6000 
  stats->rx_frame_errors = adapter->stats.algnerrc;
  #line 6001 
  stats->rx_missed_errors = adapter->stats.mpc;
  #line 6004 
  stats->tx_errors = adapter->stats.ecol + adapter->stats.latecol;
  #line 6005 
  stats->tx_aborted_errors = adapter->stats.ecol;
  #line 6006 
  stats->tx_window_errors = adapter->stats.latecol;
  #line 6007 
  stats->tx_carrier_errors = adapter->stats.tncrs;
  #line 6011 
  cif_spin_unlock_stats64_lock_of_e1000_adapter(& adapter->stats64_lock);
  #line 6012 
  return;
}

#line 6021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_change_mtu(struct net_device *netdev, int new_mtu)
{
  #line 6023 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 6024 
  int max_frame = new_mtu + 22;
  #line 6027 
  if (new_mtu > 1500 && ((unsigned long)adapter->flags & 128UL) == 0UL) {
    #line 6029 
    netdev_err(adapter->netdev,(char *)"Jumbo Frames not supported.\n");
    #line 6030 
    return -22;
  }
  #line 6034 
  if ((adapter->hw.mac.type > (unsigned int)e1000_pchlan && ((unsigned long)adapter->flags2 & 1UL) == 0UL) && new_mtu > 1500) {
    #line 6037 
    netdev_err(adapter->netdev,(char *)"Jumbo Frames not supported on this device when CRC stripping is disabled.\n");
    #line 6038 
    return -22;
  }
  #line 6041 
  while (1) {
    #line 6041 
    if (! ((int)test_and_set_bit(1L,& adapter->state) != 0)) 
                                                             #line 6041 
                                                             break;
    #line 6042 
    usleep_range(1000UL,1100UL);
  }
  #line 6044 
  adapter->max_frame_size = (unsigned int)max_frame;
  {
    #line 6045 
    bool branch;
    #line 6045 
    struct _ddebug __UNIQUE_ID_ddebug567 = {.modname = (char *)"e1000e", .function = (char *)"e1000_change_mtu", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c", .format = (char *)"changing MTU from %d to %d\n", .lineno = (unsigned int)6045U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 6045 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug567.key.dd_key_false.key,(_Bool)0);
    #line 6045 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 6045 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug567,netdev,(char *)"changing MTU from %d to %d\n",netdev->mtu,new_mtu);
  }
  #line 6047 
  netdev->mtu = (unsigned int)new_mtu;
  #line 6049 
  pm_runtime_get_sync(netdev->dev.parent);
  #line 6051 
  if ((int)netif_running(netdev) != 0) 
                                       #line 6052 
                                       e1000e_down(adapter,(_Bool)1);
  #line 6062 
  if (max_frame <= 2048) 
                         #line 6063 
                         adapter->rx_buffer_len = 2048U; else 
                                                              #line 6065 
                                                              adapter->rx_buffer_len = 4096U;
  #line 6068 
  if (max_frame <= 1522) 
                         #line 6069 
                         adapter->rx_buffer_len = 1522U;
  #line 6071 
  if ((int)netif_running(netdev) != 0) 
                                       #line 6072 
                                       e1000e_up(adapter); else 
                                                                #line 6074 
                                                                e1000e_reset(adapter);
  #line 6076 
  pm_runtime_put_sync(netdev->dev.parent);
  #line 6078 
  cif_clear_bit_0(1L,& adapter->state);
  #line 6080 
  return 0;
}

#line 6083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_mii_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd)
{
  #line 6086 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 6087 
  struct mii_ioctl_data *data = if_mii(ifr);
  #line 6089 
  if (adapter->hw.phy.media_type != (unsigned int)e1000_media_type_copper) 
    #line 6090 
    return -95;
  #line 6092 
  switch (cmd) {
    #line 6093 
    case 35143: 
                #line 6093 
    ;
    #line 6094 
    data->phy_id = (unsigned short)adapter->hw.phy.addr;
    #line 6095 
    break;
    #line 6096 
    case 35144: 
                #line 6096 
    ;
    #line 6097 
    e1000_phy_read_status(adapter);
    #line 6099 
    switch ((int)data->reg_num & 31) {
      #line 6100 
      case 0: 
              #line 6100 
      ;
      #line 6101 
      data->val_out = adapter->phy_regs.bmcr;
      #line 6102 
      break;
      #line 6103 
      case 1: 
              #line 6103 
      ;
      #line 6104 
      data->val_out = adapter->phy_regs.bmsr;
      #line 6105 
      break;
      #line 6106 
      case 2: 
              #line 6106 
      ;
      #line 6107 
      data->val_out = (unsigned short)(adapter->hw.phy.id >> 16);
      #line 6108 
      break;
      #line 6109 
      case 3: 
              #line 6109 
      ;
      #line 6110 
      data->val_out = (unsigned short)adapter->hw.phy.id;
      #line 6111 
      break;
      #line 6112 
      case 4: 
              #line 6112 
      ;
      #line 6113 
      data->val_out = adapter->phy_regs.advertise;
      #line 6114 
      break;
      #line 6115 
      case 5: 
              #line 6115 
      ;
      #line 6116 
      data->val_out = adapter->phy_regs.lpa;
      #line 6117 
      break;
      #line 6118 
      case 6: 
              #line 6118 
      ;
      #line 6119 
      data->val_out = adapter->phy_regs.expansion;
      #line 6120 
      break;
      #line 6121 
      case 9: 
              #line 6121 
      ;
      #line 6122 
      data->val_out = adapter->phy_regs.ctrl1000;
      #line 6123 
      break;
      #line 6124 
      case 10: 
               #line 6124 
      ;
      #line 6125 
      data->val_out = adapter->phy_regs.stat1000;
      #line 6126 
      break;
      #line 6127 
      case 15: 
               #line 6127 
      ;
      #line 6128 
      data->val_out = adapter->phy_regs.estatus;
      #line 6129 
      break;
      #line 6130 
      default: 
               #line 6130 
      ;
      #line 6131 
      return -5;
    }
    #line 6133 
    break;
    #line 6134 
    case 35145: 
                #line 6134 
    ;
    #line 6135 
    default: 
             #line 6135 
    ;
    #line 6136 
    return -95;
  }
  #line 6138 
  return 0;
}

#line 6157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_hwtstamp_set(struct net_device *netdev, struct ifreq *ifr)
{
  #line 6160 
  struct hwtstamp_config config;
  #line 6161 
  int ret_val;
  #line 6189 
  int tmp_2;
  #line 6159 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 6163 
  if (copy_from_user((void *)(& config),ifr->ifr_ifru.ifru_data,12UL) != 0UL) 
    #line 6164 
    return -14;
  #line 6166 
  ret_val = e1000e_config_hwtstamp(adapter,& config);
  #line 6167 
  if (ret_val != 0) 
                    #line 6168 
                    return ret_val;
  #line 6170 
  switch (config.rx_filter) {
    #line 6171 
    case 7: 
            #line 6171 
    ;
    #line 6172 
    case 10: 
             #line 6172 
    ;
    #line 6173 
    case 13: 
             #line 6173 
    ;
    #line 6174 
    case 8: 
            #line 6174 
    ;
    #line 6175 
    case 11: 
             #line 6175 
    ;
    #line 6176 
    case 14: 
             #line 6176 
    ;
    #line 6182 
    config.rx_filter = 2;
    #line 6183 
    break;
    #line 6184 
    default: 
             #line 6184 
    ;
    #line 6185 
    break;
  }
  #line 6189 
  if (copy_to_user(ifr->ifr_ifru.ifru_data,(void *)(& config),12UL) != 0UL) 
    #line 6189 
    tmp_2 = -14; else 
                      #line 6189 
                      tmp_2 = 0;
  #line 6189 
  return tmp_2;
}

#line 6192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_hwtstamp_get(struct net_device *netdev, struct ifreq *ifr)
{
  #line 6197 
  int tmp_1;
  #line 6194 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 6197 
  if (copy_to_user(ifr->ifr_ifru.ifru_data,
                     (void *)(& adapter->hwtstamp_config),12UL) != 0UL) 
    #line 6197 
    tmp_1 = -14; else 
                      #line 6197 
                      tmp_1 = 0;
  #line 6197 
  return tmp_1;
}

#line 6200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd)
{
  #line 6202 
  switch (cmd) {
    #line 6203 
    case 35143: 
                #line 6203 
    ;
    #line 6204 
    case 35144: 
                #line 6204 
    ;
    #line 6205 
    case 35145: 
                #line 6205 
    ;
    #line 6206 
    return e1000_mii_ioctl(netdev,ifr,cmd);
    #line 6207 
    case 35248: 
                #line 6207 
    ;
    #line 6208 
    return e1000e_hwtstamp_set(netdev,ifr);
    #line 6209 
    case 35249: 
                #line 6209 
    ;
    #line 6210 
    return e1000e_hwtstamp_get(netdev,ifr);
    #line 6211 
    default: 
             #line 6211 
    ;
    #line 6212 
    return -95;
  }
}

#line 6216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_init_phy_wakeup(struct e1000_adapter *adapter, u32 wufc)
{
  #line 6219 
  u32 i;
  #line 6219 
  u32 mac_reg;
  #line 6219 
  u32 wuc;
  #line 6220 
  u16 phy_reg;
  #line 6220 
  u16 wuc_enable;
  #line 6221 
  int retval;
  #line 6218 
  struct e1000_hw *hw = & adapter->hw;
  #line 6224 
  e1000_copy_rx_addrs_to_phy_ich8lan(hw);
  #line 6226 
  retval = (*(hw->phy.ops.acquire))(hw);
  #line 6227 
  if (retval != 0) {
    #line 6228 
    netdev_err(adapter->netdev,(char *)"Could not acquire PHY\n");
    #line 6229 
    return retval;
  }
  #line 6233 
  retval = e1000_enable_phy_wakeup_reg_access_bm(hw,& wuc_enable);
  #line 6234 
  if (retval != 0) 
                   #line 6235 
                   goto release;
  #line 6238 
  i = 0U;
  #line 6238 
  while ((unsigned int)adapter->hw.mac.mta_reg_count > i) {
    #line 6239 
    mac_reg = readl(hw->hw_addr + ((unsigned long)(i << 2) + (unsigned long)20992U));
    #line 6240 
    (*(hw->phy.ops.write_reg_page))(hw,(((i << 1) & 31U) | ((((i << 1) + 128U) << 16) & 4292870144U)) | 25600U,(unsigned short)((int)((unsigned short)mac_reg)));
    #line 6242 
    (*(hw->phy.ops.write_reg_page))(hw,((((i << 1) & 31U) | ((((i << 1) + 128U) << 16) & 4292870144U)) | 25600U) + 1U,(unsigned short)((int)((unsigned short)(mac_reg >> 16))));
    #line 6238 
    i ++;
  }
  #line 6247 
  (*(hw->phy.ops.read_reg_page))(& adapter->hw,25600U,& phy_reg);
  #line 6248 
  mac_reg = __er32(hw,256UL);
  #line 6249 
  if ((mac_reg & 8U) != 0U) 
                            #line 6250 
                            phy_reg = (unsigned short)((unsigned int)phy_reg | 1U);
  #line 6251 
  if ((mac_reg & 16U) != 0U) 
                             #line 6252 
                             phy_reg = (unsigned short)((unsigned int)phy_reg | 2U);
  #line 6253 
  phy_reg = (unsigned short)((unsigned int)phy_reg & 65511U);
  #line 6254 
  if ((mac_reg & 12288U) != 0U) 
                                #line 6255 
                                phy_reg = (unsigned short)(((unsigned int)((int)((unsigned short)(mac_reg >> 12)) << 3U) & 24U) | (unsigned int)phy_reg);
  #line 6257 
  if ((mac_reg & 32768U) != 0U) 
                                #line 6258 
                                phy_reg = (unsigned short)((unsigned int)phy_reg | 32U);
  #line 6259 
  if ((mac_reg & 8388608U) != 0U) 
                                  #line 6260 
                                  phy_reg = (unsigned short)((unsigned int)phy_reg | 64U);
  #line 6261 
  mac_reg = __er32(hw,0UL);
  #line 6262 
  if ((mac_reg & 134217728U) != 0U) 
                                    #line 6263 
                                    phy_reg = (unsigned short)((unsigned int)phy_reg | 128U);
  #line 6264 
  (*(hw->phy.ops.write_reg_page))(& adapter->hw,25600U,(unsigned short)((int)phy_reg));
  #line 6266 
  wuc = 2U;
  #line 6267 
  if ((wufc & 3U) != 0U) 
                         #line 6268 
                         wuc |= 1U;
  #line 6271 
  __ew32(hw,22536UL,wufc);
  #line 6272 
  __ew32(hw,22528UL,wuc | 268U);
  #line 6276 
  (*(hw->phy.ops.write_reg_page))(& adapter->hw,25602U,(unsigned short)((int)((unsigned short)wufc)));
  #line 6277 
  (*(hw->phy.ops.write_reg_page))(& adapter->hw,25601U,(unsigned short)((int)((unsigned short)wuc)));
  #line 6280 
  wuc_enable = (unsigned short)((unsigned int)wuc_enable | 20U);
  #line 6281 
  retval = e1000_disable_phy_wakeup_reg_access_bm(hw,& wuc_enable);
  #line 6282 
  if (retval != 0) 
                   #line 6283 
                   netdev_err(adapter->netdev,(char *)"Could not set PHY Host Wakeup bit\n");
  #line 6284 
  release: 
           #line 6284 
  ;
  #line 6285 
  (*(hw->phy.ops.release))(hw);
  #line 6287 
  return retval;
}

#line 6290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_flush_lpic(struct pci_dev *pdev)
{
  #line 6295 
  u32 ret_val;
  #line 6292 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 6293 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 6294 
  struct e1000_hw *hw = & adapter->hw;
  #line 6297 
  pm_runtime_get_sync(netdev->dev.parent);
  #line 6299 
  ret_val = (unsigned int)(*(hw->phy.ops.acquire))(hw);
  #line 6300 
  if (ret_val != 0U) 
                     #line 6301 
                     goto fl_out;
  #line 6303 
  printk((char *)"\001",__er32(hw,252UL) >> 24);
  #line 6306 
  (*(hw->phy.ops.release))(hw);
  #line 6308 
  fl_out: 
          #line 6308 
  ;
  #line 6309 
  pm_runtime_put_sync(netdev->dev.parent);
  #line 6310 
  return;
}

#line 6314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_s0ix_entry_flow(struct e1000_adapter *adapter)
{
  #line 6317 
  u32 mac_data;
  #line 6318 
  u16 phy_data;
  #line 6316 
  struct e1000_hw *hw = & adapter->hw;
  #line 6323 
  e1e_rphy(hw,24657U,& phy_data);
  #line 6324 
  phy_data = (unsigned short)((unsigned int)phy_data & 65023U);
  #line 6325 
  phy_data = (unsigned short)((unsigned int)phy_data | 1024U);
  #line 6326 
  e1e_wphy(hw,24657U,(unsigned short)((int)phy_data));
  #line 6331 
  e1e_rphy(hw,24733U,& phy_data);
  #line 6332 
  phy_data = (unsigned short)((unsigned int)phy_data | 32U);
  #line 6333 
  e1e_wphy(hw,24733U,(unsigned short)((int)phy_data));
  #line 6339 
  e1e_rphy(hw,24631U,& phy_data);
  #line 6340 
  phy_data = (unsigned short)((unsigned int)phy_data | 1U);
  #line 6341 
  e1e_wphy(hw,24631U,(unsigned short)((int)phy_data));
  #line 6342 
  mac_data = __er32(hw,24UL);
  #line 6343 
  mac_data |= 2048U;
  #line 6344 
  __ew32(hw,24UL,mac_data);
  #line 6349 
  e1e_rphy(hw,24628U,& phy_data);
  #line 6350 
  phy_data = (unsigned short)((unsigned int)phy_data | 1U);
  #line 6351 
  e1e_wphy(hw,24628U,(unsigned short)((int)phy_data));
  #line 6353 
  mac_data = __er32(hw,3840UL);
  #line 6354 
  mac_data |= 128U;
  #line 6355 
  __ew32(hw,3840UL,mac_data);
  #line 6361 
  mac_data = __er32(hw,13328UL);
  #line 6362 
  if (mac_data != 0U) 
                      #line 6363 
                      __ew32(hw,13328UL,0U);
  #line 6364 
  mac_data = __er32(hw,13336UL);
  #line 6365 
  if (mac_data != 0U) 
                      #line 6366 
                      __ew32(hw,13336UL,0U);
  #line 6367 
  mac_data = __er32(hw,13344UL);
  #line 6368 
  if (mac_data != 0U) 
                      #line 6369 
                      __ew32(hw,13344UL,0U);
  #line 6370 
  mac_data = __er32(hw,13352UL);
  #line 6371 
  if (mac_data != 0U) 
                      #line 6372 
                      __ew32(hw,13352UL,0U);
  #line 6373 
  mac_data = __er32(hw,13360UL);
  #line 6374 
  if (mac_data != 0U) 
                      #line 6375 
                      __ew32(hw,13360UL,0U);
  #line 6376 
  mac_data = __er32(hw,9232UL);
  #line 6377 
  if (mac_data != 0U) 
                      #line 6378 
                      __ew32(hw,9232UL,0U);
  #line 6379 
  mac_data = __er32(hw,9240UL);
  #line 6380 
  if (mac_data != 0U) 
                      #line 6381 
                      __ew32(hw,9240UL,0U);
  #line 6382 
  mac_data = __er32(hw,9248UL);
  #line 6383 
  if (mac_data != 0U) 
                      #line 6384 
                      __ew32(hw,9248UL,0U);
  #line 6385 
  mac_data = __er32(hw,9256UL);
  #line 6386 
  if (mac_data != 0U) 
                      #line 6387 
                      __ew32(hw,9256UL,0U);
  #line 6388 
  mac_data = __er32(hw,9264UL);
  #line 6389 
  if (mac_data != 0U) 
                      #line 6390 
                      __ew32(hw,9264UL,0U);
  #line 6393 
  mac_data = __er32(hw,228UL);
  #line 6394 
  mac_data |= 4194304U;
  #line 6395 
  __ew32(hw,228UL,mac_data);
  #line 6398 
  mac_data = __er32(hw,228UL);
  #line 6399 
  mac_data |= 2147483648U;
  #line 6400 
  mac_data &= 4294967294U;
  #line 6401 
  __ew32(hw,228UL,mac_data);
  #line 6404 
  mac_data = __er32(hw,24UL);
  #line 6405 
  mac_data |= 8U;
  #line 6406 
  __ew32(hw,24UL,mac_data);
  #line 6409 
  mac_data = __er32(hw,24UL);
  #line 6410 
  mac_data |= 524288U;
  #line 6411 
  __ew32(hw,24UL,mac_data);
  #line 6416 
  mac_data = __er32(hw,20UL);
  #line 6417 
  mac_data |= 128U;
  #line 6418 
  __ew32(hw,20UL,mac_data);
  #line 6419 
  return;
}

#line 6421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_s0ix_exit_flow(struct e1000_adapter *adapter)
{
  #line 6424 
  u32 mac_data;
  #line 6425 
  u16 phy_data;
  #line 6423 
  struct e1000_hw *hw = & adapter->hw;
  #line 6428 
  mac_data = __er32(hw,228UL);
  #line 6429 
  mac_data &= 4290772991U;
  #line 6430 
  __ew32(hw,228UL,mac_data);
  #line 6433 
  mac_data = __er32(hw,228UL);
  #line 6434 
  mac_data |= 1U;
  #line 6435 
  __ew32(hw,228UL,mac_data);
  #line 6438 
  mac_data = __er32(hw,24UL);
  #line 6439 
  mac_data &= 4294967287U;
  #line 6440 
  __ew32(hw,24UL,mac_data);
  #line 6443 
  mac_data = __er32(hw,24UL);
  #line 6444 
  mac_data &= 4294443007U;
  #line 6445 
  __ew32(hw,24UL,mac_data);
  #line 6450 
  mac_data = __er32(hw,20UL);
  #line 6451 
  mac_data &= 4294967167U;
  #line 6452 
  __ew32(hw,20UL,mac_data);
  #line 6457 
  e1e_rphy(hw,24657U,& phy_data);
  #line 6458 
  phy_data = (unsigned short)((unsigned int)phy_data & 64511U);
  #line 6459 
  phy_data = (unsigned short)((unsigned int)phy_data | 512U);
  #line 6460 
  e1e_wphy(hw,24657U,(unsigned short)((int)phy_data));
  #line 6465 
  e1e_rphy(hw,24733U,& phy_data);
  #line 6466 
  phy_data = (unsigned short)((unsigned int)phy_data & 65503U);
  #line 6467 
  e1e_wphy(hw,24733U,(unsigned short)((int)phy_data));
  #line 6473 
  e1e_rphy(hw,24631U,& phy_data);
  #line 6474 
  phy_data = (unsigned short)((unsigned int)phy_data & 65534U);
  #line 6475 
  e1e_wphy(hw,24631U,(unsigned short)((int)phy_data));
  #line 6476 
  mac_data = __er32(hw,24UL);
  #line 6477 
  mac_data &= 4294965247U;
  #line 6478 
  __ew32(hw,24UL,mac_data);
  #line 6479 
  return;
}

#line 6482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_pm_freeze(struct device *dev)
{
  #line 6486 
  bool present;
  #line 6484 
  struct net_device *netdev = dev_get_drvdata(dev);
  #line 6485 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 6488 
  rtnl_lock();
  #line 6490 
  present = netif_device_present(netdev);
  #line 6491 
  netif_device_detach(netdev);
  #line 6493 
  if ((int)present != 0) {
    #line 6493 
    if ((int)netif_running(netdev) != 0) {
      #line 6494 
      int count = 25;
      #line 6496 
      while (1) {
        #line 6496 
        if ((int)test_bit(1L,& adapter->state) != 0) {
          #line 6496 
          int tmp_2;
          #line 6496 
          tmp_2 = count;
          #line 6496 
          count --;
          #line 6496 
          ;
          #line 6496 
          if (! (tmp_2 != 0)) 
                              #line 6496 
                              break;
        }
        else 
             #line 6496 
             break;
        #line 6497 
        usleep_range(10000UL,11000UL);
      }
      {
        #line 6499 
        int __ret_warn_on = (int)test_bit(1L,& adapter->state) != 0;
        #line 6499 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 6500 
          ldv_inline_asm();
          #line 6501 
          ldv_inline_asm();
        }
        #line 6499 
        long tmp_4 = (long)(__ret_warn_on != 0);
      }
      #line 6502 
      e1000e_down(adapter,(_Bool)0);
      #line 6503 
      e1000_free_irq(adapter);
    }
  }
  #line 6505 
  rtnl_unlock();
  #line 6507 
  e1000e_reset_interrupt_capability(adapter);
  #line 6510 
  e1000e_disable_pcie_master(& adapter->hw);
  #line 6512 
  return 0;
}

#line 6515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int __e1000_shutdown(struct pci_dev *pdev, bool runtime)
{
  #line 6520 
  u32 ctrl;
  #line 6520 
  u32 ctrl_ext;
  #line 6520 
  u32 rctl;
  #line 6520 
  u32 status;
  #line 6522 
  unsigned int tmp_1;
  #line 6517 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 6518 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 6519 
  struct e1000_hw *hw = & adapter->hw;
  #line 6522 
  if (runtime) 
               #line 6522 
               tmp_1 = 1U; else 
                                #line 6522 
                                tmp_1 = adapter->wol;
  #line 6522 
  u32 wufc = tmp_1;
  #line 6523 
  int retval = 0;
  #line 6525 
  status = __er32(hw,8UL);
  #line 6526 
  if ((status & 2U) != 0U) 
                           #line 6527 
                           wufc &= 4294967294U;
  #line 6529 
  if (wufc != 0U) {
    #line 6530 
    e1000_setup_rctl(adapter);
    #line 6531 
    e1000e_set_rx_mode(netdev);
    #line 6534 
    if ((wufc & 8U) != 0U) {
      #line 6535 
      rctl = __er32(hw,256UL);
      #line 6536 
      rctl |= 16U;
      #line 6537 
      __ew32(hw,256UL,rctl);
    }
    #line 6540 
    ctrl = __er32(hw,0UL);
    #line 6541 
    ctrl |= 1048576U;
    #line 6542 
    if (((unsigned long)adapter->flags2 & 2UL) == 0UL) 
                                                       #line 6543 
                                                       ctrl |= 2097152U;
    #line 6544 
    __ew32(hw,0UL,ctrl);
    #line 6546 
    if ((unsigned int)adapter->hw.phy.media_type + 4294967294U <= 1U) {
      #line 6550 
      ctrl_ext = __er32(hw,24UL);
      #line 6551 
      ctrl_ext |= 128U;
      #line 6552 
      __ew32(hw,24UL,ctrl_ext);
    }
    #line 6555 
    if (! runtime) 
                   #line 6556 
                   e1000e_power_up_phy(adapter);
    #line 6558 
    if (((unsigned long)adapter->flags & 512UL) != 0UL) 
                                                        #line 6559 
                                                        e1000_suspend_workarounds_ich8lan(& adapter->hw);
    #line 6561 
    if (((unsigned long)adapter->flags2 & 2UL) != 0UL) {
      #line 6563 
      retval = e1000_init_phy_wakeup(adapter,wufc);
      #line 6564 
      if (retval != 0) 
                       #line 6565 
                       return retval;
    }
    else {
      #line 6568 
      __ew32(hw,22536UL,wufc);
      #line 6569 
      __ew32(hw,22528UL,2U);
    }
  }
  else {
    #line 6572 
    __ew32(hw,22528UL,0U);
    #line 6573 
    __ew32(hw,22536UL,0U);
    #line 6575 
    e1000_power_down_phy(adapter);
  }
  #line 6578 
  if (adapter->hw.phy.type == (unsigned int)e1000_phy_igp_3) 
                                                             #line 6579 
                                                             e1000e_igp3_phy_powerdown_workaround_ich8lan(& adapter->hw);
  else 
    #line 6580 
    if (hw->mac.type > (unsigned int)e1000_pch2lan) {
      #line 6581 
      if ((wufc & 28U) == 0U) 
                              #line 6585 
                              retval = e1000_enable_ulp_lpt_lp(hw,(_Bool)((int)((_Bool)(! ((int)runtime != 0)))));
      #line 6587 
      if (retval != 0) 
                       #line 6588 
                       return retval;
    }
  #line 6594 
  if ((hw->phy.type > (unsigned int)e1000_phy_82579 && (unsigned int)adapter->eee_advert != 0U) && (unsigned int)hw->dev_spec.ich8lan.eee_lp_ability != 0U) {
    #line 6596 
    u16 lpi_ctrl = (unsigned short)0U;
    #line 6598 
    retval = (*(hw->phy.ops.acquire))(hw);
    #line 6599 
    if (retval == 0) {
      #line 6600 
      retval = e1e_rphy_locked(hw,24724U,& lpi_ctrl);
      #line 6602 
      if (retval == 0) {
        #line 6603 
        if ((((int)adapter->eee_advert & (int)hw->dev_spec.ich8lan.eee_lp_ability) & 2) != 0) 
          #line 6606 
          lpi_ctrl = (unsigned short)((unsigned int)lpi_ctrl | 8192U);
        #line 6607 
        if ((((int)adapter->eee_advert & (int)hw->dev_spec.ich8lan.eee_lp_ability) & 4) != 0) 
          #line 6610 
          lpi_ctrl = (unsigned short)((unsigned int)lpi_ctrl | 16384U);
        #line 6612 
        retval = e1e_wphy_locked(hw,24724U,(unsigned short)((int)lpi_ctrl));
      }
    }
    #line 6616 
    (*(hw->phy.ops.release))(hw);
  }
  #line 6622 
  e1000e_release_hw_control(adapter);
  #line 6624 
  pci_clear_master(pdev);
  #line 6635 
  if (((unsigned long)adapter->flags & 8192UL) != 0UL) {
    #line 6637 
    u16 devctl;
    #line 6636 
    struct pci_dev *us_dev = (pdev->bus)->self;
    #line 6639 
    if (us_dev == (struct pci_dev *)0) 
                                       #line 6640 
                                       return 0;
    #line 6642 
    pcie_capability_read_word(us_dev,8,& devctl);
    #line 6643 
    pcie_capability_write_word(us_dev,8,(unsigned short)((int)devctl & 65534));
    #line 6646 
    pci_save_state(pdev);
    #line 6647 
    pci_prepare_to_sleep(pdev);
    #line 6649 
    pcie_capability_write_word(us_dev,8,(unsigned short)((int)devctl));
  }
  #line 6652 
  return 0;
}

#line 6663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void __e1000e_disable_aspm(struct pci_dev *pdev, u16 state, int locked)
{
  #line 6667 
  u16 pdev_aspmc;
  #line 6667 
  u16 parent_aspmc;
  #line 6695 
  char *tmp;
  #line 6695 
  char *tmp_0;
  #line 6665 
  struct pci_dev *parent = (pdev->bus)->self;
  #line 6666 
  u16 aspm_dis_mask = (unsigned short)0U;
  #line 6669 
  switch ((int)state) {
    #line 6670 
    case 1: 
            #line 6670 
    ;
    #line 6671 
    case 3: 
            #line 6671 
    ;
    #line 6672 
    aspm_dis_mask = (unsigned short)((unsigned int)aspm_dis_mask | 1U);
    #line 6674 
    case 2: 
            #line 6674 
    ;
    #line 6675 
    aspm_dis_mask = (unsigned short)((unsigned int)aspm_dis_mask | 2U);
    #line 6676 
    break;
    #line 6677 
    default: 
             #line 6677 
    ;
    #line 6678 
    return;
  }
  #line 6681 
  pcie_capability_read_word(pdev,16,& pdev_aspmc);
  #line 6682 
  pdev_aspmc = (unsigned short)((unsigned int)pdev_aspmc & 3U);
  #line 6684 
  if (parent != (struct pci_dev *)0) {
    #line 6685 
    pcie_capability_read_word(parent,16,& parent_aspmc);
    #line 6687 
    parent_aspmc = (unsigned short)((unsigned int)parent_aspmc & 3U);
  }
  #line 6691 
  if ((unsigned int)((int)pdev_aspmc & (int)aspm_dis_mask) == 0U && (parent == (struct pci_dev *)0 || (unsigned int)((int)parent_aspmc & (int)aspm_dis_mask) == 0U)) 
    #line 6693 
    return;
  #line 6695 
  if ((((int)aspm_dis_mask & (int)pdev_aspmc) & 2) != 0) 
                                                         #line 6695 
                                                         tmp = (char *)"L1"; else 
                                                                    #line 6695 
                                                                    tmp = (char *)"";
  #line 6695 
  if ((((int)aspm_dis_mask & (int)pdev_aspmc) & 1) != 0) 
                                                         #line 6695 
                                                         tmp_0 = (char *)"L0s"; else 
                                                                    #line 6695 
                                                                    tmp_0 = (char *)"";
  #line 6695 
  ;
  #line 6695 
  _dev_info(& pdev->dev,(char *)"Disabling ASPM %s %s\n",tmp_0,tmp);
  #line 6702 
  if (locked != 0) 
                   #line 6703 
                   pci_disable_link_state_locked(pdev,(int)state); else 
                                                                    #line 6705 
                                                                    pci_disable_link_state(pdev,(int)state);
  #line 6711 
  pcie_capability_read_word(pdev,16,& pdev_aspmc);
  #line 6712 
  pdev_aspmc = (unsigned short)((unsigned int)pdev_aspmc & 3U);
  #line 6714 
  if ((unsigned int)((int)aspm_dis_mask & (int)pdev_aspmc) == 0U) 
                                                                  #line 6715 
                                                                  return;
  #line 6721 
  pcie_capability_clear_word(pdev,16,(unsigned short)((int)aspm_dis_mask));
  #line 6723 
  if (parent != (struct pci_dev *)0) 
                                     #line 6724 
                                     pcie_capability_clear_word(parent,16,(unsigned short)((int)aspm_dis_mask));
  #line 6725 
  return;
}

#line 6736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_disable_aspm(struct pci_dev *pdev, u16 state)
{
  #line 6738 
  __e1000e_disable_aspm(pdev,(unsigned short)((int)state),0);
  #line 6739 
  return;
}

#line 6749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_disable_aspm_locked(struct pci_dev *pdev, u16 state)
{
  #line 6751 
  __e1000e_disable_aspm(pdev,(unsigned short)((int)state),1);
  #line 6752 
  return;
}

#line 6754  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_pm_thaw(struct device *dev)
{
  #line 6756 
  struct net_device *netdev = dev_get_drvdata(dev);
  #line 6757 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 6758 
  int rc = 0;
  #line 6760 
  e1000e_set_interrupt_capability(adapter);
  #line 6762 
  rtnl_lock();
  #line 6763 
  if ((int)netif_running(netdev) != 0) {
    #line 6764 
    rc = e1000_request_irq(adapter);
    #line 6765 
    if (rc != 0) 
                 #line 6766 
                 goto err_irq;
    #line 6768 
    e1000e_up(adapter);
  }
  #line 6771 
  netif_device_attach(netdev);
  #line 6772 
  err_irq: 
           #line 6772 
  ;
  #line 6773 
  rtnl_unlock();
  #line 6775 
  return rc;
}

#line 6779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int __e1000_resume(struct pci_dev *pdev)
{
  #line 6781 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 6782 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 6783 
  struct e1000_hw *hw = & adapter->hw;
  #line 6784 
  u16 aspm_disable_flag = (unsigned short)0U;
  #line 6786 
  if (((unsigned long)adapter->flags2 & 128UL) != 0UL) 
                                                       #line 6787 
                                                       aspm_disable_flag = (unsigned short)1U;
  #line 6788 
  if (((unsigned long)adapter->flags2 & 8UL) != 0UL) 
                                                     #line 6789 
                                                     aspm_disable_flag = (unsigned short)((unsigned int)aspm_disable_flag | 2U);
  #line 6790 
  if ((unsigned int)aspm_disable_flag != 0U) 
                                             #line 6791 
                                             e1000e_disable_aspm(pdev,(unsigned short)((int)aspm_disable_flag));
  #line 6793 
  pci_set_master(pdev);
  #line 6795 
  if (hw->mac.type > (unsigned int)e1000_pchlan) 
                                                 #line 6796 
                                                 e1000_resume_workarounds_pchlan(& adapter->hw);
  #line 6798 
  e1000e_power_up_phy(adapter);
  #line 6801 
  if (((unsigned long)adapter->flags2 & 2UL) != 0UL) {
    #line 6802 
    u16 phy_data;
    #line 6804 
    e1e_rphy(& adapter->hw,25603U,& phy_data);
    #line 6805 
    if ((unsigned int)phy_data != 0U) {
      #line 6806 
      char *tmp_2;
      #line 6806 
      char *tmp_3;
      #line 6806 
      char *tmp_4;
      #line 6806 
      char *tmp_1;
      #line 6806 
      char *tmp_5;
      #line 6806 
      if (((int)phy_data & 4) == 0) {
        #line 6806 
        if (((int)phy_data & 8) == 0) {
          #line 6806 
          if (((int)phy_data & 16) == 0) {
            #line 6806 
            if (((int)phy_data & 2) == 0) {
              #line 6806 
              if (((int)phy_data & 1) != 0) 
                                            #line 6806 
                                            tmp_1 = (char *)"Link Status Change"; else 
                                                                    #line 6806 
                                                                    tmp_1 = (char *)"other";
              #line 6806 
              tmp_2 = tmp_1;
            }
            else 
                 #line 6806 
                 tmp_2 = (char *)"Magic Packet";
            #line 6806 
            tmp_3 = tmp_2;
          }
          else 
               #line 6806 
               tmp_3 = (char *)"Broadcast Packet";
          #line 6806 
          tmp_4 = tmp_3;
        }
        else 
             #line 6806 
             tmp_4 = (char *)"Multicast Packet";
        #line 6806 
        tmp_5 = tmp_4;
      }
      else 
           #line 6806 
           tmp_5 = (char *)"Unicast Packet";
      #line 6806 
      ;
      #line 6806 
      netdev_info(adapter->netdev,(char *)"PHY Wakeup cause - %s\n",tmp_5);
    }
    #line 6814 
    e1e_wphy(& adapter->hw,25603U,(unsigned short)65535);
  }
  else {
    #line 6816 
    u32 wus = __er32(hw,22544UL);
    #line 6818 
    if (wus != 0U) {
      #line 6819 
      char *tmp_7;
      #line 6819 
      char *tmp_8;
      #line 6819 
      char *tmp_9;
      #line 6819 
      char *tmp_10;
      #line 6819 
      char *tmp_11;
      #line 6819 
      if ((wus & 4U) == 0U) {
        #line 6819 
        if ((wus & 8U) == 0U) {
          #line 6819 
          if ((wus & 16U) == 0U) {
            #line 6819 
            if ((wus & 2U) == 0U) {
              #line 6819 
              if ((wus & 1U) != 0U) 
                                    #line 6819 
                                    tmp_7 = (char *)"Link Status Change"; else 
                                                                    #line 6819 
                                                                    tmp_7 = (char *)"other";
              #line 6819 
              tmp_8 = tmp_7;
            }
            else 
                 #line 6819 
                 tmp_8 = (char *)"Magic Packet";
            #line 6819 
            tmp_9 = tmp_8;
          }
          else 
               #line 6819 
               tmp_9 = (char *)"Broadcast Packet";
          #line 6819 
          tmp_10 = tmp_9;
        }
        else 
             #line 6819 
             tmp_10 = (char *)"Multicast Packet";
        #line 6819 
        tmp_11 = tmp_10;
      }
      else 
           #line 6819 
           tmp_11 = (char *)"Unicast Packet";
      #line 6819 
      ;
      #line 6819 
      netdev_info(adapter->netdev,(char *)"MAC Wakeup cause - %s\n",tmp_11);
    }
    #line 6827 
    __ew32(hw,22544UL,4294967295U);
  }
  #line 6830 
  e1000e_reset(adapter);
  #line 6832 
  e1000_init_manageability_pt(adapter);
  #line 6838 
  if (((unsigned long)adapter->flags & 1UL) == 0UL) 
                                                    #line 6839 
                                                    e1000e_get_hw_control(adapter);
  #line 6841 
  return 0;
}

#line 6845  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_pm_suspend(struct device *dev)
{
  #line 6847 
  void *__mptr;
  #line 6849 
  void *__mptr_0;
  #line 6851 
  int rc;
  #line 6847 
  __mptr = (void *)dev;
  #line 6847 
  struct net_device *netdev = (struct net_device *)pci_get_drvdata(((struct pci_dev *)(__mptr + 18446744073709551440U)));
  #line 6848 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 6849 
  __mptr_0 = (void *)dev;
  #line 6849 
  struct pci_dev *pdev = ((struct pci_dev *)(__mptr_0 + 18446744073709551440U));
  #line 6850 
  struct e1000_hw *hw = & adapter->hw;
  #line 6853 
  e1000e_flush_lpic(pdev);
  #line 6855 
  e1000e_pm_freeze(dev);
  #line 6857 
  rc = __e1000_shutdown(pdev,(_Bool)0);
  #line 6858 
  if (rc != 0) 
               #line 6859 
               e1000e_pm_thaw(dev);
  #line 6862 
  if (hw->mac.type > (unsigned int)e1000_pch_spt) 
                                                  #line 6863 
                                                  e1000e_s0ix_entry_flow(adapter);
  #line 6865 
  return rc;
}

#line 6868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_pm_resume(struct device *dev)
{
  #line 6872 
  void *__mptr_0;
  #line 6870 
  void *__mptr;
  #line 6874 
  int rc;
  #line 6870 
  __mptr = (void *)dev;
  #line 6870 
  struct net_device *netdev = (struct net_device *)pci_get_drvdata(((struct pci_dev *)(__mptr + 18446744073709551440U)));
  #line 6871 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 6872 
  __mptr_0 = (void *)dev;
  #line 6872 
  struct pci_dev *pdev = ((struct pci_dev *)(__mptr_0 + 18446744073709551440U));
  #line 6873 
  struct e1000_hw *hw = & adapter->hw;
  #line 6877 
  if (hw->mac.type > (unsigned int)e1000_pch_spt) 
                                                  #line 6878 
                                                  e1000e_s0ix_exit_flow(adapter);
  #line 6880 
  rc = __e1000_resume(pdev);
  #line 6881 
  if (rc != 0) 
               #line 6882 
               return rc;
  #line 6884 
  return e1000e_pm_thaw(dev);
}

#line 6888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_pm_runtime_idle(struct device *dev)
{
  #line 6892 
  u16 eee_lp;
  #line 6890 
  struct net_device *netdev = dev_get_drvdata(dev);
  #line 6891 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 6894 
  eee_lp = adapter->hw.dev_spec.ich8lan.eee_lp_ability;
  #line 6896 
  if (! e1000e_has_link(adapter)) {
    #line 6897 
    adapter->hw.dev_spec.ich8lan.eee_lp_ability = eee_lp;
    #line 6898 
    pm_schedule_suspend(dev,5000U);
  }
  #line 6901 
  return -16;
}

#line 6904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_pm_runtime_resume(struct device *dev)
{
  #line 6906 
  void *__mptr;
  #line 6909 
  int rc;
  #line 6906 
  __mptr = (void *)dev;
  #line 6906 
  struct pci_dev *pdev = ((struct pci_dev *)(__mptr + 18446744073709551440U));
  #line 6907 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 6908 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 6911 
  rc = __e1000_resume(pdev);
  #line 6912 
  if (rc != 0) 
               #line 6913 
               return rc;
  #line 6915 
  if ((netdev->flags & 1U) != 0U) 
                                  #line 6916 
                                  e1000e_up(adapter);
  #line 6918 
  return rc;
}

#line 6921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_pm_runtime_suspend(struct device *dev)
{
  #line 6923 
  void *__mptr;
  #line 6923 
  __mptr = (void *)dev;
  #line 6923 
  struct pci_dev *pdev = ((struct pci_dev *)(__mptr + 18446744073709551440U));
  #line 6924 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 6925 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 6927 
  if ((netdev->flags & 1U) != 0U) {
    #line 6928 
    int count = 25;
    #line 6930 
    while (1) {
      #line 6930 
      if ((int)test_bit(1L,& adapter->state) != 0) {
        #line 6930 
        int tmp_3;
        #line 6930 
        tmp_3 = count;
        #line 6930 
        count --;
        #line 6930 
        ;
        #line 6930 
        if (! (tmp_3 != 0)) 
                            #line 6930 
                            break;
      }
      else 
           #line 6930 
           break;
      #line 6931 
      usleep_range(10000UL,11000UL);
    }
    {
      #line 6933 
      int __ret_warn_on = (int)test_bit(1L,& adapter->state) != 0;
      #line 6933 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 6934 
        ldv_inline_asm();
        #line 6935 
        ldv_inline_asm();
      }
      #line 6933 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 6936 
    e1000e_down(adapter,(_Bool)0);
  }
  #line 6939 
  if (__e1000_shutdown(pdev,(_Bool)1) != 0) {
    #line 6940 
    e1000e_pm_runtime_resume(dev);
    #line 6941 
    return -16;
  }
  #line 6944 
  return 0;
}

#line 6948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_shutdown(struct pci_dev *pdev)
{
  #line 6950 
  e1000e_flush_lpic(pdev);
  #line 6952 
  e1000e_pm_freeze(& pdev->dev);
  #line 6954 
  __e1000_shutdown(pdev,(_Bool)0);
  #line 6955 
  return;
}

#line 6959  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static irqreturn_t e1000_intr_msix(int irq, void *data)
{
  #line 6961 
  struct net_device *netdev = (struct net_device *)data;
  #line 6962 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 6964 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    #line 6965 
    int vector;
    #line 6965 
    int msix_irq;
    #line 6967 
    vector = 0;
    #line 6968 
    msix_irq = (int)(adapter->msix_entries + (unsigned long)vector)->vector;
    #line 6969 
    if ((int)disable_hardirq((unsigned int)msix_irq) != 0) 
                                                           #line 6970 
                                                           e1000_intr_msix_rx(msix_irq,(void *)netdev);
    #line 6971 
    enable_irq((unsigned int)msix_irq);
    #line 6973 
    vector ++;
    #line 6974 
    msix_irq = (int)(adapter->msix_entries + (unsigned long)vector)->vector;
    #line 6975 
    if ((int)disable_hardirq((unsigned int)msix_irq) != 0) 
                                                           #line 6976 
                                                           e1000_intr_msix_tx(msix_irq,(void *)netdev);
    #line 6977 
    enable_irq((unsigned int)msix_irq);
    #line 6979 
    vector ++;
    #line 6980 
    msix_irq = (int)(adapter->msix_entries + (unsigned long)vector)->vector;
    #line 6981 
    if ((int)disable_hardirq((unsigned int)msix_irq) != 0) 
                                                           #line 6982 
                                                           e1000_msix_other(msix_irq,(void *)netdev);
    #line 6983 
    enable_irq((unsigned int)msix_irq);
  }
  #line 6986 
  return IRQ_HANDLED;
}

#line 6997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_netpoll(struct net_device *netdev)
{
  #line 6999 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 7001 
  switch (adapter->int_mode) {
    #line 7002 
    case 2: 
            #line 7002 
    ;
    #line 7003 
    e1000_intr_msix((int)(adapter->pdev)->irq,(void *)netdev);
    #line 7004 
    break;
    #line 7005 
    case 1: 
            #line 7005 
    ;
    #line 7006 
    if ((int)disable_hardirq((adapter->pdev)->irq) != 0) 
                                                         #line 7007 
                                                         e1000_intr_msi((int)(adapter->pdev)->irq,(void *)netdev);
    #line 7008 
    enable_irq((adapter->pdev)->irq);
    #line 7009 
    break;
    #line 7010 
    default: 
             #line 7010 
    ;
    #line 7011 
    if ((int)disable_hardirq((adapter->pdev)->irq) != 0) 
                                                         #line 7012 
                                                         e1000_intr((int)(adapter->pdev)->irq,(void *)netdev);
    #line 7013 
    enable_irq((adapter->pdev)->irq);
    #line 7014 
    break;
  }
  #line 7016 
  return;
}

#line 7027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static pci_ers_result_t e1000_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 7030 
  e1000e_pm_freeze(& pdev->dev);
  #line 7032 
  if (state == 3U) 
                   #line 7033 
                   return 4U;
  #line 7035 
  pci_disable_device(pdev);
  #line 7038 
  return 3U;
}

#line 7048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static pci_ers_result_t e1000_io_slot_reset(struct pci_dev *pdev)
{
  #line 7054 
  int err;
  #line 7055 
  pci_ers_result_t result;
  #line 7050 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 7051 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 7052 
  struct e1000_hw *hw = & adapter->hw;
  #line 7053 
  u16 aspm_disable_flag = (unsigned short)0U;
  #line 7057 
  if (((unsigned long)adapter->flags2 & 128UL) != 0UL) 
                                                       #line 7058 
                                                       aspm_disable_flag = (unsigned short)1U;
  #line 7059 
  if (((unsigned long)adapter->flags2 & 8UL) != 0UL) 
                                                     #line 7060 
                                                     aspm_disable_flag = (unsigned short)((unsigned int)aspm_disable_flag | 2U);
  #line 7061 
  if ((unsigned int)aspm_disable_flag != 0U) 
                                             #line 7062 
                                             e1000e_disable_aspm_locked(pdev,(unsigned short)((int)aspm_disable_flag));
  #line 7064 
  err = pci_enable_device_mem(pdev);
  #line 7065 
  if (err != 0) {
    #line 7066 
    _dev_err(& pdev->dev,(char *)"Cannot re-enable PCI device after reset.\n");
    #line 7068 
    result = 4U;
  }
  else {
    #line 7070 
    pdev->state_saved = (unsigned int)1U;
    #line 7071 
    pci_restore_state(pdev);
    #line 7072 
    pci_set_master(pdev);
    #line 7074 
    pci_enable_wake(pdev,3,(_Bool)0);
    #line 7075 
    pci_enable_wake(pdev,4,(_Bool)0);
    #line 7077 
    e1000e_reset(adapter);
    #line 7078 
    __ew32(hw,22544UL,4294967295U);
    #line 7079 
    result = 5U;
  }
  #line 7082 
  return result;
}

#line 7093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_io_resume(struct pci_dev *pdev)
{
  #line 7095 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 7096 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 7098 
  e1000_init_manageability_pt(adapter);
  #line 7100 
  e1000e_pm_thaw(& pdev->dev);
  #line 7106 
  if (((unsigned long)adapter->flags & 1UL) == 0UL) 
                                                    #line 7107 
                                                    e1000e_get_hw_control(adapter);
  #line 7108 
  return;
}

#line 7110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_print_device_info(struct e1000_adapter *adapter)
{
  #line 7114 
  u32 ret_val;
  #line 7115 
  u8 pba_str[11U];
  #line 7118 
  char *tmp;
  #line 7124 
  char *tmp_0;
  #line 7112 
  struct e1000_hw *hw = & adapter->hw;
  #line 7113 
  struct net_device *netdev = adapter->netdev;
  #line 7118 
  ;
  #line 7118 
  if (hw->bus.width == (unsigned int)e1000_bus_width_pcie_x4) 
                                                              #line 7118 
                                                              tmp = (char *)"Width x4"; else 
                                                                    #line 7118 
                                                                    tmp = (char *)"Width x1";
  #line 7118 
  ;
  #line 7118 
  netdev_info(adapter->netdev,(char *)"(PCI Express:2.5GT/s:%s) %pM\n",tmp,netdev->dev_addr);
  #line 7124 
  if (hw->phy.type == (unsigned int)e1000_phy_ife) 
                                                   #line 7124 
                                                   tmp_0 = (char *)"10/100"; else 
                                                                    #line 7124 
                                                                    tmp_0 = (char *)"1000";
  #line 7124 
  ;
  #line 7124 
  netdev_info(adapter->netdev,(char *)"Intel(R) PRO/%s Network Connection\n",tmp_0);
  #line 7126 
  ret_val = (unsigned int)e1000_read_pba_string_generic(hw,(u8 *)(& pba_str),11U);
  #line 7128 
  if (ret_val != 0U) 
                     #line 7129 
                     strlcpy((char *)(& pba_str),(char *)"Unknown",11UL);
  #line 7130 
  netdev_info(adapter->netdev,(char *)"MAC: %d, PHY: %d, PBA No: %s\n",(unsigned int)hw->mac.type,(unsigned int)hw->phy.type,(u8 *)(& pba_str));
  #line 7131 
  return;
}

#line 7134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_eeprom_checks(struct e1000_adapter *adapter)
{
  #line 7137 
  int ret_val;
  #line 7136 
  struct e1000_hw *hw = & adapter->hw;
  #line 7138 
  u16 buf = (unsigned short)0U;
  #line 7140 
  if (hw->mac.type != (unsigned int)e1000_82573) 
                                                 #line 7141 
                                                 return;
  #line 7143 
  ret_val = e1000_read_nvm(hw,(unsigned short)15,(unsigned short)1,& buf);
  #line 7144 
  u16 *tmp = & buf;
  #line 7145 
  if (ret_val == 0 && ((unsigned long)buf & 1UL) == 0UL) 
                                                         #line 7147 
                                                         _dev_warn(& (adapter->pdev)->dev,(char *)"Warning: detected DSPD enabled in EEPROM\n");
  #line 7148 
  return;
}

#line 7152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static netdev_features_t e1000_fix_features(struct net_device *netdev, netdev_features_t features)
{
  #line 7155 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 7156 
  struct e1000_hw *hw = & adapter->hw;
  #line 7159 
  if (hw->mac.type > (unsigned int)e1000_pchlan && netdev->mtu > 1500U) 
    #line 7160 
    features &= 18446739675663040511ULL;
  #line 7165 
  if ((features & 256ULL) != 0ULL) 
                                   #line 7166 
                                   features |= 128ULL; else 
                                                            #line 7168 
                                                            features &= 18446744073709551487ULL;
  #line 7170 
  return features;
}

#line 7173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_set_features(struct net_device *netdev, netdev_features_t features)
{
  #line 7176 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 7177 
  netdev_features_t changed = netdev->features ^ features;
  #line 7179 
  if ((changed & 1114112ULL) != 0ULL) 
                                      #line 7180 
                                      adapter->flags |= 536870912U;
  #line 7182 
  if ((changed & 14018773254528ULL) == 0ULL) 
                                             #line 7185 
                                             return 0;
  #line 7187 
  if ((changed & 4398046511104ULL) != 0ULL) 
    #line 7188 
    if ((features & 4398046511104ULL) != 0ULL) 
                                               #line 7189 
                                               adapter->flags2 &= 4294967294U;
    else 
      #line 7194 
      if (((unsigned long)adapter->flags2 & 4096UL) != 0UL) 
                                                            #line 7195 
                                                            adapter->flags2 |= 1U; else 
                                                                    #line 7197 
                                                                    adapter->flags2 &= 4294967294U;
  #line 7201 
  netdev->features = features;
  #line 7203 
  if ((int)netif_running(netdev) != 0) 
                                       #line 7204 
                                       e1000e_reinit_locked(adapter); else 
                                                                    #line 7206 
                                                                    e1000e_reset(adapter);
  #line 7208 
  return 1;
}

#line 7211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static struct net_device_ops e1000e_netdev_ops = {.ndo_open = & e1000e_open, .ndo_stop = & e1000e_close, .ndo_start_xmit = & e1000_xmit_frame, .ndo_features_check = & passthru_features_check, .ndo_set_rx_mode = & e1000e_set_rx_mode, .ndo_set_mac_address = & e1000_set_mac, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & e1000_ioctl, .ndo_change_mtu = & e1000_change_mtu, .ndo_tx_timeout = & e1000_tx_timeout, .ndo_get_stats64 = & e1000e_get_stats64, .ndo_vlan_rx_add_vid = & e1000_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & e1000_vlan_rx_kill_vid, .ndo_poll_controller = & e1000_netpoll, .ndo_fix_features = & e1000_fix_features, .ndo_set_features = & e1000_set_features};
#line 7244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 7246 
  struct net_device *netdev;
  #line 7247 
  struct e1000_adapter *adapter;
  #line 7248 
  struct e1000_hw *hw;
  #line 7250 
  resource_size_t mmio_start;
  #line 7250 
  resource_size_t mmio_len;
  #line 7251 
  resource_size_t flash_start;
  #line 7251 
  resource_size_t flash_len;
  #line 7252 
  int cards_found;
  #line 7254 
  int bars;
  #line 7254 
  int i;
  #line 7254 
  int err;
  #line 7254 
  int pci_using_dac;
  #line 7353 
  int tmp_1;
  #line 7249 
  struct e1000_info *ei = e1000_info_tbl[ent->driver_data];
  #line 7253 
  u16 aspm_disable_flag = (unsigned short)0U;
  #line 7255 
  u16 eeprom_data = (unsigned short)0U;
  #line 7256 
  u16 eeprom_apme_mask = (unsigned short)1024U;
  #line 7257 
  s32 ret_val = 0;
  #line 7259 
  if (((unsigned long)ei->flags2 & 128UL) != 0UL) 
                                                  #line 7260 
                                                  aspm_disable_flag = (unsigned short)1U;
  #line 7261 
  if (((unsigned long)ei->flags2 & 8UL) != 0UL) 
                                                #line 7262 
                                                aspm_disable_flag = (unsigned short)((unsigned int)aspm_disable_flag | 2U);
  #line 7263 
  if ((unsigned int)aspm_disable_flag != 0U) 
                                             #line 7264 
                                             e1000e_disable_aspm(pdev,(unsigned short)((int)aspm_disable_flag));
  #line 7266 
  err = pci_enable_device_mem(pdev);
  #line 7267 
  if (err != 0) 
                #line 7268 
                return err;
  #line 7270 
  pci_using_dac = 0;
  #line 7271 
  err = dma_set_mask_and_coherent(& pdev->dev,18446744073709551615ULL);
  #line 7272 
  if (err == 0) 
                #line 7273 
                pci_using_dac = 1;
  else {
    #line 7275 
    err = dma_set_mask_and_coherent(& pdev->dev,4294967295ULL);
    #line 7276 
    if (err != 0) {
      #line 7277 
      _dev_err(& pdev->dev,(char *)"No usable DMA configuration, aborting\n");
      #line 7279 
      goto err_dma;
    }
  }
  #line 7283 
  bars = pci_select_bars(pdev,512UL);
  #line 7284 
  err = pci_request_selected_regions_exclusive(pdev,bars,(char *)(& e1000e_driver_name));
  #line 7286 
  if (err != 0) 
                #line 7287 
                goto err_pci_reg;
  #line 7290 
  pci_enable_pcie_error_reporting(pdev);
  #line 7292 
  pci_set_master(pdev);
  #line 7294 
  err = pci_save_state(pdev);
  #line 7295 
  if (err != 0) 
                #line 7296 
                goto err_alloc_etherdev;
  #line 7298 
  err = -12;
  #line 7299 
  netdev = cif_alloc_etherdev_mqs(13312,1U,1U);
  #line 7300 
  if (netdev == (struct net_device *)0) 
                                        #line 7301 
                                        goto err_alloc_etherdev;
  #line 7303 
  netdev->dev.parent = & pdev->dev;
  #line 7305 
  netdev->irq = (int)pdev->irq;
  #line 7307 
  pci_set_drvdata(pdev,(void *)netdev);
  #line 7308 
  adapter = (struct e1000_adapter *)netdev_priv(netdev);
  #line 7309 
  hw = & adapter->hw;
  #line 7310 
  adapter->netdev = netdev;
  #line 7311 
  adapter->pdev = pdev;
  #line 7312 
  adapter->ei = ei;
  #line 7313 
  adapter->pba = ei->pba;
  #line 7314 
  adapter->flags = ei->flags;
  #line 7315 
  adapter->flags2 = ei->flags2;
  #line 7316 
  adapter->hw.adapter = adapter;
  #line 7317 
  adapter->hw.mac.type = ei->mac;
  #line 7318 
  adapter->max_hw_frame_size = ei->max_hw_frame_size;
  #line 7319 
  adapter->msg_enable = netif_msg_init(debug,7);
  #line 7321 
  mmio_start = pdev->resource[0].start;
  #line 7322 
  if (pdev->resource[0].start != 0ULL || pdev->resource[0].end != pdev->resource[0].start) 
    #line 7322 
    mmio_len = (pdev->resource[0].end - pdev->resource[0].start) + 1ULL; else 
                                                                    #line 7322 
                                                                    mmio_len = 0ULL;
  #line 7324 
  err = -5;
  #line 7325 
  adapter->hw.hw_addr = ioremap(mmio_start,(unsigned long)mmio_len);
  #line 7326 
  if (adapter->hw.hw_addr == (void *)0) 
                                        #line 7327 
                                        goto err_ioremap;
  #line 7329 
  if ((((unsigned long)adapter->flags & 2UL) != 0UL && (pdev->resource[1].flags & 512UL) != 0UL) && hw->mac.type <= (unsigned int)e1000_pch_lpt) {
    #line 7332 
    flash_start = pdev->resource[1].start;
    #line 7333 
    if (pdev->resource[1].start != 0ULL || pdev->resource[1].end != pdev->resource[1].start) 
      #line 7333 
      flash_len = (pdev->resource[1].end - pdev->resource[1].start) + 1ULL; else 
                                                                    #line 7333 
                                                                    flash_len = 0ULL;
    #line 7334 
    adapter->hw.flash_address = ioremap(flash_start,(unsigned long)flash_len);
    #line 7335 
    if (adapter->hw.flash_address == (void *)0) 
                                                #line 7336 
                                                goto err_flashmap;
  }
  #line 7340 
  if (((unsigned long)adapter->flags2 & 32UL) != 0UL) 
                                                      #line 7341 
                                                      adapter->eee_advert = (unsigned short)6U;
  #line 7344 
  netdev->netdev_ops = & e1000e_netdev_ops;
  #line 7345 
  e1000e_set_ethtool_ops(netdev);
  #line 7346 
  netdev->watchdog_timeo = 1250;
  #line 7347 
  netif_napi_add(netdev,& adapter->napi,& e1000e_poll,64);
  #line 7348 
  ;
  #line 7348 
  strlcpy((char *)(& netdev->name),pci_name(pdev),16UL);
  #line 7350 
  netdev->mem_start = (unsigned long)mmio_start;
  #line 7351 
  netdev->mem_end = (unsigned long)(mmio_start + mmio_len);
  #line 7353 
  tmp_1 = cards_found;
  #line 7353 
  cards_found ++;
  #line 7353 
  adapter->bd_number = (unsigned int)tmp_1;
  #line 7355 
  e1000e_check_options(adapter);
  #line 7358 
  err = e1000_sw_init(adapter);
  #line 7359 
  if (err != 0) 
                #line 7360 
                goto err_sw_init;
  #line 7362 
  memcpy((void *)(& hw->mac.ops),(void *)ei->mac_ops,184UL);
  #line 7363 
  memcpy((void *)(& hw->nvm.ops),(void *)ei->nvm_ops,64UL);
  #line 7364 
  memcpy((void *)(& hw->phy.ops),(void *)ei->phy_ops,176UL);
  #line 7366 
  err = (*(ei->get_variants))(adapter);
  #line 7367 
  if (err != 0) 
                #line 7368 
                goto err_hw_init;
  #line 7370 
  if ((((unsigned long)adapter->flags & 512UL) != 0UL && ((unsigned long)adapter->flags & 256UL) != 0UL) && hw->mac.type <= (unsigned int)e1000_pch_lpt) 
    #line 7373 
    e1000e_write_protect_nvm_ich8lan(& adapter->hw);
  #line 7375 
  (*(hw->mac.ops.get_bus_info))(& adapter->hw);
  #line 7377 
  adapter->hw.phy.autoneg_wait_to_complete = (_Bool)0;
  #line 7380 
  if (adapter->hw.phy.media_type == (unsigned int)e1000_media_type_copper) {
    #line 7381 
    adapter->hw.phy.mdix = (unsigned char)0U;
    #line 7382 
    adapter->hw.phy.disable_polarity_correction = (_Bool)0;
    #line 7383 
    adapter->hw.phy.ms_type = e1000_ms_hw_default;
  }
  #line 7386 
  if (hw->phy.ops.check_reset_block != (s32 (*)(struct e1000_hw *))0) {
    #line 7386 
    if ((*(hw->phy.ops.check_reset_block))(hw) != 0) 
                                                     #line 7387 
                                                     _dev_info(& pdev->dev,(char *)"PHY reset is blocked due to SOL/IDER session.\n");
  }
  #line 7391 
  netdev->features = 824634835337ULL;
  #line 7401 
  netdev->hw_features = netdev->features;
  #line 7402 
  netdev->hw_features |= 4398046511104ULL;
  #line 7403 
  netdev->priv_flags |= 16384U;
  #line 7404 
  netdev->hw_features |= 8796093022208ULL;
  #line 7406 
  if (((unsigned long)adapter->flags & 4UL) != 0UL) 
                                                    #line 7407 
                                                    netdev->features |= 512ULL;
  #line 7409 
  netdev->vlan_features |= 1114121ULL;
  #line 7414 
  netdev->priv_flags |= 4096U;
  #line 7416 
  if (pci_using_dac != 0) {
    #line 7417 
    netdev->features |= 32ULL;
    #line 7418 
    netdev->vlan_features |= 32ULL;
  }
  #line 7422 
  netdev->min_mtu = 68U;
  #line 7423 
  netdev->max_mtu = adapter->max_hw_frame_size + 4294967274U;
  #line 7426 
  if ((int)e1000e_enable_mng_pass_thru(& adapter->hw) != 0) 
                                                            #line 7427 
                                                            adapter->flags |= 1048576U;
  #line 7432 
  (*(adapter->hw.mac.ops.reset_hw))(& adapter->hw);
  #line 7437 
  i = 0;
  #line 7437 
  while (1) {
    {
      #line 7438 
      if (e1000_validate_nvm_checksum(& adapter->hw) >= 0) 
                                                           #line 7439 
                                                           break;
      #line 7440 
      if (i == 2) {
        #line 7441 
        _dev_err(& pdev->dev,(char *)"The NVM Checksum Is Not Valid\n");
        #line 7442 
        err = -5;
        #line 7443 
        goto err_eeprom;
      }
    }
    #line 7437 
    i ++;
  }
  #line 7447 
  e1000_eeprom_checks(adapter);
  #line 7450 
  if (e1000e_read_mac_addr(& adapter->hw) != 0) 
                                                #line 7451 
                                                _dev_err(& pdev->dev,(char *)"NVM Read Error while reading MAC address\n");
  #line 7454 
  memcpy((void *)netdev->dev_addr,(void *)(& adapter->hw.mac.addr),(unsigned long)netdev->addr_len);
  #line 7456 
  if (! is_valid_ether_addr(netdev->dev_addr)) {
    #line 7457 
    _dev_err(& pdev->dev,(char *)"Invalid MAC Address: %pM\n",netdev->dev_addr);
    #line 7459 
    err = -5;
    #line 7460 
    goto err_eeprom;
  }
  {
    #line 7463 
    struct lock_class_key __key;
    #line 7463 
    init_timer_key(& adapter->watchdog_timer,& e1000_watchdog,0U,(char *)"(&adapter->watchdog_timer)",& __key);
  }
  {
    #line 7464 
    struct lock_class_key __key_0;
    #line 7464 
    init_timer_key(& adapter->phy_info_timer,& e1000_update_phy_info,0U,(char *)"(&adapter->phy_info_timer)",& __key_0);
  }
  {
    #line 7466 
    struct lock_class_key __key_1;
    #line 7466 
    __init_work(& adapter->reset_task,0);
    #line 7466 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 7466 
    adapter->reset_task.data = __constr_expr_45;
    #line 7466 
    lockdep_init_map(& adapter->reset_task.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 7466 
    INIT_LIST_HEAD(& adapter->reset_task.entry);
    #line 7466 
    adapter->reset_task.func = & e1000_reset_task;
  }
  {
    #line 7467 
    struct lock_class_key __key_2;
    #line 7467 
    __init_work(& adapter->watchdog_task,0);
    #line 7467 
    atomic_long_t __constr_expr_46 = {.counter = 137438953408LL};
    #line 7467 
    adapter->watchdog_task.data = __constr_expr_46;
    #line 7467 
    lockdep_init_map(& adapter->watchdog_task.lockdep_map,(char *)"(work_completion)",& __key_2,0);
    #line 7467 
    INIT_LIST_HEAD(& adapter->watchdog_task.entry);
    #line 7467 
    adapter->watchdog_task.func = & e1000_watchdog_task;
  }
  {
    #line 7468 
    struct lock_class_key __key_3;
    #line 7468 
    __init_work(& adapter->downshift_task,0);
    #line 7468 
    atomic_long_t __constr_expr_47 = {.counter = 137438953408LL};
    #line 7468 
    adapter->downshift_task.data = __constr_expr_47;
    #line 7468 
    lockdep_init_map(& adapter->downshift_task.lockdep_map,(char *)"(work_completion)",& __key_3,0);
    #line 7468 
    INIT_LIST_HEAD(& adapter->downshift_task.entry);
    #line 7468 
    adapter->downshift_task.func = & e1000e_downshift_workaround;
  }
  {
    #line 7469 
    struct lock_class_key __key_4;
    #line 7469 
    __init_work(& adapter->update_phy_task,0);
    #line 7469 
    atomic_long_t __constr_expr_48 = {.counter = 137438953408LL};
    #line 7469 
    adapter->update_phy_task.data = __constr_expr_48;
    #line 7469 
    lockdep_init_map(& adapter->update_phy_task.lockdep_map,(char *)"(work_completion)",& __key_4,0);
    #line 7469 
    INIT_LIST_HEAD(& adapter->update_phy_task.entry);
    #line 7469 
    adapter->update_phy_task.func = & e1000e_update_phy_task;
  }
  {
    #line 7470 
    struct lock_class_key __key_5;
    #line 7470 
    __init_work(& adapter->print_hang_task,0);
    #line 7470 
    atomic_long_t __constr_expr_49 = {.counter = 137438953408LL};
    #line 7470 
    adapter->print_hang_task.data = __constr_expr_49;
    #line 7470 
    lockdep_init_map(& adapter->print_hang_task.lockdep_map,(char *)"(work_completion)",& __key_5,0);
    #line 7470 
    INIT_LIST_HEAD(& adapter->print_hang_task.entry);
    #line 7470 
    adapter->print_hang_task.func = & e1000_print_hw_hang;
  }
  #line 7473 
  adapter->hw.mac.autoneg = (_Bool)1;
  #line 7474 
  adapter->fc_autoneg = (_Bool)1;
  #line 7475 
  adapter->hw.fc.requested_mode = e1000_fc_default;
  #line 7476 
  adapter->hw.fc.current_mode = e1000_fc_default;
  #line 7477 
  adapter->hw.phy.autoneg_advertised = (unsigned short)47U;
  #line 7482 
  if (((unsigned long)adapter->flags & 32768UL) != 0UL) {
    #line 7484 
    eeprom_data = (unsigned short)__er32(hw,22528UL);
    #line 7485 
    eeprom_apme_mask = (unsigned short)1U;
    #line 7486 
    if (hw->mac.type > (unsigned int)e1000_ich10lan && ((int)eeprom_data & 256) != 0) 
      #line 7488 
      adapter->flags2 |= 2U;
  }
  else 
    #line 7489 
    if (((unsigned long)adapter->flags & 65536UL) != 0UL) 
      #line 7490 
      if (((unsigned long)adapter->flags & 131072UL) != 0UL && (unsigned int)adapter->hw.bus.func == 1U) 
        #line 7492 
        ret_val = e1000_read_nvm(& adapter->hw,(unsigned short)20,(unsigned short)1,& eeprom_data); else 
                                                                    #line 7496 
                                                                    ret_val = e1000_read_nvm(& adapter->hw,(unsigned short)36,(unsigned short)1,& eeprom_data);
  #line 7502 
  if (ret_val != 0) {
    #line 7503 
    bool branch;
    #line 7503 
    struct _ddebug __UNIQUE_ID_ddebug570 = {.modname = (char *)"e1000e", .function = (char *)"e1000_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c", .format = (char *)"NVM read error getting WoL initial values: %d\n", .lineno = (unsigned int)7503U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 7503 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug570.key.dd_key_false.key,(_Bool)0);
    #line 7503 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 7503 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug570,(hw->adapter)->netdev,(char *)"NVM read error getting WoL initial values: %d\n",ret_val);
  }
  else 
    #line 7504 
    if ((unsigned int)((int)eeprom_data & (int)eeprom_apme_mask) != 0U) 
      #line 7505 
      adapter->eeprom_wol |= 2U;
  #line 7511 
  if (((unsigned long)adapter->flags & 8UL) == 0UL) 
                                                    #line 7512 
                                                    adapter->eeprom_wol = 0U;
  #line 7515 
  adapter->wol = adapter->eeprom_wol;
  #line 7518 
  if (adapter->wol != 0U || ((unsigned long)adapter->flags & 1048576UL) != 0UL) 
    #line 7520 
    device_wakeup_enable(& pdev->dev);
  else {
    #line 7518 
    if ((int)(*(hw->mac.ops.check_mng_mode))(hw) != 0) 
                                                       #line 7520 
                                                       device_wakeup_enable(& pdev->dev);
  }
  #line 7523 
  ret_val = e1000_read_nvm(& adapter->hw,(unsigned short)5,(unsigned short)1,& adapter->eeprom_vers);
  #line 7525 
  if (ret_val != 0) {
    {
      #line 7526 
      bool branch_0;
      #line 7526 
      struct _ddebug __UNIQUE_ID_ddebug571 = {.modname = (char *)"e1000e", .function = (char *)"e1000_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c", .format = (char *)"NVM read error getting EEPROM version: %d\n", .lineno = (unsigned int)7526U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 7526 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug571.key.dd_key_false.key,(_Bool)0);
      #line 7526 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 7526 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug571,(hw->adapter)->netdev,(char *)"NVM read error getting EEPROM version: %d\n",ret_val);
    }
    #line 7527 
    adapter->eeprom_vers = (unsigned short)0U;
  }
  #line 7531 
  e1000e_ptp_init(adapter);
  #line 7534 
  e1000e_reset(adapter);
  #line 7540 
  if (((unsigned long)adapter->flags & 1UL) == 0UL) 
                                                    #line 7541 
                                                    e1000e_get_hw_control(adapter);
  #line 7543 
  strlcpy((char *)(& netdev->name),(char *)"eth%d",16UL);
  #line 7544 
  err = cif_register_netdev(netdev);
  #line 7545 
  if (err != 0) 
                #line 7546 
                goto err_register;
  #line 7549 
  netif_carrier_off(netdev);
  #line 7551 
  e1000_print_device_info(adapter);
  #line 7553 
  dev_pm_set_driver_flags(& pdev->dev,1U);
  #line 7555 
  if ((int)pci_dev_run_wake(pdev) != 0) 
    #line 7555 
    if (hw->mac.type <= (unsigned int)e1000_pch_spt) 
                                                     #line 7556 
                                                     pm_runtime_put_noidle(& pdev->dev);
  #line 7558 
  return 0;
  #line 7560 
  err_register: 
                #line 7560 
  ;
  #line 7561 
  if (((unsigned long)adapter->flags & 1UL) == 0UL) 
                                                    #line 7562 
                                                    e1000e_release_hw_control(adapter);
  #line 7563 
  err_eeprom: 
              #line 7563 
  ;
  #line 7564 
  if (hw->phy.ops.check_reset_block != (s32 (*)(struct e1000_hw *))0) {
    #line 7564 
    if ((*(hw->phy.ops.check_reset_block))(hw) == 0) 
                                                     #line 7565 
                                                     e1000_phy_hw_reset(& adapter->hw);
  }
  #line 7566 
  err_hw_init: 
               #line 7566 
  ;
  #line 7567 
  kfree((void *)adapter->tx_ring);
  #line 7568 
  kfree((void *)adapter->rx_ring);
  #line 7569 
  err_sw_init: 
               #line 7569 
  ;
  #line 7570 
  if (adapter->hw.flash_address != (void *)0 && hw->mac.type <= (unsigned int)e1000_pch_lpt) 
    #line 7571 
    iounmap(adapter->hw.flash_address);
  #line 7572 
  e1000e_reset_interrupt_capability(adapter);
  #line 7573 
  err_flashmap: 
                #line 7573 
  ;
  #line 7574 
  iounmap(adapter->hw.hw_addr);
  #line 7575 
  err_ioremap: 
               #line 7575 
  ;
  #line 7576 
  cif_free_netdev(netdev);
  #line 7577 
  err_alloc_etherdev: 
                      #line 7577 
  ;
  #line 7578 
  pci_release_mem_regions(pdev);
  #line 7579 
  err_pci_reg: 
               #line 7579 
  ;
  #line 7580 
  err_dma: 
           #line 7580 
  ;
  #line 7581 
  pci_disable_device(pdev);
  #line 7582 
  return err;
}

#line 7594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_remove(struct pci_dev *pdev)
{
  #line 7596 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 7597 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 7599 
  e1000e_ptp_remove(adapter);
  #line 7604 
  cif_set_bit(3L,& adapter->state);
  #line 7605 
  cif_del_timer_sync(& adapter->watchdog_timer);
  #line 7606 
  cif_del_timer_sync(& adapter->phy_info_timer);
  #line 7608 
  cancel_work_sync(& adapter->reset_task);
  #line 7609 
  cancel_work_sync(& adapter->watchdog_task);
  #line 7610 
  cancel_work_sync(& adapter->downshift_task);
  #line 7611 
  cancel_work_sync(& adapter->update_phy_task);
  #line 7612 
  cancel_work_sync(& adapter->print_hang_task);
  #line 7614 
  if (((unsigned long)adapter->flags & 16384UL) != 0UL) {
    #line 7615 
    cancel_work_sync(& adapter->tx_hwtstamp_work);
    #line 7616 
    if (adapter->tx_hwtstamp_skb != (struct sk_buff *)0) {
      #line 7617 
      dev_consume_skb_any(adapter->tx_hwtstamp_skb);
      #line 7618 
      adapter->tx_hwtstamp_skb = (struct sk_buff *)0;
    }
  }
  #line 7622 
  cif_unregister_netdev(netdev);
  #line 7624 
  if ((int)pci_dev_run_wake(pdev) != 0) 
                                        #line 7625 
                                        pm_runtime_get_noresume(& pdev->dev);
  #line 7630 
  e1000e_release_hw_control(adapter);
  #line 7632 
  e1000e_reset_interrupt_capability(adapter);
  #line 7633 
  kfree((void *)adapter->tx_ring);
  #line 7634 
  kfree((void *)adapter->rx_ring);
  #line 7636 
  iounmap(adapter->hw.hw_addr);
  #line 7637 
  if (adapter->hw.flash_address != (void *)0 && adapter->hw.mac.type <= (unsigned int)e1000_pch_lpt) 
    #line 7639 
    iounmap(adapter->hw.flash_address);
  #line 7640 
  pci_release_mem_regions(pdev);
  #line 7642 
  cif_free_netdev(netdev);
  #line 7645 
  pci_disable_pcie_error_reporting(pdev);
  #line 7647 
  pci_disable_device(pdev);
  #line 7648 
  return;
}

#line 7651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static struct pci_error_handlers e1000_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& e1000_io_error_detected), .slot_reset = & e1000_io_slot_reset, .resume = & e1000_io_resume};
#line 7657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static struct pci_device_id e1000_pci_tbl[89U] = {{.vendor = 32902U, .device = 4190U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4191U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4260U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4284U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4261U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4192U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4313U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4314U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4309U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 32902U, .device = 4281U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}, {.vendor = 32902U, .device = 4221U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}, {.vendor = 32902U, .device = 4222U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}, {.vendor = 32902U, .device = 4223U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}, {.vendor = 32902U, .device = 4235U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 2UL}, {.vendor = 32902U, .device = 4236U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 2UL}, {.vendor = 32902U, .device = 4250U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 2UL}, {.vendor = 32902U, .device = 4307U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 3UL}, {.vendor = 32902U, .device = 4342U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 3UL}, {.vendor = 32902U, .device = 5388U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 4UL}, {.vendor = 32902U, .device = 4246U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 5UL}, {.vendor = 32902U, .device = 4282U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 5UL}, {.vendor = 32902U, .device = 4248U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 5UL}, {.vendor = 32902U, .device = 4283U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 5UL}, {.vendor = 32902U, .device = 4172U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}, {.vendor = 32902U, .device = 4293U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}, {.vendor = 32902U, .device = 4292U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}, {.vendor = 32902U, .device = 4170U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}, {.vendor = 32902U, .device = 4171U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}, {.vendor = 32902U, .device = 4173U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}, {.vendor = 32902U, .device = 4169U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}, {.vendor = 32902U, .device = 5377U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}, {.vendor = 32902U, .device = 4288U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4290U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4291U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4285U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 7UL}, {.vendor = 32902U, .device = 10572U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4325U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4287U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4341U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4299U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4300U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4301U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4302U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4318U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 8UL}, {.vendor = 32902U, .device = 4319U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 8UL}, {.vendor = 32902U, .device = 5413U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 8UL}, {.vendor = 32902U, .device = 4330U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 9UL}, {.vendor = 32902U, .device = 4331U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 9UL}, {.vendor = 32902U, .device = 4335U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 9UL}, {.vendor = 32902U, .device = 4336U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 9UL}, {.vendor = 32902U, .device = 5378U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 10UL}, {.vendor = 32902U, .device = 5379U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 10UL}, {.vendor = 32902U, .device = 5434U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5435U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5466U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5465U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5536U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5537U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5538U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5539U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5487U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 12UL}, {.vendor = 32902U, .device = 5488U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 12UL}, {.vendor = 32902U, .device = 5559U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 12UL}, {.vendor = 32902U, .device = 5560U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 12UL}, {.vendor = 32902U, .device = 5561U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 12UL}, {.vendor = 32902U, .device = 5591U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 12UL}, {.vendor = 32902U, .device = 5592U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 12UL}, {.vendor = 32902U, .device = 5603U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 12UL}, {.vendor = 32902U, .device = 5590U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 12UL}, {.vendor = 32902U, .device = 5565U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 5566U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 5563U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 5564U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 5599U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 5600U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 5601U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 5602U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 3406U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 3407U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 3404U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 3405U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 3411U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 12UL}, {.vendor = 32902U, .device = 3413U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 12UL}, {.vendor = 32902U, .device = 5627U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 5628U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 5625U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 5626U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}, {.vendor = 32902U, .device = 5620U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 13UL}};
#line 7765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
struct pci_device_id __mod_pci__e1000_pci_tbl_device_table[89U];
#line 7767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static struct dev_pm_ops e1000_pm_ops = {.suspend = & e1000e_pm_suspend, .resume = & e1000e_pm_resume, .freeze = & e1000e_pm_freeze, .thaw = & e1000e_pm_thaw, .poweroff = & e1000e_pm_suspend, .restore = & e1000e_pm_resume, .runtime_suspend = & e1000e_pm_runtime_suspend, .runtime_resume = & e1000e_pm_runtime_resume, .runtime_idle = & e1000e_pm_runtime_idle};
#line 7781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static struct pci_driver e1000_driver = {.name = (char *)(& e1000e_driver_name), .id_table = (struct pci_device_id *)(& e1000_pci_tbl), .probe = & e1000_probe, .remove = & e1000_remove, .shutdown = & e1000_shutdown, .err_handler = & e1000_err_handler, .driver = {.pm = & e1000_pm_ops}};
#line 7799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_init_module(void)
{
  #line 7801 
  printk((char *)"\001",(char *)(& e1000e_driver_version));
  #line 7803 
  printk((char *)"\001");
  #line 7805 
  return cif___pci_register_driver(& e1000_driver,& __this_module,
                                (char *)"e1000e");
}

#line 7815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_exit_module(void)
{
  #line 7817 
  cif_pci_unregister_driver(& e1000_driver);
  #line 7818 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
struct pci_driver *emg_alias_e1000_driver = & e1000_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
struct pci_device_id (*emg_alias_e1000_pci_tbl)[89U] = & e1000_pci_tbl;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
struct dev_pm_ops *emg_alias_e1000_pm_ops = & e1000_pm_ops;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 99 
#line 99 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 100 
#line 100 
int emg_del_timer_sync(struct timer_list *arg0);
#line 101 
#line 101 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 102 
#line 102 
void emg_free_netdev(struct net_device *arg0);
#line 103 
#line 103 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 104 
#line 104 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 105 
#line 105 
_Bool emg_pm_runtime_suspended(struct device *arg0);
#line 106 
#line 106 
int emg_register_netdev(struct net_device *arg0);
#line 107 
#line 107 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 109 
#line 109 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 110 
#line 110 
void emg_unregister_netdev(struct net_device *arg0);
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
void emg_e1000_exit_module(void)
{
  #line 115 
  e1000_exit_module();
  #line 116 
  return;
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
int emg_e1000_init_module(void)
{
  #line 119 
  return e1000_init_module();
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
int emg_wrapper_e1000_change_mtu(struct net_device *arg0, int arg1)
{
  #line 123 
  return e1000_change_mtu(arg0,arg1);
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
unsigned long long emg_wrapper_e1000_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 128 
  return e1000_fix_features(arg0,arg1);
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
enum irqreturn emg_wrapper_e1000_intr(int arg0, void *arg1)
{
  #line 133 
  return e1000_intr(arg0,arg1);
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
enum irqreturn emg_wrapper_e1000_intr_msi(int arg0, void *arg1)
{
  #line 138 
  return e1000_intr_msi(arg0,arg1);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
enum irqreturn emg_wrapper_e1000_intr_msi_test(int arg0, void *arg1)
{
  #line 143 
  return e1000_intr_msi_test(arg0,arg1);
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
enum irqreturn emg_wrapper_e1000_intr_msix_rx(int arg0, void *arg1)
{
  #line 148 
  return e1000_intr_msix_rx(arg0,arg1);
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
enum irqreturn emg_wrapper_e1000_intr_msix_tx(int arg0, void *arg1)
{
  #line 153 
  return e1000_intr_msix_tx(arg0,arg1);
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
int emg_wrapper_e1000_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 158 
  return e1000_ioctl(arg0,arg1,arg2);
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
enum irqreturn emg_wrapper_e1000_msix_other(int arg0, void *arg1)
{
  #line 163 
  return e1000_msix_other(arg0,arg1);
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
void emg_wrapper_e1000_netpoll(struct net_device *arg0)
{
  #line 168 
  e1000_netpoll(arg0);
  #line 169 
  return;
}

#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
int emg_wrapper_e1000_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 173 
  return e1000_probe(arg0,arg1);
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
void emg_wrapper_e1000_remove(struct pci_dev *arg0)
{
  #line 178 
  e1000_remove(arg0);
  #line 179 
  return;
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
int emg_wrapper_e1000_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 183 
  return e1000_set_features(arg0,arg1);
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
int emg_wrapper_e1000_set_mac(struct net_device *arg0, void *arg1)
{
  #line 188 
  return e1000_set_mac(arg0,arg1);
}

#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
void emg_wrapper_e1000_shutdown(struct pci_dev *arg0)
{
  #line 193 
  e1000_shutdown(arg0);
  #line 194 
  return;
}

#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
void emg_wrapper_e1000_tx_timeout(struct net_device *arg0)
{
  #line 198 
  e1000_tx_timeout(arg0);
  #line 199 
  return;
}

#line 202  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
int emg_wrapper_e1000_vlan_rx_add_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 203 
  return e1000_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),
                            (unsigned short)((int)arg2));
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
int emg_wrapper_e1000_vlan_rx_kill_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 208 
  return e1000_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),
                             (unsigned short)((int)arg2));
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
enum netdev_tx emg_wrapper_e1000_xmit_frame(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 213 
  return e1000_xmit_frame(arg0,arg1);
}

#line 217  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
int emg_wrapper_e1000e_pm_freeze(struct device *arg0)
{
  #line 218 
  return e1000e_pm_freeze(arg0);
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
int emg_wrapper_e1000e_pm_resume(struct device *arg0)
{
  #line 223 
  return e1000e_pm_resume(arg0);
}

#line 227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
int emg_wrapper_e1000e_pm_runtime_idle(struct device *arg0)
{
  #line 228 
  return e1000e_pm_runtime_idle(arg0);
}

#line 232  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
int emg_wrapper_e1000e_pm_runtime_resume(struct device *arg0)
{
  #line 233 
  return e1000e_pm_runtime_resume(arg0);
}

#line 237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
int emg_wrapper_e1000e_pm_runtime_suspend(struct device *arg0)
{
  #line 238 
  return e1000e_pm_runtime_suspend(arg0);
}

#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
int emg_wrapper_e1000e_pm_suspend(struct device *arg0)
{
  #line 243 
  return e1000e_pm_suspend(arg0);
}

#line 247  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
int emg_wrapper_e1000e_pm_thaw(struct device *arg0)
{
  #line 248 
  return e1000e_pm_thaw(arg0);
}

#line 252  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
void emg_wrapper_e1000e_set_rx_mode(struct net_device *arg0)
{
  #line 253 
  e1000e_set_rx_mode(arg0);
  #line 254 
  return;
}

#line 265  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 268 
  return ldv_find_next_bit(addr,size,offset);
}

#line 272  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 275 
  ldv_set_bit(nr,addr);
  #line 276 
  return;
}

#line 279  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 282 
  ldv_clear_bit(nr,addr);
  #line 283 
  return;
}

#line 286  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 289 
  ldv_init_list_head(list);
  #line 290 
  return;
}

#line 300  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static size_t cif_strlen(char *s)
{
  #line 303 
  return ldv_strlen(s);
}

#line 307  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 310 
  return ldv_find_first_bit(addr,size);
}

#line 335  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 338 
  ldv_atomic_inc(v);
  #line 339 
  return;
}

#line 608  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 611 
  return ldv_kcalloc(n,size,flags);
}

#line 629  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 632 
  return ldv_kzalloc(size,flags);
}

#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 840 
  return emg_schedule_work(work);
}

#line 958  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif___ldv_spin_lock_systim_lock_of_e1000_adapter(spinlock_t *lock)
{
  #line 961 
  ldv_spin_model_lock((char *)"systim_lock_of_e1000_adapter");
  #line 963 
  __ldv_spin_lock(lock);
  #line 964 
  return;
}

#line 967  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_spin_unlock_irqrestore_systim_lock_of_e1000_adapter(spinlock_t *lock, unsigned long flags)
{
  #line 970 
  ldv_spin_model_unlock((char *)"systim_lock_of_e1000_adapter");
  #line 972 
  spin_unlock_irqrestore(lock,flags);
  #line 973 
  return;
}

#line 976  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 980 
  return emg_mod_timer(timer,expires);
}

#line 984  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 988 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 992  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 996 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 1000  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void *cif_vzalloc(unsigned long size)
{
  #line 1003 
  return ldv_vzalloc(size);
}

#line 1007  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_vfree(void *addr)
{
  #line 1010 
  ldv_vfree(addr);
  #line 1011 
  return;
}

#line 1014  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static bool cif_pm_runtime_suspended(struct device *dev)
{
  #line 1018 
  return emg_pm_runtime_suspended(dev);
}

#line 1022  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 1026 
  return emg_del_timer_sync(timer);
}

#line 1030  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_spin_lock_stats64_lock_of_e1000_adapter(spinlock_t *lock)
{
  #line 1033 
  ldv_spin_model_lock((char *)"stats64_lock_of_e1000_adapter");
  #line 1035 
  spin_lock(lock);
  #line 1036 
  return;
}

#line 1039  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_spin_unlock_stats64_lock_of_e1000_adapter(spinlock_t *lock)
{
  #line 1042 
  ldv_spin_model_unlock((char *)"stats64_lock_of_e1000_adapter");
  #line 1044 
  spin_unlock(lock);
  #line 1045 
  return;
}

#line 1048  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 1052 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 1056  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1060 
  return emg_register_netdev(dev);
}

#line 1064  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 1068 
  emg_free_netdev(dev);
  #line 1069 
  return;
}

#line 1072  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1076 
  emg_unregister_netdev(dev);
  #line 1077 
  return;
}

#line 1080  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1084 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1088  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/netdev.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1092 
  emg_pci_unregister_driver(dev);
  #line 1093 
  return;
}

#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
static void e1000_raise_eec_clk(struct e1000_hw *hw, u32 *eecd)
{
  #line 15 
  *eecd |= 1U;
  #line 16 
  __ew32(hw,16UL,*eecd);
  #line 17 
  __er32(hw,8UL);
  #line 18 
  if (0 != 0) 
    #line 18 
    if ((unsigned int)hw->nvm.delay_usec > 19999U) 
                                                   #line 18 
                                                   __bad_udelay(); else 
                                                                    #line 18 
                                                                    __const_udelay((unsigned long)hw->nvm.delay_usec * 4295UL);
  else 
       #line 18 
       __udelay((unsigned long)hw->nvm.delay_usec);
  #line 20 
  return;
}

#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
static void e1000_lower_eec_clk(struct e1000_hw *hw, u32 *eecd)
{
  #line 30 
  *eecd &= 4294967294U;
  #line 31 
  __ew32(hw,16UL,*eecd);
  #line 32 
  __er32(hw,8UL);
  #line 33 
  if (0 != 0) 
    #line 33 
    if ((unsigned int)hw->nvm.delay_usec > 19999U) 
                                                   #line 33 
                                                   __bad_udelay(); else 
                                                                    #line 33 
                                                                    __const_udelay((unsigned long)hw->nvm.delay_usec * 4295UL);
  else 
       #line 33 
       __udelay((unsigned long)hw->nvm.delay_usec);
  #line 35 
  return;
}

#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
static void e1000_shift_out_eec_bits(struct e1000_hw *hw, u16 data, u16 count)
{
  #line 50 
  u32 mask;
  #line 48 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 49 
  u32 eecd = __er32(hw,16UL);
  #line 52 
  mask = (unsigned int)(1UL << ((int)count + -1));
  #line 53 
  if (nvm->type == (unsigned int)e1000_nvm_eeprom_spi) 
                                                       #line 54 
                                                       eecd |= 8U;
  #line 56 
  while (1) {
    #line 57 
    eecd &= 4294967291U;
    #line 59 
    if (((unsigned int)data & mask) != 0U) 
                                           #line 60 
                                           eecd |= 4U;
    #line 62 
    __ew32(hw,16UL,eecd);
    #line 63 
    __er32(hw,8UL);
    #line 65 
    if (0 != 0) 
      #line 65 
      if ((unsigned int)nvm->delay_usec > 19999U) 
                                                  #line 65 
                                                  __bad_udelay(); else 
                                                                    #line 65 
                                                                    __const_udelay((unsigned long)nvm->delay_usec * 4295UL);
    else 
         #line 65 
         __udelay((unsigned long)nvm->delay_usec);
    #line 67 
    e1000_raise_eec_clk(hw,& eecd);
    #line 68 
    e1000_lower_eec_clk(hw,& eecd);
    #line 70 
    mask >>= 1;
    #line 71 
    if (! (mask != 0U)) 
                        #line 56 
                        break;
  }
  #line 73 
  eecd &= 4294967291U;
  #line 74 
  __ew32(hw,16UL,eecd);
  #line 75 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
static u16 e1000_shift_in_eec_bits(struct e1000_hw *hw, u16 count)
{
  #line 90 
  u32 eecd;
  #line 91 
  u32 i;
  #line 92 
  u16 data;
  #line 94 
  eecd = __er32(hw,16UL);
  #line 95 
  eecd &= 4294967283U;
  #line 96 
  data = (unsigned short)0U;
  #line 98 
  i = 0U;
  #line 98 
  while ((unsigned int)count > i) {
    #line 99 
    data = (unsigned short)((int)data << 1U);
    #line 100 
    e1000_raise_eec_clk(hw,& eecd);
    #line 102 
    eecd = __er32(hw,16UL);
    #line 104 
    eecd &= 4294967291U;
    #line 105 
    if ((eecd & 8U) != 0U) 
                           #line 106 
                           data = (unsigned short)((unsigned int)data | 1U);
    #line 108 
    e1000_lower_eec_clk(hw,& eecd);
    #line 98 
    i ++;
  }
  #line 111 
  return data;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000e_poll_eerd_eewr_done(struct e1000_hw *hw, int ee_reg)
{
  #line 125 
  u32 i;
  #line 124 
  u32 attempts = 100000U;
  #line 125 
  u32 reg = 0U;
  #line 127 
  i = 0U;
  #line 127 
  while (i < attempts) {
    #line 128 
    if (ee_reg == 0) 
                     #line 129 
                     reg = __er32(hw,20UL); else 
                                                 #line 131 
                                                 reg = __er32(hw,4140UL);
    #line 133 
    if ((reg & 2U) != 0U) 
                          #line 134 
                          return 0;
    #line 136 
    __const_udelay(21475UL);
    #line 127 
    i ++;
  }
  #line 139 
  return -1;
}

#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000e_acquire_nvm(struct e1000_hw *hw)
{
  #line 152 
  u32 eecd = __er32(hw,16UL);
  #line 153 
  s32 timeout = 1000;
  #line 155 
  __ew32(hw,16UL,eecd | 64U);
  #line 156 
  eecd = __er32(hw,16UL);
  #line 158 
  while (timeout != 0) {
    #line 159 
    if ((eecd & 128U) != 0U) 
                             #line 160 
                             break;
    #line 161 
    __const_udelay(21475UL);
    #line 162 
    eecd = __er32(hw,16UL);
    #line 163 
    timeout --;
  }
  #line 166 
  if (timeout == 0) {
    #line 167 
    eecd &= 4294967231U;
    #line 168 
    __ew32(hw,16UL,eecd);
    {
      #line 169 
      bool branch;
      #line 169 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_acquire_nvm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"Could not acquire NVM grant\n", .lineno = (unsigned int)169U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 169 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 169 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 169 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,(hw->adapter)->netdev,(char *)"Could not acquire NVM grant\n");
    }
    #line 170 
    return -1;
  }
  #line 173 
  return 0;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
static void e1000_standby_nvm(struct e1000_hw *hw)
{
  #line 184 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 185 
  u32 eecd = __er32(hw,16UL);
  #line 187 
  if (nvm->type == (unsigned int)e1000_nvm_eeprom_spi) {
    #line 189 
    eecd |= 2U;
    #line 190 
    __ew32(hw,16UL,eecd);
    #line 191 
    __er32(hw,8UL);
    #line 192 
    if (0 != 0) 
      #line 192 
      if ((unsigned int)nvm->delay_usec > 19999U) 
                                                  #line 192 
                                                  __bad_udelay(); else 
                                                                    #line 192 
                                                                    __const_udelay((unsigned long)nvm->delay_usec * 4295UL);
    else 
         #line 192 
         __udelay((unsigned long)nvm->delay_usec);
    #line 193 
    eecd &= 4294967293U;
    #line 194 
    __ew32(hw,16UL,eecd);
    #line 195 
    __er32(hw,8UL);
    #line 196 
    if (0 != 0) 
      #line 196 
      if ((unsigned int)nvm->delay_usec > 19999U) 
                                                  #line 196 
                                                  __bad_udelay(); else 
                                                                    #line 196 
                                                                    __const_udelay((unsigned long)nvm->delay_usec * 4295UL);
    else 
         #line 196 
         __udelay((unsigned long)nvm->delay_usec);
  }
  #line 199 
  return;
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
static void e1000_stop_nvm(struct e1000_hw *hw)
{
  #line 208 
  u32 eecd;
  #line 210 
  eecd = __er32(hw,16UL);
  #line 211 
  if (hw->nvm.type == (unsigned int)e1000_nvm_eeprom_spi) {
    #line 213 
    eecd |= 2U;
    #line 214 
    e1000_lower_eec_clk(hw,& eecd);
  }
  #line 216 
  return;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
void e1000e_release_nvm(struct e1000_hw *hw)
{
  #line 226 
  u32 eecd;
  #line 228 
  e1000_stop_nvm(hw);
  #line 230 
  eecd = __er32(hw,16UL);
  #line 231 
  eecd &= 4294967231U;
  #line 232 
  __ew32(hw,16UL,eecd);
  #line 233 
  return;
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
static s32 e1000_ready_nvm_eeprom(struct e1000_hw *hw)
{
  #line 245 
  u8 spi_stat_reg;
  #line 243 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 244 
  u32 eecd = __er32(hw,16UL);
  #line 247 
  if (nvm->type == (unsigned int)e1000_nvm_eeprom_spi) {
    #line 248 
    u16 timeout = (unsigned short)5000U;
    #line 251 
    eecd &= 4294967292U;
    #line 252 
    __ew32(hw,16UL,eecd);
    #line 253 
    __er32(hw,8UL);
    #line 254 
    __const_udelay(4295UL);
    #line 261 
    while ((unsigned int)timeout != 0U) {
      #line 262 
      e1000_shift_out_eec_bits(hw,(unsigned short)5,(unsigned short)((int)hw->nvm.opcode_bits));
      #line 264 
      spi_stat_reg = (unsigned char)e1000_shift_in_eec_bits(hw,(unsigned short)8);
      #line 265 
      if (((int)spi_stat_reg & 1) == 0) 
                                        #line 266 
                                        break;
      #line 268 
      __const_udelay(21475UL);
      #line 269 
      e1000_standby_nvm(hw);
      #line 270 
      timeout = (u16)((int)timeout - 1);
    }
    #line 273 
    if ((unsigned int)timeout == 0U) {
      {
        #line 274 
        bool branch;
        #line 274 
        struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"e1000e", .function = (char *)"e1000_ready_nvm_eeprom", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"SPI NVM Status error\n", .lineno = (unsigned int)274U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 274 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
        #line 274 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 274 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,(hw->adapter)->netdev,(char *)"SPI NVM Status error\n");
      }
      #line 275 
      return -1;
    }
  }
  #line 279 
  return 0;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000e_read_nvm_eerd(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 294 
  u32 i;
  #line 293 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 294 
  u32 eerd = 0U;
  #line 295 
  s32 ret_val = 0;
  #line 300 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      #line 302 
      bool branch;
      #line 302 
      struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_read_nvm_eerd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"nvm parameter(s) out of bounds\n", .lineno = (unsigned int)302U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 302 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
      #line 302 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 302 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,(hw->adapter)->netdev,(char *)"nvm parameter(s) out of bounds\n");
    }
    #line 303 
    return -1;
  }
  #line 306 
  i = 0U;
  #line 306 
  while ((unsigned int)words > i) {
    {
      #line 307 
      eerd = (((unsigned int)offset + i) << 2) + 1U;
      #line 310 
      __ew32(hw,20UL,eerd);
      #line 311 
      ret_val = e1000e_poll_eerd_eewr_done(hw,0);
      #line 312 
      if (ret_val != 0) {
        {
          #line 313 
          bool branch_0;
          #line 313 
          struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_read_nvm_eerd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"NVM read error: %d\n", .lineno = (unsigned int)313U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 313 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
          #line 313 
          if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                        #line 313 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,(hw->adapter)->netdev,(char *)"NVM read error: %d\n",ret_val);
        }
        #line 314 
        break;
      }
      #line 317 
      *(data + (unsigned long)i) = (unsigned short)(__er32(hw,20UL) >> 16);
    }
    #line 306 
    i ++;
  }
  #line 320 
  return ret_val;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000e_write_nvm_spi(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 337 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 338 
  s32 ret_val = -1;
  #line 339 
  u16 widx = (unsigned short)0U;
  #line 344 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      #line 346 
      bool branch;
      #line 346 
      struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_write_nvm_spi", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"nvm parameter(s) out of bounds\n", .lineno = (unsigned int)346U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 346 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
      #line 346 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 346 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,(hw->adapter)->netdev,(char *)"nvm parameter(s) out of bounds\n");
    }
    #line 347 
    return -1;
  }
  #line 350 
  while ((int)widx < (int)words) {
    #line 351 
    u8 write_opcode = (unsigned char)2U;
    #line 353 
    ret_val = (*(nvm->ops.acquire))(hw);
    #line 354 
    if (ret_val != 0) 
                      #line 355 
                      return ret_val;
    #line 357 
    ret_val = e1000_ready_nvm_eeprom(hw);
    #line 358 
    if (ret_val != 0) {
      #line 359 
      (*(nvm->ops.release))(hw);
      #line 360 
      return ret_val;
    }
    #line 363 
    e1000_standby_nvm(hw);
    #line 366 
    e1000_shift_out_eec_bits(hw,(unsigned short)6,(unsigned short)((int)nvm->opcode_bits));
    #line 369 
    e1000_standby_nvm(hw);
    #line 374 
    if ((unsigned int)nvm->address_bits == 8U && (unsigned int)offset > 127U) 
      #line 375 
      write_opcode = (unsigned char)((unsigned int)write_opcode | 8U);
    #line 378 
    e1000_shift_out_eec_bits(hw,(unsigned short)((int)write_opcode),(unsigned short)((int)nvm->opcode_bits));
    #line 379 
    e1000_shift_out_eec_bits(hw,(unsigned short)((int)((unsigned int)((int)offset + (int)widx) * 2U)),(unsigned short)((int)nvm->address_bits));
    #line 383 
    while ((int)widx < (int)words) {
      #line 384 
      u16 word_out = *(data + (unsigned long)widx);
      #line 386 
      word_out = (unsigned short)(((int)word_out >> 8) | ((int)word_out << 8));
      #line 387 
      e1000_shift_out_eec_bits(hw,(unsigned short)((int)word_out),(unsigned short)16);
      #line 388 
      widx = (u16)((int)widx + 1);
      #line 390 
      if ((((int)offset + (int)widx) * 2) % (int)nvm->page_size == 0) {
        #line 391 
        e1000_standby_nvm(hw);
        #line 392 
        break;
      }
    }
    #line 395 
    usleep_range(10000UL,11000UL);
    #line 396 
    (*(nvm->ops.release))(hw);
  }
  #line 399 
  return ret_val;
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000_read_pba_string_generic(struct e1000_hw *hw, u8 *pba_num, u32 pba_num_size)
{
  #line 414 
  s32 ret_val;
  #line 415 
  u16 nvm_data;
  #line 416 
  u16 pba_ptr;
  #line 417 
  u16 offset;
  #line 418 
  u16 length;
  #line 420 
  if (pba_num == (u8 *)0U) {
    {
      #line 421 
      bool branch;
      #line 421 
      struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_pba_string_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"PBA string buffer was null\n", .lineno = (unsigned int)421U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 421 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
      #line 421 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 421 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,(hw->adapter)->netdev,(char *)"PBA string buffer was null\n");
    }
    #line 422 
    return -16;
  }
  #line 425 
  ret_val = e1000_read_nvm(hw,(unsigned short)8,(unsigned short)1,& nvm_data);
  #line 426 
  if (ret_val != 0) {
    {
      #line 427 
      bool branch_0;
      #line 427 
      struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_pba_string_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)427U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 427 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
      #line 427 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 427 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,(hw->adapter)->netdev,(char *)"NVM Read Error\n");
    }
    #line 428 
    return ret_val;
  }
  #line 431 
  ret_val = e1000_read_nvm(hw,(unsigned short)9,(unsigned short)1,& pba_ptr);
  #line 432 
  if (ret_val != 0) {
    {
      #line 433 
      bool branch_1;
      #line 433 
      struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_pba_string_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)433U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 433 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
      #line 433 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 433 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,(hw->adapter)->netdev,(char *)"NVM Read Error\n");
    }
    #line 434 
    return ret_val;
  }
  #line 441 
  if ((unsigned int)nvm_data != 64250U) {
    {
      #line 442 
      bool branch_2;
      #line 442 
      struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_pba_string_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"NVM PBA number is not stored as string\n", .lineno = (unsigned int)442U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 442 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
      #line 442 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 442 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,(hw->adapter)->netdev,(char *)"NVM PBA number is not stored as string\n");
    }
    #line 445 
    if (pba_num_size <= 10U) {
      {
        #line 446 
        bool branch_3;
        #line 446 
        struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_pba_string_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"PBA string buffer too small\n", .lineno = (unsigned int)446U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 446 
        branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
        #line 446 
        if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                      #line 446 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,(hw->adapter)->netdev,(char *)"PBA string buffer too small\n");
      }
      #line 447 
      return 17;
    }
    #line 451 
    *pba_num = (unsigned char)((unsigned int)((unsigned char)((int)nvm_data >> 12)) & 15U);
    #line 452 
    *(pba_num + 1U) = (unsigned char)((unsigned int)((unsigned char)((int)nvm_data >> 8)) & 15U);
    #line 453 
    *(pba_num + 2U) = (unsigned char)((unsigned int)((unsigned char)((int)nvm_data >> 4)) & 15U);
    #line 454 
    *(pba_num + 3U) = (unsigned char)((unsigned int)((unsigned char)nvm_data) & 15U);
    #line 455 
    *(pba_num + 4U) = (unsigned char)((unsigned int)((unsigned char)((int)pba_ptr >> 12)) & 15U);
    #line 456 
    *(pba_num + 5U) = (unsigned char)((unsigned int)((unsigned char)((int)pba_ptr >> 8)) & 15U);
    #line 457 
    *(pba_num + 6U) = (unsigned char)45U;
    #line 458 
    *(pba_num + 7U) = (unsigned char)0U;
    #line 459 
    *(pba_num + 8U) = (unsigned char)((unsigned int)((unsigned char)((int)pba_ptr >> 4)) & 15U);
    #line 460 
    *(pba_num + 9U) = (unsigned char)((unsigned int)((unsigned char)pba_ptr) & 15U);
    #line 463 
    *(pba_num + 10U) = (unsigned char)0U;
    #line 466 
    offset = (unsigned short)0U;
    #line 466 
    while ((unsigned int)offset <= 9U) {
      #line 467 
      if ((unsigned int)*(pba_num + (unsigned long)offset) <= 9U) 
                                                                  #line 468 
                                                                  *(pba_num + (unsigned long)offset) = (unsigned char)((unsigned int)*(pba_num + (unsigned long)offset) + 48U);
      else 
        #line 469 
        if ((unsigned int)*(pba_num + (unsigned long)offset) <= 15U) 
          #line 470 
          *(pba_num + (unsigned long)offset) = (unsigned char)((unsigned int)*(pba_num + (unsigned long)offset) + 55U);
      #line 466 
      offset = (u16)((int)offset + 1);
    }
    #line 473 
    return 0;
  }
  #line 476 
  ret_val = e1000_read_nvm(hw,(unsigned short)((int)pba_ptr),(unsigned short)1,& length);
  #line 477 
  if (ret_val != 0) {
    {
      #line 478 
      bool branch_4;
      #line 478 
      struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_pba_string_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)478U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 478 
      branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
      #line 478 
      if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                    #line 478 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,(hw->adapter)->netdev,(char *)"NVM Read Error\n");
    }
    #line 479 
    return ret_val;
  }
  #line 482 
  if ((unsigned int)length + 65535U > 65533U) {
    {
      #line 483 
      bool branch_5;
      #line 483 
      struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_pba_string_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"NVM PBA number section invalid length\n", .lineno = (unsigned int)483U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 483 
      branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
      #line 483 
      if ((long)((long)((int)branch_5 != 0)) != 0L) 
                                                    #line 483 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,(hw->adapter)->netdev,(char *)"NVM PBA number section invalid length\n");
    }
    #line 484 
    return -18;
  }
  #line 487 
  if ((unsigned int)length * 2U + 4294967295U > pba_num_size) {
    {
      #line 488 
      bool branch_6;
      #line 488 
      struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_pba_string_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"PBA string buffer too small\n", .lineno = (unsigned int)488U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 488 
      branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
      #line 488 
      if ((long)((long)((int)branch_6 != 0)) != 0L) 
                                                    #line 488 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,(hw->adapter)->netdev,(char *)"PBA string buffer too small\n");
    }
    #line 489 
    return -17;
  }
  #line 493 
  pba_ptr = (u16)((int)pba_ptr + 1);
  #line 494 
  length = (u16)((int)length - 1);
  #line 496 
  offset = (unsigned short)0U;
  #line 496 
  while ((int)offset < (int)length) {
    #line 497 
    ret_val = e1000_read_nvm(hw,(unsigned short)((int)pba_ptr + (int)offset),(unsigned short)1,& nvm_data);
    #line 498 
    if (ret_val != 0) {
      {
        #line 499 
        bool branch_7;
        #line 499 
        struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"e1000e", .function = (char *)"e1000_read_pba_string_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)499U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 499 
        branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
        #line 499 
        if ((long)((long)((int)branch_7 != 0)) != 0L) 
                                                      #line 499 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,(hw->adapter)->netdev,(char *)"NVM Read Error\n");
      }
      #line 500 
      return ret_val;
    }
    #line 502 
    *(pba_num + (unsigned long)((int)offset * 2)) = (unsigned char)((int)nvm_data >> 8);
    #line 503 
    *(pba_num + ((unsigned long)((int)offset * 2) + (unsigned long)1U)) = (unsigned char)nvm_data;
    #line 496 
    offset = (u16)((int)offset + 1);
  }
  #line 505 
  *(pba_num + (unsigned long)((int)offset * 2)) = (unsigned char)0U;
  #line 507 
  return 0;
}

#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000_read_mac_addr_generic(struct e1000_hw *hw)
{
  #line 520 
  u32 rar_high;
  #line 521 
  u32 rar_low;
  #line 522 
  u16 i;
  #line 524 
  rar_high = __er32(hw,21508UL);
  #line 525 
  rar_low = __er32(hw,21504UL);
  #line 527 
  i = (unsigned short)0U;
  #line 527 
  while ((unsigned int)i <= 3U) {
    #line 528 
    hw->mac.perm_addr[(int)i] = (unsigned char)(rar_low >> (int)i * 8);
    #line 527 
    i = (u16)((int)i + 1);
  }
  #line 530 
  i = (unsigned short)0U;
  #line 530 
  while ((unsigned int)i <= 1U) {
    #line 531 
    hw->mac.perm_addr[(int)i + 4] = (unsigned char)(rar_high >> (int)i * 8);
    #line 530 
    i = (u16)((int)i + 1);
  }
  #line 533 
  i = (unsigned short)0U;
  #line 533 
  while ((unsigned int)i <= 5U) {
    #line 534 
    hw->mac.addr[(int)i] = hw->mac.perm_addr[(int)i];
    #line 533 
    i = (u16)((int)i + 1);
  }
  #line 536 
  return 0;
}

#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000e_validate_nvm_checksum_generic(struct e1000_hw *hw)
{
  #line 548 
  s32 ret_val;
  #line 550 
  u16 i;
  #line 550 
  u16 nvm_data;
  #line 549 
  u16 checksum = (unsigned short)0U;
  #line 552 
  i = (unsigned short)0U;
  #line 552 
  while ((unsigned int)i <= 63U) {
    #line 553 
    ret_val = e1000_read_nvm(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
    #line 554 
    if (ret_val != 0) {
      {
        #line 555 
        bool branch;
        #line 555 
        struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_validate_nvm_checksum_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)555U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 555 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
        #line 555 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 555 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug455,(hw->adapter)->netdev,(char *)"NVM Read Error\n");
      }
      #line 556 
      return ret_val;
    }
    #line 558 
    checksum = (unsigned short)((int)checksum + (int)nvm_data);
    #line 552 
    i = (u16)((int)i + 1);
  }
  #line 561 
  if ((unsigned int)checksum != 47802U) {
    {
      #line 562 
      bool branch_0;
      #line 562 
      struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_validate_nvm_checksum_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"NVM Checksum Invalid\n", .lineno = (unsigned int)562U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 562 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
      #line 562 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 562 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug456,(hw->adapter)->netdev,(char *)"NVM Checksum Invalid\n");
    }
    #line 563 
    return -1;
  }
  #line 566 
  return 0;
}

#line 577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000e_update_nvm_checksum_generic(struct e1000_hw *hw)
{
  #line 579 
  s32 ret_val;
  #line 581 
  u16 i;
  #line 581 
  u16 nvm_data;
  #line 580 
  u16 checksum = (unsigned short)0U;
  #line 583 
  i = (unsigned short)0U;
  #line 583 
  while ((unsigned int)i <= 62U) {
    #line 584 
    ret_val = e1000_read_nvm(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
    #line 585 
    if (ret_val != 0) {
      {
        #line 586 
        bool branch;
        #line 586 
        struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_update_nvm_checksum_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"NVM Read Error while updating checksum.\n", .lineno = (unsigned int)586U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 586 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
        #line 586 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 586 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,(hw->adapter)->netdev,(char *)"NVM Read Error while updating checksum.\n");
      }
      #line 587 
      return ret_val;
    }
    #line 589 
    checksum = (unsigned short)((int)checksum + (int)nvm_data);
    #line 583 
    i = (u16)((int)i + 1);
  }
  #line 591 
  checksum = (unsigned short)(47802U - (unsigned int)checksum);
  #line 592 
  ret_val = e1000_write_nvm(hw,(unsigned short)63,(unsigned short)1,& checksum);
  #line 593 
  if (ret_val != 0) {
    #line 594 
    bool branch_0;
    #line 594 
    struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_update_nvm_checksum_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c", .format = (char *)"NVM Write Error while updating checksum.\n", .lineno = (unsigned int)594U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 594 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
    #line 594 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 594 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug458,(hw->adapter)->netdev,(char *)"NVM Write Error while updating checksum.\n");
  }
  #line 596 
  return ret_val;
}

#line 606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.c"
void e1000e_reload_nvm_generic(struct e1000_hw *hw)
{
  #line 608 
  u32 ctrl_ext;
  #line 610 
  usleep_range(10UL,20UL);
  #line 611 
  ctrl_ext = __er32(hw,24UL);
  #line 612 
  ctrl_ext |= 8192U;
  #line 613 
  __ew32(hw,24UL,ctrl_ext);
  #line 614 
  __er32(hw,8UL);
  #line 615 
  return;
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.h"
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
void e1000e_phy_force_speed_duplex_setup(struct e1000_hw *hw, u16 *phy_ctrl);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.h"
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_phy_reset_dsp(struct e1000_hw *hw);
#line 6 
#line 1690 
static s32 e1000_wait_autoneg(struct e1000_hw *hw);
#line 7 
#line 2635 
static s32 e1000_access_phy_wakeup_reg_bm(struct e1000_hw *hw, u32 offset, u16 *data, bool read, bool page_set);
#line 9 
#line 2961 
static u32 e1000_get_phy_addr_for_hv_page(u32 page);
#line 10 
#line 2983 
static s32 e1000_access_phy_debug_regs_hv(struct e1000_hw *hw, u32 offset, u16 *data, bool read);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static u16 e1000_m88_cable_length_table[7U] = {[1] = (unsigned short)50U, (unsigned short)80U, (unsigned short)110U, (unsigned short)140U, (unsigned short)140U, (unsigned short)255U};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static u16 e1000_igp_2_cable_length_table[113U] = {[8] = (unsigned short)3U, (unsigned short)5U, (unsigned short)8U, (unsigned short)11U, (unsigned short)13U, (unsigned short)16U, (unsigned short)18U, (unsigned short)21U, [19] = (unsigned short)3U, (unsigned short)6U, (unsigned short)10U, (unsigned short)13U, (unsigned short)16U, (unsigned short)19U, (unsigned short)23U, (unsigned short)26U, (unsigned short)29U, (unsigned short)32U, (unsigned short)35U, (unsigned short)38U, (unsigned short)41U, (unsigned short)6U, (unsigned short)10U, (unsigned short)14U, (unsigned short)18U, (unsigned short)22U, (unsigned short)26U, (unsigned short)30U, (unsigned short)33U, (unsigned short)37U, (unsigned short)41U, (unsigned short)44U, (unsigned short)48U, (unsigned short)51U, (unsigned short)54U, (unsigned short)58U, (unsigned short)61U, (unsigned short)21U, (unsigned short)26U, (unsigned short)31U, (unsigned short)35U, (unsigned short)40U, (unsigned short)44U, (unsigned short)49U, (unsigned short)53U, (unsigned short)57U, (unsigned short)61U, (unsigned short)65U, (unsigned short)68U, (unsigned short)72U, (unsigned short)75U, (unsigned short)79U, (unsigned short)82U, (unsigned short)40U, (unsigned short)45U, (unsigned short)51U, (unsigned short)56U, (unsigned short)61U, (unsigned short)66U, (unsigned short)70U, (unsigned short)75U, (unsigned short)79U, (unsigned short)83U, (unsigned short)87U, (unsigned short)91U, (unsigned short)94U, (unsigned short)98U, (unsigned short)101U, (unsigned short)104U, (unsigned short)60U, (unsigned short)66U, (unsigned short)72U, (unsigned short)77U, (unsigned short)82U, (unsigned short)87U, (unsigned short)92U, (unsigned short)96U, (unsigned short)100U, (unsigned short)104U, (unsigned short)108U, (unsigned short)111U, (unsigned short)114U, (unsigned short)117U, (unsigned short)119U, (unsigned short)121U, (unsigned short)83U, (unsigned short)89U, (unsigned short)95U, (unsigned short)100U, (unsigned short)105U, (unsigned short)109U, (unsigned short)113U, (unsigned short)116U, (unsigned short)119U, (unsigned short)122U, (unsigned short)124U, (unsigned short)104U, (unsigned short)109U, (unsigned short)114U, (unsigned short)118U, (unsigned short)121U, (unsigned short)124U};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_check_reset_block_generic(struct e1000_hw *hw)
{
  #line 45 
  u32 manc;
  #line 49 
  int tmp;
  #line 47 
  manc = __er32(hw,22560UL);
  #line 49 
  if ((manc & 262144U) != 0U) 
                              #line 49 
                              tmp = 12; else 
                                             #line 49 
                                             tmp = 0;
  #line 49 
  return tmp;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_get_phy_id(struct e1000_hw *hw)
{
  #line 63 
  u16 phy_id;
  #line 61 
  struct e1000_phy_info *phy = & hw->phy;
  #line 62 
  s32 ret_val = 0;
  #line 64 
  u16 retry_count = (unsigned short)0U;
  #line 66 
  if (phy->ops.read_reg == (s32 (*)(struct e1000_hw *, u32 , u16 *))0) 
    #line 67 
    return 0;
  #line 69 
  while ((unsigned int)retry_count <= 1U) {
    #line 70 
    ret_val = e1e_rphy(hw,2U,& phy_id);
    #line 71 
    if (ret_val != 0) 
                      #line 72 
                      return ret_val;
    #line 74 
    phy->id = (unsigned int)((int)phy_id << 16);
    #line 75 
    usleep_range(20UL,40UL);
    #line 76 
    ret_val = e1e_rphy(hw,3U,& phy_id);
    #line 77 
    if (ret_val != 0) 
                      #line 78 
                      return ret_val;
    #line 80 
    phy->id |= (unsigned int)phy_id & 4294967280U;
    #line 81 
    phy->revision = (unsigned int)phy_id & 15U;
    #line 83 
    if (phy->id != 0U && phy->id != 4294967280U) 
                                                 #line 84 
                                                 return 0;
    #line 86 
    retry_count = (u16)((int)retry_count + 1);
  }
  #line 89 
  return 0;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_phy_reset_dsp(struct e1000_hw *hw)
{
  #line 100 
  s32 ret_val;
  #line 102 
  ret_val = e1e_wphy(hw,30U,(unsigned short)193);
  #line 103 
  if (ret_val != 0) 
                    #line 104 
                    return ret_val;
  #line 106 
  return e1e_wphy(hw,30U,(unsigned short)0);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 121 
  u32 i;
  #line 120 
  struct e1000_phy_info *phy = & hw->phy;
  #line 121 
  u32 mdic = 0U;
  #line 123 
  if (offset > 31U) {
    {
      #line 124 
      bool branch;
      #line 124 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_read_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"PHY Address %d is out of range\n", .lineno = (unsigned int)124U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 124 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 124 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 124 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,(hw->adapter)->netdev,(char *)"PHY Address %d is out of range\n",offset);
    }
    #line 125 
    return -4;
  }
  #line 132 
  mdic = ((offset << 16) | (phy->addr << 21)) | 134217728U;
  #line 136 
  __ew32(hw,32UL,mdic);
  #line 142 
  i = 0U;
  #line 142 
  while (i <= 1919U) {
    #line 143 
    __const_udelay(214750UL);
    #line 144 
    mdic = __er32(hw,32UL);
    #line 145 
    if ((mdic & 268435456U) != 0U) 
                                   #line 146 
                                   break;
    #line 142 
    i ++;
  }
  #line 148 
  if ((mdic & 268435456U) == 0U) {
    {
      #line 149 
      bool branch_0;
      #line 149 
      struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_read_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"MDI Read did not complete\n", .lineno = (unsigned int)149U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 149 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
      #line 149 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 149 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,(hw->adapter)->netdev,(char *)"MDI Read did not complete\n");
    }
    #line 150 
    return -2;
  }
  #line 152 
  if ((mdic & 1073741824U) != 0U) {
    {
      #line 153 
      bool branch_1;
      #line 153 
      struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_read_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"MDI Error\n", .lineno = (unsigned int)153U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 153 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
      #line 153 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 153 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,(hw->adapter)->netdev,(char *)"MDI Error\n");
    }
    #line 154 
    return -2;
  }
  #line 156 
  if (((mdic >> 16) & 31U) != offset) {
    {
      #line 157 
      bool branch_2;
      #line 157 
      struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_read_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"MDI Read offset error - requested %d, returned %d\n", .lineno = (unsigned int)157U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 157 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
      #line 157 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 157 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,(hw->adapter)->netdev,(char *)"MDI Read offset error - requested %d, returned %d\n",offset,(mdic >> 16) & 31U);
    }
    #line 160 
    return -2;
  }
  #line 162 
  *data = (unsigned short)mdic;
  #line 167 
  if (hw->mac.type == (unsigned int)e1000_pch2lan) 
                                                   #line 168 
                                                   __const_udelay(429500UL);
  #line 170 
  return 0;
}

#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 184 
  u32 i;
  #line 183 
  struct e1000_phy_info *phy = & hw->phy;
  #line 184 
  u32 mdic = 0U;
  #line 186 
  if (offset > 31U) {
    {
      #line 187 
      bool branch;
      #line 187 
      struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_write_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"PHY Address %d is out of range\n", .lineno = (unsigned int)187U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 187 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
      #line 187 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 187 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,(hw->adapter)->netdev,(char *)"PHY Address %d is out of range\n",offset);
    }
    #line 188 
    return -4;
  }
  #line 195 
  mdic = (((unsigned int)data | (offset << 16)) | (phy->addr << 21)) | 67108864U;
  #line 200 
  __ew32(hw,32UL,mdic);
  #line 206 
  i = 0U;
  #line 206 
  while (i <= 1919U) {
    #line 207 
    __const_udelay(214750UL);
    #line 208 
    mdic = __er32(hw,32UL);
    #line 209 
    if ((mdic & 268435456U) != 0U) 
                                   #line 210 
                                   break;
    #line 206 
    i ++;
  }
  #line 212 
  if ((mdic & 268435456U) == 0U) {
    {
      #line 213 
      bool branch_0;
      #line 213 
      struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_write_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"MDI Write did not complete\n", .lineno = (unsigned int)213U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 213 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
      #line 213 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 213 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,(hw->adapter)->netdev,(char *)"MDI Write did not complete\n");
    }
    #line 214 
    return -2;
  }
  #line 216 
  if ((mdic & 1073741824U) != 0U) {
    {
      #line 217 
      bool branch_1;
      #line 217 
      struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_write_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"MDI Error\n", .lineno = (unsigned int)217U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 217 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
      #line 217 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 217 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,(hw->adapter)->netdev,(char *)"MDI Error\n");
    }
    #line 218 
    return -2;
  }
  #line 220 
  if (((mdic >> 16) & 31U) != offset) {
    {
      #line 221 
      bool branch_2;
      #line 221 
      struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_write_phy_reg_mdic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"MDI Write offset error - requested %d, returned %d\n", .lineno = (unsigned int)221U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 221 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
      #line 221 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 221 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,(hw->adapter)->netdev,(char *)"MDI Write offset error - requested %d, returned %d\n",offset,(mdic >> 16) & 31U);
    }
    #line 224 
    return -2;
  }
  #line 230 
  if (hw->mac.type == (unsigned int)e1000_pch2lan) 
                                                   #line 231 
                                                   __const_udelay(429500UL);
  #line 233 
  return 0;
}

#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_phy_reg_m88(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 248 
  s32 ret_val;
  #line 250 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 251 
  if (ret_val != 0) 
                    #line 252 
                    return ret_val;
  #line 254 
  ret_val = e1000e_read_phy_reg_mdic(hw,offset & 31U,data);
  #line 257 
  (*(hw->phy.ops.release))(hw);
  #line 259 
  return ret_val;
}

#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_phy_reg_m88(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 273 
  s32 ret_val;
  #line 275 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 276 
  if (ret_val != 0) 
                    #line 277 
                    return ret_val;
  #line 279 
  ret_val = e1000e_write_phy_reg_mdic(hw,offset & 31U,(unsigned short)((int)data));
  #line 282 
  (*(hw->phy.ops.release))(hw);
  #line 284 
  return ret_val;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_set_page_igp(struct e1000_hw *hw, u16 page)
{
  {
    #line 298 
    bool branch;
    #line 298 
    struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"e1000e", .function = (char *)"e1000_set_page_igp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Setting page 0x%x\n", .lineno = (unsigned int)298U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 298 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
    #line 298 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 298 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,(hw->adapter)->netdev,(char *)"Setting page 0x%x\n",(int)page);
  }
  #line 300 
  hw->phy.addr = 1U;
  #line 302 
  return e1000e_write_phy_reg_mdic(hw,31U,(unsigned short)((int)page));
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 __e1000e_read_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 *data, bool locked)
{
  #line 319 
  s32 ret_val = 0;
  #line 321 
  if (! locked) {
    #line 322 
    if (hw->phy.ops.acquire == (s32 (*)(struct e1000_hw *))0) 
                                                              #line 323 
                                                              return 0;
    #line 325 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 326 
    if (ret_val != 0) 
                      #line 327 
                      return ret_val;
  }
  #line 330 
  if (offset > 15U) 
                    #line 331 
                    ret_val = e1000e_write_phy_reg_mdic(hw,31U,(unsigned short)((int)((unsigned short)offset)));
  #line 334 
  if (ret_val == 0) 
                    #line 335 
                    ret_val = e1000e_read_phy_reg_mdic(hw,offset & 31U,data);
  #line 338 
  if (! locked) 
                #line 339 
                (*(hw->phy.ops.release))(hw);
  #line 341 
  return ret_val;
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 356 
  return __e1000e_read_phy_reg_igp(hw,offset,data,(_Bool)0);
}

#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_phy_reg_igp_locked(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 370 
  return __e1000e_read_phy_reg_igp(hw,offset,data,(_Bool)1);
}

#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 __e1000e_write_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 data, bool locked)
{
  #line 386 
  s32 ret_val = 0;
  #line 388 
  if (! locked) {
    #line 389 
    if (hw->phy.ops.acquire == (s32 (*)(struct e1000_hw *))0) 
                                                              #line 390 
                                                              return 0;
    #line 392 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 393 
    if (ret_val != 0) 
                      #line 394 
                      return ret_val;
  }
  #line 397 
  if (offset > 15U) 
                    #line 398 
                    ret_val = e1000e_write_phy_reg_mdic(hw,31U,(unsigned short)((int)((unsigned short)offset)));
  #line 401 
  if (ret_val == 0) 
                    #line 402 
                    ret_val = e1000e_write_phy_reg_mdic(hw,offset & 31U,(unsigned short)((int)data));
  #line 404 
  if (! locked) 
                #line 405 
                (*(hw->phy.ops.release))(hw);
  #line 407 
  return ret_val;
}

#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 421 
  return __e1000e_write_phy_reg_igp(hw,offset,(unsigned short)((int)data),
                                 (_Bool)0);
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_phy_reg_igp_locked(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 435 
  return __e1000e_write_phy_reg_igp(hw,offset,(unsigned short)((int)data),
                                 (_Bool)1);
}

#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 __e1000_read_kmrn_reg(struct e1000_hw *hw, u32 offset, u16 *data, bool locked)
{
  #line 452 
  u32 kmrnctrlsta;
  #line 454 
  if (! locked) {
    #line 455 
    s32 ret_val = 0;
    #line 457 
    if (hw->phy.ops.acquire == (s32 (*)(struct e1000_hw *))0) 
                                                              #line 458 
                                                              return 0;
    #line 460 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 461 
    if (ret_val != 0) 
                      #line 462 
                      return ret_val;
  }
  #line 465 
  kmrnctrlsta = ((offset << 16) & 2031616U) | 2097152U;
  #line 467 
  __ew32(hw,52UL,kmrnctrlsta);
  #line 468 
  __er32(hw,8UL);
  #line 470 
  __const_udelay(8590UL);
  #line 472 
  kmrnctrlsta = __er32(hw,52UL);
  #line 473 
  *data = (unsigned short)kmrnctrlsta;
  #line 475 
  if (! locked) 
                #line 476 
                (*(hw->phy.ops.release))(hw);
  #line 478 
  return 0;
}

#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_kmrn_reg(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 493 
  return __e1000_read_kmrn_reg(hw,offset,data,(_Bool)0);
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_kmrn_reg_locked(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 508 
  return __e1000_read_kmrn_reg(hw,offset,data,(_Bool)1);
}

#line 522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 __e1000_write_kmrn_reg(struct e1000_hw *hw, u32 offset, u16 data, bool locked)
{
  #line 525 
  u32 kmrnctrlsta;
  #line 527 
  if (! locked) {
    #line 528 
    s32 ret_val = 0;
    #line 530 
    if (hw->phy.ops.acquire == (s32 (*)(struct e1000_hw *))0) 
                                                              #line 531 
                                                              return 0;
    #line 533 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 534 
    if (ret_val != 0) 
                      #line 535 
                      return ret_val;
  }
  #line 538 
  kmrnctrlsta = ((offset << 16) & 2031616U) | (unsigned int)data;
  #line 540 
  __ew32(hw,52UL,kmrnctrlsta);
  #line 541 
  __er32(hw,8UL);
  #line 543 
  __const_udelay(8590UL);
  #line 545 
  if (! locked) 
                #line 546 
                (*(hw->phy.ops.release))(hw);
  #line 548 
  return 0;
}

#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_kmrn_reg(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 562 
  return __e1000_write_kmrn_reg(hw,offset,(unsigned short)((int)data),(_Bool)0);
}

#line 574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_kmrn_reg_locked(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 576 
  return __e1000_write_kmrn_reg(hw,offset,(unsigned short)((int)data),(_Bool)1);
}

#line 585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 e1000_set_master_slave_mode(struct e1000_hw *hw)
{
  #line 587 
  s32 ret_val;
  #line 588 
  u16 phy_data;
  #line 591 
  ret_val = e1e_rphy(hw,9U,& phy_data);
  #line 592 
  if (ret_val != 0) 
                    #line 593 
                    return ret_val;
  #line 596 
  if (((int)phy_data & 4096) != 0) {
    #line 596 
    int tmp;
    #line 596 
    if (((int)phy_data & 2048) != 0) 
                                     #line 596 
                                     tmp = e1000_ms_force_master; else 
                                                                    #line 596 
                                                                    tmp = e1000_ms_force_slave;
    #line 596 
    hw->phy.original_ms_type = (enum e1000_ms_type)tmp;
  }
  else 
       #line 596 
       hw->phy.original_ms_type = e1000_ms_auto;
  #line 600 
  switch ((unsigned int)hw->phy.ms_type) {
    #line 601 
    case (unsigned int)1: 
                          #line 601 
    ;
    #line 602 
    phy_data = (unsigned short)((unsigned int)phy_data | 6144U);
    #line 603 
    break;
    #line 604 
    case (unsigned int)2: 
                          #line 604 
    ;
    #line 605 
    phy_data = (unsigned short)((unsigned int)phy_data | 4096U);
    #line 606 
    phy_data = (unsigned short)((unsigned int)phy_data & 63487U);
    #line 607 
    break;
    #line 608 
    case (unsigned int)3: 
                          #line 608 
    ;
    #line 609 
    phy_data = (unsigned short)((unsigned int)phy_data & 61439U);
    #line 611 
    default: 
             #line 611 
    ;
    #line 612 
    break;
  }
  #line 615 
  return e1e_wphy(hw,9U,(unsigned short)((int)phy_data));
}

#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_copper_link_setup_82577(struct e1000_hw *hw)
{
  #line 626 
  s32 ret_val;
  #line 627 
  u16 phy_data;
  #line 630 
  ret_val = e1e_rphy(hw,22U,& phy_data);
  #line 631 
  if (ret_val != 0) 
                    #line 632 
                    return ret_val;
  #line 634 
  phy_data = (unsigned short)((unsigned int)phy_data | 32768U);
  #line 637 
  phy_data = (unsigned short)((unsigned int)phy_data | 3072U);
  #line 639 
  ret_val = e1e_wphy(hw,22U,(unsigned short)((int)phy_data));
  #line 640 
  if (ret_val != 0) 
                    #line 641 
                    return ret_val;
  #line 644 
  ret_val = e1e_rphy(hw,18U,& phy_data);
  #line 645 
  if (ret_val != 0) 
                    #line 646 
                    return ret_val;
  #line 647 
  phy_data = (unsigned short)((unsigned int)phy_data & 63999U);
  #line 653 
  switch ((int)hw->phy.mdix) {
    #line 654 
    case 1: 
            #line 654 
    ;
    #line 655 
    break;
    #line 656 
    case 2: 
            #line 656 
    ;
    #line 657 
    phy_data = (unsigned short)((unsigned int)phy_data | 512U);
    #line 658 
    break;
    #line 659 
    case 0: 
            #line 659 
    ;
    #line 660 
    default: 
             #line 660 
    ;
    #line 661 
    phy_data = (unsigned short)((unsigned int)phy_data | 1024U);
    #line 662 
    break;
  }
  #line 664 
  ret_val = e1e_wphy(hw,18U,(unsigned short)((int)phy_data));
  #line 665 
  if (ret_val != 0) 
                    #line 666 
                    return ret_val;
  #line 668 
  return e1000_set_master_slave_mode(hw);
}

#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_copper_link_setup_m88(struct e1000_hw *hw)
{
  #line 681 
  s32 ret_val;
  #line 682 
  u16 phy_data;
  #line 680 
  struct e1000_phy_info *phy = & hw->phy;
  #line 685 
  ret_val = e1e_rphy(hw,16U,& phy_data);
  #line 686 
  if (ret_val != 0) 
                    #line 687 
                    return ret_val;
  #line 690 
  if (phy->type != (unsigned int)e1000_phy_bm) 
                                               #line 691 
                                               phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
  #line 700 
  phy_data = (unsigned short)((unsigned int)phy_data & 65439U);
  #line 702 
  switch ((int)phy->mdix) {
    #line 703 
    case 1: 
            #line 703 
    ;
    #line 704 
    phy_data = phy_data;
    #line 705 
    break;
    #line 706 
    case 2: 
            #line 706 
    ;
    #line 707 
    phy_data = (unsigned short)((unsigned int)phy_data | 32U);
    #line 708 
    break;
    #line 709 
    case 3: 
            #line 709 
    ;
    #line 710 
    phy_data = (unsigned short)((unsigned int)phy_data | 64U);
    #line 711 
    break;
    #line 712 
    case 0: 
            #line 712 
    ;
    #line 713 
    default: 
             #line 713 
    ;
    #line 714 
    phy_data = (unsigned short)((unsigned int)phy_data | 96U);
    #line 715 
    break;
  }
  #line 724 
  phy_data = (unsigned short)((unsigned int)phy_data & 65533U);
  #line 725 
  if ((int)phy->disable_polarity_correction != 0) 
                                                  #line 726 
                                                  phy_data = (unsigned short)((unsigned int)phy_data | 2U);
  #line 729 
  if (phy->type == (unsigned int)e1000_phy_bm) {
    #line 731 
    if (phy->id == 21040305U) {
      #line 732 
      phy_data = (unsigned short)((unsigned int)phy_data & 63487U);
      #line 733 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)phy_data));
      #line 735 
      if (ret_val != 0) 
                        #line 736 
                        return ret_val;
      #line 738 
      ret_val = (*(phy->ops.commit))(hw);
      #line 739 
      if (ret_val != 0) {
        {
          #line 740 
          bool branch;
          #line 740 
          struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_copper_link_setup_m88", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Error committing the PHY changes\n", .lineno = (unsigned int)740U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 740 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
          #line 740 
          if ((long)((long)((int)branch != 0)) != 0L) 
                                                      #line 740 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,(hw->adapter)->netdev,(char *)"Error committing the PHY changes\n");
        }
        #line 741 
        return ret_val;
      }
    }
    #line 745 
    phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
  }
  #line 748 
  ret_val = e1e_wphy(hw,16U,(unsigned short)((int)phy_data));
  #line 749 
  if (ret_val != 0) 
                    #line 750 
                    return ret_val;
  #line 752 
  if ((phy->type == (unsigned int)e1000_phy_m88 && phy->revision <= 3U) && phy->id != 21040305U) {
    #line 758 
    ret_val = e1e_rphy(hw,20U,& phy_data);
    #line 759 
    if (ret_val != 0) 
                      #line 760 
                      return ret_val;
    #line 762 
    phy_data = (unsigned short)((unsigned int)phy_data | 112U);
    #line 764 
    if (phy->revision == 2U && phy->id == 21040320U) {
      #line 766 
      phy_data = (unsigned short)((unsigned int)phy_data & 61951U);
      #line 767 
      phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
    }
    else {
      #line 770 
      phy_data = (unsigned short)((unsigned int)phy_data & 61695U);
      #line 772 
      phy_data = (unsigned short)((unsigned int)phy_data | 256U);
    }
    #line 775 
    ret_val = e1e_wphy(hw,20U,(unsigned short)((int)phy_data));
    #line 776 
    if (ret_val != 0) 
                      #line 777 
                      return ret_val;
  }
  #line 780 
  if (phy->type == (unsigned int)e1000_phy_bm && phy->id == 21040305U) {
    #line 782 
    ret_val = e1e_wphy(hw,29U,(unsigned short)3);
    #line 783 
    if (ret_val != 0) 
                      #line 784 
                      return ret_val;
    #line 787 
    ret_val = e1e_wphy(hw,30U,(unsigned short)0);
    #line 788 
    if (ret_val != 0) 
                      #line 789 
                      return ret_val;
  }
  #line 793 
  if (phy->ops.commit != (s32 (*)(struct e1000_hw *))0) {
    #line 794 
    ret_val = (*(phy->ops.commit))(hw);
    #line 795 
    if (ret_val != 0) {
      {
        #line 796 
        bool branch_0;
        #line 796 
        struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_copper_link_setup_m88", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Error committing the PHY changes\n", .lineno = (unsigned int)796U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 796 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
        #line 796 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 796 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,(hw->adapter)->netdev,(char *)"Error committing the PHY changes\n");
      }
      #line 797 
      return ret_val;
    }
  }
  #line 801 
  if (phy->type == (unsigned int)e1000_phy_82578) {
    #line 802 
    ret_val = e1e_rphy(hw,20U,& phy_data);
    #line 803 
    if (ret_val != 0) 
                      #line 804 
                      return ret_val;
    #line 807 
    phy_data = (unsigned short)((unsigned int)phy_data | 32U);
    #line 808 
    phy_data = (unsigned short)((unsigned int)phy_data & 65507U);
    #line 809 
    ret_val = e1e_wphy(hw,20U,(unsigned short)((int)phy_data));
    #line 810 
    if (ret_val != 0) 
                      #line 811 
                      return ret_val;
  }
  #line 814 
  return 0;
}

#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_copper_link_setup_igp(struct e1000_hw *hw)
{
  #line 827 
  s32 ret_val;
  #line 828 
  u16 data;
  #line 826 
  struct e1000_phy_info *phy = & hw->phy;
  #line 830 
  ret_val = e1000_phy_hw_reset(hw);
  #line 831 
  if (ret_val != 0) {
    {
      #line 832 
      bool branch;
      #line 832 
      struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_copper_link_setup_igp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Error resetting the PHY.\n", .lineno = (unsigned int)832U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 832 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
      #line 832 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 832 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,(hw->adapter)->netdev,(char *)"Error resetting the PHY.\n");
    }
    #line 833 
    return ret_val;
  }
  #line 839 
  msleep(100U);
  #line 842 
  if (hw->phy.ops.set_d0_lplu_state != (s32 (*)(struct e1000_hw *, bool ))0) {
    #line 843 
    ret_val = (*(hw->phy.ops.set_d0_lplu_state))(hw,(_Bool)0);
    #line 844 
    if (ret_val != 0) {
      {
        #line 845 
        bool branch_0;
        #line 845 
        struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_copper_link_setup_igp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Error Disabling LPLU D0\n", .lineno = (unsigned int)845U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 845 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
        #line 845 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 845 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,(hw->adapter)->netdev,(char *)"Error Disabling LPLU D0\n");
      }
      #line 846 
      return ret_val;
    }
  }
  #line 850 
  ret_val = e1e_rphy(hw,18U,& data);
  #line 851 
  if (ret_val != 0) 
                    #line 852 
                    return ret_val;
  #line 854 
  data = (unsigned short)((unsigned int)data & 61439U);
  #line 856 
  switch ((int)phy->mdix) {
    #line 857 
    case 1: 
            #line 857 
    ;
    #line 858 
    data = (unsigned short)((unsigned int)data & 57343U);
    #line 859 
    break;
    #line 860 
    case 2: 
            #line 860 
    ;
    #line 861 
    data = (unsigned short)((unsigned int)data | 8192U);
    #line 862 
    break;
    #line 863 
    case 0: 
            #line 863 
    ;
    #line 864 
    default: 
             #line 864 
    ;
    #line 865 
    data = (unsigned short)((unsigned int)data | 4096U);
    #line 866 
    break;
  }
  #line 868 
  ret_val = e1e_wphy(hw,18U,(unsigned short)((int)data));
  #line 869 
  if (ret_val != 0) 
                    #line 870 
                    return ret_val;
  #line 873 
  if ((int)hw->mac.autoneg != 0) {
    #line 878 
    if ((unsigned int)phy->autoneg_advertised == 32U) {
      #line 880 
      ret_val = e1e_rphy(hw,16U,& data);
      #line 882 
      if (ret_val != 0) 
                        #line 883 
                        return ret_val;
      #line 885 
      data = (unsigned short)((unsigned int)data & 65407U);
      #line 886 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
      #line 888 
      if (ret_val != 0) 
                        #line 889 
                        return ret_val;
      #line 892 
      ret_val = e1e_rphy(hw,9U,& data);
      #line 893 
      if (ret_val != 0) 
                        #line 894 
                        return ret_val;
      #line 896 
      data = (unsigned short)((unsigned int)data & 61439U);
      #line 897 
      ret_val = e1e_wphy(hw,9U,(unsigned short)((int)data));
      #line 898 
      if (ret_val != 0) 
                        #line 899 
                        return ret_val;
    }
    #line 902 
    ret_val = e1000_set_master_slave_mode(hw);
  }
  #line 905 
  return ret_val;
}

#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 e1000_phy_setup_autoneg(struct e1000_hw *hw)
{
  #line 920 
  s32 ret_val;
  #line 921 
  u16 mii_autoneg_adv_reg;
  #line 919 
  struct e1000_phy_info *phy = & hw->phy;
  #line 922 
  u16 mii_1000t_ctrl_reg = (unsigned short)0U;
  #line 924 
  phy->autoneg_advertised = (unsigned short)((int)phy->autoneg_advertised & (int)phy->autoneg_mask);
  #line 927 
  ret_val = e1e_rphy(hw,4U,& mii_autoneg_adv_reg);
  #line 928 
  if (ret_val != 0) 
                    #line 929 
                    return ret_val;
  #line 931 
  if (((int)phy->autoneg_mask & 32) != 0) {
    #line 933 
    ret_val = e1e_rphy(hw,9U,& mii_1000t_ctrl_reg);
    #line 934 
    if (ret_val != 0) 
                      #line 935 
                      return ret_val;
  }
  #line 949 
  mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 65055U);
  #line 952 
  mii_1000t_ctrl_reg = (unsigned short)((unsigned int)mii_1000t_ctrl_reg & 64767U);
  {
    #line 954 
    bool branch;
    #line 954 
    struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"autoneg_advertised %x\n", .lineno = (unsigned int)954U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 954 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
    #line 954 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 954 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,(hw->adapter)->netdev,(char *)"autoneg_advertised %x\n",(int)phy->autoneg_advertised);
  }
  #line 957 
  if (((int)phy->autoneg_advertised & 1) != 0) {
    {
      #line 958 
      bool branch_0;
      #line 958 
      struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Advertise 10mb Half duplex\n", .lineno = (unsigned int)958U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 958 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
      #line 958 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 958 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug455,(hw->adapter)->netdev,(char *)"Advertise 10mb Half duplex\n");
    }
    #line 959 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 32U);
  }
  #line 963 
  if (((int)phy->autoneg_advertised & 2) != 0) {
    {
      #line 964 
      bool branch_1;
      #line 964 
      struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Advertise 10mb Full duplex\n", .lineno = (unsigned int)964U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 964 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
      #line 964 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 964 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug456,(hw->adapter)->netdev,(char *)"Advertise 10mb Full duplex\n");
    }
    #line 965 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 64U);
  }
  #line 969 
  if (((int)phy->autoneg_advertised & 4) != 0) {
    {
      #line 970 
      bool branch_2;
      #line 970 
      struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Advertise 100mb Half duplex\n", .lineno = (unsigned int)970U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 970 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
      #line 970 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 970 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,(hw->adapter)->netdev,(char *)"Advertise 100mb Half duplex\n");
    }
    #line 971 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 128U);
  }
  #line 975 
  if (((int)phy->autoneg_advertised & 8) != 0) {
    {
      #line 976 
      bool branch_3;
      #line 976 
      struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Advertise 100mb Full duplex\n", .lineno = (unsigned int)976U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 976 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
      #line 976 
      if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                    #line 976 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug458,(hw->adapter)->netdev,(char *)"Advertise 100mb Full duplex\n");
    }
    #line 977 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 256U);
  }
  #line 981 
  if (((int)phy->autoneg_advertised & 16) != 0) {
    #line 982 
    bool branch_4;
    #line 982 
    struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Advertise 1000mb Half duplex request denied!\n", .lineno = (unsigned int)982U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 982 
    branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
    #line 982 
    if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                  #line 982 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug459,(hw->adapter)->netdev,(char *)"Advertise 1000mb Half duplex request denied!\n");
  }
  #line 985 
  if (((int)phy->autoneg_advertised & 32) != 0) {
    {
      #line 986 
      bool branch_5;
      #line 986 
      struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Advertise 1000mb Full duplex\n", .lineno = (unsigned int)986U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 986 
      branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
      #line 986 
      if ((long)((long)((int)branch_5 != 0)) != 0L) 
                                                    #line 986 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug460,(hw->adapter)->netdev,(char *)"Advertise 1000mb Full duplex\n");
    }
    #line 987 
    mii_1000t_ctrl_reg = (unsigned short)((unsigned int)mii_1000t_ctrl_reg | 512U);
  }
  #line 1007 
  switch ((unsigned int)hw->fc.current_mode) {
    #line 1008 
    case (unsigned int)0: 
                          #line 1008 
    ;
    #line 1012 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 62463U);
    #line 1014 
    break;
    #line 1015 
    case (unsigned int)1: 
                          #line 1015 
    ;
    #line 1025 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 3072U);
    #line 1027 
    break;
    #line 1028 
    case (unsigned int)2: 
                          #line 1028 
    ;
    #line 1032 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 2048U);
    #line 1033 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 64511U);
    #line 1034 
    break;
    #line 1035 
    case (unsigned int)3: 
                          #line 1035 
    ;
    #line 1039 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 3072U);
    #line 1041 
    break;
    #line 1042 
    default: 
             #line 1042 
    ;
    {
      #line 1043 
      bool branch_6;
      #line 1043 
      struct _ddebug __UNIQUE_ID_ddebug461 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Flow control param set incorrectly\n", .lineno = (unsigned int)1043U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1043 
      branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug461.key.dd_key_false.key,(_Bool)0);
      #line 1043 
      if ((long)((long)((int)branch_6 != 0)) != 0L) 
                                                    #line 1043 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug461,(hw->adapter)->netdev,(char *)"Flow control param set incorrectly\n");
    }
    #line 1044 
    return -3;
  }
  #line 1047 
  ret_val = e1e_wphy(hw,4U,(unsigned short)((int)mii_autoneg_adv_reg));
  #line 1048 
  if (ret_val != 0) 
                    #line 1049 
                    return ret_val;
  {
    #line 1051 
    bool branch_7;
    #line 1051 
    struct _ddebug __UNIQUE_ID_ddebug462 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_setup_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Auto-Neg Advertising %x\n", .lineno = (unsigned int)1051U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1051 
    branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug462.key.dd_key_false.key,(_Bool)0);
    #line 1051 
    if ((long)((long)((int)branch_7 != 0)) != 0L) 
                                                  #line 1051 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug462,(hw->adapter)->netdev,(char *)"Auto-Neg Advertising %x\n",(int)mii_autoneg_adv_reg);
  }
  #line 1053 
  if (((int)phy->autoneg_mask & 32) != 0) 
                                          #line 1054 
                                          ret_val = e1e_wphy(hw,9U,(unsigned short)((int)mii_1000t_ctrl_reg));
  #line 1056 
  return ret_val;
}

#line 1068  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 e1000_copper_link_autoneg(struct e1000_hw *hw)
{
  #line 1071 
  s32 ret_val;
  #line 1072 
  u16 phy_ctrl;
  #line 1070 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1077 
  phy->autoneg_advertised = (unsigned short)((int)phy->autoneg_advertised & (int)phy->autoneg_mask);
  #line 1082 
  if ((unsigned int)phy->autoneg_advertised == 0U) 
                                                   #line 1083 
                                                   phy->autoneg_advertised = phy->autoneg_mask;
  {
    #line 1085 
    bool branch;
    #line 1085 
    struct _ddebug __UNIQUE_ID_ddebug463 = {.modname = (char *)"e1000e", .function = (char *)"e1000_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Reconfiguring auto-neg advertisement params\n", .lineno = (unsigned int)1085U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1085 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug463.key.dd_key_false.key,(_Bool)0);
    #line 1085 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1085 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug463,(hw->adapter)->netdev,(char *)"Reconfiguring auto-neg advertisement params\n");
  }
  #line 1086 
  ret_val = e1000_phy_setup_autoneg(hw);
  #line 1087 
  if (ret_val != 0) {
    {
      #line 1088 
      bool branch_0;
      #line 1088 
      struct _ddebug __UNIQUE_ID_ddebug464 = {.modname = (char *)"e1000e", .function = (char *)"e1000_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Error Setting up Auto-Negotiation\n", .lineno = (unsigned int)1088U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1088 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug464.key.dd_key_false.key,(_Bool)0);
      #line 1088 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1088 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug464,(hw->adapter)->netdev,(char *)"Error Setting up Auto-Negotiation\n");
    }
    #line 1089 
    return ret_val;
  }
  {
    #line 1091 
    bool branch_1;
    #line 1091 
    struct _ddebug __UNIQUE_ID_ddebug465 = {.modname = (char *)"e1000e", .function = (char *)"e1000_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Restarting Auto-Neg\n", .lineno = (unsigned int)1091U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1091 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug465.key.dd_key_false.key,(_Bool)0);
    #line 1091 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 1091 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug465,(hw->adapter)->netdev,(char *)"Restarting Auto-Neg\n");
  }
  #line 1096 
  ret_val = e1e_rphy(hw,0U,& phy_ctrl);
  #line 1097 
  if (ret_val != 0) 
                    #line 1098 
                    return ret_val;
  #line 1100 
  phy_ctrl = (unsigned short)((unsigned int)phy_ctrl | 4608U);
  #line 1101 
  ret_val = e1e_wphy(hw,0U,(unsigned short)((int)phy_ctrl));
  #line 1102 
  if (ret_val != 0) 
                    #line 1103 
                    return ret_val;
  #line 1108 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    #line 1109 
    ret_val = e1000_wait_autoneg(hw);
    #line 1110 
    if (ret_val != 0) {
      {
        #line 1111 
        bool branch_2;
        #line 1111 
        struct _ddebug __UNIQUE_ID_ddebug466 = {.modname = (char *)"e1000e", .function = (char *)"e1000_copper_link_autoneg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Error while waiting for autoneg to complete\n", .lineno = (unsigned int)1111U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1111 
        branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug466.key.dd_key_false.key,(_Bool)0);
        #line 1111 
        if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                      #line 1111 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug466,(hw->adapter)->netdev,(char *)"Error while waiting for autoneg to complete\n");
      }
      #line 1112 
      return ret_val;
    }
  }
  #line 1116 
  hw->mac.get_link_status = (_Bool)1;
  #line 1118 
  return ret_val;
}

#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_setup_copper_link(struct e1000_hw *hw)
{
  #line 1132 
  s32 ret_val;
  #line 1133 
  bool link;
  #line 1135 
  if ((int)hw->mac.autoneg != 0) {
    #line 1139 
    ret_val = e1000_copper_link_autoneg(hw);
    #line 1140 
    if (ret_val != 0) 
                      #line 1141 
                      return ret_val;
  }
  else {
    {
      #line 1146 
      bool branch;
      #line 1146 
      struct _ddebug __UNIQUE_ID_ddebug467 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Forcing Speed and Duplex\n", .lineno = (unsigned int)1146U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1146 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug467.key.dd_key_false.key,(_Bool)0);
      #line 1146 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1146 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug467,(hw->adapter)->netdev,(char *)"Forcing Speed and Duplex\n");
    }
    #line 1147 
    ret_val = (*(hw->phy.ops.force_speed_duplex))(hw);
    #line 1148 
    if (ret_val != 0) {
      {
        #line 1149 
        bool branch_0;
        #line 1149 
        struct _ddebug __UNIQUE_ID_ddebug468 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Error Forcing Speed and Duplex\n", .lineno = (unsigned int)1149U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1149 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug468.key.dd_key_false.key,(_Bool)0);
        #line 1149 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 1149 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug468,(hw->adapter)->netdev,(char *)"Error Forcing Speed and Duplex\n");
      }
      #line 1150 
      return ret_val;
    }
  }
  #line 1157 
  ret_val = e1000e_phy_has_link_generic(hw,10U,10U,& link);
  #line 1159 
  if (ret_val != 0) 
                    #line 1160 
                    return ret_val;
  #line 1162 
  if ((int)link != 0) {
    {
      #line 1163 
      bool branch_1;
      #line 1163 
      struct _ddebug __UNIQUE_ID_ddebug469 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Valid link established!!!\n", .lineno = (unsigned int)1163U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1163 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug469.key.dd_key_false.key,(_Bool)0);
      #line 1163 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 1163 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug469,(hw->adapter)->netdev,(char *)"Valid link established!!!\n");
    }
    #line 1164 
    (*(hw->mac.ops.config_collision_dist))(hw);
    #line 1165 
    ret_val = e1000e_config_fc_after_link_up(hw);
  }
  else {
    #line 1167 
    bool branch_2;
    #line 1167 
    struct _ddebug __UNIQUE_ID_ddebug470 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_setup_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Unable to establish link!!!\n", .lineno = (unsigned int)1167U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1167 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug470.key.dd_key_false.key,(_Bool)0);
    #line 1167 
    if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                  #line 1167 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug470,(hw->adapter)->netdev,(char *)"Unable to establish link!!!\n");
  }
  #line 1170 
  return ret_val;
}

#line 1181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_phy_force_speed_duplex_igp(struct e1000_hw *hw)
{
  #line 1184 
  s32 ret_val;
  #line 1185 
  u16 phy_data;
  #line 1186 
  bool link;
  #line 1183 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1188 
  ret_val = e1e_rphy(hw,0U,& phy_data);
  #line 1189 
  if (ret_val != 0) 
                    #line 1190 
                    return ret_val;
  #line 1192 
  e1000e_phy_force_speed_duplex_setup(hw,& phy_data);
  #line 1194 
  ret_val = e1e_wphy(hw,0U,(unsigned short)((int)phy_data));
  #line 1195 
  if (ret_val != 0) 
                    #line 1196 
                    return ret_val;
  #line 1201 
  ret_val = e1e_rphy(hw,18U,& phy_data);
  #line 1202 
  if (ret_val != 0) 
                    #line 1203 
                    return ret_val;
  #line 1205 
  phy_data = (unsigned short)((unsigned int)phy_data & 61439U);
  #line 1206 
  phy_data = (unsigned short)((unsigned int)phy_data & 57343U);
  #line 1208 
  ret_val = e1e_wphy(hw,18U,(unsigned short)((int)phy_data));
  #line 1209 
  if (ret_val != 0) 
                    #line 1210 
                    return ret_val;
  {
    #line 1212 
    bool branch;
    #line 1212 
    struct _ddebug __UNIQUE_ID_ddebug471 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_phy_force_speed_duplex_igp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"IGP PSCR: %X\n", .lineno = (unsigned int)1212U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1212 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug471.key.dd_key_false.key,(_Bool)0);
    #line 1212 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1212 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug471,(hw->adapter)->netdev,(char *)"IGP PSCR: %X\n",(int)phy_data);
  }
  #line 1214 
  __const_udelay(4295UL);
  #line 1216 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    {
      #line 1217 
      bool branch_0;
      #line 1217 
      struct _ddebug __UNIQUE_ID_ddebug472 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_phy_force_speed_duplex_igp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Waiting for forced speed/duplex link on IGP phy.\n", .lineno = (unsigned int)1217U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1217 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug472.key.dd_key_false.key,(_Bool)0);
      #line 1217 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1217 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug472,(hw->adapter)->netdev,(char *)"Waiting for forced speed/duplex link on IGP phy.\n");
    }
    #line 1219 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    #line 1221 
    if (ret_val != 0) 
                      #line 1222 
                      return ret_val;
    #line 1224 
    if (! link) {
      #line 1225 
      bool branch_1;
      #line 1225 
      struct _ddebug __UNIQUE_ID_ddebug473 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_phy_force_speed_duplex_igp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Link taking longer than expected.\n", .lineno = (unsigned int)1225U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1225 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug473.key.dd_key_false.key,(_Bool)0);
      #line 1225 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 1225 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug473,(hw->adapter)->netdev,(char *)"Link taking longer than expected.\n");
    }
    #line 1228 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
  }
  #line 1232 
  return ret_val;
}

#line 1245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_phy_force_speed_duplex_m88(struct e1000_hw *hw)
{
  #line 1248 
  s32 ret_val;
  #line 1249 
  u16 phy_data;
  #line 1250 
  bool link;
  #line 1247 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1255 
  ret_val = e1e_rphy(hw,16U,& phy_data);
  #line 1256 
  if (ret_val != 0) 
                    #line 1257 
                    return ret_val;
  #line 1259 
  phy_data = (unsigned short)((unsigned int)phy_data & 65439U);
  #line 1260 
  ret_val = e1e_wphy(hw,16U,(unsigned short)((int)phy_data));
  #line 1261 
  if (ret_val != 0) 
                    #line 1262 
                    return ret_val;
  {
    #line 1264 
    bool branch;
    #line 1264 
    struct _ddebug __UNIQUE_ID_ddebug474 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_phy_force_speed_duplex_m88", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"M88E1000 PSCR: %X\n", .lineno = (unsigned int)1264U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1264 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug474.key.dd_key_false.key,(_Bool)0);
    #line 1264 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1264 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug474,(hw->adapter)->netdev,(char *)"M88E1000 PSCR: %X\n",(int)phy_data);
  }
  #line 1266 
  ret_val = e1e_rphy(hw,0U,& phy_data);
  #line 1267 
  if (ret_val != 0) 
                    #line 1268 
                    return ret_val;
  #line 1270 
  e1000e_phy_force_speed_duplex_setup(hw,& phy_data);
  #line 1272 
  ret_val = e1e_wphy(hw,0U,(unsigned short)((int)phy_data));
  #line 1273 
  if (ret_val != 0) 
                    #line 1274 
                    return ret_val;
  #line 1277 
  if (hw->phy.ops.commit != (s32 (*)(struct e1000_hw *))0) {
    #line 1278 
    ret_val = (*(hw->phy.ops.commit))(hw);
    #line 1279 
    if (ret_val != 0) 
                      #line 1280 
                      return ret_val;
  }
  #line 1283 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    {
      #line 1284 
      bool branch_0;
      #line 1284 
      struct _ddebug __UNIQUE_ID_ddebug475 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_phy_force_speed_duplex_m88", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Waiting for forced speed/duplex link on M88 phy.\n", .lineno = (unsigned int)1284U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1284 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug475.key.dd_key_false.key,(_Bool)0);
      #line 1284 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1284 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug475,(hw->adapter)->netdev,(char *)"Waiting for forced speed/duplex link on M88 phy.\n");
    }
    #line 1286 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    #line 1288 
    if (ret_val != 0) 
                      #line 1289 
                      return ret_val;
    #line 1291 
    if (! link) 
      #line 1292 
      if (hw->phy.type != (unsigned int)e1000_phy_m88) {
        #line 1293 
        bool branch_1;
        #line 1293 
        struct _ddebug __UNIQUE_ID_ddebug476 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_phy_force_speed_duplex_m88", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Link taking longer than expected.\n", .lineno = (unsigned int)1293U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1293 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug476.key.dd_key_false.key,(_Bool)0);
        #line 1293 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 1293 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug476,(hw->adapter)->netdev,(char *)"Link taking longer than expected.\n");
      }
      else {
        #line 1298 
        ret_val = e1e_wphy(hw,29U,(unsigned short)29);
        #line 1300 
        if (ret_val != 0) 
                          #line 1301 
                          return ret_val;
        #line 1302 
        ret_val = e1000e_phy_reset_dsp(hw);
        #line 1303 
        if (ret_val != 0) 
                          #line 1304 
                          return ret_val;
      }
    #line 1309 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    #line 1311 
    if (ret_val != 0) 
                      #line 1312 
                      return ret_val;
  }
  #line 1315 
  if (hw->phy.type != (unsigned int)e1000_phy_m88) 
                                                   #line 1316 
                                                   return 0;
  #line 1318 
  ret_val = e1e_rphy(hw,20U,& phy_data);
  #line 1319 
  if (ret_val != 0) 
                    #line 1320 
                    return ret_val;
  #line 1326 
  phy_data = (unsigned short)((unsigned int)phy_data | 112U);
  #line 1327 
  ret_val = e1e_wphy(hw,20U,(unsigned short)((int)phy_data));
  #line 1328 
  if (ret_val != 0) 
                    #line 1329 
                    return ret_val;
  #line 1334 
  ret_val = e1e_rphy(hw,16U,& phy_data);
  #line 1335 
  if (ret_val != 0) 
                    #line 1336 
                    return ret_val;
  #line 1338 
  phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
  #line 1339 
  ret_val = e1e_wphy(hw,16U,(unsigned short)((int)phy_data));
  #line 1341 
  return ret_val;
}

#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_phy_force_speed_duplex_ife(struct e1000_hw *hw)
{
  #line 1355 
  s32 ret_val;
  #line 1356 
  u16 data;
  #line 1357 
  bool link;
  #line 1354 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1359 
  ret_val = e1e_rphy(hw,0U,& data);
  #line 1360 
  if (ret_val != 0) 
                    #line 1361 
                    return ret_val;
  #line 1363 
  e1000e_phy_force_speed_duplex_setup(hw,& data);
  #line 1365 
  ret_val = e1e_wphy(hw,0U,(unsigned short)((int)data));
  #line 1366 
  if (ret_val != 0) 
                    #line 1367 
                    return ret_val;
  #line 1370 
  ret_val = e1e_rphy(hw,28U,& data);
  #line 1371 
  if (ret_val != 0) 
                    #line 1372 
                    return ret_val;
  #line 1374 
  data = (unsigned short)((unsigned int)data & 65407U);
  #line 1375 
  data = (unsigned short)((unsigned int)data & 65471U);
  #line 1377 
  ret_val = e1e_wphy(hw,28U,(unsigned short)((int)data));
  #line 1378 
  if (ret_val != 0) 
                    #line 1379 
                    return ret_val;
  {
    #line 1381 
    bool branch;
    #line 1381 
    struct _ddebug __UNIQUE_ID_ddebug477 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_force_speed_duplex_ife", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"IFE PMC: %X\n", .lineno = (unsigned int)1381U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1381 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug477.key.dd_key_false.key,(_Bool)0);
    #line 1381 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1381 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug477,(hw->adapter)->netdev,(char *)"IFE PMC: %X\n",(int)data);
  }
  #line 1383 
  __const_udelay(4295UL);
  #line 1385 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    {
      #line 1386 
      bool branch_0;
      #line 1386 
      struct _ddebug __UNIQUE_ID_ddebug478 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_force_speed_duplex_ife", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Waiting for forced speed/duplex link on IFE phy.\n", .lineno = (unsigned int)1386U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1386 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug478.key.dd_key_false.key,(_Bool)0);
      #line 1386 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1386 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug478,(hw->adapter)->netdev,(char *)"Waiting for forced speed/duplex link on IFE phy.\n");
    }
    #line 1388 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    #line 1390 
    if (ret_val != 0) 
                      #line 1391 
                      return ret_val;
    #line 1393 
    if (! link) {
      #line 1394 
      bool branch_1;
      #line 1394 
      struct _ddebug __UNIQUE_ID_ddebug479 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_force_speed_duplex_ife", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Link taking longer than expected.\n", .lineno = (unsigned int)1394U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1394 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug479.key.dd_key_false.key,(_Bool)0);
      #line 1394 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 1394 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug479,(hw->adapter)->netdev,(char *)"Link taking longer than expected.\n");
    }
    #line 1397 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    #line 1399 
    if (ret_val != 0) 
                      #line 1400 
                      return ret_val;
  }
  #line 1403 
  return 0;
}

#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
void e1000e_phy_force_speed_duplex_setup(struct e1000_hw *hw, u16 *phy_ctrl)
{
  #line 1421 
  u32 ctrl;
  #line 1420 
  struct e1000_mac_info *mac = & hw->mac;
  #line 1424 
  hw->fc.current_mode = e1000_fc_none;
  #line 1427 
  ctrl = __er32(hw,0UL);
  #line 1428 
  ctrl |= 6144U;
  #line 1429 
  ctrl &= 4294966527U;
  #line 1432 
  ctrl &= 4294967263U;
  #line 1435 
  *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 61439U);
  #line 1438 
  if (((int)mac->forced_speed_duplex & 5) != 0) {
    #line 1439 
    ctrl &= 4294967294U;
    #line 1440 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 65279U);
    {
      #line 1441 
      bool branch;
      #line 1441 
      struct _ddebug __UNIQUE_ID_ddebug480 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_phy_force_speed_duplex_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Half Duplex\n", .lineno = (unsigned int)1441U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1441 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug480.key.dd_key_false.key,(_Bool)0);
      #line 1441 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1441 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug480,(hw->adapter)->netdev,(char *)"Half Duplex\n");
    }
  }
  else {
    #line 1443 
    ctrl |= 1U;
    #line 1444 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl | 256U);
    {
      #line 1445 
      bool branch_0;
      #line 1445 
      struct _ddebug __UNIQUE_ID_ddebug481 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_phy_force_speed_duplex_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Full Duplex\n", .lineno = (unsigned int)1445U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1445 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug481.key.dd_key_false.key,(_Bool)0);
      #line 1445 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1445 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug481,(hw->adapter)->netdev,(char *)"Full Duplex\n");
    }
  }
  #line 1449 
  if (((int)mac->forced_speed_duplex & 12) != 0) {
    #line 1450 
    ctrl |= 256U;
    #line 1451 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl | 8192U);
    #line 1452 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 65471U);
    {
      #line 1453 
      bool branch_1;
      #line 1453 
      struct _ddebug __UNIQUE_ID_ddebug482 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_phy_force_speed_duplex_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Forcing 100mb\n", .lineno = (unsigned int)1453U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1453 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug482.key.dd_key_false.key,(_Bool)0);
      #line 1453 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 1453 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug482,(hw->adapter)->netdev,(char *)"Forcing 100mb\n");
    }
  }
  else {
    #line 1455 
    ctrl &= 4294966527U;
    #line 1456 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 57279U);
    {
      #line 1457 
      bool branch_2;
      #line 1457 
      struct _ddebug __UNIQUE_ID_ddebug483 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_phy_force_speed_duplex_setup", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Forcing 10mb\n", .lineno = (unsigned int)1457U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1457 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug483.key.dd_key_false.key,(_Bool)0);
      #line 1457 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 1457 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug483,(hw->adapter)->netdev,(char *)"Forcing 10mb\n");
    }
  }
  #line 1460 
  (*(hw->mac.ops.config_collision_dist))(hw);
  #line 1462 
  __ew32(hw,0UL,ctrl);
  #line 1463 
  return;
}

#line 1479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_set_d3_lplu_state(struct e1000_hw *hw, bool active)
{
  #line 1482 
  s32 ret_val;
  #line 1483 
  u16 data;
  #line 1481 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1485 
  ret_val = e1e_rphy(hw,25U,& data);
  #line 1486 
  if (ret_val != 0) 
                    #line 1487 
                    return ret_val;
  #line 1489 
  if (! active) {
    #line 1490 
    data = (unsigned short)((unsigned int)data & 65531U);
    #line 1491 
    ret_val = e1e_wphy(hw,25U,(unsigned short)((int)data));
    #line 1492 
    if (ret_val != 0) 
                      #line 1493 
                      return ret_val;
    #line 1499 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) {
      #line 1500 
      ret_val = e1e_rphy(hw,16U,& data);
      #line 1502 
      if (ret_val != 0) 
                        #line 1503 
                        return ret_val;
      #line 1505 
      data = (unsigned short)((unsigned int)data | 128U);
      #line 1506 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
      #line 1508 
      if (ret_val != 0) 
                        #line 1509 
                        return ret_val;
    }
    else 
      #line 1510 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) {
        #line 1511 
        ret_val = e1e_rphy(hw,16U,& data);
        #line 1513 
        if (ret_val != 0) 
                          #line 1514 
                          return ret_val;
        #line 1516 
        data = (unsigned short)((unsigned int)data & 65407U);
        #line 1517 
        ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
        #line 1519 
        if (ret_val != 0) 
                          #line 1520 
                          return ret_val;
      }
  }
  else 
    #line 1522 
    if (((unsigned int)phy->autoneg_advertised == 47U || (unsigned int)phy->autoneg_advertised == 15U) || (unsigned int)phy->autoneg_advertised == 3U) {
      #line 1525 
      data = (unsigned short)((unsigned int)data | 4U);
      #line 1526 
      ret_val = e1e_wphy(hw,25U,(unsigned short)((int)data));
      #line 1527 
      if (ret_val != 0) 
                        #line 1528 
                        return ret_val;
      #line 1531 
      ret_val = e1e_rphy(hw,16U,& data);
      #line 1532 
      if (ret_val != 0) 
                        #line 1533 
                        return ret_val;
      #line 1535 
      data = (unsigned short)((unsigned int)data & 65407U);
      #line 1536 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
    }
  #line 1539 
  return ret_val;
}

#line 1550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_check_downshift(struct e1000_hw *hw)
{
  #line 1553 
  s32 ret_val;
  #line 1554 
  u16 phy_data;
  #line 1554 
  u16 offset;
  #line 1554 
  u16 mask;
  #line 1552 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1556 
  switch ((unsigned int)phy->type) {
    #line 1557 
    case (unsigned int)2: 
                          #line 1557 
    ;
    #line 1558 
    case (unsigned int)5: 
                          #line 1558 
    ;
    #line 1559 
    case (unsigned int)8: 
                          #line 1559 
    ;
    #line 1560 
    case (unsigned int)9: 
                          #line 1560 
    ;
    #line 1561 
    offset = (unsigned short)17U;
    #line 1562 
    mask = (unsigned short)32U;
    #line 1563 
    break;
    #line 1564 
    case (unsigned int)4: 
                          #line 1564 
    ;
    #line 1565 
    case (unsigned int)6: 
                          #line 1565 
    ;
    #line 1566 
    offset = (unsigned short)19U;
    #line 1567 
    mask = (unsigned short)32768U;
    #line 1568 
    break;
    #line 1569 
    default: 
             #line 1569 
    ;
    #line 1571 
    phy->speed_downgraded = (_Bool)0;
    #line 1572 
    return 0;
  }
  #line 1575 
  ret_val = e1e_rphy(hw,(unsigned int)offset,& phy_data);
  #line 1577 
  if (ret_val == 0) 
                    #line 1578 
                    phy->speed_downgraded = (_Bool)((unsigned int)((int)phy_data & (int)mask) != 0U);
  #line 1580 
  return ret_val;
}

#line 1591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_check_polarity_m88(struct e1000_hw *hw)
{
  #line 1594 
  s32 ret_val;
  #line 1595 
  u16 data;
  #line 1593 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1597 
  ret_val = e1e_rphy(hw,17U,& data);
  #line 1599 
  if (ret_val == 0) 
                    #line 1600 
                    phy->cable_polarity = (enum e1000_rev_polarity)(((int)data >> 1) & 1);
  #line 1604 
  return ret_val;
}

#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_check_polarity_igp(struct e1000_hw *hw)
{
  #line 1619 
  s32 ret_val;
  #line 1620 
  u16 data;
  #line 1620 
  u16 offset;
  #line 1620 
  u16 mask;
  #line 1618 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1625 
  ret_val = e1e_rphy(hw,17U,& data);
  #line 1626 
  if (ret_val != 0) 
                    #line 1627 
                    return ret_val;
  #line 1629 
  if (((int)data & 49152) == 49152) {
    #line 1631 
    offset = (unsigned short)180U;
    #line 1632 
    mask = (unsigned short)120U;
  }
  else {
    #line 1637 
    offset = (unsigned short)17U;
    #line 1638 
    mask = (unsigned short)2U;
  }
  #line 1641 
  ret_val = e1e_rphy(hw,(unsigned int)offset,& data);
  #line 1643 
  if (ret_val == 0) 
                    #line 1644 
                    phy->cable_polarity = (enum e1000_rev_polarity)((unsigned int)((int)data & (int)mask) != 0U);
  #line 1648 
  return ret_val;
}

#line 1657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_check_polarity_ife(struct e1000_hw *hw)
{
  #line 1660 
  s32 ret_val;
  #line 1661 
  u16 phy_data;
  #line 1661 
  u16 offset;
  #line 1661 
  u16 mask;
  #line 1659 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1665 
  if ((int)phy->polarity_correction != 0) {
    #line 1666 
    offset = (unsigned short)16U;
    #line 1667 
    mask = (unsigned short)256U;
  }
  else {
    #line 1669 
    offset = (unsigned short)17U;
    #line 1670 
    mask = (unsigned short)32U;
  }
  #line 1673 
  ret_val = e1e_rphy(hw,(unsigned int)offset,& phy_data);
  #line 1675 
  if (ret_val == 0) 
                    #line 1676 
                    phy->cable_polarity = (enum e1000_rev_polarity)((unsigned int)((int)phy_data & (int)mask) != 0U);
  #line 1680 
  return ret_val;
}

#line 1690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 e1000_wait_autoneg(struct e1000_hw *hw)
{
  #line 1693 
  u16 i;
  #line 1693 
  u16 phy_status;
  #line 1692 
  s32 ret_val = 0;
  #line 1696 
  i = (unsigned short)45U;
  #line 1696 
  while ((unsigned int)i != 0U) {
    #line 1697 
    ret_val = e1e_rphy(hw,1U,& phy_status);
    #line 1698 
    if (ret_val != 0) 
                      #line 1699 
                      break;
    #line 1700 
    ret_val = e1e_rphy(hw,1U,& phy_status);
    #line 1701 
    if (ret_val != 0) 
                      #line 1702 
                      break;
    #line 1703 
    if (((int)phy_status & 32) != 0) 
                                     #line 1704 
                                     break;
    #line 1705 
    msleep(100U);
    #line 1696 
    i = (u16)((int)i - 1);
  }
  #line 1711 
  return ret_val;
}

#line 1723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_phy_has_link_generic(struct e1000_hw *hw, u32 iterations, u32 usec_interval, bool *success)
{
  #line 1727 
  u16 i;
  #line 1727 
  u16 phy_status;
  #line 1726 
  s32 ret_val = 0;
  #line 1729 
  *success = (_Bool)0;
  #line 1730 
  i = (unsigned short)0U;
  #line 1730 
  while ((unsigned int)i < iterations) {
    #line 1735 
    ret_val = e1e_rphy(hw,1U,& phy_status);
    #line 1736 
    if (ret_val != 0) 
      #line 1741 
      if (usec_interval > 999U) 
                                #line 1742 
                                msleep(usec_interval / 1000U);
      else 
        #line 1744 
        if (0 != 0) 
          #line 1744 
          if (usec_interval > 19999U) 
                                      #line 1744 
                                      __bad_udelay(); else 
                                                           #line 1744 
                                                           __const_udelay((unsigned long)usec_interval * 4295UL);
        else 
             #line 1744 
             __udelay((unsigned long)usec_interval);
    #line 1746 
    ret_val = e1e_rphy(hw,1U,& phy_status);
    #line 1747 
    if (ret_val != 0) 
                      #line 1748 
                      break;
    #line 1749 
    if (((int)phy_status & 4) != 0) {
      #line 1750 
      *success = (_Bool)1;
      #line 1751 
      break;
    }
    #line 1753 
    if (usec_interval > 999U) 
                              #line 1754 
                              msleep(usec_interval / 1000U);
    else 
      #line 1756 
      if (0 != 0) 
        #line 1756 
        if (usec_interval > 19999U) 
                                    #line 1756 
                                    __bad_udelay(); else 
                                                         #line 1756 
                                                         __const_udelay((unsigned long)usec_interval * 4295UL);
      else 
           #line 1756 
           __udelay((unsigned long)usec_interval);
    #line 1730 
    i = (u16)((int)i + 1);
  }
  #line 1759 
  return ret_val;
}

#line 1777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_get_cable_length_m88(struct e1000_hw *hw)
{
  #line 1780 
  s32 ret_val;
  #line 1781 
  u16 phy_data;
  #line 1781 
  u16 index;
  #line 1779 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1783 
  ret_val = e1e_rphy(hw,17U,& phy_data);
  #line 1784 
  if (ret_val != 0) 
                    #line 1785 
                    return ret_val;
  #line 1787 
  index = (unsigned short)((unsigned int)((unsigned short)((int)phy_data >> 7)) & 7U);
  #line 1790 
  if ((unsigned int)index > 5U) 
                                #line 1791 
                                return -2;
  #line 1793 
  phy->min_cable_length = e1000_m88_cable_length_table[(int)index];
  #line 1794 
  phy->max_cable_length = e1000_m88_cable_length_table[(int)index + 1];
  #line 1796 
  phy->cable_length = (unsigned short)(((int)phy->min_cable_length + (int)phy->max_cable_length) / 2);
  #line 1798 
  return 0;
}

#line 1812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_get_cable_length_igp_2(struct e1000_hw *hw)
{
  #line 1815 
  s32 ret_val;
  #line 1816 
  u16 phy_data;
  #line 1816 
  u16 i;
  #line 1817 
  u16 cur_agc_index;
  #line 1861 
  unsigned int tmp;
  #line 1814 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1816 
  u16 agc_value = (unsigned short)0U;
  #line 1817 
  u16 max_agc_index = (unsigned short)0U;
  #line 1818 
  u16 min_agc_index = (unsigned short)112U;
  #line 1819 
  u16 agc_reg_array[4U] = {(unsigned short)4529U, (unsigned short)4785U, (unsigned short)5297U, (unsigned short)6321U};
  #line 1827 
  i = (unsigned short)0U;
  #line 1827 
  while ((unsigned int)i <= 3U) {
    #line 1828 
    ret_val = e1e_rphy(hw,(unsigned int)agc_reg_array[(int)i],& phy_data);
    #line 1829 
    if (ret_val != 0) 
                      #line 1830 
                      return ret_val;
    #line 1837 
    cur_agc_index = (unsigned short)((int)phy_data >> 9);
    #line 1841 
    if ((unsigned int)cur_agc_index + 65535U > 111U) 
                                                     #line 1843 
                                                     return -2;
    #line 1846 
    if ((int)e1000_igp_2_cable_length_table[(int)min_agc_index] > (int)e1000_igp_2_cable_length_table[(int)cur_agc_index]) 
      #line 1848 
      min_agc_index = cur_agc_index;
    #line 1849 
    if ((int)e1000_igp_2_cable_length_table[(int)max_agc_index] < (int)e1000_igp_2_cable_length_table[(int)cur_agc_index]) 
      #line 1851 
      max_agc_index = cur_agc_index;
    #line 1853 
    agc_value = (unsigned short)((int)e1000_igp_2_cable_length_table[(int)cur_agc_index] + (int)agc_value);
    #line 1827 
    i = (u16)((int)i + 1);
  }
  #line 1856 
  agc_value = (unsigned short)((int)agc_value - ((int)e1000_igp_2_cable_length_table[(int)min_agc_index] + (int)e1000_igp_2_cable_length_table[(int)max_agc_index]));
  #line 1858 
  agc_value = (unsigned short)((unsigned int)agc_value / 2U);
  #line 1861 
  if (15U > (unsigned int)agc_value) 
                                     #line 1861 
                                     tmp = 15U; else 
                                                     #line 1861 
                                                     tmp = (unsigned int)agc_value;
  #line 1861 
  phy->min_cable_length = (unsigned short)(tmp + 65521U);
  #line 1863 
  phy->max_cable_length = (unsigned short)((unsigned int)agc_value + 15U);
  #line 1865 
  phy->cable_length = (unsigned short)(((int)phy->min_cable_length + (int)phy->max_cable_length) / 2);
  #line 1867 
  return 0;
}

#line 1880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_get_phy_info_m88(struct e1000_hw *hw)
{
  #line 1883 
  s32 ret_val;
  #line 1884 
  u16 phy_data;
  #line 1885 
  bool link;
  #line 1882 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1887 
  if (phy->media_type != (unsigned int)e1000_media_type_copper) {
    {
      #line 1888 
      bool branch;
      #line 1888 
      struct _ddebug __UNIQUE_ID_ddebug484 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_get_phy_info_m88", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Phy info is only valid for copper media\n", .lineno = (unsigned int)1888U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1888 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug484.key.dd_key_false.key,(_Bool)0);
      #line 1888 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1888 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug484,(hw->adapter)->netdev,(char *)"Phy info is only valid for copper media\n");
    }
    #line 1889 
    return -3;
  }
  #line 1892 
  ret_val = e1000e_phy_has_link_generic(hw,1U,0U,& link);
  #line 1893 
  if (ret_val != 0) 
                    #line 1894 
                    return ret_val;
  #line 1896 
  if (! link) {
    {
      #line 1897 
      bool branch_0;
      #line 1897 
      struct _ddebug __UNIQUE_ID_ddebug485 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_get_phy_info_m88", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Phy info is only valid if link is up\n", .lineno = (unsigned int)1897U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1897 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug485.key.dd_key_false.key,(_Bool)0);
      #line 1897 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1897 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug485,(hw->adapter)->netdev,(char *)"Phy info is only valid if link is up\n");
    }
    #line 1898 
    return -3;
  }
  #line 1901 
  ret_val = e1e_rphy(hw,16U,& phy_data);
  #line 1902 
  if (ret_val != 0) 
                    #line 1903 
                    return ret_val;
  #line 1905 
  phy->polarity_correction = (_Bool)(((int)phy_data & 2) != 0);
  #line 1908 
  ret_val = e1000_check_polarity_m88(hw);
  #line 1909 
  if (ret_val != 0) 
                    #line 1910 
                    return ret_val;
  #line 1912 
  ret_val = e1e_rphy(hw,17U,& phy_data);
  #line 1913 
  if (ret_val != 0) 
                    #line 1914 
                    return ret_val;
  #line 1916 
  phy->is_mdix = (_Bool)(((int)phy_data & 64) != 0);
  #line 1918 
  if (((int)phy_data & 49152) == 32768) {
    #line 1919 
    ret_val = (*(hw->phy.ops.get_cable_length))(hw);
    #line 1920 
    if (ret_val != 0) 
                      #line 1921 
                      return ret_val;
    #line 1923 
    ret_val = e1e_rphy(hw,10U,& phy_data);
    #line 1924 
    if (ret_val != 0) 
                      #line 1925 
                      return ret_val;
    #line 1927 
    phy->local_rx = (enum e1000_1000t_rx_status)(((int)phy_data >> 13) & 1);
    #line 1930 
    phy->remote_rx = (enum e1000_1000t_rx_status)(((int)phy_data >> 12) & 1);
  }
  else {
    #line 1934 
    phy->cable_length = (unsigned short)255U;
    #line 1935 
    phy->local_rx = e1000_1000t_rx_status_undefined;
    #line 1936 
    phy->remote_rx = e1000_1000t_rx_status_undefined;
  }
  #line 1939 
  return ret_val;
}

#line 1951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_get_phy_info_igp(struct e1000_hw *hw)
{
  #line 1954 
  s32 ret_val;
  #line 1955 
  u16 data;
  #line 1956 
  bool link;
  #line 1953 
  struct e1000_phy_info *phy = & hw->phy;
  #line 1958 
  ret_val = e1000e_phy_has_link_generic(hw,1U,0U,& link);
  #line 1959 
  if (ret_val != 0) 
                    #line 1960 
                    return ret_val;
  #line 1962 
  if (! link) {
    {
      #line 1963 
      bool branch;
      #line 1963 
      struct _ddebug __UNIQUE_ID_ddebug486 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_get_phy_info_igp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Phy info is only valid if link is up\n", .lineno = (unsigned int)1963U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1963 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug486.key.dd_key_false.key,(_Bool)0);
      #line 1963 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1963 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug486,(hw->adapter)->netdev,(char *)"Phy info is only valid if link is up\n");
    }
    #line 1964 
    return -3;
  }
  #line 1967 
  phy->polarity_correction = (_Bool)1;
  #line 1969 
  ret_val = e1000_check_polarity_igp(hw);
  #line 1970 
  if (ret_val != 0) 
                    #line 1971 
                    return ret_val;
  #line 1973 
  ret_val = e1e_rphy(hw,17U,& data);
  #line 1974 
  if (ret_val != 0) 
                    #line 1975 
                    return ret_val;
  #line 1977 
  phy->is_mdix = (_Bool)(((int)data & 2048) != 0);
  #line 1979 
  if (((int)data & 49152) == 49152) {
    #line 1981 
    ret_val = (*(phy->ops.get_cable_length))(hw);
    #line 1982 
    if (ret_val != 0) 
                      #line 1983 
                      return ret_val;
    #line 1985 
    ret_val = e1e_rphy(hw,10U,& data);
    #line 1986 
    if (ret_val != 0) 
                      #line 1987 
                      return ret_val;
    #line 1989 
    phy->local_rx = (enum e1000_1000t_rx_status)(((int)data >> 13) & 1);
    #line 1992 
    phy->remote_rx = (enum e1000_1000t_rx_status)(((int)data >> 12) & 1);
  }
  else {
    #line 1995 
    phy->cable_length = (unsigned short)255U;
    #line 1996 
    phy->local_rx = e1000_1000t_rx_status_undefined;
    #line 1997 
    phy->remote_rx = e1000_1000t_rx_status_undefined;
  }
  #line 2000 
  return ret_val;
}

#line 2009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_get_phy_info_ife(struct e1000_hw *hw)
{
  #line 2012 
  s32 ret_val;
  #line 2013 
  u16 data;
  #line 2014 
  bool link;
  #line 2011 
  struct e1000_phy_info *phy = & hw->phy;
  #line 2016 
  ret_val = e1000e_phy_has_link_generic(hw,1U,0U,& link);
  #line 2017 
  if (ret_val != 0) 
                    #line 2018 
                    return ret_val;
  #line 2020 
  if (! link) {
    {
      #line 2021 
      bool branch;
      #line 2021 
      struct _ddebug __UNIQUE_ID_ddebug487 = {.modname = (char *)"e1000e", .function = (char *)"e1000_get_phy_info_ife", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Phy info is only valid if link is up\n", .lineno = (unsigned int)2021U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2021 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug487.key.dd_key_false.key,(_Bool)0);
      #line 2021 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2021 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug487,(hw->adapter)->netdev,(char *)"Phy info is only valid if link is up\n");
    }
    #line 2022 
    return -3;
  }
  #line 2025 
  ret_val = e1e_rphy(hw,17U,& data);
  #line 2026 
  if (ret_val != 0) 
                    #line 2027 
                    return ret_val;
  #line 2028 
  phy->polarity_correction = (_Bool)(((int)data & 16) == 0);
  #line 2030 
  if ((int)phy->polarity_correction != 0) {
    #line 2031 
    ret_val = e1000_check_polarity_ife(hw);
    #line 2032 
    if (ret_val != 0) 
                      #line 2033 
                      return ret_val;
  }
  else 
       #line 2036 
       phy->cable_polarity = (enum e1000_rev_polarity)(((int)data >> 5) & 1);
  #line 2041 
  ret_val = e1e_rphy(hw,28U,& data);
  #line 2042 
  if (ret_val != 0) 
                    #line 2043 
                    return ret_val;
  #line 2045 
  phy->is_mdix = (_Bool)(((int)data & 32) != 0);
  #line 2048 
  phy->cable_length = (unsigned short)255U;
  #line 2049 
  phy->local_rx = e1000_1000t_rx_status_undefined;
  #line 2050 
  phy->remote_rx = e1000_1000t_rx_status_undefined;
  #line 2052 
  return 0;
}

#line 2062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_phy_sw_reset(struct e1000_hw *hw)
{
  #line 2064 
  s32 ret_val;
  #line 2065 
  u16 phy_ctrl;
  #line 2067 
  ret_val = e1e_rphy(hw,0U,& phy_ctrl);
  #line 2068 
  if (ret_val != 0) 
                    #line 2069 
                    return ret_val;
  #line 2071 
  phy_ctrl = (unsigned short)((unsigned int)phy_ctrl | 32768U);
  #line 2072 
  ret_val = e1e_wphy(hw,0U,(unsigned short)((int)phy_ctrl));
  #line 2073 
  if (ret_val != 0) 
                    #line 2074 
                    return ret_val;
  #line 2076 
  __const_udelay(4295UL);
  #line 2078 
  return ret_val;
}

#line 2090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_phy_hw_reset_generic(struct e1000_hw *hw)
{
  #line 2093 
  s32 ret_val;
  #line 2094 
  u32 ctrl;
  #line 2092 
  struct e1000_phy_info *phy = & hw->phy;
  #line 2096 
  if (phy->ops.check_reset_block != (s32 (*)(struct e1000_hw *))0) {
    #line 2097 
    ret_val = (*(phy->ops.check_reset_block))(hw);
    #line 2098 
    if (ret_val != 0) 
                      #line 2099 
                      return 0;
  }
  #line 2102 
  ret_val = (*(phy->ops.acquire))(hw);
  #line 2103 
  if (ret_val != 0) 
                    #line 2104 
                    return ret_val;
  #line 2106 
  ctrl = __er32(hw,0UL);
  #line 2107 
  __ew32(hw,0UL,ctrl | 2147483648U);
  #line 2108 
  __er32(hw,8UL);
  #line 2110 
  if (0 != 0) 
    #line 2110 
    if (phy->reset_delay_us > 19999U) 
                                      #line 2110 
                                      __bad_udelay(); else 
                                                           #line 2110 
                                                           __const_udelay((unsigned long)phy->reset_delay_us * 4295UL);
  else 
       #line 2110 
       __udelay((unsigned long)phy->reset_delay_us);
  #line 2112 
  __ew32(hw,0UL,ctrl);
  #line 2113 
  __er32(hw,8UL);
  #line 2115 
  usleep_range(150UL,300UL);
  #line 2117 
  (*(phy->ops.release))(hw);
  #line 2119 
  return (*(phy->ops.get_cfg_done))(hw);
}

#line 2129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_get_cfg_done_generic(struct e1000_hw *hw)
{
  {
    #line 2131 
    unsigned long __ms = 10UL;
    #line 2131 
    while (1) {
      #line 2131 
      unsigned long tmp;
      #line 2131 
      tmp = __ms;
      #line 2131 
      __ms --;
      #line 2131 
      ;
      #line 2131 
      if (! (tmp != 0UL)) 
                          #line 2131 
                          break;
      #line 2131 
      __const_udelay(4295000UL);
    }
  }
  #line 2133 
  return 0;
}

#line 2142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_phy_init_script_igp3(struct e1000_hw *hw)
{
  {
    #line 2144 
    bool branch;
    #line 2144 
    struct _ddebug __UNIQUE_ID_ddebug488 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_phy_init_script_igp3", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Running IGP 3 PHY init script\n", .lineno = (unsigned int)2144U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2144 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug488.key.dd_key_false.key,(_Bool)0);
    #line 2144 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2144 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug488,(hw->adapter)->netdev,(char *)"Running IGP 3 PHY init script\n");
  }
  #line 2148 
  e1e_wphy(hw,12123U,(unsigned short)36888);
  #line 2150 
  e1e_wphy(hw,12114U,(unsigned short)0);
  #line 2152 
  e1e_wphy(hw,12209U,(unsigned short)35620);
  #line 2154 
  e1e_wphy(hw,12210U,(unsigned short)63728);
  #line 2156 
  e1e_wphy(hw,8208U,(unsigned short)4272);
  #line 2158 
  e1e_wphy(hw,8209U,(unsigned short)0);
  #line 2160 
  e1e_wphy(hw,8413U,(unsigned short)9370);
  #line 2162 
  e1e_wphy(hw,8414U,(unsigned short)211);
  #line 2164 
  e1e_wphy(hw,10420U,(unsigned short)1230);
  #line 2166 
  e1e_wphy(hw,12144U,(unsigned short)10724);
  #line 2168 
  e1e_wphy(hw,0U,(unsigned short)320);
  #line 2170 
  e1e_wphy(hw,7984U,(unsigned short)5638);
  #line 2172 
  e1e_wphy(hw,7985U,(unsigned short)47124);
  #line 2174 
  e1e_wphy(hw,7989U,(unsigned short)42);
  #line 2176 
  e1e_wphy(hw,7998U,(unsigned short)103);
  #line 2178 
  e1e_wphy(hw,8020U,(unsigned short)101);
  #line 2180 
  e1e_wphy(hw,8021U,(unsigned short)42);
  #line 2182 
  e1e_wphy(hw,8022U,(unsigned short)42);
  #line 2184 
  e1e_wphy(hw,8050U,(unsigned short)16304);
  #line 2186 
  e1e_wphy(hw,8054U,(unsigned short)49407);
  #line 2188 
  e1e_wphy(hw,8055U,(unsigned short)7660);
  #line 2190 
  e1e_wphy(hw,8056U,(unsigned short)63983);
  #line 2192 
  e1e_wphy(hw,8057U,(unsigned short)528);
  #line 2194 
  e1e_wphy(hw,6293U,(unsigned short)3);
  #line 2196 
  e1e_wphy(hw,6038U,(unsigned short)8);
  #line 2198 
  e1e_wphy(hw,6040U,(unsigned short)53256);
  #line 2202 
  e1e_wphy(hw,6296U,(unsigned short)55576);
  #line 2204 
  e1e_wphy(hw,6266U,(unsigned short)2048);
  #line 2208 
  e1e_wphy(hw,25U,(unsigned short)141);
  #line 2210 
  e1e_wphy(hw,27U,(unsigned short)8320);
  #line 2212 
  e1e_wphy(hw,20U,(unsigned short)69);
  #line 2214 
  e1e_wphy(hw,0U,(unsigned short)4928);
  #line 2216 
  return 0;
}

#line 2225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
enum e1000_phy_type e1000e_get_phy_type_from_id(u32 phy_id)
{
  #line 2227 
  enum e1000_phy_type phy_type = e1000_phy_unknown;
  #line 2229 
  switch (phy_id) {
    #line 2230 
    case (u32)21040176: 
                        #line 2230 
    ;
    #line 2231 
    case (u32)21040208: 
                        #line 2231 
    ;
    #line 2232 
    case (u32)21040320: 
                        #line 2232 
    ;
    #line 2233 
    case (u32)21040160: 
                        #line 2233 
    ;
    #line 2234 
    phy_type = e1000_phy_m88;
    #line 2235 
    break;
    #line 2236 
    case (u32)44565376: 
                        #line 2236 
    ;
    #line 2237 
    phy_type = e1000_phy_igp_2;
    #line 2238 
    break;
    #line 2239 
    case (u32)21040288: 
                        #line 2239 
    ;
    #line 2240 
    phy_type = e1000_phy_gg82563;
    #line 2241 
    break;
    #line 2242 
    case (u32)44565392: 
                        #line 2242 
    ;
    #line 2243 
    phy_type = e1000_phy_igp_3;
    #line 2244 
    break;
    #line 2245 
    case (u32)44565296: 
                        #line 2245 
    ;
    #line 2246 
    case (u32)44565280: 
                        #line 2246 
    ;
    #line 2247 
    case (u32)44565264: 
                        #line 2247 
    ;
    #line 2248 
    phy_type = e1000_phy_ife;
    #line 2249 
    break;
    #line 2250 
    case (u32)21040304: 
                        #line 2250 
    ;
    #line 2251 
    case (u32)21040305: 
                        #line 2251 
    ;
    #line 2252 
    phy_type = e1000_phy_bm;
    #line 2253 
    break;
    #line 2254 
    case (u32)5099584: 
                       #line 2254 
    ;
    #line 2255 
    phy_type = e1000_phy_82578;
    #line 2256 
    break;
    #line 2257 
    case (u32)22282320: 
                        #line 2257 
    ;
    #line 2258 
    phy_type = e1000_phy_82577;
    #line 2259 
    break;
    #line 2260 
    case (u32)22282384: 
                        #line 2260 
    ;
    #line 2261 
    phy_type = e1000_phy_82579;
    #line 2262 
    break;
    #line 2263 
    case (u32)22282400: 
                        #line 2263 
    ;
    #line 2264 
    phy_type = e1000_phy_i217;
    #line 2265 
    break;
    #line 2266 
    default: 
             #line 2266 
    ;
    #line 2267 
    phy_type = e1000_phy_unknown;
    #line 2268 
    break;
  }
  #line 2270 
  return phy_type;
}

#line 2281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_determine_phy_address(struct e1000_hw *hw)
{
  #line 2284 
  u32 i;
  #line 2283 
  u32 phy_addr = 0U;
  #line 2285 
  enum e1000_phy_type phy_type = e1000_phy_unknown;
  #line 2287 
  hw->phy.id = (unsigned int)phy_type;
  #line 2289 
  phy_addr = 0U;
  #line 2289 
  while (phy_addr <= 7U) {
    #line 2290 
    hw->phy.addr = phy_addr;
    #line 2291 
    i = 0U;
    #line 2293 
    while (1) {
      #line 2294 
      e1000e_get_phy_id(hw);
      #line 2295 
      phy_type = e1000e_get_phy_type_from_id(hw->phy.id);
      #line 2300 
      if (phy_type != (unsigned int)e1000_phy_unknown) 
                                                       #line 2301 
                                                       return 0;
      #line 2303 
      usleep_range(1000UL,2000UL);
      #line 2304 
      i ++;
      #line 2305 
      if (! (i <= 9U)) 
                       #line 2293 
                       break;
    }
    #line 2289 
    phy_addr ++;
  }
  #line 2308 
  return -6;
}

#line 2317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static u32 e1000_get_phy_addr_for_bm_page(u32 page, u32 reg)
{
  #line 2319 
  u32 phy_addr = 2U;
  #line 2321 
  if ((page > 767U || page == 0U && reg == 25U) || reg == 31U) 
                                                               #line 2322 
                                                               phy_addr = 1U;
  #line 2324 
  return phy_addr;
}

#line 2336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_phy_reg_bm(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 2338 
  s32 ret_val;
  #line 2339 
  u32 page = offset >> 5;
  #line 2341 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 2342 
  if (ret_val != 0) 
                    #line 2343 
                    return ret_val;
  #line 2346 
  if (page == 800U) {
    #line 2347 
    ret_val = e1000_access_phy_wakeup_reg_bm(hw,offset,& data,(_Bool)0,(_Bool)0);
    #line 2349 
    goto release;
  }
  #line 2352 
  hw->phy.addr = e1000_get_phy_addr_for_bm_page(page,offset);
  #line 2354 
  if (offset > 15U) {
    #line 2355 
    u32 page_shift;
    #line 2355 
    u32 page_select;
    #line 2361 
    if (hw->phy.addr == 1U) {
      #line 2362 
      page_shift = 5U;
      #line 2363 
      page_select = 31U;
    }
    else {
      #line 2365 
      page_shift = 0U;
      #line 2366 
      page_select = 22U;
    }
    #line 2370 
    ret_val = e1000e_write_phy_reg_mdic(hw,page_select,(unsigned short)((int)((unsigned short)(page << page_shift))));
    #line 2372 
    if (ret_val != 0) 
                      #line 2373 
                      goto release;
  }
  #line 2376 
  ret_val = e1000e_write_phy_reg_mdic(hw,offset & 31U,(unsigned short)((int)data));
  #line 2379 
  release: 
           #line 2379 
  ;
  #line 2380 
  (*(hw->phy.ops.release))(hw);
  #line 2381 
  return ret_val;
}

#line 2394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_phy_reg_bm(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 2396 
  s32 ret_val;
  #line 2397 
  u32 page = offset >> 5;
  #line 2399 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 2400 
  if (ret_val != 0) 
                    #line 2401 
                    return ret_val;
  #line 2404 
  if (page == 800U) {
    #line 2405 
    ret_val = e1000_access_phy_wakeup_reg_bm(hw,offset,data,(_Bool)1,(_Bool)0);
    #line 2407 
    goto release;
  }
  #line 2410 
  hw->phy.addr = e1000_get_phy_addr_for_bm_page(page,offset);
  #line 2412 
  if (offset > 15U) {
    #line 2413 
    u32 page_shift;
    #line 2413 
    u32 page_select;
    #line 2419 
    if (hw->phy.addr == 1U) {
      #line 2420 
      page_shift = 5U;
      #line 2421 
      page_select = 31U;
    }
    else {
      #line 2423 
      page_shift = 0U;
      #line 2424 
      page_select = 22U;
    }
    #line 2428 
    ret_val = e1000e_write_phy_reg_mdic(hw,page_select,(unsigned short)((int)((unsigned short)(page << page_shift))));
    #line 2430 
    if (ret_val != 0) 
                      #line 2431 
                      goto release;
  }
  #line 2434 
  ret_val = e1000e_read_phy_reg_mdic(hw,offset & 31U,data);
  #line 2436 
  release: 
           #line 2436 
  ;
  #line 2437 
  (*(hw->phy.ops.release))(hw);
  #line 2438 
  return ret_val;
}

#line 2451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_phy_reg_bm2(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 2453 
  s32 ret_val;
  #line 2454 
  u16 page = (unsigned short)(offset >> 5);
  #line 2456 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 2457 
  if (ret_val != 0) 
                    #line 2458 
                    return ret_val;
  #line 2461 
  if ((unsigned int)page == 800U) {
    #line 2462 
    ret_val = e1000_access_phy_wakeup_reg_bm(hw,offset,data,(_Bool)1,(_Bool)0);
    #line 2464 
    goto release;
  }
  #line 2467 
  hw->phy.addr = 1U;
  #line 2469 
  if (offset > 15U) {
    #line 2471 
    ret_val = e1000e_write_phy_reg_mdic(hw,22U,(unsigned short)((int)page));
    #line 2474 
    if (ret_val != 0) 
                      #line 2475 
                      goto release;
  }
  #line 2478 
  ret_val = e1000e_read_phy_reg_mdic(hw,offset & 31U,data);
  #line 2480 
  release: 
           #line 2480 
  ;
  #line 2481 
  (*(hw->phy.ops.release))(hw);
  #line 2482 
  return ret_val;
}

#line 2494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_phy_reg_bm2(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 2496 
  s32 ret_val;
  #line 2497 
  u16 page = (unsigned short)(offset >> 5);
  #line 2499 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  #line 2500 
  if (ret_val != 0) 
                    #line 2501 
                    return ret_val;
  #line 2504 
  if ((unsigned int)page == 800U) {
    #line 2505 
    ret_val = e1000_access_phy_wakeup_reg_bm(hw,offset,& data,(_Bool)0,(_Bool)0);
    #line 2507 
    goto release;
  }
  #line 2510 
  hw->phy.addr = 1U;
  #line 2512 
  if (offset > 15U) {
    #line 2514 
    ret_val = e1000e_write_phy_reg_mdic(hw,22U,(unsigned short)((int)page));
    #line 2517 
    if (ret_val != 0) 
                      #line 2518 
                      goto release;
  }
  #line 2521 
  ret_val = e1000e_write_phy_reg_mdic(hw,offset & 31U,(unsigned short)((int)data));
  #line 2524 
  release: 
           #line 2524 
  ;
  #line 2525 
  (*(hw->phy.ops.release))(hw);
  #line 2526 
  return ret_val;
}

#line 2537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_enable_phy_wakeup_reg_access_bm(struct e1000_hw *hw, u16 *phy_reg)
{
  #line 2539 
  s32 ret_val;
  #line 2540 
  u16 temp;
  #line 2543 
  hw->phy.addr = 1U;
  #line 2546 
  ret_val = e1000_set_page_igp(hw,(unsigned short)24608);
  #line 2547 
  if (ret_val != 0) {
    {
      #line 2548 
      bool branch;
      #line 2548 
      struct _ddebug __UNIQUE_ID_ddebug489 = {.modname = (char *)"e1000e", .function = (char *)"e1000_enable_phy_wakeup_reg_access_bm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Could not set Port Control page\n", .lineno = (unsigned int)2548U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2548 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug489.key.dd_key_false.key,(_Bool)0);
      #line 2548 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2548 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug489,(hw->adapter)->netdev,(char *)"Could not set Port Control page\n");
    }
    #line 2549 
    return ret_val;
  }
  #line 2552 
  ret_val = e1000e_read_phy_reg_mdic(hw,17U,phy_reg);
  #line 2553 
  if (ret_val != 0) {
    {
      #line 2554 
      bool branch_0;
      #line 2554 
      struct _ddebug __UNIQUE_ID_ddebug490 = {.modname = (char *)"e1000e", .function = (char *)"e1000_enable_phy_wakeup_reg_access_bm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Could not read PHY register %d.%d\n", .lineno = (unsigned int)2554U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2554 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug490.key.dd_key_false.key,(_Bool)0);
      #line 2554 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 2554 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug490,(hw->adapter)->netdev,(char *)"Could not read PHY register %d.%d\n",769,17);
    }
    #line 2556 
    return ret_val;
  }
  #line 2562 
  temp = *phy_reg;
  #line 2563 
  temp = (unsigned short)((unsigned int)temp | 4U);
  #line 2564 
  temp = (unsigned short)((unsigned int)temp & 65487U);
  #line 2566 
  ret_val = e1000e_write_phy_reg_mdic(hw,17U,(unsigned short)((int)temp));
  #line 2567 
  if (ret_val != 0) {
    {
      #line 2568 
      bool branch_1;
      #line 2568 
      struct _ddebug __UNIQUE_ID_ddebug491 = {.modname = (char *)"e1000e", .function = (char *)"e1000_enable_phy_wakeup_reg_access_bm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Could not write PHY register %d.%d\n", .lineno = (unsigned int)2568U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2568 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug491.key.dd_key_false.key,(_Bool)0);
      #line 2568 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 2568 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug491,(hw->adapter)->netdev,(char *)"Could not write PHY register %d.%d\n",769,17);
    }
    #line 2570 
    return ret_val;
  }
  #line 2576 
  return e1000_set_page_igp(hw,(unsigned short)25600);
}

#line 2590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_disable_phy_wakeup_reg_access_bm(struct e1000_hw *hw, u16 *phy_reg)
{
  #line 2592 
  s32 ret_val;
  #line 2595 
  ret_val = e1000_set_page_igp(hw,(unsigned short)24608);
  #line 2596 
  if (ret_val != 0) {
    {
      #line 2597 
      bool branch;
      #line 2597 
      struct _ddebug __UNIQUE_ID_ddebug492 = {.modname = (char *)"e1000e", .function = (char *)"e1000_disable_phy_wakeup_reg_access_bm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Could not set Port Control page\n", .lineno = (unsigned int)2597U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2597 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug492.key.dd_key_false.key,(_Bool)0);
      #line 2597 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2597 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug492,(hw->adapter)->netdev,(char *)"Could not set Port Control page\n");
    }
    #line 2598 
    return ret_val;
  }
  #line 2602 
  ret_val = e1000e_write_phy_reg_mdic(hw,17U,(unsigned short)((int)*phy_reg));
  #line 2603 
  if (ret_val != 0) {
    #line 2604 
    bool branch_0;
    #line 2604 
    struct _ddebug __UNIQUE_ID_ddebug493 = {.modname = (char *)"e1000e", .function = (char *)"e1000_disable_phy_wakeup_reg_access_bm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Could not restore PHY register %d.%d\n", .lineno = (unsigned int)2604U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2604 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug493.key.dd_key_false.key,(_Bool)0);
    #line 2604 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 2604 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug493,(hw->adapter)->netdev,(char *)"Could not restore PHY register %d.%d\n",769,17);
  }
  #line 2607 
  return ret_val;
}

#line 2635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 e1000_access_phy_wakeup_reg_bm(struct e1000_hw *hw, u32 offset, u16 *data, bool read, bool page_set)
{
  #line 2638 
  s32 ret_val;
  #line 2639 
  u16 reg = (unsigned short)(((unsigned int)((unsigned short)offset) & 31U) | ((unsigned int)((unsigned short)(offset >> 16)) & 65504U));
  #line 2640 
  u16 page = (unsigned short)(offset >> 5);
  #line 2641 
  u16 phy_reg = (unsigned short)0U;
  #line 2644 
  if (hw->mac.type == (unsigned int)e1000_pchlan) {
    #line 2644 
    if ((__er32(hw,3856UL) & 64U) == 0U) {
      #line 2646 
      bool branch;
      #line 2646 
      struct _ddebug __UNIQUE_ID_ddebug494 = {.modname = (char *)"e1000e", .function = (char *)"e1000_access_phy_wakeup_reg_bm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Attempting to access page %d while gig enabled.\n", .lineno = (unsigned int)2646U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2646 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug494.key.dd_key_false.key,(_Bool)0);
      #line 2646 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2646 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug494,(hw->adapter)->netdev,(char *)"Attempting to access page %d while gig enabled.\n",(int)page);
    }
  }
  #line 2649 
  if (! page_set) {
    #line 2651 
    ret_val = e1000_enable_phy_wakeup_reg_access_bm(hw,& phy_reg);
    #line 2652 
    if (ret_val != 0) {
      {
        #line 2653 
        bool branch_0;
        #line 2653 
        struct _ddebug __UNIQUE_ID_ddebug495 = {.modname = (char *)"e1000e", .function = (char *)"e1000_access_phy_wakeup_reg_bm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Could not enable PHY wakeup reg access\n", .lineno = (unsigned int)2653U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2653 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug495.key.dd_key_false.key,(_Bool)0);
        #line 2653 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 2653 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug495,(hw->adapter)->netdev,(char *)"Could not enable PHY wakeup reg access\n");
      }
      #line 2654 
      return ret_val;
    }
  }
  {
    #line 2658 
    bool branch_1;
    #line 2658 
    struct _ddebug __UNIQUE_ID_ddebug496 = {.modname = (char *)"e1000e", .function = (char *)"e1000_access_phy_wakeup_reg_bm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Accessing PHY page %d reg 0x%x\n", .lineno = (unsigned int)2658U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2658 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug496.key.dd_key_false.key,(_Bool)0);
    #line 2658 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 2658 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug496,(hw->adapter)->netdev,(char *)"Accessing PHY page %d reg 0x%x\n",(int)page,(int)reg);
  }
  #line 2661 
  ret_val = e1000e_write_phy_reg_mdic(hw,17U,(unsigned short)((int)reg));
  #line 2662 
  if (ret_val != 0) {
    {
      #line 2663 
      bool branch_2;
      #line 2663 
      struct _ddebug __UNIQUE_ID_ddebug497 = {.modname = (char *)"e1000e", .function = (char *)"e1000_access_phy_wakeup_reg_bm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Could not write address opcode to page %d\n", .lineno = (unsigned int)2663U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2663 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug497.key.dd_key_false.key,(_Bool)0);
      #line 2663 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 2663 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug497,(hw->adapter)->netdev,(char *)"Could not write address opcode to page %d\n",(int)page);
    }
    #line 2664 
    return ret_val;
  }
  #line 2667 
  if ((int)read != 0) 
                      #line 2669 
                      ret_val = e1000e_read_phy_reg_mdic(hw,18U,data); else 
                                                                    #line 2673 
                                                                    ret_val = e1000e_write_phy_reg_mdic(hw,18U,(unsigned short)((int)*data));
  #line 2677 
  if (ret_val != 0) {
    {
      #line 2678 
      bool branch_3;
      #line 2678 
      struct _ddebug __UNIQUE_ID_ddebug498 = {.modname = (char *)"e1000e", .function = (char *)"e1000_access_phy_wakeup_reg_bm", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Could not access PHY reg %d.%d\n", .lineno = (unsigned int)2678U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2678 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug498.key.dd_key_false.key,(_Bool)0);
      #line 2678 
      if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                    #line 2678 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug498,(hw->adapter)->netdev,(char *)"Could not access PHY reg %d.%d\n",(int)page,(int)reg);
    }
    #line 2679 
    return ret_val;
  }
  #line 2682 
  if (! page_set) 
                  #line 2683 
                  ret_val = e1000_disable_phy_wakeup_reg_access_bm(hw,& phy_reg);
  #line 2685 
  return ret_val;
}

#line 2696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
void e1000_power_up_phy_copper(struct e1000_hw *hw)
{
  #line 2698 
  u16 mii_reg = (unsigned short)0U;
  #line 2701 
  e1e_rphy(hw,0U,& mii_reg);
  #line 2702 
  mii_reg = (unsigned short)((unsigned int)mii_reg & 63487U);
  #line 2703 
  e1e_wphy(hw,0U,(unsigned short)((int)mii_reg));
  #line 2704 
  return;
}

#line 2714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
void e1000_power_down_phy_copper(struct e1000_hw *hw)
{
  #line 2716 
  u16 mii_reg = (unsigned short)0U;
  #line 2719 
  e1e_rphy(hw,0U,& mii_reg);
  #line 2720 
  mii_reg = (unsigned short)((unsigned int)mii_reg | 2048U);
  #line 2721 
  e1e_wphy(hw,0U,(unsigned short)((int)mii_reg));
  #line 2722 
  usleep_range(1000UL,2000UL);
  #line 2723 
  return;
}

#line 2736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 __e1000_read_phy_reg_hv(struct e1000_hw *hw, u32 offset, u16 *data, bool locked, bool page_set)
{
  #line 2739 
  s32 ret_val;
  #line 2740 
  u16 page = (unsigned short)(offset >> 5);
  #line 2741 
  u16 reg = (unsigned short)(((unsigned int)((unsigned short)offset) & 31U) | ((unsigned int)((unsigned short)(offset >> 16)) & 65504U));
  #line 2742 
  hw->phy.addr = e1000_get_phy_addr_for_hv_page((unsigned int)page);
  #line 2742 
  u32 phy_addr = e1000_get_phy_addr_for_hv_page((unsigned int)page);
  #line 2744 
  if (! locked) {
    #line 2745 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 2746 
    if (ret_val != 0) 
                      #line 2747 
                      return ret_val;
  }
  #line 2751 
  if ((unsigned int)page == 800U) {
    #line 2752 
    ret_val = e1000_access_phy_wakeup_reg_bm(hw,offset,data,(_Bool)1,(_Bool)((bool)((int)page_set) != 0));
    #line 2754 
    goto out;
  }
  #line 2757 
  if ((unsigned int)page + 65535U <= 766U) {
    #line 2758 
    ret_val = e1000_access_phy_debug_regs_hv(hw,offset,data,(_Bool)1);
    #line 2760 
    goto out;
  }
  #line 2763 
  if (! page_set) {
    #line 2764 
    if ((unsigned int)page == 768U) 
                                    #line 2765 
                                    page = (unsigned short)0U;
    #line 2767 
    if ((unsigned int)reg > 15U) {
      #line 2769 
      ret_val = e1000_set_page_igp(hw,(unsigned short)((int)page << 5U));
      #line 2772 
      hw->phy.addr = phy_addr;
      #line 2774 
      if (ret_val != 0) 
                        #line 2775 
                        goto out;
    }
  }
  {
    #line 2779 
    bool branch;
    #line 2779 
    struct _ddebug __UNIQUE_ID_ddebug499 = {.modname = (char *)"e1000e", .function = (char *)"__e1000_read_phy_reg_hv", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"reading PHY page %d (or 0x%x shifted) reg 0x%x\n", .lineno = (unsigned int)2779U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2779 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug499.key.dd_key_false.key,(_Bool)0);
    #line 2779 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2779 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug499,(hw->adapter)->netdev,(char *)"reading PHY page %d (or 0x%x shifted) reg 0x%x\n",(int)page,(int)page << 5,(int)reg);
  }
  #line 2782 
  ret_val = e1000e_read_phy_reg_mdic(hw,(unsigned int)reg & 31U,data);
  #line 2783 
  out: 
       #line 2783 
  ;
  #line 2784 
  if (! locked) 
                #line 2785 
                (*(hw->phy.ops.release))(hw);
  #line 2787 
  return ret_val;
}

#line 2800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_read_phy_reg_hv(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 2802 
  return __e1000_read_phy_reg_hv(hw,offset,data,(_Bool)0,(_Bool)0);
}

#line 2814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_read_phy_reg_hv_locked(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 2816 
  return __e1000_read_phy_reg_hv(hw,offset,data,(_Bool)1,(_Bool)0);
}

#line 2828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_read_phy_reg_page_hv(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 2830 
  return __e1000_read_phy_reg_hv(hw,offset,data,(_Bool)1,(_Bool)1);
}

#line 2843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 __e1000_write_phy_reg_hv(struct e1000_hw *hw, u32 offset, u16 data, bool locked, bool page_set)
{
  #line 2846 
  s32 ret_val;
  #line 2847 
  u16 page = (unsigned short)(offset >> 5);
  #line 2848 
  u16 reg = (unsigned short)(((unsigned int)((unsigned short)offset) & 31U) | ((unsigned int)((unsigned short)(offset >> 16)) & 65504U));
  #line 2849 
  hw->phy.addr = e1000_get_phy_addr_for_hv_page((unsigned int)page);
  #line 2849 
  u32 phy_addr = e1000_get_phy_addr_for_hv_page((unsigned int)page);
  #line 2851 
  if (! locked) {
    #line 2852 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 2853 
    if (ret_val != 0) 
                      #line 2854 
                      return ret_val;
  }
  #line 2858 
  if ((unsigned int)page == 800U) {
    #line 2859 
    ret_val = e1000_access_phy_wakeup_reg_bm(hw,offset,& data,(_Bool)0,(_Bool)((bool)((int)page_set) != 0));
    #line 2861 
    goto out;
  }
  #line 2864 
  if ((unsigned int)page + 65535U <= 766U) {
    #line 2865 
    ret_val = e1000_access_phy_debug_regs_hv(hw,offset,& data,(_Bool)0);
    #line 2867 
    goto out;
  }
  #line 2870 
  if (! page_set) {
    #line 2871 
    if ((unsigned int)page == 768U) 
                                    #line 2872 
                                    page = (unsigned short)0U;
    #line 2877 
    if ((((hw->phy.type == (unsigned int)e1000_phy_82578 && hw->phy.revision != 0U) && hw->phy.addr == 2U) && ((unsigned int)reg & 31U) == 0U) && ((unsigned long)data & 2048UL) != 0UL) {
      #line 2881 
      u16 data2 = (unsigned short)32511U;
      #line 2883 
      ret_val = e1000_access_phy_debug_regs_hv(hw,67U,& data2,(_Bool)0);
      #line 2886 
      if (ret_val != 0) 
                        #line 2887 
                        goto out;
    }
    #line 2890 
    if ((unsigned int)reg > 15U) {
      #line 2892 
      ret_val = e1000_set_page_igp(hw,(unsigned short)((int)page << 5U));
      #line 2895 
      hw->phy.addr = phy_addr;
      #line 2897 
      if (ret_val != 0) 
                        #line 2898 
                        goto out;
    }
  }
  {
    #line 2902 
    bool branch;
    #line 2902 
    struct _ddebug __UNIQUE_ID_ddebug500 = {.modname = (char *)"e1000e", .function = (char *)"__e1000_write_phy_reg_hv", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"writing PHY page %d (or 0x%x shifted) reg 0x%x\n", .lineno = (unsigned int)2902U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2902 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug500.key.dd_key_false.key,(_Bool)0);
    #line 2902 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2902 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug500,(hw->adapter)->netdev,(char *)"writing PHY page %d (or 0x%x shifted) reg 0x%x\n",(int)page,(int)page << 5,(int)reg);
  }
  #line 2905 
  ret_val = e1000e_write_phy_reg_mdic(hw,(unsigned int)reg & 31U,(unsigned short)((int)data));
  #line 2908 
  out: 
       #line 2908 
  ;
  #line 2909 
  if (! locked) 
                #line 2910 
                (*(hw->phy.ops.release))(hw);
  #line 2912 
  return ret_val;
}

#line 2924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_write_phy_reg_hv(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 2926 
  return __e1000_write_phy_reg_hv(hw,offset,(unsigned short)((int)data),
                               (_Bool)0,(_Bool)0);
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_write_phy_reg_hv_locked(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 2940 
  return __e1000_write_phy_reg_hv(hw,offset,(unsigned short)((int)data),
                               (_Bool)1,(_Bool)0);
}

#line 2952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_write_phy_reg_page_hv(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 2954 
  return __e1000_write_phy_reg_hv(hw,offset,(unsigned short)((int)data),
                               (_Bool)1,(_Bool)1);
}

#line 2961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static u32 e1000_get_phy_addr_for_hv_page(u32 page)
{
  #line 2963 
  u32 phy_addr = 2U;
  #line 2965 
  if (page > 767U) 
                   #line 2966 
                   phy_addr = 1U;
  #line 2968 
  return phy_addr;
}

#line 2983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 e1000_access_phy_debug_regs_hv(struct e1000_hw *hw, u32 offset, u16 *data, bool read)
{
  #line 2986 
  s32 ret_val;
  #line 2987 
  u32 addr_reg;
  #line 2988 
  u32 data_reg;
  #line 2991 
  if (hw->phy.type == (unsigned int)e1000_phy_82578) 
                                                     #line 2991 
                                                     addr_reg = 29U; else 
                                                                    #line 2991 
                                                                    addr_reg = 16U;
  #line 2993 
  data_reg = addr_reg + 1U;
  #line 2996 
  hw->phy.addr = 2U;
  #line 2999 
  ret_val = e1000e_write_phy_reg_mdic(hw,addr_reg,(unsigned short)((int)((unsigned short)offset) & 63));
  #line 3000 
  if (ret_val != 0) {
    {
      #line 3001 
      bool branch;
      #line 3001 
      struct _ddebug __UNIQUE_ID_ddebug501 = {.modname = (char *)"e1000e", .function = (char *)"e1000_access_phy_debug_regs_hv", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Could not write the Address Offset port register\n", .lineno = (unsigned int)3001U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3001 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug501.key.dd_key_false.key,(_Bool)0);
      #line 3001 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3001 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug501,(hw->adapter)->netdev,(char *)"Could not write the Address Offset port register\n");
    }
    #line 3002 
    return ret_val;
  }
  #line 3006 
  if ((int)read != 0) 
                      #line 3007 
                      ret_val = e1000e_read_phy_reg_mdic(hw,data_reg,data); else 
                                                                    #line 3009 
                                                                    ret_val = e1000e_write_phy_reg_mdic(hw,data_reg,(unsigned short)((int)*data));
  #line 3011 
  if (ret_val != 0) {
    #line 3012 
    bool branch_0;
    #line 3012 
    struct _ddebug __UNIQUE_ID_ddebug502 = {.modname = (char *)"e1000e", .function = (char *)"e1000_access_phy_debug_regs_hv", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Could not access the Data port register\n", .lineno = (unsigned int)3012U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3012 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug502.key.dd_key_false.key,(_Bool)0);
    #line 3012 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 3012 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug502,(hw->adapter)->netdev,(char *)"Could not access the Data port register\n");
  }
  #line 3014 
  return ret_val;
}

#line 3028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_link_stall_workaround_hv(struct e1000_hw *hw)
{
  #line 3031 
  u16 data;
  #line 3030 
  s32 ret_val = 0;
  #line 3033 
  if (hw->phy.type != (unsigned int)e1000_phy_82578) 
                                                     #line 3034 
                                                     return 0;
  #line 3037 
  e1e_rphy(hw,0U,& data);
  #line 3038 
  if (((int)data & 16384) != 0) 
                                #line 3039 
                                return 0;
  #line 3042 
  ret_val = e1e_rphy(hw,17U,& data);
  #line 3043 
  if (ret_val != 0) 
                    #line 3044 
                    return ret_val;
  #line 3046 
  data = (unsigned short)((unsigned int)data & 52224U);
  #line 3049 
  if ((unsigned int)data != 35840U) 
                                    #line 3051 
                                    return 0;
  #line 3053 
  msleep(200U);
  #line 3056 
  ret_val = e1e_wphy(hw,24848U,(unsigned short)1028);
  #line 3059 
  if (ret_val != 0) 
                    #line 3060 
                    return ret_val;
  #line 3062 
  return e1e_wphy(hw,24848U,(unsigned short)1024);
}

#line 3073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_check_polarity_82577(struct e1000_hw *hw)
{
  #line 3076 
  s32 ret_val;
  #line 3077 
  u16 data;
  #line 3075 
  struct e1000_phy_info *phy = & hw->phy;
  #line 3079 
  ret_val = e1e_rphy(hw,26U,& data);
  #line 3081 
  if (ret_val == 0) 
                    #line 3082 
                    phy->cable_polarity = (enum e1000_rev_polarity)(((int)data >> 10) & 1);
  #line 3086 
  return ret_val;
}

#line 3095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_phy_force_speed_duplex_82577(struct e1000_hw *hw)
{
  #line 3098 
  s32 ret_val;
  #line 3099 
  u16 phy_data;
  #line 3100 
  bool link;
  #line 3097 
  struct e1000_phy_info *phy = & hw->phy;
  #line 3102 
  ret_val = e1e_rphy(hw,0U,& phy_data);
  #line 3103 
  if (ret_val != 0) 
                    #line 3104 
                    return ret_val;
  #line 3106 
  e1000e_phy_force_speed_duplex_setup(hw,& phy_data);
  #line 3108 
  ret_val = e1e_wphy(hw,0U,(unsigned short)((int)phy_data));
  #line 3109 
  if (ret_val != 0) 
                    #line 3110 
                    return ret_val;
  #line 3112 
  __const_udelay(4295UL);
  #line 3114 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    {
      #line 3115 
      bool branch;
      #line 3115 
      struct _ddebug __UNIQUE_ID_ddebug503 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_force_speed_duplex_82577", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Waiting for forced speed/duplex link on 82577 phy\n", .lineno = (unsigned int)3115U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3115 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug503.key.dd_key_false.key,(_Bool)0);
      #line 3115 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3115 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug503,(hw->adapter)->netdev,(char *)"Waiting for forced speed/duplex link on 82577 phy\n");
    }
    #line 3117 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    #line 3119 
    if (ret_val != 0) 
                      #line 3120 
                      return ret_val;
    #line 3122 
    if (! link) {
      #line 3123 
      bool branch_0;
      #line 3123 
      struct _ddebug __UNIQUE_ID_ddebug504 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_force_speed_duplex_82577", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Link taking longer than expected.\n", .lineno = (unsigned int)3123U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3123 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug504.key.dd_key_false.key,(_Bool)0);
      #line 3123 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 3123 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug504,(hw->adapter)->netdev,(char *)"Link taking longer than expected.\n");
    }
    #line 3126 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
  }
  #line 3130 
  return ret_val;
}

#line 3142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_get_phy_info_82577(struct e1000_hw *hw)
{
  #line 3145 
  s32 ret_val;
  #line 3146 
  u16 data;
  #line 3147 
  bool link;
  #line 3144 
  struct e1000_phy_info *phy = & hw->phy;
  #line 3149 
  ret_val = e1000e_phy_has_link_generic(hw,1U,0U,& link);
  #line 3150 
  if (ret_val != 0) 
                    #line 3151 
                    return ret_val;
  #line 3153 
  if (! link) {
    {
      #line 3154 
      bool branch;
      #line 3154 
      struct _ddebug __UNIQUE_ID_ddebug505 = {.modname = (char *)"e1000e", .function = (char *)"e1000_get_phy_info_82577", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c", .format = (char *)"Phy info is only valid if link is up\n", .lineno = (unsigned int)3154U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3154 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug505.key.dd_key_false.key,(_Bool)0);
      #line 3154 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3154 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug505,(hw->adapter)->netdev,(char *)"Phy info is only valid if link is up\n");
    }
    #line 3155 
    return -3;
  }
  #line 3158 
  phy->polarity_correction = (_Bool)1;
  #line 3160 
  ret_val = e1000_check_polarity_82577(hw);
  #line 3161 
  if (ret_val != 0) 
                    #line 3162 
                    return ret_val;
  #line 3164 
  ret_val = e1e_rphy(hw,26U,& data);
  #line 3165 
  if (ret_val != 0) 
                    #line 3166 
                    return ret_val;
  #line 3168 
  phy->is_mdix = (_Bool)(((int)data & 2048) != 0);
  #line 3170 
  if (((int)data & 768) == 512) {
    #line 3172 
    ret_val = (*(hw->phy.ops.get_cable_length))(hw);
    #line 3173 
    if (ret_val != 0) 
                      #line 3174 
                      return ret_val;
    #line 3176 
    ret_val = e1e_rphy(hw,10U,& data);
    #line 3177 
    if (ret_val != 0) 
                      #line 3178 
                      return ret_val;
    #line 3180 
    phy->local_rx = (enum e1000_1000t_rx_status)(((int)data >> 13) & 1);
    #line 3183 
    phy->remote_rx = (enum e1000_1000t_rx_status)(((int)data >> 12) & 1);
  }
  else {
    #line 3186 
    phy->cable_length = (unsigned short)255U;
    #line 3187 
    phy->local_rx = e1000_1000t_rx_status_undefined;
    #line 3188 
    phy->remote_rx = e1000_1000t_rx_status_undefined;
  }
  #line 3191 
  return 0;
}

#line 3201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_get_cable_length_82577(struct e1000_hw *hw)
{
  #line 3204 
  s32 ret_val;
  #line 3205 
  u16 phy_data;
  #line 3205 
  u16 length;
  #line 3203 
  struct e1000_phy_info *phy = & hw->phy;
  #line 3207 
  ret_val = e1e_rphy(hw,31U,& phy_data);
  #line 3208 
  if (ret_val != 0) 
                    #line 3209 
                    return ret_val;
  #line 3211 
  length = (unsigned short)((unsigned int)((unsigned short)((int)phy_data >> 2)) & 255U);
  #line 3214 
  if ((unsigned int)length == 255U) 
                                    #line 3215 
                                    return -2;
  #line 3217 
  phy->cable_length = length;
  #line 3219 
  return 0;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ptp.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
  #line 26 
  *remainder = (unsigned int)(dividend % (unsigned long long)divisor);
  #line 27 
  return dividend / (unsigned long long)divisor;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
__inline static u64 div_u64(u64 dividend, u32 divisor)
{
  #line 125 
  u32 remainder;
  #line 126 
  return div_u64_rem(dividend,divisor,& remainder);
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
__inline static s64 timespec64_to_ns(struct timespec64 *ts)
{
  #line 135 
  return ts->tv_sec * 1000000000LL + (long long)ts->tv_nsec;
}

#line 144 
#line 144 
struct timespec64 ns_to_timespec64(s64);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ptp.i.aux"
static bool IS_ERR(void *ptr);
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
#line 166 
extern struct cpuinfo_x86 boot_cpu_data;
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 667  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ptp.i.aux"
static void cif_spin_unlock_irqrestore_systim_lock_of_e1000_adapter_0(spinlock_t *lock, unsigned long flags);
#line 35 
#line 658 
static void cif___ldv_spin_lock_systim_lock_of_e1000_adapter_0(spinlock_t *lock);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tsc.h"
#line 33 
struct system_counterval_t convert_art_to_tsc(u64);
#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 270 
int get_device_system_crosststamp(int (*)(ktime_t *, struct system_counterval_t *, void *), void *, struct system_time_snapshot *, struct system_device_crosststamp *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 612 
#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ptp.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay);
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
__inline static void timecounter_adjtime(struct timecounter *tc, s64 delta)
{
  #line 86 
  tc->nsec += (unsigned long long)delta;
  #line 87 
  return;
}

#line 111 
#line 111 
u64 timecounter_read(struct timecounter *);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
#line 186 
struct ptp_clock *ptp_clock_register(struct ptp_clock_info *, struct device *);
#line 195 
#line 195 
int ptp_clock_unregister(struct ptp_clock *);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ptp.c"
static int e1000e_phc_adjfreq(struct ptp_clock_info *ptp, s32 delta)
{
  #line 27 
  void *__mptr;
  #line 31 
  unsigned long flags;
  #line 32 
  u64 adjustment;
  #line 33 
  u32 timinca;
  #line 33 
  u32 incvalue;
  #line 34 
  s32 ret_val;
  #line 27 
  __mptr = (void *)ptp;
  #line 27 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709538680U));
  #line 29 
  struct e1000_hw *hw = & adapter->hw;
  #line 30 
  bool neg_adj = (_Bool)0;
  #line 36 
  if (ptp->max_adj < delta || delta < -999999999) 
                                                  #line 37 
                                                  return -22;
  #line 39 
  if (delta < 0) {
    #line 40 
    neg_adj = (_Bool)1;
    #line 41 
    delta = - delta;
  }
  #line 45 
  ret_val = e1000e_get_base_timinca(adapter,& timinca);
  #line 46 
  if (ret_val != 0) 
                    #line 47 
                    return ret_val;
  #line 49 
  cif___ldv_spin_lock_systim_lock_of_e1000_adapter_0(& adapter->systim_lock);
  #line 51 
  incvalue = timinca & 16777215U;
  #line 53 
  adjustment = (unsigned long long)incvalue;
  #line 54 
  adjustment = (unsigned long long)delta * adjustment;
  #line 55 
  adjustment = div_u64(adjustment,1000000000U);
  #line 57 
  if ((int)neg_adj != 0) 
                         #line 57 
                         incvalue -= (unsigned int)adjustment; else 
                                                                    #line 57 
                                                                    incvalue = (unsigned int)adjustment + incvalue;
  #line 59 
  timinca &= 4278190080U;
  #line 60 
  timinca |= incvalue;
  #line 62 
  __ew32(hw,46600UL,timinca);
  #line 64 
  adapter->ptp_delta = delta;
  #line 66 
  cif_spin_unlock_irqrestore_systim_lock_of_e1000_adapter_0(& adapter->systim_lock,flags);
  #line 68 
  return 0;
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ptp.c"
static int e1000e_phc_adjtime(struct ptp_clock_info *ptp, s64 delta)
{
  #line 80 
  void *__mptr;
  #line 82 
  unsigned long flags;
  #line 80 
  __mptr = (void *)ptp;
  #line 80 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709538680U));
  #line 84 
  cif___ldv_spin_lock_systim_lock_of_e1000_adapter_0(& adapter->systim_lock);
  #line 85 
  timecounter_adjtime(& adapter->tc,delta);
  #line 86 
  cif_spin_unlock_irqrestore_systim_lock_of_e1000_adapter_0(& adapter->systim_lock,flags);
  #line 88 
  return 0;
}

#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ptp.c"
static int e1000e_phc_get_syncdevicetime(ktime_t *device, struct system_counterval_t *system, void *ctx)
{
  #line 109 
  unsigned long flags;
  #line 110 
  int i;
  #line 111 
  u32 tsync_ctrl;
  #line 112 
  u64 dev_cycles;
  #line 113 
  u64 sys_cycles;
  #line 107 
  struct e1000_adapter *adapter = (struct e1000_adapter *)ctx;
  #line 108 
  struct e1000_hw *hw = & adapter->hw;
  #line 115 
  tsync_ctrl = __er32(hw,46612UL);
  #line 116 
  tsync_ctrl |= 2147545088U;
  #line 118 
  __ew32(hw,46612UL,tsync_ctrl);
  #line 119 
  i = 0;
  #line 119 
  while (i <= 2) {
    #line 120 
    __const_udelay(4295UL);
    #line 121 
    tsync_ctrl = __er32(hw,46612UL);
    #line 122 
    if ((tsync_ctrl & 1073741824U) != 0U) 
                                          #line 123 
                                          break;
    #line 119 
    i ++;
  }
  #line 126 
  if (i == 3) 
              #line 127 
              return -110;
  #line 129 
  dev_cycles = (unsigned long long)__er32(hw,46668UL);
  #line 130 
  dev_cycles <<= 32;
  #line 131 
  dev_cycles = (unsigned long long)__er32(hw,46664UL) | dev_cycles;
  #line 132 
  cif___ldv_spin_lock_systim_lock_of_e1000_adapter_0(& adapter->systim_lock);
  #line 133 
  *device = ns_to_ktime(timecounter_cyc2time(& adapter->tc,dev_cycles));
  #line 134 
  cif_spin_unlock_irqrestore_systim_lock_of_e1000_adapter_0(& adapter->systim_lock,flags);
  #line 136 
  sys_cycles = (unsigned long long)__er32(hw,46660UL);
  #line 137 
  sys_cycles <<= 32;
  #line 138 
  sys_cycles = (unsigned long long)__er32(hw,46656UL) | sys_cycles;
  #line 139 
  *system = convert_art_to_tsc(sys_cycles);
  #line 141 
  return 0;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ptp.c"
static int e1000e_phc_getcrosststamp(struct ptp_clock_info *ptp, struct system_device_crosststamp *xtstamp)
{
  #line 155 
  void *__mptr;
  #line 155 
  __mptr = (void *)ptp;
  #line 155 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709538680U));
  #line 158 
  return get_device_system_crosststamp(& e1000e_phc_get_syncdevicetime,
                                      (void *)adapter,
                                      (struct system_time_snapshot *)0,
                                      xtstamp);
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ptp.c"
static int e1000e_phc_gettimex(struct ptp_clock_info *ptp, struct timespec64 *ts, struct ptp_system_timestamp *sts)
{
  #line 177 
  void *__mptr;
  #line 179 
  unsigned long flags;
  #line 180 
  u64 cycles;
  #line 180 
  u64 ns;
  #line 177 
  __mptr = (void *)ptp;
  #line 177 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709538680U));
  #line 182 
  cif___ldv_spin_lock_systim_lock_of_e1000_adapter_0(& adapter->systim_lock);
  #line 185 
  cycles = e1000e_read_systim(adapter,sts);
  #line 186 
  ns = timecounter_cyc2time(& adapter->tc,cycles);
  #line 188 
  cif_spin_unlock_irqrestore_systim_lock_of_e1000_adapter_0(& adapter->systim_lock,flags);
  #line 190 
  *ts = ns_to_timespec64((long long)ns);
  #line 192 
  return 0;
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ptp.c"
static int e1000e_phc_settime(struct ptp_clock_info *ptp, struct timespec64 *ts)
{
  #line 206 
  void *__mptr;
  #line 208 
  unsigned long flags;
  #line 209 
  u64 ns;
  #line 206 
  __mptr = (void *)ptp;
  #line 206 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709538680U));
  #line 211 
  ns = (unsigned long long)timespec64_to_ns(ts);
  #line 214 
  cif___ldv_spin_lock_systim_lock_of_e1000_adapter_0(& adapter->systim_lock);
  #line 215 
  timecounter_init(& adapter->tc,& adapter->cc,ns);
  #line 216 
  cif_spin_unlock_irqrestore_systim_lock_of_e1000_adapter_0(& adapter->systim_lock,flags);
  #line 218 
  return 0;
}

#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ptp.c"
static int e1000e_phc_enable(struct ptp_clock_info *ptp, struct ptp_clock_request *request, int on)
{
  #line 234 
  return -95;
}

#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ptp.c"
static void e1000e_systim_overflow_work(struct work_struct *work)
{
  #line 239 
  void *__mptr;
  #line 242 
  struct timespec64 ts;
  #line 243 
  u64 ns;
  #line 239 
  __mptr = (void *)work;
  #line 239 
  struct e1000_adapter *adapter = ((struct e1000_adapter *)(__mptr + 18446744073709539104U));
  #line 241 
  struct e1000_hw *hw = & adapter->hw;
  #line 246 
  ns = timecounter_read(& adapter->tc);
  #line 248 
  ts = ns_to_timespec64((long long)ns);
  {
    #line 249 
    bool branch;
    #line 249 
    struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_systim_overflow_work", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ptp.c", .format = (char *)"SYSTIM overflow check at %lld.%09lu\n", .lineno = (unsigned int)249U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 249 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
    #line 249 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 249 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,(hw->adapter)->netdev,(char *)"SYSTIM overflow check at %lld.%09lu\n",ts.tv_sec,ts.tv_nsec);
  }
  #line 252 
  cif_schedule_delayed_work(& adapter->systim_overflow_work,3600000UL);
  #line 253 
  return;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ptp.c"
static struct ptp_clock_info e1000e_ptp_clock_info = {.owner = & __this_module, .adjfreq = & e1000e_phc_adjfreq, .adjtime = & e1000e_phc_adjtime, .gettimex64 = & e1000e_phc_gettimex, .settime64 = & e1000e_phc_settime, .enable = & e1000e_phc_enable};
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ptp.c"
void e1000e_ptp_init(struct e1000_adapter *adapter)
{
  #line 280 
  struct e1000_hw *hw = & adapter->hw;
  #line 282 
  adapter->ptp_clock = (struct ptp_clock *)0;
  #line 284 
  if (((unsigned long)adapter->flags & 16384UL) == 0UL) 
                                                        #line 285 
                                                        return;
  #line 287 
  adapter->ptp_clock_info = e1000e_ptp_clock_info;
  #line 289 
  snprintf((char *)(& adapter->ptp_clock_info.name),16UL,(char *)"%pm",(unsigned char *)(& (adapter->netdev)->perm_addr));
  #line 293 
  switch ((unsigned int)hw->mac.type) {
    #line 294 
    case (unsigned int)10: 
                           #line 294 
    ;
    #line 295 
    case (unsigned int)11: 
                           #line 295 
    ;
    #line 296 
    case (unsigned int)12: 
                           #line 296 
    ;
    #line 297 
    case (unsigned int)13: 
                           #line 297 
    ;
    #line 299 
    case (unsigned int)14: 
                           #line 299 
    ;
    #line 300 
    if (hw->mac.type <= (unsigned int)e1000_pch2lan) 
                                                     #line 300 
                                                     goto _LOR;
    else {
      #line 300 
      if ((__er32(hw,46624UL) & 32U) != 0U) {
        #line 300 
        _LOR: {
                #line 302 
                adapter->ptp_clock_info.max_adj = 23999999;
                #line 303 
                break;
              }
      }
    }
    #line 306 
    case (unsigned int)3: 
                          #line 306 
    ;
    #line 307 
    case (unsigned int)4: 
                          #line 307 
    ;
    #line 308 
    adapter->ptp_clock_info.max_adj = 599999999;
    #line 309 
    break;
    #line 310 
    default: 
             #line 310 
    ;
    #line 311 
    break;
  }
  #line 316 
  if (hw->mac.type > (unsigned int)e1000_pch_lpt) {
    #line 316 
    if ((int)test_bit(106L,
                 (unsigned long *)(& boot_cpu_data.__anonCompField_cpuinfo_x86_22.x86_capability)) != 0) 
      #line 317 
      adapter->ptp_clock_info.getcrosststamp = & e1000e_phc_getcrosststamp;
  }
  {
    #line 321 
    struct lock_class_key __key;
    #line 321 
    __init_work(& adapter->systim_overflow_work.work,0);
    #line 321 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 321 
    adapter->systim_overflow_work.work.data = __constr_expr_34;
    #line 321 
    lockdep_init_map(& adapter->systim_overflow_work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 321 
    INIT_LIST_HEAD_0(& adapter->systim_overflow_work.work.entry);
    #line 321 
    adapter->systim_overflow_work.work.func = & e1000e_systim_overflow_work;
  }
  {
    #line 321 
    struct lock_class_key __key_0;
    #line 321 
    init_timer_key(& adapter->systim_overflow_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->systim_overflow_work)->timer",& __key_0);
  }
  #line 324 
  cif_schedule_delayed_work(& adapter->systim_overflow_work,3600000UL);
  #line 327 
  adapter->ptp_clock = ptp_clock_register(& adapter->ptp_clock_info,& (adapter->pdev)->dev);
  #line 329 
  if ((int)IS_ERR((void *)adapter->ptp_clock) != 0) {
    #line 330 
    adapter->ptp_clock = (struct ptp_clock *)0;
    #line 331 
    netdev_err(adapter->netdev,(char *)"ptp_clock_register failed\n");
  }
  else 
    #line 332 
    if (adapter->ptp_clock != (struct ptp_clock *)0) 
                                                     #line 333 
                                                     netdev_info(adapter->netdev,(char *)"registered PHC clock\n");
  #line 334 
  return;
}

#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ptp.c"
void e1000e_ptp_remove(struct e1000_adapter *adapter)
{
  #line 345 
  if (((unsigned long)adapter->flags & 16384UL) == 0UL) 
                                                        #line 346 
                                                        return;
  #line 348 
  cancel_delayed_work_sync(& adapter->systim_overflow_work);
  #line 350 
  if (adapter->ptp_clock != (struct ptp_clock *)0) {
    #line 351 
    ptp_clock_unregister(adapter->ptp_clock);
    #line 352 
    adapter->ptp_clock = (struct ptp_clock *)0;
    #line 353 
    netdev_info(adapter->netdev,(char *)"removed PHC\n");
  }
  #line 355 
  return;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ptp.i.aux"
#line 102 
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1);
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ptp.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 138 
  ldv_init_list_head(list);
  #line 139 
  return;
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ptp.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 222 
  return ldv_is_err(ptr);
}

#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ptp.i.aux"
static void cif___ldv_spin_lock_systim_lock_of_e1000_adapter_0(spinlock_t *lock)
{
  #line 661 
  ldv_spin_model_lock((char *)"systim_lock_of_e1000_adapter");
  #line 663 
  __ldv_spin_lock(lock);
  #line 664 
  return;
}

#line 667  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ptp.i.aux"
static void cif_spin_unlock_irqrestore_systim_lock_of_e1000_adapter_0(spinlock_t *lock, unsigned long flags)
{
  #line 670 
  ldv_spin_model_unlock((char *)"systim_lock_of_e1000_adapter");
  #line 672 
  spin_unlock_irqrestore_0(lock,flags);
  #line 673 
  return;
}

#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ptp.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay)
{
  #line 680 
  return emg_schedule_delayed_work(dwork,delay);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 269  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 276  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26 
#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 21 
void *ldv_vmalloc(unsigned long size);
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 60 
unsigned long msleep_interruptible(unsigned int);
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 807  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void *cif_vmalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 814  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void cif_vfree_0(void *addr);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 471  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 478  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 485  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
__inline static bool device_can_wakeup(struct device *dev)
{
  #line 79 
  return (_Bool)((int)dev->power.can_wakeup != 0);
}

#line 108 
#line 108 
int device_set_wakeup_enable(struct device *, bool);
#line 1032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1032 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);
#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  #line 1049 
  return __alloc_skb(size,priority,0,-1);
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 87 
#line 87 
int ethtool_op_get_ts_info(struct net_device *, struct ethtool_ts_info *);
#line 173 
#line 173 
void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
#line 177 
#line 177 
bool ethtool_convert_link_mode_to_legacy_u32(u32 *, unsigned long *);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 821  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static int cif_request_irq_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 829  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 4263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4263 
struct rtnl_link_stats64 *dev_get_stats(struct net_device *, struct rtnl_link_stats64 *);
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
#line 799  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static bool cif_pm_runtime_suspended_0(struct device *dev);
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
#line 213 
int ptp_clock_index(struct ptp_clock *);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
__inline static u32 mmd_eee_cap_to_ethtool_sup_t(u16 eee_cap)
{
  #line 199 
  u32 supported = 0U;
  #line 201 
  if (((int)eee_cap & 2) != 0) 
                               #line 202 
                               supported |= 8U;
  #line 203 
  if (((int)eee_cap & 4) != 0) 
                               #line 204 
                               supported |= 32U;
  #line 205 
  if (((int)eee_cap & 8) != 0) 
                               #line 206 
                               supported |= 4096U;
  #line 207 
  if (((int)eee_cap & 16) != 0) 
                                #line 208 
                                supported |= 131072U;
  #line 209 
  if (((int)eee_cap & 32) != 0) 
                                #line 210 
                                supported |= 262144U;
  #line 211 
  if (((int)eee_cap & 64) != 0) 
                                #line 212 
                                supported |= 524288U;
  #line 214 
  return supported;
}

#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
__inline static u16 ethtool_adv_to_mmd_eee_adv_t(u32 adv)
{
  #line 255 
  u16 reg = (unsigned short)0U;
  #line 257 
  if (((unsigned long)adv & 8UL) != 0UL) 
                                         #line 258 
                                         reg = (unsigned short)((unsigned int)reg | 2U);
  #line 259 
  if (((unsigned long)adv & 32UL) != 0UL) 
                                          #line 260 
                                          reg = (unsigned short)((unsigned int)reg | 4U);
  #line 261 
  if (((unsigned long)adv & 4096UL) != 0UL) 
                                            #line 262 
                                            reg = (unsigned short)((unsigned int)reg | 8U);
  #line 263 
  if (((unsigned long)adv & 131072UL) != 0UL) 
                                              #line 264 
                                              reg = (unsigned short)((unsigned int)reg | 16U);
  #line 265 
  if (((unsigned long)adv & 262144UL) != 0UL) 
                                              #line 266 
                                              reg = (unsigned short)((unsigned int)reg | 32U);
  #line 267 
  if (((unsigned long)adv & 524288UL) != 0UL) 
                                              #line 268 
                                              reg = (unsigned short)((unsigned int)reg | 64U);
  #line 270 
  return reg;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.h"
#line 14 
s32 e1000e_force_mac_fc(struct e1000_hw *hw);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static struct e1000_stats e1000_gstrings_stats[53U] = {{.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11384}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11408}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11416}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11424}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11392}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11584}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11400}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11576}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 32}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 40}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, .sizeof_stat = 8, .stat_offset = 56}, {.stat_string = {(char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11400}, {.stat_string = {(char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11248}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 80}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 88}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11176}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 104}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'n', (char)'o', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'e', (char)'r', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11432}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'i', (char)'s', (char)'s', (char)'e', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11208}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'e', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11224}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11264}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 144}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'e', (char)'a', (char)'r', (char)'t', (char)'b', (char)'e', (char)'a', (char)'t', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 8, .stat_offset = 152}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'w', (char)'i', (char)'n', (char)'d', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11240}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'_', (char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11240}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'e', (char)'d', (char)'_', (char)'o', (char)'k'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11256}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'_', (char)'o', (char)'k'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11216}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'_', (char)'o', (char)'k'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11232}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1512}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'r', (char)'e', (char)'s', (char)'t', (char)'a', (char)'r', (char)'t', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1440}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11456}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'h', (char)'o', (char)'r', (char)'t', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11440}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11184}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'s', (char)'e', (char)'g', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11592}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'s', (char)'e', (char)'g', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11600}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'n'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11296}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11312}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'n'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11304}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11320}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1640}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1632}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'e', (char)'a', (char)'d', (char)'e', (char)'r', (char)'_', (char)'s', (char)'p', (char)'l', (char)'i', (char)'t'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1648}, {.stat_string = {(char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1672}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11488}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11472}, {.stat_string = {(char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11480}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'m', (char)'a', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1676}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'m', (char)'a', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1528}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'w', (char)'t', (char)'s', (char)'t', (char)'a', (char)'m', (char)'p', (char)'_', (char)'c', (char)'l', (char)'e', (char)'a', (char)'r', (char)'e', (char)'d'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1680}, {.stat_string = {(char)'u', (char)'n', (char)'c', (char)'o', (char)'r', (char)'r', (char)'_', (char)'e', (char)'c', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1432}, {.stat_string = {(char)'c', (char)'o', (char)'r', (char)'r', (char)'_', (char)'e', (char)'c', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1436}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'w', (char)'t', (char)'s', (char)'t', (char)'a', (char)'m', (char)'p', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t', (char)'s'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1532}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'w', (char)'t', (char)'s', (char)'t', (char)'a', (char)'m', (char)'p', (char)'_', (char)'s', (char)'k', (char)'i', (char)'p', (char)'p', (char)'e', (char)'d'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1536}};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static char e1000_gstrings_test[5U][32U] = {{(char)'R', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'E', (char)'e', (char)'p', (char)'r', (char)'o', (char)'m', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'I', (char)'n', (char)'t', (char)'e', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'L', (char)'i', (char)'n', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'n', (char)'/', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_get_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 108 
  u32 speed;
  #line 108 
  u32 supported;
  #line 108 
  u32 advertising;
  #line 106 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 107 
  struct e1000_hw *hw = & adapter->hw;
  #line 110 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
    #line 111 
    supported = 239U;
    #line 118 
    if (hw->phy.type == (unsigned int)e1000_phy_ife) 
                                                     #line 119 
                                                     supported &= 4294967263U;
    #line 120 
    advertising = 128U;
    #line 122 
    if ((int)hw->mac.autoneg == 1) {
      #line 123 
      advertising |= 64U;
      #line 125 
      advertising = (unsigned int)hw->phy.autoneg_advertised | advertising;
    }
    #line 128 
    cmd->base.port = (unsigned char)0U;
    #line 129 
    cmd->base.phy_address = (unsigned char)hw->phy.addr;
  }
  else {
    #line 131 
    supported = 1120U;
    #line 135 
    advertising = 1120U;
    #line 139 
    cmd->base.port = (unsigned char)3U;
  }
  #line 142 
  speed = 4294967295U;
  #line 143 
  cmd->base.duplex = (unsigned char)255U;
  #line 145 
  if ((int)netif_running(netdev) != 0) {
    #line 146 
    if ((int)netif_carrier_ok(netdev) != 0) {
      #line 147 
      speed = (unsigned int)adapter->link_speed;
      #line 148 
      cmd->base.duplex = (unsigned char)((unsigned int)((unsigned char)adapter->link_duplex) + 255U);
    }
  }
  else {
    #line 150 
    if (! cif_pm_runtime_suspended_0(netdev->dev.parent)) {
      #line 151 
      u32 status = __er32(hw,8UL);
      #line 153 
      if ((status & 2U) != 0U) {
        #line 154 
        if ((status & 128U) != 0U) 
                                   #line 155 
                                   speed = 1000U;
        else 
          #line 156 
          if ((status & 64U) != 0U) 
                                    #line 157 
                                    speed = 100U; else 
                                                       #line 159 
                                                       speed = 10U;
        #line 161 
        if ((status & 1U) != 0U) 
                                 #line 162 
                                 cmd->base.duplex = (unsigned char)1U; else 
                                                                    #line 164 
                                                                    cmd->base.duplex = (unsigned char)0U;
      }
    }
  }
  #line 168 
  cmd->base.speed = speed;
  #line 169 
  cmd->base.autoneg = (unsigned char)((hw->phy.media_type == (unsigned int)e1000_media_type_fiber || (int)hw->mac.autoneg != 0) != 0);
  #line 173 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
    #line 173 
    if ((int)netif_carrier_ok(netdev) != 0) 
      #line 175 
      if ((int)hw->phy.is_mdix != 0) 
                                     #line 175 
                                     cmd->base.eth_tp_mdix = (unsigned char)2U; else 
                                                                    #line 175 
                                                                    cmd->base.eth_tp_mdix = (unsigned char)1U;
    else 
         #line 178 
         cmd->base.eth_tp_mdix = (unsigned char)0U;
  }
  else 
       #line 178 
       cmd->base.eth_tp_mdix = (unsigned char)0U;
  #line 180 
  if ((unsigned int)hw->phy.mdix == 0U) 
                                        #line 181 
                                        cmd->base.eth_tp_mdix_ctrl = (unsigned char)3U; else 
                                                                    #line 183 
                                                                    cmd->base.eth_tp_mdix_ctrl = hw->phy.mdix;
  #line 185 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) 
                                                                   #line 186 
                                                                   cmd->base.eth_tp_mdix_ctrl = (unsigned char)0U;
  #line 188 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.supported),supported);
  #line 190 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.advertising),advertising);
  #line 193 
  return 0;
}

#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_spd_dplx(struct e1000_adapter *adapter, u32 spd, u8 dplx)
{
  #line 198 
  struct e1000_mac_info *mac = & adapter->hw.mac;
  #line 200 
  mac->autoneg = (_Bool)0;
  #line 205 
  if ((spd & 1U) != 0U || ((int)dplx & -2) != 0) 
                                                 #line 206 
                                                 goto err_inval;
  #line 209 
  if (adapter->hw.phy.media_type == (unsigned int)e1000_media_type_fiber && (spd != 1000U && (unsigned int)dplx != 1U)) 
    #line 211 
    goto err_inval;
  #line 214 
  switch ((unsigned int)dplx + spd) {
    #line 215 
    case (unsigned int)10: 
                           #line 215 
    ;
    #line 216 
    mac->forced_speed_duplex = (unsigned char)1U;
    #line 217 
    break;
    #line 218 
    case (unsigned int)11: 
                           #line 218 
    ;
    #line 219 
    mac->forced_speed_duplex = (unsigned char)2U;
    #line 220 
    break;
    #line 221 
    case (unsigned int)100: 
                            #line 221 
    ;
    #line 222 
    mac->forced_speed_duplex = (unsigned char)4U;
    #line 223 
    break;
    #line 224 
    case (unsigned int)101: 
                            #line 224 
    ;
    #line 225 
    mac->forced_speed_duplex = (unsigned char)8U;
    #line 226 
    break;
    #line 227 
    case (unsigned int)1001: 
                             #line 227 
    ;
    #line 228 
    if (adapter->hw.phy.media_type == (unsigned int)e1000_media_type_copper) {
      #line 229 
      mac->autoneg = (_Bool)1;
      #line 230 
      adapter->hw.phy.autoneg_advertised = (unsigned short)32U;
    }
    else 
         #line 233 
         mac->forced_speed_duplex = (unsigned char)32U;
    #line 235 
    break;
    #line 236 
    case (unsigned int)1000: 
                             #line 236 
    ;
    #line 237 
    default: 
             #line 237 
    ;
    #line 238 
    goto err_inval;
  }
  #line 242 
  adapter->hw.phy.mdix = (unsigned char)0U;
  #line 244 
  return 0;
  #line 246 
  err_inval: 
             #line 246 
  ;
  #line 247 
  netdev_err(adapter->netdev,(char *)"Unsupported Speed/Duplex configuration\n");
  #line 248 
  return -22;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 257 
  u32 advertising;
  #line 254 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 255 
  struct e1000_hw *hw = & adapter->hw;
  #line 256 
  int ret_val = 0;
  #line 259 
  ethtool_convert_link_mode_to_legacy_u32(& advertising,(unsigned long *)(& cmd->link_modes.advertising));
  #line 262 
  pm_runtime_get_sync(netdev->dev.parent);
  #line 267 
  if (hw->phy.ops.check_reset_block != (s32 (*)(struct e1000_hw *))0) {
    #line 267 
    if ((*(hw->phy.ops.check_reset_block))(hw) != 0) {
      #line 269 
      netdev_err(adapter->netdev,(char *)"Cannot change link characteristics when SoL/IDER is active.\n");
      #line 270 
      ret_val = -22;
      #line 271 
      goto out;
    }
  }
  #line 278 
  if ((unsigned int)cmd->base.eth_tp_mdix_ctrl != 0U) {
    #line 279 
    if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) {
      #line 280 
      ret_val = -95;
      #line 281 
      goto out;
    }
    #line 284 
    if ((unsigned int)cmd->base.eth_tp_mdix_ctrl != 3U && (unsigned int)cmd->base.autoneg != 1U) {
      #line 286 
      netdev_err(adapter->netdev,(char *)"forcing MDI/MDI-X state is not supported when link speed and/or duplex are forced\n");
      #line 287 
      ret_val = -22;
      #line 288 
      goto out;
    }
  }
  #line 292 
  while (1) {
    #line 292 
    if (! ((int)test_and_set_bit(1L,& adapter->state) != 0)) 
                                                             #line 292 
                                                             break;
    #line 293 
    usleep_range(1000UL,2000UL);
  }
  #line 295 
  if ((unsigned int)cmd->base.autoneg == 1U) {
    #line 296 
    hw->mac.autoneg = (_Bool)1;
    #line 297 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_fiber) 
                                                                    #line 298 
                                                                    hw->phy.autoneg_advertised = (unsigned short)1120U; else 
                                                                    #line 301 
                                                                    hw->phy.autoneg_advertised = (unsigned short)((unsigned int)((unsigned short)advertising) | 192U);
    #line 303 
    advertising = (unsigned int)hw->phy.autoneg_advertised;
    #line 304 
    if ((int)adapter->fc_autoneg != 0) 
                                       #line 305 
                                       hw->fc.requested_mode = e1000_fc_default;
  }
  else {
    #line 307 
    u32 speed = cmd->base.speed;
    #line 309 
    if (e1000_set_spd_dplx(adapter,speed,
                           (unsigned char)((int)cmd->base.duplex)) != 0) {
      #line 310 
      ret_val = -22;
      #line 311 
      goto out;
    }
  }
  #line 316 
  if ((unsigned int)cmd->base.eth_tp_mdix_ctrl != 0U) 
    #line 320 
    if ((unsigned int)cmd->base.eth_tp_mdix_ctrl == 3U) 
                                                        #line 321 
                                                        hw->phy.mdix = (unsigned char)0U; else 
                                                                    #line 323 
                                                                    hw->phy.mdix = cmd->base.eth_tp_mdix_ctrl;
  #line 327 
  if ((int)netif_running(adapter->netdev) != 0) {
    #line 328 
    e1000e_down(adapter,(_Bool)1);
    #line 329 
    e1000e_up(adapter);
  }
  else 
       #line 331 
       e1000e_reset(adapter);
  #line 334 
  out: 
       #line 334 
  ;
  #line 335 
  pm_runtime_put_sync(netdev->dev.parent);
  #line 336 
  cif_clear_bit_1(1L,& adapter->state);
  #line 337 
  return ret_val;
}

#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 343 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 344 
  struct e1000_hw *hw = & adapter->hw;
  #line 346 
  pause->autoneg = (unsigned int)((int)adapter->fc_autoneg != 0);
  #line 349 
  if (hw->fc.current_mode == (unsigned int)e1000_fc_rx_pause) 
                                                              #line 350 
                                                              pause->rx_pause = 1U;
  else 
    #line 351 
    if (hw->fc.current_mode == (unsigned int)e1000_fc_tx_pause) 
                                                                #line 352 
                                                                pause->tx_pause = 1U;
    else 
      #line 353 
      if (hw->fc.current_mode == (unsigned int)e1000_fc_full) {
        #line 354 
        pause->rx_pause = 1U;
        #line 355 
        pause->tx_pause = 1U;
      }
  #line 357 
  return;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 362 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 363 
  struct e1000_hw *hw = & adapter->hw;
  #line 364 
  int retval = 0;
  #line 366 
  adapter->fc_autoneg = (_Bool)(pause->autoneg != 0U);
  #line 368 
  while (1) {
    #line 368 
    if (! ((int)test_and_set_bit(1L,& adapter->state) != 0)) 
                                                             #line 368 
                                                             break;
    #line 369 
    usleep_range(1000UL,2000UL);
  }
  #line 371 
  pm_runtime_get_sync(netdev->dev.parent);
  #line 373 
  if ((int)adapter->fc_autoneg == 1) {
    #line 374 
    hw->fc.requested_mode = e1000_fc_default;
    #line 375 
    if ((int)netif_running(adapter->netdev) != 0) {
      #line 376 
      e1000e_down(adapter,(_Bool)1);
      #line 377 
      e1000e_up(adapter);
    }
    else 
         #line 379 
         e1000e_reset(adapter);
  }
  else {
    #line 382 
    if (pause->rx_pause != 0U && pause->tx_pause != 0U) 
                                                        #line 383 
                                                        hw->fc.requested_mode = e1000_fc_full;
    else 
      #line 384 
      if (pause->rx_pause != 0U && pause->tx_pause == 0U) 
                                                          #line 385 
                                                          hw->fc.requested_mode = e1000_fc_rx_pause;
      else 
        #line 386 
        if (pause->rx_pause == 0U && pause->tx_pause != 0U) 
                                                            #line 387 
                                                            hw->fc.requested_mode = e1000_fc_tx_pause;
        else 
          #line 388 
          if (pause->rx_pause == 0U && pause->tx_pause == 0U) 
                                                              #line 389 
                                                              hw->fc.requested_mode = e1000_fc_none;
    #line 391 
    hw->fc.current_mode = hw->fc.requested_mode;
    #line 393 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_fiber) 
                                                                    #line 394 
                                                                    retval = (*(hw->mac.ops.setup_link))(hw);
    else {
      #line 397 
      retval = e1000e_force_mac_fc(hw);
      #line 398 
      if (retval != 0) 
                       #line 399 
                       goto out;
      #line 400 
      e1000e_set_fc_watermarks(hw);
    }
  }
  #line 404 
  out: 
       #line 404 
  ;
  #line 405 
  pm_runtime_put_sync(netdev->dev.parent);
  #line 406 
  cif_clear_bit_1(1L,& adapter->state);
  #line 407 
  return retval;
}

#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static u32 e1000_get_msglevel(struct net_device *netdev)
{
  #line 412 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 413 
  return adapter->msg_enable;
}

#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_set_msglevel(struct net_device *netdev, u32 data)
{
  #line 418 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 419 
  adapter->msg_enable = data;
  #line 420 
  return;
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_get_regs_len(struct net_device *netdev)
{
  #line 425 
  return 128;
}

#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_get_regs(struct net_device *netdev, struct ethtool_regs *regs, void *p)
{
  #line 434 
  u16 phy_data;
  #line 431 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 432 
  struct e1000_hw *hw = & adapter->hw;
  #line 433 
  u32 *regs_buff = (u32 *)p;
  #line 436 
  pm_runtime_get_sync(netdev->dev.parent);
  #line 438 
  memset(p,0,128UL);
  #line 440 
  regs->version = ((unsigned int)((int)(adapter->pdev)->revision << 16) | (unsigned int)(adapter->pdev)->device) | 16777216U;
  #line 444 
  *regs_buff = __er32(hw,0UL);
  #line 445 
  *(regs_buff + 1U) = __er32(hw,8UL);
  #line 447 
  *(regs_buff + 2U) = __er32(hw,256UL);
  #line 448 
  *(regs_buff + 3U) = __er32(hw,10248UL);
  #line 449 
  *(regs_buff + 4U) = __er32(hw,10256UL);
  #line 450 
  *(regs_buff + 5U) = __er32(hw,10264UL);
  #line 451 
  *(regs_buff + 6U) = __er32(hw,10272UL);
  #line 453 
  *(regs_buff + 7U) = __er32(hw,1024UL);
  #line 454 
  *(regs_buff + 8U) = __er32(hw,14344UL);
  #line 455 
  *(regs_buff + 9U) = __er32(hw,14352UL);
  #line 456 
  *(regs_buff + 10U) = __er32(hw,14360UL);
  #line 457 
  *(regs_buff + 11U) = __er32(hw,14368UL);
  #line 459 
  *(regs_buff + 12U) = (unsigned int)adapter->hw.phy.type;
  #line 464 
  if (hw->phy.type == (unsigned int)e1000_phy_m88) {
    #line 465 
    e1e_rphy(hw,17U,& phy_data);
    #line 466 
    *(regs_buff + 13U) = (unsigned int)phy_data;
    #line 467 
    *(regs_buff + 14U) = 0U;
    #line 468 
    *(regs_buff + 15U) = 0U;
    #line 469 
    *(regs_buff + 16U) = 0U;
    #line 470 
    e1e_rphy(hw,16U,& phy_data);
    #line 471 
    *(regs_buff + 17U) = (unsigned int)phy_data;
    #line 472 
    *(regs_buff + 18U) = *(regs_buff + 13U);
    #line 473 
    *(regs_buff + 19U) = 0U;
    #line 474 
    *(regs_buff + 20U) = *(regs_buff + 17U);
    #line 476 
    *(regs_buff + 22U) = adapter->phy_stats.receive_errors;
    #line 477 
    *(regs_buff + 23U) = *(regs_buff + 13U);
  }
  #line 479 
  *(regs_buff + 21U) = 0U;
  #line 480 
  e1e_rphy(hw,10U,& phy_data);
  #line 481 
  *(regs_buff + 24U) = (unsigned int)phy_data;
  #line 482 
  *(regs_buff + 25U) = *(regs_buff + 24U);
  #line 484 
  pm_runtime_put_sync(netdev->dev.parent);
  #line 485 
  return;
}

#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_get_eeprom_len(struct net_device *netdev)
{
  #line 489 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 490 
  return (int)adapter->hw.nvm.word_size * 2;
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_get_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 498 
  u16 *eeprom_buff;
  #line 499 
  int first_word;
  #line 500 
  int last_word;
  #line 502 
  u16 i;
  #line 496 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 497 
  struct e1000_hw *hw = & adapter->hw;
  #line 501 
  int ret_val = 0;
  #line 504 
  if (eeprom->len == 0U) 
                         #line 505 
                         return -22;
  #line 507 
  eeprom->magic = (unsigned int)((int)(adapter->pdev)->vendor | ((int)(adapter->pdev)->device << 16));
  #line 509 
  first_word = (int)(eeprom->offset >> 1);
  #line 510 
  last_word = (int)(((eeprom->offset + eeprom->len) + 4294967295U) >> 1);
  #line 512 
  eeprom_buff = (u16 *)kmalloc_array((unsigned long)((last_word - first_word) + 1),2UL,3264U);
  #line 514 
  if (eeprom_buff == (u16 *)0U) 
                                #line 515 
                                return -12;
  #line 517 
  pm_runtime_get_sync(netdev->dev.parent);
  #line 519 
  if (hw->nvm.type == (unsigned int)e1000_nvm_eeprom_spi) 
                                                          #line 520 
                                                          ret_val = e1000_read_nvm(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)((int)((unsigned int)((int)((unsigned short)last_word) - (int)((unsigned short)first_word)) + 1U)),eeprom_buff);
  else {
    #line 524 
    i = (unsigned short)0U;
    #line 524 
    while (last_word - first_word >= (int)i) {
      #line 525 
      ret_val = e1000_read_nvm(hw,(unsigned short)((int)((unsigned short)first_word) + (int)i),(unsigned short)1,eeprom_buff + (unsigned long)i);
      #line 527 
      if (ret_val != 0) 
                        #line 528 
                        break;
      #line 524 
      i = (u16)((int)i + 1);
    }
  }
  #line 532 
  pm_runtime_put_sync(netdev->dev.parent);
  #line 534 
  if (ret_val != 0) 
                    #line 536 
                    memset((void *)eeprom_buff,255,(unsigned long)((last_word - first_word) + 1) * 2UL);
  else {
    #line 540 
    i = (unsigned short)0U;
    #line 540 
    while (last_word - first_word >= (int)i) {
      #line 541 
      u16 *tmp_2 = eeprom_buff + (unsigned long)i;
      #line 540 
      i = (u16)((int)i + 1);
    }
  }
  #line 544 
  memcpy((void *)bytes,(void *)((u8 *)eeprom_buff + ((unsigned long)eeprom->offset & (unsigned long)1U)),(unsigned long)eeprom->len);
  #line 545 
  kfree((void *)eeprom_buff);
  #line 547 
  return ret_val;
}

#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 555 
  u16 *eeprom_buff;
  #line 556 
  void *ptr;
  #line 557 
  int max_len;
  #line 558 
  int first_word;
  #line 559 
  int last_word;
  #line 561 
  u16 i;
  #line 553 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 554 
  struct e1000_hw *hw = & adapter->hw;
  #line 560 
  int ret_val = 0;
  #line 563 
  if (eeprom->len == 0U) 
                         #line 564 
                         return -95;
  #line 566 
  if (eeprom->magic != (unsigned int)((int)(adapter->pdev)->vendor | ((int)(adapter->pdev)->device << 16))) 
    #line 568 
    return -14;
  #line 570 
  if (((unsigned long)adapter->flags & 256UL) != 0UL) 
                                                      #line 571 
                                                      return -22;
  #line 573 
  max_len = (int)hw->nvm.word_size * 2;
  #line 575 
  first_word = (int)(eeprom->offset >> 1);
  #line 576 
  last_word = (int)(((eeprom->offset + eeprom->len) + 4294967295U) >> 1);
  #line 577 
  eeprom_buff = (u16 *)kmalloc((unsigned long)max_len,3264U);
  #line 578 
  if (eeprom_buff == (u16 *)0U) 
                                #line 579 
                                return -12;
  #line 581 
  ptr = (void *)eeprom_buff;
  #line 583 
  pm_runtime_get_sync(netdev->dev.parent);
  #line 585 
  if ((eeprom->offset & 1U) != 0U) {
    #line 588 
    ret_val = e1000_read_nvm(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)1,eeprom_buff);
    #line 589 
    ptr ++;
  }
  #line 591 
  if (((eeprom->offset + eeprom->len) & 1U) != 0U && ret_val == 0) 
                                                                   #line 594 
                                                                   ret_val = e1000_read_nvm(hw,(unsigned short)((int)((unsigned short)last_word)),(unsigned short)1,eeprom_buff + (unsigned long)(last_word - first_word));
  #line 597 
  if (ret_val != 0) 
                    #line 598 
                    goto out;
  #line 601 
  i = (unsigned short)0U;
  #line 601 
  while (last_word - first_word >= (int)i) {
    #line 602 
    u16 *tmp_2 = eeprom_buff + (unsigned long)i;
    #line 601 
    i = (u16)((int)i + 1);
  }
  #line 604 
  memcpy(ptr,(void *)bytes,(unsigned long)eeprom->len);
  #line 606 
  i = (unsigned short)0U;
  #line 606 
  while (last_word - first_word >= (int)i) {
    #line 607 
    u16 *tmp_4 = eeprom_buff + (unsigned long)i;
    #line 606 
    i = (u16)((int)i + 1);
  }
  #line 609 
  ret_val = e1000_write_nvm(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)((int)((unsigned int)((int)((unsigned short)last_word) - (int)((unsigned short)first_word)) + 1U)),eeprom_buff);
  #line 612 
  if (ret_val != 0) 
                    #line 613 
                    goto out;
  #line 618 
  if (((first_word <= 63 || hw->mac.type == (unsigned int)e1000_82583) || hw->mac.type == (unsigned int)e1000_82574) || hw->mac.type == (unsigned int)e1000_82573) 
    #line 622 
    ret_val = e1000e_update_nvm_checksum(hw);
  #line 624 
  out: 
       #line 624 
  ;
  #line 625 
  pm_runtime_put_sync(netdev->dev.parent);
  #line 626 
  kfree((void *)eeprom_buff);
  #line 627 
  return ret_val;
}

#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  #line 633 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 635 
  strlcpy((char *)(& drvinfo->driver),(char *)(& e1000e_driver_name),32UL);
  #line 636 
  strlcpy((char *)(& drvinfo->version),(char *)(& e1000e_driver_version),32UL);
  #line 642 
  snprintf((char *)(& drvinfo->fw_version),32UL,(char *)"%d.%d-%d",(int)adapter->eeprom_vers >> 12,((int)adapter->eeprom_vers >> 4) & 255,(int)adapter->eeprom_vers & 15);
  #line 648 
  ;
  #line 648 
  strlcpy((char *)(& drvinfo->bus_info),pci_name(adapter->pdev),32UL);
  #line 649 
  return;
}

#line 652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 655 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 657 
  ring->rx_max_pending = 4096U;
  #line 658 
  ring->tx_max_pending = 4096U;
  #line 659 
  ring->rx_pending = (unsigned int)adapter->rx_ring_count;
  #line 660 
  ring->tx_pending = (unsigned int)adapter->tx_ring_count;
  #line 661 
  return;
}

#line 663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  #line 679 
  unsigned int tmp_6;
  #line 675 
  unsigned int __UNIQUE_ID___x443;
  #line 675 
  unsigned int tmp_2;
  #line 679 
  unsigned int __UNIQUE_ID___x447;
  #line 670 
  u16 new_rx_count;
  #line 670 
  u16 new_tx_count;
  #line 666 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 667 
  struct e1000_ring *temp_tx = (struct e1000_ring *)0;
  #line 667 
  struct e1000_ring *temp_rx = (struct e1000_ring *)0;
  #line 668 
  int err = 0;
  #line 668 
  int size = 120;
  #line 669 
  bool set_tx = (_Bool)0;
  #line 669 
  bool set_rx = (_Bool)0;
  #line 672 
  if (ring->rx_mini_pending != 0U || ring->rx_jumbo_pending != 0U) 
                                                                   #line 673 
                                                                   return -22;
  {
    #line 675 
    unsigned int __UNIQUE_ID___x441;
    #line 675 
    unsigned int tmp_0;
    {
      #line 675 
      __UNIQUE_ID___x441 = ring->rx_pending;
      #line 675 
      unsigned int __UNIQUE_ID___y442 = 64U;
      #line 675 
      if (__UNIQUE_ID___x441 > __UNIQUE_ID___y442) 
                                                   #line 675 
                                                   tmp_0 = __UNIQUE_ID___x441; else 
                                                                    #line 675 
                                                                    tmp_0 = __UNIQUE_ID___y442;
      }
    #line 675 
    __UNIQUE_ID___x443 = tmp_0;
    #line 675 
    unsigned int __UNIQUE_ID___y444 = 4096U;
    #line 675 
    if (__UNIQUE_ID___x443 < __UNIQUE_ID___y444) 
                                                 #line 675 
                                                 tmp_2 = __UNIQUE_ID___x443; else 
                                                                    #line 675 
                                                                    tmp_2 = __UNIQUE_ID___y444;
    }
  #line 675 
  new_rx_count = (unsigned short)tmp_2;
  #line 677 
  new_rx_count = (unsigned short)((unsigned int)((unsigned short)((unsigned int)new_rx_count + 7U)) & 65528U);
  {
    #line 679 
    unsigned int __UNIQUE_ID___x445;
    #line 679 
    unsigned int tmp_4;
    {
      #line 679 
      __UNIQUE_ID___x445 = ring->tx_pending;
      #line 679 
      unsigned int __UNIQUE_ID___y446 = 64U;
      #line 679 
      if (__UNIQUE_ID___x445 > __UNIQUE_ID___y446) 
                                                   #line 679 
                                                   tmp_4 = __UNIQUE_ID___x445; else 
                                                                    #line 679 
                                                                    tmp_4 = __UNIQUE_ID___y446;
      }
    #line 679 
    __UNIQUE_ID___x447 = tmp_4;
    #line 679 
    unsigned int __UNIQUE_ID___y448 = 4096U;
    #line 679 
    if (__UNIQUE_ID___x447 < __UNIQUE_ID___y448) 
                                                 #line 679 
                                                 tmp_6 = __UNIQUE_ID___x447; else 
                                                                    #line 679 
                                                                    tmp_6 = __UNIQUE_ID___y448;
    }
  #line 679 
  new_tx_count = (unsigned short)tmp_6;
  #line 681 
  new_tx_count = (unsigned short)((unsigned int)((unsigned short)((unsigned int)new_tx_count + 7U)) & 65528U);
  #line 683 
  if ((int)adapter->tx_ring_count == (int)new_tx_count && (int)adapter->rx_ring_count == (int)new_rx_count) 
    #line 686 
    return 0;
  #line 688 
  while (1) {
    #line 688 
    if (! ((int)test_and_set_bit(1L,& adapter->state) != 0)) 
                                                             #line 688 
                                                             break;
    #line 689 
    usleep_range(1000UL,2000UL);
  }
  #line 691 
  if (! netif_running(adapter->netdev)) {
    #line 693 
    (adapter->tx_ring)->count = (unsigned int)new_tx_count;
    #line 694 
    (adapter->rx_ring)->count = (unsigned int)new_rx_count;
    #line 695 
    adapter->tx_ring_count = new_tx_count;
    #line 696 
    adapter->rx_ring_count = new_rx_count;
    #line 697 
    goto clear_reset;
  }
  #line 700 
  set_tx = (_Bool)((int)adapter->tx_ring_count != (int)new_tx_count);
  #line 701 
  set_rx = (_Bool)((int)adapter->rx_ring_count != (int)new_rx_count);
  #line 704 
  if ((int)set_tx != 0) {
    #line 705 
    temp_tx = (struct e1000_ring *)cif_vmalloc((unsigned long)size);
    #line 706 
    if (temp_tx == (struct e1000_ring *)0) {
      #line 707 
      err = -12;
      #line 708 
      goto free_temp;
    }
  }
  #line 711 
  if ((int)set_rx != 0) {
    #line 712 
    temp_rx = (struct e1000_ring *)cif_vmalloc((unsigned long)size);
    #line 713 
    if (temp_rx == (struct e1000_ring *)0) {
      #line 714 
      err = -12;
      #line 715 
      goto free_temp;
    }
  }
  #line 719 
  pm_runtime_get_sync(netdev->dev.parent);
  #line 721 
  e1000e_down(adapter,(_Bool)1);
  #line 727 
  if ((int)set_tx != 0) {
    #line 728 
    memcpy((void *)temp_tx,(void *)adapter->tx_ring,(unsigned long)size);
    #line 729 
    temp_tx->count = (unsigned int)new_tx_count;
    #line 730 
    err = e1000e_setup_tx_resources(temp_tx);
    #line 731 
    if (err != 0) 
                  #line 732 
                  goto err_setup;
  }
  #line 734 
  if ((int)set_rx != 0) {
    #line 735 
    memcpy((void *)temp_rx,(void *)adapter->rx_ring,(unsigned long)size);
    #line 736 
    temp_rx->count = (unsigned int)new_rx_count;
    #line 737 
    err = e1000e_setup_rx_resources(temp_rx);
    #line 738 
    if (err != 0) 
                  #line 739 
                  goto err_setup_rx;
  }
  #line 743 
  if ((int)set_tx != 0) {
    #line 744 
    e1000e_free_tx_resources(adapter->tx_ring);
    #line 745 
    memcpy((void *)adapter->tx_ring,(void *)temp_tx,(unsigned long)size);
    #line 746 
    adapter->tx_ring_count = new_tx_count;
  }
  #line 748 
  if ((int)set_rx != 0) {
    #line 749 
    e1000e_free_rx_resources(adapter->rx_ring);
    #line 750 
    memcpy((void *)adapter->rx_ring,(void *)temp_rx,(unsigned long)size);
    #line 751 
    adapter->rx_ring_count = new_rx_count;
  }
  #line 754 
  err_setup_rx: 
                #line 754 
  ;
  #line 755 
  if (err != 0 && (int)set_tx != 0) 
                                    #line 756 
                                    e1000e_free_tx_resources(temp_tx);
  #line 757 
  err_setup: 
             #line 757 
  ;
  #line 758 
  e1000e_up(adapter);
  #line 759 
  pm_runtime_put_sync(netdev->dev.parent);
  #line 760 
  free_temp: 
             #line 760 
  ;
  #line 761 
  cif_vfree_0((void *)temp_tx);
  #line 762 
  cif_vfree_0((void *)temp_rx);
  #line 763 
  clear_reset: 
               #line 763 
  ;
  #line 764 
  cif_clear_bit_1(1L,& adapter->state);
  #line 765 
  return err;
}

#line 768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static bool reg_pattern_test(struct e1000_adapter *adapter, u64 *data, int reg, int offset, u32 mask, u32 write)
{
  #line 771 
  u32 pat;
  #line 771 
  u32 val;
  #line 772 
  u32 test[4U] = {1515870810U, 2779096485U, 0U, 4294967295U};
  #line 775 
  pat = 0U;
  #line 775 
  while (pat <= 3U) {
    #line 776 
    __ew32(& adapter->hw,(unsigned long)((offset << 2) + reg),test[pat] & write);
    #line 778 
    val = readl(adapter->hw.hw_addr + ((unsigned long)reg + (unsigned long)(offset << 2)));
    #line 779 
    if (((test[pat] & write) & mask) != val) {
      #line 780 
      netdev_err(adapter->netdev,(char *)"pattern test failed (reg 0x%05X): got 0x%08X expected 0x%08X\n",(offset << 2) + reg,val,(test[pat] & write) & mask);
      #line 783 
      *data = (unsigned long long)reg;
      #line 784 
      return (_Bool)1;
    }
    #line 775 
    pat ++;
  }
  #line 787 
  return (_Bool)0;
}

#line 790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static bool reg_set_and_check(struct e1000_adapter *adapter, u64 *data, int reg, u32 mask, u32 write)
{
  #line 793 
  u32 val;
  #line 795 
  __ew32(& adapter->hw,(unsigned long)reg,write & mask);
  #line 796 
  val = __er32(& adapter->hw,(unsigned long)reg);
  #line 797 
  if (((write ^ val) & mask) != 0U) {
    #line 798 
    netdev_err(adapter->netdev,(char *)"set/check test failed (reg 0x%05X): got 0x%08X expected 0x%08X\n",reg,val & mask,write & mask);
    #line 800 
    *data = (unsigned long long)reg;
    #line 801 
    return (_Bool)1;
  }
  #line 803 
  return (_Bool)0;
}

#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_reg_test(struct e1000_adapter *adapter, u64 *data)
{
  #line 824 
  u32 value;
  #line 825 
  u32 before;
  #line 826 
  u32 after;
  #line 827 
  u32 i;
  #line 828 
  u32 toggle;
  #line 829 
  u32 mask;
  #line 822 
  struct e1000_hw *hw = & adapter->hw;
  #line 823 
  struct e1000_mac_info *mac = & adapter->hw.mac;
  #line 830 
  u32 wlock_mac = 0U;
  #line 836 
  switch ((unsigned int)mac->type) {
    #line 837 
    case (unsigned int)0: 
                          #line 837 
    ;
    #line 838 
    case (unsigned int)1: 
                          #line 838 
    ;
    #line 839 
    case (unsigned int)5: 
                          #line 839 
    ;
    #line 840 
    toggle = 2147480575U;
    #line 841 
    break;
    #line 842 
    default: 
             #line 842 
    ;
    #line 843 
    toggle = 2147479603U;
    #line 844 
    break;
  }
  #line 847 
  before = __er32(hw,8UL);
  #line 848 
  value = __er32(hw,8UL) & toggle;
  #line 849 
  __ew32(hw,8UL,toggle);
  #line 850 
  after = __er32(hw,8UL) & toggle;
  #line 851 
  if (value != after) {
    #line 852 
    netdev_err(adapter->netdev,(char *)"failed STATUS register test got: 0x%08X expected: 0x%08X\n",after,value);
    #line 854 
    *data = 1ULL;
    #line 855 
    return 1;
  }
  #line 858 
  __ew32(hw,8UL,before);
  #line 860 
  if (((unsigned long)adapter->flags & 512UL) == 0UL) {
    #line 861 
    if ((int)reg_pattern_test(adapter,data,40,0,4294967295U,4294967295U) != 0) 
      #line 861 
      return 1;
    #line 862 
    if ((int)reg_pattern_test(adapter,data,44,0,65535U,4294967295U) != 0) 
      #line 862 
      return 1;
    #line 863 
    if ((int)reg_pattern_test(adapter,data,48,0,65535U,4294967295U) != 0) 
      #line 863 
      return 1;
    #line 864 
    if ((int)reg_pattern_test(adapter,data,56,0,65535U,4294967295U) != 0) 
      #line 864 
      return 1;
  }
  #line 867 
  if ((int)reg_pattern_test(adapter,data,10272,0,65535U,4294967295U) != 0) 
    #line 867 
    return 1;
  #line 868 
  if ((int)reg_pattern_test(adapter,data,10244,0,4294967295U,4294967295U) != 0) 
    #line 868 
    return 1;
  #line 869 
  if ((int)reg_pattern_test(adapter,data,10248,0,1048448U,1048575U) != 0) 
    #line 869 
    return 1;
  #line 870 
  if ((int)reg_pattern_test(adapter,data,10256,0,65535U,65535U) != 0) 
    #line 870 
    return 1;
  #line 871 
  if ((int)reg_pattern_test(adapter,data,10264,0,65535U,65535U) != 0) 
    #line 871 
    return 1;
  #line 872 
  if ((int)reg_pattern_test(adapter,data,8552,0,65528U,65528U) != 0) 
    #line 872 
    return 1;
  #line 873 
  if ((int)reg_pattern_test(adapter,data,368,0,65535U,65535U) != 0) 
                                                                    #line 873 
                                                                    return 1;
  #line 874 
  if ((int)reg_pattern_test(adapter,data,1040,0,1073741823U,1073741823U) != 0) 
    #line 874 
    return 1;
  #line 875 
  if ((int)reg_pattern_test(adapter,data,14340,0,4294967295U,4294967295U) != 0) 
    #line 875 
    return 1;
  #line 876 
  if ((int)reg_pattern_test(adapter,data,14344,0,1048448U,1048575U) != 0) 
    #line 876 
    return 1;
  #line 878 
  if ((int)reg_set_and_check(adapter,data,256,4294967295U,0U) != 0) 
                                                                    #line 878 
                                                                    return 1;
  #line 880 
  if (((unsigned long)adapter->flags & 512UL) != 0UL) 
                                                      #line 880 
                                                      before = 113488702U; else 
                                                                    #line 880 
                                                                    before = 115323902U;
  #line 881 
  if ((int)reg_set_and_check(adapter,data,256,before,4194299U) != 0) 
    #line 881 
    return 1;
  #line 882 
  if ((int)reg_set_and_check(adapter,data,1024,4294967295U,0U) != 0) 
    #line 882 
    return 1;
  #line 884 
  if ((int)reg_set_and_check(adapter,data,256,before,4294967295U) != 0) 
    #line 884 
    return 1;
  #line 885 
  if ((int)reg_pattern_test(adapter,data,10240,0,4294967280U,4294967295U) != 0) 
    #line 885 
    return 1;
  #line 886 
  if (((unsigned long)adapter->flags & 512UL) == 0UL) {
    #line 887 
    if ((int)reg_pattern_test(adapter,data,376,0,3221291007U,65535U) != 0) 
      #line 887 
      return 1;
  }
  #line 888 
  if ((int)reg_pattern_test(adapter,data,14336,0,4294967280U,4294967295U) != 0) 
    #line 888 
    return 1;
  #line 889 
  if ((int)reg_pattern_test(adapter,data,14368,0,65535U,65535U) != 0) 
    #line 889 
    return 1;
  #line 890 
  mask = 2147745791U;
  #line 891 
  switch ((unsigned int)mac->type) {
    #line 892 
    case (unsigned int)8: 
                          #line 892 
    ;
    #line 893 
    case (unsigned int)9: 
                          #line 893 
    ;
    #line 894 
    case (unsigned int)10: 
                           #line 894 
    ;
    #line 895 
    case (unsigned int)11: 
                           #line 895 
    ;
    #line 896 
    case (unsigned int)12: 
                           #line 896 
    ;
    #line 897 
    case (unsigned int)13: 
                           #line 897 
    ;
    #line 899 
    case (unsigned int)14: 
                           #line 899 
    ;
    #line 900 
    mask |= 262144U;
    #line 901 
    break;
    #line 902 
    default: 
             #line 902 
    ;
    #line 903 
    break;
  }
  #line 906 
  if (mac->type > (unsigned int)e1000_pch2lan) {
    #line 907 
    wlock_mac = (__er32(hw,23380UL) >> 7) & 7U;
  }
  #line 910 
  i = 0U;
  #line 910 
  while ((unsigned int)mac->rar_entry_count > i) {
    {
      #line 911 
      if (mac->type > (unsigned int)e1000_pch2lan) {
        #line 913 
        if (wlock_mac == 1U || wlock_mac != 0U && i > wlock_mac) 
                                                                 #line 914 
                                                                 goto __Cont;
        #line 917 
        if (i == 10U) 
                      #line 918 
                      mask |= 1073741824U; else 
                                                #line 920 
                                                mask &= 3221225471U;
      }
      #line 922 
      if (mac->type == (unsigned int)e1000_pch2lan) {
        #line 924 
        if (i == 1U) 
                     #line 925 
                     mask &= 4294246399U;
        #line 927 
        if (i == 4U) 
                     #line 928 
                     mask |= 1073741824U;
        #line 930 
        if (i != 0U) 
                     #line 931 
                     i += 6U;
      }
      #line 934 
      if ((int)reg_pattern_test(adapter,data,21504,(int)((i << 1) + 1U),mask,
                          4294967295U) != 0) 
        #line 934 
        return 1;
      #line 937 
      if (mac->type == (unsigned int)e1000_pch2lan && i > 6U) 
                                                              #line 938 
                                                              i += 4294967290U;
    }
    #line 910 
    __Cont: 
            #line 910 
    i ++;
  }
  #line 941 
  i = 0U;
  #line 941 
  while ((unsigned int)mac->mta_reg_count > i) {
    #line 942 
    if ((int)reg_pattern_test(adapter,data,20992,(int)i,4294967295U,4294967295U) != 0) 
      #line 942 
      return 1;
    #line 941 
    i ++;
  }
  #line 944 
  *data = 0ULL;
  #line 946 
  return 0;
}

#line 949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_eeprom_test(struct e1000_adapter *adapter, u64 *data)
{
  #line 951 
  u16 temp;
  #line 953 
  u16 i;
  #line 952 
  u16 checksum = (unsigned short)0U;
  #line 955 
  *data = 0ULL;
  #line 957 
  i = (unsigned short)0U;
  #line 957 
  while ((unsigned int)i <= 63U) {
    {
      #line 958 
      if (e1000_read_nvm(& adapter->hw,(unsigned short)((int)i),
                     (unsigned short)1,& temp) < 0) {
        #line 959 
        *data = 1ULL;
        #line 960 
        return (int)*data;
      }
      #line 962 
      checksum = (unsigned short)((int)checksum + (int)temp);
    }
    #line 957 
    i = (u16)((int)i + 1);
  }
  #line 966 
  if ((unsigned int)checksum != 47802U && *data == 0ULL) 
                                                         #line 967 
                                                         *data = 2ULL;
  #line 969 
  return (int)*data;
}

#line 972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static irqreturn_t e1000_test_intr(int irq, void *data)
{
  #line 974 
  struct net_device *netdev = (struct net_device *)data;
  #line 975 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 976 
  struct e1000_hw *hw = & adapter->hw;
  #line 978 
  adapter->test_icr |= __er32(hw,192UL);
  #line 980 
  return IRQ_HANDLED;
}

#line 983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_intr_test(struct e1000_adapter *adapter, u64 *data)
{
  #line 987 
  u32 mask;
  #line 990 
  int i;
  #line 1013 
  char *tmp_1;
  #line 985 
  struct net_device *netdev = adapter->netdev;
  #line 986 
  struct e1000_hw *hw = & adapter->hw;
  #line 988 
  u32 shared_int = 1U;
  #line 989 
  u32 irq = (adapter->pdev)->irq;
  #line 991 
  int ret_val = 0;
  #line 992 
  int int_mode = 0;
  #line 994 
  *data = 0ULL;
  #line 997 
  if (adapter->int_mode == 2) {
    #line 998 
    int_mode = adapter->int_mode;
    #line 999 
    e1000e_reset_interrupt_capability(adapter);
    #line 1000 
    adapter->int_mode = 0;
    #line 1001 
    e1000e_set_interrupt_capability(adapter);
  }
  #line 1004 
  if (cif_request_irq_0(irq,& e1000_test_intr,256UL,
                          (char *)(& netdev->name),(void *)netdev) == 0) 
    #line 1006 
    shared_int = 0U;
  else {
    #line 1007 
    if (cif_request_irq_0(irq,& e1000_test_intr,128UL,(char *)(& netdev->name),
                        (void *)netdev) != 0) {
      #line 1009 
      *data = 1ULL;
      #line 1010 
      ret_val = -1;
      #line 1011 
      goto out;
    }
  }
  #line 1013 
  if (shared_int != 0U) 
                        #line 1013 
                        tmp_1 = (char *)"shared"; else 
                                                       #line 1013 
                                                       tmp_1 = (char *)"unshared";
  #line 1013 
  ;
  #line 1013 
  netdev_info(adapter->netdev,(char *)"testing %s interrupt\n",tmp_1);
  #line 1016 
  __ew32(hw,216UL,4294967295U);
  #line 1017 
  __er32(hw,8UL);
  #line 1018 
  usleep_range(10000UL,11000UL);
  #line 1021 
  i = 0;
  #line 1021 
  while (i <= 9) {
    #line 1023 
    mask = (unsigned int)(1UL << i);
    #line 1025 
    if (((unsigned long)adapter->flags & 512UL) != 0UL) 
      #line 1026 
      switch (mask) {
        #line 1027 
        case (u32)8: 
                     #line 1027 
        ;
        #line 1028 
        goto __Cont;
        #line 1029 
        case (u32)256: 
                       #line 1029 
        ;
        #line 1030 
        if ((unsigned int)adapter->hw.mac.type + 4294967290U <= 1U) 
                                                                    #line 1032 
                                                                    goto __Cont;
        #line 1033 
        break;
        #line 1034 
        default: 
                 #line 1034 
        ;
        #line 1035 
        break;
      }
    #line 1039 
    if (shared_int == 0U) {
      #line 1046 
      adapter->test_icr = 0U;
      #line 1047 
      __ew32(hw,216UL,mask);
      #line 1048 
      __ew32(hw,200UL,mask);
      #line 1049 
      __er32(hw,8UL);
      #line 1050 
      usleep_range(10000UL,11000UL);
      #line 1052 
      if ((adapter->test_icr & mask) != 0U) {
        #line 1053 
        *data = 3ULL;
        #line 1054 
        break;
      }
    }
    #line 1064 
    adapter->test_icr = 0U;
    #line 1065 
    __ew32(hw,208UL,mask);
    #line 1066 
    __ew32(hw,200UL,mask);
    #line 1067 
    __er32(hw,8UL);
    #line 1068 
    usleep_range(10000UL,11000UL);
    #line 1070 
    if ((adapter->test_icr & mask) == 0U) {
      #line 1071 
      *data = 4ULL;
      #line 1072 
      break;
    }
    #line 1075 
    if (shared_int == 0U) {
      #line 1082 
      adapter->test_icr = 0U;
      #line 1083 
      __ew32(hw,216UL,~ mask & 32767U);
      #line 1084 
      __ew32(hw,200UL,~ mask & 32767U);
      #line 1085 
      __er32(hw,8UL);
      #line 1086 
      usleep_range(10000UL,11000UL);
      #line 1088 
      if (adapter->test_icr != 0U) {
        #line 1089 
        *data = 5ULL;
        #line 1090 
        break;
      }
    }
    #line 1021 
    __Cont: 
            #line 1021 
    i ++;
  }
  #line 1096 
  __ew32(hw,216UL,4294967295U);
  #line 1097 
  __er32(hw,8UL);
  #line 1098 
  usleep_range(10000UL,11000UL);
  #line 1101 
  cif_free_irq_0(irq,(void *)netdev);
  #line 1103 
  out: 
       #line 1103 
  ;
  #line 1104 
  if (int_mode == 2) {
    #line 1105 
    e1000e_reset_interrupt_capability(adapter);
    #line 1106 
    adapter->int_mode = int_mode;
    #line 1107 
    e1000e_set_interrupt_capability(adapter);
  }
  #line 1110 
  return ret_val;
}

#line 1113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_free_desc_rings(struct e1000_adapter *adapter)
{
  #line 1118 
  struct e1000_buffer *buffer_info;
  #line 1119 
  int i;
  #line 1115 
  struct e1000_ring *tx_ring = & adapter->test_tx_ring;
  #line 1116 
  struct e1000_ring *rx_ring = & adapter->test_rx_ring;
  #line 1117 
  struct pci_dev *pdev = adapter->pdev;
  #line 1121 
  if (tx_ring->desc != (void *)0 && tx_ring->buffer_info != (struct e1000_buffer *)0) {
    #line 1122 
    i = 0;
    #line 1122 
    while (tx_ring->count > (unsigned int)i) {
      #line 1123 
      buffer_info = tx_ring->buffer_info + (unsigned long)i;
      #line 1125 
      if (buffer_info->dma != 0ULL) 
                                    #line 1126 
                                    dma_unmap_single_attrs(& pdev->dev,buffer_info->dma,(unsigned long)buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.length,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 1130 
      consume_skb(buffer_info->skb);
      #line 1122 
      i ++;
    }
  }
  #line 1134 
  if (rx_ring->desc != (void *)0 && rx_ring->buffer_info != (struct e1000_buffer *)0) {
    #line 1135 
    i = 0;
    #line 1135 
    while (rx_ring->count > (unsigned int)i) {
      #line 1136 
      buffer_info = rx_ring->buffer_info + (unsigned long)i;
      #line 1138 
      if (buffer_info->dma != 0ULL) 
                                    #line 1139 
                                    dma_unmap_single_attrs(& pdev->dev,buffer_info->dma,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 1142 
      consume_skb(buffer_info->skb);
      #line 1135 
      i ++;
    }
  }
  #line 1146 
  if (tx_ring->desc != (void *)0) {
    #line 1147 
    dma_free_coherent(& pdev->dev,(unsigned long)tx_ring->size,tx_ring->desc,tx_ring->dma);
    #line 1149 
    tx_ring->desc = (void *)0;
  }
  #line 1151 
  if (rx_ring->desc != (void *)0) {
    #line 1152 
    dma_free_coherent(& pdev->dev,(unsigned long)rx_ring->size,rx_ring->desc,rx_ring->dma);
    #line 1154 
    rx_ring->desc = (void *)0;
  }
  #line 1157 
  kfree((void *)tx_ring->buffer_info);
  #line 1158 
  tx_ring->buffer_info = (struct e1000_buffer *)0;
  #line 1159 
  kfree((void *)rx_ring->buffer_info);
  #line 1160 
  rx_ring->buffer_info = (struct e1000_buffer *)0;
  #line 1161 
  return;
}

#line 1163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_setup_desc_rings(struct e1000_adapter *adapter)
{
  #line 1169 
  u32 rctl;
  #line 1170 
  int i;
  #line 1171 
  int ret_val;
  #line 1165 
  struct e1000_ring *tx_ring = & adapter->test_tx_ring;
  #line 1166 
  struct e1000_ring *rx_ring = & adapter->test_rx_ring;
  #line 1167 
  struct pci_dev *pdev = adapter->pdev;
  #line 1168 
  struct e1000_hw *hw = & adapter->hw;
  #line 1175 
  if (tx_ring->count == 0U) 
                            #line 1176 
                            tx_ring->count = 256U;
  #line 1178 
  tx_ring->buffer_info = (struct e1000_buffer *)kcalloc_0((unsigned long)tx_ring->count,40UL,3264U);
  #line 1180 
  if (tx_ring->buffer_info == (struct e1000_buffer *)0) {
    #line 1181 
    ret_val = 1;
    #line 1182 
    goto err_nomem;
  }
  #line 1185 
  tx_ring->size = tx_ring->count * 16U;
  #line 1186 
  tx_ring->size = (tx_ring->size + 4095U) & 4294963200U;
  #line 1187 
  tx_ring->desc = dma_alloc_coherent(& pdev->dev,(unsigned long)tx_ring->size,& tx_ring->dma,3264U);
  #line 1189 
  if (tx_ring->desc == (void *)0) {
    #line 1190 
    ret_val = 2;
    #line 1191 
    goto err_nomem;
  }
  #line 1193 
  tx_ring->next_to_use = (unsigned short)0U;
  #line 1194 
  tx_ring->next_to_clean = (unsigned short)0U;
  #line 1196 
  __ew32(hw,14336UL,(unsigned int)tx_ring->dma);
  #line 1197 
  __ew32(hw,14340UL,(unsigned int)(tx_ring->dma >> 32));
  #line 1198 
  __ew32(hw,14344UL,tx_ring->count * 16U);
  #line 1199 
  __ew32(hw,14352UL,0U);
  #line 1200 
  __ew32(hw,14360UL,0U);
  #line 1201 
  __ew32(hw,1024UL,268693754U);
  #line 1205 
  i = 0;
  #line 1205 
  while (tx_ring->count > (unsigned int)i) {
    {
      #line 1207 
      struct sk_buff *skb;
      #line 1206 
      struct e1000_tx_desc *tx_desc = (struct e1000_tx_desc *)tx_ring->desc + (unsigned long)i;
      #line 1208 
      unsigned int skb_size = 1024U;
      #line 1210 
      skb = alloc_skb(skb_size,3264U);
      #line 1211 
      if (skb == (struct sk_buff *)0) {
        #line 1212 
        ret_val = 3;
        #line 1213 
        goto err_nomem;
      }
      #line 1215 
      skb_put(skb,skb_size);
      #line 1216 
      (tx_ring->buffer_info + (unsigned long)i)->skb = skb;
      #line 1217 
      (tx_ring->buffer_info + (unsigned long)i)->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.length = (unsigned short)skb->len;
      #line 1218 
      (tx_ring->buffer_info + (unsigned long)i)->dma = dma_map_single_attrs(& pdev->dev,(void *)skb->data,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 1221 
      if (dma_mapping_error(& pdev->dev,
                          (tx_ring->buffer_info + (unsigned long)i)->dma) != 0) {
        #line 1223 
        ret_val = 4;
        #line 1224 
        goto err_nomem;
      }
      #line 1226 
      tx_desc->buffer_addr = (tx_ring->buffer_info + (unsigned long)i)->dma;
      #line 1227 
      tx_desc->lower.data = skb->len;
      #line 1228 
      tx_desc->lower.data |= 184549376U;
      #line 1231 
      tx_desc->upper.data = 0U;
    }
    #line 1205 
    i ++;
  }
  #line 1236 
  if (rx_ring->count == 0U) 
                            #line 1237 
                            rx_ring->count = 256U;
  #line 1239 
  rx_ring->buffer_info = (struct e1000_buffer *)kcalloc_0((unsigned long)rx_ring->count,40UL,3264U);
  #line 1241 
  if (rx_ring->buffer_info == (struct e1000_buffer *)0) {
    #line 1242 
    ret_val = 5;
    #line 1243 
    goto err_nomem;
  }
  #line 1246 
  rx_ring->size = rx_ring->count * 16U;
  #line 1247 
  rx_ring->desc = dma_alloc_coherent(& pdev->dev,(unsigned long)rx_ring->size,& rx_ring->dma,3264U);
  #line 1249 
  if (rx_ring->desc == (void *)0) {
    #line 1250 
    ret_val = 6;
    #line 1251 
    goto err_nomem;
  }
  #line 1253 
  rx_ring->next_to_use = (unsigned short)0U;
  #line 1254 
  rx_ring->next_to_clean = (unsigned short)0U;
  #line 1256 
  rctl = __er32(hw,256UL);
  #line 1257 
  if (((unsigned long)adapter->flags2 & 1024UL) == 0UL) 
                                                        #line 1258 
                                                        __ew32(hw,256UL,rctl & 4294967293U);
  #line 1259 
  __ew32(hw,10240UL,(unsigned int)rx_ring->dma);
  #line 1260 
  __ew32(hw,10244UL,(unsigned int)(rx_ring->dma >> 32));
  #line 1261 
  __ew32(hw,10248UL,rx_ring->size);
  #line 1262 
  __ew32(hw,10256UL,0U);
  #line 1263 
  __ew32(hw,10264UL,0U);
  #line 1264 
  rctl = (adapter->hw.mac.mc_filter_type << 12) | 67141694U;
  #line 1269 
  __ew32(hw,256UL,rctl);
  #line 1271 
  i = 0;
  #line 1271 
  while (rx_ring->count > (unsigned int)i) {
    {
      #line 1272 
      union e1000_rx_desc_extended *rx_desc;
      #line 1273 
      struct sk_buff *skb_0;
      #line 1275 
      skb_0 = alloc_skb(2048U,3264U);
      #line 1276 
      if (skb_0 == (struct sk_buff *)0) {
        #line 1277 
        ret_val = 7;
        #line 1278 
        goto err_nomem;
      }
      #line 1280 
      skb_reserve(skb_0,0);
      #line 1281 
      (rx_ring->buffer_info + (unsigned long)i)->skb = skb_0;
      #line 1282 
      (rx_ring->buffer_info + (unsigned long)i)->dma = dma_map_single_attrs(& pdev->dev,(void *)skb_0->data,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 1285 
      if (dma_mapping_error(& pdev->dev,
                          (rx_ring->buffer_info + (unsigned long)i)->dma) != 0) {
        #line 1287 
        ret_val = 8;
        #line 1288 
        goto err_nomem;
      }
      #line 1290 
      rx_desc = (union e1000_rx_desc_extended *)rx_ring->desc + (unsigned long)i;
      #line 1291 
      rx_desc->read.buffer_addr = (rx_ring->buffer_info + (unsigned long)i)->dma;
      #line 1293 
      memset((void *)skb_0->data,0,(unsigned long)skb_0->len);
    }
    #line 1271 
    i ++;
  }
  #line 1296 
  return 0;
  #line 1298 
  err_nomem: 
             #line 1298 
  ;
  #line 1299 
  e1000_free_desc_rings(adapter);
  #line 1300 
  return ret_val;
}

#line 1303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_phy_disable_receiver(struct e1000_adapter *adapter)
{
  #line 1306 
  e1e_wphy(& adapter->hw,29U,(unsigned short)31);
  #line 1307 
  e1e_wphy(& adapter->hw,30U,(unsigned short)36860);
  #line 1308 
  e1e_wphy(& adapter->hw,29U,(unsigned short)26);
  #line 1309 
  e1e_wphy(& adapter->hw,30U,(unsigned short)36848);
  #line 1310 
  return;
}

#line 1312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_integrated_phy_loopback(struct e1000_adapter *adapter)
{
  #line 1314 
  struct e1000_hw *hw = & adapter->hw;
  #line 1315 
  u32 ctrl_reg = 0U;
  #line 1316 
  u16 phy_reg = (unsigned short)0U;
  #line 1317 
  s32 ret_val = 0;
  #line 1319 
  hw->mac.autoneg = (_Bool)0;
  #line 1321 
  if (hw->phy.type == (unsigned int)e1000_phy_ife) {
    #line 1323 
    e1e_wphy(hw,0U,(unsigned short)24832);
    #line 1326 
    ctrl_reg = __er32(hw,0UL);
    #line 1327 
    ctrl_reg &= 4294966527U;
    #line 1328 
    ctrl_reg |= 6401U;
    #line 1333 
    __ew32(hw,0UL,ctrl_reg);
    #line 1334 
    __er32(hw,8UL);
    #line 1335 
    usleep_range(500UL,1000UL);
    #line 1337 
    return 0;
  }
  #line 1341 
  switch ((unsigned int)hw->phy.type) {
    #line 1342 
    case (unsigned int)2: 
                          #line 1342 
    ;
    #line 1344 
    e1e_wphy(hw,16U,(unsigned short)2056);
    #line 1346 
    e1e_wphy(hw,0U,(unsigned short)37184);
    #line 1348 
    e1e_wphy(hw,0U,(unsigned short)33088);
    #line 1349 
    break;
    #line 1350 
    case (unsigned int)5: 
                          #line 1350 
    ;
    #line 1351 
    e1e_wphy(hw,6192U,(unsigned short)460);
    #line 1352 
    break;
    #line 1353 
    case (unsigned int)8: 
                          #line 1353 
    ;
    #line 1355 
    e1e_rphy(hw,85U,& phy_reg);
    #line 1356 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 65528U);
    #line 1357 
    phy_reg = (unsigned short)((unsigned int)phy_reg | 6U);
    #line 1358 
    e1e_wphy(hw,85U,(unsigned short)((int)phy_reg));
    #line 1360 
    (*(hw->phy.ops.commit))(hw);
    #line 1361 
    usleep_range(1000UL,2000UL);
    #line 1363 
    e1e_rphy(hw,24624U,& phy_reg);
    #line 1364 
    e1e_wphy(hw,24624U,(unsigned short)((int)((unsigned int)phy_reg | 12U)));
    #line 1366 
    e1e_rphy(hw,24848U,& phy_reg);
    #line 1367 
    e1e_wphy(hw,24848U,(unsigned short)((int)((unsigned int)phy_reg | 64U)));
    #line 1369 
    e1e_rphy(hw,24624U,& phy_reg);
    #line 1370 
    e1e_wphy(hw,24624U,(unsigned short)((int)((unsigned int)phy_reg | 64U)));
    #line 1372 
    e1e_rphy(hw,24628U,& phy_reg);
    #line 1373 
    e1e_wphy(hw,24628U,(unsigned short)((int)((unsigned int)phy_reg | 1024U)));
    #line 1374 
    break;
    #line 1375 
    case (unsigned int)10: 
                           #line 1375 
    ;
    #line 1376 
    case (unsigned int)9: 
                          #line 1376 
    ;
    #line 1378 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    #line 1379 
    if (ret_val != 0) {
      #line 1380 
      netdev_err(adapter->netdev,(char *)"Cannot setup 1Gbps loopback.\n");
      #line 1381 
      return ret_val;
    }
    #line 1383 
    e1000_configure_k1_ich8lan(hw,(_Bool)0);
    #line 1384 
    (*(hw->phy.ops.release))(hw);
    #line 1385 
    break;
    #line 1386 
    case (unsigned int)11: 
                           #line 1386 
    ;
    #line 1388 
    e1e_rphy(hw,21U,& phy_reg);
    #line 1389 
    e1e_wphy(hw,21U,(unsigned short)((int)phy_reg & 65527));
    #line 1391 
    e1e_rphy(hw,24850U,& phy_reg);
    #line 1392 
    e1e_wphy(hw,24850U,(unsigned short)((int)((unsigned int)phy_reg | 1U)));
    #line 1394 
    e1e_wphy(hw,19U,(unsigned short)32769);
    #line 1395 
    break;
    #line 1396 
    default: 
             #line 1396 
    ;
    #line 1397 
    break;
  }
  #line 1401 
  e1e_wphy(hw,0U,(unsigned short)16704);
  #line 1402 
  msleep(250U);
  #line 1405 
  ctrl_reg = __er32(hw,0UL);
  #line 1406 
  ctrl_reg &= 4294966527U;
  #line 1407 
  ctrl_reg |= 6657U;
  #line 1412 
  if (((unsigned long)adapter->flags & 512UL) != 0UL) 
                                                      #line 1413 
                                                      ctrl_reg |= 64U;
  #line 1415 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper && hw->phy.type == (unsigned int)e1000_phy_m88) 
    #line 1417 
    ctrl_reg |= 128U;
  else {
    #line 1422 
    if ((__er32(hw,8UL) & 1U) == 0U) 
                                     #line 1423 
                                     ctrl_reg |= 192U;
  }
  #line 1426 
  __ew32(hw,0UL,ctrl_reg);
  #line 1431 
  if (hw->phy.type == (unsigned int)e1000_phy_m88) 
                                                   #line 1432 
                                                   e1000_phy_disable_receiver(adapter);
  #line 1434 
  usleep_range(500UL,1000UL);
  #line 1436 
  return 0;
}

#line 1439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_82571_fiber_loopback(struct e1000_adapter *adapter)
{
  #line 1443 
  int link;
  #line 1441 
  struct e1000_hw *hw = & adapter->hw;
  #line 1442 
  u32 ctrl = __er32(hw,0UL);
  #line 1450 
  ctrl |= 64U;
  #line 1451 
  __ew32(hw,0UL,ctrl);
  #line 1454 
  ctrl = __er32(hw,376UL);
  #line 1455 
  ctrl &= 2147483647U;
  #line 1456 
  __ew32(hw,376UL,ctrl);
  #line 1458 
  link = (int)__er32(hw,8UL) & 2;
  #line 1460 
  if (link == 0) {
    #line 1462 
    ctrl = __er32(hw,0UL);
    #line 1463 
    ctrl |= 128U;
    #line 1464 
    __ew32(hw,0UL,ctrl);
  }
  #line 1470 
  __ew32(hw,36UL,1040U);
  #line 1471 
  __er32(hw,8UL);
  #line 1472 
  usleep_range(10000UL,11000UL);
  #line 1474 
  return 0;
}

#line 1478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_es2lan_mac_loopback(struct e1000_adapter *adapter)
{
  #line 1480 
  struct e1000_hw *hw = & adapter->hw;
  #line 1481 
  u32 ctrlext = __er32(hw,24UL);
  #line 1482 
  u32 ctrl = __er32(hw,0UL);
  #line 1487 
  adapter->tx_fifo_head = ctrlext;
  #line 1490 
  ctrlext &= 4282384383U;
  #line 1491 
  __ew32(hw,24UL,ctrlext);
  #line 1494 
  ctrl &= 4294966527U;
  #line 1495 
  ctrl |= 6721U;
  #line 1497 
  __ew32(hw,0UL,ctrl);
  #line 1500 
  ctrl = __er32(hw,256UL);
  #line 1501 
  ctrl |= 64U;
  #line 1502 
  __ew32(hw,256UL,ctrl);
  #line 1507 
  __ew32(hw,52UL,2033026U);
  #line 1510 
  return 0;
}

#line 1513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_setup_loopback_test(struct e1000_adapter *adapter)
{
  #line 1516 
  u32 rctl;
  #line 1516 
  u32 fext_nvm11;
  #line 1516 
  u32 tarc0;
  #line 1515 
  struct e1000_hw *hw = & adapter->hw;
  #line 1518 
  if (hw->mac.type > (unsigned int)e1000_pch_lpt) {
    #line 1519 
    fext_nvm11 = __er32(hw,23484UL);
    #line 1520 
    fext_nvm11 |= 8192U;
    #line 1521 
    __ew32(hw,23484UL,fext_nvm11);
    #line 1522 
    tarc0 = __er32(hw,14400UL);
    #line 1524 
    tarc0 &= 3489660927U;
    #line 1526 
    tarc0 |= 536870912U;
    #line 1527 
    __ew32(hw,14400UL,tarc0);
  }
  #line 1529 
  if ((unsigned int)hw->phy.media_type + 4294967294U <= 1U) 
    #line 1531 
    switch ((unsigned int)hw->mac.type) {
      #line 1532 
      case (unsigned int)5: 
                            #line 1532 
      ;
      #line 1533 
      return e1000_set_es2lan_mac_loopback(adapter);
      #line 1534 
      case (unsigned int)0: 
                            #line 1534 
      ;
      #line 1535 
      case (unsigned int)1: 
                            #line 1535 
      ;
      #line 1536 
      return e1000_set_82571_fiber_loopback(adapter);
      #line 1537 
      default: 
               #line 1537 
      ;
      #line 1538 
      rctl = __er32(hw,256UL);
      #line 1539 
      rctl |= 192U;
      #line 1540 
      __ew32(hw,256UL,rctl);
      #line 1541 
      return 0;
    }
  else 
    #line 1543 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
      #line 1544 
      return e1000_integrated_phy_loopback(adapter);
    }
  #line 1547 
  return 7;
}

#line 1550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_loopback_cleanup(struct e1000_adapter *adapter)
{
  #line 1553 
  u32 rctl;
  #line 1553 
  u32 fext_nvm11;
  #line 1553 
  u32 tarc0;
  #line 1554 
  u16 phy_reg;
  #line 1552 
  struct e1000_hw *hw = & adapter->hw;
  #line 1556 
  rctl = __er32(hw,256UL);
  #line 1557 
  rctl &= 4294967103U;
  #line 1558 
  __ew32(hw,256UL,rctl);
  #line 1560 
  switch ((unsigned int)hw->mac.type) {
    #line 1561 
    case (unsigned int)12: 
                           #line 1561 
    ;
    #line 1562 
    case (unsigned int)13: 
                           #line 1562 
    ;
    #line 1563 
    case (unsigned int)14: 
                           #line 1563 
    ;
    #line 1564 
    fext_nvm11 = __er32(hw,23484UL);
    #line 1565 
    fext_nvm11 &= 4294959103U;
    #line 1566 
    __ew32(hw,23484UL,fext_nvm11);
    #line 1567 
    tarc0 = __er32(hw,14400UL);
    #line 1570 
    tarc0 &= 3489660927U;
    #line 1571 
    __ew32(hw,14400UL,tarc0);
    #line 1573 
    case (unsigned int)5: 
                          #line 1573 
    ;
    #line 1574 
    if ((unsigned int)hw->phy.media_type + 4294967294U <= 1U) {
      #line 1577 
      __ew32(hw,24UL,adapter->tx_fifo_head);
      #line 1578 
      adapter->tx_fifo_head = 0U;
    }
    #line 1581 
    case (unsigned int)0: 
                          #line 1581 
    ;
    #line 1582 
    case (unsigned int)1: 
                          #line 1582 
    ;
    #line 1583 
    if ((unsigned int)hw->phy.media_type + 4294967294U <= 1U) {
      #line 1585 
      __ew32(hw,36UL,1024U);
      #line 1586 
      __er32(hw,8UL);
      #line 1587 
      usleep_range(10000UL,11000UL);
      #line 1588 
      break;
    }
    #line 1591 
    default: 
             #line 1591 
    ;
    #line 1592 
    hw->mac.autoneg = (_Bool)1;
    #line 1593 
    if (hw->phy.type == (unsigned int)e1000_phy_gg82563) 
                                                         #line 1594 
                                                         e1e_wphy(hw,6192U,(unsigned short)384);
    #line 1595 
    e1e_rphy(hw,0U,& phy_reg);
    #line 1596 
    if (((int)phy_reg & 16384) != 0) {
      #line 1597 
      phy_reg = (unsigned short)((unsigned int)phy_reg & 49151U);
      #line 1598 
      e1e_wphy(hw,0U,(unsigned short)((int)phy_reg));
      #line 1599 
      if (hw->phy.ops.commit != (s32 (*)(struct e1000_hw *))0) 
                                                               #line 1600 
                                                               (*(hw->phy.ops.commit))(hw);
    }
    #line 1602 
    break;
  }
  #line 1604 
  return;
}

#line 1606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_create_lbtest_frame(struct sk_buff *skb, unsigned int frame_size)
{
  #line 1609 
  memset((void *)skb->data,255,(unsigned long)frame_size);
  #line 1610 
  frame_size &= 4294967294U;
  #line 1611 
  memset((void *)(skb->data + (unsigned long)(frame_size / 2U)),170,(unsigned long)(frame_size / 2U + 4294967295U));
  #line 1612 
  memset((void *)(skb->data + (unsigned long)(frame_size / 2U + 10U)),190,1UL);
  #line 1613 
  memset((void *)(skb->data + (unsigned long)(frame_size / 2U + 12U)),175,1UL);
  #line 1614 
  return;
}

#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_check_lbtest_frame(struct sk_buff *skb, unsigned int frame_size)
{
  #line 1619 
  frame_size &= 4294967294U;
  #line 1620 
  if ((unsigned int)*(skb->data + 3U) == 255U) 
    #line 1621 
    if ((unsigned int)*(skb->data + ((unsigned long)(frame_size / 2U) + (unsigned long)10U)) == 190U && (unsigned int)*(skb->data + ((unsigned long)(frame_size / 2U) + (unsigned long)12U)) == 175U) 
      #line 1623 
      return 0;
  #line 1624 
  return 13;
}

#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_run_loopback_test(struct e1000_adapter *adapter)
{
  #line 1633 
  struct e1000_buffer *buffer_info;
  #line 1634 
  int i;
  #line 1634 
  int j;
  #line 1634 
  int k;
  #line 1634 
  int l;
  #line 1635 
  int lc;
  #line 1636 
  int good_cnt;
  #line 1638 
  unsigned long time;
  #line 1629 
  struct e1000_ring *tx_ring = & adapter->test_tx_ring;
  #line 1630 
  struct e1000_ring *rx_ring = & adapter->test_rx_ring;
  #line 1631 
  struct pci_dev *pdev = adapter->pdev;
  #line 1632 
  struct e1000_hw *hw = & adapter->hw;
  #line 1637 
  int ret_val = 0;
  #line 1640 
  __ew32(hw,10264UL,rx_ring->count + 4294967295U);
  #line 1647 
  if (rx_ring->count <= tx_ring->count) 
                                        #line 1648 
                                        lc = (int)((tx_ring->count / 64U) * 2U + 1U); else 
                                                                    #line 1650 
                                                                    lc = (int)((rx_ring->count / 64U) * 2U + 1U);
  #line 1652 
  k = 0;
  #line 1653 
  l = 0;
  #line 1655 
  j = 0;
  #line 1655 
  while (j <= lc) {
    {
      #line 1657 
      i = 0;
      #line 1657 
      while (i <= 63) {
        #line 1658 
        buffer_info = tx_ring->buffer_info + (unsigned long)k;
        #line 1660 
        e1000_create_lbtest_frame(buffer_info->skb,1024U);
        #line 1661 
        dma_sync_single_for_device(& pdev->dev,buffer_info->dma,(unsigned long)buffer_info->__anonCompField_e1000_buffer_165.__anonCompField___anonunion_730_163.length,(enum dma_data_direction)DMA_TO_DEVICE);
        #line 1665 
        k ++;
        #line 1666 
        if (tx_ring->count == (unsigned int)k) 
                                               #line 1667 
                                               k = 0;
        #line 1657 
        i ++;
      }
      #line 1669 
      __ew32(hw,14360UL,(unsigned int)k);
      #line 1670 
      __er32(hw,8UL);
      #line 1671 
      msleep(200U);
      #line 1672 
      time = jiffies;
      #line 1673 
      good_cnt = 0;
      #line 1675 
      while (1) {
        #line 1676 
        buffer_info = rx_ring->buffer_info + (unsigned long)l;
        #line 1678 
        dma_sync_single_for_cpu(& pdev->dev,buffer_info->dma,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE);
        #line 1682 
        ret_val = e1000_check_lbtest_frame(buffer_info->skb,1024U);
        #line 1684 
        if (ret_val == 0) 
                          #line 1685 
                          good_cnt ++;
        #line 1686 
        l ++;
        #line 1687 
        if (rx_ring->count == (unsigned int)l) 
                                               #line 1688 
                                               l = 0;
        #line 1689 
        if (good_cnt <= 63) {
          {
            #line 1693 
            unsigned long __dummy;
            #line 1693 
            unsigned long __dummy2;
            }
          #line 1693 
          if (! (1 == 0)) {
            {
              #line 1693 
              unsigned long __dummy_0;
              #line 1693 
              unsigned long __dummy2_0;
              }
            #line 1693 
            if (! (1 == 0)) 
              #line 1693 
              if (! ((long)((time - jiffies) + 20UL) >= 0L)) 
                                                             #line 1675 
                                                             break;
          }
        }
        else 
             #line 1675 
             break;
      }
      #line 1694 
      if (good_cnt != 64) {
        #line 1695 
        ret_val = 13;
        #line 1696 
        break;
      }
      {
        #line 1698 
        unsigned long __dummy_1;
        #line 1698 
        unsigned long __dummy2_1;
        }
      #line 1698 
      if (1 != 0) {
        {
          #line 1698 
          unsigned long __dummy_2;
          #line 1698 
          unsigned long __dummy2_2;
          }
        #line 1698 
        if (1 != 0) 
          #line 1698 
          if ((long)((time - jiffies) + 20UL) < 0L) {
            #line 1699 
            ret_val = 14;
            #line 1700 
            break;
          }
      }
    }
    #line 1655 
    j ++;
  }
  #line 1703 
  return ret_val;
}

#line 1706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_loopback_test(struct e1000_adapter *adapter, u64 *data)
{
  #line 1708 
  struct e1000_hw *hw = & adapter->hw;
  #line 1711 
  if (hw->phy.ops.check_reset_block != (s32 (*)(struct e1000_hw *))0) {
    #line 1711 
    if ((*(hw->phy.ops.check_reset_block))(hw) != 0) {
      #line 1713 
      netdev_err(adapter->netdev,(char *)"Cannot do PHY loopback test when SoL/IDER is active.\n");
      #line 1714 
      *data = 0ULL;
      #line 1715 
      goto out;
    }
  }
  #line 1718 
  *data = (unsigned long long)e1000_setup_desc_rings(adapter);
  #line 1719 
  if (*data != 0ULL) 
                     #line 1720 
                     goto out;
  #line 1722 
  *data = (unsigned long long)e1000_setup_loopback_test(adapter);
  #line 1723 
  if (*data != 0ULL) 
                     #line 1724 
                     goto err_loopback;
  #line 1726 
  *data = (unsigned long long)e1000_run_loopback_test(adapter);
  #line 1727 
  e1000_loopback_cleanup(adapter);
  #line 1729 
  err_loopback: 
                #line 1729 
  ;
  #line 1730 
  e1000_free_desc_rings(adapter);
  #line 1731 
  out: 
       #line 1731 
  ;
  #line 1732 
  return (int)*data;
}

#line 1735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_link_test(struct e1000_adapter *adapter, u64 *data)
{
  #line 1737 
  struct e1000_hw *hw = & adapter->hw;
  #line 1739 
  *data = 0ULL;
  #line 1740 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes) {
    #line 1741 
    int i = 0;
    #line 1743 
    hw->mac.serdes_has_link = (_Bool)0;
    #line 1748 
    while (1) {
      #line 1753 
      int tmp;
      #line 1749 
      (*(hw->mac.ops.check_for_link))(hw);
      #line 1750 
      if ((int)hw->mac.serdes_has_link != 0) 
                                             #line 1751 
                                             return (int)*data;
      #line 1752 
      msleep(20U);
      #line 1753 
      tmp = i;
      #line 1753 
      i ++;
      #line 1753 
      ;
      #line 1753 
      if (! (tmp <= 3749)) 
                           #line 1748 
                           break;
    }
    #line 1755 
    *data = 1ULL;
  }
  else {
    #line 1757 
    (*(hw->mac.ops.check_for_link))(hw);
    #line 1758 
    if ((int)hw->mac.autoneg != 0) 
                                   #line 1762 
                                   msleep_interruptible(5000U);
    #line 1764 
    if ((__er32(hw,8UL) & 2U) == 0U) 
                                     #line 1765 
                                     *data = 1ULL;
  }
  #line 1767 
  return (int)*data;
}

#line 1770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000e_get_sset_count(struct net_device *netdev, int sset)
{
  #line 1773 
  switch (sset) {
    #line 1774 
    case 0: 
            #line 1774 
    ;
    #line 1775 
    return 5;
    #line 1776 
    case 1: 
            #line 1776 
    ;
    #line 1777 
    return 53;
    #line 1778 
    default: 
             #line 1778 
    ;
    #line 1779 
    return -95;
  }
}

#line 1783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_diag_test(struct net_device *netdev, struct ethtool_test *eth_test, u64 *data)
{
  #line 1787 
  u16 autoneg_advertised;
  #line 1788 
  u8 forced_speed_duplex;
  #line 1789 
  u8 autoneg;
  #line 1786 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1790 
  bool if_running = netif_running(netdev);
  #line 1792 
  pm_runtime_get_sync(netdev->dev.parent);
  #line 1794 
  cif_set_bit_0(0L,& adapter->state);
  #line 1796 
  if (! if_running) {
    #line 1798 
    if (((unsigned long)adapter->flags & 1UL) != 0UL) 
                                                      #line 1799 
                                                      e1000e_get_hw_control(adapter);
    #line 1801 
    e1000e_power_up_phy(adapter);
    #line 1803 
    adapter->hw.phy.autoneg_wait_to_complete = (_Bool)1;
    #line 1804 
    e1000e_reset(adapter);
    #line 1805 
    adapter->hw.phy.autoneg_wait_to_complete = (_Bool)0;
  }
  #line 1808 
  if (eth_test->flags == 1U) {
    #line 1812 
    autoneg_advertised = adapter->hw.phy.autoneg_advertised;
    #line 1813 
    forced_speed_duplex = adapter->hw.mac.forced_speed_duplex;
    #line 1814 
    autoneg = (unsigned char)adapter->hw.mac.autoneg;
    #line 1816 
    netdev_info(adapter->netdev,(char *)"offline testing starting\n");
    #line 1818 
    if ((int)if_running != 0) 
                              #line 1820 
                              e1000e_close(netdev);
    #line 1822 
    if (e1000_reg_test(adapter,data) != 0) 
                                           #line 1823 
                                           eth_test->flags |= 2U;
    #line 1825 
    e1000e_reset(adapter);
    #line 1826 
    if (e1000_eeprom_test(adapter,data + 1U) != 0) 
                                                   #line 1827 
                                                   eth_test->flags |= 2U;
    #line 1829 
    e1000e_reset(adapter);
    #line 1830 
    if (e1000_intr_test(adapter,data + 2U) != 0) 
                                                 #line 1831 
                                                 eth_test->flags |= 2U;
    #line 1833 
    e1000e_reset(adapter);
    #line 1834 
    if (e1000_loopback_test(adapter,data + 3U) != 0) 
                                                     #line 1835 
                                                     eth_test->flags |= 2U;
    #line 1838 
    adapter->hw.phy.autoneg_wait_to_complete = (_Bool)1;
    #line 1839 
    e1000e_reset(adapter);
    #line 1840 
    adapter->hw.phy.autoneg_wait_to_complete = (_Bool)0;
    #line 1842 
    if (e1000_link_test(adapter,data + 4U) != 0) 
                                                 #line 1843 
                                                 eth_test->flags |= 2U;
    #line 1846 
    adapter->hw.phy.autoneg_advertised = autoneg_advertised;
    #line 1847 
    adapter->hw.mac.forced_speed_duplex = forced_speed_duplex;
    #line 1848 
    adapter->hw.mac.autoneg = (_Bool)((unsigned int)autoneg != 0U);
    #line 1849 
    e1000e_reset(adapter);
    #line 1851 
    cif_clear_bit_1(0L,& adapter->state);
    #line 1852 
    if ((int)if_running != 0) 
                              #line 1853 
                              e1000e_open(netdev);
  }
  else {
    #line 1857 
    netdev_info(adapter->netdev,(char *)"online testing starting\n");
    #line 1860 
    *data = 0ULL;
    #line 1861 
    *(data + 1U) = 0ULL;
    #line 1862 
    *(data + 2U) = 0ULL;
    #line 1863 
    *(data + 3U) = 0ULL;
    #line 1865 
    if (e1000_link_test(adapter,data + 4U) != 0) 
                                                 #line 1866 
                                                 eth_test->flags |= 2U;
    #line 1868 
    cif_clear_bit_1(0L,& adapter->state);
  }
  #line 1871 
  if (! if_running) {
    #line 1872 
    e1000e_reset(adapter);
    #line 1874 
    if (((unsigned long)adapter->flags & 1UL) != 0UL) 
                                                      #line 1875 
                                                      e1000e_release_hw_control(adapter);
  }
  #line 1878 
  msleep_interruptible(4000U);
  #line 1880 
  pm_runtime_put_sync(netdev->dev.parent);
  #line 1881 
  return;
}

#line 1883  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_get_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  #line 1886 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1888 
  wol->supported = 0U;
  #line 1889 
  wol->wolopts = 0U;
  #line 1891 
  if (((unsigned long)adapter->flags & 8UL) == 0UL) 
                                                    #line 1893 
                                                    return;
  else {
    #line 1892 
    if (! device_can_wakeup(& (adapter->pdev)->dev)) 
                                                     #line 1893 
                                                     return;
  }
  #line 1895 
  wol->supported = 47U;
  #line 1899 
  if (((unsigned long)adapter->flags & 524288UL) != 0UL) {
    #line 1900 
    wol->supported &= 4294967293U;
    #line 1902 
    if ((adapter->wol & 4U) != 0U) 
                                   #line 1903 
                                   netdev_err(adapter->netdev,(char *)"Interface does not support directed (unicast) frame wake-up packets\n");
  }
  #line 1906 
  if ((adapter->wol & 4U) != 0U) 
                                 #line 1907 
                                 wol->wolopts |= 2U;
  #line 1908 
  if ((adapter->wol & 8U) != 0U) 
                                 #line 1909 
                                 wol->wolopts |= 4U;
  #line 1910 
  if ((adapter->wol & 16U) != 0U) 
                                  #line 1911 
                                  wol->wolopts |= 8U;
  #line 1912 
  if ((adapter->wol & 2U) != 0U) 
                                 #line 1913 
                                 wol->wolopts |= 32U;
  #line 1914 
  if ((adapter->wol & 1U) != 0U) 
                                 #line 1915 
                                 wol->wolopts |= 1U;
  #line 1916 
  return;
}

#line 1918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  #line 1920 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1922 
  if (((unsigned long)adapter->flags & 8UL) == 0UL) 
                                                    #line 1926 
                                                    return -95;
  else {
    #line 1923 
    if (device_can_wakeup(& (adapter->pdev)->dev)) {
      #line 1923 
      if ((wol->wolopts & 4294967248U) != 0U) 
                                              #line 1926 
                                              return -95;
    }
    else 
         #line 1926 
         return -95;
  }
  #line 1929 
  adapter->wol = 0U;
  #line 1931 
  if ((wol->wolopts & 2U) != 0U) 
                                 #line 1932 
                                 adapter->wol |= 4U;
  #line 1933 
  if ((wol->wolopts & 4U) != 0U) 
                                 #line 1934 
                                 adapter->wol |= 8U;
  #line 1935 
  if ((wol->wolopts & 8U) != 0U) 
                                 #line 1936 
                                 adapter->wol |= 16U;
  #line 1937 
  if ((wol->wolopts & 32U) != 0U) 
                                  #line 1938 
                                  adapter->wol |= 2U;
  #line 1939 
  if ((wol->wolopts & 1U) != 0U) 
                                 #line 1940 
                                 adapter->wol |= 1U;
  #line 1942 
  device_set_wakeup_enable(& (adapter->pdev)->dev,(_Bool)(adapter->wol != 0U));
  #line 1944 
  return 0;
}

#line 1947  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_phys_id(struct net_device *netdev, enum ethtool_phys_id_state state)
{
  #line 1950 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1951 
  struct e1000_hw *hw = & adapter->hw;
  #line 1953 
  switch ((unsigned int)state) {
    #line 1954 
    case (unsigned int)1: 
                          #line 1954 
    ;
    #line 1955 
    pm_runtime_get_sync(netdev->dev.parent);
    #line 1957 
    if (hw->mac.ops.blink_led == (s32 (*)(struct e1000_hw *))0) 
                                                                #line 1958 
                                                                return 2;
    #line 1960 
    (*(hw->mac.ops.blink_led))(hw);
    #line 1961 
    break;
    #line 1963 
    case (unsigned int)0: 
                          #line 1963 
    ;
    #line 1964 
    if (hw->phy.type == (unsigned int)e1000_phy_ife) 
                                                     #line 1965 
                                                     e1e_wphy(hw,27U,(unsigned short)0);
    #line 1966 
    (*(hw->mac.ops.led_off))(hw);
    #line 1967 
    (*(hw->mac.ops.cleanup_led))(hw);
    #line 1968 
    pm_runtime_put_sync(netdev->dev.parent);
    #line 1969 
    break;
    #line 1971 
    case (unsigned int)2: 
                          #line 1971 
    ;
    #line 1972 
    (*(hw->mac.ops.led_on))(hw);
    #line 1973 
    break;
    #line 1975 
    case (unsigned int)3: 
                          #line 1975 
    ;
    #line 1976 
    (*(hw->mac.ops.led_off))(hw);
    #line 1977 
    break;
  }
  #line 1980 
  return 0;
}

#line 1983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  #line 1986 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 1988 
  if (adapter->itr_setting <= 4U) 
                                  #line 1989 
                                  ec->rx_coalesce_usecs = adapter->itr_setting; else 
                                                                    #line 1991 
                                                                    ec->rx_coalesce_usecs = 1000000U / adapter->itr_setting;
  #line 1993 
  return 0;
}

#line 1996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  #line 1999 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 2001 
  if ((ec->rx_coalesce_usecs > 10000U || ec->rx_coalesce_usecs + 4294967291U <= 4U) || ec->rx_coalesce_usecs == 2U) 
    #line 2005 
    return -22;
  #line 2007 
  if (ec->rx_coalesce_usecs == 4U) {
    #line 2008 
    adapter->itr_setting = 4U;
    #line 2009 
    adapter->itr = adapter->itr_setting;
  }
  else 
    #line 2010 
    if (ec->rx_coalesce_usecs <= 3U) {
      #line 2011 
      adapter->itr = 20000U;
      #line 2012 
      adapter->itr_setting = ec->rx_coalesce_usecs;
    }
    else {
      #line 2014 
      adapter->itr = 1000000U / ec->rx_coalesce_usecs;
      #line 2015 
      adapter->itr_setting = adapter->itr & 4294967292U;
    }
  #line 2018 
  pm_runtime_get_sync(netdev->dev.parent);
  #line 2020 
  if (adapter->itr_setting != 0U) 
                                  #line 2021 
                                  e1000e_write_itr(adapter,adapter->itr); else 
                                                                    #line 2023 
                                                                    e1000e_write_itr(adapter,0U);
  #line 2025 
  pm_runtime_put_sync(netdev->dev.parent);
  #line 2027 
  return 0;
}

#line 2030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_nway_reset(struct net_device *netdev)
{
  #line 2032 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 2034 
  if (! netif_running(netdev)) 
                               #line 2035 
                               return -11;
  #line 2037 
  if (! adapter->hw.mac.autoneg) 
                                 #line 2038 
                                 return -22;
  #line 2040 
  pm_runtime_get_sync(netdev->dev.parent);
  #line 2041 
  e1000e_reinit_locked(adapter);
  #line 2042 
  pm_runtime_put_sync(netdev->dev.parent);
  #line 2044 
  return 0;
}

#line 2047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  #line 2052 
  struct rtnl_link_stats64 net_stats;
  #line 2053 
  int i;
  #line 2051 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 2054 
  char *p = (char *)0;
  #line 2056 
  pm_runtime_get_sync(netdev->dev.parent);
  #line 2058 
  dev_get_stats(netdev,& net_stats);
  #line 2060 
  pm_runtime_put_sync(netdev->dev.parent);
  #line 2062 
  i = 0;
  #line 2062 
  while ((unsigned int)i <= 52U) {
    #line 2063 
    switch (e1000_gstrings_stats[i].type) {
      #line 2064 
      case 0: 
              #line 2064 
      ;
      #line 2065 
      p = (char *)(& net_stats) + (unsigned long)e1000_gstrings_stats[i].stat_offset;
      #line 2067 
      break;
      #line 2068 
      case 1: 
              #line 2068 
      ;
      #line 2069 
      p = (char *)adapter + (unsigned long)e1000_gstrings_stats[i].stat_offset;
      #line 2071 
      break;
      #line 2072 
      default: 
               #line 2072 
      ;
      #line 2073 
      *(data + (unsigned long)i) = 0ULL;
      #line 2074 
      goto __Cont;
    }
    #line 2077 
    if (e1000_gstrings_stats[i].sizeof_stat == 8) 
                                                  #line 2077 
                                                  *(data + (unsigned long)i) = *((u64 *)p); else 
                                                                    #line 2077 
                                                                    *(data + (unsigned long)i) = (unsigned long long)*((u32 *)p);
    #line 2062 
    __Cont: 
            #line 2062 
    i ++;
  }
  #line 2080 
  return;
}

#line 2082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_get_strings(struct net_device *netdev, u32 stringset, u8 *data)
{
  #line 2086 
  int i;
  #line 2085 
  u8 *p = data;
  #line 2088 
  switch (stringset) {
    #line 2089 
    case (u32)0: 
                 #line 2089 
    ;
    #line 2090 
    memcpy((void *)data,(void *)(& e1000_gstrings_test),160UL);
    #line 2091 
    break;
    #line 2092 
    case (u32)1: 
                 #line 2092 
    ;
    #line 2093 
    i = 0;
    #line 2093 
    while ((unsigned int)i <= 52U) {
      #line 2094 
      memcpy((void *)p,(void *)(& e1000_gstrings_stats[i].stat_string),32UL);
      #line 2096 
      p += 32U;
      #line 2093 
      i ++;
    }
    #line 2098 
    break;
  }
  #line 2100 
  return;
}

#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_get_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *info, u32 *rule_locs)
{
  #line 2106 
  info->data = 0ULL;
  #line 2108 
  switch (info->cmd) {
    #line 2109 
    case (__u32)41: 
                    #line 2109 
    ;
    {
      #line 2112 
      u32 mrqc;
      #line 2110 
      struct e1000_adapter *adapter = netdev_priv(netdev);
      #line 2111 
      struct e1000_hw *hw = & adapter->hw;
      #line 2114 
      pm_runtime_get_sync(netdev->dev.parent);
      #line 2115 
      mrqc = __er32(hw,22552UL);
      #line 2116 
      pm_runtime_put_sync(netdev->dev.parent);
      #line 2118 
      if ((mrqc & 4294901760U) == 0U) 
                                      #line 2119 
                                      return 0;
      #line 2121 
      switch (info->flow_type) {
        #line 2122 
        case (__u32)1: 
                       #line 2122 
        ;
        #line 2123 
        if ((mrqc & 65536U) != 0U) 
                                   #line 2124 
                                   info->data |= 192ULL;
        #line 2126 
        case (__u32)2: 
                       #line 2126 
        ;
        #line 2127 
        case (__u32)3: 
                       #line 2127 
        ;
        #line 2128 
        case (__u32)4: 
                       #line 2128 
        ;
        #line 2129 
        case (__u32)16: 
                        #line 2129 
        ;
        #line 2130 
        if ((mrqc & 131072U) != 0U) 
                                    #line 2131 
                                    info->data |= 48ULL;
        #line 2132 
        break;
        #line 2133 
        case (__u32)5: 
                       #line 2133 
        ;
        #line 2134 
        if ((mrqc & 2097152U) != 0U) 
                                     #line 2135 
                                     info->data |= 192ULL;
        #line 2137 
        case (__u32)6: 
                       #line 2137 
        ;
        #line 2138 
        case (__u32)7: 
                       #line 2138 
        ;
        #line 2139 
        case (__u32)8: 
                       #line 2139 
        ;
        #line 2140 
        case (__u32)17: 
                        #line 2140 
        ;
        #line 2141 
        if ((mrqc & 1048576U) != 0U) 
                                     #line 2142 
                                     info->data |= 48ULL;
        #line 2143 
        break;
        #line 2144 
        default: 
                 #line 2144 
        ;
        #line 2145 
        break;
      }
      #line 2147 
      return 0;
    }
    #line 2149 
    default: 
             #line 2149 
    ;
    #line 2150 
    return -95;
  }
}

#line 2154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000e_get_eee(struct net_device *netdev, struct ethtool_eee *edata)
{
  #line 2158 
  u16 cap_addr;
  #line 2158 
  u16 lpa_addr;
  #line 2158 
  u16 pcs_stat_addr;
  #line 2158 
  u16 phy_data;
  #line 2159 
  u32 ret_val;
  #line 2156 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 2157 
  struct e1000_hw *hw = & adapter->hw;
  #line 2161 
  if (((unsigned long)adapter->flags2 & 32UL) == 0UL) 
                                                      #line 2162 
                                                      return -95;
  #line 2164 
  switch ((unsigned int)hw->phy.type) {
    #line 2165 
    case (unsigned int)11: 
                           #line 2165 
    ;
    #line 2166 
    cap_addr = (unsigned short)1040U;
    #line 2167 
    lpa_addr = (unsigned short)1039U;
    #line 2168 
    pcs_stat_addr = (unsigned short)6190U;
    #line 2169 
    break;
    #line 2170 
    case (unsigned int)12: 
                           #line 2170 
    ;
    #line 2171 
    cap_addr = (unsigned short)32768U;
    #line 2172 
    lpa_addr = (unsigned short)32770U;
    #line 2173 
    pcs_stat_addr = (unsigned short)37889U;
    #line 2174 
    break;
    #line 2175 
    default: 
             #line 2175 
    ;
    #line 2176 
    return -95;
  }
  #line 2179 
  pm_runtime_get_sync(netdev->dev.parent);
  #line 2181 
  ret_val = (unsigned int)(*(hw->phy.ops.acquire))(hw);
  #line 2182 
  if (ret_val != 0U) {
    #line 2183 
    pm_runtime_put_sync(netdev->dev.parent);
    #line 2184 
    return -16;
  }
  #line 2188 
  ret_val = (unsigned int)e1000_read_emi_reg_locked(hw,(unsigned short)((int)cap_addr),
                                  & phy_data);
  #line 2189 
  if (ret_val != 0U) 
                     #line 2190 
                     goto release;
  #line 2191 
  edata->supported = mmd_eee_cap_to_ethtool_sup_t((unsigned short)((int)phy_data));
  #line 2194 
  edata->advertised = mmd_eee_cap_to_ethtool_sup_t((unsigned short)((int)adapter->eee_advert));
  #line 2197 
  ret_val = (unsigned int)e1000_read_emi_reg_locked(hw,(unsigned short)((int)lpa_addr),
                                  & phy_data);
  #line 2198 
  if (ret_val != 0U) 
                     #line 2199 
                     goto release;
  #line 2200 
  edata->lp_advertised = mmd_eee_cap_to_ethtool_sup_t((unsigned short)((int)phy_data));
  #line 2203 
  ret_val = (unsigned int)e1000_read_emi_reg_locked(hw,(unsigned short)((int)pcs_stat_addr),
                                  & phy_data);
  #line 2204 
  if (ret_val != 0U) 
                     #line 2205 
                     goto release;
  #line 2206 
  if (hw->phy.type == (unsigned int)e1000_phy_82579) 
                                                     #line 2207 
                                                     phy_data = (unsigned short)((int)phy_data << 8U);
  #line 2213 
  if (((int)phy_data & 3072) != 0) 
                                   #line 2214 
                                   edata->eee_active = 1U;
  #line 2216 
  edata->eee_enabled = (unsigned int)(! hw->dev_spec.ich8lan.eee_disable);
  #line 2217 
  edata->tx_lpi_enabled = 1U;
  #line 2218 
  edata->tx_lpi_timer = __er32(hw,252UL) >> 24;
  #line 2220 
  release: 
           #line 2220 
  ;
  #line 2221 
  (*(hw->phy.ops.release))(hw);
  #line 2222 
  if (ret_val != 0U) 
                     #line 2223 
                     ret_val = 4294967235U;
  #line 2225 
  pm_runtime_put_sync(netdev->dev.parent);
  #line 2227 
  return (int)ret_val;
}

#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000e_set_eee(struct net_device *netdev, struct ethtool_eee *edata)
{
  #line 2234 
  struct ethtool_eee eee_curr;
  #line 2235 
  s32 ret_val;
  #line 2232 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 2233 
  struct e1000_hw *hw = & adapter->hw;
  #line 2237 
  ret_val = e1000e_get_eee(netdev,& eee_curr);
  #line 2238 
  if (ret_val != 0) 
                    #line 2239 
                    return ret_val;
  #line 2241 
  if (eee_curr.tx_lpi_enabled != edata->tx_lpi_enabled) {
    #line 2242 
    netdev_err(adapter->netdev,(char *)"Setting EEE tx-lpi is not supported\n");
    #line 2243 
    return -22;
  }
  #line 2246 
  if (eee_curr.tx_lpi_timer != edata->tx_lpi_timer) {
    #line 2247 
    netdev_err(adapter->netdev,(char *)"Setting EEE Tx LPI timer is not supported\n");
    #line 2248 
    return -22;
  }
  #line 2251 
  if ((edata->advertised & 4294967255U) != 0U) {
    #line 2252 
    netdev_err(adapter->netdev,(char *)"EEE advertisement supports only 100TX and/or 1000T full-duplex\n");
    #line 2253 
    return -22;
  }
  #line 2256 
  adapter->eee_advert = ethtool_adv_to_mmd_eee_adv_t(edata->advertised);
  #line 2258 
  hw->dev_spec.ich8lan.eee_disable = (_Bool)(edata->eee_enabled == 0U);
  #line 2260 
  pm_runtime_get_sync(netdev->dev.parent);
  #line 2263 
  if ((int)netif_running(netdev) != 0) 
                                       #line 2264 
                                       e1000e_reinit_locked(adapter); else 
                                                                    #line 2266 
                                                                    e1000e_reset(adapter);
  #line 2268 
  pm_runtime_put_sync(netdev->dev.parent);
  #line 2270 
  return 0;
}

#line 2273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000e_get_ts_info(struct net_device *netdev, struct ethtool_ts_info *info)
{
  #line 2276 
  struct e1000_adapter *adapter = netdev_priv(netdev);
  #line 2278 
  ethtool_op_get_ts_info(netdev,info);
  #line 2280 
  if (((unsigned long)adapter->flags & 16384UL) == 0UL) 
                                                        #line 2281 
                                                        return 0;
  #line 2283 
  info->so_timestamping |= 69U;
  #line 2287 
  info->tx_types = 3U;
  #line 2289 
  info->rx_filters = 32179U;
  #line 2301 
  if (adapter->ptp_clock != (struct ptp_clock *)0) 
                                                   #line 2302 
                                                   info->phc_index = ptp_clock_index(adapter->ptp_clock);
  #line 2304 
  return 0;
}

#line 2307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
static struct ethtool_ops e1000_ethtool_ops = {.get_drvinfo = & e1000_get_drvinfo, .get_regs_len = & e1000_get_regs_len, .get_regs = & e1000_get_regs, .get_wol = & e1000_get_wol, .set_wol = & e1000_set_wol, .get_msglevel = & e1000_get_msglevel, .set_msglevel = & e1000_set_msglevel, .nway_reset = & e1000_nway_reset, .get_link = & ethtool_op_get_link, .get_eeprom_len = & e1000_get_eeprom_len, .get_eeprom = & e1000_get_eeprom, .set_eeprom = & e1000_set_eeprom, .get_coalesce = & e1000_get_coalesce, .set_coalesce = & e1000_set_coalesce, .get_ringparam = & e1000_get_ringparam, .set_ringparam = & e1000_set_ringparam, .get_pauseparam = & e1000_get_pauseparam, .set_pauseparam = & e1000_set_pauseparam, .self_test = & e1000_diag_test, .get_strings = & e1000_get_strings, .set_phys_id = & e1000_set_phys_id, .get_ethtool_stats = & e1000_get_ethtool_stats, .get_sset_count = & e1000e_get_sset_count, .get_rxnfc = & e1000_get_rxnfc, .get_ts_info = & e1000e_get_ts_info, .get_eee = & e1000e_get_eee, .set_eee = & e1000e_set_eee, .get_link_ksettings = & e1000_get_link_ksettings, .set_link_ksettings = & e1000_set_link_ksettings};
#line 2339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/ethtool.c"
void e1000e_set_ethtool_ops(struct net_device *netdev)
{
  #line 2341 
  netdev->ethtool_ops = & e1000_ethtool_ops;
  #line 2342 
  return;
}

#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
void emg_wrapper_e1000_diag_test(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  #line 110 
  e1000_diag_test(arg0,arg1,arg2);
  #line 111 
  return;
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 115 
  return e1000_get_coalesce(arg0,arg1);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
void emg_wrapper_e1000_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 120 
  e1000_get_drvinfo(arg0,arg1);
  #line 121 
  return;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 125 
  return e1000_get_eeprom(arg0,arg1,arg2);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000_get_eeprom_len(struct net_device *arg0)
{
  #line 130 
  return e1000_get_eeprom_len(arg0);
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
void emg_wrapper_e1000_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 135 
  e1000_get_ethtool_stats(arg0,arg1,arg2);
  #line 136 
  return;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 140 
  return e1000_get_link_ksettings(arg0,arg1);
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
unsigned int emg_wrapper_e1000_get_msglevel(struct net_device *arg0)
{
  #line 145 
  return e1000_get_msglevel(arg0);
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
void emg_wrapper_e1000_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 150 
  e1000_get_pauseparam(arg0,arg1);
  #line 151 
  return;
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
void emg_wrapper_e1000_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 155 
  e1000_get_regs(arg0,arg1,arg2);
  #line 156 
  return;
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000_get_regs_len(struct net_device *arg0)
{
  #line 160 
  return e1000_get_regs_len(arg0);
}

#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
void emg_wrapper_e1000_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 165 
  e1000_get_ringparam(arg0,arg1);
  #line 166 
  return;
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 170 
  return e1000_get_rxnfc(arg0,arg1,arg2);
}

#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
void emg_wrapper_e1000_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 175 
  e1000_get_strings(arg0,arg1,arg2);
  #line 176 
  return;
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
void emg_wrapper_e1000_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 180 
  e1000_get_wol(arg0,arg1);
  #line 181 
  return;
}

#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000_nway_reset(struct net_device *arg0)
{
  #line 185 
  return e1000_nway_reset(arg0);
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 190 
  return e1000_set_coalesce(arg0,arg1);
}

#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000_set_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 195 
  return e1000_set_eeprom(arg0,arg1,arg2);
}

#line 199  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 200 
  return e1000_set_link_ksettings(arg0,arg1);
}

#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
void emg_wrapper_e1000_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 205 
  e1000_set_msglevel(arg0,arg1);
  #line 206 
  return;
}

#line 209  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 210 
  return e1000_set_pauseparam(arg0,arg1);
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000_set_phys_id(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 215 
  return e1000_set_phys_id(arg0,arg1);
}

#line 219  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 220 
  return e1000_set_ringparam(arg0,arg1);
}

#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000_set_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 225 
  return e1000_set_wol(arg0,arg1);
}

#line 229  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
enum irqreturn emg_wrapper_e1000_test_intr(int arg0, void *arg1)
{
  #line 230 
  return e1000_test_intr(arg0,arg1);
}

#line 234  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000e_get_eee(struct net_device *arg0, struct ethtool_eee *arg1)
{
  #line 235 
  return e1000e_get_eee(arg0,arg1);
}

#line 239  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000e_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 240 
  return e1000e_get_sset_count(arg0,arg1);
}

#line 244  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000e_get_ts_info(struct net_device *arg0, struct ethtool_ts_info *arg1)
{
  #line 245 
  return e1000e_get_ts_info(arg0,arg1);
}

#line 249  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
int emg_wrapper_e1000e_set_eee(struct net_device *arg0, struct ethtool_eee *arg1)
{
  #line 250 
  return e1000e_set_eee(arg0,arg1);
}

#line 269  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 272 
  ldv_set_bit(nr,addr);
  #line 273 
  return;
}

#line 276  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr)
{
  #line 279 
  ldv_clear_bit(nr,addr);
  #line 280 
  return;
}

#line 471  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 474 
  return ldv_kmalloc(size,flags);
}

#line 478  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 481 
  return ldv_kmalloc_array(n,size,flags);
}

#line 485  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags)
{
  #line 488 
  return ldv_kcalloc(n,size,flags);
}

#line 799  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static bool cif_pm_runtime_suspended_0(struct device *dev)
{
  #line 803 
  return emg_pm_runtime_suspended(dev);
}

#line 807  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void *cif_vmalloc(unsigned long size)
{
  #line 810 
  return ldv_vmalloc(size);
}

#line 814  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void cif_vfree_0(void *addr)
{
  #line 817 
  ldv_vfree(addr);
  #line 818 
  return;
}

#line 821  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static int cif_request_irq_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 825 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 829  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 833 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.h"
#line 10 
s32 e1000e_check_for_serdes_link(struct e1000_hw *hw);
#line 18 
#line 18 
s32 e1000e_get_hw_semaphore(struct e1000_hw *hw);
#line 36 
#line 36 
void e1000_clear_vfta_generic(struct e1000_hw *hw);
#line 38 
#line 38 
void e1000e_put_hw_semaphore(struct e1000_hw *hw);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/nvm.h"
#line 14 
s32 e1000e_valid_led_default(struct e1000_hw *hw, u16 *data);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static u16 e1000_gg82563_cable_length_table[11U] = {[1] = (unsigned short)60U, (unsigned short)115U, (unsigned short)150U, (unsigned short)150U, (unsigned short)60U, (unsigned short)115U, (unsigned short)150U, (unsigned short)180U, (unsigned short)180U, (unsigned short)255U};
#line 21 
#line 1023 
static s32 e1000_setup_copper_link_80003es2lan(struct e1000_hw *hw);
#line 22 
#line 273 
static s32 e1000_acquire_swfw_sync_80003es2lan(struct e1000_hw *hw, u16 mask);
#line 23 
#line 318 
static void e1000_release_swfw_sync_80003es2lan(struct e1000_hw *hw, u16 mask);
#line 24 
#line 837 
static void e1000_initialize_hw_bits_80003es2lan(struct e1000_hw *hw);
#line 25 
#line 1300 
static void e1000_clear_hw_cntrs_80003es2lan(struct e1000_hw *hw);
#line 26 
#line 1156 
static s32 e1000_cfg_kmrn_1000_80003es2lan(struct e1000_hw *hw);
#line 27 
#line 1109 
static s32 e1000_cfg_kmrn_10_100_80003es2lan(struct e1000_hw *hw, u16 duplex);
#line 28 
#line 1203 
static s32 e1000_read_kmrn_reg_80003es2lan(struct e1000_hw *hw, u32 offset, u16 *data);
#line 30 
#line 1238 
static s32 e1000_write_kmrn_reg_80003es2lan(struct e1000_hw *hw, u32 offset, u16 data);
#line 32 
#line 1286 
static void e1000_power_down_phy_copper_80003es2lan(struct e1000_hw *hw);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_init_phy_params_80003es2lan(struct e1000_hw *hw)
{
  #line 41 
  s32 ret_val;
  #line 40 
  struct e1000_phy_info *phy = & hw->phy;
  #line 43 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) {
    #line 44 
    phy->type = e1000_phy_none;
    #line 45 
    return 0;
  }
  else {
    #line 47 
    phy->ops.power_up = & e1000_power_up_phy_copper;
    #line 48 
    phy->ops.power_down = & e1000_power_down_phy_copper_80003es2lan;
  }
  #line 51 
  phy->addr = 1U;
  #line 52 
  phy->autoneg_mask = (unsigned short)47U;
  #line 53 
  phy->reset_delay_us = 100U;
  #line 54 
  phy->type = e1000_phy_gg82563;
  #line 57 
  ret_val = e1000e_get_phy_id(hw);
  #line 60 
  if (phy->id != 21040288U) 
                            #line 61 
                            return -2;
  #line 63 
  return ret_val;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_init_nvm_params_80003es2lan(struct e1000_hw *hw)
{
  #line 74 
  u16 size;
  #line 72 
  struct e1000_nvm_info *nvm = & hw->nvm;
  #line 73 
  u32 eecd = __er32(hw,16UL);
  #line 76 
  nvm->opcode_bits = (unsigned short)8U;
  #line 77 
  nvm->delay_usec = (unsigned short)1U;
  #line 78 
  switch ((unsigned int)nvm->override) {
    #line 79 
    case (unsigned int)2: 
                          #line 79 
    ;
    #line 80 
    nvm->page_size = (unsigned short)32U;
    #line 81 
    nvm->address_bits = (unsigned short)16U;
    #line 82 
    break;
    #line 83 
    case (unsigned int)1: 
                          #line 83 
    ;
    #line 84 
    nvm->page_size = (unsigned short)8U;
    #line 85 
    nvm->address_bits = (unsigned short)8U;
    #line 86 
    break;
    #line 87 
    default: 
             #line 87 
    ;
    #line 88 
    if ((eecd & 1024U) != 0U) 
                              #line 88 
                              nvm->page_size = (unsigned short)32U; else 
                                                                    #line 88 
                                                                    nvm->page_size = (unsigned short)8U;
    #line 89 
    if ((eecd & 1024U) != 0U) 
                              #line 89 
                              nvm->address_bits = (unsigned short)16U; else 
                                                                    #line 89 
                                                                    nvm->address_bits = (unsigned short)8U;
    #line 90 
    break;
  }
  #line 93 
  nvm->type = e1000_nvm_eeprom_spi;
  #line 95 
  size = (unsigned short)((unsigned int)((unsigned short)(eecd >> 11)) & 15U);
  #line 101 
  size = (unsigned short)((unsigned int)size + 6U);
  #line 104 
  if ((unsigned int)size > 14U) 
                                #line 105 
                                size = (unsigned short)14U;
  #line 106 
  nvm->word_size = (unsigned short)(1UL << (int)size);
  #line 108 
  return 0;
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_init_mac_params_80003es2lan(struct e1000_hw *hw)
{
  #line 117 
  struct e1000_mac_info *mac = & hw->mac;
  #line 120 
  switch ((int)((hw->adapter)->pdev)->device) {
    #line 121 
    case 4248: 
               #line 121 
    ;
    #line 122 
    hw->phy.media_type = e1000_media_type_internal_serdes;
    #line 123 
    mac->ops.check_for_link = & e1000e_check_for_serdes_link;
    #line 124 
    mac->ops.setup_physical_interface = & e1000e_setup_fiber_serdes_link;
    #line 126 
    break;
    #line 127 
    default: 
             #line 127 
    ;
    #line 128 
    hw->phy.media_type = e1000_media_type_copper;
    #line 129 
    mac->ops.check_for_link = & e1000e_check_for_copper_link;
    #line 130 
    mac->ops.setup_physical_interface = & e1000_setup_copper_link_80003es2lan;
    #line 132 
    break;
  }
  #line 136 
  mac->mta_reg_count = (unsigned short)128U;
  #line 138 
  mac->rar_entry_count = (unsigned short)15U;
  #line 140 
  mac->has_fwsm = (_Bool)1;
  #line 142 
  mac->arc_subsystem_valid = (_Bool)((__er32(hw,23380UL) & 14U) != 0U);
  #line 144 
  mac->adaptive_ifs = (_Bool)0;
  #line 147 
  (*(hw->mac.ops.set_lan_id))(hw);
  #line 149 
  return 0;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_get_variants_80003es2lan(struct e1000_adapter *adapter)
{
  #line 155 
  s32 rc;
  #line 154 
  struct e1000_hw *hw = & adapter->hw;
  #line 157 
  rc = e1000_init_mac_params_80003es2lan(hw);
  #line 158 
  if (rc != 0) 
               #line 159 
               return rc;
  #line 161 
  rc = e1000_init_nvm_params_80003es2lan(hw);
  #line 162 
  if (rc != 0) 
               #line 163 
               return rc;
  #line 165 
  rc = e1000_init_phy_params_80003es2lan(hw);
  #line 166 
  if (rc != 0) 
               #line 167 
               return rc;
  #line 169 
  return 0;
}

#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_acquire_phy_80003es2lan(struct e1000_hw *hw)
{
  #line 180 
  u16 mask;
  #line 182 
  if ((unsigned int)hw->bus.func != 0U) 
                                        #line 182 
                                        mask = (unsigned short)4U; else 
                                                                    #line 182 
                                                                    mask = (unsigned short)2U;
  #line 183 
  return e1000_acquire_swfw_sync_80003es2lan(hw,(unsigned short)((int)mask));
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static void e1000_release_phy_80003es2lan(struct e1000_hw *hw)
{
  #line 194 
  u16 mask;
  #line 196 
  if ((unsigned int)hw->bus.func != 0U) 
                                        #line 196 
                                        mask = (unsigned short)4U; else 
                                                                    #line 196 
                                                                    mask = (unsigned short)2U;
  #line 197 
  e1000_release_swfw_sync_80003es2lan(hw,(unsigned short)((int)mask));
  #line 198 
  return;
}

#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_acquire_mac_csr_80003es2lan(struct e1000_hw *hw)
{
  #line 209 
  u16 mask;
  #line 211 
  mask = (unsigned short)8U;
  #line 213 
  return e1000_acquire_swfw_sync_80003es2lan(hw,(unsigned short)((int)mask));
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static void e1000_release_mac_csr_80003es2lan(struct e1000_hw *hw)
{
  #line 224 
  u16 mask;
  #line 226 
  mask = (unsigned short)8U;
  #line 228 
  e1000_release_swfw_sync_80003es2lan(hw,(unsigned short)((int)mask));
  #line 229 
  return;
}

#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_acquire_nvm_80003es2lan(struct e1000_hw *hw)
{
  #line 239 
  s32 ret_val;
  #line 241 
  ret_val = e1000_acquire_swfw_sync_80003es2lan(hw,(unsigned short)1);
  #line 242 
  if (ret_val != 0) 
                    #line 243 
                    return ret_val;
  #line 245 
  ret_val = e1000e_acquire_nvm(hw);
  #line 247 
  if (ret_val != 0) 
                    #line 248 
                    e1000_release_swfw_sync_80003es2lan(hw,(unsigned short)1);
  #line 250 
  return ret_val;
}

#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static void e1000_release_nvm_80003es2lan(struct e1000_hw *hw)
{
  #line 261 
  e1000e_release_nvm(hw);
  #line 262 
  e1000_release_swfw_sync_80003es2lan(hw,(unsigned short)1);
  #line 263 
  return;
}

#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_acquire_swfw_sync_80003es2lan(struct e1000_hw *hw, u16 mask)
{
  #line 275 
  u32 swfw_sync;
  #line 276 
  u32 swmask = (unsigned int)mask;
  #line 277 
  u32 fwmask = (unsigned int)((int)mask << 16);
  #line 278 
  s32 i = 0;
  #line 279 
  s32 timeout = 50;
  #line 281 
  while (i < timeout) {
    #line 282 
    if (e1000e_get_hw_semaphore(hw) != 0) 
                                          #line 283 
                                          return -13;
    #line 285 
    swfw_sync = __er32(hw,23388UL);
    #line 286 
    if (((fwmask | swmask) & swfw_sync) == 0U) 
                                               #line 287 
                                               break;
    #line 292 
    e1000e_put_hw_semaphore(hw);
    #line 293 
    __const_udelay(21475000UL);
    #line 294 
    i ++;
  }
  #line 297 
  if (i == timeout) {
    {
      #line 298 
      bool branch;
      #line 298 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"e1000e", .function = (char *)"e1000_acquire_swfw_sync_80003es2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = (char *)"Driver can\'t access resource, SW_FW_SYNC timeout.\n", .lineno = (unsigned int)298U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 298 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 298 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 298 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,(hw->adapter)->netdev,(char *)"Driver can\'t access resource, SW_FW_SYNC timeout.\n");
    }
    #line 299 
    return -13;
  }
  #line 302 
  swfw_sync |= swmask;
  #line 303 
  __ew32(hw,23388UL,swfw_sync);
  #line 305 
  e1000e_put_hw_semaphore(hw);
  #line 307 
  return 0;
}

#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static void e1000_release_swfw_sync_80003es2lan(struct e1000_hw *hw, u16 mask)
{
  #line 320 
  u32 swfw_sync;
  #line 322 
  while (1) {
    #line 322 
    if (! (e1000e_get_hw_semaphore(hw) != 0)) 
                                              #line 322 
                                              break;
  }
  #line 325 
  swfw_sync = __er32(hw,23388UL);
  #line 326 
  swfw_sync = (unsigned int)(~ ((int)mask)) & swfw_sync;
  #line 327 
  __ew32(hw,23388UL,swfw_sync);
  #line 329 
  e1000e_put_hw_semaphore(hw);
  #line 330 
  return;
}

#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_read_phy_reg_gg82563_80003es2lan(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 343 
  s32 ret_val;
  #line 344 
  u32 page_select;
  #line 345 
  u16 temp;
  #line 347 
  ret_val = e1000_acquire_phy_80003es2lan(hw);
  #line 348 
  if (ret_val != 0) 
                    #line 349 
                    return ret_val;
  #line 352 
  if ((offset & 31U) <= 29U) 
                             #line 353 
                             page_select = 22U; else 
                                                     #line 358 
                                                     page_select = 29U;
  #line 361 
  temp = (unsigned short)((int)((unsigned short)offset) >> 5);
  #line 362 
  ret_val = e1000e_write_phy_reg_mdic(hw,page_select,(unsigned short)((int)temp));
  #line 363 
  if (ret_val != 0) {
    #line 364 
    e1000_release_phy_80003es2lan(hw);
    #line 365 
    return ret_val;
  }
  #line 368 
  if ((int)hw->dev_spec.e80003es2lan.mdic_wa_enable != 0) {
    #line 373 
    usleep_range(200UL,400UL);
    #line 376 
    ret_val = e1000e_read_phy_reg_mdic(hw,page_select,& temp);
    #line 378 
    if ((int)((unsigned short)offset) >> 5 != (int)temp) {
      #line 379 
      e1000_release_phy_80003es2lan(hw);
      #line 380 
      return -2;
    }
    #line 383 
    usleep_range(200UL,400UL);
    #line 385 
    ret_val = e1000e_read_phy_reg_mdic(hw,offset & 31U,data);
    #line 389 
    usleep_range(200UL,400UL);
  }
  else 
       #line 391 
       ret_val = e1000e_read_phy_reg_mdic(hw,offset & 31U,data);
  #line 396 
  e1000_release_phy_80003es2lan(hw);
  #line 398 
  return ret_val;
}

#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_write_phy_reg_gg82563_80003es2lan(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 412 
  s32 ret_val;
  #line 413 
  u32 page_select;
  #line 414 
  u16 temp;
  #line 416 
  ret_val = e1000_acquire_phy_80003es2lan(hw);
  #line 417 
  if (ret_val != 0) 
                    #line 418 
                    return ret_val;
  #line 421 
  if ((offset & 31U) <= 29U) 
                             #line 422 
                             page_select = 22U; else 
                                                     #line 427 
                                                     page_select = 29U;
  #line 430 
  temp = (unsigned short)((int)((unsigned short)offset) >> 5);
  #line 431 
  ret_val = e1000e_write_phy_reg_mdic(hw,page_select,(unsigned short)((int)temp));
  #line 432 
  if (ret_val != 0) {
    #line 433 
    e1000_release_phy_80003es2lan(hw);
    #line 434 
    return ret_val;
  }
  #line 437 
  if ((int)hw->dev_spec.e80003es2lan.mdic_wa_enable != 0) {
    #line 442 
    usleep_range(200UL,400UL);
    #line 445 
    ret_val = e1000e_read_phy_reg_mdic(hw,page_select,& temp);
    #line 447 
    if ((int)((unsigned short)offset) >> 5 != (int)temp) {
      #line 448 
      e1000_release_phy_80003es2lan(hw);
      #line 449 
      return -2;
    }
    #line 452 
    usleep_range(200UL,400UL);
    #line 454 
    ret_val = e1000e_write_phy_reg_mdic(hw,offset & 31U,(unsigned short)((int)data));
    #line 458 
    usleep_range(200UL,400UL);
  }
  else 
       #line 460 
       ret_val = e1000e_write_phy_reg_mdic(hw,offset & 31U,(unsigned short)((int)data));
  #line 465 
  e1000_release_phy_80003es2lan(hw);
  #line 467 
  return ret_val;
}

#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_write_nvm_80003es2lan(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  #line 482 
  return e1000e_write_nvm_spi(hw,(unsigned short)((int)offset),
                           (unsigned short)((int)words),data);
}

#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_get_cfg_done_80003es2lan(struct e1000_hw *hw)
{
  #line 494 
  s32 timeout = 100;
  #line 495 
  u32 mask = 262144U;
  #line 497 
  if ((unsigned int)hw->bus.func == 1U) 
                                        #line 498 
                                        mask = 524288U;
  #line 500 
  while (timeout != 0) {
    #line 501 
    ;
    #line 501 
    if ((__er32(hw,4112UL) & mask) != 0U) 
                                          #line 502 
                                          break;
    #line 503 
    usleep_range(1000UL,2000UL);
    #line 504 
    timeout --;
  }
  #line 506 
  if (timeout == 0) {
    {
      #line 507 
      bool branch;
      #line 507 
      struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"e1000e", .function = (char *)"e1000_get_cfg_done_80003es2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = (char *)"MNG configuration cycle has not completed.\n", .lineno = (unsigned int)507U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 507 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
      #line 507 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 507 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,(hw->adapter)->netdev,(char *)"MNG configuration cycle has not completed.\n");
    }
    #line 508 
    return -9;
  }
  #line 511 
  return 0;
}

#line 521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_phy_force_speed_duplex_80003es2lan(struct e1000_hw *hw)
{
  #line 523 
  s32 ret_val;
  #line 524 
  u16 phy_data;
  #line 525 
  bool link;
  #line 530 
  ret_val = e1e_rphy(hw,16U,& phy_data);
  #line 531 
  if (ret_val != 0) 
                    #line 532 
                    return ret_val;
  #line 534 
  phy_data = (unsigned short)((unsigned int)phy_data & 65439U);
  #line 535 
  ret_val = e1e_wphy(hw,16U,(unsigned short)((int)phy_data));
  #line 536 
  if (ret_val != 0) 
                    #line 537 
                    return ret_val;
  {
    #line 539 
    bool branch;
    #line 539 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_force_speed_duplex_80003es2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = (char *)"GG82563 PSCR: %X\n", .lineno = (unsigned int)539U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 539 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 539 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 539 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,(hw->adapter)->netdev,(char *)"GG82563 PSCR: %X\n",(int)phy_data);
  }
  #line 541 
  ret_val = e1e_rphy(hw,0U,& phy_data);
  #line 542 
  if (ret_val != 0) 
                    #line 543 
                    return ret_val;
  #line 545 
  e1000e_phy_force_speed_duplex_setup(hw,& phy_data);
  #line 548 
  phy_data = (unsigned short)((unsigned int)phy_data | 32768U);
  #line 550 
  ret_val = e1e_wphy(hw,0U,(unsigned short)((int)phy_data));
  #line 551 
  if (ret_val != 0) 
                    #line 552 
                    return ret_val;
  #line 554 
  __const_udelay(4295UL);
  #line 556 
  if ((int)hw->phy.autoneg_wait_to_complete != 0) {
    {
      #line 557 
      bool branch_0;
      #line 557 
      struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"e1000e", .function = (char *)"e1000_phy_force_speed_duplex_80003es2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = (char *)"Waiting for forced speed/duplex link on GG82563 phy.\n", .lineno = (unsigned int)557U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 557 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
      #line 557 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 557 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,(hw->adapter)->netdev,(char *)"Waiting for forced speed/duplex link on GG82563 phy.\n");
    }
    #line 559 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    #line 561 
    if (ret_val != 0) 
                      #line 562 
                      return ret_val;
    #line 564 
    if (! link) {
      #line 568 
      ret_val = e1000e_phy_reset_dsp(hw);
      #line 569 
      if (ret_val != 0) 
                        #line 570 
                        return ret_val;
    }
    #line 574 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    #line 576 
    if (ret_val != 0) 
                      #line 577 
                      return ret_val;
  }
  #line 580 
  ret_val = e1e_rphy(hw,85U,& phy_data);
  #line 581 
  if (ret_val != 0) 
                    #line 582 
                    return ret_val;
  #line 587 
  phy_data = (unsigned short)((unsigned int)phy_data & 65528U);
  #line 588 
  if (((int)hw->mac.forced_speed_duplex & 3) != 0) 
                                                   #line 589 
                                                   phy_data = (unsigned short)((unsigned int)phy_data | 4U); else 
                                                                    #line 591 
                                                                    phy_data = (unsigned short)((unsigned int)phy_data | 5U);
  #line 596 
  phy_data = (unsigned short)((unsigned int)phy_data | 16U);
  #line 597 
  ret_val = e1e_wphy(hw,85U,(unsigned short)((int)phy_data));
  #line 599 
  return ret_val;
}

#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_get_cable_length_80003es2lan(struct e1000_hw *hw)
{
  #line 612 
  s32 ret_val;
  #line 613 
  u16 phy_data;
  #line 613 
  u16 index;
  #line 611 
  struct e1000_phy_info *phy = & hw->phy;
  #line 615 
  ret_val = e1e_rphy(hw,186U,& phy_data);
  #line 616 
  if (ret_val != 0) 
                    #line 617 
                    return ret_val;
  #line 619 
  index = (unsigned short)((unsigned int)phy_data & 7U);
  #line 621 
  if ((unsigned int)index > 5U) 
                                #line 622 
                                return -2;
  #line 624 
  phy->min_cable_length = e1000_gg82563_cable_length_table[(int)index];
  #line 625 
  phy->max_cable_length = e1000_gg82563_cable_length_table[(int)index + 5];
  #line 627 
  phy->cable_length = (unsigned short)(((int)phy->min_cable_length + (int)phy->max_cable_length) / 2);
  #line 629 
  return 0;
}

#line 640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_get_link_up_info_80003es2lan(struct e1000_hw *hw, u16 *speed, u16 *duplex)
{
  #line 643 
  s32 ret_val;
  #line 645 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
    #line 646 
    ret_val = e1000e_get_speed_and_duplex_copper(hw,speed,duplex);
    #line 647 
    (*(hw->phy.ops.cfg_on_link_up))(hw);
  }
  else 
       #line 649 
       ret_val = e1000e_get_speed_and_duplex_fiber_serdes(hw,speed,duplex);
  #line 654 
  return ret_val;
}

#line 663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_reset_hw_80003es2lan(struct e1000_hw *hw)
{
  #line 665 
  u32 ctrl;
  #line 666 
  s32 ret_val;
  #line 667 
  u16 kum_reg_data;
  #line 672 
  ret_val = e1000e_disable_pcie_master(hw);
  #line 673 
  if (ret_val != 0) {
    #line 674 
    bool branch;
    #line 674 
    struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"e1000e", .function = (char *)"e1000_reset_hw_80003es2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = (char *)"PCI-E Master disable polling has failed.\n", .lineno = (unsigned int)674U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 674 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
    #line 674 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 674 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,(hw->adapter)->netdev,(char *)"PCI-E Master disable polling has failed.\n");
  }
  {
    #line 676 
    bool branch_0;
    #line 676 
    struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"e1000e", .function = (char *)"e1000_reset_hw_80003es2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = (char *)"Masking off all interrupts\n", .lineno = (unsigned int)676U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 676 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
    #line 676 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 676 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,(hw->adapter)->netdev,(char *)"Masking off all interrupts\n");
  }
  #line 677 
  __ew32(hw,216UL,4294967295U);
  #line 679 
  __ew32(hw,256UL,0U);
  #line 680 
  __ew32(hw,1024UL,8U);
  #line 681 
  __er32(hw,8UL);
  #line 683 
  usleep_range(10000UL,11000UL);
  #line 685 
  ctrl = __er32(hw,0UL);
  #line 687 
  ret_val = e1000_acquire_phy_80003es2lan(hw);
  #line 688 
  if (ret_val != 0) 
                    #line 689 
                    return ret_val;
  {
    #line 691 
    bool branch_1;
    #line 691 
    struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"e1000e", .function = (char *)"e1000_reset_hw_80003es2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = (char *)"Issuing a global reset to MAC\n", .lineno = (unsigned int)691U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 691 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
    #line 691 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 691 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,(hw->adapter)->netdev,(char *)"Issuing a global reset to MAC\n");
  }
  #line 692 
  __ew32(hw,0UL,ctrl | 67108864U);
  #line 693 
  e1000_release_phy_80003es2lan(hw);
  #line 696 
  ret_val = e1000_read_kmrn_reg_80003es2lan(hw,9U,& kum_reg_data);
  #line 699 
  if (ret_val == 0) {
    #line 700 
    kum_reg_data = (unsigned short)((unsigned int)kum_reg_data | 512U);
    #line 701 
    ret_val = e1000_write_kmrn_reg_80003es2lan(hw,9U,(unsigned short)((int)kum_reg_data));
    #line 704 
    if (ret_val != 0) {
      #line 705 
      bool branch_2;
      #line 705 
      struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"e1000e", .function = (char *)"e1000_reset_hw_80003es2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = (char *)"Error disabling far-end loopback\n", .lineno = (unsigned int)705U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 705 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
      #line 705 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 705 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,(hw->adapter)->netdev,(char *)"Error disabling far-end loopback\n");
    }
  }
  else {
    #line 707 
    bool branch_3;
    #line 707 
    struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"e1000e", .function = (char *)"e1000_reset_hw_80003es2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = (char *)"Error disabling far-end loopback\n", .lineno = (unsigned int)707U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 707 
    branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
    #line 707 
    if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                  #line 707 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,(hw->adapter)->netdev,(char *)"Error disabling far-end loopback\n");
  }
  #line 710 
  ret_val = e1000e_get_auto_rd_done(hw);
  #line 711 
  if (ret_val != 0) 
                    #line 713 
                    return ret_val;
  #line 716 
  __ew32(hw,216UL,4294967295U);
  #line 717 
  __er32(hw,192UL);
  #line 719 
  return e1000_check_alt_mac_addr_generic(hw);
}

#line 728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_init_hw_80003es2lan(struct e1000_hw *hw)
{
  #line 731 
  u32 reg_data;
  #line 732 
  s32 ret_val;
  #line 733 
  u16 kum_reg_data;
  #line 734 
  u16 i;
  #line 730 
  struct e1000_mac_info *mac = & hw->mac;
  #line 736 
  e1000_initialize_hw_bits_80003es2lan(hw);
  #line 739 
  ret_val = (*(mac->ops.id_led_init))(hw);
  #line 741 
  if (ret_val != 0) {
    #line 742 
    bool branch;
    #line 742 
    struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_hw_80003es2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = (char *)"Error initializing identification LED\n", .lineno = (unsigned int)742U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 742 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
    #line 742 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 742 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,(hw->adapter)->netdev,(char *)"Error initializing identification LED\n");
  }
  {
    #line 745 
    bool branch_0;
    #line 745 
    struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_hw_80003es2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = (char *)"Initializing the IEEE VLAN\n", .lineno = (unsigned int)745U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 745 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
    #line 745 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 745 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,(hw->adapter)->netdev,(char *)"Initializing the IEEE VLAN\n");
  }
  #line 746 
  (*(mac->ops.clear_vfta))(hw);
  #line 749 
  e1000e_init_rx_addrs(hw,(unsigned short)((int)mac->rar_entry_count));
  {
    #line 752 
    bool branch_1;
    #line 752 
    struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_hw_80003es2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = (char *)"Zeroing the MTA\n", .lineno = (unsigned int)752U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 752 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
    #line 752 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 752 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,(hw->adapter)->netdev,(char *)"Zeroing the MTA\n");
  }
  #line 753 
  i = (unsigned short)0U;
  #line 753 
  while ((int)mac->mta_reg_count > (int)i) {
    #line 754 
    __ew32(hw,(unsigned long)(((int)i << 2) + 20992),0U);
    #line 753 
    i = (u16)((int)i + 1);
  }
  #line 757 
  ret_val = (*(mac->ops.setup_link))(hw);
  #line 758 
  if (ret_val != 0) 
                    #line 759 
                    return ret_val;
  #line 762 
  ret_val = e1000_read_kmrn_reg_80003es2lan(hw,9U,& kum_reg_data);
  #line 765 
  if (ret_val == 0) {
    #line 766 
    kum_reg_data = (unsigned short)((unsigned int)kum_reg_data | 512U);
    #line 767 
    ret_val = e1000_write_kmrn_reg_80003es2lan(hw,9U,(unsigned short)((int)kum_reg_data));
    #line 770 
    if (ret_val != 0) {
      #line 771 
      bool branch_2;
      #line 771 
      struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_hw_80003es2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = (char *)"Error disabling far-end loopback\n", .lineno = (unsigned int)771U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 771 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
      #line 771 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 771 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,(hw->adapter)->netdev,(char *)"Error disabling far-end loopback\n");
    }
  }
  else {
    #line 773 
    bool branch_3;
    #line 773 
    struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"e1000e", .function = (char *)"e1000_init_hw_80003es2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = (char *)"Error disabling far-end loopback\n", .lineno = (unsigned int)773U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 773 
    branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
    #line 773 
    if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                  #line 773 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,(hw->adapter)->netdev,(char *)"Error disabling far-end loopback\n");
  }
  #line 777 
  reg_data = __er32(hw,14376UL);
  #line 778 
  reg_data = (reg_data & 4269867007U) | 21037056U;
  #line 780 
  __ew32(hw,14376UL,reg_data);
  #line 783 
  reg_data = __er32(hw,14632UL);
  #line 784 
  reg_data = (reg_data & 4269867007U) | 21037056U;
  #line 786 
  __ew32(hw,14632UL,reg_data);
  #line 789 
  reg_data = __er32(hw,1024UL);
  #line 790 
  reg_data |= 16777216U;
  #line 791 
  __ew32(hw,1024UL,reg_data);
  #line 794 
  reg_data = __er32(hw,1028UL);
  #line 795 
  reg_data &= 4293919743U;
  #line 796 
  reg_data |= 65536U;
  #line 797 
  __ew32(hw,1028UL,reg_data);
  #line 800 
  reg_data = __er32(hw,1040UL);
  #line 801 
  reg_data &= 4294966272U;
  #line 802 
  reg_data |= 8U;
  #line 803 
  __ew32(hw,1040UL,reg_data);
  #line 805 
  reg_data = readl(hw->hw_addr + 24324U);
  #line 806 
  reg_data &= 4293918719U;
  #line 807 
  __ew32(hw,24324UL,reg_data);
  #line 810 
  hw->dev_spec.e80003es2lan.mdic_wa_enable = (_Bool)1;
  #line 812 
  ret_val = e1000_read_kmrn_reg_80003es2lan(hw,31U,& i);
  #line 815 
  if (ret_val == 0) 
    #line 816 
    if (((int)i & 12) == 4) 
                            #line 818 
                            hw->dev_spec.e80003es2lan.mdic_wa_enable = (_Bool)0;
  #line 826 
  e1000_clear_hw_cntrs_80003es2lan(hw);
  #line 828 
  return ret_val;
}

#line 837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static void e1000_initialize_hw_bits_80003es2lan(struct e1000_hw *hw)
{
  #line 839 
  u32 reg;
  #line 842 
  reg = __er32(hw,14376UL);
  #line 843 
  reg |= 4194304U;
  #line 844 
  __ew32(hw,14376UL,reg);
  #line 847 
  reg = __er32(hw,14632UL);
  #line 848 
  reg |= 4194304U;
  #line 849 
  __ew32(hw,14632UL,reg);
  #line 852 
  reg = __er32(hw,14400UL);
  #line 853 
  reg &= 2281701375U;
  #line 854 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) 
                                                                   #line 855 
                                                                   reg &= 4293918719U;
  #line 856 
  __ew32(hw,14400UL,reg);
  #line 859 
  reg = __er32(hw,14656UL);
  #line 860 
  if ((__er32(hw,1024UL) & 268435456U) != 0U) 
                                              #line 861 
                                              reg &= 4026531839U; else 
                                                                    #line 863 
                                                                    reg |= 268435456U;
  #line 864 
  __ew32(hw,14656UL,reg);
  #line 869 
  reg = __er32(hw,20488UL);
  #line 870 
  reg |= 196608U;
  #line 871 
  __ew32(hw,20488UL,reg);
  #line 872 
  return;
}

#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_copper_link_setup_gg82563_80003es2lan(struct e1000_hw *hw)
{
  #line 883 
  s32 ret_val;
  #line 884 
  u32 reg;
  #line 885 
  u16 data;
  #line 882 
  struct e1000_phy_info *phy = & hw->phy;
  #line 887 
  ret_val = e1e_rphy(hw,85U,& data);
  #line 888 
  if (ret_val != 0) 
                    #line 889 
                    return ret_val;
  #line 891 
  data = (unsigned short)((unsigned int)data | 16U);
  #line 893 
  data = (unsigned short)((unsigned int)data | 7U);
  #line 895 
  ret_val = e1e_wphy(hw,85U,(unsigned short)((int)data));
  #line 896 
  if (ret_val != 0) 
                    #line 897 
                    return ret_val;
  #line 906 
  ret_val = e1e_rphy(hw,16U,& data);
  #line 907 
  if (ret_val != 0) 
                    #line 908 
                    return ret_val;
  #line 910 
  data = (unsigned short)((unsigned int)data & 65439U);
  #line 912 
  switch ((int)phy->mdix) {
    #line 913 
    case 1: 
            #line 913 
    ;
    #line 914 
    data = data;
    #line 915 
    break;
    #line 916 
    case 2: 
            #line 916 
    ;
    #line 917 
    data = (unsigned short)((unsigned int)data | 32U);
    #line 918 
    break;
    #line 919 
    case 0: 
            #line 919 
    ;
    #line 920 
    default: 
             #line 920 
    ;
    #line 921 
    data = (unsigned short)((unsigned int)data | 96U);
    #line 922 
    break;
  }
  #line 931 
  data = (unsigned short)((unsigned int)data & 65533U);
  #line 932 
  if ((int)phy->disable_polarity_correction != 0) 
                                                  #line 933 
                                                  data = (unsigned short)((unsigned int)data | 2U);
  #line 935 
  ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
  #line 936 
  if (ret_val != 0) 
                    #line 937 
                    return ret_val;
  #line 940 
  ret_val = (*(hw->phy.ops.commit))(hw);
  #line 941 
  if (ret_val != 0) {
    {
      #line 942 
      bool branch;
      #line 942 
      struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"e1000e", .function = (char *)"e1000_copper_link_setup_gg82563_80003es2lan", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = (char *)"Error Resetting the PHY\n", .lineno = (unsigned int)942U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 942 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
      #line 942 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 942 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug455,(hw->adapter)->netdev,(char *)"Error Resetting the PHY\n");
    }
    #line 943 
    return ret_val;
  }
  #line 947 
  reg = 0U;
  #line 948 
  data = (unsigned short)2056U;
  #line 950 
  ret_val = e1000_write_kmrn_reg_80003es2lan(hw,reg,(unsigned short)((int)data));
  #line 951 
  if (ret_val != 0) 
                    #line 952 
                    return ret_val;
  #line 954 
  reg = 31U;
  #line 955 
  ret_val = e1000_read_kmrn_reg_80003es2lan(hw,reg,& data);
  #line 956 
  if (ret_val != 0) 
                    #line 957 
                    return ret_val;
  #line 958 
  data = (unsigned short)((unsigned int)data | 8192U);
  #line 959 
  ret_val = e1000_write_kmrn_reg_80003es2lan(hw,reg,(unsigned short)((int)data));
  #line 960 
  if (ret_val != 0) 
                    #line 961 
                    return ret_val;
  #line 963 
  ret_val = e1e_rphy(hw,26U,& data);
  #line 964 
  if (ret_val != 0) 
                    #line 965 
                    return ret_val;
  #line 967 
  data = (unsigned short)((unsigned int)data & 57343U);
  #line 968 
  ret_val = e1e_wphy(hw,26U,(unsigned short)((int)data));
  #line 969 
  if (ret_val != 0) 
                    #line 970 
                    return ret_val;
  #line 972 
  reg = __er32(hw,24UL);
  #line 973 
  reg &= 4282384383U;
  #line 974 
  __ew32(hw,24UL,reg);
  #line 976 
  ret_val = e1e_rphy(hw,6196U,& data);
  #line 977 
  if (ret_val != 0) 
                    #line 978 
                    return ret_val;
  #line 984 
  if (! (*(hw->mac.ops.check_mng_mode))(hw)) {
    #line 986 
    data = (unsigned short)((unsigned int)data | 1U);
    #line 987 
    ret_val = e1e_wphy(hw,6196U,(unsigned short)((int)data));
    #line 988 
    if (ret_val != 0) 
                      #line 989 
                      return ret_val;
    #line 991 
    ret_val = e1e_rphy(hw,6192U,& data);
    #line 992 
    if (ret_val != 0) 
                      #line 993 
                      return ret_val;
    #line 995 
    data = (unsigned short)((unsigned int)data & 63487U);
    #line 996 
    ret_val = e1e_wphy(hw,6192U,(unsigned short)((int)data));
    #line 997 
    if (ret_val != 0) 
                      #line 998 
                      return ret_val;
  }
  #line 1004 
  ret_val = e1e_rphy(hw,6226U,& data);
  #line 1005 
  if (ret_val != 0) 
                    #line 1006 
                    return ret_val;
  #line 1008 
  data = (unsigned short)((unsigned int)data | 16U);
  #line 1009 
  ret_val = e1e_wphy(hw,6226U,(unsigned short)((int)data));
  #line 1010 
  if (ret_val != 0) 
                    #line 1011 
                    return ret_val;
  #line 1013 
  return 0;
}

#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_setup_copper_link_80003es2lan(struct e1000_hw *hw)
{
  #line 1025 
  u32 ctrl;
  #line 1026 
  s32 ret_val;
  #line 1027 
  u16 reg_data;
  #line 1029 
  ctrl = __er32(hw,0UL);
  #line 1030 
  ctrl |= 64U;
  #line 1031 
  ctrl &= 4294961151U;
  #line 1032 
  __ew32(hw,0UL,ctrl);
  #line 1038 
  ret_val = e1000_write_kmrn_reg_80003es2lan(hw,1668U,(unsigned short)65535);
  #line 1040 
  if (ret_val != 0) 
                    #line 1041 
                    return ret_val;
  #line 1042 
  ret_val = e1000_read_kmrn_reg_80003es2lan(hw,1673U,& reg_data);
  #line 1044 
  if (ret_val != 0) 
                    #line 1045 
                    return ret_val;
  #line 1046 
  reg_data = (unsigned short)((unsigned int)reg_data | 63U);
  #line 1047 
  ret_val = e1000_write_kmrn_reg_80003es2lan(hw,1673U,(unsigned short)((int)reg_data));
  #line 1049 
  if (ret_val != 0) 
                    #line 1050 
                    return ret_val;
  #line 1051 
  ret_val = e1000_read_kmrn_reg_80003es2lan(hw,2U,& reg_data);
  #line 1055 
  if (ret_val != 0) 
                    #line 1056 
                    return ret_val;
  #line 1057 
  reg_data = (unsigned short)((unsigned int)reg_data | 16U);
  #line 1058 
  ret_val = e1000_write_kmrn_reg_80003es2lan(hw,2U,(unsigned short)((int)reg_data));
  #line 1062 
  if (ret_val != 0) 
                    #line 1063 
                    return ret_val;
  #line 1065 
  ret_val = e1000_copper_link_setup_gg82563_80003es2lan(hw);
  #line 1066 
  if (ret_val != 0) 
                    #line 1067 
                    return ret_val;
  #line 1069 
  return e1000e_setup_copper_link(hw);
}

#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_cfg_on_link_up_80003es2lan(struct e1000_hw *hw)
{
  #line 1083 
  u16 speed;
  #line 1084 
  u16 duplex;
  #line 1082 
  s32 ret_val = 0;
  #line 1086 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
    #line 1087 
    ret_val = e1000e_get_speed_and_duplex_copper(hw,& speed,& duplex);
    #line 1089 
    if (ret_val != 0) 
                      #line 1090 
                      return ret_val;
    #line 1092 
    if ((unsigned int)speed == 1000U) 
                                      #line 1093 
                                      ret_val = e1000_cfg_kmrn_1000_80003es2lan(hw); else 
                                                                    #line 1095 
                                                                    ret_val = e1000_cfg_kmrn_10_100_80003es2lan(hw,(unsigned short)((int)duplex));
  }
  #line 1098 
  return ret_val;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_cfg_kmrn_10_100_80003es2lan(struct e1000_hw *hw, u16 duplex)
{
  #line 1111 
  s32 ret_val;
  #line 1112 
  u32 tipg;
  #line 1114 
  u16 reg_data;
  #line 1114 
  u16 reg_data2;
  #line 1113 
  u32 i = 0U;
  #line 1116 
  reg_data = (unsigned short)4U;
  #line 1117 
  ret_val = e1000_write_kmrn_reg_80003es2lan(hw,16U,(unsigned short)((int)reg_data));
  #line 1121 
  if (ret_val != 0) 
                    #line 1122 
                    return ret_val;
  #line 1125 
  tipg = __er32(hw,1040UL);
  #line 1126 
  tipg &= 4294966272U;
  #line 1127 
  tipg |= 9U;
  #line 1128 
  __ew32(hw,1040UL,tipg);
  #line 1130 
  while (1) {
    #line 1131 
    ret_val = e1e_rphy(hw,6192U,& reg_data);
    #line 1132 
    if (ret_val != 0) 
                      #line 1133 
                      return ret_val;
    #line 1135 
    ret_val = e1e_rphy(hw,6192U,& reg_data2);
    #line 1136 
    if (ret_val != 0) 
                      #line 1137 
                      return ret_val;
    #line 1138 
    i ++;
    #line 1139 
    if (! ((int)reg_data != (int)reg_data2 && i <= 4U)) 
                                                        #line 1130 
                                                        break;
  }
  #line 1141 
  if ((unsigned int)duplex == 1U) 
                                  #line 1142 
                                  reg_data = (unsigned short)((unsigned int)reg_data | 2048U); else 
                                                                    #line 1144 
                                                                    reg_data = (unsigned short)((unsigned int)reg_data & 63487U);
  #line 1146 
  return e1e_wphy(hw,6192U,(unsigned short)((int)reg_data));
}

#line 1156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_cfg_kmrn_1000_80003es2lan(struct e1000_hw *hw)
{
  #line 1158 
  s32 ret_val;
  #line 1159 
  u16 reg_data;
  #line 1159 
  u16 reg_data2;
  #line 1160 
  u32 tipg;
  #line 1161 
  u32 i = 0U;
  #line 1163 
  reg_data = (unsigned short)0U;
  #line 1164 
  ret_val = e1000_write_kmrn_reg_80003es2lan(hw,16U,(unsigned short)((int)reg_data));
  #line 1168 
  if (ret_val != 0) 
                    #line 1169 
                    return ret_val;
  #line 1172 
  tipg = __er32(hw,1040UL);
  #line 1173 
  tipg &= 4294966272U;
  #line 1174 
  tipg |= 8U;
  #line 1175 
  __ew32(hw,1040UL,tipg);
  #line 1177 
  while (1) {
    #line 1178 
    ret_val = e1e_rphy(hw,6192U,& reg_data);
    #line 1179 
    if (ret_val != 0) 
                      #line 1180 
                      return ret_val;
    #line 1182 
    ret_val = e1e_rphy(hw,6192U,& reg_data2);
    #line 1183 
    if (ret_val != 0) 
                      #line 1184 
                      return ret_val;
    #line 1185 
    i ++;
    #line 1186 
    if (! ((int)reg_data != (int)reg_data2 && i <= 4U)) 
                                                        #line 1177 
                                                        break;
  }
  #line 1188 
  reg_data = (unsigned short)((unsigned int)reg_data & 63487U);
  #line 1190 
  return e1e_wphy(hw,6192U,(unsigned short)((int)reg_data));
}

#line 1203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_read_kmrn_reg_80003es2lan(struct e1000_hw *hw, u32 offset, u16 *data)
{
  #line 1206 
  u32 kmrnctrlsta;
  #line 1207 
  s32 ret_val;
  #line 1209 
  ret_val = e1000_acquire_mac_csr_80003es2lan(hw);
  #line 1210 
  if (ret_val != 0) 
                    #line 1211 
                    return ret_val;
  #line 1213 
  kmrnctrlsta = ((offset << 16) & 2031616U) | 2097152U;
  #line 1215 
  __ew32(hw,52UL,kmrnctrlsta);
  #line 1216 
  __er32(hw,8UL);
  #line 1218 
  __const_udelay(8590UL);
  #line 1220 
  kmrnctrlsta = __er32(hw,52UL);
  #line 1221 
  *data = (unsigned short)kmrnctrlsta;
  #line 1223 
  e1000_release_mac_csr_80003es2lan(hw);
  #line 1225 
  return ret_val;
}

#line 1238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_write_kmrn_reg_80003es2lan(struct e1000_hw *hw, u32 offset, u16 data)
{
  #line 1241 
  u32 kmrnctrlsta;
  #line 1242 
  s32 ret_val;
  #line 1244 
  ret_val = e1000_acquire_mac_csr_80003es2lan(hw);
  #line 1245 
  if (ret_val != 0) 
                    #line 1246 
                    return ret_val;
  #line 1248 
  kmrnctrlsta = ((offset << 16) & 2031616U) | (unsigned int)data;
  #line 1250 
  __ew32(hw,52UL,kmrnctrlsta);
  #line 1251 
  __er32(hw,8UL);
  #line 1253 
  __const_udelay(8590UL);
  #line 1255 
  e1000_release_mac_csr_80003es2lan(hw);
  #line 1257 
  return ret_val;
}

#line 1264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_read_mac_addr_80003es2lan(struct e1000_hw *hw)
{
  #line 1266 
  s32 ret_val;
  #line 1272 
  ret_val = e1000_check_alt_mac_addr_generic(hw);
  #line 1273 
  if (ret_val != 0) 
                    #line 1274 
                    return ret_val;
  #line 1276 
  return e1000_read_mac_addr_generic(hw);
}

#line 1286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static void e1000_power_down_phy_copper_80003es2lan(struct e1000_hw *hw)
{
  #line 1289 
  if (! (*(hw->mac.ops.check_mng_mode))(hw)) {
    #line 1289 
    if ((*(hw->phy.ops.check_reset_block))(hw) == 0) 
                                                     #line 1291 
                                                     e1000_power_down_phy_copper(hw);
  }
  #line 1292 
  return;
}

#line 1300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static void e1000_clear_hw_cntrs_80003es2lan(struct e1000_hw *hw)
{
  #line 1302 
  e1000e_clear_hw_cntrs_base(hw);
  #line 1304 
  __er32(hw,16476UL);
  #line 1305 
  __er32(hw,16480UL);
  #line 1306 
  __er32(hw,16484UL);
  #line 1307 
  __er32(hw,16488UL);
  #line 1308 
  __er32(hw,16492UL);
  #line 1309 
  __er32(hw,16496UL);
  #line 1310 
  __er32(hw,16600UL);
  #line 1311 
  __er32(hw,16604UL);
  #line 1312 
  __er32(hw,16608UL);
  #line 1313 
  __er32(hw,16612UL);
  #line 1314 
  __er32(hw,16616UL);
  #line 1315 
  __er32(hw,16620UL);
  #line 1317 
  __er32(hw,16388UL);
  #line 1318 
  __er32(hw,16396UL);
  #line 1319 
  __er32(hw,16436UL);
  #line 1320 
  __er32(hw,16444UL);
  #line 1321 
  __er32(hw,16632UL);
  #line 1322 
  __er32(hw,16636UL);
  #line 1324 
  __er32(hw,16564UL);
  #line 1325 
  __er32(hw,16568UL);
  #line 1326 
  __er32(hw,16572UL);
  #line 1328 
  __er32(hw,16640UL);
  #line 1329 
  __er32(hw,16676UL);
  #line 1331 
  __er32(hw,16644UL);
  #line 1332 
  __er32(hw,16648UL);
  #line 1333 
  __er32(hw,16652UL);
  #line 1334 
  __er32(hw,16656UL);
  #line 1335 
  __er32(hw,16664UL);
  #line 1336 
  __er32(hw,16668UL);
  #line 1337 
  __er32(hw,16672UL);
  #line 1338 
  return;
}

#line 1340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static struct e1000_mac_operations es2_mac_ops = {.id_led_init = & e1000e_id_led_init_generic, .blink_led = & e1000e_blink_led_generic, .check_mng_mode = & e1000e_check_mng_mode_generic, .cleanup_led = & e1000e_cleanup_led_generic, .clear_hw_cntrs = & e1000_clear_hw_cntrs_80003es2lan, .clear_vfta = & e1000_clear_vfta_generic, .get_bus_info = & e1000e_get_bus_info_pcie, .set_lan_id = & e1000_set_lan_id_multi_port_pcie, .get_link_up_info = & e1000_get_link_up_info_80003es2lan, .led_on = & e1000e_led_on_generic, .led_off = & e1000e_led_off_generic, .update_mc_addr_list = & e1000e_update_mc_addr_list_generic, .reset_hw = & e1000_reset_hw_80003es2lan, .init_hw = & e1000_init_hw_80003es2lan, .setup_link = & e1000e_setup_link_generic, .setup_led = & e1000e_setup_led_generic, .write_vfta = & e1000_write_vfta_generic, .config_collision_dist = & e1000e_config_collision_dist_generic, .rar_set = & e1000e_rar_set_generic, .read_mac_addr = & e1000_read_mac_addr_80003es2lan, .rar_get_count = & e1000e_rar_get_count_generic};
#line 1366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static struct e1000_phy_operations es2_phy_ops = {.acquire = & e1000_acquire_phy_80003es2lan, .cfg_on_link_up = & e1000_cfg_on_link_up_80003es2lan, .check_polarity = & e1000_check_polarity_m88, .check_reset_block = & e1000e_check_reset_block_generic, .commit = & e1000e_phy_sw_reset, .force_speed_duplex = & e1000_phy_force_speed_duplex_80003es2lan, .get_cfg_done = & e1000_get_cfg_done_80003es2lan, .get_cable_length = & e1000_get_cable_length_80003es2lan, .get_info = & e1000e_get_phy_info_m88, .read_reg = & e1000_read_phy_reg_gg82563_80003es2lan, .release = & e1000_release_phy_80003es2lan, .reset = & e1000e_phy_hw_reset_generic, .set_d3_lplu_state = & e1000e_set_d3_lplu_state, .write_reg = & e1000_write_phy_reg_gg82563_80003es2lan};
#line 1384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static struct e1000_nvm_operations es2_nvm_ops = {.acquire = & e1000_acquire_nvm_80003es2lan, .read = & e1000e_read_nvm_eerd, .release = & e1000_release_nvm_80003es2lan, .reload = & e1000e_reload_nvm_generic, .update = & e1000e_update_nvm_checksum_generic, .valid_led_default = & e1000e_valid_led_default, .validate = & e1000e_validate_nvm_checksum_generic, .write = & e1000_write_nvm_80003es2lan};
#line 1395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
struct e1000_info e1000_es2_info = {.mac = e1000_80003es2lan, .flags = 25624748U, .flags2 = 64U, .pba = 38U, .max_hw_frame_size = 9234U, .get_variants = & e1000_get_variants_80003es2lan, .mac_ops = & es2_mac_ops, .phy_ops = & es2_phy_ops, .nvm_ops = & es2_nvm_ops};
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 182 
char *kstrdup(char *, gfp_t);
#line 1716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1716 
void _dev_notice(struct device *, char * , ...);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
unsigned int copybreak = 256U;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static int TxIntDelay[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_TxIntDelay;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static int TxAbsIntDelay[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_TxAbsIntDelay;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static int RxIntDelay[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_RxIntDelay;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static int RxAbsIntDelay[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_RxAbsIntDelay;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static int InterruptThrottleRate[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_InterruptThrottleRate;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static int IntMode[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_IntMode;
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static int SmartPowerDownEnable[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_SmartPowerDownEnable;
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static int KumeranLockLoss[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_KumeranLockLoss;
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static int WriteProtectNVM[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_WriteProtectNVM;
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static int CrcStripping[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_CrcStripping;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
static int e1000_validate_option(unsigned int *value, struct e1000_option *opt, struct e1000_adapter *adapter)
{
  #line 167 
  if (*value == 4294967295U) {
    #line 168 
    *value = (unsigned int)opt->def;
    #line 169 
    return 0;
  }
  #line 172 
  switch ((unsigned int)opt->type) {
    #line 173 
    case (unsigned int)0: 
                          #line 173 
    ;
    #line 174 
    switch (*value) {
      #line 175 
      case (unsigned int)1: 
                            #line 175 
      ;
      #line 176 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s Enabled\n",opt->name);
      #line 178 
      return 0;
      #line 179 
      case (unsigned int)0: 
                            #line 179 
      ;
      #line 180 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s Disabled\n",opt->name);
      #line 182 
      return 0;
    }
    #line 184 
    break;
    #line 185 
    case (unsigned int)1: 
                          #line 185 
    ;
    #line 186 
    if (*value >= (unsigned int)opt->arg.r.min && *value <= (unsigned int)opt->arg.r.max) {
      #line 187 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s set to %i\n",opt->name,*value);
      #line 189 
      return 0;
    }
    #line 191 
    break;
    #line 192 
    case (unsigned int)2: 
                          #line 192 
    ;
    {
      #line 193 
      int i;
      #line 194 
      struct e1000_opt_list *ent;
      #line 196 
      i = 0;
      #line 196 
      while (opt->arg.l.nr > i) {
        #line 197 
        ent = opt->arg.l.p + (unsigned long)i;
        #line 198 
        if (*value == (unsigned int)ent->i) {
          #line 199 
          if ((int)*(ent->str) != 0) 
                                     #line 200 
                                     _dev_info(& (adapter->pdev)->dev,(char *)"%s\n",ent->str);
          #line 202 
          return 0;
        }
        #line 196 
        i ++;
      }
    }
    #line 206 
    break;
    #line 207 
    default: 
             #line 207 
    ;
    #line 209 
    ldv_inline_asm();
    #line 210 
    ldv_inline_asm();
    #line 211 
    ldv_inline_asm();
    #line 208 
    ;
  }
  #line 211 
  _dev_info(& (adapter->pdev)->dev,(char *)"Invalid %s value specified (%i) %s\n",opt->name,*value,opt->err);
  #line 213 
  *value = (unsigned int)opt->def;
  #line 214 
  return -1;
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/param.c"
void e1000e_check_options(struct e1000_adapter *adapter)
{
  #line 228 
  struct e1000_hw *hw = & adapter->hw;
  #line 229 
  int bd = (int)adapter->bd_number;
  #line 231 
  if (bd > 31) {
    #line 232 
    _dev_notice(& (adapter->pdev)->dev,(char *)"Warning: no configuration for board #%i\n",bd);
    #line 234 
    _dev_notice(& (adapter->pdev)->dev,(char *)"Using defaults for all values\n");
  }
  {
    #line 240 
    struct e1000_option opt = {.type = range_option, .name = (char *)"Transmit Interrupt Delay", .err = (char *)"using default of ", .def = 8, .arg = {.r = {.min = 0, .max = 65535}}};
    #line 250 
    if (num_TxIntDelay > (unsigned int)bd) {
      #line 251 
      adapter->tx_int_delay = (unsigned int)TxIntDelay[bd];
      #line 252 
      e1000_validate_option(& adapter->tx_int_delay,& opt,adapter);
    }
    else 
         #line 255 
         adapter->tx_int_delay = (unsigned int)opt.def;
  }
  {
    #line 260 
    struct e1000_option opt_0 = {.type = range_option, .name = (char *)"Transmit Absolute Interrupt Delay", .err = (char *)"using default of ", .def = 32, .arg = {.r = {.min = 0, .max = 65535}}};
    #line 270 
    if (num_TxAbsIntDelay > (unsigned int)bd) {
      #line 271 
      adapter->tx_abs_int_delay = (unsigned int)TxAbsIntDelay[bd];
      #line 272 
      e1000_validate_option(& adapter->tx_abs_int_delay,& opt_0,adapter);
    }
    else 
         #line 275 
         adapter->tx_abs_int_delay = (unsigned int)opt_0.def;
  }
  {
    #line 280 
    struct e1000_option opt_1 = {.type = range_option, .name = (char *)"Receive Interrupt Delay", .err = (char *)"using default of ", .def = 0, .arg = {.r = {.min = 0, .max = 65535}}};
    #line 290 
    if (((unsigned long)adapter->flags2 & 64UL) != 0UL) 
                                                        #line 291 
                                                        opt_1.def = 32;
    #line 293 
    if (num_RxIntDelay > (unsigned int)bd) {
      #line 294 
      adapter->rx_int_delay = (unsigned int)RxIntDelay[bd];
      #line 295 
      e1000_validate_option(& adapter->rx_int_delay,& opt_1,adapter);
    }
    else 
         #line 298 
         adapter->rx_int_delay = (unsigned int)opt_1.def;
  }
  {
    #line 303 
    struct e1000_option opt_2 = {.type = range_option, .name = (char *)"Receive Absolute Interrupt Delay", .err = (char *)"using default of ", .def = 8, .arg = {.r = {.min = 0, .max = 65535}}};
    #line 313 
    if (((unsigned long)adapter->flags2 & 64UL) != 0UL) 
                                                        #line 314 
                                                        opt_2.def = 32;
    #line 316 
    if (num_RxAbsIntDelay > (unsigned int)bd) {
      #line 317 
      adapter->rx_abs_int_delay = (unsigned int)RxAbsIntDelay[bd];
      #line 318 
      e1000_validate_option(& adapter->rx_abs_int_delay,& opt_2,adapter);
    }
    else 
         #line 321 
         adapter->rx_abs_int_delay = (unsigned int)opt_2.def;
  }
  {
    #line 326 
    struct e1000_option opt_3 = {.type = range_option, .name = (char *)"Interrupt Throttling Rate (ints/sec)", .err = (char *)"using default of ", .def = 3, .arg = {.r = {.min = 100, .max = 100000}}};
    #line 336 
    if (num_InterruptThrottleRate > (unsigned int)bd) {
      #line 337 
      adapter->itr = (unsigned int)InterruptThrottleRate[bd];
      #line 344 
      if (adapter->itr > 4U) {
        #line 344 
        if (e1000_validate_option(& adapter->itr,& opt_3,adapter) != 0) 
          #line 346 
          adapter->itr = (unsigned int)opt_3.def;
      }
    }
    else {
      #line 351 
      adapter->itr = (unsigned int)opt_3.def;
      #line 356 
      if (adapter->itr > 4U) 
                             #line 357 
                             _dev_info(& (adapter->pdev)->dev,(char *)"%s set to default %d\n",opt_3.name,adapter->itr);
    }
    #line 362 
    adapter->itr_setting = adapter->itr;
    #line 363 
    switch (adapter->itr) {
      #line 364 
      case (u32)0: 
                   #line 364 
      ;
      #line 365 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s turned off\n",opt_3.name);
      #line 367 
      break;
      #line 368 
      case (u32)1: 
                   #line 368 
      ;
      #line 369 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s set to dynamic mode\n",opt_3.name);
      #line 371 
      adapter->itr = 20000U;
      #line 372 
      break;
      #line 373 
      case (u32)2: 
                   #line 373 
      ;
      #line 374 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s Invalid mode - setting default\n",opt_3.name);
      #line 377 
      adapter->itr_setting = (unsigned int)opt_3.def;
      #line 379 
      case (u32)3: 
                   #line 379 
      ;
      #line 380 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s set to dynamic conservative mode\n",opt_3.name);
      #line 383 
      adapter->itr = 20000U;
      #line 384 
      break;
      #line 385 
      case (u32)4: 
                   #line 385 
      ;
      #line 386 
      _dev_info(& (adapter->pdev)->dev,(char *)"%s set to simplified (2000-8000 ints) mode\n",opt_3.name);
      #line 389 
      break;
      #line 390 
      default: 
               #line 390 
      ;
      #line 397 
      adapter->itr_setting &= 4294967292U;
      #line 398 
      break;
    }
  }
  {
    #line 403 
    struct e1000_option opt_4 = {.type = range_option, .name = (char *)"Interrupt Mode", .err = (char *)0, .def = 0, .arg = {.r = {.min = 0, .max = 0}}};
    #line 415 
    if (((unsigned long)adapter->flags & 1024UL) != 0UL) {
      #line 416 
      opt_4.err = kstrdup((char *)"defaulting to 2 (MSI-X)",3264U);
      #line 418 
      opt_4.def = 2;
      #line 419 
      opt_4.arg.r.max = 2;
    }
    else {
      #line 421 
      opt_4.err = kstrdup((char *)"defaulting to 1 (MSI)",3264U);
      #line 422 
      opt_4.def = 1;
      #line 423 
      opt_4.arg.r.max = 1;
    }
    #line 426 
    if (opt_4.err == (char *)0) {
      #line 427 
      _dev_err(& (adapter->pdev)->dev,(char *)"Failed to allocate memory\n");
      #line 429 
      return;
    }
    #line 433 
    if (num_IntMode > (unsigned int)bd) {
      #line 434 
      unsigned int int_mode = (unsigned int)IntMode[bd];
      #line 436 
      e1000_validate_option(& int_mode,& opt_4,adapter);
      #line 437 
      adapter->int_mode = (int)int_mode;
    }
    else 
         #line 439 
         adapter->int_mode = opt_4.def;
    #line 443 
    kfree((void *)opt_4.err);
  }
  {
    #line 448 
    struct e1000_option opt_5 = {.type = enable_option, .name = (char *)"PHY Smart Power Down", .err = (char *)"defaulting to Disabled", .def = 0, .arg = {.r = {.min = 0, .max = 0}}};
    #line 455 
    if (num_SmartPowerDownEnable > (unsigned int)bd) {
      #line 456 
      unsigned int spd = (unsigned int)SmartPowerDownEnable[bd];
      #line 458 
      e1000_validate_option(& spd,& opt_5,adapter);
      #line 459 
      if (((unsigned long)adapter->flags & 2048UL) != 0UL && spd != 0U) 
        #line 460 
        adapter->flags |= 67108864U;
    }
  }
  {
    #line 465 
    struct e1000_option opt_6 = {.type = enable_option, .name = (char *)"CRC Stripping", .err = (char *)"defaulting to Enabled", .def = 1, .arg = {.r = {.min = 0, .max = 0}}};
    #line 472 
    if (num_CrcStripping > (unsigned int)bd) {
      #line 473 
      unsigned int crc_stripping = (unsigned int)CrcStripping[bd];
      #line 475 
      e1000_validate_option(& crc_stripping,& opt_6,adapter);
      #line 476 
      if (crc_stripping == 1U) {
        #line 477 
        adapter->flags2 |= 1U;
        #line 478 
        adapter->flags2 |= 4096U;
      }
    }
    else {
      #line 481 
      adapter->flags2 |= 1U;
      #line 482 
      adapter->flags2 |= 4096U;
    }
  }
  {
    #line 487 
    struct e1000_option opt_7 = {.type = enable_option, .name = (char *)"Kumeran Lock Loss Workaround", .err = (char *)"defaulting to Enabled", .def = 1, .arg = {.r = {.min = 0, .max = 0}}};
    #line 493 
    bool enabled = (_Bool)(opt_7.def != 0);
    #line 495 
    if (num_KumeranLockLoss > (unsigned int)bd) {
      #line 496 
      unsigned int kmrn_lock_loss = (unsigned int)KumeranLockLoss[bd];
      #line 498 
      e1000_validate_option(& kmrn_lock_loss,& opt_7,adapter);
      #line 499 
      enabled = (_Bool)(kmrn_lock_loss != 0U);
    }
    #line 502 
    if (hw->mac.type == (unsigned int)e1000_ich8lan) 
                                                     #line 503 
                                                     e1000e_set_kmrn_lock_loss_workaround_ich8lan(hw,(_Bool)((bool)((int)enabled) != 0));
  }
  {
    #line 508 
    struct e1000_option opt_8 = {.type = enable_option, .name = (char *)"Write-protect NVM", .err = (char *)"defaulting to Enabled", .def = 1, .arg = {.r = {.min = 0, .max = 0}}};
    #line 515 
    if (((unsigned long)adapter->flags & 512UL) != 0UL) 
      #line 516 
      if (num_WriteProtectNVM > (unsigned int)bd) {
        #line 517 
        unsigned int write_protect_nvm = (unsigned int)WriteProtectNVM[bd];
        #line 519 
        e1000_validate_option(& write_protect_nvm,& opt_8,adapter);
        #line 521 
        if (write_protect_nvm != 0U) 
                                     #line 522 
                                     adapter->flags |= 256U;
      }
      else 
        #line 524 
        if (opt_8.def != 0) 
                            #line 525 
                            adapter->flags |= 256U;
  }
  #line 527 
  return;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_get_bus_info_pcie(struct e1000_hw *hw)
{
  #line 19 
  u16 pcie_link_status;
  #line 19 
  u16 cap_offset;
  #line 16 
  struct e1000_mac_info *mac = & hw->mac;
  #line 17 
  struct e1000_bus_info *bus = & hw->bus;
  #line 18 
  struct e1000_adapter *adapter = hw->adapter;
  #line 21 
  cap_offset = (unsigned short)(adapter->pdev)->pcie_cap;
  #line 22 
  if ((unsigned int)cap_offset == 0U) 
                                      #line 23 
                                      bus->width = e1000_bus_width_unknown;
  else {
    #line 25 
    pci_read_config_word(adapter->pdev,(int)cap_offset + 18,& pcie_link_status);
    #line 28 
    bus->width = (enum e1000_bus_width)(((int)pcie_link_status >> 4) & 63);
  }
  #line 33 
  (*(mac->ops.set_lan_id))(hw);
  #line 35 
  return 0;
}

#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000_set_lan_id_multi_port_pcie(struct e1000_hw *hw)
{
  #line 49 
  u32 reg;
  #line 48 
  struct e1000_bus_info *bus = & hw->bus;
  #line 54 
  reg = __er32(hw,8UL);
  #line 55 
  bus->func = (unsigned short)((unsigned int)((unsigned short)(reg >> 2)) & 3U);
  #line 56 
  return;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000_set_lan_id_single_port(struct e1000_hw *hw)
{
  #line 66 
  struct e1000_bus_info *bus = & hw->bus;
  #line 68 
  bus->func = (unsigned short)0U;
  #line 69 
  return;
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000_clear_vfta_generic(struct e1000_hw *hw)
{
  #line 80 
  u32 offset;
  #line 82 
  offset = 0U;
  #line 82 
  while (offset <= 127U) {
    #line 83 
    __ew32(hw,(unsigned long)((offset << 2) + 22016U),0U);
    #line 84 
    __er32(hw,8UL);
    #line 82 
    offset ++;
  }
  #line 86 
  return;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000_write_vfta_generic(struct e1000_hw *hw, u32 offset, u32 value)
{
  #line 99 
  __ew32(hw,(unsigned long)((offset << 2) + 22016U),value);
  #line 100 
  __er32(hw,8UL);
  #line 101 
  return;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_init_rx_addrs(struct e1000_hw *hw, u16 rar_count)
{
  #line 114 
  u32 i;
  #line 115 
  u8 mac_addr[6U] = {(unsigned char)0U};
  {
    #line 118 
    bool branch;
    #line 118 
    struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_init_rx_addrs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Programming MAC Address into RAR[0]\n", .lineno = (unsigned int)118U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 118 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
    #line 118 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 118 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,(hw->adapter)->netdev,(char *)"Programming MAC Address into RAR[0]\n");
  }
  #line 120 
  (*(hw->mac.ops.rar_set))(hw,(u8 *)(& hw->mac.addr),0U);
  {
    #line 123 
    bool branch_0;
    #line 123 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_init_rx_addrs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Clearing RAR[1-%u]\n", .lineno = (unsigned int)123U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 123 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 123 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 123 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,(hw->adapter)->netdev,(char *)"Clearing RAR[1-%u]\n",(int)rar_count + -1);
  }
  #line 124 
  i = 1U;
  #line 124 
  while ((unsigned int)rar_count > i) {
    #line 125 
    (*(hw->mac.ops.rar_set))(hw,(u8 *)(& mac_addr),i);
    #line 124 
    i ++;
  }
  #line 126 
  return;
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000_check_alt_mac_addr_generic(struct e1000_hw *hw)
{
  #line 142 
  u32 i;
  #line 143 
  s32 ret_val;
  #line 144 
  u16 offset;
  #line 144 
  u16 nvm_alt_mac_addr_offset;
  #line 144 
  u16 nvm_data;
  #line 145 
  u8 alt_mac_addr[6U];
  #line 147 
  ret_val = e1000_read_nvm(hw,(unsigned short)3,(unsigned short)1,& nvm_data);
  #line 148 
  if (ret_val != 0) 
                    #line 149 
                    return ret_val;
  #line 152 
  if (hw->mac.type == (unsigned int)e1000_82573) 
                                                 #line 153 
                                                 return 0;
  #line 155 
  ret_val = e1000_read_nvm(hw,(unsigned short)55,(unsigned short)1,& nvm_alt_mac_addr_offset);
  #line 157 
  if (ret_val != 0) {
    {
      #line 158 
      bool branch;
      #line 158 
      struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"e1000e", .function = (char *)"e1000_check_alt_mac_addr_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)158U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 158 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
      #line 158 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 158 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,(hw->adapter)->netdev,(char *)"NVM Read Error\n");
    }
    #line 159 
    return ret_val;
  }
  #line 162 
  if ((unsigned int)nvm_alt_mac_addr_offset + 65535U > 65533U) 
                                                               #line 165 
                                                               return 0;
  #line 167 
  if ((unsigned int)hw->bus.func == 1U) 
                                        #line 168 
                                        nvm_alt_mac_addr_offset = (unsigned short)((unsigned int)nvm_alt_mac_addr_offset + 3U);
  #line 169 
  i = 0U;
  #line 169 
  while (i <= 5U) {
    #line 170 
    offset = (unsigned short)((int)((unsigned short)(i >> 1)) + (int)nvm_alt_mac_addr_offset);
    #line 171 
    ret_val = e1000_read_nvm(hw,(unsigned short)((int)offset),(unsigned short)1,& nvm_data);
    #line 172 
    if (ret_val != 0) {
      {
        #line 173 
        bool branch_0;
        #line 173 
        struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"e1000e", .function = (char *)"e1000_check_alt_mac_addr_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)173U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 173 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
        #line 173 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 173 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,(hw->adapter)->netdev,(char *)"NVM Read Error\n");
      }
      #line 174 
      return ret_val;
    }
    #line 177 
    alt_mac_addr[i] = (unsigned char)nvm_data;
    #line 178 
    alt_mac_addr[i + 1U] = (unsigned char)((int)nvm_data >> 8);
    #line 169 
    i += 2U;
  }
  #line 182 
  if ((int)is_multicast_ether_addr((u8 *)(& alt_mac_addr)) != 0) {
    {
      #line 183 
      bool branch_1;
      #line 183 
      struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"e1000e", .function = (char *)"e1000_check_alt_mac_addr_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Ignoring Alternate Mac Address with MC bit set\n", .lineno = (unsigned int)183U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 183 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
      #line 183 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 183 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,(hw->adapter)->netdev,(char *)"Ignoring Alternate Mac Address with MC bit set\n");
    }
    #line 184 
    return 0;
  }
  #line 191 
  (*(hw->mac.ops.rar_set))(hw,(u8 *)(& alt_mac_addr),0U);
  #line 193 
  return 0;
}

#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
u32 e1000e_rar_get_count_generic(struct e1000_hw *hw)
{
  #line 198 
  return (unsigned int)hw->mac.rar_entry_count;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
int e1000e_rar_set_generic(struct e1000_hw *hw, u8 *addr, u32 index)
{
  #line 212 
  u32 rar_low;
  #line 212 
  u32 rar_high;
  #line 230 
  u32 tmp;
  #line 232 
  u32 tmp_0;
  #line 217 
  rar_low = (((unsigned int)*addr | ((unsigned int)*(addr + 1U) << 8)) | ((unsigned int)*(addr + 2U) << 16)) | ((unsigned int)*(addr + 3U) << 24);
  #line 220 
  rar_high = (unsigned int)*(addr + 4U) | ((unsigned int)*(addr + 5U) << 8);
  #line 223 
  if (rar_low != 0U || rar_high != 0U) 
                                       #line 224 
                                       rar_high |= 2147483648U;
  #line 230 
  ;
  #line 230 
  if (index <= 15U) 
                    #line 230 
                    tmp = (index + 2688U) * 8U; else 
                                                     #line 230 
                                                     tmp = (index + 2700U) * 8U;
  #line 230 
  ;
  #line 230 
  __ew32(hw,(unsigned long)tmp,rar_low);
  #line 231 
  __er32(hw,8UL);
  #line 232 
  ;
  #line 232 
  if (index <= 15U) 
                    #line 232 
                    tmp_0 = index * 8U + 21508U; else 
                                                      #line 232 
                                                      tmp_0 = (index + 4294967280U) * 8U + 21732U;
  #line 232 
  ;
  #line 232 
  __ew32(hw,(unsigned long)tmp_0,rar_high);
  #line 233 
  __er32(hw,8UL);
  #line 235 
  return 0;
}

#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
static u32 e1000_hash_mc_addr(struct e1000_hw *hw, u8 *mc_addr)
{
  #line 248 
  u32 hash_value;
  #line 248 
  u32 hash_mask;
  #line 249 
  u8 bit_shift = (unsigned char)0U;
  #line 252 
  hash_mask = (unsigned int)((int)hw->mac.mta_reg_count * 32 + -1);
  #line 257 
  while (hash_mask >> (int)bit_shift != 255U) 
                                              #line 258 
                                              bit_shift = (u8)((int)bit_shift + 1);
  #line 285 
  switch (hw->mac.mc_filter_type) {
    #line 286 
    default: 
             #line 286 
    ;
    #line 287 
    case (u32)0: 
                 #line 287 
    ;
    #line 288 
    break;
    #line 289 
    case (u32)1: 
                 #line 289 
    ;
    #line 290 
    bit_shift = (unsigned char)((unsigned int)bit_shift + 1U);
    #line 291 
    break;
    #line 292 
    case (u32)2: 
                 #line 292 
    ;
    #line 293 
    bit_shift = (unsigned char)((unsigned int)bit_shift + 2U);
    #line 294 
    break;
    #line 295 
    case (u32)3: 
                 #line 295 
    ;
    #line 296 
    bit_shift = (unsigned char)((unsigned int)bit_shift + 4U);
    #line 297 
    break;
  }
  #line 300 
  hash_value = (unsigned int)(((int)*(mc_addr + 4U) >> (8 - (int)bit_shift)) | ((int)*(mc_addr + 5U) << (int)bit_shift)) & hash_mask;
  #line 303 
  return hash_value;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_update_mc_addr_list_generic(struct e1000_hw *hw, u8 *mc_addr_list, u32 mc_addr_count)
{
  #line 318 
  u32 hash_value;
  #line 318 
  u32 hash_bit;
  #line 318 
  u32 hash_reg;
  #line 319 
  int i;
  #line 322 
  memset((void *)(& hw->mac.mta_shadow),0,512UL);
  #line 325 
  i = 0;
  #line 325 
  while ((unsigned int)i < mc_addr_count) {
    #line 326 
    hash_value = e1000_hash_mc_addr(hw,mc_addr_list);
    #line 328 
    hash_reg = (hash_value >> 5) & (unsigned int)((int)hw->mac.mta_reg_count + -1);
    #line 329 
    hash_bit = hash_value & 31U;
    #line 331 
    hw->mac.mta_shadow[hash_reg] |= (unsigned int)(1UL << hash_bit);
    #line 332 
    mc_addr_list += 6U;
    #line 325 
    i ++;
  }
  #line 336 
  i = (int)hw->mac.mta_reg_count + -1;
  #line 336 
  while (i >= 0) {
    #line 337 
    __ew32(hw,(unsigned long)((i << 2) + 20992),hw->mac.mta_shadow[i]);
    #line 336 
    i --;
  }
  #line 338 
  __er32(hw,8UL);
  #line 339 
  return;
}

#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_clear_hw_cntrs_base(struct e1000_hw *hw)
{
  #line 349 
  __er32(hw,16384UL);
  #line 350 
  __er32(hw,16392UL);
  #line 351 
  __er32(hw,16400UL);
  #line 352 
  __er32(hw,16404UL);
  #line 353 
  __er32(hw,16408UL);
  #line 354 
  __er32(hw,16412UL);
  #line 355 
  __er32(hw,16416UL);
  #line 356 
  __er32(hw,16424UL);
  #line 357 
  __er32(hw,16432UL);
  #line 358 
  __er32(hw,16440UL);
  #line 359 
  __er32(hw,16448UL);
  #line 360 
  __er32(hw,16456UL);
  #line 361 
  __er32(hw,16460UL);
  #line 362 
  __er32(hw,16464UL);
  #line 363 
  __er32(hw,16468UL);
  #line 364 
  __er32(hw,16472UL);
  #line 365 
  __er32(hw,16500UL);
  #line 366 
  __er32(hw,16504UL);
  #line 367 
  __er32(hw,16508UL);
  #line 368 
  __er32(hw,16512UL);
  #line 369 
  __er32(hw,16520UL);
  #line 370 
  __er32(hw,16524UL);
  #line 371 
  __er32(hw,16528UL);
  #line 372 
  __er32(hw,16532UL);
  #line 373 
  __er32(hw,16544UL);
  #line 374 
  __er32(hw,16548UL);
  #line 375 
  __er32(hw,16552UL);
  #line 376 
  __er32(hw,16556UL);
  #line 377 
  __er32(hw,16560UL);
  #line 378 
  __er32(hw,16576UL);
  #line 379 
  __er32(hw,16580UL);
  #line 380 
  __er32(hw,16584UL);
  #line 381 
  __er32(hw,16588UL);
  #line 382 
  __er32(hw,16592UL);
  #line 383 
  __er32(hw,16596UL);
  #line 384 
  __er32(hw,16624UL);
  #line 385 
  __er32(hw,16628UL);
  #line 386 
  return;
}

#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_check_for_copper_link(struct e1000_hw *hw)
{
  #line 399 
  s32 ret_val;
  #line 400 
  bool link;
  #line 398 
  struct e1000_mac_info *mac = & hw->mac;
  #line 407 
  if (! mac->get_link_status) 
                              #line 408 
                              return 0;
  #line 409 
  mac->get_link_status = (_Bool)0;
  #line 415 
  ret_val = e1000e_phy_has_link_generic(hw,1U,0U,& link);
  #line 416 
  if (ret_val != 0 || ! link) 
                              #line 417 
                              goto out;
  #line 422 
  e1000e_check_downshift(hw);
  #line 427 
  if (! mac->autoneg) 
                      #line 428 
                      return -3;
  #line 434 
  (*(mac->ops.config_collision_dist))(hw);
  #line 441 
  ret_val = e1000e_config_fc_after_link_up(hw);
  #line 442 
  if (ret_val != 0) {
    #line 443 
    bool branch;
    #line 443 
    struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_check_for_copper_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Error configuring flow control\n", .lineno = (unsigned int)443U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 443 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
    #line 443 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 443 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,(hw->adapter)->netdev,(char *)"Error configuring flow control\n");
  }
  #line 445 
  return ret_val;
  #line 447 
  out: 
       #line 447 
  ;
  #line 448 
  mac->get_link_status = (_Bool)1;
  #line 449 
  return ret_val;
}

#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_check_for_fiber_link(struct e1000_hw *hw)
{
  #line 462 
  u32 rxcw;
  #line 463 
  u32 ctrl;
  #line 464 
  u32 status;
  #line 465 
  s32 ret_val;
  #line 461 
  struct e1000_mac_info *mac = & hw->mac;
  #line 467 
  ctrl = __er32(hw,0UL);
  #line 468 
  status = __er32(hw,8UL);
  #line 469 
  rxcw = __er32(hw,384UL);
  #line 479 
  if (((ctrl & 524288U) != 0U && (status & 2U) == 0U) && (rxcw & 536870912U) == 0U) {
    #line 481 
    if (! mac->autoneg_failed) {
      #line 482 
      mac->autoneg_failed = (_Bool)1;
      #line 483 
      return 0;
    }
    {
      #line 485 
      bool branch;
      #line 485 
      struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_check_for_fiber_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"NOT Rx\'ing /C/, disable AutoNeg and force link.\n", .lineno = (unsigned int)485U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 485 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
      #line 485 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 485 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,(hw->adapter)->netdev,(char *)"NOT Rx\'ing /C/, disable AutoNeg and force link.\n");
    }
    #line 488 
    __ew32(hw,376UL,mac->txcw & 2147483647U);
    #line 491 
    ctrl = __er32(hw,0UL);
    #line 492 
    ctrl |= 65U;
    #line 493 
    __ew32(hw,0UL,ctrl);
    #line 496 
    ret_val = e1000e_config_fc_after_link_up(hw);
    #line 497 
    if (ret_val != 0) {
      {
        #line 498 
        bool branch_0;
        #line 498 
        struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_check_for_fiber_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Error configuring flow control\n", .lineno = (unsigned int)498U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 498 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
        #line 498 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 498 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,(hw->adapter)->netdev,(char *)"Error configuring flow control\n");
      }
      #line 499 
      return ret_val;
    }
  }
  else 
    #line 501 
    if ((ctrl & 64U) != 0U && (rxcw & 536870912U) != 0U) {
      {
        #line 507 
        bool branch_1;
        #line 507 
        struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_check_for_fiber_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Rx\'ing /C/, enable AutoNeg and stop forcing link.\n", .lineno = (unsigned int)507U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 507 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
        #line 507 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 507 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,(hw->adapter)->netdev,(char *)"Rx\'ing /C/, enable AutoNeg and stop forcing link.\n");
      }
      #line 508 
      __ew32(hw,376UL,mac->txcw);
      #line 509 
      __ew32(hw,0UL,ctrl & 4294967231U);
      #line 511 
      mac->serdes_has_link = (_Bool)1;
    }
  #line 514 
  return 0;
}

#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_check_for_serdes_link(struct e1000_hw *hw)
{
  #line 527 
  u32 rxcw;
  #line 528 
  u32 ctrl;
  #line 529 
  u32 status;
  #line 530 
  s32 ret_val;
  #line 526 
  struct e1000_mac_info *mac = & hw->mac;
  #line 532 
  ctrl = __er32(hw,0UL);
  #line 533 
  status = __er32(hw,8UL);
  #line 534 
  rxcw = __er32(hw,384UL);
  #line 543 
  if ((status & 2U) == 0U && (rxcw & 536870912U) == 0U) {
    #line 544 
    if (! mac->autoneg_failed) {
      #line 545 
      mac->autoneg_failed = (_Bool)1;
      #line 546 
      return 0;
    }
    {
      #line 548 
      bool branch;
      #line 548 
      struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_check_for_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"NOT Rx\'ing /C/, disable AutoNeg and force link.\n", .lineno = (unsigned int)548U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 548 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
      #line 548 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 548 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,(hw->adapter)->netdev,(char *)"NOT Rx\'ing /C/, disable AutoNeg and force link.\n");
    }
    #line 551 
    __ew32(hw,376UL,mac->txcw & 2147483647U);
    #line 554 
    ctrl = __er32(hw,0UL);
    #line 555 
    ctrl |= 65U;
    #line 556 
    __ew32(hw,0UL,ctrl);
    #line 559 
    ret_val = e1000e_config_fc_after_link_up(hw);
    #line 560 
    if (ret_val != 0) {
      {
        #line 561 
        bool branch_0;
        #line 561 
        struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_check_for_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Error configuring flow control\n", .lineno = (unsigned int)561U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 561 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
        #line 561 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 561 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,(hw->adapter)->netdev,(char *)"Error configuring flow control\n");
      }
      #line 562 
      return ret_val;
    }
  }
  else 
    #line 564 
    if ((ctrl & 64U) != 0U && (rxcw & 536870912U) != 0U) {
      {
        #line 570 
        bool branch_1;
        #line 570 
        struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_check_for_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Rx\'ing /C/, enable AutoNeg and stop forcing link.\n", .lineno = (unsigned int)570U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 570 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
        #line 570 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 570 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,(hw->adapter)->netdev,(char *)"Rx\'ing /C/, enable AutoNeg and stop forcing link.\n");
      }
      #line 571 
      __ew32(hw,376UL,mac->txcw);
      #line 572 
      __ew32(hw,0UL,ctrl & 4294967231U);
      #line 574 
      mac->serdes_has_link = (_Bool)1;
    }
    else {
      #line 575 
      if ((__er32(hw,376UL) & 2147483648U) == 0U) {
        #line 581 
        usleep_range(10UL,20UL);
        #line 582 
        rxcw = __er32(hw,384UL);
        #line 583 
        if ((rxcw & 1073741824U) != 0U) {
          #line 584 
          if ((rxcw & 134217728U) == 0U) {
            #line 585 
            mac->serdes_has_link = (_Bool)1;
            {
              #line 586 
              bool branch_2;
              #line 586 
              struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_check_for_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"SERDES: Link up - forced.\n", .lineno = (unsigned int)586U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 586 
              branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
              #line 586 
              if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                            #line 586 
                                                            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,(hw->adapter)->netdev,(char *)"SERDES: Link up - forced.\n");
            }
          }
        }
        else {
          #line 589 
          mac->serdes_has_link = (_Bool)0;
          {
            #line 590 
            bool branch_3;
            #line 590 
            struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_check_for_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"SERDES: Link down - force failed.\n", .lineno = (unsigned int)590U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 590 
            branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
            #line 590 
            if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                          #line 590 
                                                          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,(hw->adapter)->netdev,(char *)"SERDES: Link down - force failed.\n");
          }
        }
      }
    }
  #line 594 
  if ((__er32(hw,376UL) & 2147483648U) != 0U) {
    #line 595 
    status = __er32(hw,8UL);
    #line 596 
    if ((status & 2U) != 0U) {
      #line 598 
      usleep_range(10UL,20UL);
      #line 599 
      rxcw = __er32(hw,384UL);
      #line 600 
      if ((rxcw & 1073741824U) != 0U) 
        #line 601 
        if ((rxcw & 134217728U) == 0U) {
          #line 602 
          mac->serdes_has_link = (_Bool)1;
          {
            #line 603 
            bool branch_4;
            #line 603 
            struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_check_for_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"SERDES: Link up - autoneg completed successfully.\n", .lineno = (unsigned int)603U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 603 
            branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
            #line 603 
            if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                          #line 603 
                                                          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug455,(hw->adapter)->netdev,(char *)"SERDES: Link up - autoneg completed successfully.\n");
          }
        }
        else {
          #line 605 
          mac->serdes_has_link = (_Bool)0;
          {
            #line 606 
            bool branch_5;
            #line 606 
            struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_check_for_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"SERDES: Link down - invalid codewords detected in autoneg.\n", .lineno = (unsigned int)606U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 606 
            branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
            #line 606 
            if ((long)((long)((int)branch_5 != 0)) != 0L) 
                                                          #line 606 
                                                          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug456,(hw->adapter)->netdev,(char *)"SERDES: Link down - invalid codewords detected in autoneg.\n");
          }
        }
      else {
        #line 609 
        mac->serdes_has_link = (_Bool)0;
        {
          #line 610 
          bool branch_6;
          #line 610 
          struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_check_for_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"SERDES: Link down - no sync.\n", .lineno = (unsigned int)610U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 610 
          branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
          #line 610 
          if ((long)((long)((int)branch_6 != 0)) != 0L) 
                                                        #line 610 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,(hw->adapter)->netdev,(char *)"SERDES: Link down - no sync.\n");
        }
      }
    }
    else {
      #line 613 
      mac->serdes_has_link = (_Bool)0;
      {
        #line 614 
        bool branch_7;
        #line 614 
        struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_check_for_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"SERDES: Link down - autoneg failed\n", .lineno = (unsigned int)614U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 614 
        branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
        #line 614 
        if ((long)((long)((int)branch_7 != 0)) != 0L) 
                                                      #line 614 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug458,(hw->adapter)->netdev,(char *)"SERDES: Link down - autoneg failed\n");
      }
    }
  }
  #line 618 
  return 0;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
static s32 e1000_set_default_fc_generic(struct e1000_hw *hw)
{
  #line 630 
  s32 ret_val;
  #line 631 
  u16 nvm_data;
  #line 641 
  ret_val = e1000_read_nvm(hw,(unsigned short)15,(unsigned short)1,& nvm_data);
  #line 643 
  if (ret_val != 0) {
    {
      #line 644 
      bool branch;
      #line 644 
      struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"e1000e", .function = (char *)"e1000_set_default_fc_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)644U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 644 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
      #line 644 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 644 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug459,(hw->adapter)->netdev,(char *)"NVM Read Error\n");
    }
    #line 645 
    return ret_val;
  }
  #line 648 
  if (((int)nvm_data & 12288) == 0) 
                                    #line 649 
                                    hw->fc.requested_mode = e1000_fc_none;
  else 
    #line 650 
    if (((int)nvm_data & 12288) == 8192) 
                                         #line 651 
                                         hw->fc.requested_mode = e1000_fc_tx_pause; else 
                                                                    #line 653 
                                                                    hw->fc.requested_mode = e1000_fc_full;
  #line 655 
  return 0;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_setup_link_generic(struct e1000_hw *hw)
{
  #line 670 
  s32 ret_val;
  #line 675 
  if (hw->phy.ops.check_reset_block != (s32 (*)(struct e1000_hw *))0) {
    #line 675 
    if ((*(hw->phy.ops.check_reset_block))(hw) != 0) 
                                                     #line 676 
                                                     return 0;
  }
  #line 681 
  if (hw->fc.requested_mode == (unsigned int)e1000_fc_default) {
    #line 682 
    ret_val = e1000_set_default_fc_generic(hw);
    #line 683 
    if (ret_val != 0) 
                      #line 684 
                      return ret_val;
  }
  #line 690 
  hw->fc.current_mode = hw->fc.requested_mode;
  {
    #line 692 
    bool branch;
    #line 692 
    struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_setup_link_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"After fix-ups FlowControl is now = %x\n", .lineno = (unsigned int)692U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 692 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
    #line 692 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 692 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug460,(hw->adapter)->netdev,(char *)"After fix-ups FlowControl is now = %x\n",(unsigned int)hw->fc.current_mode);
  }
  #line 695 
  ret_val = (*(hw->mac.ops.setup_physical_interface))(hw);
  #line 696 
  if (ret_val != 0) 
                    #line 697 
                    return ret_val;
  {
    #line 704 
    bool branch_0;
    #line 704 
    struct _ddebug __UNIQUE_ID_ddebug461 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_setup_link_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Initializing the Flow Control address, type and timer regs\n", .lineno = (unsigned int)704U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 704 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug461.key.dd_key_false.key,(_Bool)0);
    #line 704 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 704 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug461,(hw->adapter)->netdev,(char *)"Initializing the Flow Control address, type and timer regs\n");
  }
  #line 705 
  __ew32(hw,48UL,34824U);
  #line 706 
  __ew32(hw,44UL,256U);
  #line 707 
  __ew32(hw,40UL,12746753U);
  #line 709 
  __ew32(hw,368UL,(unsigned int)hw->fc.pause_time);
  #line 711 
  return e1000e_set_fc_watermarks(hw);
}

#line 721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
static s32 e1000_commit_fc_settings_generic(struct e1000_hw *hw)
{
  #line 724 
  u32 txcw;
  #line 723 
  struct e1000_mac_info *mac = & hw->mac;
  #line 742 
  switch ((unsigned int)hw->fc.current_mode) {
    #line 743 
    case (unsigned int)0: 
                          #line 743 
    ;
    #line 745 
    txcw = 2147483680U;
    #line 746 
    break;
    #line 747 
    case (unsigned int)1: 
                          #line 747 
    ;
    #line 755 
    txcw = 2147484064U;
    #line 756 
    break;
    #line 757 
    case (unsigned int)2: 
                          #line 757 
    ;
    #line 761 
    txcw = 2147483936U;
    #line 762 
    break;
    #line 763 
    case (unsigned int)3: 
                          #line 763 
    ;
    #line 767 
    txcw = 2147484064U;
    #line 768 
    break;
    #line 769 
    default: 
             #line 769 
    ;
    {
      #line 770 
      bool branch;
      #line 770 
      struct _ddebug __UNIQUE_ID_ddebug462 = {.modname = (char *)"e1000e", .function = (char *)"e1000_commit_fc_settings_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Flow control param set incorrectly\n", .lineno = (unsigned int)770U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 770 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug462.key.dd_key_false.key,(_Bool)0);
      #line 770 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 770 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug462,(hw->adapter)->netdev,(char *)"Flow control param set incorrectly\n");
    }
    #line 771 
    return -3;
  }
  #line 774 
  __ew32(hw,376UL,txcw);
  #line 775 
  mac->txcw = txcw;
  #line 777 
  return 0;
}

#line 787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
static s32 e1000_poll_fiber_serdes_link_generic(struct e1000_hw *hw)
{
  #line 790 
  u32 i;
  #line 790 
  u32 status;
  #line 791 
  s32 ret_val;
  #line 789 
  struct e1000_mac_info *mac = & hw->mac;
  #line 799 
  i = 0U;
  #line 799 
  while (i <= 49U) {
    #line 800 
    usleep_range(10000UL,11000UL);
    #line 801 
    status = __er32(hw,8UL);
    #line 802 
    if ((status & 2U) != 0U) 
                             #line 803 
                             break;
    #line 799 
    i ++;
  }
  #line 805 
  if (i == 50U) {
    {
      #line 806 
      bool branch;
      #line 806 
      struct _ddebug __UNIQUE_ID_ddebug463 = {.modname = (char *)"e1000e", .function = (char *)"e1000_poll_fiber_serdes_link_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Never got a valid link from auto-neg!!!\n", .lineno = (unsigned int)806U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 806 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug463.key.dd_key_false.key,(_Bool)0);
      #line 806 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 806 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug463,(hw->adapter)->netdev,(char *)"Never got a valid link from auto-neg!!!\n");
    }
    #line 807 
    mac->autoneg_failed = (_Bool)1;
    #line 813 
    ret_val = (*(mac->ops.check_for_link))(hw);
    #line 814 
    if (ret_val != 0) {
      {
        #line 815 
        bool branch_0;
        #line 815 
        struct _ddebug __UNIQUE_ID_ddebug464 = {.modname = (char *)"e1000e", .function = (char *)"e1000_poll_fiber_serdes_link_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Error while checking for link\n", .lineno = (unsigned int)815U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 815 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug464.key.dd_key_false.key,(_Bool)0);
        #line 815 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 815 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug464,(hw->adapter)->netdev,(char *)"Error while checking for link\n");
      }
      #line 816 
      return ret_val;
    }
    #line 818 
    mac->autoneg_failed = (_Bool)0;
  }
  else {
    #line 820 
    mac->autoneg_failed = (_Bool)0;
    {
      #line 821 
      bool branch_1;
      #line 821 
      struct _ddebug __UNIQUE_ID_ddebug465 = {.modname = (char *)"e1000e", .function = (char *)"e1000_poll_fiber_serdes_link_generic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Valid Link Found\n", .lineno = (unsigned int)821U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 821 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug465.key.dd_key_false.key,(_Bool)0);
      #line 821 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 821 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug465,(hw->adapter)->netdev,(char *)"Valid Link Found\n");
    }
  }
  #line 824 
  return 0;
}

#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_setup_fiber_serdes_link(struct e1000_hw *hw)
{
  #line 836 
  u32 ctrl;
  #line 837 
  s32 ret_val;
  #line 839 
  ctrl = __er32(hw,0UL);
  #line 842 
  ctrl &= 4294967287U;
  #line 844 
  (*(hw->mac.ops.config_collision_dist))(hw);
  #line 846 
  ret_val = e1000_commit_fc_settings_generic(hw);
  #line 847 
  if (ret_val != 0) 
                    #line 848 
                    return ret_val;
  {
    #line 856 
    bool branch;
    #line 856 
    struct _ddebug __UNIQUE_ID_ddebug466 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_setup_fiber_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Auto-negotiation enabled\n", .lineno = (unsigned int)856U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 856 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug466.key.dd_key_false.key,(_Bool)0);
    #line 856 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 856 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug466,(hw->adapter)->netdev,(char *)"Auto-negotiation enabled\n");
  }
  #line 858 
  __ew32(hw,0UL,ctrl);
  #line 859 
  __er32(hw,8UL);
  #line 860 
  usleep_range(1000UL,2000UL);
  #line 866 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes) 
    #line 866 
    goto _LOR;
  else {
    #line 866 
    if ((__er32(hw,0UL) & 524288U) != 0U) 
                                          #line 866 
                                          _LOR: 
                                                #line 868 
                                                ret_val = e1000_poll_fiber_serdes_link_generic(hw);
    else {
      #line 870 
      bool branch_0;
      #line 870 
      struct _ddebug __UNIQUE_ID_ddebug467 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_setup_fiber_serdes_link", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"No signal detected\n", .lineno = (unsigned int)870U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 870 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug467.key.dd_key_false.key,(_Bool)0);
      #line 870 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 870 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug467,(hw->adapter)->netdev,(char *)"No signal detected\n");
    }
  }
  #line 873 
  return ret_val;
}

#line 883  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_config_collision_dist_generic(struct e1000_hw *hw)
{
  #line 885 
  u32 tctl;
  #line 887 
  tctl = __er32(hw,1024UL);
  #line 889 
  tctl &= 4290777087U;
  #line 890 
  tctl |= 258048U;
  #line 892 
  __ew32(hw,1024UL,tctl);
  #line 893 
  __er32(hw,8UL);
  #line 894 
  return;
}

#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_set_fc_watermarks(struct e1000_hw *hw)
{
  #line 906 
  u32 fcrtl = 0U;
  #line 906 
  u32 fcrth = 0U;
  #line 914 
  if (((unsigned int)hw->fc.current_mode & 2U) != 0U) {
    #line 919 
    fcrtl = hw->fc.low_water;
    #line 920 
    if ((int)hw->fc.send_xon != 0) 
                                   #line 921 
                                   fcrtl |= 2147483648U;
    #line 923 
    fcrth = hw->fc.high_water;
  }
  #line 925 
  __ew32(hw,8544UL,fcrtl);
  #line 926 
  __ew32(hw,8552UL,fcrth);
  #line 928 
  return 0;
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_force_mac_fc(struct e1000_hw *hw)
{
  #line 943 
  u32 ctrl;
  #line 945 
  ctrl = __er32(hw,0UL);
  {
    #line 964 
    bool branch;
    #line 964 
    struct _ddebug __UNIQUE_ID_ddebug468 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_force_mac_fc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"hw->fc.current_mode = %u\n", .lineno = (unsigned int)964U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 964 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug468.key.dd_key_false.key,(_Bool)0);
    #line 964 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 964 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug468,(hw->adapter)->netdev,(char *)"hw->fc.current_mode = %u\n",(unsigned int)hw->fc.current_mode);
  }
  #line 966 
  switch ((unsigned int)hw->fc.current_mode) {
    #line 967 
    case (unsigned int)0: 
                          #line 967 
    ;
    #line 968 
    ctrl &= 3892314111U;
    #line 969 
    break;
    #line 970 
    case (unsigned int)1: 
                          #line 970 
    ;
    #line 971 
    ctrl &= 4026531839U;
    #line 972 
    ctrl |= 134217728U;
    #line 973 
    break;
    #line 974 
    case (unsigned int)2: 
                          #line 974 
    ;
    #line 975 
    ctrl &= 4160749567U;
    #line 976 
    ctrl |= 268435456U;
    #line 977 
    break;
    #line 978 
    case (unsigned int)3: 
                          #line 978 
    ;
    #line 979 
    ctrl |= 402653184U;
    #line 980 
    break;
    #line 981 
    default: 
             #line 981 
    ;
    {
      #line 982 
      bool branch_0;
      #line 982 
      struct _ddebug __UNIQUE_ID_ddebug469 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_force_mac_fc", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Flow control param set incorrectly\n", .lineno = (unsigned int)982U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 982 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug469.key.dd_key_false.key,(_Bool)0);
      #line 982 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 982 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug469,(hw->adapter)->netdev,(char *)"Flow control param set incorrectly\n");
    }
    #line 983 
    return -3;
  }
  #line 986 
  __ew32(hw,0UL,ctrl);
  #line 988 
  return 0;
}

#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_config_fc_after_link_up(struct e1000_hw *hw)
{
  #line 1005 
  u32 pcs_status_reg;
  #line 1005 
  u32 pcs_adv_reg;
  #line 1005 
  u32 pcs_lp_ability_reg;
  #line 1005 
  u32 pcs_ctrl_reg;
  #line 1006 
  u16 mii_status_reg;
  #line 1006 
  u16 mii_nway_adv_reg;
  #line 1006 
  u16 mii_nway_lp_ability_reg;
  #line 1007 
  u16 speed;
  #line 1007 
  u16 duplex;
  #line 1003 
  struct e1000_mac_info *mac = & hw->mac;
  #line 1004 
  s32 ret_val = 0;
  #line 1013 
  if ((int)mac->autoneg_failed != 0) {
    #line 1014 
    if ((unsigned int)hw->phy.media_type + 4294967294U <= 1U) 
                                                              #line 1016 
                                                              ret_val = e1000e_force_mac_fc(hw);
  }
  else 
    #line 1018 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) 
      #line 1019 
      ret_val = e1000e_force_mac_fc(hw);
  #line 1022 
  if (ret_val != 0) {
    {
      #line 1023 
      bool branch;
      #line 1023 
      struct _ddebug __UNIQUE_ID_ddebug470 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Error forcing flow control settings\n", .lineno = (unsigned int)1023U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1023 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug470.key.dd_key_false.key,(_Bool)0);
      #line 1023 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1023 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug470,(hw->adapter)->netdev,(char *)"Error forcing flow control settings\n");
    }
    #line 1024 
    return ret_val;
  }
  #line 1032 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper && (int)mac->autoneg != 0) {
    #line 1037 
    ret_val = e1e_rphy(hw,1U,& mii_status_reg);
    #line 1038 
    if (ret_val != 0) 
                      #line 1039 
                      return ret_val;
    #line 1040 
    ret_val = e1e_rphy(hw,1U,& mii_status_reg);
    #line 1041 
    if (ret_val != 0) 
                      #line 1042 
                      return ret_val;
    #line 1044 
    if (((int)mii_status_reg & 32) == 0) {
      {
        #line 1045 
        bool branch_0;
        #line 1045 
        struct _ddebug __UNIQUE_ID_ddebug471 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Copper PHY and Auto Neg has not completed.\n", .lineno = (unsigned int)1045U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1045 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug471.key.dd_key_false.key,(_Bool)0);
        #line 1045 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 1045 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug471,(hw->adapter)->netdev,(char *)"Copper PHY and Auto Neg has not completed.\n");
      }
      #line 1046 
      return ret_val;
    }
    #line 1055 
    ret_val = e1e_rphy(hw,4U,& mii_nway_adv_reg);
    #line 1056 
    if (ret_val != 0) 
                      #line 1057 
                      return ret_val;
    #line 1058 
    ret_val = e1e_rphy(hw,5U,& mii_nway_lp_ability_reg);
    #line 1059 
    if (ret_val != 0) 
                      #line 1060 
                      return ret_val;
    #line 1095 
    if (((int)mii_nway_adv_reg & 1024) != 0 && ((int)mii_nway_lp_ability_reg & 1024) != 0) 
      #line 1103 
      if (hw->fc.requested_mode == (unsigned int)e1000_fc_full) {
        #line 1104 
        hw->fc.current_mode = e1000_fc_full;
        {
          #line 1105 
          bool branch_1;
          #line 1105 
          struct _ddebug __UNIQUE_ID_ddebug472 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Flow Control = FULL.\n", .lineno = (unsigned int)1105U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1105 
          branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug472.key.dd_key_false.key,(_Bool)0);
          #line 1105 
          if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                        #line 1105 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug472,(hw->adapter)->netdev,(char *)"Flow Control = FULL.\n");
        }
      }
      else {
        #line 1107 
        hw->fc.current_mode = e1000_fc_rx_pause;
        {
          #line 1108 
          bool branch_2;
          #line 1108 
          struct _ddebug __UNIQUE_ID_ddebug473 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Flow Control = Rx PAUSE frames only.\n", .lineno = (unsigned int)1108U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1108 
          branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug473.key.dd_key_false.key,(_Bool)0);
          #line 1108 
          if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                        #line 1108 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug473,(hw->adapter)->netdev,(char *)"Flow Control = Rx PAUSE frames only.\n");
        }
      }
    else 
      #line 1118 
      if (((((int)mii_nway_adv_reg & 1024) == 0 && ((int)mii_nway_adv_reg & 2048) != 0) && ((int)mii_nway_lp_ability_reg & 1024) != 0) && ((int)mii_nway_lp_ability_reg & 2048) != 0) {
        #line 1122 
        hw->fc.current_mode = e1000_fc_tx_pause;
        {
          #line 1123 
          bool branch_3;
          #line 1123 
          struct _ddebug __UNIQUE_ID_ddebug474 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Flow Control = Tx PAUSE frames only.\n", .lineno = (unsigned int)1123U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1123 
          branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug474.key.dd_key_false.key,(_Bool)0);
          #line 1123 
          if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                        #line 1123 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug474,(hw->adapter)->netdev,(char *)"Flow Control = Tx PAUSE frames only.\n");
        }
      }
      else 
        #line 1132 
        if (((((int)mii_nway_adv_reg & 1024) != 0 && ((int)mii_nway_adv_reg & 2048) != 0) && ((int)mii_nway_lp_ability_reg & 1024) == 0) && ((int)mii_nway_lp_ability_reg & 2048) != 0) {
          #line 1136 
          hw->fc.current_mode = e1000_fc_rx_pause;
          {
            #line 1137 
            bool branch_4;
            #line 1137 
            struct _ddebug __UNIQUE_ID_ddebug475 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Flow Control = Rx PAUSE frames only.\n", .lineno = (unsigned int)1137U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 1137 
            branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug475.key.dd_key_false.key,(_Bool)0);
            #line 1137 
            if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                          #line 1137 
                                                          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug475,(hw->adapter)->netdev,(char *)"Flow Control = Rx PAUSE frames only.\n");
          }
        }
        else {
          #line 1142 
          hw->fc.current_mode = e1000_fc_none;
          {
            #line 1143 
            bool branch_5;
            #line 1143 
            struct _ddebug __UNIQUE_ID_ddebug476 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Flow Control = NONE.\n", .lineno = (unsigned int)1143U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 1143 
            branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug476.key.dd_key_false.key,(_Bool)0);
            #line 1143 
            if ((long)((long)((int)branch_5 != 0)) != 0L) 
                                                          #line 1143 
                                                          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug476,(hw->adapter)->netdev,(char *)"Flow Control = NONE.\n");
          }
        }
    #line 1150 
    ret_val = (*(mac->ops.get_link_up_info))(hw,& speed,& duplex);
    #line 1151 
    if (ret_val != 0) {
      {
        #line 1152 
        bool branch_6;
        #line 1152 
        struct _ddebug __UNIQUE_ID_ddebug477 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Error getting link speed and duplex\n", .lineno = (unsigned int)1152U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1152 
        branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug477.key.dd_key_false.key,(_Bool)0);
        #line 1152 
        if ((long)((long)((int)branch_6 != 0)) != 0L) 
                                                      #line 1152 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug477,(hw->adapter)->netdev,(char *)"Error getting link speed and duplex\n");
      }
      #line 1153 
      return ret_val;
    }
    #line 1156 
    if ((unsigned int)duplex == 1U) 
                                    #line 1157 
                                    hw->fc.current_mode = e1000_fc_none;
    #line 1162 
    ret_val = e1000e_force_mac_fc(hw);
    #line 1163 
    if (ret_val != 0) {
      {
        #line 1164 
        bool branch_7;
        #line 1164 
        struct _ddebug __UNIQUE_ID_ddebug478 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Error forcing flow control settings\n", .lineno = (unsigned int)1164U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1164 
        branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug478.key.dd_key_false.key,(_Bool)0);
        #line 1164 
        if ((long)((long)((int)branch_7 != 0)) != 0L) 
                                                      #line 1164 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug478,(hw->adapter)->netdev,(char *)"Error forcing flow control settings\n");
      }
      #line 1165 
      return ret_val;
    }
  }
  #line 1174 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes && (int)mac->autoneg != 0) {
    #line 1179 
    pcs_status_reg = __er32(hw,16908UL);
    #line 1181 
    if ((pcs_status_reg & 65536U) == 0U) {
      {
        #line 1182 
        bool branch_8;
        #line 1182 
        struct _ddebug __UNIQUE_ID_ddebug479 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"PCS Auto Neg has not completed.\n", .lineno = (unsigned int)1182U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1182 
        branch_8 = arch_static_branch(& __UNIQUE_ID_ddebug479.key.dd_key_false.key,(_Bool)0);
        #line 1182 
        if ((long)((long)((int)branch_8 != 0)) != 0L) 
                                                      #line 1182 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug479,(hw->adapter)->netdev,(char *)"PCS Auto Neg has not completed.\n");
      }
      #line 1183 
      return ret_val;
    }
    #line 1192 
    pcs_adv_reg = __er32(hw,16920UL);
    #line 1193 
    pcs_lp_ability_reg = __er32(hw,16924UL);
    #line 1228 
    if ((pcs_adv_reg & 128U) != 0U && (pcs_lp_ability_reg & 128U) != 0U) 
      #line 1236 
      if (hw->fc.requested_mode == (unsigned int)e1000_fc_full) {
        #line 1237 
        hw->fc.current_mode = e1000_fc_full;
        {
          #line 1238 
          bool branch_9;
          #line 1238 
          struct _ddebug __UNIQUE_ID_ddebug480 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Flow Control = FULL.\n", .lineno = (unsigned int)1238U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1238 
          branch_9 = arch_static_branch(& __UNIQUE_ID_ddebug480.key.dd_key_false.key,(_Bool)0);
          #line 1238 
          if ((long)((long)((int)branch_9 != 0)) != 0L) 
                                                        #line 1238 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug480,(hw->adapter)->netdev,(char *)"Flow Control = FULL.\n");
        }
      }
      else {
        #line 1240 
        hw->fc.current_mode = e1000_fc_rx_pause;
        {
          #line 1241 
          bool branch_10;
          #line 1241 
          struct _ddebug __UNIQUE_ID_ddebug481 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Flow Control = Rx PAUSE frames only.\n", .lineno = (unsigned int)1241U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1241 
          branch_10 = arch_static_branch(& __UNIQUE_ID_ddebug481.key.dd_key_false.key,(_Bool)0);
          #line 1241 
          if ((long)((long)((int)branch_10 != 0)) != 0L) 
                                                         #line 1241 
                                                         __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug481,(hw->adapter)->netdev,(char *)"Flow Control = Rx PAUSE frames only.\n");
        }
      }
    else 
      #line 1251 
      if ((((pcs_adv_reg & 128U) == 0U && (pcs_adv_reg & 256U) != 0U) && (pcs_lp_ability_reg & 128U) != 0U) && (pcs_lp_ability_reg & 256U) != 0U) {
        #line 1255 
        hw->fc.current_mode = e1000_fc_tx_pause;
        {
          #line 1256 
          bool branch_11;
          #line 1256 
          struct _ddebug __UNIQUE_ID_ddebug482 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Flow Control = Tx PAUSE frames only.\n", .lineno = (unsigned int)1256U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1256 
          branch_11 = arch_static_branch(& __UNIQUE_ID_ddebug482.key.dd_key_false.key,(_Bool)0);
          #line 1256 
          if ((long)((long)((int)branch_11 != 0)) != 0L) 
                                                         #line 1256 
                                                         __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug482,(hw->adapter)->netdev,(char *)"Flow Control = Tx PAUSE frames only.\n");
        }
      }
      else 
        #line 1265 
        if ((((pcs_adv_reg & 128U) != 0U && (pcs_adv_reg & 256U) != 0U) && (pcs_lp_ability_reg & 128U) == 0U) && (pcs_lp_ability_reg & 256U) != 0U) {
          #line 1269 
          hw->fc.current_mode = e1000_fc_rx_pause;
          {
            #line 1270 
            bool branch_12;
            #line 1270 
            struct _ddebug __UNIQUE_ID_ddebug483 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Flow Control = Rx PAUSE frames only.\n", .lineno = (unsigned int)1270U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 1270 
            branch_12 = arch_static_branch(& __UNIQUE_ID_ddebug483.key.dd_key_false.key,(_Bool)0);
            #line 1270 
            if ((long)((long)((int)branch_12 != 0)) != 0L) 
                                                           #line 1270 
                                                           __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug483,(hw->adapter)->netdev,(char *)"Flow Control = Rx PAUSE frames only.\n");
          }
        }
        else {
          #line 1275 
          hw->fc.current_mode = e1000_fc_none;
          {
            #line 1276 
            bool branch_13;
            #line 1276 
            struct _ddebug __UNIQUE_ID_ddebug484 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Flow Control = NONE.\n", .lineno = (unsigned int)1276U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 1276 
            branch_13 = arch_static_branch(& __UNIQUE_ID_ddebug484.key.dd_key_false.key,(_Bool)0);
            #line 1276 
            if ((long)((long)((int)branch_13 != 0)) != 0L) 
                                                           #line 1276 
                                                           __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug484,(hw->adapter)->netdev,(char *)"Flow Control = NONE.\n");
          }
        }
    #line 1282 
    pcs_ctrl_reg = __er32(hw,16904UL);
    #line 1283 
    pcs_ctrl_reg |= 128U;
    #line 1284 
    __ew32(hw,16904UL,pcs_ctrl_reg);
    #line 1286 
    ret_val = e1000e_force_mac_fc(hw);
    #line 1287 
    if (ret_val != 0) {
      {
        #line 1288 
        bool branch_14;
        #line 1288 
        struct _ddebug __UNIQUE_ID_ddebug485 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_config_fc_after_link_up", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Error forcing flow control settings\n", .lineno = (unsigned int)1288U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1288 
        branch_14 = arch_static_branch(& __UNIQUE_ID_ddebug485.key.dd_key_false.key,(_Bool)0);
        #line 1288 
        if ((long)((long)((int)branch_14 != 0)) != 0L) 
                                                       #line 1288 
                                                       __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug485,(hw->adapter)->netdev,(char *)"Error forcing flow control settings\n");
      }
      #line 1289 
      return ret_val;
    }
  }
  #line 1293 
  return 0;
}

#line 1305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_get_speed_and_duplex_copper(struct e1000_hw *hw, u16 *speed, u16 *duplex)
{
  #line 1308 
  u32 status;
  #line 1310 
  status = __er32(hw,8UL);
  #line 1311 
  if ((status & 128U) != 0U) 
                             #line 1312 
                             *speed = (unsigned short)1000U;
  else 
    #line 1313 
    if ((status & 64U) != 0U) 
                              #line 1314 
                              *speed = (unsigned short)100U; else 
                                                                  #line 1316 
                                                                  *speed = (unsigned short)10U;
  #line 1318 
  if ((status & 1U) != 0U) 
                           #line 1319 
                           *duplex = (unsigned short)2U; else 
                                                              #line 1321 
                                                              *duplex = (unsigned short)1U;
  {
    #line 1323 
    bool branch;
    #line 1323 
    struct _ddebug __UNIQUE_ID_ddebug486 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_get_speed_and_duplex_copper", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"%u Mbps, %s Duplex\n", .lineno = (unsigned int)1323U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1323 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug486.key.dd_key_false.key,(_Bool)0);
    #line 1323 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1323 
      int tmp_0;
      #line 1323 
      char *tmp;
      #line 1323 
      int tmp_1;
      #line 1323 
      if ((unsigned int)*duplex == 2U) 
                                       #line 1323 
                                       tmp = (char *)"Full"; else 
                                                                  #line 1323 
                                                                  tmp = (char *)"Half";
      #line 1323 
      if ((unsigned int)*speed != 1000U) {
        #line 1323 
        if ((unsigned int)*speed == 100U) 
                                          #line 1323 
                                          tmp_0 = 100; else 
                                                            #line 1323 
                                                            tmp_0 = 10;
        #line 1323 
        tmp_1 = tmp_0;
      }
      else 
           #line 1323 
           tmp_1 = 1000;
      #line 1323 
      ;
      #line 1323 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug486,(hw->adapter)->netdev,(char *)"%u Mbps, %s Duplex\n",tmp_1,tmp);
    }
  }
  #line 1327 
  return 0;
}

#line 1339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_get_speed_and_duplex_fiber_serdes(struct e1000_hw *hw, u16 *speed, u16 *duplex)
{
  #line 1342 
  *speed = (unsigned short)1000U;
  #line 1343 
  *duplex = (unsigned short)2U;
  #line 1345 
  return 0;
}

#line 1354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_get_hw_semaphore(struct e1000_hw *hw)
{
  #line 1356 
  u32 swsm;
  #line 1357 
  s32 timeout = (int)hw->nvm.word_size + 1;
  #line 1358 
  s32 i = 0;
  #line 1361 
  while (i < timeout) {
    #line 1362 
    swsm = __er32(hw,23376UL);
    #line 1363 
    if ((swsm & 1U) == 0U) 
                           #line 1364 
                           break;
    #line 1366 
    usleep_range(50UL,100UL);
    #line 1367 
    i ++;
  }
  #line 1370 
  if (i == timeout) {
    {
      #line 1371 
      bool branch;
      #line 1371 
      struct _ddebug __UNIQUE_ID_ddebug487 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_get_hw_semaphore", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Driver can\'t access device - SMBI bit is set.\n", .lineno = (unsigned int)1371U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1371 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug487.key.dd_key_false.key,(_Bool)0);
      #line 1371 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1371 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug487,(hw->adapter)->netdev,(char *)"Driver can\'t access device - SMBI bit is set.\n");
    }
    #line 1372 
    return -1;
  }
  #line 1376 
  i = 0;
  #line 1376 
  while (i < timeout) {
    {
      #line 1377 
      swsm = __er32(hw,23376UL);
      #line 1378 
      __ew32(hw,23376UL,swsm | 2U);
      #line 1381 
      if ((__er32(hw,23376UL) & 2U) != 0U) 
                                           #line 1382 
                                           break;
      #line 1384 
      usleep_range(50UL,100UL);
    }
    #line 1376 
    i ++;
  }
  #line 1387 
  if (i == timeout) {
    #line 1389 
    e1000e_put_hw_semaphore(hw);
    {
      #line 1390 
      bool branch_0;
      #line 1390 
      struct _ddebug __UNIQUE_ID_ddebug488 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_get_hw_semaphore", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Driver can\'t access the NVM\n", .lineno = (unsigned int)1390U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1390 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug488.key.dd_key_false.key,(_Bool)0);
      #line 1390 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1390 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug488,(hw->adapter)->netdev,(char *)"Driver can\'t access the NVM\n");
    }
    #line 1391 
    return -1;
  }
  #line 1394 
  return 0;
}

#line 1403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_put_hw_semaphore(struct e1000_hw *hw)
{
  #line 1405 
  u32 swsm;
  #line 1407 
  swsm = __er32(hw,23376UL);
  #line 1408 
  swsm &= 4294967292U;
  #line 1409 
  __ew32(hw,23376UL,swsm);
  #line 1410 
  return;
}

#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_get_auto_rd_done(struct e1000_hw *hw)
{
  #line 1420 
  s32 i = 0;
  #line 1422 
  while (i <= 9) {
    #line 1423 
    if ((__er32(hw,16UL) & 512U) != 0U) 
                                        #line 1424 
                                        break;
    #line 1425 
    usleep_range(1000UL,2000UL);
    #line 1426 
    i ++;
  }
  #line 1429 
  if (i == 10) {
    {
      #line 1430 
      bool branch;
      #line 1430 
      struct _ddebug __UNIQUE_ID_ddebug489 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_get_auto_rd_done", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Auto read by HW from NVM has not completed.\n", .lineno = (unsigned int)1430U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1430 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug489.key.dd_key_false.key,(_Bool)0);
      #line 1430 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1430 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug489,(hw->adapter)->netdev,(char *)"Auto read by HW from NVM has not completed.\n");
    }
    #line 1431 
    return -9;
  }
  #line 1434 
  return 0;
}

#line 1445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_valid_led_default(struct e1000_hw *hw, u16 *data)
{
  #line 1447 
  s32 ret_val;
  #line 1449 
  ret_val = e1000_read_nvm(hw,(unsigned short)4,(unsigned short)1,data);
  #line 1450 
  if (ret_val != 0) {
    {
      #line 1451 
      bool branch;
      #line 1451 
      struct _ddebug __UNIQUE_ID_ddebug490 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_valid_led_default", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"NVM Read Error\n", .lineno = (unsigned int)1451U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1451 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug490.key.dd_key_false.key,(_Bool)0);
      #line 1451 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1451 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug490,(hw->adapter)->netdev,(char *)"NVM Read Error\n");
    }
    #line 1452 
    return ret_val;
  }
  #line 1455 
  if ((unsigned int)*data + 65535U > 65533U) 
                                             #line 1456 
                                             *data = (unsigned short)35089U;
  #line 1458 
  return 0;
}

#line 1466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_id_led_init_generic(struct e1000_hw *hw)
{
  #line 1469 
  s32 ret_val;
  #line 1473 
  u16 data;
  #line 1473 
  u16 i;
  #line 1473 
  u16 temp;
  #line 1468 
  struct e1000_mac_info *mac = & hw->mac;
  #line 1470 
  u32 ledctl_mask = 255U;
  #line 1471 
  u32 ledctl_on = 14U;
  #line 1472 
  u32 ledctl_off = 15U;
  #line 1474 
  u16 led_mask = (unsigned short)15U;
  #line 1476 
  ret_val = (*(hw->nvm.ops.valid_led_default))(hw,& data);
  #line 1477 
  if (ret_val != 0) 
                    #line 1478 
                    return ret_val;
  #line 1480 
  mac->ledctl_default = __er32(hw,3584UL);
  #line 1481 
  mac->ledctl_mode1 = mac->ledctl_default;
  #line 1482 
  mac->ledctl_mode2 = mac->ledctl_default;
  #line 1484 
  i = (unsigned short)0U;
  #line 1484 
  while ((unsigned int)i <= 3U) {
    #line 1485 
    temp = (unsigned short)((unsigned int)((unsigned short)((int)data >> ((int)i << 2))) & 15U);
    #line 1486 
    switch ((int)temp) {
      #line 1487 
      case 4: 
              #line 1487 
      ;
      #line 1488 
      case 5: 
              #line 1488 
      ;
      #line 1489 
      case 6: 
              #line 1489 
      ;
      #line 1490 
      mac->ledctl_mode1 &= ~ (255U << ((int)i << 3));
      #line 1491 
      mac->ledctl_mode1 |= 14U << ((int)i << 3);
      #line 1492 
      break;
      #line 1493 
      case 7: 
              #line 1493 
      ;
      #line 1494 
      case 8: 
              #line 1494 
      ;
      #line 1495 
      case 9: 
              #line 1495 
      ;
      #line 1496 
      mac->ledctl_mode1 &= ~ (255U << ((int)i << 3));
      #line 1497 
      mac->ledctl_mode1 |= 15U << ((int)i << 3);
      #line 1498 
      break;
      #line 1499 
      default: 
               #line 1499 
      ;
      #line 1501 
      break;
    }
    #line 1503 
    switch ((int)temp) {
      #line 1504 
      case 2: 
              #line 1504 
      ;
      #line 1505 
      case 5: 
              #line 1505 
      ;
      #line 1506 
      case 8: 
              #line 1506 
      ;
      #line 1507 
      mac->ledctl_mode2 &= ~ (255U << ((int)i << 3));
      #line 1508 
      mac->ledctl_mode2 |= 14U << ((int)i << 3);
      #line 1509 
      break;
      #line 1510 
      case 3: 
              #line 1510 
      ;
      #line 1511 
      case 6: 
              #line 1511 
      ;
      #line 1512 
      case 9: 
              #line 1512 
      ;
      #line 1513 
      mac->ledctl_mode2 &= ~ (255U << ((int)i << 3));
      #line 1514 
      mac->ledctl_mode2 |= 15U << ((int)i << 3);
      #line 1515 
      break;
      #line 1516 
      default: 
               #line 1516 
      ;
      #line 1518 
      break;
    }
    #line 1484 
    i = (u16)((int)i + 1);
  }
  #line 1522 
  return 0;
}

#line 1532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_setup_led_generic(struct e1000_hw *hw)
{
  #line 1534 
  u32 ledctl;
  #line 1536 
  if (hw->mac.ops.setup_led != & e1000e_setup_led_generic) 
                                                           #line 1537 
                                                           return -3;
  #line 1539 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_fiber) {
    #line 1540 
    ledctl = __er32(hw,3584UL);
    #line 1541 
    hw->mac.ledctl_default = ledctl;
    #line 1543 
    ledctl &= 4294967088U;
    #line 1545 
    ledctl |= 15U;
    #line 1547 
    __ew32(hw,3584UL,ledctl);
  }
  else 
    #line 1548 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) 
      #line 1549 
      __ew32(hw,3584UL,hw->mac.ledctl_mode1);
  #line 1552 
  return 0;
}

#line 1562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_cleanup_led_generic(struct e1000_hw *hw)
{
  #line 1564 
  __ew32(hw,3584UL,hw->mac.ledctl_default);
  #line 1565 
  return 0;
}

#line 1574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_blink_led_generic(struct e1000_hw *hw)
{
  #line 1577 
  u32 i;
  #line 1576 
  u32 ledctl_blink = 0U;
  #line 1579 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_fiber) 
                                                                  #line 1581 
                                                                  ledctl_blink = 142U;
  else {
    #line 1590 
    ledctl_blink = hw->mac.ledctl_mode2;
    #line 1591 
    i = 0U;
    #line 1591 
    while (i <= 31U) {
      {
        #line 1592 
        u32 mode = (hw->mac.ledctl_mode2 >> i) & 15U;
        #line 1594 
        u32 led_default = hw->mac.ledctl_default >> i;
        #line 1596 
        if ((led_default & 64U) == 0U && mode == 14U || (led_default & 64U) != 0U && mode == 15U) {
          #line 1600 
          ledctl_blink = (unsigned int)(~ (15 << i)) & ledctl_blink;
          #line 1602 
          ledctl_blink = (unsigned int)(142 << i) | ledctl_blink;
        }
      }
      #line 1591 
      i += 8U;
    }
  }
  #line 1608 
  __ew32(hw,3584UL,ledctl_blink);
  #line 1610 
  return 0;
}

#line 1619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_led_on_generic(struct e1000_hw *hw)
{
  #line 1621 
  u32 ctrl;
  #line 1623 
  switch ((unsigned int)hw->phy.media_type) {
    #line 1624 
    case (unsigned int)2: 
                          #line 1624 
    ;
    #line 1625 
    ctrl = __er32(hw,0UL);
    #line 1626 
    ctrl &= 4294705151U;
    #line 1627 
    ctrl |= 4194304U;
    #line 1628 
    __ew32(hw,0UL,ctrl);
    #line 1629 
    break;
    #line 1630 
    case (unsigned int)1: 
                          #line 1630 
    ;
    #line 1631 
    __ew32(hw,3584UL,hw->mac.ledctl_mode2);
    #line 1632 
    break;
    #line 1633 
    default: 
             #line 1633 
    ;
    #line 1634 
    break;
  }
  #line 1637 
  return 0;
}

#line 1646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_led_off_generic(struct e1000_hw *hw)
{
  #line 1648 
  u32 ctrl;
  #line 1650 
  switch ((unsigned int)hw->phy.media_type) {
    #line 1651 
    case (unsigned int)2: 
                          #line 1651 
    ;
    #line 1652 
    ctrl = __er32(hw,0UL);
    #line 1653 
    ctrl |= 262144U;
    #line 1654 
    ctrl |= 4194304U;
    #line 1655 
    __ew32(hw,0UL,ctrl);
    #line 1656 
    break;
    #line 1657 
    case (unsigned int)1: 
                          #line 1657 
    ;
    #line 1658 
    __ew32(hw,3584UL,hw->mac.ledctl_mode1);
    #line 1659 
    break;
    #line 1660 
    default: 
             #line 1660 
    ;
    #line 1661 
    break;
  }
  #line 1664 
  return 0;
}

#line 1674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_set_pcie_no_snoop(struct e1000_hw *hw, u32 no_snoop)
{
  #line 1676 
  u32 gcr;
  #line 1678 
  if (no_snoop != 0U) {
    #line 1679 
    gcr = __er32(hw,23296UL);
    #line 1680 
    gcr &= 4294967232U;
    #line 1681 
    gcr |= no_snoop;
    #line 1682 
    __ew32(hw,23296UL,gcr);
  }
  #line 1684 
  return;
}

#line 1697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_disable_pcie_master(struct e1000_hw *hw)
{
  #line 1699 
  u32 ctrl;
  #line 1700 
  s32 timeout = 800;
  #line 1702 
  ctrl = __er32(hw,0UL);
  #line 1703 
  ctrl |= 4U;
  #line 1704 
  __ew32(hw,0UL,ctrl);
  #line 1706 
  while (timeout != 0) {
    #line 1707 
    if ((__er32(hw,8UL) & 524288U) == 0U) 
                                          #line 1708 
                                          break;
    #line 1709 
    usleep_range(100UL,200UL);
    #line 1710 
    timeout --;
  }
  #line 1713 
  if (timeout == 0) {
    {
      #line 1714 
      bool branch;
      #line 1714 
      struct _ddebug __UNIQUE_ID_ddebug491 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_disable_pcie_master", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Master requests are pending.\n", .lineno = (unsigned int)1714U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1714 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug491.key.dd_key_false.key,(_Bool)0);
      #line 1714 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1714 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug491,(hw->adapter)->netdev,(char *)"Master requests are pending.\n");
    }
    #line 1715 
    return -10;
  }
  #line 1718 
  return 0;
}

#line 1727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_reset_adaptive(struct e1000_hw *hw)
{
  #line 1729 
  struct e1000_mac_info *mac = & hw->mac;
  #line 1731 
  if (! mac->adaptive_ifs) {
    {
      #line 1732 
      bool branch;
      #line 1732 
      struct _ddebug __UNIQUE_ID_ddebug492 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_reset_adaptive", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Not in Adaptive IFS mode!\n", .lineno = (unsigned int)1732U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1732 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug492.key.dd_key_false.key,(_Bool)0);
      #line 1732 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1732 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug492,(hw->adapter)->netdev,(char *)"Not in Adaptive IFS mode!\n");
    }
    #line 1733 
    return;
  }
  #line 1736 
  mac->current_ifs_val = (unsigned short)0U;
  #line 1737 
  mac->ifs_min_val = (unsigned short)40U;
  #line 1738 
  mac->ifs_max_val = (unsigned short)80U;
  #line 1739 
  mac->ifs_step_size = (unsigned short)10U;
  #line 1740 
  mac->ifs_ratio = (unsigned short)4U;
  #line 1742 
  mac->in_ifs_mode = (_Bool)0;
  #line 1743 
  __ew32(hw,1112UL,0U);
  #line 1744 
  return;
}

#line 1753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_update_adaptive(struct e1000_hw *hw)
{
  #line 1755 
  struct e1000_mac_info *mac = & hw->mac;
  #line 1757 
  if (! mac->adaptive_ifs) {
    {
      #line 1758 
      bool branch;
      #line 1758 
      struct _ddebug __UNIQUE_ID_ddebug493 = {.modname = (char *)"e1000e", .function = (char *)"e1000e_update_adaptive", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/intel/e1000e/mac.c", .format = (char *)"Not in Adaptive IFS mode!\n", .lineno = (unsigned int)1758U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1758 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug493.key.dd_key_false.key,(_Bool)0);
      #line 1758 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1758 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug493,(hw->adapter)->netdev,(char *)"Not in Adaptive IFS mode!\n");
    }
    #line 1759 
    return;
  }
  #line 1762 
  if (mac->collision_delta * (unsigned int)mac->ifs_ratio > mac->tx_packet_delta) {
    #line 1763 
    if (mac->tx_packet_delta > 1000U) {
      #line 1764 
      mac->in_ifs_mode = (_Bool)1;
      #line 1765 
      if ((int)mac->current_ifs_val < (int)mac->ifs_max_val) {
        #line 1766 
        if ((unsigned int)mac->current_ifs_val == 0U) 
                                                      #line 1767 
                                                      mac->current_ifs_val = mac->ifs_min_val; else 
                                                                    #line 1769 
                                                                    mac->current_ifs_val = (unsigned short)((int)mac->current_ifs_val + (int)mac->ifs_step_size);
        #line 1771 
        __ew32(hw,1112UL,(unsigned int)mac->current_ifs_val);
      }
    }
  }
  else 
    #line 1775 
    if ((int)mac->in_ifs_mode != 0 && mac->tx_packet_delta <= 1000U) {
      #line 1777 
      mac->current_ifs_val = (unsigned short)0U;
      #line 1778 
      mac->in_ifs_mode = (_Bool)0;
      #line 1779 
      __ew32(hw,1112UL,0U);
    }
  #line 1781 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_enabled = 0;
#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_lowpower = 1;
#line 120 
#line 355 
void emg_dispatch_deregister_14(struct net_device *arg0);
#line 121 
#line 249 
void emg_dispatch_deregister_8(struct pci_driver *arg0);
#line 122 
#line 178 
void emg_dispatch_instance_deregister_4(struct timer_list *arg0);
#line 123 
#line 238 
void emg_dispatch_instance_register_7(struct timer_list *arg0);
#line 124 
#line 187 
void emg_dispatch_irq_deregister_5(int arg0);
#line 125 
#line 269 
void emg_dispatch_irq_register_11(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 126 
#line 258 
void emg_dispatch_register_10(struct net_device *arg0);
#line 127 
#line 167 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 128 
#line 2917 
void *emg_entry_point_insmod(void *arg0);
#line 131 
#line 364 
void *emg_interrupt_interrupt_scenario_e1000_intr(void *arg0);
#line 132 
#line 427 
void *emg_interrupt_interrupt_scenario_e1000_intr_msi(void *arg0);
#line 133 
#line 490 
void *emg_interrupt_interrupt_scenario_e1000_intr_msi_test(void *arg0);
#line 134 
#line 553 
void *emg_interrupt_interrupt_scenario_e1000_intr_msix_rx(void *arg0);
#line 135 
#line 616 
void *emg_interrupt_interrupt_scenario_e1000_intr_msix_tx(void *arg0);
#line 136 
#line 679 
void *emg_interrupt_interrupt_scenario_e1000_msix_other(void *arg0);
#line 137 
#line 742 
void *emg_interrupt_interrupt_scenario_e1000_test_intr(void *arg0);
#line 139 
#line 805 
void *emg_net_random_allocationless_scenario_e1000_get_coalesce(void *arg0);
#line 140 
#line 1387 
void *emg_pci_pci_scenario_e1000_driver(void *arg0);
#line 142 
#line 1563 
void *emg_pm_pm_ops_scenario_e1000_pm_ops(void *arg0);
#line 148 
#line 2546 
void *emg_timer_timer_scenario_10(void *arg0);
#line 150 
#line 2946 
int main(void);
#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_22;
#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_23;
#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_24;
#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_25;
#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 168 
  int ret;
  #line 169 
  struct emg_struct_pci_scenario_e1000_driver_23 *cf_arg_23;
  #line 170 
  cf_arg_23 = (struct emg_struct_pci_scenario_e1000_driver_23 *)ldv_xmalloc(16UL);
  #line 171 
  cf_arg_23->arg0 = arg0;
  #line 172 
  ret = pthread_create(& emg_thread_23,(pthread_attr_t *)0,& emg_pci_pci_scenario_e1000_driver,(void *)cf_arg_23);
  #line 173 
  __VERIFIER_assume(ret == 0);
  #line 174 
  return;
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_4(struct timer_list *arg0)
{
  #line 179 
  int ret;
  #line 180 
  struct emg_struct_timer_scenario_10_25 *cf_arg_25;
  #line 181 
  ret = pthread_join(emg_thread_25,(void **)0);
  #line 182 
  __VERIFIER_assume(ret == 0);
  #line 183 
  return;
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_5(int arg0)
{
  #line 188 
  int ret;
  #line 189 
  struct emg_struct_free_irq_5 *cf_arg_15;
  #line 190 
  struct emg_struct_free_irq_5 *cf_arg_16;
  #line 191 
  struct emg_struct_free_irq_5 *cf_arg_17;
  #line 192 
  struct emg_struct_free_irq_5 *cf_arg_18;
  #line 193 
  struct emg_struct_free_irq_5 *cf_arg_19;
  #line 194 
  struct emg_struct_free_irq_5 *cf_arg_20;
  #line 195 
  struct emg_struct_free_irq_5 *cf_arg_21;
  #line 196 
  switch (ldv_undef_int()) {
    #line 197 
    case 0: 
            #line 197 
    ;
    #line 198 
    ret = pthread_join(emg_thread_15,(void **)0);
    #line 199 
    __VERIFIER_assume(ret == 0);
    #line 200 
    break;
    #line 202 
    case 1: 
            #line 202 
    ;
    #line 203 
    ret = pthread_join(emg_thread_16,(void **)0);
    #line 204 
    __VERIFIER_assume(ret == 0);
    #line 205 
    break;
    #line 207 
    case 2: 
            #line 207 
    ;
    #line 208 
    ret = pthread_join(emg_thread_17,(void **)0);
    #line 209 
    __VERIFIER_assume(ret == 0);
    #line 210 
    break;
    #line 212 
    case 3: 
            #line 212 
    ;
    #line 213 
    ret = pthread_join(emg_thread_18,(void **)0);
    #line 214 
    __VERIFIER_assume(ret == 0);
    #line 215 
    break;
    #line 217 
    case 4: 
            #line 217 
    ;
    #line 218 
    ret = pthread_join(emg_thread_19,(void **)0);
    #line 219 
    __VERIFIER_assume(ret == 0);
    #line 220 
    break;
    #line 222 
    case 5: 
            #line 222 
    ;
    #line 223 
    ret = pthread_join(emg_thread_20,(void **)0);
    #line 224 
    __VERIFIER_assume(ret == 0);
    #line 225 
    break;
    #line 227 
    case 6: 
            #line 227 
    ;
    #line 228 
    ret = pthread_join(emg_thread_21,(void **)0);
    #line 229 
    __VERIFIER_assume(ret == 0);
    #line 230 
    break;
    #line 232 
    default: 
             #line 232 
    ;
    #line 232 
    __VERIFIER_assume(0);
  }
  #line 234 
  return;
}

#line 238  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_7(struct timer_list *arg0)
{
  #line 239 
  int ret;
  #line 240 
  struct emg_struct_timer_scenario_10_25 *cf_arg_25;
  #line 241 
  cf_arg_25 = (struct emg_struct_timer_scenario_10_25 *)ldv_xmalloc(16UL);
  #line 242 
  cf_arg_25->arg0 = arg0;
  #line 243 
  ret = pthread_create(& emg_thread_25,(pthread_attr_t *)0,& emg_timer_timer_scenario_10,(void *)cf_arg_25);
  #line 244 
  __VERIFIER_assume(ret == 0);
  #line 245 
  return;
}

#line 249  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct pci_driver *arg0)
{
  #line 250 
  int ret;
  #line 251 
  struct emg_struct_pci_scenario_e1000_driver_23 *cf_arg_23;
  #line 252 
  ret = pthread_join(emg_thread_23,(void **)0);
  #line 253 
  __VERIFIER_assume(ret == 0);
  #line 254 
  return;
}

#line 258  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_10(struct net_device *arg0)
{
  #line 259 
  int ret;
  #line 260 
  struct emg_struct_random_allocationless_scenario_e1000_get_coalesce_22 *cf_arg_22;
  #line 261 
  cf_arg_22 = (struct emg_struct_random_allocationless_scenario_e1000_get_coalesce_22 *)ldv_xmalloc(16UL);
  #line 262 
  cf_arg_22->arg0 = arg0;
  #line 263 
  ret = pthread_create(& emg_thread_22,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_e1000_get_coalesce,(void *)cf_arg_22);
  #line 264 
  __VERIFIER_assume(ret == 0);
  #line 265 
  return;
}

#line 269  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_11(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 270 
  int ret;
  #line 271 
  struct emg_struct_interrupt_scenario_e1000_intr_15 *cf_arg_15;
  #line 272 
  struct emg_struct_interrupt_scenario_e1000_intr_15 *cf_arg_16;
  #line 273 
  struct emg_struct_interrupt_scenario_e1000_intr_15 *cf_arg_17;
  #line 274 
  struct emg_struct_interrupt_scenario_e1000_intr_15 *cf_arg_18;
  #line 275 
  struct emg_struct_interrupt_scenario_e1000_intr_15 *cf_arg_19;
  #line 276 
  struct emg_struct_interrupt_scenario_e1000_intr_15 *cf_arg_20;
  #line 277 
  struct emg_struct_interrupt_scenario_e1000_intr_15 *cf_arg_21;
  #line 278 
  switch (ldv_undef_int()) {
    #line 279 
    case 0: 
            #line 279 
    ;
    #line 280 
    cf_arg_15 = (struct emg_struct_interrupt_scenario_e1000_intr_15 *)ldv_xmalloc(40UL);
    #line 281 
    cf_arg_15->arg0 = arg0;
    #line 282 
    cf_arg_15->arg1 = arg1;
    #line 283 
    cf_arg_15->arg2 = arg2;
    #line 284 
    cf_arg_15->arg3 = arg3;
    #line 285 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_e1000_intr,(void *)cf_arg_15);
    #line 286 
    __VERIFIER_assume(ret == 0);
    #line 287 
    break;
    #line 289 
    case 1: 
            #line 289 
    ;
    #line 290 
    cf_arg_16 = (struct emg_struct_interrupt_scenario_e1000_intr_15 *)ldv_xmalloc(40UL);
    #line 291 
    cf_arg_16->arg0 = arg0;
    #line 292 
    cf_arg_16->arg1 = arg1;
    #line 293 
    cf_arg_16->arg2 = arg2;
    #line 294 
    cf_arg_16->arg3 = arg3;
    #line 295 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_e1000_intr_msi,(void *)cf_arg_16);
    #line 296 
    __VERIFIER_assume(ret == 0);
    #line 297 
    break;
    #line 299 
    case 2: 
            #line 299 
    ;
    #line 300 
    cf_arg_17 = (struct emg_struct_interrupt_scenario_e1000_intr_15 *)ldv_xmalloc(40UL);
    #line 301 
    cf_arg_17->arg0 = arg0;
    #line 302 
    cf_arg_17->arg1 = arg1;
    #line 303 
    cf_arg_17->arg2 = arg2;
    #line 304 
    cf_arg_17->arg3 = arg3;
    #line 305 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_e1000_intr_msi_test,(void *)cf_arg_17);
    #line 306 
    __VERIFIER_assume(ret == 0);
    #line 307 
    break;
    #line 309 
    case 3: 
            #line 309 
    ;
    #line 310 
    cf_arg_18 = (struct emg_struct_interrupt_scenario_e1000_intr_15 *)ldv_xmalloc(40UL);
    #line 311 
    cf_arg_18->arg0 = arg0;
    #line 312 
    cf_arg_18->arg1 = arg1;
    #line 313 
    cf_arg_18->arg2 = arg2;
    #line 314 
    cf_arg_18->arg3 = arg3;
    #line 315 
    ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_e1000_intr_msix_rx,(void *)cf_arg_18);
    #line 316 
    __VERIFIER_assume(ret == 0);
    #line 317 
    break;
    #line 319 
    case 4: 
            #line 319 
    ;
    #line 320 
    cf_arg_19 = (struct emg_struct_interrupt_scenario_e1000_intr_15 *)ldv_xmalloc(40UL);
    #line 321 
    cf_arg_19->arg0 = arg0;
    #line 322 
    cf_arg_19->arg1 = arg1;
    #line 323 
    cf_arg_19->arg2 = arg2;
    #line 324 
    cf_arg_19->arg3 = arg3;
    #line 325 
    ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_e1000_intr_msix_tx,(void *)cf_arg_19);
    #line 326 
    __VERIFIER_assume(ret == 0);
    #line 327 
    break;
    #line 329 
    case 5: 
            #line 329 
    ;
    #line 330 
    cf_arg_20 = (struct emg_struct_interrupt_scenario_e1000_intr_15 *)ldv_xmalloc(40UL);
    #line 331 
    cf_arg_20->arg0 = arg0;
    #line 332 
    cf_arg_20->arg1 = arg1;
    #line 333 
    cf_arg_20->arg2 = arg2;
    #line 334 
    cf_arg_20->arg3 = arg3;
    #line 335 
    ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_e1000_msix_other,(void *)cf_arg_20);
    #line 336 
    __VERIFIER_assume(ret == 0);
    #line 337 
    break;
    #line 339 
    case 6: 
            #line 339 
    ;
    #line 340 
    cf_arg_21 = (struct emg_struct_interrupt_scenario_e1000_intr_15 *)ldv_xmalloc(40UL);
    #line 341 
    cf_arg_21->arg0 = arg0;
    #line 342 
    cf_arg_21->arg1 = arg1;
    #line 343 
    cf_arg_21->arg2 = arg2;
    #line 344 
    cf_arg_21->arg3 = arg3;
    #line 345 
    ret = pthread_create(& emg_thread_21,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_e1000_test_intr,(void *)cf_arg_21);
    #line 346 
    __VERIFIER_assume(ret == 0);
    #line 347 
    break;
    #line 349 
    default: 
             #line 349 
    ;
    #line 349 
    __VERIFIER_assume(0);
  }
  #line 351 
  return;
}

#line 355  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_14(struct net_device *arg0)
{
  #line 356 
  int ret;
  #line 357 
  struct emg_struct_random_allocationless_scenario_e1000_get_coalesce_22 *cf_arg_22;
  #line 358 
  ret = pthread_join(emg_thread_22,(void **)0);
  #line 359 
  __VERIFIER_assume(ret == 0);
  #line 360 
  return;
}

#line 364  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_e1000_intr(void *arg0)
{
  #line 367 
  enum irqreturn (*emg_15_callback)(int , void *);
  #line 368 
  void *emg_15_data;
  #line 369 
  int emg_15_line;
  #line 370 
  enum irqreturn emg_15_ret_val;
  #line 371 
  enum irqreturn (*emg_15_thread)(int , void *);
  #line 373 
  struct emg_struct_interrupt_scenario_e1000_intr_15 *data = (struct emg_struct_interrupt_scenario_e1000_intr_15 *)arg0;
  #line 376 
  emg_15_callback = & emg_wrapper_e1000_intr;
  #line 379 
  if (data != (struct emg_struct_interrupt_scenario_e1000_intr_15 *)0) {
    #line 380 
    emg_15_line = data->arg0;
    #line 381 
    emg_15_callback = data->arg1;
    #line 382 
    emg_15_thread = data->arg2;
    #line 383 
    emg_15_data = data->arg3;
    #line 384 
    ldv_free((void *)data);
  }
  #line 390 
  ldv_switch_to_interrupt_context();
  #line 394 
  emg_15_ret_val = emg_wrapper_e1000_intr(emg_15_line,emg_15_data);
  #line 399 
  ldv_switch_to_process_context();
  #line 402 
  if (ldv_undef_int() != 0) {
    #line 404 
    __VERIFIER_assume(emg_15_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 408 
    if (emg_15_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 409 
                                                              (*emg_15_thread)(emg_15_line,emg_15_data);
  }
  else 
       #line 414 
       __VERIFIER_assume(emg_15_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 422 
  return (void *)0;
}

#line 427  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_e1000_intr_msi(void *arg0)
{
  #line 430 
  enum irqreturn (*emg_16_callback)(int , void *);
  #line 431 
  void *emg_16_data;
  #line 432 
  int emg_16_line;
  #line 433 
  enum irqreturn emg_16_ret_val;
  #line 434 
  enum irqreturn (*emg_16_thread)(int , void *);
  #line 436 
  struct emg_struct_interrupt_scenario_e1000_intr_15 *data = (struct emg_struct_interrupt_scenario_e1000_intr_15 *)arg0;
  #line 439 
  emg_16_callback = & emg_wrapper_e1000_intr_msi;
  #line 442 
  if (data != (struct emg_struct_interrupt_scenario_e1000_intr_15 *)0) {
    #line 443 
    emg_16_line = data->arg0;
    #line 444 
    emg_16_callback = data->arg1;
    #line 445 
    emg_16_thread = data->arg2;
    #line 446 
    emg_16_data = data->arg3;
    #line 447 
    ldv_free((void *)data);
  }
  #line 453 
  ldv_switch_to_interrupt_context();
  #line 457 
  emg_16_ret_val = emg_wrapper_e1000_intr_msi(emg_16_line,emg_16_data);
  #line 462 
  ldv_switch_to_process_context();
  #line 465 
  if (ldv_undef_int() != 0) {
    #line 467 
    __VERIFIER_assume(emg_16_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 471 
    if (emg_16_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 472 
                                                              (*emg_16_thread)(emg_16_line,emg_16_data);
  }
  else 
       #line 477 
       __VERIFIER_assume(emg_16_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 485 
  return (void *)0;
}

#line 490  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_e1000_intr_msi_test(void *arg0)
{
  #line 493 
  enum irqreturn (*emg_17_callback)(int , void *);
  #line 494 
  void *emg_17_data;
  #line 495 
  int emg_17_line;
  #line 496 
  enum irqreturn emg_17_ret_val;
  #line 497 
  enum irqreturn (*emg_17_thread)(int , void *);
  #line 499 
  struct emg_struct_interrupt_scenario_e1000_intr_15 *data = (struct emg_struct_interrupt_scenario_e1000_intr_15 *)arg0;
  #line 502 
  emg_17_callback = & emg_wrapper_e1000_intr_msi_test;
  #line 505 
  if (data != (struct emg_struct_interrupt_scenario_e1000_intr_15 *)0) {
    #line 506 
    emg_17_line = data->arg0;
    #line 507 
    emg_17_callback = data->arg1;
    #line 508 
    emg_17_thread = data->arg2;
    #line 509 
    emg_17_data = data->arg3;
    #line 510 
    ldv_free((void *)data);
  }
  #line 516 
  ldv_switch_to_interrupt_context();
  #line 520 
  emg_17_ret_val = emg_wrapper_e1000_intr_msi_test(emg_17_line,emg_17_data);
  #line 525 
  ldv_switch_to_process_context();
  #line 528 
  if (ldv_undef_int() != 0) {
    #line 530 
    __VERIFIER_assume(emg_17_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 534 
    if (emg_17_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 535 
                                                              (*emg_17_thread)(emg_17_line,emg_17_data);
  }
  else 
       #line 540 
       __VERIFIER_assume(emg_17_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 548 
  return (void *)0;
}

#line 553  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_e1000_intr_msix_rx(void *arg0)
{
  #line 556 
  enum irqreturn (*emg_18_callback)(int , void *);
  #line 557 
  void *emg_18_data;
  #line 558 
  int emg_18_line;
  #line 559 
  enum irqreturn emg_18_ret_val;
  #line 560 
  enum irqreturn (*emg_18_thread)(int , void *);
  #line 562 
  struct emg_struct_interrupt_scenario_e1000_intr_15 *data = (struct emg_struct_interrupt_scenario_e1000_intr_15 *)arg0;
  #line 565 
  emg_18_callback = & emg_wrapper_e1000_intr_msix_rx;
  #line 568 
  if (data != (struct emg_struct_interrupt_scenario_e1000_intr_15 *)0) {
    #line 569 
    emg_18_line = data->arg0;
    #line 570 
    emg_18_callback = data->arg1;
    #line 571 
    emg_18_thread = data->arg2;
    #line 572 
    emg_18_data = data->arg3;
    #line 573 
    ldv_free((void *)data);
  }
  #line 579 
  ldv_switch_to_interrupt_context();
  #line 583 
  emg_18_ret_val = emg_wrapper_e1000_intr_msix_rx(emg_18_line,emg_18_data);
  #line 588 
  ldv_switch_to_process_context();
  #line 591 
  if (ldv_undef_int() != 0) {
    #line 593 
    __VERIFIER_assume(emg_18_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 597 
    if (emg_18_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 598 
                                                              (*emg_18_thread)(emg_18_line,emg_18_data);
  }
  else 
       #line 603 
       __VERIFIER_assume(emg_18_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 611 
  return (void *)0;
}

#line 616  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_e1000_intr_msix_tx(void *arg0)
{
  #line 619 
  enum irqreturn (*emg_19_callback)(int , void *);
  #line 620 
  void *emg_19_data;
  #line 621 
  int emg_19_line;
  #line 622 
  enum irqreturn emg_19_ret_val;
  #line 623 
  enum irqreturn (*emg_19_thread)(int , void *);
  #line 625 
  struct emg_struct_interrupt_scenario_e1000_intr_15 *data = (struct emg_struct_interrupt_scenario_e1000_intr_15 *)arg0;
  #line 628 
  emg_19_callback = & emg_wrapper_e1000_intr_msix_tx;
  #line 631 
  if (data != (struct emg_struct_interrupt_scenario_e1000_intr_15 *)0) {
    #line 632 
    emg_19_line = data->arg0;
    #line 633 
    emg_19_callback = data->arg1;
    #line 634 
    emg_19_thread = data->arg2;
    #line 635 
    emg_19_data = data->arg3;
    #line 636 
    ldv_free((void *)data);
  }
  #line 642 
  ldv_switch_to_interrupt_context();
  #line 646 
  emg_19_ret_val = emg_wrapper_e1000_intr_msix_tx(emg_19_line,emg_19_data);
  #line 651 
  ldv_switch_to_process_context();
  #line 654 
  if (ldv_undef_int() != 0) {
    #line 656 
    __VERIFIER_assume(emg_19_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 660 
    if (emg_19_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 661 
                                                              (*emg_19_thread)(emg_19_line,emg_19_data);
  }
  else 
       #line 666 
       __VERIFIER_assume(emg_19_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 674 
  return (void *)0;
}

#line 679  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_e1000_msix_other(void *arg0)
{
  #line 682 
  enum irqreturn (*emg_20_callback)(int , void *);
  #line 683 
  void *emg_20_data;
  #line 684 
  int emg_20_line;
  #line 685 
  enum irqreturn emg_20_ret_val;
  #line 686 
  enum irqreturn (*emg_20_thread)(int , void *);
  #line 688 
  struct emg_struct_interrupt_scenario_e1000_intr_15 *data = (struct emg_struct_interrupt_scenario_e1000_intr_15 *)arg0;
  #line 691 
  emg_20_callback = & emg_wrapper_e1000_msix_other;
  #line 694 
  if (data != (struct emg_struct_interrupt_scenario_e1000_intr_15 *)0) {
    #line 695 
    emg_20_line = data->arg0;
    #line 696 
    emg_20_callback = data->arg1;
    #line 697 
    emg_20_thread = data->arg2;
    #line 698 
    emg_20_data = data->arg3;
    #line 699 
    ldv_free((void *)data);
  }
  #line 705 
  ldv_switch_to_interrupt_context();
  #line 709 
  emg_20_ret_val = emg_wrapper_e1000_msix_other(emg_20_line,emg_20_data);
  #line 714 
  ldv_switch_to_process_context();
  #line 717 
  if (ldv_undef_int() != 0) {
    #line 719 
    __VERIFIER_assume(emg_20_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 723 
    if (emg_20_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 724 
                                                              (*emg_20_thread)(emg_20_line,emg_20_data);
  }
  else 
       #line 729 
       __VERIFIER_assume(emg_20_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 737 
  return (void *)0;
}

#line 742  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_e1000_test_intr(void *arg0)
{
  #line 745 
  enum irqreturn (*emg_21_callback)(int , void *);
  #line 746 
  void *emg_21_data;
  #line 747 
  int emg_21_line;
  #line 748 
  enum irqreturn emg_21_ret_val;
  #line 749 
  enum irqreturn (*emg_21_thread)(int , void *);
  #line 751 
  struct emg_struct_interrupt_scenario_e1000_intr_15 *data = (struct emg_struct_interrupt_scenario_e1000_intr_15 *)arg0;
  #line 754 
  emg_21_callback = & emg_wrapper_e1000_test_intr;
  #line 757 
  if (data != (struct emg_struct_interrupt_scenario_e1000_intr_15 *)0) {
    #line 758 
    emg_21_line = data->arg0;
    #line 759 
    emg_21_callback = data->arg1;
    #line 760 
    emg_21_thread = data->arg2;
    #line 761 
    emg_21_data = data->arg3;
    #line 762 
    ldv_free((void *)data);
  }
  #line 768 
  ldv_switch_to_interrupt_context();
  #line 772 
  emg_21_ret_val = emg_wrapper_e1000_test_intr(emg_21_line,emg_21_data);
  #line 777 
  ldv_switch_to_process_context();
  #line 780 
  if (ldv_undef_int() != 0) {
    #line 782 
    __VERIFIER_assume(emg_21_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 786 
    if (emg_21_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 787 
                                                              (*emg_21_thread)(emg_21_line,emg_21_data);
  }
  else 
       #line 792 
       __VERIFIER_assume(emg_21_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 800 
  return (void *)0;
}

#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_e1000_get_coalesce(void *arg0)
{
  #line 808 
  struct net_device *emg_22_container;
  #line 809 
  struct sk_buff *emg_22_emg_param_0_22;
  #line 810 
  struct sk_buff *emg_22_emg_param_0_28;
  #line 811 
  struct ethtool_coalesce *emg_22_emg_param_1_0;
  #line 812 
  struct ethtool_drvinfo *emg_22_emg_param_1_1;
  #line 813 
  struct ethtool_ringparam *emg_22_emg_param_1_11;
  #line 814 
  struct ethtool_rxnfc *emg_22_emg_param_1_12;
  #line 815 
  int emg_22_emg_param_1_14;
  #line 816 
  unsigned int emg_22_emg_param_1_15;
  #line 817 
  struct ethtool_ts_info *emg_22_emg_param_1_17;
  #line 818 
  struct ethtool_wolinfo *emg_22_emg_param_1_18;
  #line 819 
  int emg_22_emg_param_1_19;
  #line 820 
  struct ethtool_eee *emg_22_emg_param_1_2;
  #line 821 
  struct ifreq *emg_22_emg_param_1_20;
  #line 822 
  unsigned long long emg_22_emg_param_1_24;
  #line 823 
  struct rtnl_link_stats64 *emg_22_emg_param_1_25;
  #line 824 
  unsigned long long emg_22_emg_param_1_26;
  #line 825 
  void *emg_22_emg_param_1_27;
  #line 826 
  unsigned short emg_22_emg_param_1_29;
  #line 827 
  struct ethtool_eeprom *emg_22_emg_param_1_3;
  #line 828 
  unsigned short emg_22_emg_param_1_31;
  #line 829 
  struct ethtool_test *emg_22_emg_param_1_33;
  #line 830 
  struct ethtool_coalesce *emg_22_emg_param_1_35;
  #line 831 
  struct ethtool_eee *emg_22_emg_param_1_36;
  #line 832 
  struct ethtool_eeprom *emg_22_emg_param_1_37;
  #line 833 
  struct ethtool_link_ksettings *emg_22_emg_param_1_39;
  #line 834 
  unsigned int emg_22_emg_param_1_40;
  #line 835 
  struct ethtool_pauseparam *emg_22_emg_param_1_41;
  #line 836 
  enum ethtool_phys_id_state *emg_22_emg_param_1_42;
  #line 837 
  struct ethtool_ringparam *emg_22_emg_param_1_43;
  #line 838 
  struct ethtool_wolinfo *emg_22_emg_param_1_44;
  #line 839 
  struct ethtool_stats *emg_22_emg_param_1_5;
  #line 840 
  struct ethtool_link_ksettings *emg_22_emg_param_1_7;
  #line 841 
  struct ethtool_pauseparam *emg_22_emg_param_1_8;
  #line 842 
  struct ethtool_regs *emg_22_emg_param_1_9;
  #line 843 
  void *emg_22_emg_param_2_10;
  #line 844 
  unsigned int *emg_22_emg_param_2_13;
  #line 845 
  unsigned char *emg_22_emg_param_2_16;
  #line 846 
  int emg_22_emg_param_2_21;
  #line 847 
  unsigned long long emg_22_emg_param_2_23;
  #line 848 
  unsigned short emg_22_emg_param_2_30;
  #line 849 
  unsigned short emg_22_emg_param_2_32;
  #line 850 
  unsigned long long *emg_22_emg_param_2_34;
  #line 851 
  unsigned char *emg_22_emg_param_2_38;
  #line 852 
  unsigned char *emg_22_emg_param_2_4;
  #line 853 
  unsigned long long *emg_22_emg_param_2_6;
  #line 854 
  int emg_repeat_cnt_call_22 = 1;
  #line 856 
  struct emg_struct_random_allocationless_scenario_e1000_get_coalesce_22 *data = (struct emg_struct_random_allocationless_scenario_e1000_get_coalesce_22 *)arg0;
  #line 861 
  if (data != (struct emg_struct_random_allocationless_scenario_e1000_get_coalesce_22 *)0) {
    #line 862 
    emg_22_container = data->arg0;
    #line 863 
    ldv_free((void *)data);
  }
  #line 868 
  goto emg_call_22;
  #line 872 
  return (void *)0;
  #line 875 
  emg_call_22: 
               #line 875 
  ;
  #line 876 
  switch (ldv_undef_int()) {
    #line 877 
    case 0: 
            #line 877 
    ;
    #line 879 
    emg_22_emg_param_1_44 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 879 
    emg_22_emg_param_1_44 = emg_22_emg_param_1_44;
    #line 883 
    emg_wrapper_e1000_set_wol(emg_22_container,emg_22_emg_param_1_44);
    #line 887 
    ldv_free((void *)emg_22_emg_param_1_44);
    #line 889 
    break;
    #line 891 
    case 1: 
            #line 891 
    ;
    #line 893 
    emg_22_emg_param_1_43 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 893 
    emg_22_emg_param_1_43 = emg_22_emg_param_1_43;
    #line 897 
    emg_wrapper_e1000_set_ringparam(emg_22_container,emg_22_emg_param_1_43);
    #line 901 
    ldv_free((void *)emg_22_emg_param_1_43);
    #line 903 
    break;
    #line 905 
    case 2: 
            #line 905 
    ;
    #line 907 
    emg_22_emg_param_1_42 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 907 
    emg_22_emg_param_1_42 = emg_22_emg_param_1_42;
    #line 911 
    emg_wrapper_e1000_set_phys_id(emg_22_container,*emg_22_emg_param_1_42);
    #line 915 
    ldv_free((void *)emg_22_emg_param_1_42);
    #line 917 
    break;
    #line 919 
    case 3: 
            #line 919 
    ;
    #line 921 
    emg_22_emg_param_1_41 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 921 
    emg_22_emg_param_1_41 = emg_22_emg_param_1_41;
    #line 925 
    emg_wrapper_e1000_set_pauseparam(emg_22_container,emg_22_emg_param_1_41);
    #line 929 
    ldv_free((void *)emg_22_emg_param_1_41);
    #line 931 
    break;
    #line 933 
    case 4: 
            #line 933 
    ;
    #line 935 
    emg_wrapper_e1000_set_msglevel(emg_22_container,emg_22_emg_param_1_40);
    #line 937 
    break;
    #line 939 
    case 5: 
            #line 939 
    ;
    #line 941 
    emg_22_emg_param_1_39 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 941 
    emg_22_emg_param_1_39 = emg_22_emg_param_1_39;
    #line 945 
    emg_wrapper_e1000_set_link_ksettings(emg_22_container,emg_22_emg_param_1_39);
    #line 949 
    ldv_free((void *)emg_22_emg_param_1_39);
    #line 951 
    break;
    #line 953 
    case 6: 
            #line 953 
    ;
    #line 955 
    emg_22_emg_param_1_37 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 955 
    emg_22_emg_param_1_37 = emg_22_emg_param_1_37;
    #line 956 
    emg_22_emg_param_2_38 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 956 
    emg_22_emg_param_2_38 = emg_22_emg_param_2_38;
    #line 960 
    emg_wrapper_e1000_set_eeprom(emg_22_container,emg_22_emg_param_1_37,emg_22_emg_param_2_38);
    #line 964 
    ldv_free((void *)emg_22_emg_param_1_37);
    #line 965 
    ldv_free((void *)emg_22_emg_param_2_38);
    #line 967 
    break;
    #line 969 
    case 7: 
            #line 969 
    ;
    #line 971 
    emg_22_emg_param_1_36 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
    #line 971 
    emg_22_emg_param_1_36 = emg_22_emg_param_1_36;
    #line 975 
    emg_wrapper_e1000e_set_eee(emg_22_container,emg_22_emg_param_1_36);
    #line 979 
    ldv_free((void *)emg_22_emg_param_1_36);
    #line 981 
    break;
    #line 983 
    case 8: 
            #line 983 
    ;
    #line 985 
    emg_22_emg_param_1_35 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 985 
    emg_22_emg_param_1_35 = emg_22_emg_param_1_35;
    #line 989 
    emg_wrapper_e1000_set_coalesce(emg_22_container,emg_22_emg_param_1_35);
    #line 993 
    ldv_free((void *)emg_22_emg_param_1_35);
    #line 995 
    break;
    #line 997 
    case 9: 
            #line 997 
    ;
    #line 999 
    emg_22_emg_param_1_33 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
    #line 999 
    emg_22_emg_param_1_33 = emg_22_emg_param_1_33;
    #line 1000 
    emg_22_emg_param_2_34 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 1000 
    emg_22_emg_param_2_34 = emg_22_emg_param_2_34;
    #line 1004 
    emg_wrapper_e1000_diag_test(emg_22_container,emg_22_emg_param_1_33,emg_22_emg_param_2_34);
    #line 1008 
    ldv_free((void *)emg_22_emg_param_1_33);
    #line 1009 
    ldv_free((void *)emg_22_emg_param_2_34);
    #line 1011 
    break;
    #line 1013 
    case 10: 
             #line 1013 
    ;
    #line 1015 
    emg_wrapper_e1000_nway_reset(emg_22_container);
    #line 1017 
    break;
    #line 1019 
    case 11: 
             #line 1019 
    ;
    #line 1021 
    emg_wrapper_e1000_vlan_rx_kill_vid(emg_22_container,(unsigned short)((int)emg_22_emg_param_1_31),(unsigned short)((int)emg_22_emg_param_2_32));
    #line 1023 
    break;
    #line 1025 
    case 12: 
             #line 1025 
    ;
    #line 1027 
    emg_wrapper_e1000_vlan_rx_add_vid(emg_22_container,(unsigned short)((int)emg_22_emg_param_1_29),(unsigned short)((int)emg_22_emg_param_2_30));
    #line 1029 
    break;
    #line 1031 
    case 13: 
             #line 1031 
    ;
    #line 1033 
    eth_validate_addr(emg_22_container);
    #line 1035 
    break;
    #line 1037 
    case 14: 
             #line 1037 
    ;
    #line 1039 
    emg_wrapper_e1000_tx_timeout(emg_22_container);
    #line 1041 
    break;
    #line 1043 
    case 15: 
             #line 1043 
    ;
    #line 1045 
    emg_22_emg_param_0_28 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1045 
    emg_22_emg_param_0_28 = emg_22_emg_param_0_28;
    #line 1049 
    emg_wrapper_e1000_xmit_frame(emg_22_emg_param_0_28,emg_22_container);
    #line 1053 
    ldv_free((void *)emg_22_emg_param_0_28);
    #line 1055 
    break;
    #line 1057 
    case 16: 
             #line 1057 
    ;
    #line 1059 
    emg_wrapper_e1000e_set_rx_mode(emg_22_container);
    #line 1061 
    break;
    #line 1063 
    case 17: 
             #line 1063 
    ;
    #line 1065 
    emg_22_emg_param_1_27 = ldv_xmalloc_unknown_size(0UL);
    #line 1065 
    emg_22_emg_param_1_27 = emg_22_emg_param_1_27;
    #line 1069 
    emg_wrapper_e1000_set_mac(emg_22_container,emg_22_emg_param_1_27);
    #line 1073 
    ldv_free(emg_22_emg_param_1_27);
    #line 1075 
    break;
    #line 1077 
    case 18: 
             #line 1077 
    ;
    #line 1079 
    emg_wrapper_e1000_set_features(emg_22_container,emg_22_emg_param_1_26);
    #line 1081 
    break;
    #line 1083 
    case 19: 
             #line 1083 
    ;
    #line 1085 
    emg_wrapper_e1000_netpoll(emg_22_container);
    #line 1087 
    break;
    #line 1089 
    case 20: 
             #line 1089 
    ;
    #line 1091 
    emg_22_emg_param_1_25 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 1091 
    emg_22_emg_param_1_25 = emg_22_emg_param_1_25;
    #line 1095 
    e1000e_get_stats64(emg_22_container,emg_22_emg_param_1_25);
    #line 1099 
    ldv_free((void *)emg_22_emg_param_1_25);
    #line 1101 
    break;
    #line 1103 
    case 21: 
             #line 1103 
    ;
    #line 1105 
    emg_wrapper_e1000_fix_features(emg_22_container,emg_22_emg_param_1_24);
    #line 1107 
    break;
    #line 1109 
    case 22: 
             #line 1109 
    ;
    #line 1111 
    emg_22_emg_param_0_22 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1111 
    emg_22_emg_param_0_22 = emg_22_emg_param_0_22;
    #line 1115 
    passthru_features_check(emg_22_emg_param_0_22,emg_22_container,emg_22_emg_param_2_23);
    #line 1119 
    ldv_free((void *)emg_22_emg_param_0_22);
    #line 1121 
    break;
    #line 1123 
    case 23: 
             #line 1123 
    ;
    #line 1125 
    emg_22_emg_param_1_20 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 1125 
    emg_22_emg_param_1_20 = emg_22_emg_param_1_20;
    #line 1129 
    emg_wrapper_e1000_ioctl(emg_22_container,emg_22_emg_param_1_20,emg_22_emg_param_2_21);
    #line 1133 
    ldv_free((void *)emg_22_emg_param_1_20);
    #line 1135 
    break;
    #line 1137 
    case 24: 
             #line 1137 
    ;
    #line 1139 
    emg_wrapper_e1000_change_mtu(emg_22_container,emg_22_emg_param_1_19);
    #line 1141 
    break;
    #line 1143 
    case 25: 
             #line 1143 
    ;
    #line 1145 
    emg_22_emg_param_1_18 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1145 
    emg_22_emg_param_1_18 = emg_22_emg_param_1_18;
    #line 1149 
    emg_wrapper_e1000_get_wol(emg_22_container,emg_22_emg_param_1_18);
    #line 1153 
    ldv_free((void *)emg_22_emg_param_1_18);
    #line 1155 
    break;
    #line 1157 
    case 26: 
             #line 1157 
    ;
    #line 1159 
    emg_22_emg_param_1_17 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 1159 
    emg_22_emg_param_1_17 = emg_22_emg_param_1_17;
    #line 1163 
    emg_wrapper_e1000e_get_ts_info(emg_22_container,emg_22_emg_param_1_17);
    #line 1167 
    ldv_free((void *)emg_22_emg_param_1_17);
    #line 1169 
    break;
    #line 1171 
    case 27: 
             #line 1171 
    ;
    #line 1173 
    emg_22_emg_param_2_16 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1173 
    emg_22_emg_param_2_16 = emg_22_emg_param_2_16;
    #line 1177 
    emg_wrapper_e1000_get_strings(emg_22_container,emg_22_emg_param_1_15,emg_22_emg_param_2_16);
    #line 1181 
    ldv_free((void *)emg_22_emg_param_2_16);
    #line 1183 
    break;
    #line 1185 
    case 28: 
             #line 1185 
    ;
    #line 1187 
    emg_wrapper_e1000e_get_sset_count(emg_22_container,emg_22_emg_param_1_14);
    #line 1189 
    break;
    #line 1191 
    case 29: 
             #line 1191 
    ;
    #line 1193 
    emg_22_emg_param_1_12 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 1193 
    emg_22_emg_param_1_12 = emg_22_emg_param_1_12;
    #line 1194 
    emg_22_emg_param_2_13 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 1194 
    emg_22_emg_param_2_13 = emg_22_emg_param_2_13;
    #line 1198 
    emg_wrapper_e1000_get_rxnfc(emg_22_container,emg_22_emg_param_1_12,emg_22_emg_param_2_13);
    #line 1202 
    ldv_free((void *)emg_22_emg_param_1_12);
    #line 1203 
    ldv_free((void *)emg_22_emg_param_2_13);
    #line 1205 
    break;
    #line 1207 
    case 30: 
             #line 1207 
    ;
    #line 1209 
    emg_22_emg_param_1_11 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1209 
    emg_22_emg_param_1_11 = emg_22_emg_param_1_11;
    #line 1213 
    emg_wrapper_e1000_get_ringparam(emg_22_container,emg_22_emg_param_1_11);
    #line 1217 
    ldv_free((void *)emg_22_emg_param_1_11);
    #line 1219 
    break;
    #line 1221 
    case 31: 
             #line 1221 
    ;
    #line 1223 
    emg_wrapper_e1000_get_regs_len(emg_22_container);
    #line 1225 
    break;
    #line 1227 
    case 32: 
             #line 1227 
    ;
    #line 1229 
    emg_22_emg_param_1_9 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 1229 
    emg_22_emg_param_1_9 = emg_22_emg_param_1_9;
    #line 1230 
    emg_22_emg_param_2_10 = ldv_xmalloc_unknown_size(0UL);
    #line 1230 
    emg_22_emg_param_2_10 = emg_22_emg_param_2_10;
    #line 1234 
    emg_wrapper_e1000_get_regs(emg_22_container,emg_22_emg_param_1_9,emg_22_emg_param_2_10);
    #line 1238 
    ldv_free((void *)emg_22_emg_param_1_9);
    #line 1239 
    ldv_free(emg_22_emg_param_2_10);
    #line 1241 
    break;
    #line 1243 
    case 33: 
             #line 1243 
    ;
    #line 1245 
    emg_22_emg_param_1_8 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1245 
    emg_22_emg_param_1_8 = emg_22_emg_param_1_8;
    #line 1249 
    emg_wrapper_e1000_get_pauseparam(emg_22_container,emg_22_emg_param_1_8);
    #line 1253 
    ldv_free((void *)emg_22_emg_param_1_8);
    #line 1255 
    break;
    #line 1257 
    case 34: 
             #line 1257 
    ;
    #line 1259 
    emg_wrapper_e1000_get_msglevel(emg_22_container);
    #line 1261 
    break;
    #line 1263 
    case 35: 
             #line 1263 
    ;
    #line 1265 
    emg_22_emg_param_1_7 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1265 
    emg_22_emg_param_1_7 = emg_22_emg_param_1_7;
    #line 1269 
    emg_wrapper_e1000_get_link_ksettings(emg_22_container,emg_22_emg_param_1_7);
    #line 1273 
    ldv_free((void *)emg_22_emg_param_1_7);
    #line 1275 
    break;
    #line 1277 
    case 36: 
             #line 1277 
    ;
    #line 1279 
    ethtool_op_get_link(emg_22_container);
    #line 1281 
    break;
    #line 1283 
    case 37: 
             #line 1283 
    ;
    #line 1285 
    emg_22_emg_param_1_5 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 1285 
    emg_22_emg_param_1_5 = emg_22_emg_param_1_5;
    #line 1286 
    emg_22_emg_param_2_6 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 1286 
    emg_22_emg_param_2_6 = emg_22_emg_param_2_6;
    #line 1290 
    emg_wrapper_e1000_get_ethtool_stats(emg_22_container,emg_22_emg_param_1_5,emg_22_emg_param_2_6);
    #line 1294 
    ldv_free((void *)emg_22_emg_param_1_5);
    #line 1295 
    ldv_free((void *)emg_22_emg_param_2_6);
    #line 1297 
    break;
    #line 1299 
    case 38: 
             #line 1299 
    ;
    #line 1301 
    emg_wrapper_e1000_get_eeprom_len(emg_22_container);
    #line 1303 
    break;
    #line 1305 
    case 39: 
             #line 1305 
    ;
    #line 1307 
    emg_22_emg_param_1_3 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 1307 
    emg_22_emg_param_1_3 = emg_22_emg_param_1_3;
    #line 1308 
    emg_22_emg_param_2_4 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1308 
    emg_22_emg_param_2_4 = emg_22_emg_param_2_4;
    #line 1312 
    emg_wrapper_e1000_get_eeprom(emg_22_container,emg_22_emg_param_1_3,emg_22_emg_param_2_4);
    #line 1316 
    ldv_free((void *)emg_22_emg_param_1_3);
    #line 1317 
    ldv_free((void *)emg_22_emg_param_2_4);
    #line 1319 
    break;
    #line 1321 
    case 40: 
             #line 1321 
    ;
    #line 1323 
    emg_22_emg_param_1_2 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
    #line 1323 
    emg_22_emg_param_1_2 = emg_22_emg_param_1_2;
    #line 1327 
    emg_wrapper_e1000e_get_eee(emg_22_container,emg_22_emg_param_1_2);
    #line 1331 
    ldv_free((void *)emg_22_emg_param_1_2);
    #line 1333 
    break;
    #line 1335 
    case 41: 
             #line 1335 
    ;
    #line 1337 
    emg_22_emg_param_1_1 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1337 
    emg_22_emg_param_1_1 = emg_22_emg_param_1_1;
    #line 1341 
    emg_wrapper_e1000_get_drvinfo(emg_22_container,emg_22_emg_param_1_1);
    #line 1345 
    ldv_free((void *)emg_22_emg_param_1_1);
    #line 1347 
    break;
    #line 1349 
    case 42: 
             #line 1349 
    ;
    #line 1351 
    emg_22_emg_param_1_0 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1351 
    emg_22_emg_param_1_0 = emg_22_emg_param_1_0;
    #line 1355 
    emg_wrapper_e1000_get_coalesce(emg_22_container,emg_22_emg_param_1_0);
    #line 1359 
    ldv_free((void *)emg_22_emg_param_1_0);
    #line 1362 
    if (emg_repeat_cnt_call_22 > 0) {
      #line 1363 
      emg_repeat_cnt_call_22 --;
      #line 1365 
      goto emg_call_22;
    }
    else 
         #line 1367 
         __VERIFIER_assume(0);
    #line 1371 
    break;
    #line 1373 
    case 43: 
             #line 1373 
    ;
    #line 1377 
    break;
    #line 1379 
    default: 
             #line 1379 
    ;
    #line 1379 
    __VERIFIER_assume(0);
  }
  #line 1382 
  return (void *)0;
}

#line 1387  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_e1000_driver(void *arg0)
{
  #line 1390 
  int emg_23_choice;
  #line 1391 
  struct pci_driver *emg_23_container;
  #line 1392 
  struct pci_device_id *emg_23_device_id;
  #line 1393 
  struct pci_dev *emg_23_resource_0;
  #line 1394 
  struct pm_message emg_23_resource_1;
  #line 1395 
  int emg_23_ret;
  #line 1396 
  int emg_repeat_cnt_call_23_0 = 1;
  #line 1397 
  int emg_repeat_cnt_main_23_0 = 1;
  #line 1398 
  int emg_repeat_cnt_call_23_1 = 1;
  #line 1399 
  int emg_repeat_cnt_main_23_1 = 1;
  #line 1401 
  struct emg_struct_pci_scenario_e1000_driver_23 *data = (struct emg_struct_pci_scenario_e1000_driver_23 *)arg0;
  #line 1405 
  emg_23_choice = 0;
  #line 1406 
  emg_23_ret = ldv_undef_int();
  #line 1407 
  emg_23_choice = 0;
  #line 1408 
  emg_23_container = emg_alias_e1000_driver;
  #line 1409 
  emg_23_ret = ldv_undef_int();
  #line 1411 
  __VERIFIER_assume(data->arg0 == emg_alias_e1000_driver);
  #line 1413 
  if (data != (struct emg_struct_pci_scenario_e1000_driver_23 *)0) {
    #line 1414 
    emg_23_container = data->arg0;
    #line 1415 
    ldv_free((void *)data);
  }
  #line 1420 
  emg_23_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 1421 
  emg_23_choice = __ldv_undef_int_range(0,88);
  #line 1422 
  emg_23_device_id = emg_23_container->id_table + (unsigned long)emg_23_choice;
  #line 1426 
  goto emg_main_23;
  #line 1430 
  return (void *)0;
  #line 1433 
  emg_call_23: 
               #line 1433 
  ;
  #line 1434 
  switch (ldv_undef_int()) {
    #line 1435 
    case 0: 
            #line 1435 
    ;
    #line 1440 
    if (emg_repeat_cnt_call_23_1 > 0) {
      #line 1441 
      emg_repeat_cnt_call_23_1 --;
      #line 1443 
      goto emg_call_23;
    }
    else 
         #line 1445 
         __VERIFIER_assume(0);
    #line 1449 
    break;
    #line 1451 
    case 1: 
            #line 1451 
    ;
    #line 1453 
    if (emg_23_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 1454 
      emg_23_ret = (*(emg_23_container->suspend))(emg_23_resource_0,emg_23_resource_1); else 
                                                                    #line 1456 
                                                                    emg_23_ret = ldv_undef_int();
    #line 1462 
    emg_23_ret = ldv_filter_err_code(emg_23_ret);
    #line 1466 
    if (emg_23_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 1467 
                                                                  (*(emg_23_container->resume))(emg_23_resource_0);
    #line 1471 
    if (emg_repeat_cnt_call_23_0 > 0) {
      #line 1472 
      emg_repeat_cnt_call_23_0 --;
      #line 1474 
      goto emg_call_23;
    }
    else 
         #line 1476 
         __VERIFIER_assume(0);
    #line 1480 
    break;
    #line 1482 
    case 2: 
            #line 1482 
    ;
    #line 1484 
    emg_wrapper_e1000_shutdown(emg_23_resource_0);
    #line 1488 
    emg_wrapper_e1000_remove(emg_23_resource_0);
    #line 1491 
    if (emg_repeat_cnt_main_23_0 > 0) {
      #line 1492 
      emg_repeat_cnt_main_23_0 --;
      #line 1494 
      goto emg_main_23;
    }
    else 
         #line 1496 
         __VERIFIER_assume(0);
    #line 1500 
    break;
    #line 1502 
    default: 
             #line 1502 
    ;
    #line 1502 
    __VERIFIER_assume(0);
  }
  #line 1505 
  return (void *)0;
  #line 1508 
  emg_main_23: 
               #line 1508 
  ;
  #line 1509 
  if (ldv_undef_int() != 0) {
    #line 1512 
    ldv_pre_probe();
    #line 1516 
    emg_23_ret = emg_wrapper_e1000_probe(emg_23_resource_0,emg_23_device_id);
    #line 1521 
    emg_23_ret = ldv_post_probe(emg_23_ret);
    #line 1524 
    if (ldv_undef_int() != 0) {
      #line 1526 
      __VERIFIER_assume(emg_23_ret == 0);
      #line 1530 
      goto emg_call_23;
    }
    else 
         #line 1535 
         __VERIFIER_assume(emg_23_ret != 0);
    #line 1539 
    if (emg_repeat_cnt_main_23_1 > 0) {
      #line 1540 
      emg_repeat_cnt_main_23_1 --;
      #line 1542 
      goto emg_main_23;
    }
    else 
         #line 1544 
         __VERIFIER_assume(0);
  }
  else 
       #line 1550 
       ldv_free((void *)emg_23_resource_0);
  #line 1558 
  return (void *)0;
}

#line 1563  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pm_pm_ops_scenario_e1000_pm_ops(void *arg0)
{
  #line 1566 
  struct device *emg_24_device;
  #line 1567 
  struct dev_pm_ops *emg_24_pm_ops;
  #line 1568 
  int emg_24_ret;
  #line 1569 
  int emg_repeat_cnt_plate_24 = 1;
  #line 1570 
  int emg_repeat_cnt_fnoirq_24 = 1;
  #line 1571 
  int emg_repeat_cnt_run_resume_24 = 1;
  #line 1572 
  int emg_repeat_cnt_poff_24 = 1;
  #line 1573 
  int emg_repeat_cnt_tnoirq_24 = 1;
  #line 1574 
  int emg_repeat_cnt_no_irq_24 = 1;
  #line 1575 
  int emg_repeat_cnt_slate_24 = 1;
  #line 1576 
  int emg_repeat_cnt_pno_irq_24 = 1;
  #line 1577 
  int emg_repeat_cnt_thlate_24 = 1;
  #line 1578 
  int emg_repeat_cnt_res_24 = 1;
  #line 1579 
  int emg_repeat_cnt_reslate_24 = 1;
  #line 1580 
  int emg_repeat_cnt_restnoirq_24 = 1;
  #line 1581 
  int emg_repeat_cnt_sus_24 = 1;
  #line 1582 
  int emg_repeat_cnt_rest_24 = 1;
  #line 1583 
  int emg_repeat_cnt_resnoirq_24 = 1;
  #line 1584 
  int emg_repeat_cnt_th_24 = 1;
  #line 1585 
  int emg_repeat_cnt_flate_24 = 1;
  #line 1586 
  int emg_repeat_cnt_reste_24 = 1;
  #line 1587 
  int emg_repeat_cnt_fr_24 = 1;
  #line 1590 
  emg_24_ret = ldv_undef_int();
  #line 1591 
  emg_24_pm_ops = emg_alias_e1000_pm_ops;
  #line 1592 
  emg_24_ret = ldv_undef_int();
  #line 1598 
  goto emg_do_24;
  #line 1602 
  return (void *)0;
  #line 1605 
  emg_compl_24: 
                #line 1605 
  ;
  #line 1607 
  if (emg_24_pm_ops->complete != (void (*)(struct device *))0) 
                                                               #line 1608 
                                                               (*(emg_24_pm_ops->complete))(emg_24_device);
  #line 1616 
  return (void *)0;
  #line 1619 
  emg_do_24: 
             #line 1619 
  ;
  #line 1620 
  switch (ldv_undef_int()) {
    #line 1621 
    case 0: 
            #line 1621 
    ;
    #line 1623 
    __VERIFIER_assume((emg_runtime_enabled == 1 && emg_runtime_lowpower == 1) != 0);
    #line 1627 
    goto emg_runt_24;
    #line 1632 
    case 1: 
            #line 1632 
    ;
    #line 1634 
    goto emg_normal_24;
    #line 1639 
    case 2: 
            #line 1639 
    ;
    #line 1643 
    break;
    #line 1645 
    default: 
             #line 1645 
    ;
    #line 1645 
    __VERIFIER_assume(0);
  }
  #line 1648 
  return (void *)0;
  #line 1651 
  emg_flate_24: 
                #line 1651 
  ;
  #line 1653 
  if (emg_24_pm_ops->freeze_late != (int (*)(struct device *))0) 
                                                                 #line 1654 
                                                                 emg_24_ret = (*(emg_24_pm_ops->freeze_late))(emg_24_device); else 
                                                                    #line 1656 
                                                                    emg_24_ret = ldv_undef_int();
  #line 1662 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 1665 
  if (ldv_undef_int() != 0) {
    #line 1667 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 1671 
    goto emg_thlate_24;
  }
  else 
       #line 1676 
       __VERIFIER_assume(emg_24_ret != 0);
  #line 1680 
  if (emg_repeat_cnt_flate_24 > 0) {
    #line 1681 
    emg_repeat_cnt_flate_24 --;
    #line 1683 
    goto emg_flate_24;
  }
  else 
       #line 1685 
       __VERIFIER_assume(0);
  #line 1690 
  return (void *)0;
  #line 1693 
  emg_fnoirq_24: 
                 #line 1693 
  ;
  #line 1695 
  if (emg_24_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
                                                                  #line 1696 
                                                                  emg_24_ret = (*(emg_24_pm_ops->freeze_noirq))(emg_24_device); else 
                                                                    #line 1698 
                                                                    emg_24_ret = ldv_undef_int();
  #line 1704 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 1707 
  if (ldv_undef_int() != 0) {
    #line 1709 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 1713 
    goto emg_tnoirq_24;
  }
  else 
       #line 1718 
       __VERIFIER_assume(emg_24_ret != 0);
  #line 1722 
  if (emg_repeat_cnt_fnoirq_24 > 0) {
    #line 1723 
    emg_repeat_cnt_fnoirq_24 --;
    #line 1725 
    goto emg_fnoirq_24;
  }
  else 
       #line 1727 
       __VERIFIER_assume(0);
  #line 1732 
  return (void *)0;
  #line 1735 
  emg_fr_24: 
             #line 1735 
  ;
  #line 1737 
  emg_24_ret = emg_wrapper_e1000e_pm_freeze(emg_24_device);
  #line 1742 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 1745 
  if (ldv_undef_int() != 0) {
    #line 1747 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 1750 
    if (ldv_undef_int() != 0) 
                              #line 1752 
                              goto emg_fnoirq_24; else 
                                                       #line 1757 
                                                       goto emg_flate_24;
  }
  else {
    #line 1763 
    __VERIFIER_assume(emg_24_ret != 0);
    #line 1766 
    if (emg_repeat_cnt_fr_24 > 0) {
      #line 1767 
      emg_repeat_cnt_fr_24 --;
      #line 1769 
      goto emg_fr_24;
    }
    else 
         #line 1771 
         __VERIFIER_assume(0);
  }
  #line 1777 
  return (void *)0;
  #line 1780 
  emg_no_irq_24: 
                 #line 1780 
  ;
  #line 1782 
  if (emg_24_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
                                                                   #line 1783 
                                                                   emg_24_ret = (*(emg_24_pm_ops->suspend_noirq))(emg_24_device); else 
                                                                    #line 1785 
                                                                    emg_24_ret = ldv_undef_int();
  #line 1791 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 1794 
  if (ldv_undef_int() != 0) {
    #line 1796 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 1800 
    goto emg_resnoirq_24;
  }
  else 
       #line 1805 
       __VERIFIER_assume(emg_24_ret != 0);
  #line 1809 
  if (emg_repeat_cnt_no_irq_24 > 0) {
    #line 1810 
    emg_repeat_cnt_no_irq_24 --;
    #line 1812 
    goto emg_no_irq_24;
  }
  else 
       #line 1814 
       __VERIFIER_assume(0);
  #line 1819 
  return (void *)0;
  #line 1822 
  emg_normal_24: 
                 #line 1822 
  ;
  #line 1824 
  if (emg_24_pm_ops->prepare != (int (*)(struct device *))0) 
                                                             #line 1825 
                                                             emg_24_ret = (*(emg_24_pm_ops->prepare))(emg_24_device); else 
                                                                    #line 1827 
                                                                    emg_24_ret = ldv_undef_int();
  #line 1833 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 1836 
  if (ldv_undef_int() != 0) {
    #line 1838 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 1841 
    switch (ldv_undef_int()) {
      #line 1842 
      case 0: 
              #line 1842 
      ;
      #line 1844 
      goto emg_sus_24;
      #line 1849 
      case 1: 
              #line 1849 
      ;
      #line 1851 
      goto emg_fr_24;
      #line 1856 
      case 2: 
              #line 1856 
      ;
      #line 1858 
      goto emg_poff_24;
      #line 1863 
      default: 
               #line 1863 
      ;
      #line 1863 
      __VERIFIER_assume(0);
    }
  }
  else 
       #line 1867 
       __VERIFIER_assume(emg_24_ret != 0);
  #line 1875 
  return (void *)0;
  #line 1878 
  emg_plate_24: 
                #line 1878 
  ;
  #line 1880 
  if (emg_24_pm_ops->poweroff_late != (int (*)(struct device *))0) 
                                                                   #line 1881 
                                                                   emg_24_ret = (*(emg_24_pm_ops->poweroff_late))(emg_24_device); else 
                                                                    #line 1883 
                                                                    emg_24_ret = ldv_undef_int();
  #line 1889 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 1892 
  if (ldv_undef_int() != 0) {
    #line 1894 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 1898 
    goto emg_reste_24;
  }
  else 
       #line 1903 
       __VERIFIER_assume(emg_24_ret != 0);
  #line 1907 
  if (emg_repeat_cnt_plate_24 > 0) {
    #line 1908 
    emg_repeat_cnt_plate_24 --;
    #line 1910 
    goto emg_plate_24;
  }
  else 
       #line 1912 
       __VERIFIER_assume(0);
  #line 1917 
  return (void *)0;
  #line 1920 
  emg_pno_irq_24: 
                  #line 1920 
  ;
  #line 1922 
  if (emg_24_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
                                                                    #line 1923 
                                                                    emg_24_ret = (*(emg_24_pm_ops->poweroff_noirq))(emg_24_device); else 
                                                                    #line 1925 
                                                                    emg_24_ret = ldv_undef_int();
  #line 1931 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 1934 
  if (ldv_undef_int() != 0) {
    #line 1936 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 1940 
    goto emg_restnoirq_24;
  }
  else 
       #line 1945 
       __VERIFIER_assume(emg_24_ret != 0);
  #line 1949 
  if (emg_repeat_cnt_pno_irq_24 > 0) {
    #line 1950 
    emg_repeat_cnt_pno_irq_24 --;
    #line 1952 
    goto emg_pno_irq_24;
  }
  else 
       #line 1954 
       __VERIFIER_assume(0);
  #line 1959 
  return (void *)0;
  #line 1962 
  emg_poff_24: 
               #line 1962 
  ;
  #line 1964 
  emg_24_ret = emg_wrapper_e1000e_pm_suspend(emg_24_device);
  #line 1969 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 1972 
  if (ldv_undef_int() != 0) {
    #line 1974 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 1977 
    if (ldv_undef_int() != 0) 
                              #line 1979 
                              goto emg_pno_irq_24; else 
                                                        #line 1984 
                                                        goto emg_plate_24;
  }
  else {
    #line 1990 
    __VERIFIER_assume(emg_24_ret != 0);
    #line 1993 
    if (emg_repeat_cnt_poff_24 > 0) {
      #line 1994 
      emg_repeat_cnt_poff_24 --;
      #line 1996 
      goto emg_poff_24;
    }
    else 
         #line 1998 
         __VERIFIER_assume(0);
  }
  #line 2004 
  return (void *)0;
  #line 2007 
  emg_res_24: 
              #line 2007 
  ;
  #line 2009 
  emg_24_ret = emg_wrapper_e1000e_pm_resume(emg_24_device);
  #line 2014 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 2017 
  if (ldv_undef_int() != 0) {
    #line 2019 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 2023 
    goto emg_compl_24;
  }
  else {
    #line 2028 
    __VERIFIER_assume(emg_24_ret != 0);
    #line 2031 
    if (emg_repeat_cnt_res_24 > 0) {
      #line 2032 
      emg_repeat_cnt_res_24 --;
      #line 2034 
      goto emg_res_24;
    }
    else 
         #line 2036 
         __VERIFIER_assume(0);
  }
  #line 2042 
  return (void *)0;
  #line 2045 
  emg_reslate_24: 
                  #line 2045 
  ;
  #line 2047 
  if (emg_24_pm_ops->resume_early != (int (*)(struct device *))0) 
                                                                  #line 2048 
                                                                  emg_24_ret = (*(emg_24_pm_ops->resume_early))(emg_24_device); else 
                                                                    #line 2050 
                                                                    emg_24_ret = ldv_undef_int();
  #line 2056 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 2059 
  if (ldv_undef_int() != 0) {
    #line 2061 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 2065 
    goto emg_res_24;
  }
  else 
       #line 2070 
       __VERIFIER_assume(emg_24_ret != 0);
  #line 2074 
  if (emg_repeat_cnt_reslate_24 > 0) {
    #line 2075 
    emg_repeat_cnt_reslate_24 --;
    #line 2077 
    goto emg_reslate_24;
  }
  else 
       #line 2079 
       __VERIFIER_assume(0);
  #line 2084 
  return (void *)0;
  #line 2087 
  emg_resnoirq_24: 
                   #line 2087 
  ;
  #line 2089 
  if (emg_24_pm_ops->resume_noirq != (int (*)(struct device *))0) 
                                                                  #line 2090 
                                                                  emg_24_ret = (*(emg_24_pm_ops->resume_noirq))(emg_24_device); else 
                                                                    #line 2092 
                                                                    emg_24_ret = ldv_undef_int();
  #line 2098 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 2101 
  if (ldv_undef_int() != 0) {
    #line 2103 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 2107 
    goto emg_res_24;
  }
  else 
       #line 2112 
       __VERIFIER_assume(emg_24_ret != 0);
  #line 2116 
  if (emg_repeat_cnt_resnoirq_24 > 0) {
    #line 2117 
    emg_repeat_cnt_resnoirq_24 --;
    #line 2119 
    goto emg_resnoirq_24;
  }
  else 
       #line 2121 
       __VERIFIER_assume(0);
  #line 2126 
  return (void *)0;
  #line 2129 
  emg_rest_24: 
               #line 2129 
  ;
  #line 2131 
  emg_24_ret = emg_wrapper_e1000e_pm_resume(emg_24_device);
  #line 2136 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 2139 
  if (ldv_undef_int() != 0) {
    #line 2141 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 2145 
    goto emg_compl_24;
  }
  else {
    #line 2150 
    __VERIFIER_assume(emg_24_ret != 0);
    #line 2153 
    if (emg_repeat_cnt_rest_24 > 0) {
      #line 2154 
      emg_repeat_cnt_rest_24 --;
      #line 2156 
      goto emg_rest_24;
    }
    else 
         #line 2158 
         __VERIFIER_assume(0);
  }
  #line 2164 
  return (void *)0;
  #line 2167 
  emg_reste_24: 
                #line 2167 
  ;
  #line 2169 
  if (emg_24_pm_ops->restore_early != (int (*)(struct device *))0) 
                                                                   #line 2170 
                                                                   emg_24_ret = (*(emg_24_pm_ops->restore_early))(emg_24_device); else 
                                                                    #line 2172 
                                                                    emg_24_ret = ldv_undef_int();
  #line 2178 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 2181 
  if (ldv_undef_int() != 0) {
    #line 2183 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 2187 
    goto emg_rest_24;
  }
  else 
       #line 2192 
       __VERIFIER_assume(emg_24_ret != 0);
  #line 2196 
  if (emg_repeat_cnt_reste_24 > 0) {
    #line 2197 
    emg_repeat_cnt_reste_24 --;
    #line 2199 
    goto emg_reste_24;
  }
  else 
       #line 2201 
       __VERIFIER_assume(0);
  #line 2206 
  return (void *)0;
  #line 2209 
  emg_restnoirq_24: 
                    #line 2209 
  ;
  #line 2211 
  if (emg_24_pm_ops->restore_noirq != (int (*)(struct device *))0) 
                                                                   #line 2212 
                                                                   emg_24_ret = (*(emg_24_pm_ops->restore_noirq))(emg_24_device); else 
                                                                    #line 2214 
                                                                    emg_24_ret = ldv_undef_int();
  #line 2220 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 2223 
  if (ldv_undef_int() != 0) {
    #line 2225 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 2229 
    goto emg_rest_24;
  }
  else 
       #line 2234 
       __VERIFIER_assume(emg_24_ret != 0);
  #line 2238 
  if (emg_repeat_cnt_restnoirq_24 > 0) {
    #line 2239 
    emg_repeat_cnt_restnoirq_24 --;
    #line 2241 
    goto emg_restnoirq_24;
  }
  else 
       #line 2243 
       __VERIFIER_assume(0);
  #line 2248 
  return (void *)0;
  #line 2251 
  emg_run_resume_24: 
                     #line 2251 
  ;
  #line 2253 
  emg_24_ret = emg_wrapper_e1000e_pm_runtime_resume(emg_24_device);
  #line 2258 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 2259 
  if (emg_24_ret != 0) 
                       #line 2260 
                       emg_runtime_lowpower = 0;
  #line 2263 
  if (ldv_undef_int() != 0) 
                            #line 2265 
                            __VERIFIER_assume(emg_24_ret == 0);
  else {
    #line 2269 
    __VERIFIER_assume(emg_24_ret != 0);
    #line 2272 
    if (emg_repeat_cnt_run_resume_24 > 0) {
      #line 2273 
      emg_repeat_cnt_run_resume_24 --;
      #line 2275 
      goto emg_run_resume_24;
    }
    else 
         #line 2277 
         __VERIFIER_assume(0);
  }
  #line 2287 
  return (void *)0;
  #line 2290 
  emg_runt_24: 
               #line 2290 
  ;
  #line 2291 
  if (ldv_undef_int() != 0) {
    #line 2293 
    emg_24_ret = emg_wrapper_e1000e_pm_runtime_idle(emg_24_device);
    #line 2298 
    emg_24_ret = ldv_post_probe(emg_24_ret);
  }
  else {
    #line 2302 
    emg_24_ret = emg_wrapper_e1000e_pm_runtime_suspend(emg_24_device);
    #line 2307 
    emg_24_ret = ldv_post_probe(emg_24_ret);
    #line 2308 
    if (emg_24_ret != 0) 
                         #line 2309 
                         emg_runtime_lowpower = 1;
    #line 2312 
    if (ldv_undef_int() != 0) {
      #line 2314 
      __VERIFIER_assume(emg_24_ret == 0);
      #line 2318 
      goto emg_run_resume_24;
    }
    else 
         #line 2323 
         __VERIFIER_assume(emg_24_ret != 0);
  }
  #line 2332 
  return (void *)0;
  #line 2335 
  emg_slate_24: 
                #line 2335 
  ;
  #line 2337 
  if (emg_24_pm_ops->suspend_late != (int (*)(struct device *))0) 
                                                                  #line 2338 
                                                                  emg_24_ret = (*(emg_24_pm_ops->suspend_late))(emg_24_device); else 
                                                                    #line 2340 
                                                                    emg_24_ret = ldv_undef_int();
  #line 2346 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 2349 
  if (ldv_undef_int() != 0) {
    #line 2351 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 2355 
    goto emg_reslate_24;
  }
  else 
       #line 2360 
       __VERIFIER_assume(emg_24_ret != 0);
  #line 2364 
  if (emg_repeat_cnt_slate_24 > 0) {
    #line 2365 
    emg_repeat_cnt_slate_24 --;
    #line 2367 
    goto emg_slate_24;
  }
  else 
       #line 2369 
       __VERIFIER_assume(0);
  #line 2374 
  return (void *)0;
  #line 2377 
  emg_sus_24: 
              #line 2377 
  ;
  #line 2379 
  emg_24_ret = emg_wrapper_e1000e_pm_suspend(emg_24_device);
  #line 2384 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 2387 
  if (ldv_undef_int() != 0) {
    #line 2389 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 2392 
    if (ldv_undef_int() != 0) 
                              #line 2394 
                              goto emg_no_irq_24; else 
                                                       #line 2399 
                                                       goto emg_slate_24;
  }
  else {
    #line 2405 
    __VERIFIER_assume(emg_24_ret != 0);
    #line 2408 
    if (emg_repeat_cnt_sus_24 > 0) {
      #line 2409 
      emg_repeat_cnt_sus_24 --;
      #line 2411 
      goto emg_sus_24;
    }
    else 
         #line 2413 
         __VERIFIER_assume(0);
  }
  #line 2419 
  return (void *)0;
  #line 2422 
  emg_th_24: 
             #line 2422 
  ;
  #line 2424 
  emg_24_ret = emg_wrapper_e1000e_pm_thaw(emg_24_device);
  #line 2429 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 2432 
  if (ldv_undef_int() != 0) {
    #line 2434 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 2438 
    goto emg_compl_24;
  }
  else {
    #line 2443 
    __VERIFIER_assume(emg_24_ret != 0);
    #line 2446 
    if (emg_repeat_cnt_th_24 > 0) {
      #line 2447 
      emg_repeat_cnt_th_24 --;
      #line 2449 
      goto emg_th_24;
    }
    else 
         #line 2451 
         __VERIFIER_assume(0);
  }
  #line 2457 
  return (void *)0;
  #line 2460 
  emg_thlate_24: 
                 #line 2460 
  ;
  #line 2462 
  if (emg_24_pm_ops->thaw_early != (int (*)(struct device *))0) 
                                                                #line 2463 
                                                                emg_24_ret = (*(emg_24_pm_ops->thaw_early))(emg_24_device); else 
                                                                    #line 2465 
                                                                    emg_24_ret = ldv_undef_int();
  #line 2471 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 2474 
  if (ldv_undef_int() != 0) {
    #line 2476 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 2480 
    goto emg_th_24;
  }
  else 
       #line 2485 
       __VERIFIER_assume(emg_24_ret != 0);
  #line 2489 
  if (emg_repeat_cnt_thlate_24 > 0) {
    #line 2490 
    emg_repeat_cnt_thlate_24 --;
    #line 2492 
    goto emg_thlate_24;
  }
  else 
       #line 2494 
       __VERIFIER_assume(0);
  #line 2499 
  return (void *)0;
  #line 2502 
  emg_tnoirq_24: 
                 #line 2502 
  ;
  #line 2504 
  if (emg_24_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
                                                                #line 2505 
                                                                emg_24_ret = (*(emg_24_pm_ops->thaw_noirq))(emg_24_device); else 
                                                                    #line 2507 
                                                                    emg_24_ret = ldv_undef_int();
  #line 2513 
  emg_24_ret = ldv_post_probe(emg_24_ret);
  #line 2516 
  if (ldv_undef_int() != 0) {
    #line 2518 
    __VERIFIER_assume(emg_24_ret == 0);
    #line 2522 
    goto emg_th_24;
  }
  else 
       #line 2527 
       __VERIFIER_assume(emg_24_ret != 0);
  #line 2531 
  if (emg_repeat_cnt_tnoirq_24 > 0) {
    #line 2532 
    emg_repeat_cnt_tnoirq_24 --;
    #line 2534 
    goto emg_tnoirq_24;
  }
  else 
       #line 2536 
       __VERIFIER_assume(0);
  #line 2541 
  return (void *)0;
}

#line 2546  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_10(void *arg0)
{
  #line 2549 
  struct timer_list *emg_25_container;
  #line 2550 
  unsigned long emg_25_emg_param_0_0;
  #line 2552 
  struct emg_struct_timer_scenario_10_25 *data = (struct emg_struct_timer_scenario_10_25 *)arg0;
  #line 2557 
  if (data != (struct emg_struct_timer_scenario_10_25 *)0) {
    #line 2558 
    emg_25_container = data->arg0;
    #line 2559 
    ldv_free((void *)data);
  }
  #line 2565 
  ldv_switch_to_interrupt_context();
  #line 2569 
  if (emg_25_container->function != (void (*)(struct timer_list *))0) 
    #line 2570 
    (*(emg_25_container->function))((struct timer_list *)emg_25_emg_param_0_0);
  #line 2576 
  ldv_switch_to_process_context();
  #line 2583 
  return (void *)0;
}

#line 2588  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 2591 
  struct pci_driver *emg_2_pci_driver;
  #line 2593 
  emg_2_pci_driver = emg_alias_e1000_driver;
  #line 2594 
  if (ldv_undef_int() != 0) {
    #line 2596 
    emg_2_pci_driver = arg0;
    #line 2600 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 2604 
    return 0;
  }
  else {
    #line 2608 
    return ldv_undef_int_negative();
  }
}

#line 2616  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 2619 
  struct net_device *emg_3_netdev;
  #line 2621 
  if (ldv_undef_int() != 0) {
    #line 2623 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 2627 
    return emg_3_netdev;
  }
  else 
       #line 2631 
       return (struct net_device *)0;
}

#line 2639  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 2642 
  struct timer_list *emg_4_timer_list;
  #line 2645 
  emg_4_timer_list = arg0;
  #line 2649 
  emg_dispatch_instance_deregister_4(emg_4_timer_list);
  #line 2650 
  ;
  #line 2650 
  return 0;
}

#line 2656  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 2659 
  int emg_5_line;
  #line 2662 
  emg_5_line = (int)arg0;
  #line 2666 
  emg_dispatch_irq_deregister_5(emg_5_line);
  #line 2667 
  ;
  #line 2667 
  return (void *)0;
}

#line 2673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 2676 
  struct net_device *emg_6_netdev;
  #line 2679 
  emg_6_netdev = arg0;
  #line 2680 
  ldv_free((void *)emg_6_netdev);
  #line 2683 
  return;
}

#line 2688  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 2691 
  struct timer_list *emg_7_timer_list;
  #line 2693 
  if (ldv_undef_int() != 0) {
    #line 2695 
    emg_7_timer_list = arg0;
    #line 2699 
    emg_dispatch_instance_register_7(emg_7_timer_list);
    #line 2703 
    return 1;
  }
  else 
       #line 2707 
       return 0;
}

#line 2715  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 2718 
  struct pci_driver *emg_8_pci_driver;
  #line 2720 
  emg_8_pci_driver = emg_alias_e1000_driver;
  #line 2722 
  emg_8_pci_driver = arg0;
  #line 2726 
  emg_dispatch_deregister_8(emg_8_pci_driver);
  #line 2729 
  return;
}

#line 2734  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_pm_runtime_suspended(struct device *arg0)
{
  #line 2739 
  return (_Bool)(emg_runtime_lowpower != 0);
}

#line 2746  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 2749 
  struct net_device *emg_10_netdev;
  #line 2750 
  int emg_10_ret;
  #line 2753 
  emg_10_ret = ldv_undef_int();
  #line 2754 
  emg_10_ret = ldv_undef_int();
  #line 2755 
  if (ldv_undef_int() != 0) {
    #line 2757 
    emg_10_netdev = arg0;
    #line 2761 
    emg_10_ret = e1000e_open(emg_10_netdev);
    #line 2764 
    if (ldv_undef_int() != 0) {
      #line 2766 
      __VERIFIER_assume(emg_10_ret == 0);
      #line 2770 
      emg_dispatch_register_10(emg_10_netdev);
      #line 2774 
      return 0;
    }
    else {
      #line 2778 
      __VERIFIER_assume(emg_10_ret != 0);
      #line 2779 
      ldv_failed_register_netdev();
      #line 2780 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 2785 
    ldv_failed_register_netdev();
    #line 2786 
    return ldv_undef_int_negative();
  }
}

#line 2794  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 2797 
  enum irqreturn (*emg_11_callback)(int , void *);
  #line 2798 
  void *emg_11_data;
  #line 2799 
  int emg_11_line;
  #line 2800 
  enum irqreturn (*emg_11_thread)(int , void *);
  #line 2802 
  emg_11_callback = & emg_wrapper_e1000_intr;
  #line 2803 
  if (ldv_undef_int() != 0) {
    #line 2805 
    emg_11_line = (int)arg0;
    #line 2806 
    emg_11_callback = arg1;
    #line 2807 
    emg_11_thread = (enum irqreturn (*)(int , void *))0;
    #line 2808 
    emg_11_data = arg4;
    #line 2812 
    emg_dispatch_irq_register_11(emg_11_line,emg_11_callback,emg_11_thread,emg_11_data);
    #line 2816 
    return 0;
  }
  else {
    #line 2820 
    return ldv_undef_int_negative();
  }
}

#line 2828  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1)
{
  #line 2831 
  struct delayed_work *emg_12_delayed_work;
  #line 2832 
  struct work_struct *emg_12_emg_param_0_0;
  #line 2834 
  if (ldv_undef_int() != 0) {
    #line 2836 
    emg_12_delayed_work = arg0;
    #line 2840 
    emg_12_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 2840 
    emg_12_emg_param_0_0 = emg_12_emg_param_0_0;
    #line 2844 
    if (emg_12_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 2845 
      (*(emg_12_delayed_work->work.func))(emg_12_emg_param_0_0);
    #line 2850 
    ldv_free((void *)emg_12_emg_param_0_0);
    #line 2854 
    return (_Bool)1;
  }
  else 
       #line 2858 
       return (_Bool)0;
}

#line 2866  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 2869 
  struct work_struct *emg_13_work_struct;
  #line 2871 
  if (ldv_undef_int() != 0) {
    #line 2873 
    emg_13_work_struct = arg0;
    #line 2877 
    if (emg_13_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 2878 
      (*(emg_13_work_struct->func))(emg_13_work_struct);
    #line 2883 
    return (_Bool)1;
  }
  else 
       #line 2887 
       return (_Bool)0;
}

#line 2895  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 2898 
  struct net_device *emg_14_netdev;
  #line 2901 
  emg_14_netdev = arg0;
  #line 2905 
  e1000e_close(emg_14_netdev);
  #line 2909 
  emg_dispatch_deregister_14(emg_14_netdev);
  #line 2912 
  return;
}

#line 2917  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 2920 
  int emg_1_ret;
  #line 2923 
  emg_1_ret = emg_e1000_init_module();
  #line 2924 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 2927 
  if (ldv_undef_int() != 0) {
    #line 2929 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 2933 
    emg_e1000_exit_module();
  }
  else 
       #line 2937 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 2941 
  return (void *)0;
}

#line 2946  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 2948 
  ldv_initialize();
  #line 2950 
  emg_entry_point_insmod((void *)0);
  #line 2952 
  return 0;
}

