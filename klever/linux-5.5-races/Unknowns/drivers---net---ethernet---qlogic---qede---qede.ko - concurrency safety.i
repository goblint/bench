/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_13 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_15 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_17 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_21 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_23 {
   struct hlist_node *__val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
struct __anonstruct_nodemask_t_161 {
   unsigned long bits[16U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
typedef struct __anonstruct_nodemask_t_161 nodemask_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 194 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 212 
struct ldt_struct;
#line 212 
struct vdso_image;
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct __anonstruct_mm_context_t_162 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
typedef struct __anonstruct_mm_context_t_162 mm_context_t;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
struct notifier_block;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct workqueue_struct;
#line 48 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_184 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_185 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_183 {
   struct __anonstruct_184 __anonCompField___anonunion_183_29 ;
   struct __anonstruct_185 __anonCompField___anonunion_183_30 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_183 __anonCompField_uprobe_task_31 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct address_space;
#line 141 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_187 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_188 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_191 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_190 {
   struct list_head slab_list ;
   struct __anonstruct_191 __anonCompField___anonunion_190_34 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_193 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_192 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_193 __anonCompField___anonunion_192_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_189 {
   union __anonunion_190 __anonCompField___anonstruct_189_35 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_192 __anonCompField___anonstruct_189_37 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_194 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_195 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_197 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_196 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_197 __anonCompField___anonstruct_196_41 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_198 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_186 {
   struct __anonstruct_187 __anonCompField___anonunion_186_32 ;
   struct __anonstruct_188 __anonCompField___anonunion_186_33 ;
   struct __anonstruct_189 __anonCompField___anonunion_186_38 ;
   struct __anonstruct_194 __anonCompField___anonunion_186_39 ;
   struct __anonstruct_195 __anonCompField___anonunion_186_40 ;
   struct __anonstruct_196 __anonCompField___anonunion_186_42 ;
   struct __anonstruct_198 __anonCompField___anonunion_186_43 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_199 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_186 __anonCompField_page_44 ;
   union __anonunion_199 __anonCompField_page_45 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278 
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_200 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_200 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_201 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_201 __anonCompField_mm_struct_46 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_252 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_252 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_253 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_253 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sched.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_280 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_280 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_281 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_282 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_283 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_284 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_287 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_288 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_286 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_287 _addr_bnd ;
   struct __anonstruct__addr_pkey_288 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_285 {
   void *_addr ;
   union __anonunion_286 __anonCompField___anonstruct__sigfault_285_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_289 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_290 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_281 _kill ;
   struct __anonstruct__timer_282 _timer ;
   struct __anonstruct__rt_283 _rt ;
   struct __anonstruct__sigchld_284 _sigchld ;
   struct __anonstruct__sigfault_285 _sigfault ;
   struct __anonstruct__sigpoll_289 _sigpoll ;
   struct __anonstruct__sigsys_290 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_295 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_295 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_300 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_300 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_302 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_302 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_381 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_383 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_382 {
   unsigned long nr_segs ;
   struct __anonstruct_383 __anonCompField___anonunion_382_54 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_381 __anonCompField_iov_iter_53 ;
   union __anonunion_382 __anonCompField_iov_iter_55 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_386 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_386 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_387 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_387 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_388 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_388 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_389 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_389 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_390 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_390 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_391 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_391 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_392 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_392 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_393 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_393 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_394 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_395 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_394 ifr_ifrn ;
   union __anonunion_ifr_ifru_395 ifr_ifru ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_410 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_409 {
   struct __anonstruct_410 __anonCompField___anonunion_409_58 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_409 __anonCompField_lockref_59 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_412 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_411 {
   struct __anonstruct_412 __anonCompField___anonunion_411_60 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_411 __anonCompField_qstr_61 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_413 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_414 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_413 __anonCompField_dentry_62 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_414 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_432 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_432 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_433 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_434 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_433 __anonCompField_io_cq_65 ;
   union __anonunion_434 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bdi_writeback;
#line 287 
struct bio;
#line 288 
struct export_operations;
#line 289 
struct hd_geometry;
#line 290 
struct kobject;
#line 291 
struct poll_table_struct;
#line 292 
struct kstatfs;
#line 293 
struct swap_info_struct;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_context;
#line 299 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_435 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_435 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_436 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_436 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
struct writeback_control;
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_438 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_437 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_438 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_437 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_443 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_444 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_441 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_442 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_443 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_444 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_445 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_445 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_447 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_446 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_447 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_446 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9120 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9120 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_495 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_495 __anonCompField_kernfs_node_73 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_498 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_498 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_499 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_499 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_basic {
   __be16 n_proto ;
   u8 ip_proto ;
   u8 padding ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv4_addrs {
   __be32 src ;
   __be32 dst ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv6_addrs {
   struct in6_addr src ;
   struct in6_addr dst ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_505 {
   __be16 src ;
   __be16 dst ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_504 {
   __be32 ports ;
   struct __anonstruct_505 __anonCompField___anonunion_504_77 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ports {
   union __anonunion_504 __anonCompField_flow_dissector_key_ports_78 ;
};
#line 231 
enum flow_dissector_key_id {
    FLOW_DISSECTOR_KEY_CONTROL = 0,
    FLOW_DISSECTOR_KEY_BASIC = 1,
    FLOW_DISSECTOR_KEY_IPV4_ADDRS = 2,
    FLOW_DISSECTOR_KEY_IPV6_ADDRS = 3,
    FLOW_DISSECTOR_KEY_PORTS = 4,
    FLOW_DISSECTOR_KEY_PORTS_RANGE = 5,
    FLOW_DISSECTOR_KEY_ICMP = 6,
    FLOW_DISSECTOR_KEY_ETH_ADDRS = 7,
    FLOW_DISSECTOR_KEY_TIPC = 8,
    FLOW_DISSECTOR_KEY_ARP = 9,
    FLOW_DISSECTOR_KEY_VLAN = 10,
    FLOW_DISSECTOR_KEY_FLOW_LABEL = 11,
    FLOW_DISSECTOR_KEY_GRE_KEYID = 12,
    FLOW_DISSECTOR_KEY_MPLS_ENTROPY = 13,
    FLOW_DISSECTOR_KEY_ENC_KEYID = 14,
    FLOW_DISSECTOR_KEY_ENC_IPV4_ADDRS = 15,
    FLOW_DISSECTOR_KEY_ENC_IPV6_ADDRS = 16,
    FLOW_DISSECTOR_KEY_ENC_CONTROL = 17,
    FLOW_DISSECTOR_KEY_ENC_PORTS = 18,
    FLOW_DISSECTOR_KEY_MPLS = 19,
    FLOW_DISSECTOR_KEY_TCP = 20,
    FLOW_DISSECTOR_KEY_IP = 21,
    FLOW_DISSECTOR_KEY_CVLAN = 22,
    FLOW_DISSECTOR_KEY_ENC_IP = 23,
    FLOW_DISSECTOR_KEY_ENC_OPTS = 24,
    FLOW_DISSECTOR_KEY_META = 25,
    FLOW_DISSECTOR_KEY_CT = 26,
    FLOW_DISSECTOR_KEY_MAX = 27
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector {
   unsigned int used_keys ;
   unsigned short offset[27U] ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_510 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_511 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_512 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_513 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_510 ports ;
   struct __anonstruct_icmpt_511 icmpt ;
   struct __anonstruct_dnports_512 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_513 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_514 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_514 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_521 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_520 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_521 __anonCompField___anonstruct_520_86 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_519 {
   struct __anonstruct_520 __anonCompField___anonunion_519_87 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_522 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_523 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_525 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_524 {
   struct __anonstruct_525 __anonCompField___anonunion_524_91 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_527 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_526 {
   __wsum csum ;
   struct __anonstruct_527 __anonCompField___anonunion_526_93 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_528 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_529 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_530 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_519 __anonCompField_sk_buff_88 ;
   union __anonunion_522 __anonCompField_sk_buff_89 ;
   union __anonunion_523 __anonCompField_sk_buff_90 ;
   char cb[48U] ;
   union __anonunion_524 __anonCompField_sk_buff_92 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_526 __anonCompField_sk_buff_94 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_528 __anonCompField_sk_buff_95 ;
   __u32 secmark ;
   union __anonunion_529 __anonCompField_sk_buff_96 ;
   union __anonunion_530 __anonCompField_sk_buff_97 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 973 
struct rtable;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 409 
struct flow_rule;
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_rx_flow_rule {
   struct flow_rule *rule ;
   unsigned long priv[0U] ;
};
#line 414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_rx_flow_spec_input {
   struct ethtool_rx_flow_spec *fs ;
   u32 rss_ctx ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_647 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_646 {
   struct __anonstruct_647 __anonCompField___anonunion_646_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_646 __anonCompField_sock_cgroup_data_152 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14504 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14505 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14504 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14505 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_691 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_691 __anonCompField_bdi_writeback_160 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_692 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_692 __anonCompField_bio_161 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_695 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_696 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_698 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_699 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_697 {
   struct __anonstruct_elv_698 elv ;
   struct __anonstruct_flush_699 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_700 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_695 __anonCompField_request_162 ;
   union __anonunion_696 __anonCompField_request_163 ;
   union __anonunion_697 __anonCompField_request_164 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_700 __anonCompField_request_165 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_719 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_719 __anonCompField_kernel_param_166 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_727 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_726 {
   void *validation_data ;
   struct __anonstruct_727 __anonCompField___anonunion_726_167 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_726 __anonCompField_nla_policy_168 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match {
   struct flow_dissector *dissector ;
   void *mask ;
   void *key ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_basic {
   struct flow_dissector_key_basic *key ;
   struct flow_dissector_key_basic *mask ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_ipv4_addrs {
   struct flow_dissector_key_ipv4_addrs *key ;
   struct flow_dissector_key_ipv4_addrs *mask ;
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_ipv6_addrs {
   struct flow_dissector_key_ipv6_addrs *key ;
   struct flow_dissector_key_ipv6_addrs *mask ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_ports {
   struct flow_dissector_key_ports *key ;
   struct flow_dissector_key_ports *mask ;
};
#line 112 
enum flow_action_id {
    FLOW_ACTION_ACCEPT = 0,
    FLOW_ACTION_DROP = 1,
    FLOW_ACTION_TRAP = 2,
    FLOW_ACTION_GOTO = 3,
    FLOW_ACTION_REDIRECT = 4,
    FLOW_ACTION_MIRRED = 5,
    FLOW_ACTION_REDIRECT_INGRESS = 6,
    FLOW_ACTION_MIRRED_INGRESS = 7,
    FLOW_ACTION_VLAN_PUSH = 8,
    FLOW_ACTION_VLAN_POP = 9,
    FLOW_ACTION_VLAN_MANGLE = 10,
    FLOW_ACTION_TUNNEL_ENCAP = 11,
    FLOW_ACTION_TUNNEL_DECAP = 12,
    FLOW_ACTION_MANGLE = 13,
    FLOW_ACTION_ADD = 14,
    FLOW_ACTION_CSUM = 15,
    FLOW_ACTION_MARK = 16,
    FLOW_ACTION_PTYPE = 17,
    FLOW_ACTION_WAKE = 18,
    FLOW_ACTION_QUEUE = 19,
    FLOW_ACTION_SAMPLE = 20,
    FLOW_ACTION_POLICE = 21,
    FLOW_ACTION_CT = 22,
    FLOW_ACTION_MPLS_PUSH = 23,
    FLOW_ACTION_MPLS_POP = 24,
    FLOW_ACTION_MPLS_MANGLE = 25,
    NUM_FLOW_ACTIONS = 26
};
#line 142 
enum flow_action_mangle_base {
    FLOW_ACT_MANGLE_UNSPEC = 0,
    FLOW_ACT_MANGLE_HDR_TYPE_ETH = 1,
    FLOW_ACT_MANGLE_HDR_TYPE_IP4 = 2,
    FLOW_ACT_MANGLE_HDR_TYPE_IP6 = 3,
    FLOW_ACT_MANGLE_HDR_TYPE_TCP = 4,
    FLOW_ACT_MANGLE_HDR_TYPE_UDP = 5
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_vlan_785 {
   u16 vid ;
   __be16 proto ;
   u8 prio ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mangle_786 {
   enum flow_action_mangle_base htype ;
   u32 offset ;
   u32 mask ;
   u32 val ;
};
#line 159 
struct ip_tunnel_info;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_queue_787 {
   u32 ctx ;
   u32 index ;
   u8 vf ;
};
#line 159 
struct psample_group;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_sample_788 {
   struct psample_group *psample_group ;
   u32 rate ;
   u32 trunc_size ;
   bool truncate ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_police_789 {
   s64 burst ;
   u64 rate_bytes_ps ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_ct_790 {
   int action ;
   u16 zone ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mpls_push_791 {
   u32 label ;
   __be16 proto ;
   u8 tc ;
   u8 bos ;
   u8 ttl ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mpls_pop_792 {
   __be16 proto ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mpls_mangle_793 {
   u32 label ;
   u8 tc ;
   u8 bos ;
   u8 ttl ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
union __anonunion_784 {
   u32 chain_index ;
   struct net_device *dev ;
   struct __anonstruct_vlan_785 vlan ;
   struct __anonstruct_mangle_786 mangle ;
   struct ip_tunnel_info *tunnel ;
   u32 csum_flags ;
   u32 mark ;
   u16 ptype ;
   struct __anonstruct_queue_787 queue ;
   struct __anonstruct_sample_788 sample ;
   struct __anonstruct_police_789 police ;
   struct __anonstruct_ct_790 ct ;
   struct __anonstruct_mpls_push_791 mpls_push ;
   struct __anonstruct_mpls_pop_792 mpls_pop ;
   struct __anonstruct_mpls_mangle_793 mpls_mangle ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_action_entry {
   enum flow_action_id id ;
   void (*destructor)(void *) ;
   void *destructor_priv ;
   union __anonunion_784 __anonCompField_flow_action_entry_169 ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_action {
   unsigned int num_entries ;
   struct flow_action_entry entries[0U] ;
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_rule {
   struct flow_match match ;
   struct flow_action action ;
};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_stats {
   u64 pkts ;
   u64 bytes ;
   u64 lastused ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 341 
enum flow_cls_command {
    FLOW_CLS_REPLACE = 0,
    FLOW_CLS_DESTROY = 1,
    FLOW_CLS_STATS = 2,
    FLOW_CLS_TMPLT_CREATE = 3,
    FLOW_CLS_TMPLT_DESTROY = 4
};
#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_cls_common_offload {
   u32 chain_index ;
   __be16 protocol ;
   u32 prio ;
   struct netlink_ext_ack *extack ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_cls_offload {
   struct flow_cls_common_offload common ;
   enum flow_cls_command command ;
   unsigned long cookie ;
   struct flow_rule *rule ;
   struct flow_stats stats ;
   u32 classid ;
};
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_801 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_802 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_800 {
   struct __anonstruct_801 __anonCompField___anonunion_800_170 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_802 __anonCompField___anonunion_800_171 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_800 __anonCompField_tcf_result_172 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_804 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_804 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_817 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_817 __anonCompField_bpf_prog_174 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_metrics {
   u32 metrics[17U] ;
   refcount_t refcnt ;
} __attribute__((__aligned__(4)));
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_839 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_839 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_841 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_840 {
   __addrpair skc_addrpair ;
   struct __anonstruct_841 __anonCompField___anonunion_840_176 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_842 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_844 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_843 {
   __portpair skc_portpair ;
   struct __anonstruct_844 __anonCompField___anonunion_843_179 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_846 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_840 __anonCompField_sock_common_177 ;
   union __anonunion_842 __anonCompField_sock_common_178 ;
   union __anonunion_843 __anonCompField_sock_common_180 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_845 __anonCompField_sock_common_181 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_846 __anonCompField_sock_common_182 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_847 __anonCompField_sock_common_183 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_848 __anonCompField_sock_common_184 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_849 __anonCompField_sock_common_185 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_850 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_852 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_850 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_851 __anonCompField_sock_186 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_852 __anonCompField_sock_187 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_887 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_887 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct __anonstruct_s_960 {
   unsigned int len ;
   struct callback_head rcu ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
union __anonunion_959 {
   struct __anonstruct_s_960 s ;
   void *ptr[0U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct net_generic {
   union __anonunion_959 __anonCompField_net_generic_190 ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 261 
struct fib6_nh;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_exception {
   struct fib_nh_exception *fnhe_next ;
   int fnhe_genid ;
   __be32 fnhe_daddr ;
   u32 fnhe_pmtu ;
   bool fnhe_mtu_locked ;
   __be32 fnhe_gw ;
   unsigned long fnhe_expires ;
   struct rtable *fnhe_rth_input ;
   struct rtable *fnhe_rth_output ;
   unsigned long fnhe_stamp ;
   struct callback_head rcu ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fnhe_hash_bucket {
   struct fib_nh_exception *chain ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
union __anonunion_nhc_gw_978 {
   __be32 ipv4 ;
   struct in6_addr ipv6 ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_common {
   struct net_device *nhc_dev ;
   int nhc_oif ;
   unsigned char nhc_scope ;
   u8 nhc_family ;
   u8 nhc_gw_family ;
   unsigned char nhc_flags ;
   struct lwtunnel_state *nhc_lwtstate ;
   union __anonunion_nhc_gw_978 nhc_gw ;
   int nhc_weight ;
   atomic_t nhc_upper_bound ;
   struct rtable **nhc_pcpu_rth_output ;
   struct rtable *nhc_rth_input ;
   struct fnhe_hash_bucket *nhc_exceptions ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh {
   struct fib_nh_common nh_common ;
   struct hlist_node nh_hash ;
   struct fib_info *nh_parent ;
   __u32 nh_tclassid ;
   __be32 nh_saddr ;
   int nh_saddr_genid ;
};
#line 113 
struct nexthop;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info {
   struct hlist_node fib_hash ;
   struct hlist_node fib_lhash ;
   struct list_head nh_list ;
   struct net *fib_net ;
   int fib_treeref ;
   refcount_t fib_clntref ;
   unsigned int fib_flags ;
   unsigned char fib_dead ;
   unsigned char fib_protocol ;
   unsigned char fib_scope ;
   unsigned char fib_type ;
   __be32 fib_prefsrc ;
   u32 fib_tb_id ;
   u32 fib_priority ;
   struct dst_metrics *fib_metrics ;
   int fib_nhs ;
   bool fib_nh_is_v6 ;
   bool nh_updated ;
   struct nexthop *nh ;
   struct callback_head rcu ;
   struct fib_nh fib_nh[0U] ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/route.h"
struct uncached_list;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
union __anonunion_987 {
   __be32 rt_gw4 ;
   struct in6_addr rt_gw6 ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   u8 rt_gw_family ;
   union __anonunion_987 __anonCompField_rtable_195 ;
   u32 rt_mtu_locked : 1 ;
   u32 rt_pmtu : 31 ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lwtunnel.h"
struct lwtunnel_state {
   __u16 type ;
   __u16 flags ;
   __u16 headroom ;
   atomic_t refcnt ;
   int (*orig_output)(struct net *, struct sock *, struct sk_buff *) ;
   int (*orig_input)(struct sk_buff *) ;
   struct callback_head rcu ;
   __u8 data[0U] ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_node {
   struct fib6_node *parent ;
   struct fib6_node *left ;
   struct fib6_node *right ;
   struct fib6_node *subtree ;
   struct fib6_info *leaf ;
   __u16 fn_bit ;
   __u16 fn_flags ;
   int fn_sernum ;
   struct fib6_info *rr_ptr ;
   struct callback_head rcu ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6key {
   struct in6_addr addr ;
   int plen ;
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_exception_bucket {
   struct hlist_head chain ;
   int depth ;
};
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_nh {
   struct fib_nh_common nh_common ;
   unsigned long last_probe ;
   struct rt6_info **rt6i_pcpu ;
   struct rt6_exception_bucket *rt6i_exception_bucket ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
union __anonunion_988 {
   struct list_head fib6_siblings ;
   struct list_head nh_list ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_info {
   struct fib6_table *fib6_table ;
   struct fib6_info *fib6_next ;
   struct fib6_node *fib6_node ;
   union __anonunion_988 __anonCompField_fib6_info_196 ;
   unsigned int fib6_nsiblings ;
   refcount_t fib6_ref ;
   unsigned long expires ;
   struct dst_metrics *fib6_metrics ;
   struct rt6key fib6_dst ;
   u32 fib6_flags ;
   struct rt6key fib6_src ;
   struct rt6key fib6_prefsrc ;
   u32 fib6_metric ;
   u8 fib6_protocol ;
   u8 fib6_type ;
   u8 should_flush : 1 ;
   u8 dst_nocount : 1 ;
   u8 dst_nopolicy : 1 ;
   u8 dst_host : 1 ;
   u8 fib6_destroying : 1 ;
   u8 unused : 3 ;
   struct callback_head rcu ;
   struct nexthop *nh ;
   struct fib6_nh fib6_nh[0U] ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_info {
   struct dst_entry dst ;
   struct fib6_info *from ;
   struct rt6key rt6i_dst ;
   struct rt6key rt6i_src ;
   struct in6_addr rt6i_gateway ;
   struct inet6_dev *rt6i_idev ;
   u32 rt6i_flags ;
   struct list_head rt6i_uncached ;
   struct uncached_list *rt6i_uncached_list ;
   unsigned short rt6i_nfheader_len ;
};
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_statistics {
   __u32 fib_nodes ;
   __u32 fib_route_nodes ;
   __u32 fib_rt_entries ;
   __u32 fib_rt_cache ;
   __u32 fib_discarded_routes ;
   atomic_t fib_rt_alloc ;
   atomic_t fib_rt_uncache ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_table {
   struct hlist_node tb6_hlist ;
   u32 tb6_id ;
   spinlock_t tb6_lock ;
   struct fib6_node tb6_root ;
   struct inet_peer_base tb6_peers ;
   unsigned int flags ;
   unsigned int fib_seq ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_cache.h"
struct dst_cache_pcpu;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_cache.h"
struct dst_cache {
   struct dst_cache_pcpu *cache ;
   unsigned long reset_ts ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/addrconf.h"
struct prefix_info {
   __u8 type ;
   __u8 length ;
   __u8 prefix_len ;
   __u8 reserved : 6 ;
   __u8 autoconf : 1 ;
   __u8 onlink : 1 ;
   __be32 valid ;
   __be32 prefered ;
   __be32 reserved2 ;
   struct in6_addr prefix ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_1002 {
   struct fib_nh_common fib_nhc ;
   struct fib_nh fib_nh ;
   struct fib6_nh fib6_nh ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_info {
   struct hlist_node dev_hash ;
   struct nexthop *nh_parent ;
   u8 family ;
   bool reject_nh ;
   union __anonunion_1002 __anonCompField_nh_info_197 ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_grp_entry {
   struct nexthop *nh ;
   u8 weight ;
   atomic_t upper_bound ;
   struct list_head nh_list ;
   struct nexthop *nh_parent ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_group {
   u16 num_nh ;
   bool mpath ;
   bool has_v4 ;
   struct nh_grp_entry nh_entries[0U] ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_1003 {
   struct nh_info *nh_info ;
   struct nh_group *nh_grp ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nexthop {
   struct rb_node rb_node ;
   struct list_head fi_list ;
   struct list_head f6i_list ;
   struct list_head grp_list ;
   struct net *net ;
   u32 id ;
   u8 protocol ;
   u8 nh_flags ;
   bool is_group ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   union __anonunion_1003 __anonCompField_nexthop_198 ;
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_tunnels.h"
struct __anonstruct_ipv4_1023 {
   __be32 src ;
   __be32 dst ;
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_tunnels.h"
struct __anonstruct_ipv6_1024 {
   struct in6_addr src ;
   struct in6_addr dst ;
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_tunnels.h"
union __anonunion_u_1022 {
   struct __anonstruct_ipv4_1023 ipv4 ;
   struct __anonstruct_ipv6_1024 ipv6 ;
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_tunnels.h"
struct ip_tunnel_key {
   __be64 tun_id ;
   union __anonunion_u_1022 u ;
   __be16 tun_flags ;
   u8 tos ;
   u8 ttl ;
   __be32 label ;
   __be16 tp_src ;
   __be16 tp_dst ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_tunnels.h"
struct ip_tunnel_info {
   struct ip_tunnel_key key ;
   struct dst_cache dst_cache ;
   u8 options_len ;
   u8 mode ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_1029 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_1029 __anonCompField_ip_ra_chain_199 ;
   struct callback_head rcu ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_hslot {
   struct hlist_head head ;
   int count ;
   spinlock_t lock ;
} __attribute__((__aligned__(16)));
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_table {
   struct udp_hslot *hash ;
   struct udp_hslot *hash2 ;
   unsigned int mask ;
   unsigned int log ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp_tunnel.h"
struct udp_tunnel_info {
   unsigned short type ;
   sa_family_t sa_family ;
   __be16 port ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp_tunnel.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_1042 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_1042 __anonCompField_pci_dev_202 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 1236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/common_hsi.h"
struct status_block_e4 {
   __le16 pi_array[12U] ;
   __le32 sb_num ;
   __le32 prod_index ;
};
#line 1380 
enum qed_chain_mode {
    QED_CHAIN_MODE_NEXT_PTR = 0,
    QED_CHAIN_MODE_SINGLE = 1,
    QED_CHAIN_MODE_PBL = 2
};
#line 1386 
enum qed_chain_use_mode {
    QED_CHAIN_USE_TO_PRODUCE = 0,
    QED_CHAIN_USE_TO_CONSUME = 1,
    QED_CHAIN_USE_TO_CONSUME_PRODUCE = 2
};
#line 1392 
enum qed_chain_cnt_type {
    QED_CHAIN_CNT_TYPE_U16 = 0,
    QED_CHAIN_CNT_TYPE_U32 = 1
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
struct qed_chain_pbl_u16 {
   u16 prod_page_idx ;
   u16 cons_page_idx ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
struct qed_chain_pbl_u32 {
   u32 prod_page_idx ;
   u32 cons_page_idx ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
struct qed_chain_ext_pbl {
   dma_addr_t p_pbl_phys ;
   void *p_pbl_virt ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
struct qed_chain_u16 {
   u16 prod_idx ;
   u16 cons_idx ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
struct qed_chain_u32 {
   u32 prod_idx ;
   u32 cons_idx ;
};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
union __anonunion_c_1044 {
   struct qed_chain_pbl_u16 u16 ;
   struct qed_chain_pbl_u32 u32 ;
};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
struct __anonstruct_pbl_1043 {
   void **pp_virt_addr_tbl ;
   union __anonunion_c_1044 c ;
};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
union __anonunion_u_1045 {
   struct qed_chain_u16 chain16 ;
   struct qed_chain_u32 chain32 ;
};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
struct __anonstruct_pbl_sp_1046 {
   dma_addr_t p_phys_table ;
   void *p_virt_table ;
};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
struct qed_chain {
   void *p_prod_elem ;
   void *p_cons_elem ;
   struct __anonstruct_pbl_1043 pbl ;
   union __anonunion_u_1045 u ;
   u32 capacity ;
   u32 page_cnt ;
   enum qed_chain_mode mode ;
   u16 elem_per_page ;
   u16 elem_per_page_mask ;
   u16 elem_size ;
   u16 next_page_mask ;
   u16 usable_per_page ;
   u8 elem_unusable ;
   u8 cnt_type ;
   struct __anonstruct_pbl_sp_1046 pbl_sp ;
   void *p_virt_addr ;
   dma_addr_t p_phys_addr ;
   u32 size ;
   u8 intended_use ;
   bool b_external_pbl ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io-64-nonatomic-lo-hi.h"
enum dcbx_protocol_type {
    DCBX_PROTOCOL_ISCSI = 0,
    DCBX_PROTOCOL_FCOE = 1,
    DCBX_PROTOCOL_ROCE = 2,
    DCBX_PROTOCOL_ROCE_V2 = 3,
    DCBX_PROTOCOL_ETH = 4,
    DCBX_MAX_PROTOCOL_TYPE = 5
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_dcbx_lldp_remote {
   u32 peer_chassis_id[4U] ;
   u32 peer_port_id[4U] ;
   bool enable_rx ;
   bool enable_tx ;
   u32 tx_interval ;
   u32 max_credit ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_dcbx_lldp_local {
   u32 local_chassis_id[4U] ;
   u32 local_port_id[4U] ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_dcbx_app_prio {
   u8 roce ;
   u8 roce_v2 ;
   u8 fcoe ;
   u8 iscsi ;
   u8 eth ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_dbcx_pfc_params {
   bool willing ;
   bool enabled ;
   u8 prio[8U] ;
   u8 max_tc ;
};
#line 96 
enum qed_dcbx_sf_ieee_type {
    QED_DCBX_SF_IEEE_ETHTYPE = 0,
    QED_DCBX_SF_IEEE_TCP_PORT = 1,
    QED_DCBX_SF_IEEE_UDP_PORT = 2,
    QED_DCBX_SF_IEEE_TCP_UDP_PORT = 3
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_app_entry {
   bool ethtype ;
   enum qed_dcbx_sf_ieee_type sf_ieee ;
   bool enabled ;
   u8 prio ;
   u16 proto_id ;
   enum dcbx_protocol_type proto_type ;
};
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_dcbx_params {
   struct qed_app_entry app_entry[32U] ;
   u16 num_app_entries ;
   bool app_willing ;
   bool app_valid ;
   bool app_error ;
   bool ets_willing ;
   bool ets_enabled ;
   bool ets_cbs ;
   bool valid ;
   u8 ets_pri_tc_tbl[8U] ;
   u8 ets_tc_bw_tbl[8U] ;
   u8 ets_tc_tsa_tbl[8U] ;
   struct qed_dbcx_pfc_params pfc ;
   u8 max_ets_tc ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_dcbx_admin_params {
   struct qed_dcbx_params params ;
   bool valid ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_dcbx_remote_params {
   struct qed_dcbx_params params ;
   bool valid ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_dcbx_operational_params {
   struct qed_dcbx_app_prio app_prio ;
   struct qed_dcbx_params params ;
   bool valid ;
   bool enabled ;
   bool ieee ;
   bool cee ;
   bool local ;
   u32 err ;
};
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_dcbx_get {
   struct qed_dcbx_operational_params operational ;
   struct qed_dcbx_lldp_remote lldp_remote ;
   struct qed_dcbx_lldp_local lldp_local ;
   struct qed_dcbx_remote_params remote ;
   struct qed_dcbx_admin_params local ;
};
#line 158 
enum qed_nvm_images {
    QED_NVM_IMAGE_ISCSI_CFG = 0,
    QED_NVM_IMAGE_FCOE_CFG = 1,
    QED_NVM_IMAGE_NVM_CFG1 = 2,
    QED_NVM_IMAGE_DEFAULT_CFG = 3,
    QED_NVM_IMAGE_NVM_META = 4
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_link_eee_params {
   u32 tx_lpi_timer ;
   u8 adv_caps ;
   u8 lp_adv_caps ;
   bool enable ;
   bool tx_lpi_enable ;
};
#line 178 
enum qed_led_mode {
    QED_LED_MODE_OFF = 0,
    QED_LED_MODE_ON = 1,
    QED_LED_MODE_RESTORE = 2
};
#line 450 
enum qed_db_rec_width {
    DB_REC_WIDTH_32B = 0,
    DB_REC_WIDTH_64B = 1
};
#line 455 
enum qed_db_rec_space {
    DB_REC_KERNEL = 0,
    DB_REC_USER = 1
};
#line 460 
struct qed_dev;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_eth_pf_params {
   u16 num_cons ;
   u8 num_vf_cons ;
   u32 num_arfs_filters ;
};
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_fcoe_pf_params {
   u64 glbl_q_params_addr ;
   u64 bdq_pbl_base_addr[2U] ;
   u16 num_cons ;
   u16 num_tasks ;
   u16 sq_num_pbl_pages ;
   u16 cq_num_entries ;
   u16 cmdq_num_entries ;
   u16 rq_buffer_log_size ;
   u16 mtu ;
   u16 dummy_icid ;
   u16 bdq_xoff_threshold[2U] ;
   u16 bdq_xon_threshold[2U] ;
   u16 rq_buffer_size ;
   u8 num_cqs ;
   u8 log_page_size ;
   u8 gl_rq_pi ;
   u8 gl_cmd_pi ;
   u8 debug_mode ;
   u8 is_target ;
   u8 bdq_pbl_num_entries[2U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_iscsi_pf_params {
   u64 glbl_q_params_addr ;
   u64 bdq_pbl_base_addr[3U] ;
   u16 cq_num_entries ;
   u16 cmdq_num_entries ;
   u32 two_msl_timer ;
   u16 tx_sws_timer ;
   u16 num_cons ;
   u16 num_tasks ;
   u16 half_way_close_timeout ;
   u16 bdq_xoff_threshold[3U] ;
   u16 bdq_xon_threshold[3U] ;
   u16 cmdq_xoff_threshold ;
   u16 cmdq_xon_threshold ;
   u16 rq_buffer_size ;
   u8 num_sq_pages_in_ring ;
   u8 num_r2tq_pages_in_ring ;
   u8 num_uhq_pages_in_ring ;
   u8 num_queues ;
   u8 log_page_size ;
   u8 rqe_log_size ;
   u8 max_fin_rt ;
   u8 gl_rq_pi ;
   u8 gl_cmd_pi ;
   u8 debug_mode ;
   u8 ll2_ooo_queue_id ;
   u8 is_target ;
   u8 is_soc_en ;
   u8 soc_num_of_blocks_log ;
   u8 bdq_pbl_num_entries[3U] ;
};
#line 568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_rdma_pf_params {
   u32 min_dpis ;
   u32 num_qps ;
   u32 num_srqs ;
   u8 roce_edpm_mode ;
   u8 gl_pi ;
   u8 enable_dcqcn ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_pf_params {
   struct qed_eth_pf_params eth_pf_params ;
   struct qed_fcoe_pf_params fcoe_pf_params ;
   struct qed_iscsi_pf_params iscsi_pf_params ;
   struct qed_rdma_pf_params rdma_pf_params ;
};
#line 596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_sb_info {
   struct status_block_e4 *sb_virt ;
   dma_addr_t sb_phys ;
   u32 sb_ack ;
   u16 igu_sb_id ;
   void *igu_addr ;
   u8 flags ;
   struct qed_dev *cdev ;
};
#line 608 
enum qed_dev_type {
    QED_DEV_TYPE_BB = 0,
    QED_DEV_TYPE_AH = 1
};
#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_dev_info {
   unsigned long pci_mem_start ;
   unsigned long pci_mem_end ;
   unsigned int pci_irq ;
   u8 num_hwfns ;
   u8 hw_mac[6U] ;
   u16 fw_major ;
   u16 fw_minor ;
   u16 fw_rev ;
   u16 fw_eng ;
   u32 mfw_rev ;
   u32 flash_size ;
   bool b_inter_pf_switch ;
   bool tx_switching ;
   bool rdma_supported ;
   u16 mtu ;
   bool wol_support ;
   bool smart_an ;
   u32 mbi_version ;
   enum qed_dev_type dev_type ;
   bool vxlan_enable ;
   bool gre_enable ;
   bool geneve_enable ;
   u8 abs_pf_id ;
};
#line 666 
enum qed_sb_type {
    QED_SB_TYPE_L2_QUEUE = 0,
    QED_SB_TYPE_CNQ = 1,
    QED_SB_TYPE_STORAGE = 2
};
#line 672 
enum qed_protocol {
    QED_PROTOCOL_ETH = 0,
    QED_PROTOCOL_ISCSI = 1,
    QED_PROTOCOL_FCOE = 2
};
#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_link_params {
   bool link_up ;
   u32 override_flags ;
   bool autoneg ;
   u32 adv_speeds ;
   u32 forced_speed ;
   u32 pause_config ;
   u32 loopback_mode ;
   struct qed_link_eee_params eee ;
};
#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_link_output {
   bool link_up ;
   u32 supported_caps ;
   u32 advertised_caps ;
   u32 lp_caps ;
   u32 speed ;
   u8 duplex ;
   u8 port ;
   bool autoneg ;
   u32 pause_config ;
   bool eee_supported ;
   bool eee_active ;
   u8 sup_caps ;
   struct qed_link_eee_params eee ;
};
#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_probe_params {
   enum qed_protocol protocol ;
   u32 dp_module ;
   u8 dp_level ;
   bool is_vf ;
   bool recov_in_prog ;
};
#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_slowpath_params {
   u32 int_mode ;
   u8 drv_major ;
   u8 drv_minor ;
   u8 drv_rev ;
   u8 drv_eng ;
   u8 name[12U] ;
};
#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_int_info {
   struct msix_entry *msix ;
   u8 msix_cnt ;
   u8 used_cnt ;
};
#line 790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_generic_tlvs {
   u16 feat_flags ;
   u8 mac[3U][6U] ;
};
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_common_cb_ops {
   void (*arfs_filter_op)(void *, void *, u8 ) ;
   void (*link_update)(void *, struct qed_link_output *) ;
   void (*schedule_recovery_handler)(void *) ;
   void (*dcbx_aen)(void *, struct qed_dcbx_get *, u32 ) ;
   void (*get_generic_tlv_data)(void *, struct qed_generic_tlvs *) ;
   void (*get_protocol_tlv_data)(void *, void *) ;
};
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_selftest_ops {
   int (*selftest_interrupt)(struct qed_dev *) ;
   int (*selftest_memory)(struct qed_dev *) ;
   int (*selftest_register)(struct qed_dev *) ;
   int (*selftest_clock)(struct qed_dev *) ;
   int (*selftest_nvram)(struct qed_dev *) ;
};
#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_common_ops {
   struct qed_selftest_ops *selftest ;
   struct qed_dev *(*probe)(struct pci_dev *, struct qed_probe_params *) ;
   void (*remove)(struct qed_dev *) ;
   int (*set_power_state)(struct qed_dev *, pci_power_t ) ;
   void (*set_name)(struct qed_dev *, char *) ;
   void (*update_pf_params)(struct qed_dev *, struct qed_pf_params *) ;
   int (*slowpath_start)(struct qed_dev *, struct qed_slowpath_params *) ;
   int (*slowpath_stop)(struct qed_dev *) ;
   int (*set_fp_int)(struct qed_dev *, u16 ) ;
   int (*get_fp_int)(struct qed_dev *, struct qed_int_info *) ;
   u32 (*sb_init)(struct qed_dev *, struct qed_sb_info *, void *, dma_addr_t , u16 , enum qed_sb_type ) ;
   u32 (*sb_release)(struct qed_dev *, struct qed_sb_info *, u16 , enum qed_sb_type ) ;
   void (*simd_handler_config)(struct qed_dev *, void *, int , void (*)(void *)) ;
   void (*simd_handler_clean)(struct qed_dev *, int ) ;
   int (*dbg_grc)(struct qed_dev *, void *, u32 *) ;
   int (*dbg_grc_size)(struct qed_dev *) ;
   int (*dbg_all_data)(struct qed_dev *, void *) ;
   int (*dbg_all_data_size)(struct qed_dev *) ;
   bool (*can_link_change)(struct qed_dev *) ;
   int (*set_link)(struct qed_dev *, struct qed_link_params *) ;
   void (*get_link)(struct qed_dev *, struct qed_link_output *) ;
   int (*drain)(struct qed_dev *) ;
   void (*update_msglvl)(struct qed_dev *, u32 , u8 ) ;
   int (*chain_alloc)(struct qed_dev *, enum qed_chain_use_mode , enum qed_chain_mode , enum qed_chain_cnt_type , u32 , size_t , struct qed_chain *, struct qed_chain_ext_pbl *) ;
   void (*chain_free)(struct qed_dev *, struct qed_chain *) ;
   int (*nvm_flash)(struct qed_dev *, char *) ;
   int (*nvm_get_image)(struct qed_dev *, enum qed_nvm_images , u8 *, u16 ) ;
   int (*set_coalesce)(struct qed_dev *, u16 , u16 , void *) ;
   int (*set_led)(struct qed_dev *, enum qed_led_mode ) ;
   int (*db_recovery_add)(struct qed_dev *, void *, void *, enum qed_db_rec_width , enum qed_db_rec_space ) ;
   int (*db_recovery_del)(struct qed_dev *, void *, void *) ;
   int (*recovery_process)(struct qed_dev *) ;
   int (*recovery_prolog)(struct qed_dev *) ;
   int (*update_drv_state)(struct qed_dev *, bool ) ;
   int (*update_mac)(struct qed_dev *, u8 *) ;
   int (*update_mtu)(struct qed_dev *, u16 ) ;
   int (*update_wol)(struct qed_dev *, bool ) ;
   int (*read_module_eeprom)(struct qed_dev *, char *, u8 , u32 , u32 ) ;
   u8 (*get_affin_hwfn_idx)(struct qed_dev *) ;
   int (*read_nvm_cfg)(struct qed_dev *, u8 **, u32 , u32 ) ;
   int (*read_nvm_cfg_len)(struct qed_dev *, u32 ) ;
   int (*set_grc_config)(struct qed_dev *, u32 , u32 ) ;
};
#line 1254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_eth_stats_common {
   u64 no_buff_discards ;
   u64 packet_too_big_discard ;
   u64 ttl0_discard ;
   u64 rx_ucast_bytes ;
   u64 rx_mcast_bytes ;
   u64 rx_bcast_bytes ;
   u64 rx_ucast_pkts ;
   u64 rx_mcast_pkts ;
   u64 rx_bcast_pkts ;
   u64 mftag_filter_discards ;
   u64 mac_filter_discards ;
   u64 gft_filter_drop ;
   u64 tx_ucast_bytes ;
   u64 tx_mcast_bytes ;
   u64 tx_bcast_bytes ;
   u64 tx_ucast_pkts ;
   u64 tx_mcast_pkts ;
   u64 tx_bcast_pkts ;
   u64 tx_err_drop_pkts ;
   u64 tpa_coalesced_pkts ;
   u64 tpa_coalesced_events ;
   u64 tpa_aborts_num ;
   u64 tpa_not_coalesced_pkts ;
   u64 tpa_coalesced_bytes ;
   u64 rx_64_byte_packets ;
   u64 rx_65_to_127_byte_packets ;
   u64 rx_128_to_255_byte_packets ;
   u64 rx_256_to_511_byte_packets ;
   u64 rx_512_to_1023_byte_packets ;
   u64 rx_1024_to_1518_byte_packets ;
   u64 rx_crc_errors ;
   u64 rx_mac_crtl_frames ;
   u64 rx_pause_frames ;
   u64 rx_pfc_frames ;
   u64 rx_align_errors ;
   u64 rx_carrier_errors ;
   u64 rx_oversize_packets ;
   u64 rx_jabbers ;
   u64 rx_undersize_packets ;
   u64 rx_fragments ;
   u64 tx_64_byte_packets ;
   u64 tx_65_to_127_byte_packets ;
   u64 tx_128_to_255_byte_packets ;
   u64 tx_256_to_511_byte_packets ;
   u64 tx_512_to_1023_byte_packets ;
   u64 tx_1024_to_1518_byte_packets ;
   u64 tx_pause_frames ;
   u64 tx_pfc_frames ;
   u64 brb_truncates ;
   u64 brb_discards ;
   u64 rx_mac_bytes ;
   u64 rx_mac_uc_packets ;
   u64 rx_mac_mc_packets ;
   u64 rx_mac_bc_packets ;
   u64 rx_mac_frames_ok ;
   u64 tx_mac_bytes ;
   u64 tx_mac_uc_packets ;
   u64 tx_mac_mc_packets ;
   u64 tx_mac_bc_packets ;
   u64 tx_mac_ctrl_frames ;
   u64 link_change_count ;
};
#line 1320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_eth_stats_bb {
   u64 rx_1519_to_1522_byte_packets ;
   u64 rx_1519_to_2047_byte_packets ;
   u64 rx_2048_to_4095_byte_packets ;
   u64 rx_4096_to_9216_byte_packets ;
   u64 rx_9217_to_16383_byte_packets ;
   u64 tx_1519_to_2047_byte_packets ;
   u64 tx_2048_to_4095_byte_packets ;
   u64 tx_4096_to_9216_byte_packets ;
   u64 tx_9217_to_16383_byte_packets ;
   u64 tx_lpi_entry_count ;
   u64 tx_total_collisions ;
};
#line 1334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_eth_stats_ah {
   u64 rx_1519_to_max_byte_packets ;
   u64 tx_1519_to_max_byte_packets ;
};
#line 1339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
union __anonunion_1047 {
   struct qed_eth_stats_bb bb ;
   struct qed_eth_stats_ah ah ;
};
#line 1339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_eth_stats {
   struct qed_eth_stats_common common ;
   union __anonunion_1047 __anonCompField_qed_eth_stats_203 ;
};
#line 1443 
struct qedr_dev;
#line 1444 
struct qede_dev;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
struct __anonstruct_near_1048 {
   u16 index ;
   u16 dist ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
struct cpu_rmap {
   struct kref refcount ;
   u16 size ;
   u16 used ;
   void **obj ;
   struct __anonstruct_near_1048 near[0U] ;
};
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_pmd_flow_flags {
   u8 flags ;
};
#line 317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_slow_path_rx_cqe {
   u8 type ;
   u8 ramrod_cmd_id ;
   u8 error_flag ;
   u8 reserved[25U] ;
   __le16 echo ;
   u8 reserved1 ;
   struct eth_pmd_flow_flags pmd_flags ;
};
#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_db_data {
   u8 params ;
   u8 agg_flags ;
   __le16 bd_prod ;
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_iov_if.h"
struct qed_iov_hv_ops {
   int (*configure)(struct qed_dev *, int ) ;
   int (*set_mac)(struct qed_dev *, u8 *, int ) ;
   int (*set_vlan)(struct qed_dev *, u16 , int ) ;
   int (*get_config)(struct qed_dev *, int , struct ifla_vf_info *) ;
   int (*set_link_state)(struct qed_dev *, int , int ) ;
   int (*set_spoof)(struct qed_dev *, int , bool ) ;
   int (*set_rate)(struct qed_dev *, int , u32 , u32 ) ;
   int (*set_trust)(struct qed_dev *, int , bool ) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_queue_start_common_params {
   u8 vport_id ;
   u16 queue_id ;
   u8 stats_id ;
   struct qed_sb_info *p_sb ;
   u8 sb_idx ;
   u8 tc ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_rxq_start_ret_params {
   void *p_prod ;
   void *p_handle ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_txq_start_ret_params {
   void *p_doorbell ;
   void *p_handle ;
};
#line 69 
enum qed_filter_config_mode {
    QED_FILTER_CONFIG_MODE_DISABLE = 0,
    QED_FILTER_CONFIG_MODE_5_TUPLE = 1,
    QED_FILTER_CONFIG_MODE_L4_PORT = 2,
    QED_FILTER_CONFIG_MODE_IP_DEST = 3,
    QED_FILTER_CONFIG_MODE_IP_SRC = 4
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_ntuple_filter_params {
   dma_addr_t addr ;
   u16 length ;
   u16 qid ;
   bool b_is_vf ;
   u8 vport_id ;
   u8 vf_id ;
   bool b_is_add ;
   bool b_is_drop ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_dev_eth_info {
   struct qed_dev_info common ;
   u8 num_queues ;
   u8 num_tc ;
   u8 port_mac[6U] ;
   u16 num_vlan_filters ;
   u16 num_mac_filters ;
   bool is_legacy ;
   bool xdp_supported ;
};
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_update_vport_rss_params {
   void *rss_ind_table[128U] ;
   u32 rss_key[10U] ;
   u8 rss_caps ;
};
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_update_vport_params {
   u8 vport_id ;
   u8 update_vport_active_flg ;
   u8 vport_active_flg ;
   u8 update_tx_switching_flg ;
   u8 tx_switching_flg ;
   u8 update_accept_any_vlan_flg ;
   u8 accept_any_vlan ;
   u8 update_rss_flg ;
   struct qed_update_vport_rss_params rss_params ;
};
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_start_vport_params {
   bool remove_inner_vlan ;
   bool handle_ptp_pkts ;
   bool gro_enable ;
   bool drop_ttl0 ;
   u8 vport_id ;
   u16 mtu ;
   bool clear_stats ;
};
#line 147 
enum qed_filter_rx_mode_type {
    QED_FILTER_RX_MODE_TYPE_REGULAR = 0,
    QED_FILTER_RX_MODE_TYPE_MULTI_PROMISC = 1,
    QED_FILTER_RX_MODE_TYPE_PROMISC = 2
};
#line 153 
enum qed_filter_xcast_params_type {
    QED_FILTER_XCAST_TYPE_ADD = 0,
    QED_FILTER_XCAST_TYPE_DEL = 1,
    QED_FILTER_XCAST_TYPE_REPLACE = 2
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_filter_ucast_params {
   enum qed_filter_xcast_params_type type ;
   u8 vlan_valid ;
   u16 vlan ;
   u8 mac_valid ;
   unsigned char mac[6U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_filter_mcast_params {
   enum qed_filter_xcast_params_type type ;
   u8 num ;
   unsigned char mac[64U][6U] ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
union qed_filter_type_params {
   enum qed_filter_rx_mode_type accept_flags ;
   struct qed_filter_ucast_params ucast ;
   struct qed_filter_mcast_params mcast ;
};
#line 179 
enum qed_filter_type {
    QED_FILTER_TYPE_UCAST = 0,
    QED_FILTER_TYPE_MCAST = 1,
    QED_FILTER_TYPE_RX_MODE = 2,
    QED_MAX_FILTER_TYPES = 3
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_filter_params {
   enum qed_filter_type type ;
   union qed_filter_type_params filter ;
};
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_tunn_params {
   u16 vxlan_port ;
   u8 update_vxlan_port ;
   u16 geneve_port ;
   u8 update_geneve_port ;
};
#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_eth_cb_ops {
   struct qed_common_cb_ops common ;
   void (*force_mac)(void *, u8 *, bool ) ;
   void (*ports_update)(void *, u16 , u16 ) ;
};
#line 204 
enum qed_ptp_filter_type {
    QED_PTP_FILTER_NONE = 0,
    QED_PTP_FILTER_ALL = 1,
    QED_PTP_FILTER_V1_L4_EVENT = 2,
    QED_PTP_FILTER_V1_L4_GEN = 3,
    QED_PTP_FILTER_V2_L4_EVENT = 4,
    QED_PTP_FILTER_V2_L4_GEN = 5,
    QED_PTP_FILTER_V2_L2_EVENT = 6,
    QED_PTP_FILTER_V2_L2_GEN = 7,
    QED_PTP_FILTER_V2_EVENT = 8,
    QED_PTP_FILTER_V2_GEN = 9
};
#line 217 
enum qed_ptp_hwtstamp_tx_type {
    QED_PTP_HWTSTAMP_TX_OFF = 0,
    QED_PTP_HWTSTAMP_TX_ON = 1
};
#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_eth_dcbnl_ops {
   int (*ieee_getpfc)(struct qed_dev *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct qed_dev *, struct ieee_pfc *) ;
   int (*ieee_getets)(struct qed_dev *, struct ieee_ets *) ;
   int (*ieee_setets)(struct qed_dev *, struct ieee_ets *) ;
   int (*ieee_peer_getets)(struct qed_dev *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct qed_dev *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct qed_dev *, struct dcb_app *) ;
   int (*ieee_setapp)(struct qed_dev *, struct dcb_app *) ;
   u8 (*getstate)(struct qed_dev *) ;
   u8 (*setstate)(struct qed_dev *, u8 ) ;
   void (*getpgtccfgtx)(struct qed_dev *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct qed_dev *, int , u8 *) ;
   void (*getpgtccfgrx)(struct qed_dev *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct qed_dev *, int , u8 *) ;
   void (*getpfccfg)(struct qed_dev *, int , u8 *) ;
   void (*setpfccfg)(struct qed_dev *, int , u8 ) ;
   u8 (*getcap)(struct qed_dev *, int , u8 *) ;
   int (*getnumtcs)(struct qed_dev *, int , u8 *) ;
   u8 (*getpfcstate)(struct qed_dev *) ;
   int (*getapp)(struct qed_dev *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct qed_dev *, int , u8 *) ;
   u8 (*getdcbx)(struct qed_dev *) ;
   void (*setpgtccfgtx)(struct qed_dev *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgtccfgrx)(struct qed_dev *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct qed_dev *, int , u8 ) ;
   void (*setpgbwgcfgrx)(struct qed_dev *, int , u8 ) ;
   u8 (*setall)(struct qed_dev *) ;
   int (*setnumtcs)(struct qed_dev *, int , u8 ) ;
   void (*setpfcstate)(struct qed_dev *, u8 ) ;
   int (*setapp)(struct qed_dev *, u8 , u16 , u8 ) ;
   u8 (*setdcbx)(struct qed_dev *, u8 ) ;
   u8 (*setfeatcfg)(struct qed_dev *, int , u8 ) ;
   int (*peer_getappinfo)(struct qed_dev *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct qed_dev *, struct dcb_app *) ;
   int (*cee_peer_getpfc)(struct qed_dev *, struct cee_pfc *) ;
   int (*cee_peer_getpg)(struct qed_dev *, struct cee_pg *) ;
};
#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_eth_ptp_ops {
   int (*cfg_filters)(struct qed_dev *, enum qed_ptp_filter_type , enum qed_ptp_hwtstamp_tx_type ) ;
   int (*read_rx_ts)(struct qed_dev *, u64 *) ;
   int (*read_tx_ts)(struct qed_dev *, u64 *) ;
   int (*read_cc)(struct qed_dev *, u64 *) ;
   int (*disable)(struct qed_dev *) ;
   int (*adjfreq)(struct qed_dev *, s32 ) ;
   int (*enable)(struct qed_dev *) ;
};
#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
struct qed_eth_ops {
   struct qed_common_ops *common ;
   struct qed_iov_hv_ops *iov ;
   struct qed_eth_dcbnl_ops *dcb ;
   struct qed_eth_ptp_ops *ptp ;
   int (*fill_dev_info)(struct qed_dev *, struct qed_dev_eth_info *) ;
   void (*register_ops)(struct qed_dev *, struct qed_eth_cb_ops *, void *) ;
   bool (*check_mac)(struct qed_dev *, u8 *) ;
   int (*vport_start)(struct qed_dev *, struct qed_start_vport_params *) ;
   int (*vport_stop)(struct qed_dev *, u8 ) ;
   int (*vport_update)(struct qed_dev *, struct qed_update_vport_params *) ;
   int (*q_rx_start)(struct qed_dev *, u8 , struct qed_queue_start_common_params *, u16 , dma_addr_t , dma_addr_t , u16 , struct qed_rxq_start_ret_params *) ;
   int (*q_rx_stop)(struct qed_dev *, u8 , void *) ;
   int (*q_tx_start)(struct qed_dev *, u8 , struct qed_queue_start_common_params *, dma_addr_t , u16 , struct qed_txq_start_ret_params *) ;
   int (*q_tx_stop)(struct qed_dev *, u8 , void *) ;
   int (*filter_config)(struct qed_dev *, struct qed_filter_params *) ;
   int (*fastpath_stop)(struct qed_dev *) ;
   int (*eth_cqe_completion)(struct qed_dev *, u8 , struct eth_slow_path_rx_cqe *) ;
   void (*get_vport_stats)(struct qed_dev *, struct qed_eth_stats *) ;
   int (*tunn_config)(struct qed_dev *, struct qed_tunn_params *) ;
   int (*ntuple_filter_config)(struct qed_dev *, void *, struct qed_ntuple_filter_params *) ;
   int (*configure_arfs_searcher)(struct qed_dev *, enum qed_filter_config_mode ) ;
   int (*get_coalesce)(struct qed_dev *, u16 *, void *) ;
   int (*req_bulletin_update_mac)(struct qed_dev *, u8 *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
struct tcf_walker {
   int stop ;
   int skip ;
   int count ;
   bool nonempty ;
   unsigned long cookie ;
   int (*fn)(struct tcf_proto *, void *, struct tcf_walker *) ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct qede_stats_common {
   u64 no_buff_discards ;
   u64 packet_too_big_discard ;
   u64 ttl0_discard ;
   u64 rx_ucast_bytes ;
   u64 rx_mcast_bytes ;
   u64 rx_bcast_bytes ;
   u64 rx_ucast_pkts ;
   u64 rx_mcast_pkts ;
   u64 rx_bcast_pkts ;
   u64 mftag_filter_discards ;
   u64 mac_filter_discards ;
   u64 gft_filter_drop ;
   u64 tx_ucast_bytes ;
   u64 tx_mcast_bytes ;
   u64 tx_bcast_bytes ;
   u64 tx_ucast_pkts ;
   u64 tx_mcast_pkts ;
   u64 tx_bcast_pkts ;
   u64 tx_err_drop_pkts ;
   u64 coalesced_pkts ;
   u64 coalesced_events ;
   u64 coalesced_aborts_num ;
   u64 non_coalesced_pkts ;
   u64 coalesced_bytes ;
   u64 link_change_count ;
   u64 ptp_skip_txts ;
   u64 rx_64_byte_packets ;
   u64 rx_65_to_127_byte_packets ;
   u64 rx_128_to_255_byte_packets ;
   u64 rx_256_to_511_byte_packets ;
   u64 rx_512_to_1023_byte_packets ;
   u64 rx_1024_to_1518_byte_packets ;
   u64 rx_crc_errors ;
   u64 rx_mac_crtl_frames ;
   u64 rx_pause_frames ;
   u64 rx_pfc_frames ;
   u64 rx_align_errors ;
   u64 rx_carrier_errors ;
   u64 rx_oversize_packets ;
   u64 rx_jabbers ;
   u64 rx_undersize_packets ;
   u64 rx_fragments ;
   u64 tx_64_byte_packets ;
   u64 tx_65_to_127_byte_packets ;
   u64 tx_128_to_255_byte_packets ;
   u64 tx_256_to_511_byte_packets ;
   u64 tx_512_to_1023_byte_packets ;
   u64 tx_1024_to_1518_byte_packets ;
   u64 tx_pause_frames ;
   u64 tx_pfc_frames ;
   u64 brb_truncates ;
   u64 brb_discards ;
   u64 tx_mac_ctrl_frames ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct qede_stats_bb {
   u64 rx_1519_to_1522_byte_packets ;
   u64 rx_1519_to_2047_byte_packets ;
   u64 rx_2048_to_4095_byte_packets ;
   u64 rx_4096_to_9216_byte_packets ;
   u64 rx_9217_to_16383_byte_packets ;
   u64 tx_1519_to_2047_byte_packets ;
   u64 tx_2048_to_4095_byte_packets ;
   u64 tx_4096_to_9216_byte_packets ;
   u64 tx_9217_to_16383_byte_packets ;
   u64 tx_lpi_entry_count ;
   u64 tx_total_collisions ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct qede_stats_ah {
   u64 rx_1519_to_max_byte_packets ;
   u64 tx_1519_to_max_byte_packets ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
union __anonunion_1056 {
   struct qede_stats_bb bb ;
   struct qede_stats_ah ah ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct qede_stats {
   struct qede_stats_common common ;
   union __anonunion_1056 __anonCompField_qede_stats_209 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct qede_vlan {
   struct list_head list ;
   u16 vid ;
   bool configured ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct qede_rdma_dev {
   struct qedr_dev *qedr_dev ;
   struct list_head entry ;
   struct list_head rdma_event_list ;
   struct workqueue_struct *rdma_wq ;
   bool exp_recovery ;
};
#line 176 
enum qede_dump_cmd {
    QEDE_DUMP_CMD_NONE = 0,
    QEDE_DUMP_CMD_NVM_CFG = 1,
    QEDE_DUMP_CMD_GRCDUMP = 2,
    QEDE_DUMP_CMD_MAX = 3
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct qede_dump_info {
   enum qede_dump_cmd cmd ;
   u8 num_args ;
   u32 args[4U] ;
};
#line 194 
struct qede_fastpath;
#line 194 
struct qede_arfs;
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct qede_dev {
   struct qed_dev *cdev ;
   struct net_device *ndev ;
   struct pci_dev *pdev ;
   u32 dp_module ;
   u8 dp_level ;
   unsigned long flags ;
   struct qed_eth_ops *ops ;
   struct qede_ptp *ptp ;
   u64 ptp_skip_txts ;
   struct qed_dev_eth_info dev_info ;
   struct qede_fastpath *fp_array ;
   u8 req_num_tx ;
   u8 fp_num_tx ;
   u8 req_num_rx ;
   u8 fp_num_rx ;
   u16 req_queues ;
   u16 num_queues ;
   struct qed_int_info int_info ;
   struct mutex qede_lock ;
   u32 state ;
   u16 rx_buf_size ;
   u32 rx_copybreak ;
   struct qede_stats stats ;
   u32 rss_params_inited ;
   u16 rss_ind_table[128U] ;
   u32 rss_key[10U] ;
   u8 rss_caps ;
   u16 q_num_rx_buffers ;
   u16 q_num_tx_buffers ;
   bool gro_disable ;
   struct list_head vlan_list ;
   u16 configured_vlans ;
   u16 non_configured_vlans ;
   bool accept_any_vlan ;
   struct delayed_work sp_task ;
   unsigned long sp_flags ;
   u16 vxlan_dst_port ;
   u16 geneve_dst_port ;
   struct qede_arfs *arfs ;
   bool wol_enabled ;
   struct qede_rdma_dev rdma_info ;
   struct bpf_prog *xdp_prog ;
   struct qede_dump_info dump_info ;
};
#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct sw_rx_data {
   struct page *data ;
   dma_addr_t mapping ;
   unsigned int page_offset ;
};
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct qede_agg_info {
   struct sw_rx_data buffer ;
   struct sk_buff *skb ;
   u16 vlan_tag ;
   bool tpa_start_fail ;
   u8 state ;
   u8 frag_id ;
   u8 tunnel_type ;
};
#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct qede_rx_queue {
   __le16 *hw_cons_ptr ;
   void *hw_rxq_prod_addr ;
   struct device *dev ;
   struct bpf_prog *xdp_prog ;
   u16 sw_rx_cons ;
   u16 sw_rx_prod ;
   u16 filled_buffers ;
   u8 data_direction ;
   u8 rxq_id ;
   u16 num_rx_buffers ;
   u16 rx_headroom ;
   u32 rx_buf_size ;
   u32 rx_buf_seg_size ;
   struct sw_rx_data *sw_rx_ring ;
   struct qed_chain rx_bd_ring ;
   struct qed_chain rx_comp_ring ;
   struct qede_agg_info tpa_info[64U] ;
   u64 rcv_pkts ;
   u64 rx_hw_errors ;
   u64 rx_alloc_errors ;
   u64 rx_ip_frags ;
   u64 xdp_no_pass ;
   void *handle ;
   struct xdp_rxq_info xdp_rxq ;
};
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
union db_prod {
   struct eth_db_data data ;
   u32 raw ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct sw_tx_bd {
   struct sk_buff *skb ;
   u8 flags ;
};
#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct sw_tx_xdp {
   struct page *page ;
   dma_addr_t mapping ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
union __anonunion_sw_tx_ring_1057 {
   struct sw_tx_bd *skbs ;
   struct sw_tx_xdp *xdp ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct qede_tx_queue {
   u8 is_xdp ;
   bool is_legacy ;
   u16 sw_tx_cons ;
   u16 sw_tx_prod ;
   u16 num_tx_buffers ;
   u64 xmit_pkts ;
   u64 stopped_cnt ;
   u64 tx_mem_alloc_err ;
   __le16 *hw_cons_ptr ;
   struct device *dev ;
   void *doorbell_addr ;
   union db_prod tx_db ;
   int index ;
   union __anonunion_sw_tx_ring_1057 sw_tx_ring ;
   struct qed_chain tx_pbl ;
   void *handle ;
   u16 cos ;
   u16 ndev_txq_id ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct qede_fastpath {
   struct qede_dev *edev ;
   u8 type ;
   u8 id ;
   u8 xdp_xmit ;
   struct napi_struct napi ;
   struct qed_sb_info *sb_info ;
   struct qede_rx_queue *rxq ;
   struct qede_tx_queue *txq ;
   struct qede_tx_queue *xdp_tx ;
   char name[24U] ;
};
#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
union __anonunion_u_1058 {
   netdev_features_t features ;
   struct bpf_prog *new_prog ;
   u16 mtu ;
};
#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
struct qede_reload_args {
   void (*func)(struct qede_dev *, struct qede_reload_args *) ;
   union __anonunion_u_1058 u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
union __anonunion_1059 {
   __be32 src_ipv4 ;
   struct in6_addr src_ipv6 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
union __anonunion_1060 {
   __be32 dst_ipv4 ;
   struct in6_addr dst_ipv6 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
struct qede_arfs_tuple {
   union __anonunion_1059 __anonCompField_qede_arfs_tuple_210 ;
   union __anonunion_1060 __anonCompField_qede_arfs_tuple_211 ;
   __be16 src_port ;
   __be16 dst_port ;
   __be16 eth_proto ;
   u8 ip_proto ;
   enum qed_filter_config_mode mode ;
   bool (*ip_comp)(struct qede_arfs_tuple *, struct qede_arfs_tuple *) ;
   void (*build_hdr)(struct qede_arfs_tuple *, void *) ;
   void (*stringify)(struct qede_arfs_tuple *, void *) ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
struct qede_arfs_fltr_node {
   unsigned long state ;
   void *data ;
   dma_addr_t mapping ;
   int buf_len ;
   struct qede_arfs_tuple tuple ;
   u32 flow_id ;
   u64 sw_id ;
   u16 rxq_id ;
   u16 next_rxq_id ;
   u8 vfid ;
   bool filter_op ;
   bool used ;
   u8 fw_rc ;
   bool b_is_drop ;
   struct hlist_node node ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
struct qede_arfs {
   struct hlist_head arfs_hl_head[16U] ;
   spinlock_t arfs_list_lock ;
   unsigned long *arfs_fltr_bmap ;
   int filter_count ;
   enum qed_filter_config_mode mode ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1882 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1884 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1886 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 4920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum qede_rdma_event {
    QEDE_UP = 0,
    QEDE_DOWN = 1,
    QEDE_CHANGE_ADDR = 2,
    QEDE_CLOSE = 3
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qede_rdma.h"
struct qede_rdma_event_work {
   struct list_head list ;
   struct work_struct work ;
   void *ptr ;
   enum qede_rdma_event event ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qede_rdma.h"
struct qedr_driver {
   unsigned char name[32U] ;
   struct qedr_dev *(*add)(struct qed_dev *, struct pci_dev *, struct net_device *) ;
   void (*remove)(struct qedr_dev *) ;
   void (*notify)(struct qedr_dev *, enum qede_rdma_event ) ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
enum tk_offsets {
    TK_OFFS_REAL = 0,
    TK_OFFS_BOOT = 1,
    TK_OFFS_TAI = 2,
    TK_OFFS_MAX = 3
};
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
struct system_device_crosststamp {
   ktime_t device ;
   ktime_t sys_realtime ;
   ktime_t sys_monoraw ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
enum refcount_saturation_type {
    REFCOUNT_ADD_NOT_ZERO_OVF = 0,
    REFCOUNT_ADD_OVF = 1,
    REFCOUNT_ADD_UAF = 2,
    REFCOUNT_SUB_UAF = 3,
    REFCOUNT_DEC_LEAK = 4
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_clock_time {
   __s64 sec ;
   __u32 nsec ;
   __u32 reserved ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_extts_request {
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[2U] ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_perout_request {
   struct ptp_clock_time start ;
   struct ptp_clock_time period ;
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[4U] ;
};
#line 138 
enum ptp_pin_function {
    PTP_PF_NONE = 0,
    PTP_PF_EXTTS = 1,
    PTP_PF_PEROUT = 2,
    PTP_PF_PHYSYNC = 3
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_pin_desc {
   char name[64U] ;
   unsigned int index ;
   unsigned int func ;
   unsigned int chan ;
   unsigned int rsv[5U] ;
};
#line 205 
enum ldv_6759 {
    PTP_CLK_REQ_EXTTS = 0,
    PTP_CLK_REQ_PEROUT = 1,
    PTP_CLK_REQ_PPS = 2
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
union __anonunion_2998 {
   struct ptp_extts_request extts ;
   struct ptp_perout_request perout ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_request {
   enum ldv_6759 type ;
   union __anonunion_2998 __anonCompField_ptp_clock_request_56 ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_info {
   struct module *owner ;
   char name[16U] ;
   s32 max_adj ;
   int n_alarm ;
   int n_ext_ts ;
   int n_per_out ;
   int n_pins ;
   int pps ;
   struct ptp_pin_desc *pin_config ;
   int (*adjfine)(struct ptp_clock_info *, long ) ;
   int (*adjfreq)(struct ptp_clock_info *, s32 ) ;
   int (*adjtime)(struct ptp_clock_info *, s64 ) ;
   int (*gettime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*gettimex64)(struct ptp_clock_info *, struct timespec64 *, struct ptp_system_timestamp *) ;
   int (*getcrosststamp)(struct ptp_clock_info *, struct system_device_crosststamp *) ;
   int (*settime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*enable)(struct ptp_clock_info *, struct ptp_clock_request *, int ) ;
   int (*verify)(struct ptp_clock_info *, unsigned int , enum ptp_pin_function , unsigned int ) ;
   long (*do_aux_work)(struct ptp_clock_info *) ;
};
#line 144 
struct ptp_clock;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/net_tstamp.h"
struct hwtstamp_config {
   int flags ;
   int tx_type ;
   int rx_filter ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
struct cyclecounter {
   u64 (*read)(struct cyclecounter *) ;
   u64 mask ;
   u32 mult ;
   u32 shift ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
struct timecounter {
   struct cyclecounter *cc ;
   u64 cycle_last ;
   u64 nsec ;
   u64 mask ;
   u64 frac ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 3610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
struct qede_ptp {
   struct qed_eth_ptp_ops *ops ;
   struct ptp_clock_info clock_info ;
   struct cyclecounter cc ;
   struct timecounter tc ;
   struct ptp_clock *clock ;
   struct work_struct work ;
   unsigned long ptp_tx_start ;
   struct qede_dev *edev ;
   struct sk_buff *tx_skb ;
   spinlock_t lock ;
   bool hw_ts_ioctl_called ;
   u16 tx_type ;
   u16 rx_filter ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_3738 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_3740 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_3744 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 1165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 3218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
enum xdp_action {
    XDP_ABORTED = 0,
    XDP_DROP = 1,
    XDP_PASS = 2,
    XDP_TX = 3,
    XDP_REDIRECT = 4
};
#line 893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct xdp_buff;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_buff {
   void *data ;
   void *data_end ;
   void *data_meta ;
   void *data_hard_start ;
   unsigned long handle ;
   struct xdp_rxq_info *rxq ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 2265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_gro_cb {
   void *frag0 ;
   unsigned int frag0_len ;
   int data_offset ;
   u16 flush ;
   u16 flush_id ;
   u16 count ;
   u16 gro_remcsum_start ;
   unsigned long age ;
   u16 proto ;
   u8 same_flow : 1 ;
   u8 encap_mark : 1 ;
   u8 csum_valid : 1 ;
   u8 csum_cnt : 3 ;
   u8 free : 2 ;
   u8 is_ipv6 : 1 ;
   u8 is_fou : 1 ;
   u8 is_atomic : 1 ;
   u8 recursion_counter : 4 ;
   __wsum csum ;
   struct sk_buff *last ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint.h"
struct trace_eval_map {
   char *system ;
   char *eval_string ;
   unsigned long eval_value ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/trace/events/xdp.h"
union __anonunion___u_4284 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/trace/events/xdp.h"
union __anonunion___u_4286 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/udp.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
union __anonunion_4579 {
   struct hlist_head head ;
   struct hlist_nulls_head nulls_head ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   unsigned int count ;
   union __anonunion_4579 __anonCompField_inet_listen_hashbucket_203 ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   unsigned int lhash2_mask ;
   struct inet_listen_hashbucket *lhash2 ;
   struct inet_listen_hashbucket listening_hash[32U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock_reuseport.h"
struct sock_reuseport {
   struct callback_head rcu ;
   u16 max_socks ;
   u16 num_socks ;
   unsigned int synq_overflow_ts ;
   unsigned int reuseport_id ;
   unsigned int bind_inany : 1 ;
   unsigned int has_conns : 1 ;
   struct bpf_prog *prog ;
   struct sock *socks[0U] ;
};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
enum tcp_ca_event {
    CA_EVENT_TX_START = 0,
    CA_EVENT_CWND_RESTART = 1,
    CA_EVENT_COMPLETE_CWR = 2,
    CA_EVENT_LOSS = 3,
    CA_EVENT_ECN_NO_CE = 4,
    CA_EVENT_ECN_IS_CE = 5
};
#line 994 
union tcp_cc_info;
#line 1013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct ack_sample {
   u32 pkts_acked ;
   s32 rtt_us ;
   u32 in_flight ;
};
#line 1027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct rate_sample {
   u64 prior_mstamp ;
   u32 prior_delivered ;
   s32 delivered ;
   long interval_us ;
   u32 snd_interval_us ;
   u32 rcv_interval_us ;
   long rtt_us ;
   int losses ;
   u32 acked_sacked ;
   u32 prior_in_flight ;
   bool is_app_limited ;
   bool is_retrans ;
   bool is_ack_delayed ;
};
#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_congestion_ops {
   struct list_head list ;
   u32 key ;
   u32 flags ;
   void (*init)(struct sock *) ;
   void (*release)(struct sock *) ;
   u32 (*ssthresh)(struct sock *) ;
   void (*cong_avoid)(struct sock *, u32 , u32 ) ;
   void (*set_state)(struct sock *, u8 ) ;
   void (*cwnd_event)(struct sock *, enum tcp_ca_event ) ;
   void (*in_ack_event)(struct sock *, u32 ) ;
   u32 (*undo_cwnd)(struct sock *) ;
   void (*pkts_acked)(struct sock *, struct ack_sample *) ;
   u32 (*min_tso_segs)(struct sock *) ;
   u32 (*sndbuf_expand)(struct sock *) ;
   void (*cong_control)(struct sock *, struct rate_sample *) ;
   size_t (*get_info)(struct sock *, u32 , int *, union tcp_cc_info *) ;
   char name[16U] ;
   struct module *owner ;
};
#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_fastopen_context {
   siphash_key_t key[2U] ;
   int num ;
   struct callback_head rcu ;
};
#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/common_hsi.h"
struct eth_rx_prod_data {
   __le16 bd_prod ;
   __le16 cqe_prod ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/common_hsi.h"
struct regpair {
   __le32 lo ;
   __le32 hi ;
};
#line 952 
enum igu_int_cmd {
    IGU_INT_ENABLE = 0,
    IGU_INT_DISABLE = 1,
    IGU_INT_NOP = 2,
    IGU_INT_NOP2 = 3,
    MAX_IGU_INT_CMD = 4
};
#line 963  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/common_hsi.h"
struct igu_prod_cons_update {
   __le32 sb_id_and_flags ;
   __le32 reserved1 ;
};
#line 1013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/common_hsi.h"
struct parsing_and_err_flags {
   __le16 flags ;
};
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_tx_1st_bd_flags {
   u8 bitfields ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_tx_data_1st_bd {
   __le16 vlan ;
   u8 nbds ;
   struct eth_tx_1st_bd_flags bd_flags ;
   __le16 bitfields ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_tx_data_2nd_bd {
   __le16 tunn_ip_size ;
   __le16 bitfields1 ;
   __le16 bitfields2 ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_tunnel_parsing_flags {
   u8 flags ;
};
#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_fast_path_rx_reg_cqe {
   u8 type ;
   u8 bitfields ;
   __le16 pkt_len ;
   struct parsing_and_err_flags pars_flags ;
   __le16 vlan_tag ;
   __le32 rss_hash ;
   __le16 len_on_first_bd ;
   u8 placement_offset ;
   struct eth_tunnel_parsing_flags tunnel_pars_flags ;
   u8 bd_num ;
   u8 reserved ;
   __le16 flow_id ;
   u8 reserved1[11U] ;
   struct eth_pmd_flow_flags pmd_flags ;
};
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_fast_path_rx_tpa_cont_cqe {
   u8 type ;
   u8 tpa_agg_index ;
   __le16 len_list[6U] ;
   u8 reserved ;
   u8 reserved1 ;
   __le16 reserved2[6U] ;
   u8 reserved3[3U] ;
   struct eth_pmd_flow_flags pmd_flags ;
};
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_fast_path_rx_tpa_end_cqe {
   u8 type ;
   u8 tpa_agg_index ;
   __le16 total_packet_len ;
   u8 num_of_bds ;
   u8 end_reason ;
   __le16 num_of_coalesced_segs ;
   __le32 ts_delta ;
   __le16 len_list[4U] ;
   __le16 reserved3[4U] ;
   __le16 reserved1 ;
   u8 reserved2 ;
   struct eth_pmd_flow_flags pmd_flags ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_fast_path_rx_tpa_start_cqe {
   u8 type ;
   u8 bitfields ;
   __le16 seg_len ;
   struct parsing_and_err_flags pars_flags ;
   __le16 vlan_tag ;
   __le32 rss_hash ;
   __le16 len_on_first_bd ;
   u8 placement_offset ;
   struct eth_tunnel_parsing_flags tunnel_pars_flags ;
   u8 tpa_agg_index ;
   u8 header_len ;
   __le16 ext_bd_len_list[5U] ;
   __le16 flow_id ;
   u8 reserved ;
   struct eth_pmd_flow_flags pmd_flags ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_rx_bd {
   struct regpair addr ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
union eth_rx_cqe {
   struct eth_fast_path_rx_reg_cqe fast_path_regular ;
   struct eth_fast_path_rx_tpa_start_cqe fast_path_tpa_start ;
   struct eth_fast_path_rx_tpa_cont_cqe fast_path_tpa_cont ;
   struct eth_fast_path_rx_tpa_end_cqe fast_path_tpa_end ;
   struct eth_slow_path_rx_cqe slow_path ;
};
#line 335 
enum eth_rx_cqe_type {
    ETH_RX_CQE_TYPE_UNUSED = 0,
    ETH_RX_CQE_TYPE_REGULAR = 1,
    ETH_RX_CQE_TYPE_SLOW_PATH = 2,
    ETH_RX_CQE_TYPE_TPA_START = 3,
    ETH_RX_CQE_TYPE_TPA_CONT = 4,
    ETH_RX_CQE_TYPE_TPA_END = 5,
    MAX_ETH_RX_CQE_TYPE = 6
};
#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_tx_1st_bd {
   struct regpair addr ;
   __le16 nbytes ;
   struct eth_tx_data_1st_bd data ;
};
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_tx_2nd_bd {
   struct regpair addr ;
   __le16 nbytes ;
   struct eth_tx_data_2nd_bd data ;
};
#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_tx_data_3rd_bd {
   __le16 lso_mss ;
   __le16 bitfields ;
   u8 tunn_l4_hdr_start_offset_w ;
   u8 tunn_hdr_size_w ;
};
#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_tx_3rd_bd {
   struct regpair addr ;
   __le16 nbytes ;
   struct eth_tx_data_3rd_bd data ;
};
#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_tx_data_bd {
   __le16 reserved0 ;
   __le16 bitfields ;
   __le16 reserved3 ;
};
#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
struct eth_tx_bd {
   struct regpair addr ;
   __le16 nbytes ;
   struct eth_tx_data_bd data ;
};
#line 468 
enum rss_hash_type {
    RSS_HASH_TYPE_DEFAULT = 0,
    RSS_HASH_TYPE_IPV4 = 1,
    RSS_HASH_TYPE_TCP_IPV4 = 2,
    RSS_HASH_TYPE_IPV6 = 3,
    RSS_HASH_TYPE_TCP_IPV6 = 4,
    RSS_HASH_TYPE_UDP_IPV4 = 5,
    RSS_HASH_TYPE_UDP_IPV6 = 6,
    MAX_RSS_HASH_TYPE = 7
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
struct qed_chain_next {
   struct regpair next_phys ;
   void *next_virt ;
};
#line 1205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
union __anonunion___u_4647 {
   struct bpf_prog *__val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int uint;
#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
enum system_states {
    SYSTEM_BOOTING = 0,
    SYSTEM_SCHEDULING = 1,
    SYSTEM_RUNNING = 2,
    SYSTEM_HALT = 3,
    SYSTEM_POWER_OFF = 4,
    SYSTEM_RESTART = 5,
    SYSTEM_SUSPEND = 6
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_5104 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_5106 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_mqprio_qopt {
   __u8 num_tc ;
   __u8 prio_tc_map[16U] ;
   __u8 hw ;
   __u16 count[16U] ;
   __u16 offset[16U] ;
};
#line 2525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_notifier_info {
   struct net_device *dev ;
   struct netlink_ext_ack *extack ;
};
#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
enum flow_block_command {
    FLOW_BLOCK_BIND = 0,
    FLOW_BLOCK_UNBIND = 1
};
#line 275 
enum flow_block_binder_type {
    FLOW_BLOCK_BINDER_TYPE_UNSPEC = 0,
    FLOW_BLOCK_BINDER_TYPE_CLSACT_INGRESS = 1,
    FLOW_BLOCK_BINDER_TYPE_CLSACT_EGRESS = 2
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block_offload {
   enum flow_block_command command ;
   enum flow_block_binder_type binder_type ;
   bool block_shared ;
   bool unlocked_driver_cb ;
   struct net *net ;
   struct flow_block *block ;
   struct list_head cb_list ;
   struct list_head *driver_block_list ;
   struct netlink_ext_ack *extack ;
};
#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/eth_common.h"
union eth_tx_bd_types {
   struct eth_tx_1st_bd first_bd ;
   struct eth_tx_2nd_bd second_bd ;
   struct eth_tx_3rd_bd third_bd ;
   struct eth_tx_bd reg_bd ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
struct qed_mfw_tlv_eth {
   u16 lso_maxoff_size ;
   bool lso_maxoff_size_set ;
   u16 lso_minseg_size ;
   bool lso_minseg_size_set ;
   u8 prom_mode ;
   bool prom_mode_set ;
   u16 tx_descr_size ;
   bool tx_descr_size_set ;
   u16 rx_descr_size ;
   bool rx_descr_size_set ;
   u16 netq_count ;
   bool netq_count_set ;
   u32 tcp4_offloads ;
   bool tcp4_offloads_set ;
   u32 tcp6_offloads ;
   bool tcp6_offloads_set ;
   u16 tx_descr_qdepth ;
   bool tx_descr_qdepth_set ;
   u16 rx_descr_qdepth ;
   bool rx_descr_qdepth_set ;
   u8 iov_offload ;
   bool iov_offload_set ;
   u8 txqs_empty ;
   bool txqs_empty_set ;
   u8 rxqs_empty ;
   bool rxqs_empty_set ;
   u8 num_txqs_full ;
   bool num_txqs_full_set ;
   u8 num_rxqs_full ;
   bool num_rxqs_full_set ;
};
#line 1055  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
enum qede_probe_mode {
    QEDE_PROBE_NORMAL = 0,
    QEDE_PROBE_RECOVERY = 1
};
#line 1201 
enum qede_remove_mode {
    QEDE_REMOVE_NORMAL = 0,
    QEDE_REMOVE_RECOVERY = 1
};
#line 2156 
enum qede_unload_mode {
    QEDE_UNLOAD_NORMAL = 0,
    QEDE_UNLOAD_RECOVERY = 1
};
#line 2230 
enum qede_load_mode {
    QEDE_LOAD_NORMAL = 0,
    QEDE_LOAD_RELOAD = 1,
    QEDE_LOAD_RECOVERY = 2
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
enum qed_link_mode_bits {
    QED_LM_FIBRE_BIT = 1,
    QED_LM_Autoneg_BIT = 2,
    QED_LM_Asym_Pause_BIT = 4,
    QED_LM_Pause_BIT = 8,
    QED_LM_1000baseT_Full_BIT = 16,
    QED_LM_10000baseT_Full_BIT = 32,
    QED_LM_10000baseKR_Full_BIT = 64,
    QED_LM_20000baseKR2_Full_BIT = 128,
    QED_LM_25000baseKR_Full_BIT = 256,
    QED_LM_40000baseLR4_Full_BIT = 512,
    QED_LM_50000baseKR2_Full_BIT = 1024,
    QED_LM_100000baseKR4_Full_BIT = 2048,
    QED_LM_TP_BIT = 4096,
    QED_LM_Backplane_BIT = 8192,
    QED_LM_1000baseKX_Full_BIT = 16384,
    QED_LM_10000baseKX4_Full_BIT = 32768,
    QED_LM_10000baseR_FEC_BIT = 65536,
    QED_LM_40000baseKR4_Full_BIT = 131072,
    QED_LM_40000baseCR4_Full_BIT = 262144,
    QED_LM_40000baseSR4_Full_BIT = 524288,
    QED_LM_25000baseCR_Full_BIT = 1048576,
    QED_LM_25000baseSR_Full_BIT = 2097152,
    QED_LM_50000baseCR2_Full_BIT = 4194304,
    QED_LM_100000baseSR4_Full_BIT = 8388608,
    QED_LM_100000baseCR4_Full_BIT = 16777216,
    QED_LM_100000baseLR4_ER4_Full_BIT = 33554432,
    QED_LM_50000baseSR2_Full_BIT = 67108864,
    QED_LM_1000baseX_Full_BIT = 134217728,
    QED_LM_10000baseCR_Full_BIT = 268435456,
    QED_LM_10000baseSR_Full_BIT = 536870912,
    QED_LM_10000baseLR_Full_BIT = 1073741824,
    QED_LM_10000baseLRM_Full_BIT = 2147483648,
    QED_LM_COUNT = 32
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
struct __anonstruct_qede_rqstats_arr_6566 {
   u64 offset ;
   char string[32U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
struct __anonstruct_qede_tqstats_arr_6567 {
   u64 offset ;
   char string[32U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
struct __anonstruct_qede_stats_arr_6568 {
   u64 offset ;
   char string[32U] ;
   unsigned long attr ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
struct qede_link_mode_mapping {
   u32 qed_link_mode ;
   u32 ethtool_link_mode ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_8362 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_8362 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_8363 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_8363 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_8379 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_8379 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_8383 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_8383 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_8384 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_8385 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_8384 __anonCompField_media_link_90 ;
   union __anonunion_8385 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_8387 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_8386 {
   struct __anonstruct_dev_8387 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_8386 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_8401 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_8402 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_8400 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_8401 i2c ;
   struct __anonstruct_custom_8402 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_8400 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_9303 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_9303 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_4 {
   int arg0 ;
   int signal_pending ;
};
#line 19  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_qede_msix_fp_int_13 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_qede_flash_device_14 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_qede_pci_driver_15 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 70 
unsigned long find_first_zero_bit(unsigned long *, unsigned long);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_13 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add(new,head,head->next);
  #line 80 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_15 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_17 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h)
{
  #line 743 
  h->next = (struct hlist_node *)0;
  #line 744 
  h->pprev = (struct hlist_node **)0;
  #line 745 
  return;
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n)
{
  #line 759 
  struct hlist_node *next = n->next;
  #line 760 
  struct hlist_node **pprev = n->pprev;
  {
    #line 763 
    union __anonunion___u_21 __u = {.__val = next};
    #line 762 
    __write_once_size((void *)pprev,(void *)(& __u.__c),8);
    #line 762 
    struct hlist_node *tmp = __u.__val;
  }
  #line 763 
  if (next != (struct hlist_node *)0) 
                                      #line 764 
                                      next->pprev = pprev;
  #line 765 
  return;
}

#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n)
{
  #line 769 
  __hlist_del(n);
  #line 770 
  n->next = (struct hlist_node *)(-2401263026318606080);
  #line 771 
  n->pprev = (struct hlist_node **)(-2401263026318606046);
  #line 772 
  return;
}

#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
  #line 784 
  struct hlist_node *first = h->first;
  #line 785 
  n->next = first;
  #line 786 
  if (first != (struct hlist_node *)0) 
                                       #line 787 
                                       first->pprev = & n->next;
  {
    #line 789 
    union __anonunion___u_23 __u = {.__val = n};
    #line 788 
    __write_once_size((void *)(& h->first),(void *)(& __u.__c),8);
    #line 788 
    struct hlist_node *tmp = __u.__val;
  }
  #line 789 
  n->pprev = & h->first;
  #line 790 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 13 
void __xchg_wrong_size(void);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static bool IS_ERR(void *ptr);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 631  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 832  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void cif_spin_lock_bh_arfs_list_lock_of_qede_arfs(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 649  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 841  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void cif_spin_unlock_bh_arfs_list_lock_of_qede_arfs(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 22 
void *ldv_vzalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t array_size(size_t a, size_t b)
{
  #line 257 
  size_t __a;
  #line 257 
  size_t __b;
  #line 257 
  size_t *__d;
  #line 255 
  size_t bytes;
  {
    #line 257 
    __a = a;
    #line 257 
    __b = b;
    #line 257 
    __d = & bytes;
    #line 257 
    int tmp = & __a == __d;
    }
  #line 257 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 258 
                                                return 18446744073709551615UL;
  #line 260 
  return bytes;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 858  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void *cif_vzalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 865  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void cif_vfree(void *addr);
#line 612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 850  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 668 
#line 365  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
__inline static bool dissector_uses_key(struct flow_dissector *flow_dissector, enum flow_dissector_key_id key_id)
{
  #line 335 
  return (_Bool)((flow_dissector->used_keys & (unsigned int)(1 << (unsigned int)key_id)) != 0U);
}

#line 1360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static __u32 skb_get_hash_raw(struct sk_buff *skb)
{
  #line 1362 
  return skb->hash;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
__inline static __u64 ethtool_get_flow_spec_ring(__u64 ring_cookie)
{
  #line 931 
  return ring_cookie & 4294967295ULL;
}

#line 934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
__inline static __u64 ethtool_get_flow_spec_ring_vf(__u64 ring_cookie)
{
  #line 936 
  return (ring_cookie >> 32) & 255ULL;
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
__inline static u32 ethtool_rxfh_indir_default(u32 index, u32 n_rx_rings)
{
  #line 98 
  return index % n_rx_rings;
}

#line 420 
#line 420 
struct ethtool_rx_flow_rule *ethtool_rx_flow_rule_create(struct ethtool_rx_flow_spec_input *);
#line 421 
#line 421 
void ethtool_rx_flow_rule_destroy(struct ethtool_rx_flow_rule *);
#line 818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
#line 818 
void bpf_prog_put(struct bpf_prog *);
#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 730 
bool rps_may_expire_flow(struct net_device *, u16, u32, u16);
#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 4092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_lock_bh(struct net_device *dev)
{
  #line 4094 
  cif_spin_lock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4095 
  return;
}

#line 4102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_unlock_bh(struct net_device *dev)
{
  #line 4104 
  cif_spin_unlock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4105 
  return;
}

#line 4371 
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
#line 75 
void flow_rule_match_basic(struct flow_rule *, struct flow_match_basic *);
#line 85 
#line 85 
void flow_rule_match_ipv4_addrs(struct flow_rule *, struct flow_match_ipv4_addrs *);
#line 87 
#line 87 
void flow_rule_match_ipv6_addrs(struct flow_rule *, struct flow_match_ipv6_addrs *);
#line 91 
#line 91 
void flow_rule_match_ports(struct flow_rule *, struct flow_match_ports *);
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
__inline static bool flow_action_has_entries(struct flow_action *action)
{
  #line 226 
  return (_Bool)(action->num_entries != 0U);
}

#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
__inline static bool flow_rule_match_key(struct flow_rule *rule, enum flow_dissector_key_id key)
{
  #line 253 
  return dissector_uses_key(rule->match.dissector,key);
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
#line 35 
struct cpu_rmap *alloc_cpu_rmap(unsigned int, gfp_t);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
__inline static struct cpu_rmap *alloc_irq_cpu_rmap(unsigned int size)
{
  #line 60 
  return alloc_cpu_rmap(size,3264U);
}

#line 62 
#line 62 
void free_irq_cpu_rmap(struct cpu_rmap *);
#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_rx_flow_steer(struct net_device *dev, struct sk_buff *skb, u16 rxq_index, u32 flow_id);
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_process_arfs_filters(struct qede_dev *edev, bool free_fltr);
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_poll_for_freeing_arfs_filters(struct qede_dev *edev);
#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_arfs_filter_op(void *dev, void *filter, u8 fw_rc);
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_free_arfs(struct qede_dev *edev);
#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_alloc_arfs(struct qede_dev *edev);
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 2093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_add_cls_rule(struct qede_dev *edev, struct ethtool_rxnfc *info);
#line 500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 1707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_delete_flow_filter(struct qede_dev *edev, u64 cookie);
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 1400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_get_cls_rule_entry(struct qede_dev *edev, struct ethtool_rxnfc *cmd);
#line 502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 1365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_get_cls_rule_all(struct qede_dev *edev, struct ethtool_rxnfc *info, u32 *rule_locs);
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 1732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_get_arfs_filter_count(struct qede_dev *edev);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_force_mac(void *dev, u8 *mac, bool forced);
#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_udp_ports_update(void *dev, u16 vxlan_port, u16 geneve_port);
#line 532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 1147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_set_mac_addr(struct net_device *ndev, void *p);
#line 534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_vlan_rx_add_vid(struct net_device *dev, __be16 proto, u16 vid);
#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_vlan_rx_kill_vid(struct net_device *dev, __be16 proto, u16 vid);
#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_vlan_mark_nonconfigured(struct qede_dev *edev);
#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_configure_vlan_filters(struct qede_dev *edev);
#line 539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
unsigned long long qede_fix_features(struct net_device *dev, netdev_features_t features);
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_set_features(struct net_device *dev, netdev_features_t features);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_set_rx_mode(struct net_device *ndev);
#line 543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 1266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_config_rx_mode(struct net_device *ndev);
#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_fill_rss_params(struct qede_dev *edev, struct qed_update_vport_rss_params *rss, u8 *update);
#line 547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 981  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_udp_tunnel_add(struct net_device *dev, struct udp_tunnel_info *ti);
#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 1044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_udp_tunnel_del(struct net_device *dev, struct udp_tunnel_info *ti);
#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 1114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_xdp(struct net_device *dev, struct netdev_bpf *xdp);
#line 558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 558 
void qede_reload(struct qede_dev *edev, struct qede_reload_args *args, bool is_locked);
#line 562 
#line 562 
void __qede_lock(struct qede_dev *edev);
#line 563 
#line 563 
void __qede_unlock(struct qede_dev *edev);
#line 568 
#line 1945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_add_tc_flower_fltr(struct qede_dev *edev, __be16 proto, struct flow_cls_offload *f);
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static void qede_configure_arfs_fltr(struct qede_dev *edev, struct qede_arfs_fltr_node *n, u16 rxq_id, bool add_fltr)
{
  #line 118 
  struct qed_ntuple_filter_params params;
  #line 117 
  struct qed_eth_ops *op = edev->ops;
  #line 120 
  if ((int)n->used != 0) 
                         #line 121 
                         return;
  #line 123 
  memset((void *)(& params),0,24UL);
  #line 125 
  params.addr = n->mapping;
  #line 126 
  params.length = (unsigned short)n->buf_len;
  #line 127 
  params.qid = rxq_id;
  #line 128 
  params.b_is_add = add_fltr;
  #line 129 
  params.b_is_drop = n->b_is_drop;
  #line 131 
  if ((unsigned int)n->vfid != 0U) {
    #line 132 
    params.b_is_vf = (_Bool)1;
    #line 133 
    params.vf_id = (unsigned char)((unsigned int)n->vfid + 255U);
  }
  #line 136 
  if (n->tuple.stringify != (void (*)(struct qede_arfs_tuple *, void *))0) {
    #line 137 
    char tuple_buffer[64U];
    #line 139 
    (*(n->tuple.stringify))(& n->tuple,(void *)(& tuple_buffer));
    #line 140 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 2048U) != 0U) != 0L) {
      #line 140 
      char *tmp;
      #line 140 
      char *tmp_0;
      #line 140 
      ;
      #line 140 
      ;
      #line 140 
      ;
      #line 140 
      if ((int)add_fltr != 0) 
                              #line 140 
                              tmp = (char *)"Adding"; else 
                                                           #line 140 
                                                           tmp = (char *)"Deleting";
      #line 140 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 140 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 140 
                                                                    tmp_0 = (char *)"";
      #line 140 
      printk((char *)"\001",(char *)"qede_configure_arfs_fltr",140,tmp_0,tmp,n->sw_id,(char *)(& tuple_buffer),(int)n->vfid,(int)rxq_id);
    }
  }
  #line 146 
  n->used = (_Bool)1;
  #line 147 
  n->filter_op = add_fltr;
  #line 148 
  (*(op->ntuple_filter_config))(edev->cdev,(void *)n,& params);
  #line 149 
  return;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static void qede_free_arfs_filter(struct qede_dev *edev, struct qede_arfs_fltr_node *fltr)
{
  #line 154 
  kfree(fltr->data);
  #line 156 
  if (fltr->sw_id <= 255ULL) 
                             #line 157 
                             cif_clear_bit((long)fltr->sw_id,(edev->arfs)->arfs_fltr_bmap);
  #line 159 
  kfree((void *)fltr);
  #line 160 
  return;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_enqueue_fltr_and_config_searcher(struct qede_dev *edev, struct qede_arfs_fltr_node *fltr, u16 bucket_idx)
{
  #line 167 
  fltr->mapping = dma_map_single_attrs(& (edev->pdev)->dev,fltr->data,(unsigned long)fltr->buf_len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 169 
  if (dma_mapping_error(& (edev->pdev)->dev,fltr->mapping) != 0) {
    #line 170 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 170 
      char *tmp;
      #line 170 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 170 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 170 
                                                                    tmp = (char *)"";
      #line 170 
      printk((char *)"\001",(char *)"qede_enqueue_fltr_and_config_searcher",170,tmp);
    }
    #line 171 
    qede_free_arfs_filter(edev,fltr);
    #line 172 
    return -12;
  }
  #line 175 
  INIT_HLIST_NODE(& fltr->node);
  #line 176 
  hlist_add_head(& fltr->node,& (edev->arfs)->arfs_hl_head[(int)bucket_idx]);
  #line 179 
  ((edev->arfs)->filter_count) ++;
  #line 180 
  if ((edev->arfs)->filter_count == 1 && (edev->arfs)->mode == (unsigned int)QED_FILTER_CONFIG_MODE_DISABLE) {
    #line 182 
    (*((edev->ops)->configure_arfs_searcher))(edev->cdev,fltr->tuple.mode);
    #line 184 
    (edev->arfs)->mode = fltr->tuple.mode;
  }
  #line 187 
  return 0;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static void qede_dequeue_fltr_and_config_searcher(struct qede_dev *edev, struct qede_arfs_fltr_node *fltr)
{
  #line 194 
  hlist_del(& fltr->node);
  #line 195 
  dma_unmap_single_attrs(& (edev->pdev)->dev,fltr->mapping,(unsigned long)fltr->buf_len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 198 
  qede_free_arfs_filter(edev,fltr);
  #line 200 
  ((edev->arfs)->filter_count) --;
  #line 201 
  if ((edev->arfs)->filter_count == 0 && (edev->arfs)->mode != (unsigned int)QED_FILTER_CONFIG_MODE_DISABLE) {
    #line 203 
    enum qed_filter_config_mode mode;
    #line 205 
    mode = QED_FILTER_CONFIG_MODE_DISABLE;
    #line 206 
    (*((edev->ops)->configure_arfs_searcher))(edev->cdev,mode);
    #line 207 
    (edev->arfs)->mode = QED_FILTER_CONFIG_MODE_DISABLE;
  }
  #line 209 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_arfs_filter_op(void *dev, void *filter, u8 fw_rc)
{
  #line 213 
  struct qede_arfs_fltr_node *fltr = (struct qede_arfs_fltr_node *)filter;
  #line 214 
  struct qede_dev *edev = (struct qede_dev *)dev;
  #line 216 
  fltr->fw_rc = fw_rc;
  #line 218 
  if ((unsigned int)fw_rc != 0U) {
    #line 219 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 219 
      unsigned short tmp;
      #line 219 
      unsigned short tmp_0;
      #line 219 
      char *tmp_1;
      #line 219 
      ;
      #line 219 
      tmp = __builtin_bswap16((unsigned short)((int)fltr->tuple.dst_port));
      #line 219 
      tmp_0 = __builtin_bswap16((unsigned short)((int)fltr->tuple.src_port));
      #line 219 
      ;
      #line 219 
      ;
      #line 219 
      ;
      #line 219 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 219 
                                                    tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 219 
                                                                    tmp_1 = (char *)"";
      #line 219 
      printk((char *)"\001",(char *)"qede_arfs_filter_op",219,tmp_1,(int)fw_rc,fltr->flow_id,fltr->sw_id,(int)tmp_0,(int)tmp,(int)fltr->rxq_id);
    }
    #line 225 
    cif_spin_lock_bh_arfs_list_lock_of_qede_arfs(& (edev->arfs)->arfs_list_lock);
    #line 227 
    fltr->used = (_Bool)0;
    #line 228 
    cif_clear_bit(0L,& fltr->state);
    #line 230 
    cif_spin_unlock_bh_arfs_list_lock_of_qede_arfs(& (edev->arfs)->arfs_list_lock);
    #line 231 
    return;
  }
  #line 234 
  cif_spin_lock_bh_arfs_list_lock_of_qede_arfs(& (edev->arfs)->arfs_list_lock);
  #line 236 
  fltr->used = (_Bool)0;
  #line 238 
  if ((int)fltr->filter_op != 0) {
    #line 239 
    cif_set_bit(0L,& fltr->state);
    #line 240 
    if ((int)fltr->rxq_id != (int)fltr->next_rxq_id) 
                                                     #line 241 
                                                     qede_configure_arfs_fltr(edev,fltr,(unsigned short)((int)fltr->rxq_id),(_Bool)0);
  }
  else {
    #line 244 
    cif_clear_bit(0L,& fltr->state);
    #line 245 
    if ((int)fltr->rxq_id != (int)fltr->next_rxq_id) {
      #line 246 
      fltr->rxq_id = fltr->next_rxq_id;
      #line 247 
      qede_configure_arfs_fltr(edev,fltr,(unsigned short)((int)fltr->rxq_id),(_Bool)1);
    }
  }
  #line 252 
  cif_spin_unlock_bh_arfs_list_lock_of_qede_arfs(& (edev->arfs)->arfs_list_lock);
  #line 253 
  return;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_process_arfs_filters(struct qede_dev *edev, bool free_fltr)
{
  #line 258 
  int i;
  #line 260 
  i = 0;
  #line 260 
  while (i <= 15) {
    {
      #line 267 
      void *__mptr;
      #line 267 
      struct qede_arfs_fltr_node *tmp_0;
      #line 261 
      struct hlist_node *temp;
      #line 262 
      struct hlist_head *head;
      #line 263 
      struct qede_arfs_fltr_node *fltr;
      #line 265 
      head = & (edev->arfs)->arfs_hl_head[i];
      {
        #line 267 
        struct hlist_node *____ptr = head->first;
        #line 267 
        if (____ptr != (struct hlist_node *)0) {
          #line 267 
          __mptr = (void *)____ptr;
          #line 267 
          tmp_0 = ((struct qede_arfs_fltr_node *)(__mptr + 18446744073709551480U));
        }
        else 
             #line 267 
             tmp_0 = (struct qede_arfs_fltr_node *)0;
        }
      #line 267 
      fltr = tmp_0;
      #line 267 
      while (1) {
        #line 267 
        void *__mptr_0;
        #line 267 
        struct qede_arfs_fltr_node *tmp_3;
        #line 267 
        if (fltr != (struct qede_arfs_fltr_node *)0) {
          #line 267 
          temp = fltr->node.next;
          #line 267 
          if (! (1 != 0)) 
                          #line 267 
                          break;
        }
        else 
             #line 267 
             break;
        {
          #line 268 
          bool del = (_Bool)0;
          #line 270 
          if (edev->state != 1U) 
                                 #line 271 
                                 del = (_Bool)1;
          #line 273 
          cif_spin_lock_bh_arfs_list_lock_of_qede_arfs(& (edev->arfs)->arfs_list_lock);
          #line 275 
          if (test_bit(0L,& fltr->state)) {
            #line 275 
            _LAND: 
                   #line 276 
            ;
            #line 276 
            if ((int)free_fltr != 0) 
                                     #line 275 
                                     _LOR: 
                                           #line 277 
                                           qede_dequeue_fltr_and_config_searcher(edev,fltr);
            else {
              #line 280 
              bool flow_exp = (_Bool)0;
              #line 282 
              flow_exp = rps_may_expire_flow(edev->ndev,(unsigned short)((int)fltr->rxq_id),fltr->flow_id,(unsigned short)((int)((unsigned short)fltr->sw_id)));
              #line 287 
              if (((int)flow_exp != 0 || (int)del != 0) && ! free_fltr) 
                #line 288 
                qede_configure_arfs_fltr(edev,fltr,(unsigned short)((int)fltr->rxq_id),(_Bool)0);
            }
          }
          else 
            #line 276 
            if (! fltr->used) 
                              #line 275 
                              goto _LOR; else 
                                              #line 275 
                                              goto _LAND;
          #line 293 
          cif_spin_unlock_bh_arfs_list_lock_of_qede_arfs(& (edev->arfs)->arfs_list_lock);
        }
        {
          #line 267 
          struct hlist_node *____ptr_0 = temp;
          #line 267 
          if (____ptr_0 != (struct hlist_node *)0) {
            #line 267 
            __mptr_0 = (void *)____ptr_0;
            #line 267 
            tmp_3 = ((struct qede_arfs_fltr_node *)(__mptr_0 + 18446744073709551480U));
          }
          else 
               #line 267 
               tmp_3 = (struct qede_arfs_fltr_node *)0;
          }
        #line 267 
        fltr = tmp_3;
      }
    }
    #line 260 
    i ++;
  }
  #line 298 
  cif_spin_lock_bh_arfs_list_lock_of_qede_arfs(& (edev->arfs)->arfs_list_lock);
  #line 300 
  if ((edev->arfs)->filter_count != 0) {
    #line 301 
    cif_set_bit(4L,& edev->sp_flags);
    #line 302 
    cif_schedule_delayed_work(& edev->sp_task,1250UL);
  }
  #line 306 
  cif_spin_unlock_bh_arfs_list_lock_of_qede_arfs(& (edev->arfs)->arfs_list_lock);
  #line 307 
  return;
}

#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_poll_for_freeing_arfs_filters(struct qede_dev *edev)
{
  #line 315 
  int count = 100;
  #line 317 
  while (count != 0) {
    #line 318 
    qede_process_arfs_filters(edev,(_Bool)0);
    #line 320 
    if ((edev->arfs)->filter_count == 0) 
                                         #line 321 
                                         break;
    #line 323 
    msleep(100U);
    #line 324 
    count --;
  }
  #line 327 
  if (count == 0) {
    #line 328 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 328 
      char *tmp;
      #line 328 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 328 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 328 
                                                                    tmp = (char *)"";
      #line 328 
      printk((char *)"\001",(char *)"qede_poll_for_freeing_arfs_filters",328,tmp);
    }
    #line 331 
    qede_process_arfs_filters(edev,(_Bool)1);
  }
  #line 333 
  return;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_alloc_arfs(struct qede_dev *edev)
{
  #line 337 
  int i;
  #line 339 
  edev->arfs = (struct qede_arfs *)cif_vzalloc(216UL);
  #line 340 
  if (edev->arfs == (struct qede_arfs *)0) 
                                           #line 341 
                                           return -12;
  #line 343 
  spinlock_check(& (edev->arfs)->arfs_list_lock);
  {
    #line 343 
    struct lock_class_key __key;
    #line 343 
    __raw_spin_lock_init(& (edev->arfs)->arfs_list_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&edev->arfs->arfs_list_lock)->rlock",& __key);
  }
  #line 345 
  i = 0;
  #line 345 
  while (i <= 15) {
    #line 346 
    (edev->arfs)->arfs_hl_head[i].first = (struct hlist_node *)0;
    #line 345 
    i ++;
  }
  #line 348 
  (edev->arfs)->arfs_fltr_bmap = (unsigned long *)cif_vzalloc(array_size(8UL,4UL));
  #line 351 
  if ((edev->arfs)->arfs_fltr_bmap == (unsigned long *)0UL) {
    #line 352 
    cif_vfree((void *)edev->arfs);
    #line 353 
    edev->arfs = (struct qede_arfs *)0;
    #line 354 
    return -12;
  }
  #line 358 
  (edev->ndev)->rx_cpu_rmap = alloc_irq_cpu_rmap((unsigned int)((int)edev->num_queues - (int)edev->fp_num_tx));
  #line 359 
  if ((edev->ndev)->rx_cpu_rmap == (struct cpu_rmap *)0) {
    #line 360 
    cif_vfree((void *)(edev->arfs)->arfs_fltr_bmap);
    #line 361 
    (edev->arfs)->arfs_fltr_bmap = (unsigned long *)0UL;
    #line 362 
    cif_vfree((void *)edev->arfs);
    #line 363 
    edev->arfs = (struct qede_arfs *)0;
    #line 364 
    return -12;
  }
  #line 367 
  return 0;
}

#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_free_arfs(struct qede_dev *edev)
{
  #line 372 
  if (edev->arfs == (struct qede_arfs *)0) 
                                           #line 373 
                                           return;
  #line 376 
  if ((edev->ndev)->rx_cpu_rmap != (struct cpu_rmap *)0) 
                                                         #line 377 
                                                         free_irq_cpu_rmap((edev->ndev)->rx_cpu_rmap);
  #line 379 
  (edev->ndev)->rx_cpu_rmap = (struct cpu_rmap *)0;
  #line 381 
  cif_vfree((void *)(edev->arfs)->arfs_fltr_bmap);
  #line 382 
  (edev->arfs)->arfs_fltr_bmap = (unsigned long *)0UL;
  #line 383 
  cif_vfree((void *)edev->arfs);
  #line 384 
  edev->arfs = (struct qede_arfs *)0;
  #line 385 
  return;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static bool qede_compare_ip_addr(struct qede_arfs_fltr_node *tpos, struct sk_buff *skb)
{
  #line 391 
  if ((unsigned int)skb->protocol == 8U) {
    #line 392 
    ;
    #line 392 
    if (tpos->tuple.__anonCompField_qede_arfs_tuple_210.src_ipv4 == ip_hdr(skb)->saddr) {
      #line 392 
      ;
      #line 392 
      if (tpos->tuple.__anonCompField_qede_arfs_tuple_211.dst_ipv4 == ip_hdr(skb)->daddr) 
        #line 394 
        return (_Bool)1; else 
                              #line 396 
                              return (_Bool)0;
    }
    else 
         #line 396 
         return (_Bool)0;
  }
  else {
    #line 398 
    struct in6_addr *src = & tpos->tuple.__anonCompField_qede_arfs_tuple_210.src_ipv6;
    #line 399 
    u8 size = (unsigned char)16U;
    #line 401 
    ;
    #line 401 
    ;
    #line 401 
    if (memcmp((void *)src,(void *)(& ipv6_hdr(skb)->saddr),
               (unsigned long)size) == 0) {
      #line 401 
      ;
      #line 401 
      ;
      #line 401 
      if (memcmp((void *)(& tpos->tuple.__anonCompField_qede_arfs_tuple_211.dst_ipv6),
               (void *)(& ipv6_hdr(skb)->daddr),(unsigned long)size) == 0) 
        #line 403 
        return (_Bool)1; else 
                              #line 405 
                              return (_Bool)0;
    }
    else 
         #line 405 
         return (_Bool)0;
  }
}

#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static struct qede_arfs_fltr_node *qede_arfs_htbl_key_search(struct hlist_head *h, struct sk_buff *skb, __be16 src_port, __be16 dst_port, u8 ip_proto)
{
  #line 415 
  struct qede_arfs_fltr_node *tmp_0;
  #line 415 
  void *__mptr;
  #line 413 
  struct qede_arfs_fltr_node *tpos;
  {
    #line 415 
    struct hlist_node *____ptr = h->first;
    #line 415 
    if (____ptr != (struct hlist_node *)0) {
      #line 415 
      __mptr = (void *)____ptr;
      #line 415 
      tmp_0 = ((struct qede_arfs_fltr_node *)(__mptr + 18446744073709551480U));
    }
    else 
         #line 415 
         tmp_0 = (struct qede_arfs_fltr_node *)0;
    }
  #line 415 
  tpos = tmp_0;
  #line 415 
  while (tpos != (struct qede_arfs_fltr_node *)0) {
    #line 415 
    void *__mptr_0;
    #line 415 
    struct qede_arfs_fltr_node *tmp_3;
    #line 416 
    if ((int)tpos->tuple.ip_proto == (int)ip_proto && (int)tpos->tuple.eth_proto == (int)skb->protocol) {
      #line 417 
      if ((int)qede_compare_ip_addr(tpos,skb) != 0) 
        #line 418 
        if ((int)tpos->tuple.src_port == (int)src_port) 
          #line 419 
          if ((int)tpos->tuple.dst_port == (int)dst_port) 
                                                          #line 421 
                                                          return tpos;
    }
    {
      #line 415 
      struct hlist_node *____ptr_0 = tpos->node.next;
      #line 415 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 415 
        __mptr_0 = (void *)____ptr_0;
        #line 415 
        tmp_3 = ((struct qede_arfs_fltr_node *)(__mptr_0 + 18446744073709551480U));
      }
      else 
           #line 415 
           tmp_3 = (struct qede_arfs_fltr_node *)0;
      }
    #line 415 
    tpos = tmp_3;
  }
  #line 423 
  return (struct qede_arfs_fltr_node *)0;
}

#line 427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static struct qede_arfs_fltr_node *qede_alloc_filter(struct qede_dev *edev, int min_hlen)
{
  #line 429 
  struct qede_arfs_fltr_node *n;
  #line 430 
  int bit_id;
  #line 432 
  bit_id = (int)find_first_zero_bit((edev->arfs)->arfs_fltr_bmap,256UL);
  #line 435 
  if (bit_id > 255) 
                    #line 436 
                    return (struct qede_arfs_fltr_node *)0;
  #line 438 
  n = (struct qede_arfs_fltr_node *)kzalloc(152UL,2592U);
  #line 439 
  if (n == (struct qede_arfs_fltr_node *)0) 
                                            #line 440 
                                            return (struct qede_arfs_fltr_node *)0;
  #line 442 
  n->data = kzalloc((unsigned long)min_hlen,2592U);
  #line 443 
  if (n->data == (void *)0) {
    #line 444 
    kfree((void *)n);
    #line 445 
    return (struct qede_arfs_fltr_node *)0;
  }
  #line 448 
  n->sw_id = (unsigned long long)((unsigned short)bit_id);
  #line 449 
  cif_set_bit((long)bit_id,(edev->arfs)->arfs_fltr_bmap);
  #line 450 
  return n;
}

#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_rx_flow_steer(struct net_device *dev, struct sk_buff *skb, u16 rxq_index, u32 flow_id)
{
  #line 457 
  struct qede_arfs_fltr_node *n;
  #line 458 
  int min_hlen;
  #line 458 
  int rc;
  #line 458 
  int tp_offset;
  #line 459 
  struct ethhdr *eth;
  #line 460 
  __be16 *ports;
  #line 461 
  u16 tbl_idx;
  #line 462 
  u8 ip_proto;
  #line 456 
  struct qede_dev *edev = netdev_priv(dev);
  #line 464 
  if ((unsigned int)skb->encapsulation != 0U) 
                                              #line 465 
                                              return -93;
  #line 467 
  if ((unsigned int)skb->protocol != 8U && (unsigned int)skb->protocol != 56710U) 
    #line 469 
    return -93;
  #line 471 
  if ((unsigned int)skb->protocol == 8U) {
    #line 472 
    ip_proto = ip_hdr(skb)->protocol;
    #line 473 
    tp_offset = 20;
  }
  else {
    #line 475 
    ip_proto = ipv6_hdr(skb)->nexthdr;
    #line 476 
    tp_offset = 40;
  }
  #line 479 
  if ((unsigned int)ip_proto != 6U && (unsigned int)ip_proto != 17U) 
    #line 480 
    return -93;
  #line 482 
  ports = (__be16 *)(skb->data + (unsigned long)tp_offset);
  #line 483 
  tbl_idx = (unsigned short)((unsigned int)((unsigned short)skb_get_hash_raw(skb)) & 15U);
  #line 485 
  cif_spin_lock_bh_arfs_list_lock_of_qede_arfs(& (edev->arfs)->arfs_list_lock);
  #line 487 
  n = qede_arfs_htbl_key_search(& (edev->arfs)->arfs_hl_head[(int)tbl_idx],skb,(unsigned short)((int)*ports),(unsigned short)((int)*(ports + 1U)),(unsigned char)((int)ip_proto));
  #line 489 
  if (n != (struct qede_arfs_fltr_node *)0) {
    #line 491 
    n->next_rxq_id = rxq_index;
    #line 493 
    if ((int)test_bit(0L,& n->state) != 0) {
      #line 494 
      if ((int)n->rxq_id != (int)rxq_index) 
                                            #line 495 
                                            qede_configure_arfs_fltr(edev,n,(unsigned short)((int)n->rxq_id),(_Bool)0);
    }
    else 
      #line 498 
      if (! n->used) {
        #line 499 
        n->rxq_id = rxq_index;
        #line 500 
        qede_configure_arfs_fltr(edev,n,(unsigned short)((int)n->rxq_id),(_Bool)1);
      }
    #line 505 
    rc = (int)n->sw_id;
    #line 506 
    goto ret_unlock;
  }
  #line 509 
  min_hlen = (int)(skb_headlen(skb) + 14U);
  #line 511 
  n = qede_alloc_filter(edev,min_hlen);
  #line 512 
  if (n == (struct qede_arfs_fltr_node *)0) {
    #line 513 
    rc = -12;
    #line 514 
    goto ret_unlock;
  }
  #line 517 
  n->buf_len = min_hlen;
  #line 518 
  n->rxq_id = rxq_index;
  #line 519 
  n->next_rxq_id = rxq_index;
  #line 520 
  n->tuple.src_port = *ports;
  #line 521 
  n->tuple.dst_port = *(ports + 1U);
  #line 522 
  n->flow_id = flow_id;
  #line 524 
  if ((unsigned int)skb->protocol == 8U) {
    #line 525 
    n->tuple.__anonCompField_qede_arfs_tuple_210.src_ipv4 = ip_hdr(skb)->saddr;
    #line 526 
    n->tuple.__anonCompField_qede_arfs_tuple_211.dst_ipv4 = ip_hdr(skb)->daddr;
  }
  else {
    #line 528 
    ;
    #line 528 
    memcpy((void *)(& n->tuple.__anonCompField_qede_arfs_tuple_210.src_ipv6),(void *)(& ipv6_hdr(skb)->saddr),16UL);
    #line 530 
    ;
    #line 530 
    memcpy((void *)(& n->tuple.__anonCompField_qede_arfs_tuple_211.dst_ipv6),(void *)(& ipv6_hdr(skb)->daddr),16UL);
  }
  #line 534 
  eth = (struct ethhdr *)n->data;
  #line 535 
  eth->h_proto = skb->protocol;
  #line 536 
  n->tuple.eth_proto = skb->protocol;
  #line 537 
  n->tuple.ip_proto = ip_proto;
  #line 538 
  n->tuple.mode = QED_FILTER_CONFIG_MODE_5_TUPLE;
  #line 539 
  ;
  #line 539 
  ;
  #line 539 
  memcpy(n->data + 14U,(void *)skb->data,(unsigned long)skb_headlen(skb));
  #line 541 
  rc = qede_enqueue_fltr_and_config_searcher(edev,n,(unsigned short)((int)tbl_idx));
  #line 542 
  if (rc != 0) 
               #line 543 
               goto ret_unlock;
  #line 545 
  qede_configure_arfs_fltr(edev,n,(unsigned short)((int)n->rxq_id),(_Bool)1);
  #line 547 
  cif_spin_unlock_bh_arfs_list_lock_of_qede_arfs(& (edev->arfs)->arfs_list_lock);
  #line 549 
  cif_set_bit(4L,& edev->sp_flags);
  #line 550 
  cif_schedule_delayed_work(& edev->sp_task,0UL);
  #line 552 
  return (int)n->sw_id;
  #line 554 
  ret_unlock: 
              #line 554 
  ;
  #line 555 
  cif_spin_unlock_bh_arfs_list_lock_of_qede_arfs(& (edev->arfs)->arfs_list_lock);
  #line 556 
  return rc;
}

#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_udp_ports_update(void *dev, u16 vxlan_port, u16 geneve_port)
{
  #line 562 
  struct qede_dev *edev = (struct qede_dev *)dev;
  #line 564 
  if ((int)edev->vxlan_dst_port != (int)vxlan_port) 
                                                    #line 565 
                                                    edev->vxlan_dst_port = (unsigned short)0U;
  #line 567 
  if ((int)edev->geneve_dst_port != (int)geneve_port) 
                                                      #line 568 
                                                      edev->geneve_dst_port = (unsigned short)0U;
  #line 569 
  return;
}

#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_force_mac(void *dev, u8 *mac, bool forced)
{
  #line 573 
  struct qede_dev *edev = (struct qede_dev *)dev;
  #line 575 
  __qede_lock(edev);
  #line 577 
  if (! is_valid_ether_addr(mac)) {
    #line 578 
    __qede_unlock(edev);
    #line 579 
    return;
  }
  #line 582 
  ether_addr_copy((edev->ndev)->dev_addr,mac);
  #line 583 
  __qede_unlock(edev);
  #line 584 
  return;
}

#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_fill_rss_params(struct qede_dev *edev, struct qed_update_vport_rss_params *rss, u8 *update)
{
  #line 590 
  int i;
  #line 589 
  bool need_reset = (_Bool)0;
  #line 592 
  if ((int)edev->num_queues - (int)edev->fp_num_tx <= 1) {
    #line 593 
    memset((void *)rss,0,1072UL);
    #line 594 
    *update = (unsigned char)0U;
    #line 595 
    return;
  }
  #line 599 
  i = 0;
  #line 599 
  while (i <= 127) {
    #line 600 
    if ((int)edev->rss_ind_table[i] >= (int)edev->num_queues - (int)edev->fp_num_tx) {
      #line 601 
      need_reset = (_Bool)1;
      #line 602 
      break;
    }
    #line 599 
    i ++;
  }
  #line 606 
  if (((unsigned long)edev->rss_params_inited & 1UL) == 0UL || (int)need_reset != 0) {
    #line 607 
    i = 0;
    #line 607 
    while (i <= 127) {
      {
        #line 608 
        u16 indir_val;
        #line 608 
        u16 val;
        #line 610 
        val = (unsigned short)((int)edev->num_queues - (int)((unsigned short)edev->fp_num_tx));
        #line 611 
        indir_val = (unsigned short)ethtool_rxfh_indir_default((unsigned int)i,(unsigned int)val);
        #line 612 
        edev->rss_ind_table[i] = indir_val;
      }
      #line 607 
      i ++;
    }
    #line 614 
    edev->rss_params_inited |= 1U;
  }
  #line 618 
  i = 0;
  #line 618 
  while (i <= 127) {
    {
      #line 619 
      u16 idx = edev->rss_ind_table[i];
      #line 621 
      rss->rss_ind_table[i] = ((edev->fp_array + (unsigned long)idx)->rxq)->handle;
    }
    #line 618 
    i ++;
  }
  #line 624 
  if (((unsigned long)edev->rss_params_inited & 2UL) == 0UL) {
    #line 625 
    netdev_rss_key_fill((void *)(& edev->rss_key),40UL);
    #line 626 
    edev->rss_params_inited |= 2U;
  }
  #line 628 
  memcpy((void *)(& rss->rss_key),(void *)(& edev->rss_key),40UL);
  #line 630 
  if (((unsigned long)edev->rss_params_inited & 4UL) == 0UL) {
    #line 631 
    edev->rss_caps = (unsigned char)15U;
    #line 633 
    edev->rss_params_inited |= 4U;
  }
  #line 635 
  rss->rss_caps = edev->rss_caps;
  #line 637 
  *update = (unsigned char)1U;
  #line 638 
  return;
}

#line 640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_set_ucast_rx_mac(struct qede_dev *edev, enum qed_filter_xcast_params_type opcode, unsigned char *mac)
{
  #line 644 
  struct qed_filter_params filter_cmd;
  #line 646 
  memset((void *)(& filter_cmd),0,396UL);
  #line 647 
  filter_cmd.type = QED_FILTER_TYPE_UCAST;
  #line 648 
  filter_cmd.filter.ucast.type = opcode;
  #line 649 
  filter_cmd.filter.ucast.mac_valid = (unsigned char)1U;
  #line 650 
  ether_addr_copy((u8 *)(& filter_cmd.filter.ucast.mac),mac);
  #line 652 
  return (*((edev->ops)->filter_config))(edev->cdev,& filter_cmd);
}

#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_set_ucast_rx_vlan(struct qede_dev *edev, enum qed_filter_xcast_params_type opcode, u16 vid)
{
  #line 659 
  struct qed_filter_params filter_cmd;
  #line 661 
  memset((void *)(& filter_cmd),0,396UL);
  #line 662 
  filter_cmd.type = QED_FILTER_TYPE_UCAST;
  #line 663 
  filter_cmd.filter.ucast.type = opcode;
  #line 664 
  filter_cmd.filter.ucast.vlan_valid = (unsigned char)1U;
  #line 665 
  filter_cmd.filter.ucast.vlan = vid;
  #line 667 
  return (*((edev->ops)->filter_config))(edev->cdev,& filter_cmd);
}

#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_config_accept_any_vlan(struct qede_dev *edev, bool action)
{
  #line 672 
  struct qed_update_vport_params *params;
  #line 673 
  int rc;
  #line 676 
  if ((int)edev->accept_any_vlan == (int)action) 
                                                 #line 677 
                                                 return 0;
  #line 679 
  params = (struct qed_update_vport_params *)cif_vzalloc(1080UL);
  #line 680 
  if (params == (struct qed_update_vport_params *)0) 
                                                     #line 681 
                                                     return -12;
  #line 683 
  params->vport_id = (unsigned char)0U;
  #line 684 
  params->accept_any_vlan = (unsigned char)action;
  #line 685 
  params->update_accept_any_vlan_flg = (unsigned char)1U;
  #line 687 
  rc = (*((edev->ops)->vport_update))(edev->cdev,params);
  #line 688 
  if (rc != 0) {
    #line 689 
    char *tmp_0;
    #line 689 
    char *tmp_1;
    #line 689 
    if ((int)action != 0) 
                          #line 689 
                          tmp_0 = (char *)"enable"; else 
                                                         #line 689 
                                                         tmp_0 = (char *)"disable";
    #line 689 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 689 
                                                  tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 689 
                                                                    tmp_1 = (char *)"";
    #line 689 
    printk((char *)"\001",(char *)"qede_config_accept_any_vlan",689,tmp_1,tmp_0);
  }
  else {
    #line 692 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 692 
      char *tmp_2;
      #line 692 
      char *tmp_3;
      #line 692 
      if ((int)action != 0) 
                            #line 692 
                            tmp_2 = (char *)"enabled"; else 
                                                            #line 692 
                                                            tmp_2 = (char *)"disabled";
      #line 692 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 692 
                                                    tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 692 
                                                                    tmp_3 = (char *)"";
      #line 692 
      printk((char *)"\001",(char *)"qede_config_accept_any_vlan",692,tmp_3,tmp_2);
    }
    #line 694 
    edev->accept_any_vlan = action;
  }
  #line 697 
  cif_vfree((void *)params);
  #line 698 
  return 0;
}

#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_vlan_rx_add_vid(struct net_device *dev, __be16 proto, u16 vid)
{
  #line 719 
  void *__mptr;
  #line 704 
  struct qede_vlan *vlan;
  #line 704 
  struct qede_vlan *tmp;
  #line 703 
  struct qede_dev *edev = netdev_priv(dev);
  #line 705 
  int rc = 0;
  #line 707 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 32U) != 0U) != 0L) {
    #line 707 
    char *tmp_1;
    #line 707 
    ;
    #line 707 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 707 
                                                  tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 707 
                                                                    tmp_1 = (char *)"";
    #line 707 
    printk((char *)"\001",(char *)"qede_vlan_rx_add_vid",707,tmp_1,(int)vid);
  }
  #line 709 
  vlan = (struct qede_vlan *)kzalloc(24UL,3264U);
  #line 710 
  if (vlan == (struct qede_vlan *)0) {
    #line 711 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 711 
      char *tmp_3;
      #line 711 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 711 
                                                    tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 711 
                                                                    tmp_3 = (char *)"";
      #line 711 
      printk((char *)"\001",(char *)"qede_vlan_rx_add_vid",711,tmp_3);
    }
    #line 712 
    return -12;
  }
  #line 714 
  INIT_LIST_HEAD(& vlan->list);
  #line 715 
  vlan->vid = vid;
  #line 716 
  vlan->configured = (_Bool)0;
  #line 719 
  __mptr = (void *)edev->vlan_list.next;
  #line 719 
  tmp = ((struct qede_vlan *)__mptr);
  #line 719 
  while (& tmp->list != & edev->vlan_list) {
    #line 719 
    void *__mptr_0;
    #line 720 
    if ((int)tmp->vid == (int)vlan->vid) {
      #line 721 
      if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 48U) != 0U) != 0L) {
        #line 721 
        char *tmp_6;
        #line 721 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 721 
                                                      tmp_6 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 721 
                                                                    tmp_6 = (char *)"";
        #line 721 
        printk((char *)"\001",(char *)"qede_vlan_rx_add_vid",721,tmp_6);
      }
      #line 723 
      kfree((void *)vlan);
      #line 724 
      return -17;
    }
    #line 719 
    __mptr_0 = (void *)tmp->list.next;
    #line 719 
    tmp = ((struct qede_vlan *)__mptr_0);
  }
  #line 729 
  __qede_lock(edev);
  #line 730 
  if (edev->state != 1U) {
    #line 731 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 16U) != 0U) != 0L) {
      #line 731 
      char *tmp_7;
      #line 731 
      ;
      #line 731 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 731 
                                                    tmp_7 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 731 
                                                                    tmp_7 = (char *)"";
      #line 731 
      printk((char *)"\001",(char *)"qede_vlan_rx_add_vid",731,tmp_7,(int)vid);
    }
    #line 734 
    if ((unsigned int)vid != 0U) 
                                 #line 735 
                                 edev->non_configured_vlans = (u16)((int)edev->non_configured_vlans + 1);
    #line 736 
    list_add(& vlan->list,& edev->vlan_list);
    #line 737 
    goto out;
  }
  #line 744 
  if ((int)edev->configured_vlans < (int)edev->dev_info.num_vlan_filters || (unsigned int)vlan->vid == 0U) {
    #line 746 
    rc = qede_set_ucast_rx_vlan(edev,(enum qed_filter_xcast_params_type)QED_FILTER_XCAST_TYPE_ADD,(unsigned short)((int)vlan->vid));
    #line 749 
    if (rc != 0) {
      #line 750 
      char *tmp_8;
      #line 750 
      ;
      #line 750 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 750 
                                                    tmp_8 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 750 
                                                                    tmp_8 = (char *)"";
      #line 750 
      printk((char *)"\001",(char *)"qede_vlan_rx_add_vid",750,tmp_8,(int)vlan->vid);
      #line 752 
      kfree((void *)vlan);
      #line 753 
      goto out;
    }
    #line 755 
    vlan->configured = (_Bool)1;
    #line 758 
    if ((unsigned int)vlan->vid != 0U) 
                                       #line 759 
                                       edev->configured_vlans = (u16)((int)edev->configured_vlans + 1);
  }
  else {
    #line 762 
    if ((unsigned int)edev->non_configured_vlans == 0U) {
      #line 763 
      rc = qede_config_accept_any_vlan(edev,(_Bool)1);
      #line 764 
      if (rc != 0) {
        #line 765 
        kfree((void *)vlan);
        #line 766 
        goto out;
      }
    }
    #line 770 
    edev->non_configured_vlans = (u16)((int)edev->non_configured_vlans + 1);
  }
  #line 773 
  list_add(& vlan->list,& edev->vlan_list);
  #line 775 
  out: 
       #line 775 
  ;
  #line 776 
  __qede_unlock(edev);
  #line 777 
  return rc;
}

#line 780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static void qede_del_vlan_from_list(struct qede_dev *edev, struct qede_vlan *vlan)
{
  #line 784 
  if ((unsigned int)vlan->vid != 0U) 
    #line 785 
    if ((int)vlan->configured != 0) 
                                    #line 786 
                                    edev->configured_vlans = (u16)((int)edev->configured_vlans - 1); else 
                                                                    #line 788 
                                                                    edev->non_configured_vlans = (u16)((int)edev->non_configured_vlans - 1);
  #line 791 
  list_del(& vlan->list);
  #line 792 
  kfree((void *)vlan);
  #line 793 
  return;
}

#line 795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_configure_vlan_filters(struct qede_dev *edev)
{
  #line 807 
  void *__mptr;
  #line 798 
  struct qed_dev_eth_info *dev_info;
  #line 797 
  int rc = 0;
  #line 797 
  int real_rc = 0;
  #line 797 
  int accept_any_vlan = 0;
  #line 799 
  struct qede_vlan *vlan = (struct qede_vlan *)0;
  #line 801 
  if (list_empty(& edev->vlan_list) != 0) 
                                          #line 802 
                                          return 0;
  #line 804 
  dev_info = & edev->dev_info;
  #line 807 
  __mptr = (void *)edev->vlan_list.next;
  #line 807 
  vlan = ((struct qede_vlan *)__mptr);
  #line 807 
  while (& vlan->list != & edev->vlan_list) {
    #line 807 
    void *__mptr_0;
    #line 808 
    if ((int)vlan->configured != 0) 
                                    #line 809 
                                    goto __Cont;
    #line 812 
    if ((unsigned int)vlan->vid != 0U && (int)edev->configured_vlans == (int)dev_info->num_vlan_filters) {
      #line 814 
      accept_any_vlan = 1;
      #line 815 
      goto __Cont;
    }
    #line 818 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 32U) != 0U) != 0L) {
      #line 818 
      char *tmp_2;
      #line 818 
      ;
      #line 818 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 818 
                                                    tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 818 
                                                                    tmp_2 = (char *)"";
      #line 818 
      printk((char *)"\001",(char *)"qede_configure_vlan_filters",818,tmp_2,(int)vlan->vid);
    }
    #line 820 
    rc = qede_set_ucast_rx_vlan(edev,(enum qed_filter_xcast_params_type)QED_FILTER_XCAST_TYPE_ADD,(unsigned short)((int)vlan->vid));
    #line 822 
    if (rc != 0) {
      #line 823 
      char *tmp_3;
      #line 823 
      ;
      #line 823 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 823 
                                                    tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 823 
                                                                    tmp_3 = (char *)"";
      #line 823 
      printk((char *)"\001",(char *)"qede_configure_vlan_filters",823,tmp_3,(int)vlan->vid);
      #line 825 
      real_rc = rc;
      #line 826 
      goto __Cont;
    }
    #line 829 
    vlan->configured = (_Bool)1;
    #line 831 
    if ((unsigned int)vlan->vid != 0U) {
      #line 832 
      edev->non_configured_vlans = (u16)((int)edev->non_configured_vlans - 1);
      #line 833 
      edev->configured_vlans = (u16)((int)edev->configured_vlans + 1);
    }
    #line 807 
    __Cont: { /* sequence */
              #line 807 
              __mptr_0 = (void *)vlan->list.next;
              #line 807 
              vlan = ((struct qede_vlan *)__mptr_0);
            }
  }
  #line 842 
  if (accept_any_vlan != 0) 
                            #line 843 
                            rc = qede_config_accept_any_vlan(edev,(_Bool)1);
  else 
    #line 844 
    if ((unsigned int)edev->non_configured_vlans == 0U) 
                                                        #line 845 
                                                        rc = qede_config_accept_any_vlan(edev,(_Bool)0);
  #line 847 
  if (rc != 0 && real_rc == 0) 
                               #line 848 
                               real_rc = rc;
  #line 850 
  return real_rc;
}

#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_vlan_rx_kill_vid(struct net_device *dev, __be16 proto, u16 vid)
{
  #line 863 
  void *__mptr;
  #line 855 
  struct qede_dev *edev = netdev_priv(dev);
  #line 856 
  struct qede_vlan *vlan = (struct qede_vlan *)0;
  #line 857 
  int rc = 0;
  #line 859 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 16U) != 0U) != 0L) {
    #line 859 
    char *tmp_0;
    #line 859 
    ;
    #line 859 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 859 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 859 
                                                                    tmp_0 = (char *)"";
    #line 859 
    printk((char *)"\001",(char *)"qede_vlan_rx_kill_vid",859,tmp_0,(int)vid);
  }
  #line 862 
  __qede_lock(edev);
  #line 863 
  __mptr = (void *)edev->vlan_list.next;
  #line 863 
  vlan = ((struct qede_vlan *)__mptr);
  #line 863 
  while (& vlan->list != & edev->vlan_list) {
    #line 863 
    void *__mptr_0;
    #line 864 
    if ((int)vlan->vid == (int)vid) 
                                    #line 865 
                                    break;
    #line 863 
    __mptr_0 = (void *)vlan->list.next;
    #line 863 
    vlan = ((struct qede_vlan *)__mptr_0);
  }
  #line 867 
  if (vlan == (struct qede_vlan *)0 || (int)vlan->vid != (int)vid) {
    #line 868 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 48U) != 0U) != 0L) {
      #line 868 
      char *tmp_3;
      #line 868 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 868 
                                                    tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 868 
                                                                    tmp_3 = (char *)"";
      #line 868 
      printk((char *)"\001",(char *)"qede_vlan_rx_kill_vid",868,tmp_3);
    }
    #line 870 
    goto out;
  }
  #line 873 
  if (edev->state != 1U) {
    #line 877 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 16U) != 0U) != 0L) {
      #line 877 
      char *tmp_4;
      #line 877 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 877 
                                                    tmp_4 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 877 
                                                                    tmp_4 = (char *)"";
      #line 877 
      printk((char *)"\001",(char *)"qede_vlan_rx_kill_vid",877,tmp_4);
    }
    #line 879 
    qede_del_vlan_from_list(edev,vlan);
    #line 880 
    goto out;
  }
  #line 884 
  if ((int)vlan->configured != 0) {
    #line 885 
    rc = qede_set_ucast_rx_vlan(edev,(enum qed_filter_xcast_params_type)QED_FILTER_XCAST_TYPE_DEL,(unsigned short)((int)vid));
    #line 887 
    if (rc != 0) {
      #line 888 
      char *tmp_5;
      #line 888 
      ;
      #line 888 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 888 
                                                    tmp_5 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 888 
                                                                    tmp_5 = (char *)"";
      #line 888 
      printk((char *)"\001",(char *)"qede_vlan_rx_kill_vid",888,tmp_5,(int)vid);
      #line 889 
      goto out;
    }
  }
  #line 893 
  qede_del_vlan_from_list(edev,vlan);
  #line 898 
  rc = qede_configure_vlan_filters(edev);
  #line 900 
  out: 
       #line 900 
  ;
  #line 901 
  __qede_unlock(edev);
  #line 902 
  return rc;
}

#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_vlan_mark_nonconfigured(struct qede_dev *edev)
{
  #line 912 
  void *__mptr;
  #line 907 
  struct qede_vlan *vlan = (struct qede_vlan *)0;
  #line 909 
  if (list_empty(& edev->vlan_list) != 0) 
                                          #line 910 
                                          return;
  #line 912 
  __mptr = (void *)edev->vlan_list.next;
  #line 912 
  vlan = ((struct qede_vlan *)__mptr);
  #line 912 
  while (& vlan->list != & edev->vlan_list) {
    #line 912 
    void *__mptr_0;
    #line 913 
    if (! vlan->configured) 
                            #line 914 
                            goto __Cont;
    #line 916 
    vlan->configured = (_Bool)0;
    #line 919 
    if ((unsigned int)vlan->vid != 0U) {
      #line 920 
      edev->non_configured_vlans = (u16)((int)edev->non_configured_vlans + 1);
      #line 921 
      edev->configured_vlans = (u16)((int)edev->configured_vlans - 1);
    }
    #line 924 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 16U) != 0U) != 0L) {
      #line 924 
      char *tmp_2;
      #line 924 
      ;
      #line 924 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 924 
                                                    tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 924 
                                                                    tmp_2 = (char *)"";
      #line 924 
      printk((char *)"\001",(char *)"qede_vlan_mark_nonconfigured",924,tmp_2,(int)vlan->vid);
    }
    #line 912 
    __Cont: { /* sequence */
              #line 912 
              __mptr_0 = (void *)vlan->list.next;
              #line 912 
              vlan = ((struct qede_vlan *)__mptr_0);
            }
  }
  #line 928 
  edev->accept_any_vlan = (_Bool)0;
  #line 929 
  return;
}

#line 931  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static void qede_set_features_reload(struct qede_dev *edev, struct qede_reload_args *args)
{
  #line 934 
  (edev->ndev)->features = args->u.features;
  #line 935 
  return;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
unsigned long long qede_fix_features(struct net_device *dev, netdev_features_t features)
{
  #line 940 
  struct qede_dev *edev = netdev_priv(dev);
  #line 942 
  if ((edev->xdp_prog != (struct bpf_prog *)0 || (edev->ndev)->mtu > 4096U) || (features & 16384ULL) == 0ULL) 
    #line 944 
    features &= 18428729675200069631ULL;
  #line 946 
  return features;
}

#line 949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_set_features(struct net_device *dev, netdev_features_t features)
{
  #line 951 
  struct qede_dev *edev = netdev_priv(dev);
  #line 952 
  netdev_features_t changes = dev->features ^ features;
  #line 953 
  bool need_reload = (_Bool)0;
  #line 955 
  if ((changes & 18014398509481984ULL) != 0ULL) 
                                                #line 956 
                                                need_reload = (_Bool)1;
  #line 958 
  if ((int)need_reload != 0) {
    #line 959 
    struct qede_reload_args args;
    #line 961 
    args.u.features = features;
    #line 962 
    args.func = & qede_set_features_reload;
    #line 968 
    __qede_lock(edev);
    #line 969 
    if (edev->xdp_prog != (struct bpf_prog *)0) 
                                                #line 970 
                                                (*(args.func))(edev,& args); else 
                                                                    #line 972 
                                                                    qede_reload(edev,& args,(_Bool)1);
    #line 973 
    __qede_unlock(edev);
    #line 975 
    return 1;
  }
  #line 978 
  return 0;
}

#line 981  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_udp_tunnel_add(struct net_device *dev, struct udp_tunnel_info *ti)
{
  #line 984 
  struct qed_tunn_params tunn_params;
  #line 986 
  int rc;
  #line 983 
  struct qede_dev *edev = netdev_priv(dev);
  #line 985 
  u16 t_port = __builtin_bswap16((unsigned short)((int)ti->port));
  #line 988 
  memset((void *)(& tunn_params),0,8UL);
  #line 990 
  switch ((int)ti->type) {
    #line 991 
    case 0: 
            #line 991 
    ;
    #line 992 
    if (! edev->dev_info.common.vxlan_enable) 
                                              #line 993 
                                              return;
    #line 995 
    if ((unsigned int)edev->vxlan_dst_port != 0U) 
                                                  #line 996 
                                                  return;
    #line 998 
    tunn_params.update_vxlan_port = (unsigned char)1U;
    #line 999 
    tunn_params.vxlan_port = t_port;
    #line 1001 
    __qede_lock(edev);
    #line 1002 
    rc = (*((edev->ops)->tunn_config))(edev->cdev,& tunn_params);
    #line 1003 
    __qede_unlock(edev);
    #line 1005 
    if (rc == 0) {
      #line 1006 
      edev->vxlan_dst_port = t_port;
      #line 1007 
      if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
        #line 1007 
        char *tmp_1;
        #line 1007 
        ;
        #line 1007 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1007 
                                                      tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1007 
                                                                    tmp_1 = (char *)"";
        #line 1007 
        printk((char *)"\001",(char *)"qede_udp_tunnel_add",1007,tmp_1,(int)t_port);
      }
    }
    else 
      #line 1010 
      if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
        #line 1010 
        char *tmp_2;
        #line 1010 
        ;
        #line 1010 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1010 
                                                      tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1010 
                                                                    tmp_2 = (char *)"";
        #line 1010 
        printk((char *)"\001",(char *)"qede_udp_tunnel_add",1010,tmp_2,(int)t_port);
      }
    #line 1014 
    break;
    #line 1015 
    case 1: 
            #line 1015 
    ;
    #line 1016 
    if (! edev->dev_info.common.geneve_enable) 
                                               #line 1017 
                                               return;
    #line 1019 
    if ((unsigned int)edev->geneve_dst_port != 0U) 
                                                   #line 1020 
                                                   return;
    #line 1022 
    tunn_params.update_geneve_port = (unsigned char)1U;
    #line 1023 
    tunn_params.geneve_port = t_port;
    #line 1025 
    __qede_lock(edev);
    #line 1026 
    rc = (*((edev->ops)->tunn_config))(edev->cdev,& tunn_params);
    #line 1027 
    __qede_unlock(edev);
    #line 1029 
    if (rc == 0) {
      #line 1030 
      edev->geneve_dst_port = t_port;
      #line 1031 
      if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
        #line 1031 
        char *tmp_3;
        #line 1031 
        ;
        #line 1031 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1031 
                                                      tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1031 
                                                                    tmp_3 = (char *)"";
        #line 1031 
        printk((char *)"\001",(char *)"qede_udp_tunnel_add",1031,tmp_3,(int)t_port);
      }
    }
    else 
      #line 1034 
      if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
        #line 1034 
        char *tmp_4;
        #line 1034 
        ;
        #line 1034 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1034 
                                                      tmp_4 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1034 
                                                                    tmp_4 = (char *)"";
        #line 1034 
        printk((char *)"\001",(char *)"qede_udp_tunnel_add",1034,tmp_4,(int)t_port);
      }
    #line 1038 
    break;
    #line 1039 
    default: 
             #line 1039 
    ;
    #line 1040 
    return;
  }
  #line 1042 
  return;
}

#line 1044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_udp_tunnel_del(struct net_device *dev, struct udp_tunnel_info *ti)
{
  #line 1048 
  struct qed_tunn_params tunn_params;
  #line 1047 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1049 
  u16 t_port = __builtin_bswap16((unsigned short)((int)ti->port));
  #line 1051 
  memset((void *)(& tunn_params),0,8UL);
  #line 1053 
  switch ((int)ti->type) {
    #line 1054 
    case 0: 
            #line 1054 
    ;
    #line 1055 
    if ((int)edev->vxlan_dst_port != (int)t_port) 
                                                  #line 1056 
                                                  return;
    #line 1058 
    tunn_params.update_vxlan_port = (unsigned char)1U;
    #line 1059 
    tunn_params.vxlan_port = (unsigned short)0U;
    #line 1061 
    __qede_lock(edev);
    #line 1062 
    (*((edev->ops)->tunn_config))(edev->cdev,& tunn_params);
    #line 1063 
    __qede_unlock(edev);
    #line 1065 
    edev->vxlan_dst_port = (unsigned short)0U;
    #line 1067 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
      #line 1067 
      char *tmp_1;
      #line 1067 
      ;
      #line 1067 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1067 
                                                    tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1067 
                                                                    tmp_1 = (char *)"";
      #line 1067 
      printk((char *)"\001",(char *)"qede_udp_tunnel_del",1067,tmp_1,(int)t_port);
    }
    #line 1070 
    break;
    #line 1071 
    case 1: 
            #line 1071 
    ;
    #line 1072 
    if ((int)edev->geneve_dst_port != (int)t_port) 
                                                   #line 1073 
                                                   return;
    #line 1075 
    tunn_params.update_geneve_port = (unsigned char)1U;
    #line 1076 
    tunn_params.geneve_port = (unsigned short)0U;
    #line 1078 
    __qede_lock(edev);
    #line 1079 
    (*((edev->ops)->tunn_config))(edev->cdev,& tunn_params);
    #line 1080 
    __qede_unlock(edev);
    #line 1082 
    edev->geneve_dst_port = (unsigned short)0U;
    #line 1084 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
      #line 1084 
      char *tmp_2;
      #line 1084 
      ;
      #line 1084 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1084 
                                                    tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1084 
                                                                    tmp_2 = (char *)"";
      #line 1084 
      printk((char *)"\001",(char *)"qede_udp_tunnel_del",1084,tmp_2,(int)t_port);
    }
    #line 1086 
    break;
    #line 1087 
    default: 
             #line 1087 
    ;
    #line 1088 
    return;
  }
  #line 1090 
  return;
}

#line 1092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static void qede_xdp_reload_func(struct qede_dev *edev, struct qede_reload_args *args)
{
  #line 1097 
  struct bpf_prog *__ret;
  #line 1095 
  struct bpf_prog *old;
  {
    #line 1097 
    struct bpf_prog **__ai_ptr = & edev->xdp_prog;
    #line 1097 
    kasan_check_read((void *)__ai_ptr,8U);
    #line 1097 
    __ret = args->u.new_prog;
    #line 1097 
    switch (8UL) {
      #line 1097 
      case (unsigned long)1: 
                             #line 1097 
      ;
      #line 1098 
      ldv_inline_asm();
      #line 1097 
      break;
      #line 1097 
      case (unsigned long)2: 
                             #line 1097 
      ;
      #line 1098 
      ldv_inline_asm();
      #line 1097 
      break;
      #line 1097 
      case (unsigned long)4: 
                             #line 1097 
      ;
      #line 1098 
      ldv_inline_asm();
      #line 1097 
      break;
      #line 1097 
      case (unsigned long)8: 
                             #line 1097 
      ;
      #line 1098 
      ldv_inline_asm();
      #line 1097 
      break;
      #line 1097 
      default: 
               #line 1097 
      ;
      #line 1097 
      __xchg_wrong_size();
    }
    }
  #line 1097 
  old = __ret;
  #line 1098 
  if (old != (struct bpf_prog *)0) 
                                   #line 1099 
                                   bpf_prog_put(old);
  #line 1100 
  return;
}

#line 1102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_xdp_set(struct qede_dev *edev, struct bpf_prog *prog)
{
  #line 1104 
  struct qede_reload_args args;
  #line 1107 
  args.func = & qede_xdp_reload_func;
  #line 1108 
  args.u.new_prog = prog;
  #line 1109 
  qede_reload(edev,& args,(_Bool)0);
  #line 1111 
  return 0;
}

#line 1114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_xdp(struct net_device *dev, struct netdev_bpf *xdp)
{
  #line 1116 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1118 
  switch ((unsigned int)xdp->command) {
    #line 1119 
    case (unsigned int)0: 
                          #line 1119 
    ;
    #line 1120 
    return qede_xdp_set(edev,
                     xdp->__anonCompField_netdev_bpf_158.__anonCompField___anonunion_674_155.prog);
    #line 1121 
    case (unsigned int)2: 
                          #line 1121 
    ;
    #line 1122 
    if (edev->xdp_prog != (struct bpf_prog *)0) 
                                                #line 1122 
                                                xdp->__anonCompField_netdev_bpf_158.__anonCompField___anonunion_674_156.prog_id = ((edev->xdp_prog)->aux)->id; else 
                                                                    #line 1122 
                                                                    xdp->__anonCompField_netdev_bpf_158.__anonCompField___anonunion_674_156.prog_id = 0U;
    #line 1123 
    return 0;
    #line 1124 
    default: 
             #line 1124 
    ;
    #line 1125 
    return -22;
  }
}

#line 1129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_set_mcast_rx_mac(struct qede_dev *edev, enum qed_filter_xcast_params_type opcode, unsigned char *mac, int num_macs)
{
  #line 1133 
  struct qed_filter_params filter_cmd;
  #line 1134 
  int i;
  #line 1136 
  memset((void *)(& filter_cmd),0,396UL);
  #line 1137 
  filter_cmd.type = QED_FILTER_TYPE_MCAST;
  #line 1138 
  filter_cmd.filter.mcast.type = opcode;
  #line 1139 
  filter_cmd.filter.mcast.num = (unsigned char)num_macs;
  #line 1141 
  i = 0;
  #line 1141 
  while (i < num_macs) {
    #line 1142 
    ether_addr_copy((u8 *)(& filter_cmd.filter.mcast.mac[i]),mac);
    #line 1141 
    i ++;
    #line 1141 
    mac += 6U;
  }
  #line 1144 
  return (*((edev->ops)->filter_config))(edev->cdev,& filter_cmd);
}

#line 1147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_set_mac_addr(struct net_device *ndev, void *p)
{
  #line 1149 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 1150 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 1151 
  int rc = 0;
  #line 1157 
  __qede_lock(edev);
  #line 1159 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) {
    #line 1160 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1160 
      char *tmp_0;
      #line 1160 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1160 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1160 
                                                                    tmp_0 = (char *)"";
      #line 1160 
      printk((char *)"\001",(char *)"qede_set_mac_addr",1160,tmp_0);
    }
    #line 1161 
    rc = -14;
    #line 1162 
    goto out;
  }
  #line 1165 
  if (! (*((edev->ops)->check_mac))(edev->cdev,(u8 *)(& addr->sa_data))) {
    #line 1166 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1166 
      char *tmp_2;
      #line 1166 
      ;
      #line 1166 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1166 
                                                    tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1166 
                                                                    tmp_2 = (char *)"";
      #line 1166 
      printk((char *)"\001",(char *)"qede_set_mac_addr",1166,tmp_2,(char *)(& addr->sa_data));
    }
    #line 1168 
    rc = -22;
    #line 1169 
    goto out;
  }
  #line 1172 
  if (edev->state == 1U) {
    #line 1174 
    rc = qede_set_ucast_rx_mac(edev,(enum qed_filter_xcast_params_type)QED_FILTER_XCAST_TYPE_DEL,ndev->dev_addr);
    #line 1176 
    if (rc != 0) 
                 #line 1177 
                 goto out;
  }
  #line 1180 
  ether_addr_copy(ndev->dev_addr,(u8 *)(& addr->sa_data));
  #line 1181 
  if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
    #line 1181 
    char *tmp_4;
    #line 1181 
    ;
    #line 1181 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1181 
                                                  tmp_4 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1181 
                                                                    tmp_4 = (char *)"";
    #line 1181 
    printk((char *)"\001",(char *)"qede_set_mac_addr",1181,tmp_4,(char *)(& addr->sa_data));
  }
  #line 1183 
  if (edev->state != 1U) {
    #line 1184 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 16U) != 0U) != 0L) {
      #line 1184 
      char *tmp_5;
      #line 1184 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1184 
                                                    tmp_5 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1184 
                                                                    tmp_5 = (char *)"";
      #line 1184 
      printk((char *)"\001",(char *)"qede_set_mac_addr",1184,tmp_5);
    }
    #line 1187 
    if ((int)test_bit(0L,& edev->flags) != 0) 
      #line 1187 
      if ((edev->ops)->req_bulletin_update_mac != (int (*)(struct qed_dev *, u8 *))0) 
        #line 1188 
        (*((edev->ops)->req_bulletin_update_mac))(edev->cdev,ndev->dev_addr);
    #line 1190 
    goto out;
  }
  #line 1193 
  (*(((edev->ops)->common)->update_mac))(edev->cdev,ndev->dev_addr);
  #line 1195 
  rc = qede_set_ucast_rx_mac(edev,(enum qed_filter_xcast_params_type)QED_FILTER_XCAST_TYPE_ADD,ndev->dev_addr);
  #line 1197 
  out: 
       #line 1197 
  ;
  #line 1198 
  __qede_unlock(edev);
  #line 1199 
  return rc;
}

#line 1203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_configure_mcast_filtering(struct net_device *ndev, enum qed_filter_rx_mode_type *accept_flags)
{
  #line 1207 
  unsigned char *mc_macs;
  #line 1207 
  unsigned char *temp;
  #line 1208 
  struct netdev_hw_addr *ha;
  #line 1209 
  int mc_count;
  #line 1210 
  size_t size;
  #line 1206 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 1209 
  int rc = 0;
  #line 1212 
  size = 384UL;
  #line 1214 
  mc_macs = (unsigned char *)kzalloc(size,3264U);
  #line 1215 
  if (mc_macs == (unsigned char *)0U) {
    #line 1216 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1216 
      char *tmp_1;
      #line 1216 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1216 
                                                    tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1216 
                                                                    tmp_1 = (char *)"";
      #line 1216 
      printk((char *)"\001",(char *)"qede_configure_mcast_filtering",1216,tmp_1);
    }
    #line 1218 
    rc = -12;
    #line 1219 
    goto exit;
  }
  #line 1222 
  temp = mc_macs;
  #line 1225 
  rc = qede_set_mcast_rx_mac(edev,(enum qed_filter_xcast_params_type)QED_FILTER_XCAST_TYPE_DEL,mc_macs,1);
  #line 1227 
  if (rc != 0) 
               #line 1228 
               goto exit;
  #line 1230 
  netif_addr_lock_bh(ndev);
  #line 1232 
  mc_count = ndev->mc.count;
  #line 1233 
  if (mc_count <= 64) {
    #line 1234 
    void *__mptr;
    #line 1234 
    __mptr = (void *)ndev->mc.list.next;
    #line 1234 
    ha = ((struct netdev_hw_addr *)__mptr);
    #line 1234 
    while (& ha->list != & ndev->mc.list) {
      #line 1234 
      void *__mptr_0;
      #line 1235 
      ether_addr_copy(temp,(u8 *)(& ha->addr));
      #line 1236 
      temp += 6U;
      #line 1234 
      __mptr_0 = (void *)ha->list.next;
      #line 1234 
      ha = ((struct netdev_hw_addr *)__mptr_0);
    }
  }
  #line 1240 
  netif_addr_unlock_bh(ndev);
  #line 1243 
  if ((ndev->flags & 512U) != 0U || mc_count > 64) {
    #line 1244 
    if (*accept_flags == (unsigned int)QED_FILTER_RX_MODE_TYPE_REGULAR) 
      #line 1245 
      *accept_flags = QED_FILTER_RX_MODE_TYPE_MULTI_PROMISC;
  }
  else 
       #line 1248 
       rc = qede_set_mcast_rx_mac(edev,(enum qed_filter_xcast_params_type)QED_FILTER_XCAST_TYPE_ADD,mc_macs,mc_count);
  #line 1252 
  exit: 
        #line 1252 
  ;
  #line 1253 
  kfree((void *)mc_macs);
  #line 1254 
  return rc;
}

#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_set_rx_mode(struct net_device *ndev)
{
  #line 1259 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 1261 
  cif_set_bit(1L,& edev->sp_flags);
  #line 1262 
  cif_schedule_delayed_work(& edev->sp_task,0UL);
  #line 1263 
  return;
}

#line 1266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
void qede_config_rx_mode(struct net_device *ndev)
{
  #line 1289 
  void *__mptr;
  #line 1268 
  enum qed_filter_rx_mode_type accept_flags;
  #line 1270 
  struct qed_filter_params rx_mode;
  #line 1271 
  unsigned char *uc_macs;
  #line 1271 
  unsigned char *temp;
  #line 1272 
  struct netdev_hw_addr *ha;
  #line 1273 
  int rc;
  #line 1273 
  int uc_count;
  #line 1274 
  size_t size;
  #line 1269 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 1276 
  netif_addr_lock_bh(ndev);
  #line 1278 
  uc_count = ndev->uc.count;
  #line 1279 
  size = (unsigned long)(uc_count * 6);
  #line 1281 
  uc_macs = (unsigned char *)kzalloc(size,2592U);
  #line 1282 
  if (uc_macs == (unsigned char *)0U) {
    #line 1283 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1283 
      char *tmp_1;
      #line 1283 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1283 
                                                    tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1283 
                                                                    tmp_1 = (char *)"";
      #line 1283 
      printk((char *)"\001",(char *)"qede_config_rx_mode",1283,tmp_1);
    }
    #line 1284 
    netif_addr_unlock_bh(ndev);
    #line 1285 
    return;
  }
  #line 1288 
  temp = uc_macs;
  #line 1289 
  __mptr = (void *)ndev->uc.list.next;
  #line 1289 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 1289 
  while (& ha->list != & ndev->uc.list) {
    #line 1289 
    void *__mptr_0;
    #line 1290 
    ether_addr_copy(temp,(u8 *)(& ha->addr));
    #line 1291 
    temp += 6U;
    #line 1289 
    __mptr_0 = (void *)ha->list.next;
    #line 1289 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 1294 
  netif_addr_unlock_bh(ndev);
  #line 1297 
  memset((void *)(& rx_mode),0,396UL);
  #line 1298 
  rx_mode.type = QED_FILTER_TYPE_RX_MODE;
  #line 1303 
  rc = qede_set_ucast_rx_mac(edev,(enum qed_filter_xcast_params_type)QED_FILTER_XCAST_TYPE_REPLACE,(edev->ndev)->dev_addr);
  #line 1305 
  if (rc != 0) 
               #line 1306 
               goto out;
  #line 1309 
  if ((ndev->flags & 256U) != 0U) 
                                  #line 1310 
                                  accept_flags = QED_FILTER_RX_MODE_TYPE_PROMISC; else 
                                                                    #line 1312 
                                                                    accept_flags = QED_FILTER_RX_MODE_TYPE_REGULAR;
  #line 1315 
  if ((int)edev->dev_info.num_mac_filters > uc_count) {
    #line 1316 
    int i;
    #line 1318 
    temp = uc_macs;
    #line 1319 
    i = 0;
    #line 1319 
    while (i < uc_count) {
      #line 1320 
      rc = qede_set_ucast_rx_mac(edev,(enum qed_filter_xcast_params_type)QED_FILTER_XCAST_TYPE_ADD,temp);
      #line 1323 
      if (rc != 0) 
                   #line 1324 
                   goto out;
      #line 1326 
      temp += 6U;
      #line 1319 
      i ++;
    }
  }
  else 
       #line 1329 
       accept_flags = QED_FILTER_RX_MODE_TYPE_PROMISC;
  #line 1332 
  rc = qede_configure_mcast_filtering(ndev,& accept_flags);
  #line 1333 
  if (rc != 0) 
               #line 1334 
               goto out;
  #line 1337 
  if ((ndev->flags & 256U) != 0U) 
                                  #line 1338 
                                  qede_config_accept_any_vlan(edev,(_Bool)1);
  else 
    #line 1339 
    if ((unsigned int)edev->non_configured_vlans == 0U) 
                                                        #line 1344 
                                                        qede_config_accept_any_vlan(edev,(_Bool)0);
  #line 1347 
  rx_mode.filter.accept_flags = accept_flags;
  #line 1348 
  (*((edev->ops)->filter_config))(edev->cdev,& rx_mode);
  #line 1349 
  out: 
       #line 1349 
  ;
  #line 1350 
  kfree((void *)uc_macs);
  #line 1351 
  return;
}

#line 1354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static struct qede_arfs_fltr_node *qede_get_arfs_fltr_by_loc(struct hlist_head *head, u64 location)
{
  #line 1358 
  void *__mptr;
  #line 1358 
  struct qede_arfs_fltr_node *tmp_0;
  #line 1356 
  struct qede_arfs_fltr_node *fltr;
  {
    #line 1358 
    struct hlist_node *____ptr = head->first;
    #line 1358 
    if (____ptr != (struct hlist_node *)0) {
      #line 1358 
      __mptr = (void *)____ptr;
      #line 1358 
      tmp_0 = ((struct qede_arfs_fltr_node *)(__mptr + 18446744073709551480U));
    }
    else 
         #line 1358 
         tmp_0 = (struct qede_arfs_fltr_node *)0;
    }
  #line 1358 
  fltr = tmp_0;
  #line 1358 
  while (fltr != (struct qede_arfs_fltr_node *)0) {
    #line 1358 
    void *__mptr_0;
    #line 1358 
    struct qede_arfs_fltr_node *tmp_3;
    #line 1359 
    if (fltr->sw_id == location) 
                                 #line 1360 
                                 return fltr;
    {
      #line 1358 
      struct hlist_node *____ptr_0 = fltr->node.next;
      #line 1358 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 1358 
        __mptr_0 = (void *)____ptr_0;
        #line 1358 
        tmp_3 = ((struct qede_arfs_fltr_node *)(__mptr_0 + 18446744073709551480U));
      }
      else 
           #line 1358 
           tmp_3 = (struct qede_arfs_fltr_node *)0;
      }
    #line 1358 
    fltr = tmp_3;
  }
  #line 1362 
  return (struct qede_arfs_fltr_node *)0;
}

#line 1365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_get_cls_rule_all(struct qede_dev *edev, struct ethtool_rxnfc *info, u32 *rule_locs)
{
  #line 1383 
  void *__mptr;
  #line 1383 
  struct qede_arfs_fltr_node *tmp_0;
  #line 1368 
  struct qede_arfs_fltr_node *fltr;
  #line 1369 
  struct hlist_head *head;
  #line 1370 
  int cnt = 0;
  #line 1370 
  int rc = 0;
  #line 1372 
  info->data = 256ULL;
  #line 1374 
  __qede_lock(edev);
  #line 1376 
  if (edev->arfs == (struct qede_arfs *)0) {
    #line 1377 
    rc = -1;
    #line 1378 
    goto unlock;
  }
  #line 1381 
  head = & (edev->arfs)->arfs_hl_head[0];
  {
    #line 1383 
    struct hlist_node *____ptr = head->first;
    #line 1383 
    if (____ptr != (struct hlist_node *)0) {
      #line 1383 
      __mptr = (void *)____ptr;
      #line 1383 
      tmp_0 = ((struct qede_arfs_fltr_node *)(__mptr + 18446744073709551480U));
    }
    else 
         #line 1383 
         tmp_0 = (struct qede_arfs_fltr_node *)0;
    }
  #line 1383 
  fltr = tmp_0;
  #line 1383 
  while (fltr != (struct qede_arfs_fltr_node *)0) {
    #line 1383 
    void *__mptr_0;
    #line 1383 
    struct qede_arfs_fltr_node *tmp_3;
    #line 1384 
    if (info->__anonCompField_ethtool_rxnfc_99.rule_cnt == (unsigned int)cnt) {
      #line 1385 
      rc = -90;
      #line 1386 
      goto unlock;
    }
    #line 1389 
    *(rule_locs + (unsigned long)cnt) = (unsigned int)fltr->sw_id;
    #line 1390 
    cnt ++;
    {
      #line 1383 
      struct hlist_node *____ptr_0 = fltr->node.next;
      #line 1383 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 1383 
        __mptr_0 = (void *)____ptr_0;
        #line 1383 
        tmp_3 = ((struct qede_arfs_fltr_node *)(__mptr_0 + 18446744073709551480U));
      }
      else 
           #line 1383 
           tmp_3 = (struct qede_arfs_fltr_node *)0;
      }
    #line 1383 
    fltr = tmp_3;
  }
  #line 1393 
  info->__anonCompField_ethtool_rxnfc_99.rule_cnt = (unsigned int)cnt;
  #line 1395 
  unlock: 
          #line 1395 
  ;
  #line 1396 
  __qede_unlock(edev);
  #line 1397 
  return rc;
}

#line 1400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_get_cls_rule_entry(struct qede_dev *edev, struct ethtool_rxnfc *cmd)
{
  #line 1402 
  struct ethtool_rx_flow_spec *fsp = & cmd->fs;
  #line 1403 
  struct qede_arfs_fltr_node *fltr = (struct qede_arfs_fltr_node *)0;
  #line 1404 
  int rc = 0;
  #line 1406 
  cmd->data = 256ULL;
  #line 1408 
  __qede_lock(edev);
  #line 1410 
  if (edev->arfs == (struct qede_arfs *)0) {
    #line 1411 
    rc = -1;
    #line 1412 
    goto unlock;
  }
  #line 1415 
  fltr = qede_get_arfs_fltr_by_loc(& (edev->arfs)->arfs_hl_head[0],(unsigned long long)fsp->location);
  #line 1417 
  if (fltr == (struct qede_arfs_fltr_node *)0) {
    #line 1418 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1418 
      char *tmp;
      #line 1418 
      ;
      #line 1418 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1418 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1418 
                                                                    tmp = (char *)"";
      #line 1418 
      printk((char *)"\001",(char *)"qede_get_cls_rule_entry",1418,tmp,fsp->location);
    }
    #line 1420 
    rc = -22;
    #line 1421 
    goto unlock;
  }
  #line 1424 
  if ((unsigned int)fltr->tuple.eth_proto == 8U) {
    #line 1425 
    if ((unsigned int)fltr->tuple.ip_proto == 6U) 
                                                  #line 1426 
                                                  fsp->flow_type = 1U; else 
                                                                    #line 1428 
                                                                    fsp->flow_type = 2U;
    #line 1430 
    fsp->h_u.tcp_ip4_spec.psrc = fltr->tuple.src_port;
    #line 1431 
    fsp->h_u.tcp_ip4_spec.pdst = fltr->tuple.dst_port;
    #line 1432 
    fsp->h_u.tcp_ip4_spec.ip4src = fltr->tuple.__anonCompField_qede_arfs_tuple_210.src_ipv4;
    #line 1433 
    fsp->h_u.tcp_ip4_spec.ip4dst = fltr->tuple.__anonCompField_qede_arfs_tuple_211.dst_ipv4;
  }
  else {
    #line 1435 
    if ((unsigned int)fltr->tuple.ip_proto == 6U) 
                                                  #line 1436 
                                                  fsp->flow_type = 5U; else 
                                                                    #line 1438 
                                                                    fsp->flow_type = 6U;
    #line 1439 
    fsp->h_u.tcp_ip6_spec.psrc = fltr->tuple.src_port;
    #line 1440 
    fsp->h_u.tcp_ip6_spec.pdst = fltr->tuple.dst_port;
    #line 1441 
    memcpy((void *)(& fsp->h_u.tcp_ip6_spec.ip6src),(void *)(& fltr->tuple.__anonCompField_qede_arfs_tuple_210.src_ipv6),16UL);
    #line 1443 
    memcpy((void *)(& fsp->h_u.tcp_ip6_spec.ip6dst),(void *)(& fltr->tuple.__anonCompField_qede_arfs_tuple_211.dst_ipv6),16UL);
  }
  #line 1447 
  fsp->ring_cookie = (unsigned long long)fltr->rxq_id;
  #line 1449 
  if ((unsigned int)fltr->vfid != 0U) 
                                      #line 1450 
                                      fsp->ring_cookie |= (unsigned long long)fltr->vfid << 32;
  #line 1454 
  if ((int)fltr->b_is_drop != 0) 
                                 #line 1455 
                                 fsp->ring_cookie = 18446744073709551615ULL;
  #line 1456 
  unlock: 
          #line 1456 
  ;
  #line 1457 
  __qede_unlock(edev);
  #line 1458 
  return rc;
}

#line 1462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_poll_arfs_filter_config(struct qede_dev *edev, struct qede_arfs_fltr_node *fltr)
{
  #line 1465 
  int count = 100;
  #line 1467 
  while ((int)fltr->used != 0 && count != 0) {
    #line 1468 
    msleep(20U);
    #line 1469 
    count --;
  }
  #line 1472 
  if (count == 0 || (unsigned int)fltr->fw_rc != 0U) {
    #line 1473 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1473 
      char *tmp;
      #line 1473 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1473 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1473 
                                                                    tmp = (char *)"";
      #line 1473 
      printk((char *)"\001",(char *)"qede_poll_arfs_filter_config",1473,tmp);
    }
    #line 1474 
    qede_dequeue_fltr_and_config_searcher(edev,fltr);
    #line 1475 
    return -5;
  }
  #line 1478 
  return (int)fltr->fw_rc;
}

#line 1481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_flow_get_min_header_size(struct qede_arfs_tuple *t)
{
  #line 1483 
  int size = 14;
  #line 1485 
  if ((unsigned int)t->eth_proto == 8U) 
                                        #line 1486 
                                        size = (int)((unsigned int)size + 20U); else 
                                                                    #line 1488 
                                                                    size = (int)((unsigned int)size + 40U);
  #line 1490 
  if ((unsigned int)t->ip_proto == 6U) 
                                       #line 1491 
                                       size = (int)((unsigned int)size + 20U); else 
                                                                    #line 1493 
                                                                    size = (int)((unsigned int)size + 8U);
  #line 1495 
  return size;
}

#line 1498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static bool qede_flow_spec_ipv4_cmp(struct qede_arfs_tuple *a, struct qede_arfs_tuple *b)
{
  #line 1501 
  if ((unsigned int)a->eth_proto != 8U || (unsigned int)b->eth_proto != 8U) 
    #line 1503 
    return (_Bool)0;
  #line 1505 
  return (_Bool)((a->__anonCompField_qede_arfs_tuple_210.src_ipv4 == b->__anonCompField_qede_arfs_tuple_210.src_ipv4 && a->__anonCompField_qede_arfs_tuple_211.dst_ipv4 == b->__anonCompField_qede_arfs_tuple_211.dst_ipv4) != 0);
}

#line 1509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static void qede_flow_build_ipv4_hdr(struct qede_arfs_tuple *t, void *header)
{
  #line 1512 
  __be16 *ports = (__be16 *)(header + 34U);
  #line 1513 
  struct iphdr *ip = (struct iphdr *)(header + 14U);
  #line 1514 
  struct ethhdr *eth = (struct ethhdr *)header;
  #line 1516 
  eth->h_proto = t->eth_proto;
  #line 1517 
  ip->saddr = t->__anonCompField_qede_arfs_tuple_210.src_ipv4;
  #line 1518 
  ip->daddr = t->__anonCompField_qede_arfs_tuple_211.dst_ipv4;
  #line 1519 
  ip->version = (unsigned char)4U;
  #line 1520 
  ip->ihl = (unsigned char)5U;
  #line 1521 
  ip->protocol = t->ip_proto;
  #line 1522 
  ip->tot_len = __builtin_bswap16((unsigned short)((int)((unsigned int)((unsigned short)qede_flow_get_min_header_size(t)) + 65522U)));
  #line 1525 
  *ports = t->src_port;
  #line 1526 
  *(ports + 1U) = t->dst_port;
  #line 1527 
  return;
}

#line 1529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static void qede_flow_stringify_ipv4_hdr(struct qede_arfs_tuple *t, void *buffer)
{
  #line 1532 
  char const *tmp;
  #line 1532 
  if ((unsigned int)t->ip_proto == 6U) 
                                       #line 1532 
                                       tmp = "TCP"; else 
                                                         #line 1532 
                                                         tmp = "UDP";
  #line 1532 
  char *prefix = (char *)tmp;
  #line 1534 
  snprintf((char *)buffer,64UL,(char *)"%s %pI4 (%04x) -> %pI4 (%04x)",prefix,& t->__anonCompField_qede_arfs_tuple_210.src_ipv4,(int)t->src_port,& t->__anonCompField_qede_arfs_tuple_211.dst_ipv4,(int)t->dst_port);
  #line 1538 
  return;
}

#line 1540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static bool qede_flow_spec_ipv6_cmp(struct qede_arfs_tuple *a, struct qede_arfs_tuple *b)
{
  #line 1543 
  if ((unsigned int)a->eth_proto != 56710U || (unsigned int)b->eth_proto != 56710U) 
    #line 1545 
    return (_Bool)0;
  #line 1547 
  if (memcmp((void *)(& a->__anonCompField_qede_arfs_tuple_210.src_ipv6),
             (void *)(& b->__anonCompField_qede_arfs_tuple_210.src_ipv6),
             16UL) != 0) 
    #line 1548 
    return (_Bool)0;
  #line 1550 
  if (memcmp((void *)(& a->__anonCompField_qede_arfs_tuple_211.dst_ipv6),
               (void *)(& b->__anonCompField_qede_arfs_tuple_211.dst_ipv6),
               16UL) != 0) 
    #line 1551 
    return (_Bool)0;
  #line 1553 
  return (_Bool)1;
}

#line 1556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static void qede_flow_build_ipv6_hdr(struct qede_arfs_tuple *t, void *header)
{
  #line 1559 
  __be16 *ports = (__be16 *)(header + 54U);
  #line 1560 
  struct ipv6hdr *ip6 = (struct ipv6hdr *)(header + 14U);
  #line 1561 
  struct ethhdr *eth = (struct ethhdr *)header;
  #line 1563 
  eth->h_proto = t->eth_proto;
  #line 1564 
  memcpy((void *)(& ip6->saddr),(void *)(& t->__anonCompField_qede_arfs_tuple_210.src_ipv6),16UL);
  #line 1565 
  memcpy((void *)(& ip6->daddr),(void *)(& t->__anonCompField_qede_arfs_tuple_211.dst_ipv6),16UL);
  #line 1566 
  ip6->version = (unsigned char)6U;
  #line 1568 
  if ((unsigned int)t->ip_proto == 6U) {
    #line 1569 
    ip6->nexthdr = (unsigned char)6U;
    #line 1570 
    ip6->payload_len = (unsigned short)5120U;
  }
  else {
    #line 1572 
    ip6->nexthdr = (unsigned char)17U;
    #line 1573 
    ip6->payload_len = (unsigned short)2048U;
  }
  #line 1577 
  *ports = t->src_port;
  #line 1578 
  *(ports + 1U) = t->dst_port;
  #line 1579 
  return;
}

#line 1582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_flow_spec_validate_unused(struct qede_dev *edev, struct ethtool_rx_flow_spec *fs)
{
  #line 1585 
  if ((fs->flow_type & 1073741824U) != 0U) {
    #line 1586 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 1586 
      char *tmp;
      #line 1586 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1586 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1586 
                                                                    tmp = (char *)"";
      #line 1586 
      printk((char *)"\001",(char *)"qede_flow_spec_validate_unused",1586,tmp);
    }
    #line 1587 
    return -95;
  }
  #line 1590 
  if ((fs->flow_type & 2147483648U) != 0U && ((unsigned int)fs->h_ext.vlan_etype != 0U || (unsigned int)fs->h_ext.vlan_tci != 0U)) {
    #line 1592 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 1592 
      char *tmp_0;
      #line 1592 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1592 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1592 
                                                                    tmp_0 = (char *)"";
      #line 1592 
      printk((char *)"\001",(char *)"qede_flow_spec_validate_unused",1592,tmp_0);
    }
    #line 1593 
    return -95;
  }
  #line 1596 
  if ((fs->flow_type & 2147483648U) != 0U && (fs->h_ext.data[0] != 0U || fs->h_ext.data[1] != 0U)) {
    #line 1598 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 1598 
      char *tmp_1;
      #line 1598 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1598 
                                                    tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1598 
                                                                    tmp_1 = (char *)"";
      #line 1598 
      printk((char *)"\001",(char *)"qede_flow_spec_validate_unused",1598,tmp_1);
    }
    #line 1599 
    return -95;
  }
  #line 1602 
  return 0;
}

#line 1605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_set_v4_tuple_to_profile(struct qede_dev *edev, struct qede_arfs_tuple *t)
{
  #line 1611 
  if ((((unsigned int)t->src_port != 0U && (unsigned int)t->dst_port != 0U) && t->__anonCompField_qede_arfs_tuple_210.src_ipv4 != 0U) && t->__anonCompField_qede_arfs_tuple_211.dst_ipv4 != 0U) 
    #line 1612 
    t->mode = QED_FILTER_CONFIG_MODE_5_TUPLE;
  else 
    #line 1613 
    if ((((unsigned int)t->src_port == 0U && (unsigned int)t->dst_port != 0U) && t->__anonCompField_qede_arfs_tuple_210.src_ipv4 == 0U) && t->__anonCompField_qede_arfs_tuple_211.dst_ipv4 == 0U) 
      #line 1615 
      t->mode = QED_FILTER_CONFIG_MODE_L4_PORT;
    else 
      #line 1616 
      if ((((unsigned int)t->src_port == 0U && (unsigned int)t->dst_port == 0U) && t->__anonCompField_qede_arfs_tuple_211.dst_ipv4 == 0U) && t->__anonCompField_qede_arfs_tuple_210.src_ipv4 != 0U) 
        #line 1618 
        t->mode = QED_FILTER_CONFIG_MODE_IP_SRC;
      else 
        #line 1619 
        if ((((unsigned int)t->src_port == 0U && (unsigned int)t->dst_port == 0U) && t->__anonCompField_qede_arfs_tuple_211.dst_ipv4 != 0U) && t->__anonCompField_qede_arfs_tuple_210.src_ipv4 == 0U) 
          #line 1621 
          t->mode = QED_FILTER_CONFIG_MODE_IP_DEST;
        else {
          #line 1623 
          if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
            #line 1623 
            char *tmp;
            #line 1623 
            if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                          #line 1623 
                                                          tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1623 
                                                                    tmp = (char *)"";
            #line 1623 
            printk((char *)"\001",(char *)"qede_set_v4_tuple_to_profile",1623,tmp);
          }
          #line 1624 
          return -95;
        }
  #line 1627 
  t->ip_comp = & qede_flow_spec_ipv4_cmp;
  #line 1628 
  t->build_hdr = & qede_flow_build_ipv4_hdr;
  #line 1629 
  t->stringify = & qede_flow_stringify_ipv4_hdr;
  #line 1631 
  return 0;
}

#line 1634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_set_v6_tuple_to_profile(struct qede_dev *edev, struct qede_arfs_tuple *t, struct in6_addr *zaddr)
{
  #line 1641 
  if ((unsigned int)t->src_port != 0U && (unsigned int)t->dst_port != 0U) {
    #line 1641 
    if (memcmp((void *)(& t->__anonCompField_qede_arfs_tuple_210.src_ipv6),
               (void *)zaddr,16UL) != 0) {
      #line 1642 
      if (memcmp((void *)(& t->__anonCompField_qede_arfs_tuple_211.dst_ipv6),
               (void *)zaddr,16UL) != 0) 
        #line 1644 
        t->mode = QED_FILTER_CONFIG_MODE_5_TUPLE; else 
                                                       #line 1641 
                                                       goto _LAND_6;
    }
    else 
         #line 1641 
         goto _LAND_6;
  }
  else 
    #line 1641 
    _LAND_6: 
             #line 1645 
             if ((unsigned int)t->src_port == 0U && (unsigned int)t->dst_port != 0U) {
               #line 1645 
               if (memcmp((void *)(& t->__anonCompField_qede_arfs_tuple_210.src_ipv6),
               (void *)zaddr,16UL) == 0) {
                 #line 1646 
                 if (memcmp((void *)(& t->__anonCompField_qede_arfs_tuple_211.dst_ipv6),
               (void *)zaddr,16UL) == 0) 
                   #line 1648 
                   t->mode = QED_FILTER_CONFIG_MODE_L4_PORT; else 
                                                                  #line 1645 
                                                                  goto _LAND_4;
               }
               else 
                    #line 1645 
                    goto _LAND_4;
             }
             else 
               #line 1645 
               _LAND_4: 
                        #line 1649 
                        if ((unsigned int)t->src_port == 0U && (unsigned int)t->dst_port == 0U) {
                          #line 1649 
                          if (memcmp((void *)(& t->__anonCompField_qede_arfs_tuple_211.dst_ipv6),
               (void *)zaddr,16UL) == 0) {
                            #line 1650 
                            if (memcmp((void *)(& t->__anonCompField_qede_arfs_tuple_210.src_ipv6),
               (void *)zaddr,16UL) != 0) 
                              #line 1652 
                              t->mode = QED_FILTER_CONFIG_MODE_IP_SRC; else 
                                                                    #line 1649 
                                                                    goto _LAND_2;
                          }
                          else 
                               #line 1649 
                               goto _LAND_2;
                        }
                        else 
                          #line 1649 
                          _LAND_2: 
                                   #line 1653 
                                   if ((unsigned int)t->src_port == 0U && (unsigned int)t->dst_port == 0U) {
                                     #line 1653 
                                     if (memcmp((void *)(& t->__anonCompField_qede_arfs_tuple_211.dst_ipv6),
               (void *)zaddr,16UL) != 0) {
                                       #line 1654 
                                       if (memcmp((void *)(& t->__anonCompField_qede_arfs_tuple_210.src_ipv6),
               (void *)zaddr,16UL) == 0) 
                                         #line 1656 
                                         t->mode = QED_FILTER_CONFIG_MODE_IP_DEST; else 
                                                                    #line 1653 
                                                                    goto _LAND_0;
                                     }
                                     else 
                                          #line 1653 
                                          goto _LAND_0;
                                   }
                                   else {
                                     #line 1653 
                                     _LAND_0: {
                                                #line 1658 
                                                if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
                                                  #line 1658 
                                                  char *tmp;
                                                  #line 1658 
                                                  if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1658 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1658 
                                                                    tmp = (char *)"";
                                                  #line 1658 
                                                  printk((char *)"\001",(char *)"qede_set_v6_tuple_to_profile",1658,tmp);
                                                }
                                                #line 1659 
                                                return -95;
                                              }
                                   }
  #line 1662 
  t->ip_comp = & qede_flow_spec_ipv6_cmp;
  #line 1663 
  t->build_hdr = & qede_flow_build_ipv6_hdr;
  #line 1665 
  return 0;
}

#line 1670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static struct qede_arfs_fltr_node *qede_flow_find_fltr(struct qede_dev *edev, struct qede_arfs_tuple *t)
{
  #line 1678 
  struct qede_arfs_fltr_node *tmp_0;
  #line 1678 
  void *__mptr;
  #line 1672 
  struct qede_arfs_fltr_node *fltr;
  #line 1673 
  struct hlist_node *temp;
  #line 1674 
  struct hlist_head *head;
  #line 1676 
  head = & (edev->arfs)->arfs_hl_head[0];
  {
    #line 1678 
    struct hlist_node *____ptr = head->first;
    #line 1678 
    if (____ptr != (struct hlist_node *)0) {
      #line 1678 
      __mptr = (void *)____ptr;
      #line 1678 
      tmp_0 = ((struct qede_arfs_fltr_node *)(__mptr + 18446744073709551480U));
    }
    else 
         #line 1678 
         tmp_0 = (struct qede_arfs_fltr_node *)0;
    }
  #line 1678 
  fltr = tmp_0;
  #line 1678 
  while (1) {
    #line 1678 
    void *__mptr_0;
    #line 1678 
    struct qede_arfs_fltr_node *tmp_3;
    #line 1678 
    if (fltr != (struct qede_arfs_fltr_node *)0) {
      #line 1678 
      temp = fltr->node.next;
      #line 1678 
      if (! (1 != 0)) 
                      #line 1678 
                      break;
    }
    else 
         #line 1678 
         break;
    #line 1679 
    if (((int)fltr->tuple.ip_proto == (int)t->ip_proto && (int)fltr->tuple.src_port == (int)t->src_port) && (int)fltr->tuple.dst_port == (int)t->dst_port) {
      #line 1681 
      if ((int)(*(t->ip_comp))(& fltr->tuple,t) != 0) 
                                                      #line 1683 
                                                      return fltr;
    }
    {
      #line 1678 
      struct hlist_node *____ptr_0 = temp;
      #line 1678 
      if (____ptr_0 != (struct hlist_node *)0) {
        #line 1678 
        __mptr_0 = (void *)____ptr_0;
        #line 1678 
        tmp_3 = ((struct qede_arfs_fltr_node *)(__mptr_0 + 18446744073709551480U));
      }
      else 
           #line 1678 
           tmp_3 = (struct qede_arfs_fltr_node *)0;
      }
    #line 1678 
    fltr = tmp_3;
  }
  #line 1686 
  return (struct qede_arfs_fltr_node *)0;
}

#line 1689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static void qede_flow_set_destination(struct qede_dev *edev, struct qede_arfs_fltr_node *n, struct ethtool_rx_flow_spec *fs)
{
  #line 1693 
  if (fs->ring_cookie == 18446744073709551615ULL) {
    #line 1694 
    n->b_is_drop = (_Bool)1;
    #line 1695 
    return;
  }
  #line 1698 
  n->vfid = (unsigned char)ethtool_get_flow_spec_ring_vf(fs->ring_cookie);
  #line 1699 
  n->rxq_id = (unsigned short)ethtool_get_flow_spec_ring(fs->ring_cookie);
  #line 1700 
  n->next_rxq_id = n->rxq_id;
  #line 1702 
  if ((unsigned int)n->vfid != 0U) 
    #line 1703 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 1048576U) != 0U) != 0L) {
      #line 1703 
      char *tmp_1;
      #line 1703 
      ;
      #line 1703 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1703 
                                                    tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1703 
                                                                    tmp_1 = (char *)"";
      #line 1703 
      printk((char *)"\001",(char *)"qede_flow_set_destination",1703,tmp_1,(int)n->vfid + -1);
    }
  #line 1704 
  return;
}

#line 1707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_delete_flow_filter(struct qede_dev *edev, u64 cookie)
{
  #line 1709 
  struct qede_arfs_fltr_node *fltr = (struct qede_arfs_fltr_node *)0;
  #line 1710 
  int rc = -1;
  #line 1712 
  __qede_lock(edev);
  #line 1713 
  if (edev->arfs == (struct qede_arfs *)0) 
                                           #line 1714 
                                           goto unlock;
  #line 1716 
  fltr = qede_get_arfs_fltr_by_loc(& (edev->arfs)->arfs_hl_head[0],cookie);
  #line 1718 
  if (fltr == (struct qede_arfs_fltr_node *)0) 
                                               #line 1719 
                                               goto unlock;
  #line 1721 
  qede_configure_arfs_fltr(edev,fltr,(unsigned short)((int)fltr->rxq_id),(_Bool)0);
  #line 1723 
  rc = qede_poll_arfs_filter_config(edev,fltr);
  #line 1724 
  if (rc == 0) 
               #line 1725 
               qede_dequeue_fltr_and_config_searcher(edev,fltr);
  #line 1727 
  unlock: 
          #line 1727 
  ;
  #line 1728 
  __qede_unlock(edev);
  #line 1729 
  return rc;
}

#line 1732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_get_arfs_filter_count(struct qede_dev *edev)
{
  #line 1734 
  int count = 0;
  #line 1736 
  __qede_lock(edev);
  #line 1738 
  if (edev->arfs == (struct qede_arfs *)0) 
                                           #line 1739 
                                           goto unlock;
  #line 1741 
  count = (edev->arfs)->filter_count;
  #line 1743 
  unlock: 
          #line 1743 
  ;
  #line 1744 
  __qede_unlock(edev);
  #line 1745 
  return count;
}

#line 1748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_parse_actions(struct qede_dev *edev, struct flow_action *flow_action)
{
  #line 1751 
  struct flow_action_entry *act;
  #line 1752 
  int i;
  #line 1754 
  if (! flow_action_has_entries(flow_action)) {
    #line 1755 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1755 
      char *tmp;
      #line 1755 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1755 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1755 
                                                                    tmp = (char *)"";
      #line 1755 
      printk((char *)"\001",(char *)"qede_parse_actions",1755,tmp);
    }
    #line 1756 
    return -22;
  }
  #line 1759 
  i = 0;
  #line 1759 
  act = & flow_action->entries[0];
  #line 1759 
  while (flow_action->num_entries > (unsigned int)i) {
    #line 1760 
    switch ((unsigned int)act->id) {
      #line 1761 
      case (unsigned int)1: 
                            #line 1761 
      ;
      #line 1762 
      break;
      #line 1763 
      case (unsigned int)19: 
                             #line 1763 
      ;
      #line 1764 
      if ((unsigned int)act->__anonCompField_flow_action_entry_169.queue.vf != 0U) 
        #line 1765 
        break;
      #line 1767 
      if (act->__anonCompField_flow_action_entry_169.queue.index >= (unsigned int)((int)edev->num_queues - (int)edev->fp_num_tx)) {
        #line 1768 
        if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
          #line 1768 
          char *tmp_1;
          #line 1768 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 1768 
                                                        tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1768 
                                                                    tmp_1 = (char *)"";
          #line 1768 
          printk((char *)"\001",(char *)"qede_parse_actions",1768,tmp_1);
        }
        #line 1769 
        return -22;
      }
      #line 1771 
      break;
      #line 1772 
      default: 
               #line 1772 
      ;
      #line 1773 
      return -22;
    }
    #line 1759 
    i ++;
    #line 1759 
    act = & flow_action->entries[i];
  }
  #line 1777 
  return 0;
}

#line 1781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_flow_parse_ports(struct qede_dev *edev, struct flow_rule *rule, struct qede_arfs_tuple *t)
{
  #line 1784 
  if ((int)flow_rule_match_key(rule,
                            (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_PORTS) != 0) {
    #line 1785 
    struct flow_match_ports match;
    #line 1787 
    flow_rule_match_ports(rule,& match);
    #line 1788 
    if ((unsigned int)(match.key)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_504_77.src != 0U && (unsigned int)(match.mask)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_504_77.src != 65535U || (unsigned int)(match.key)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_504_77.dst != 0U && (unsigned int)(match.mask)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_504_77.dst != 65535U) {
      #line 1790 
      if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
        #line 1790 
        char *tmp;
        #line 1790 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1790 
                                                      tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1790 
                                                                    tmp = (char *)"";
        #line 1790 
        printk((char *)"\001",(char *)"qede_flow_parse_ports",1790,tmp);
      }
      #line 1791 
      return -22;
    }
    #line 1794 
    t->src_port = (match.key)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_504_77.src;
    #line 1795 
    t->dst_port = (match.key)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_504_77.dst;
  }
  #line 1798 
  return 0;
}

#line 1802  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_flow_parse_v6_common(struct qede_dev *edev, struct flow_rule *rule, struct qede_arfs_tuple *t)
{
  #line 1805 
  struct in6_addr zero_addr;
  #line 1805 
  struct in6_addr addr;
  #line 1807 
  memset((void *)(& zero_addr),0,16UL);
  #line 1808 
  memset((void *)(& addr),255,16UL);
  #line 1810 
  if ((int)flow_rule_match_key(rule,
                            (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_IPV6_ADDRS) != 0) {
    #line 1811 
    struct flow_match_ipv6_addrs match;
    #line 1813 
    flow_rule_match_ipv6_addrs(rule,& match);
    #line 1814 
    if (memcmp((void *)(& (match.key)->src),(void *)(& zero_addr),16UL) != 0) {
      #line 1814 
      if (memcmp((void *)(& (match.mask)->src),(void *)(& addr),16UL) != 0) 
        #line 1814 
        goto _LOR; else 
                        #line 1814 
                        goto _LAND;
    }
    else {
      #line 1814 
      _LAND: 
      #line 1815 
      if (memcmp((void *)(& (match.key)->dst),(void *)(& zero_addr),16UL) != 0) {
        #line 1816 
        if (memcmp((void *)(& (match.mask)->dst),(void *)(& addr),16UL) != 0) {
          #line 1814 
          _LOR: {
                  #line 1818 
                  if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
                    #line 1818 
                    char *tmp;
                    #line 1818 
                    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                                  #line 1818 
                                                                  tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1818 
                                                                    tmp = (char *)"";
                    #line 1818 
                    printk((char *)"\001",(char *)"qede_flow_parse_v6_common",1818,tmp);
                  }
                  #line 1820 
                  return -22;
                }
        }
      }
    }
    #line 1823 
    memcpy((void *)(& t->__anonCompField_qede_arfs_tuple_210.src_ipv6),(void *)(& (match.key)->src),16UL);
    #line 1824 
    memcpy((void *)(& t->__anonCompField_qede_arfs_tuple_211.dst_ipv6),(void *)(& (match.key)->dst),16UL);
  }
  #line 1827 
  if (qede_flow_parse_ports(edev,rule,t) != 0) 
                                               #line 1828 
                                               return -22;
  #line 1830 
  return qede_set_v6_tuple_to_profile(edev,t,& zero_addr);
}

#line 1834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_flow_parse_v4_common(struct qede_dev *edev, struct flow_rule *rule, struct qede_arfs_tuple *t)
{
  #line 1837 
  if ((int)flow_rule_match_key(rule,
                            (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_IPV4_ADDRS) != 0) {
    #line 1838 
    struct flow_match_ipv4_addrs match;
    #line 1840 
    flow_rule_match_ipv4_addrs(rule,& match);
    #line 1841 
    if ((match.key)->src != 0U && (match.mask)->src != 4294967295U || (match.key)->dst != 0U && (match.mask)->dst != 4294967295U) {
      #line 1843 
      if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
        #line 1843 
        char *tmp;
        #line 1843 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1843 
                                                      tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1843 
                                                                    tmp = (char *)"";
        #line 1843 
        printk((char *)"\001",(char *)"qede_flow_parse_v4_common",1843,tmp);
      }
      #line 1844 
      return -22;
    }
    #line 1847 
    t->__anonCompField_qede_arfs_tuple_210.src_ipv4 = (match.key)->src;
    #line 1848 
    t->__anonCompField_qede_arfs_tuple_211.dst_ipv4 = (match.key)->dst;
  }
  #line 1851 
  if (qede_flow_parse_ports(edev,rule,t) != 0) 
                                               #line 1852 
                                               return -22;
  #line 1854 
  return qede_set_v4_tuple_to_profile(edev,t);
}

#line 1858  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_flow_parse_tcp_v6(struct qede_dev *edev, struct flow_rule *rule, struct qede_arfs_tuple *tuple)
{
  #line 1861 
  tuple->ip_proto = (unsigned char)6U;
  #line 1862 
  tuple->eth_proto = (unsigned short)56710U;
  #line 1864 
  return qede_flow_parse_v6_common(edev,rule,tuple);
}

#line 1868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_flow_parse_tcp_v4(struct qede_dev *edev, struct flow_rule *rule, struct qede_arfs_tuple *tuple)
{
  #line 1871 
  tuple->ip_proto = (unsigned char)6U;
  #line 1872 
  tuple->eth_proto = (unsigned short)8U;
  #line 1874 
  return qede_flow_parse_v4_common(edev,rule,tuple);
}

#line 1878  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_flow_parse_udp_v6(struct qede_dev *edev, struct flow_rule *rule, struct qede_arfs_tuple *tuple)
{
  #line 1881 
  tuple->ip_proto = (unsigned char)17U;
  #line 1882 
  tuple->eth_proto = (unsigned short)56710U;
  #line 1884 
  return qede_flow_parse_v6_common(edev,rule,tuple);
}

#line 1888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_flow_parse_udp_v4(struct qede_dev *edev, struct flow_rule *rule, struct qede_arfs_tuple *tuple)
{
  #line 1891 
  tuple->ip_proto = (unsigned char)17U;
  #line 1892 
  tuple->eth_proto = (unsigned short)8U;
  #line 1894 
  return qede_flow_parse_v4_common(edev,rule,tuple);
}

#line 1898  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_parse_flow_attr(struct qede_dev *edev, __be16 proto, struct flow_rule *rule, struct qede_arfs_tuple *tuple)
{
  #line 1901 
  struct flow_dissector *dissector = rule->match.dissector;
  #line 1902 
  int rc = -22;
  #line 1903 
  u8 ip_proto = (unsigned char)0U;
  #line 1905 
  memset((void *)tuple,0,72UL);
  #line 1907 
  if (((unsigned long)dissector->used_keys & 18446744073709551584UL) != 0UL) {
    #line 1913 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1913 
      char *tmp;
      #line 1913 
      ;
      #line 1913 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1913 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1913 
                                                                    tmp = (char *)"";
      #line 1913 
      printk((char *)"\001",(char *)"qede_parse_flow_attr",1913,tmp,dissector->used_keys);
    }
    #line 1915 
    return -95;
  }
  #line 1918 
  if ((unsigned int)proto != 8U && (unsigned int)proto != 56710U) {
    #line 1920 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1920 
      char *tmp_0;
      #line 1920 
      ;
      #line 1920 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1920 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1920 
                                                                    tmp_0 = (char *)"";
      #line 1920 
      printk((char *)"\001",(char *)"qede_parse_flow_attr",1920,tmp_0,(int)proto);
    }
    #line 1921 
    return -93;
  }
  #line 1924 
  if ((int)flow_rule_match_key(rule,
                            (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_BASIC) != 0) {
    #line 1925 
    struct flow_match_basic match;
    #line 1927 
    flow_rule_match_basic(rule,& match);
    #line 1928 
    ip_proto = (match.key)->ip_proto;
  }
  #line 1931 
  if ((unsigned int)ip_proto == 6U && (unsigned int)proto == 8U) 
                                                                 #line 1932 
                                                                 rc = qede_flow_parse_tcp_v4(edev,rule,tuple);
  else 
    #line 1933 
    if ((unsigned int)ip_proto == 6U && (unsigned int)proto == 56710U) 
      #line 1934 
      rc = qede_flow_parse_tcp_v6(edev,rule,tuple);
    else 
      #line 1935 
      if ((unsigned int)ip_proto == 17U && (unsigned int)proto == 8U) 
        #line 1936 
        rc = qede_flow_parse_udp_v4(edev,rule,tuple);
      else 
        #line 1937 
        if ((unsigned int)ip_proto == 17U && (unsigned int)proto == 56710U) 
          #line 1938 
          rc = qede_flow_parse_udp_v6(edev,rule,tuple);
        else 
          #line 1940 
          if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
            #line 1940 
            char *tmp_2;
            #line 1940 
            if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                          #line 1940 
                                                          tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1940 
                                                                    tmp_2 = (char *)"";
            #line 1940 
            printk((char *)"\001",(char *)"qede_parse_flow_attr",1940,tmp_2);
          }
  #line 1942 
  return rc;
}

#line 1945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_add_tc_flower_fltr(struct qede_dev *edev, __be16 proto, struct flow_cls_offload *f)
{
  #line 1948 
  struct qede_arfs_fltr_node *n;
  #line 1949 
  int min_hlen;
  #line 1950 
  struct qede_arfs_tuple t;
  #line 1949 
  int rc = -22;
  #line 1952 
  __qede_lock(edev);
  #line 1954 
  if (edev->arfs == (struct qede_arfs *)0) {
    #line 1955 
    rc = -1;
    #line 1956 
    goto unlock;
  }
  #line 1960 
  if (qede_parse_flow_attr(edev,(unsigned short)((int)proto),f->rule,& t) != 0) 
    #line 1961 
    goto unlock;
  #line 1964 
  if ((edev->arfs)->filter_count != 0 && (edev->arfs)->mode != t.mode || (edev->arfs)->filter_count == 256) {
    #line 1966 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1966 
      char *tmp_0;
      #line 1966 
      ;
      #line 1966 
      ;
      #line 1966 
      ;
      #line 1966 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1966 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1966 
                                                                    tmp_0 = (char *)"";
      #line 1966 
      printk((char *)"\001",(char *)"qede_add_tc_flower_fltr",1966,tmp_0,(unsigned int)t.mode,(unsigned int)(edev->arfs)->mode,(edev->arfs)->filter_count);
    }
    #line 1969 
    goto unlock;
  }
  #line 1973 
  if (qede_parse_actions(edev,& (f->rule)->action) != 0) 
                                                         #line 1974 
                                                         goto unlock;
  #line 1976 
  if (qede_flow_find_fltr(edev,& t) != (struct qede_arfs_fltr_node *)0) {
    #line 1977 
    rc = -17;
    #line 1978 
    goto unlock;
  }
  #line 1981 
  n = (struct qede_arfs_fltr_node *)kzalloc(152UL,3264U);
  #line 1982 
  if (n == (struct qede_arfs_fltr_node *)0) {
    #line 1983 
    rc = -12;
    #line 1984 
    goto unlock;
  }
  #line 1987 
  min_hlen = qede_flow_get_min_header_size(& t);
  #line 1989 
  n->data = kzalloc((unsigned long)min_hlen,3264U);
  #line 1990 
  if (n->data == (void *)0) {
    #line 1991 
    kfree((void *)n);
    #line 1992 
    rc = -12;
    #line 1993 
    goto unlock;
  }
  #line 1996 
  memcpy((void *)(& n->tuple),(void *)(& t),72UL);
  #line 1998 
  n->buf_len = min_hlen;
  #line 1999 
  n->b_is_drop = (_Bool)1;
  #line 2000 
  n->sw_id = (unsigned long long)f->cookie;
  #line 2002 
  (*(n->tuple.build_hdr))(& n->tuple,n->data);
  #line 2004 
  rc = qede_enqueue_fltr_and_config_searcher(edev,n,(unsigned short)0);
  #line 2005 
  if (rc != 0) 
               #line 2006 
               goto unlock;
  #line 2008 
  qede_configure_arfs_fltr(edev,n,(unsigned short)((int)n->rxq_id),(_Bool)1);
  #line 2009 
  rc = qede_poll_arfs_filter_config(edev,n);
  #line 2011 
  unlock: 
          #line 2011 
  ;
  #line 2012 
  __qede_unlock(edev);
  #line 2013 
  return rc;
}

#line 2016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_flow_spec_validate(struct qede_dev *edev, struct flow_action *flow_action, struct qede_arfs_tuple *t, __u32 location)
{
  #line 2021 
  if (location > 255U) {
    #line 2022 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 2022 
      char *tmp;
      #line 2022 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 2022 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2022 
                                                                    tmp = (char *)"";
      #line 2022 
      printk((char *)"\001",(char *)"qede_flow_spec_validate",2022,tmp);
    }
    #line 2023 
    return -22;
  }
  #line 2027 
  if ((int)test_bit((long)location,(edev->arfs)->arfs_fltr_bmap) != 0) {
    #line 2028 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 2028 
      char *tmp_0;
      #line 2028 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 2028 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2028 
                                                                    tmp_0 = (char *)"";
      #line 2028 
      printk((char *)"\001",(char *)"qede_flow_spec_validate",2028,tmp_0);
    }
    #line 2029 
    return -22;
  }
  #line 2033 
  if ((edev->arfs)->filter_count != 0 && (edev->arfs)->mode != t->mode) {
    #line 2035 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 2035 
      char *tmp_2;
      #line 2035 
      ;
      #line 2035 
      ;
      #line 2035 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 2035 
                                                    tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2035 
                                                                    tmp_2 = (char *)"";
      #line 2035 
      printk((char *)"\001",(char *)"qede_flow_spec_validate",2035,tmp_2,(unsigned int)t->mode,(edev->arfs)->filter_count);
    }
    #line 2038 
    return -22;
  }
  #line 2041 
  if (qede_parse_actions(edev,flow_action) != 0) 
                                                 #line 2042 
                                                 return -22;
  #line 2044 
  return 0;
}

#line 2047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
static int qede_flow_spec_to_rule(struct qede_dev *edev, struct qede_arfs_tuple *t, struct ethtool_rx_flow_spec *fs)
{
  #line 2052 
  struct ethtool_rx_flow_rule *flow;
  #line 2053 
  __be16 proto;
  #line 2051 
  struct ethtool_rx_flow_spec_input input = {.fs = (struct ethtool_rx_flow_spec *)0, .rss_ctx = 0U};
  #line 2054 
  int err = 0;
  #line 2056 
  if (qede_flow_spec_validate_unused(edev,fs) != 0) 
                                                    #line 2057 
                                                    return -95;
  #line 2059 
  switch (fs->flow_type & 2147483647U) {
    #line 2060 
    case (unsigned int)1: 
                          #line 2060 
    ;
    #line 2061 
    case (unsigned int)2: 
                          #line 2061 
    ;
    #line 2062 
    proto = (unsigned short)8U;
    #line 2063 
    break;
    #line 2064 
    case (unsigned int)5: 
                          #line 2064 
    ;
    #line 2065 
    case (unsigned int)6: 
                          #line 2065 
    ;
    #line 2066 
    proto = (unsigned short)56710U;
    #line 2067 
    break;
    #line 2068 
    default: 
             #line 2068 
    ;
    #line 2069 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 32U) != 0U) != 0L) {
      #line 2069 
      char *tmp_0;
      #line 2069 
      ;
      #line 2069 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 2069 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2069 
                                                                    tmp_0 = (char *)"";
      #line 2069 
      printk((char *)"\001",(char *)"qede_flow_spec_to_rule",2069,tmp_0,fs->flow_type);
    }
    #line 2071 
    return -95;
  }
  #line 2074 
  input.fs = fs;
  #line 2075 
  flow = ethtool_rx_flow_rule_create(& input);
  #line 2076 
  if ((int)IS_ERR((void *)flow) != 0) {
    #line 2077 
    return (int)PTR_ERR((void *)flow);
  }
  #line 2079 
  if (qede_parse_flow_attr(edev,(unsigned short)((int)proto),flow->rule,t) != 0) {
    #line 2080 
    err = -22;
    #line 2081 
    goto err_out;
  }
  #line 2085 
  err = qede_flow_spec_validate(edev,& (flow->rule)->action,t,fs->location);
  #line 2087 
  err_out: 
           #line 2087 
  ;
  #line 2088 
  ethtool_rx_flow_rule_destroy(flow);
  #line 2089 
  return err;
}

#line 2093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_filter.c"
int qede_add_cls_rule(struct qede_dev *edev, struct ethtool_rxnfc *info)
{
  #line 2096 
  struct qede_arfs_fltr_node *n;
  #line 2097 
  struct qede_arfs_tuple t;
  #line 2098 
  int min_hlen;
  #line 2098 
  int rc;
  #line 2095 
  struct ethtool_rx_flow_spec *fsp = & info->fs;
  #line 2100 
  __qede_lock(edev);
  #line 2102 
  if (edev->arfs == (struct qede_arfs *)0) {
    #line 2103 
    rc = -1;
    #line 2104 
    goto unlock;
  }
  #line 2108 
  rc = qede_flow_spec_to_rule(edev,& t,fsp);
  #line 2109 
  if (rc != 0) 
               #line 2110 
               goto unlock;
  #line 2112 
  if (qede_flow_find_fltr(edev,& t) != (struct qede_arfs_fltr_node *)0) {
    #line 2113 
    rc = -22;
    #line 2114 
    goto unlock;
  }
  #line 2117 
  n = (struct qede_arfs_fltr_node *)kzalloc(152UL,3264U);
  #line 2118 
  if (n == (struct qede_arfs_fltr_node *)0) {
    #line 2119 
    rc = -12;
    #line 2120 
    goto unlock;
  }
  #line 2123 
  min_hlen = qede_flow_get_min_header_size(& t);
  #line 2124 
  n->data = kzalloc((unsigned long)min_hlen,3264U);
  #line 2125 
  if (n->data == (void *)0) {
    #line 2126 
    kfree((void *)n);
    #line 2127 
    rc = -12;
    #line 2128 
    goto unlock;
  }
  #line 2131 
  n->sw_id = (unsigned long long)fsp->location;
  #line 2132 
  cif_set_bit((long)n->sw_id,(edev->arfs)->arfs_fltr_bmap);
  #line 2133 
  n->buf_len = min_hlen;
  #line 2135 
  memcpy((void *)(& n->tuple),(void *)(& t),72UL);
  #line 2137 
  qede_flow_set_destination(edev,n,fsp);
  #line 2140 
  (*(n->tuple.build_hdr))(& n->tuple,n->data);
  #line 2142 
  rc = qede_enqueue_fltr_and_config_searcher(edev,n,(unsigned short)0);
  #line 2143 
  if (rc != 0) 
               #line 2144 
               goto unlock;
  #line 2146 
  qede_configure_arfs_fltr(edev,n,(unsigned short)((int)n->rxq_id),(_Bool)1);
  #line 2147 
  rc = qede_poll_arfs_filter_config(edev,n);
  #line 2148 
  unlock: 
          #line 2148 
  ;
  #line 2149 
  __qede_unlock(edev);
  #line 2151 
  return rc;
}

#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
#line 101 
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1);
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 123 
  ldv_set_bit(nr,addr);
  #line 124 
  return;
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 130 
  ldv_clear_bit(nr,addr);
  #line 131 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 137 
  ldv_init_list_head(list);
  #line 138 
  return;
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 214 
  return ldv_ptr_err(ptr);
}

#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 221 
  return ldv_is_err(ptr);
}

#line 365  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 368 
  return ldv_kzalloc(size,flags);
}

#line 631  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 634 
  ldv_spin_model_lock((char *)"addr_list_lock_of_net_device");
  #line 636 
  spin_lock_bh(lock);
  #line 637 
  return;
}

#line 649  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 652 
  ldv_spin_model_unlock((char *)"addr_list_lock_of_net_device");
  #line 654 
  spin_unlock_bh(lock);
  #line 655 
  return;
}

#line 832  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void cif_spin_lock_bh_arfs_list_lock_of_qede_arfs(spinlock_t *lock)
{
  #line 835 
  ldv_spin_model_lock((char *)"arfs_list_lock_of_qede_arfs");
  #line 837 
  spin_lock_bh(lock);
  #line 838 
  return;
}

#line 841  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void cif_spin_unlock_bh_arfs_list_lock_of_qede_arfs(spinlock_t *lock)
{
  #line 844 
  ldv_spin_model_unlock((char *)"arfs_list_lock_of_qede_arfs");
  #line 846 
  spin_unlock_bh(lock);
  #line 847 
  return;
}

#line 850  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay)
{
  #line 854 
  return emg_schedule_delayed_work(dwork,delay);
}

#line 858  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void *cif_vzalloc(unsigned long size)
{
  #line 861 
  return ldv_vzalloc(size);
}

#line 865  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_filter.i.aux"
static void cif_vfree(void *addr)
{
  #line 868 
  ldv_vfree(addr);
  #line 869 
  return;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
#line 22 
int dcb_ieee_setapp(struct net_device *, struct dcb_app *);
#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
void qede_set_dcbnl_ops(struct net_device *dev);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static u8 qede_dcbnl_getstate(struct net_device *netdev)
{
  #line 14 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 16 
  return (*(((edev->ops)->dcb)->getstate))(edev->cdev);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static u8 qede_dcbnl_setstate(struct net_device *netdev, u8 state)
{
  #line 21 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 23 
  return (*(((edev->ops)->dcb)->setstate))(edev->cdev,
                                          (unsigned char)((int)state));
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static void qede_dcbnl_getpermhwaddr(struct net_device *netdev, u8 *perm_addr)
{
  #line 29 
  memcpy((void *)perm_addr,(void *)netdev->dev_addr,(unsigned long)netdev->addr_len);
  #line 30 
  return;
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static void qede_dcbnl_getpgtccfgtx(struct net_device *netdev, int prio, u8 *prio_type, u8 *pgid, u8 *bw_pct, u8 *up_map)
{
  #line 36 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 38 
  (*(((edev->ops)->dcb)->getpgtccfgtx))(edev->cdev,prio,prio_type,pgid,bw_pct,up_map);
  #line 39 
  return;
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static void qede_dcbnl_getpgbwgcfgtx(struct net_device *netdev, int pgid, u8 *bw_pct)
{
  #line 45 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 47 
  (*(((edev->ops)->dcb)->getpgbwgcfgtx))(edev->cdev,pgid,bw_pct);
  #line 48 
  return;
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static void qede_dcbnl_getpgtccfgrx(struct net_device *netdev, int prio, u8 *prio_type, u8 *pgid, u8 *bw_pct, u8 *up_map)
{
  #line 54 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 56 
  (*(((edev->ops)->dcb)->getpgtccfgrx))(edev->cdev,prio,prio_type,pgid,bw_pct,up_map);
  #line 57 
  return;
}

#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static void qede_dcbnl_getpgbwgcfgrx(struct net_device *netdev, int pgid, u8 *bw_pct)
{
  #line 63 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 65 
  (*(((edev->ops)->dcb)->getpgbwgcfgrx))(edev->cdev,pgid,bw_pct);
  #line 66 
  return;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static void qede_dcbnl_getpfccfg(struct net_device *netdev, int prio, u8 *setting)
{
  #line 71 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 73 
  (*(((edev->ops)->dcb)->getpfccfg))(edev->cdev,prio,setting);
  #line 74 
  return;
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static void qede_dcbnl_setpfccfg(struct net_device *netdev, int prio, u8 setting)
{
  #line 79 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 81 
  (*(((edev->ops)->dcb)->setpfccfg))(edev->cdev,prio,(unsigned char)((int)setting));
  #line 82 
  return;
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static u8 qede_dcbnl_getcap(struct net_device *netdev, int capid, u8 *cap)
{
  #line 86 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 88 
  return (*(((edev->ops)->dcb)->getcap))(edev->cdev,capid,cap);
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_getnumtcs(struct net_device *netdev, int tcid, u8 *num)
{
  #line 93 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 95 
  return (*(((edev->ops)->dcb)->getnumtcs))(edev->cdev,tcid,num);
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static u8 qede_dcbnl_getpfcstate(struct net_device *netdev)
{
  #line 100 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 102 
  return (*(((edev->ops)->dcb)->getpfcstate))(edev->cdev);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_getapp(struct net_device *netdev, u8 idtype, u16 id)
{
  #line 107 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 109 
  return (*(((edev->ops)->dcb)->getapp))(edev->cdev,
                                        (unsigned char)((int)idtype),
                                        (unsigned short)((int)id));
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static u8 qede_dcbnl_getdcbx(struct net_device *netdev)
{
  #line 114 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 116 
  return (*(((edev->ops)->dcb)->getdcbx))(edev->cdev);
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static void qede_dcbnl_setpgtccfgtx(struct net_device *netdev, int prio, u8 pri_type, u8 pgid, u8 bw_pct, u8 up_map)
{
  #line 122 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 124 
  (*(((edev->ops)->dcb)->setpgtccfgtx))(edev->cdev,prio,(unsigned char)((int)pri_type),(unsigned char)((int)pgid),(unsigned char)((int)bw_pct),(unsigned char)((int)up_map));
  #line 125 
  return;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static void qede_dcbnl_setpgtccfgrx(struct net_device *netdev, int prio, u8 pri_type, u8 pgid, u8 bw_pct, u8 up_map)
{
  #line 131 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 133 
  (*(((edev->ops)->dcb)->setpgtccfgrx))(edev->cdev,prio,(unsigned char)((int)pri_type),(unsigned char)((int)pgid),(unsigned char)((int)bw_pct),(unsigned char)((int)up_map));
  #line 134 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static void qede_dcbnl_setpgbwgcfgtx(struct net_device *netdev, int pgid, u8 bw_pct)
{
  #line 140 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 142 
  (*(((edev->ops)->dcb)->setpgbwgcfgtx))(edev->cdev,pgid,(unsigned char)((int)bw_pct));
  #line 143 
  return;
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static void qede_dcbnl_setpgbwgcfgrx(struct net_device *netdev, int pgid, u8 bw_pct)
{
  #line 148 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 150 
  (*(((edev->ops)->dcb)->setpgbwgcfgrx))(edev->cdev,pgid,(unsigned char)((int)bw_pct));
  #line 151 
  return;
}

#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static u8 qede_dcbnl_setall(struct net_device *netdev)
{
  #line 155 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 157 
  return (*(((edev->ops)->dcb)->setall))(edev->cdev);
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_setnumtcs(struct net_device *netdev, int tcid, u8 num)
{
  #line 162 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 164 
  return (*(((edev->ops)->dcb)->setnumtcs))(edev->cdev,tcid,
                                           (unsigned char)((int)num));
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static void qede_dcbnl_setpfcstate(struct net_device *netdev, u8 state)
{
  #line 169 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 171 
  (*(((edev->ops)->dcb)->setpfcstate))(edev->cdev,(unsigned char)((int)state));
  #line 172 
  return;
}

#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_setapp(struct net_device *netdev, u8 idtype, u16 idval, u8 up)
{
  #line 177 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 179 
  return (*(((edev->ops)->dcb)->setapp))(edev->cdev,
                                        (unsigned char)((int)idtype),
                                        (unsigned short)((int)idval),
                                        (unsigned char)((int)up));
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static u8 qede_dcbnl_setdcbx(struct net_device *netdev, u8 state)
{
  #line 184 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 186 
  return (*(((edev->ops)->dcb)->setdcbx))(edev->cdev,
                                         (unsigned char)((int)state));
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static u8 qede_dcbnl_getfeatcfg(struct net_device *netdev, int featid, u8 *flags)
{
  #line 192 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 194 
  return (*(((edev->ops)->dcb)->getfeatcfg))(edev->cdev,featid,flags);
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static u8 qede_dcbnl_setfeatcfg(struct net_device *netdev, int featid, u8 flags)
{
  #line 199 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 201 
  return (*(((edev->ops)->dcb)->setfeatcfg))(edev->cdev,featid,
                                            (unsigned char)((int)flags));
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_peer_getappinfo(struct net_device *netdev, struct dcb_peer_app_info *info, u16 *count)
{
  #line 208 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 210 
  return (*(((edev->ops)->dcb)->peer_getappinfo))(edev->cdev,info,count);
}

#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_peer_getapptable(struct net_device *netdev, struct dcb_app *app)
{
  #line 216 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 218 
  return (*(((edev->ops)->dcb)->peer_getapptable))(edev->cdev,app);
}

#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_cee_peer_getpfc(struct net_device *netdev, struct cee_pfc *pfc)
{
  #line 224 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 226 
  return (*(((edev->ops)->dcb)->cee_peer_getpfc))(edev->cdev,pfc);
}

#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_cee_peer_getpg(struct net_device *netdev, struct cee_pg *pg)
{
  #line 232 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 234 
  return (*(((edev->ops)->dcb)->cee_peer_getpg))(edev->cdev,pg);
}

#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_ieee_getpfc(struct net_device *netdev, struct ieee_pfc *pfc)
{
  #line 240 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 242 
  return (*(((edev->ops)->dcb)->ieee_getpfc))(edev->cdev,pfc);
}

#line 245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_ieee_setpfc(struct net_device *netdev, struct ieee_pfc *pfc)
{
  #line 248 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 250 
  return (*(((edev->ops)->dcb)->ieee_setpfc))(edev->cdev,pfc);
}

#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_ieee_getets(struct net_device *netdev, struct ieee_ets *ets)
{
  #line 256 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 258 
  return (*(((edev->ops)->dcb)->ieee_getets))(edev->cdev,ets);
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_ieee_setets(struct net_device *netdev, struct ieee_ets *ets)
{
  #line 264 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 266 
  return (*(((edev->ops)->dcb)->ieee_setets))(edev->cdev,ets);
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_ieee_getapp(struct net_device *netdev, struct dcb_app *app)
{
  #line 272 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 274 
  return (*(((edev->ops)->dcb)->ieee_getapp))(edev->cdev,app);
}

#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_ieee_setapp(struct net_device *netdev, struct dcb_app *app)
{
  #line 281 
  int err;
  #line 280 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 283 
  err = dcb_ieee_setapp(netdev,app);
  #line 284 
  if (err != 0) 
                #line 285 
                return err;
  #line 287 
  return (*(((edev->ops)->dcb)->ieee_setapp))(edev->cdev,app);
}

#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_ieee_peer_getpfc(struct net_device *netdev, struct ieee_pfc *pfc)
{
  #line 293 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 295 
  return (*(((edev->ops)->dcb)->ieee_peer_getpfc))(edev->cdev,pfc);
}

#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static int qede_dcbnl_ieee_peer_getets(struct net_device *netdev, struct ieee_ets *ets)
{
  #line 301 
  struct qede_dev *edev = netdev_priv(netdev);
  #line 303 
  return (*(((edev->ops)->dcb)->ieee_peer_getets))(edev->cdev,ets);
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
static struct dcbnl_rtnl_ops qede_dcbnl_ops = {.ieee_getets = & qede_dcbnl_ieee_getets, .ieee_setets = & qede_dcbnl_ieee_setets, .ieee_getpfc = & qede_dcbnl_ieee_getpfc, .ieee_setpfc = & qede_dcbnl_ieee_setpfc, .ieee_getapp = & qede_dcbnl_ieee_getapp, .ieee_setapp = & qede_dcbnl_ieee_setapp, .ieee_peer_getets = & qede_dcbnl_ieee_peer_getets, .ieee_peer_getpfc = & qede_dcbnl_ieee_peer_getpfc, .getstate = & qede_dcbnl_getstate, .setstate = & qede_dcbnl_setstate, .getpermhwaddr = & qede_dcbnl_getpermhwaddr, .setpgtccfgtx = & qede_dcbnl_setpgtccfgtx, .setpgbwgcfgtx = & qede_dcbnl_setpgbwgcfgtx, .setpgtccfgrx = & qede_dcbnl_setpgtccfgrx, .setpgbwgcfgrx = & qede_dcbnl_setpgbwgcfgrx, .getpgtccfgtx = & qede_dcbnl_getpgtccfgtx, .getpgbwgcfgtx = & qede_dcbnl_getpgbwgcfgtx, .getpgtccfgrx = & qede_dcbnl_getpgtccfgrx, .getpgbwgcfgrx = & qede_dcbnl_getpgbwgcfgrx, .setpfccfg = & qede_dcbnl_setpfccfg, .getpfccfg = & qede_dcbnl_getpfccfg, .setall = & qede_dcbnl_setall, .getcap = & qede_dcbnl_getcap, .getnumtcs = & qede_dcbnl_getnumtcs, .setnumtcs = & qede_dcbnl_setnumtcs, .getpfcstate = & qede_dcbnl_getpfcstate, .setpfcstate = & qede_dcbnl_setpfcstate, .setapp = & qede_dcbnl_setapp, .getapp = & qede_dcbnl_getapp, .getfeatcfg = & qede_dcbnl_getfeatcfg, .setfeatcfg = & qede_dcbnl_setfeatcfg, .getdcbx = & qede_dcbnl_getdcbx, .setdcbx = & qede_dcbnl_setdcbx, .peer_getappinfo = & qede_dcbnl_peer_getappinfo, .peer_getapptable = & qede_dcbnl_peer_getapptable, .cee_peer_getpg = & qede_dcbnl_cee_peer_getpg, .cee_peer_getpfc = & qede_dcbnl_cee_peer_getpfc};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_dcbnl.c"
void qede_set_dcbnl_ops(struct net_device *dev)
{
  #line 348 
  dev->dcbnl_ops = & qede_dcbnl_ops;
  #line 349 
  return;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_rdma.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_1882 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_0(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_1884 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_0(struct list_head *head)
{
  #line 269 
  union __anonunion___u_1886 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_rdma.i.aux"
#line 752 
static void cif_mutex_lock_qedr_dev_list_lock(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 759  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_rdma.i.aux"
static void cif_mutex_unlock_qedr_dev_list_lock(struct mutex *lock);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 407 
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 454 
#line 454 
void flush_workqueue(struct workqueue_struct *);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 496 
#line 304  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_rdma.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 485  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_rdma.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_oper_up(struct net_device *dev)
{
  #line 3866 
  return (_Bool)(((unsigned int)dev->operstate == 6U || (unsigned int)dev->operstate == 0U) != 0);
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qede_rdma.h"
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
int qede_rdma_register_driver(struct qedr_driver *drv);
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qede_rdma.h"
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
void qede_rdma_unregister_driver(struct qedr_driver *drv);
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qede_rdma.h"
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
bool qede_rdma_supported(struct qede_dev *dev);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qede_rdma.h"
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
int qede_rdma_dev_add(struct qede_dev *edev, bool recovery);
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qede_rdma.h"
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
void qede_rdma_dev_event_open(struct qede_dev *edev);
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qede_rdma.h"
#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
void qede_rdma_dev_event_close(struct qede_dev *edev);
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qede_rdma.h"
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
void qede_rdma_dev_remove(struct qede_dev *edev, bool recovery);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qede_rdma.h"
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
void qede_rdma_event_changeaddr(struct qede_dev *edev);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static struct qedr_driver *qedr_drv;
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static struct list_head qedr_dev_list = {.next = & qedr_dev_list, .prev = & qedr_dev_list};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static struct mutex qedr_dev_list_lock = {.wait_lock = {.__anonCompField_spinlock_25 = {.rlock = {.magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.name = (char *)"qedr_dev_list_lock.wait_lock"}}}}, .wait_list = {.next = & qedr_dev_list_lock.wait_list, .prev = & qedr_dev_list_lock.wait_list}, .magic = (void *)(& qedr_dev_list_lock), .dep_map = {.name = (char *)"qedr_dev_list_lock"}};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
bool qede_rdma_supported(struct qede_dev *dev)
{
  #line 45 
  return dev->dev_info.common.rdma_supported;
}

#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static void _qede_rdma_dev_add(struct qede_dev *edev)
{
  #line 50 
  if (qedr_drv == (struct qedr_driver *)0) 
                                           #line 51 
                                           return;
  #line 54 
  edev->rdma_info.exp_recovery = (_Bool)0;
  #line 55 
  edev->rdma_info.qedr_dev = (*(qedr_drv->add))(edev->cdev,edev->pdev,edev->ndev);
  #line 57 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static int qede_rdma_create_wq(struct qede_dev *edev)
{
  #line 61 
  INIT_LIST_HEAD_0(& edev->rdma_info.rdma_event_list);
  #line 62 
  edev->rdma_info.rdma_wq = alloc_workqueue((char *)"%s",917514U,1,(char *)"rdma_wq");
  #line 63 
  if (edev->rdma_info.rdma_wq == (struct workqueue_struct *)0) {
    #line 64 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 64 
      char *tmp;
      #line 64 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 64 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 64 
                                                                    tmp = (char *)"";
      #line 64 
      printk((char *)"\001",(char *)"qede_rdma_create_wq",64,tmp);
    }
    #line 65 
    return -12;
  }
  #line 68 
  return 0;
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static void qede_rdma_cleanup_event(struct qede_dev *edev)
{
  #line 74 
  struct qede_rdma_event_work *event_node;
  #line 73 
  struct list_head *head = & edev->rdma_info.rdma_event_list;
  #line 76 
  flush_workqueue(edev->rdma_info.rdma_wq);
  #line 77 
  while (1) {
    #line 77 
    if (! (list_empty_0(head) == 0)) 
                                     #line 77 
                                     break;
    {
      #line 78 
      void *__mptr;
      #line 78 
      __mptr = (void *)head->next;
      #line 78 
      event_node = ((struct qede_rdma_event_work *)__mptr);
      #line 80 
      cancel_work_sync(& event_node->work);
      #line 81 
      list_del_0(& event_node->list);
      #line 82 
      kfree((void *)event_node);
    }
  }
  #line 84 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static void qede_rdma_destroy_wq(struct qede_dev *edev)
{
  #line 88 
  qede_rdma_cleanup_event(edev);
  #line 89 
  destroy_workqueue(edev->rdma_info.rdma_wq);
  #line 90 
  return;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
int qede_rdma_dev_add(struct qede_dev *edev, bool recovery)
{
  #line 94 
  int rc;
  #line 96 
  if (! qede_rdma_supported(edev)) 
                                   #line 97 
                                   return 0;
  #line 100 
  if ((int)recovery != 0) 
                          #line 101 
                          return 0;
  #line 103 
  rc = qede_rdma_create_wq(edev);
  #line 104 
  if (rc != 0) 
               #line 105 
               return rc;
  #line 107 
  INIT_LIST_HEAD_0(& edev->rdma_info.entry);
  #line 108 
  cif_mutex_lock_qedr_dev_list_lock(& qedr_dev_list_lock);
  #line 109 
  list_add_tail(& edev->rdma_info.entry,& qedr_dev_list);
  #line 110 
  _qede_rdma_dev_add(edev);
  #line 111 
  cif_mutex_unlock_qedr_dev_list_lock(& qedr_dev_list_lock);
  #line 113 
  return rc;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static void _qede_rdma_dev_remove(struct qede_dev *edev)
{
  #line 118 
  if ((qedr_drv != (struct qedr_driver *)0 && qedr_drv->remove != (void (*)(struct qedr_dev *))0) && edev->rdma_info.qedr_dev != (struct qedr_dev *)0) 
    #line 119 
    (*(qedr_drv->remove))(edev->rdma_info.qedr_dev);
  #line 120 
  return;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
void qede_rdma_dev_remove(struct qede_dev *edev, bool recovery)
{
  #line 124 
  if (! qede_rdma_supported(edev)) 
                                   #line 125 
                                   return;
  #line 128 
  if (! recovery) {
    #line 129 
    qede_rdma_destroy_wq(edev);
    #line 130 
    cif_mutex_lock_qedr_dev_list_lock(& qedr_dev_list_lock);
    #line 131 
    if (! edev->rdma_info.exp_recovery) 
                                        #line 132 
                                        _qede_rdma_dev_remove(edev);
    #line 133 
    edev->rdma_info.qedr_dev = (struct qedr_dev *)0;
    #line 134 
    list_del_0(& edev->rdma_info.entry);
    #line 135 
    cif_mutex_unlock_qedr_dev_list_lock(& qedr_dev_list_lock);
  }
  else {
    #line 137 
    if (! edev->rdma_info.exp_recovery) {
      #line 138 
      cif_mutex_lock_qedr_dev_list_lock(& qedr_dev_list_lock);
      #line 139 
      _qede_rdma_dev_remove(edev);
      #line 140 
      cif_mutex_unlock_qedr_dev_list_lock(& qedr_dev_list_lock);
    }
    #line 142 
    edev->rdma_info.exp_recovery = (_Bool)1;
  }
  #line 144 
  return;
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static void _qede_rdma_dev_open(struct qede_dev *edev)
{
  #line 148 
  if ((qedr_drv != (struct qedr_driver *)0 && edev->rdma_info.qedr_dev != (struct qedr_dev *)0) && qedr_drv->notify != (void (*)(struct qedr_dev *, enum qede_rdma_event ))0) 
    #line 149 
    (*(qedr_drv->notify))(edev->rdma_info.qedr_dev,(enum qede_rdma_event)QEDE_UP);
  #line 150 
  return;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static void qede_rdma_dev_open(struct qede_dev *edev)
{
  #line 154 
  if (! qede_rdma_supported(edev)) 
                                   #line 155 
                                   return;
  #line 157 
  cif_mutex_lock_qedr_dev_list_lock(& qedr_dev_list_lock);
  #line 158 
  _qede_rdma_dev_open(edev);
  #line 159 
  cif_mutex_unlock_qedr_dev_list_lock(& qedr_dev_list_lock);
  #line 160 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static void _qede_rdma_dev_close(struct qede_dev *edev)
{
  #line 164 
  if ((qedr_drv != (struct qedr_driver *)0 && edev->rdma_info.qedr_dev != (struct qedr_dev *)0) && qedr_drv->notify != (void (*)(struct qedr_dev *, enum qede_rdma_event ))0) 
    #line 165 
    (*(qedr_drv->notify))(edev->rdma_info.qedr_dev,(enum qede_rdma_event)QEDE_DOWN);
  #line 166 
  return;
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static void qede_rdma_dev_close(struct qede_dev *edev)
{
  #line 170 
  if (! qede_rdma_supported(edev)) 
                                   #line 171 
                                   return;
  #line 173 
  cif_mutex_lock_qedr_dev_list_lock(& qedr_dev_list_lock);
  #line 174 
  _qede_rdma_dev_close(edev);
  #line 175 
  cif_mutex_unlock_qedr_dev_list_lock(& qedr_dev_list_lock);
  #line 176 
  return;
}

#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static void qede_rdma_dev_shutdown(struct qede_dev *edev)
{
  #line 180 
  if (! qede_rdma_supported(edev)) 
                                   #line 181 
                                   return;
  #line 183 
  cif_mutex_lock_qedr_dev_list_lock(& qedr_dev_list_lock);
  #line 184 
  if ((qedr_drv != (struct qedr_driver *)0 && edev->rdma_info.qedr_dev != (struct qedr_dev *)0) && qedr_drv->notify != (void (*)(struct qedr_dev *, enum qede_rdma_event ))0) 
    #line 185 
    (*(qedr_drv->notify))(edev->rdma_info.qedr_dev,(enum qede_rdma_event)QEDE_CLOSE);
  #line 186 
  cif_mutex_unlock_qedr_dev_list_lock(& qedr_dev_list_lock);
  #line 187 
  return;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
int qede_rdma_register_driver(struct qedr_driver *drv)
{
  #line 201 
  void *__mptr;
  #line 191 
  struct qede_dev *edev;
  #line 192 
  u8 qedr_counter = (unsigned char)0U;
  #line 194 
  cif_mutex_lock_qedr_dev_list_lock(& qedr_dev_list_lock);
  #line 195 
  if (qedr_drv != (struct qedr_driver *)0) {
    #line 196 
    cif_mutex_unlock_qedr_dev_list_lock(& qedr_dev_list_lock);
    #line 197 
    return -22;
  }
  #line 199 
  qedr_drv = drv;
  #line 201 
  __mptr = (void *)qedr_dev_list.next;
  #line 201 
  edev = ((struct qede_dev *)(__mptr + 18446744073709550192U));
  #line 201 
  while (& edev->rdma_info.entry != & qedr_dev_list) {
    #line 201 
    void *__mptr_0;
    {
      #line 202 
      struct net_device *ndev;
      #line 204 
      qedr_counter = (u8)((int)qedr_counter + 1);
      #line 205 
      _qede_rdma_dev_add(edev);
      #line 206 
      ndev = edev->ndev;
      #line 207 
      if ((int)netif_running(ndev) != 0) {
        #line 207 
        if ((int)netif_oper_up(ndev) != 0) 
                                           #line 208 
                                           _qede_rdma_dev_open(edev);
      }
    }
    #line 201 
    __mptr_0 = (void *)edev->rdma_info.entry.next;
    #line 201 
    edev = ((struct qede_dev *)(__mptr_0 + 18446744073709550192U));
  }
  #line 210 
  cif_mutex_unlock_qedr_dev_list_lock(& qedr_dev_list_lock);
  #line 212 
  printk((char *)"\001",(int)qedr_counter);
  #line 215 
  return 0;
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
void qede_rdma_unregister_driver(struct qedr_driver *drv)
{
  #line 224 
  void *__mptr;
  #line 221 
  struct qede_dev *edev;
  #line 223 
  cif_mutex_lock_qedr_dev_list_lock(& qedr_dev_list_lock);
  #line 224 
  __mptr = (void *)qedr_dev_list.next;
  #line 224 
  edev = ((struct qede_dev *)(__mptr + 18446744073709550192U));
  #line 224 
  while (& edev->rdma_info.entry != & qedr_dev_list) {
    #line 224 
    void *__mptr_0;
    #line 226 
    if (edev->rdma_info.qedr_dev != (struct qedr_dev *)0 && ! edev->rdma_info.exp_recovery) 
      #line 227 
      _qede_rdma_dev_remove(edev);
    #line 224 
    __mptr_0 = (void *)edev->rdma_info.entry.next;
    #line 224 
    edev = ((struct qede_dev *)(__mptr_0 + 18446744073709550192U));
  }
  #line 229 
  qedr_drv = (struct qedr_driver *)0;
  #line 230 
  cif_mutex_unlock_qedr_dev_list_lock(& qedr_dev_list_lock);
  #line 231 
  return;
}

#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static void qede_rdma_changeaddr(struct qede_dev *edev)
{
  #line 236 
  if (! qede_rdma_supported(edev)) 
                                   #line 237 
                                   return;
  #line 239 
  if ((qedr_drv != (struct qedr_driver *)0 && edev->rdma_info.qedr_dev != (struct qedr_dev *)0) && qedr_drv->notify != (void (*)(struct qedr_dev *, enum qede_rdma_event ))0) 
    #line 240 
    (*(qedr_drv->notify))(edev->rdma_info.qedr_dev,(enum qede_rdma_event)QEDE_CHANGE_ADDR);
  #line 241 
  return;
}

#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static struct qede_rdma_event_work *qede_rdma_get_free_event_node(struct qede_dev *edev)
{
  #line 246 
  struct qede_rdma_event_work *event_node = (struct qede_rdma_event_work *)0;
  #line 247 
  struct list_head *list_node = (struct list_head *)0;
  #line 248 
  bool found = (_Bool)0;
  #line 250 
  list_node = edev->rdma_info.rdma_event_list.next;
  #line 250 
  while (& edev->rdma_info.rdma_event_list != list_node) {
    {
      #line 251 
      void *__mptr;
      #line 251 
      __mptr = (void *)list_node;
      #line 251 
      event_node = ((struct qede_rdma_event_work *)__mptr);
      #line 253 
      if (! test_bit(0L,(unsigned long *)(& event_node->work.data))) {
        #line 254 
        found = (_Bool)1;
        #line 255 
        break;
      }
    }
    #line 250 
    list_node = list_node->next;
  }
  #line 259 
  if (! found) {
    #line 260 
    event_node = (struct qede_rdma_event_work *)kzalloc_0(112UL,2592U);
    #line 261 
    if (event_node == (struct qede_rdma_event_work *)0) {
      #line 262 
      if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
        #line 262 
        char *tmp_2;
        #line 262 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 262 
                                                      tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 262 
                                                                    tmp_2 = (char *)"";
        #line 262 
        printk((char *)"\001",(char *)"qede_rdma_get_free_event_node",262,tmp_2);
      }
      #line 264 
      return (struct qede_rdma_event_work *)0;
    }
    #line 266 
    list_add_tail(& event_node->list,& edev->rdma_info.rdma_event_list);
  }
  #line 270 
  return event_node;
}

#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static void qede_rdma_handle_event(struct work_struct *work)
{
  #line 279 
  void *__mptr;
  #line 275 
  struct qede_rdma_event_work *event_node;
  #line 276 
  enum qede_rdma_event event;
  #line 277 
  struct qede_dev *edev;
  #line 279 
  __mptr = (void *)work;
  #line 279 
  event_node = ((struct qede_rdma_event_work *)(__mptr + 18446744073709551600U));
  #line 280 
  event = event_node->event;
  #line 281 
  edev = (struct qede_dev *)event_node->ptr;
  #line 283 
  switch ((unsigned int)event) {
    #line 284 
    case (unsigned int)0: 
                          #line 284 
    ;
    #line 285 
    qede_rdma_dev_open(edev);
    #line 286 
    break;
    #line 287 
    case (unsigned int)1: 
                          #line 287 
    ;
    #line 288 
    qede_rdma_dev_close(edev);
    #line 289 
    break;
    #line 290 
    case (unsigned int)3: 
                          #line 290 
    ;
    #line 291 
    qede_rdma_dev_shutdown(edev);
    #line 292 
    break;
    #line 293 
    case (unsigned int)2: 
                          #line 293 
    ;
    #line 294 
    qede_rdma_changeaddr(edev);
    #line 295 
    break;
    #line 296 
    default: 
             #line 296 
    ;
    #line 297 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 297 
      char *tmp_0;
      #line 297 
      ;
      #line 297 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 297 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 297 
                                                                    tmp_0 = (char *)"";
      #line 297 
      printk((char *)"\001",(char *)"qede_rdma_handle_event",297,tmp_0,(unsigned int)event);
    }
  }
  #line 299 
  return;
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
static void qede_rdma_add_event(struct qede_dev *edev, enum qede_rdma_event event)
{
  #line 304 
  struct qede_rdma_event_work *event_node;
  #line 307 
  if ((int)edev->rdma_info.exp_recovery != 0) 
                                              #line 308 
                                              return;
  #line 310 
  if (edev->rdma_info.qedr_dev == (struct qedr_dev *)0) 
                                                        #line 311 
                                                        return;
  #line 313 
  event_node = qede_rdma_get_free_event_node(edev);
  #line 314 
  if (event_node == (struct qede_rdma_event_work *)0) 
                                                      #line 315 
                                                      return;
  #line 317 
  event_node->event = event;
  #line 318 
  event_node->ptr = (void *)edev;
  {
    #line 320 
    struct lock_class_key __key;
    #line 320 
    __init_work(& event_node->work,0);
    #line 320 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 320 
    event_node->work.data = __constr_expr_34;
    #line 320 
    lockdep_init_map(& event_node->work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 320 
    INIT_LIST_HEAD_0(& event_node->work.entry);
    #line 320 
    event_node->work.func = & qede_rdma_handle_event;
  }
  #line 321 
  cif_queue_work(edev->rdma_info.rdma_wq,& event_node->work);
  #line 322 
  return;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
void qede_rdma_dev_event_open(struct qede_dev *edev)
{
  #line 326 
  qede_rdma_add_event(edev,(enum qede_rdma_event)QEDE_UP);
  #line 327 
  return;
}

#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
void qede_rdma_dev_event_close(struct qede_dev *edev)
{
  #line 331 
  qede_rdma_add_event(edev,(enum qede_rdma_event)QEDE_DOWN);
  #line 332 
  return;
}

#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_rdma.c"
void qede_rdma_event_changeaddr(struct qede_dev *edev)
{
  #line 336 
  qede_rdma_add_event(edev,(enum qede_rdma_event)QEDE_CHANGE_ADDR);
  #line 337 
  return;
}

#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_rdma.i.aux"
#line 98 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_rdma.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 137 
  ldv_init_list_head(list);
  #line 138 
  return;
}

#line 304  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_rdma.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 308 
  return emg_queue_work(wq,work);
}

#line 485  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_rdma.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 488 
  return ldv_kzalloc(size,flags);
}

#line 752  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_rdma.i.aux"
static void cif_mutex_lock_qedr_dev_list_lock(struct mutex *lock)
{
  #line 755 
  ldv_mutex_model_lock(lock,(char *)"qedr_dev_list_lock");
  #line 756 
  return;
}

#line 759  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_rdma.i.aux"
static void cif_mutex_unlock_qedr_dev_list_lock(struct mutex *lock)
{
  #line 762 
  ldv_mutex_model_unlock(lock,(char *)"qedr_dev_list_lock");
  #line 763 
  return;
}

/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch_clear_bit(long nr, unsigned long *addr)
{
  #line 74 
  if (0 != 0) 
              #line 76 
              ldv_inline_asm(); else 
                                     #line 79 
                                     ldv_inline_asm();
  #line 80 
  return;
}

#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch_clear_bit_unlock(long nr, unsigned long *addr)
{
  #line 87 
  ldv_inline_asm();
  #line 88 
  arch_clear_bit(nr,addr);
  #line 89 
  return;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit_lock(long nr, unsigned long *addr)
{
  #line 144 
  return arch_test_and_set_bit(nr,addr);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-lock.h"
__inline static void clear_bit_unlock(long nr, unsigned long *addr)
{
  #line 25 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 26 
  arch_clear_bit_unlock(nr,addr);
  #line 27 
  return;
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-lock.h"
__inline static bool test_and_set_bit_lock(long nr, unsigned long *addr)
{
  #line 55 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 56 
  return arch_test_and_set_bit_lock(nr,addr);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list);
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
__inline static s64 timespec64_to_ns(struct timespec64 *ts)
{
  #line 135 
  return ts->tv_sec * 1000000000LL + (long long)ts->tv_nsec;
}

#line 144 
#line 144 
struct timespec64 ns_to_timespec64(s64);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 17 
void __xadd_wrong_size(void);
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_fetch_add(int i, atomic_t *v)
{
  #line 184 
  int __ret;
  #line 184 
  __ret = i;
  #line 184 
  switch (4UL) {
    #line 184 
    case (unsigned long)1: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)2: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)4: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)8: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    default: 
             #line 184 
    ;
    #line 184 
    __xadd_wrong_size();
  }
  #line 184 
  return __ret;
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_fetch_add(int i, atomic_t *v)
{
  #line 111 
  kasan_check_read((void *)v,4U);
  #line 112 
  return arch_atomic_fetch_add(i,v);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static bool IS_ERR_0(void *ptr);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 752  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static void cif_spin_lock_bh_lock_of_qede_ptp(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 761  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static void cif_spin_unlock_bh_lock_of_qede_ptp(spinlock_t *lock);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static s64 ktime_to_ns(ktime_t kt)
{
  #line 99 
  return kt;
}

#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static ktime_t ns_to_ktime(u64 ns)
{
  #line 267 
  return (long long)ns;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 68 
ktime_t ktime_get_with_offset(enum tk_offsets);
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
__inline static ktime_t ktime_get_real(void)
{
  #line 79 
  return ktime_get_with_offset((enum tk_offsets)TK_OFFS_REAL);
}

#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 665  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
#line 114 
void refcount_warn_saturate(refcount_t *, enum refcount_saturation_type);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_add(int i, refcount_t *r)
{
  #line 188 
  int old = atomic_fetch_add(i,& r->refs);
  #line 190 
  if ((long)(old == 0) != 0L) 
                              #line 191 
                              refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_UAF);
  else 
    #line 192 
    if ((long)(old < 0) != 0L || (long)(old + i < 0) != 0L) 
                                                            #line 193 
                                                            refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_OVF);
  #line 194 
  return;
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_inc(refcount_t *r)
{
  #line 228 
  refcount_add(1,r);
  #line 229 
  return;
}

#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
#line 186 
struct ptp_clock *ptp_clock_register(struct ptp_clock_info *, struct device *);
#line 195 
#line 195 
int ptp_clock_unregister(struct ptp_clock *);
#line 213 
#line 213 
int ptp_clock_index(struct ptp_clock *);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 137 
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 485  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
__inline static void timecounter_adjtime(struct timecounter *tc, s64 delta)
{
  #line 86 
  tc->nsec += (unsigned long long)delta;
  #line 87 
  return;
}

#line 99 
#line 99 
void timecounter_init(struct timecounter *, struct cyclecounter *, u64);
#line 111 
#line 111 
u64 timecounter_read(struct timecounter *);
#line 127 
#line 127 
u64 timecounter_cyc2time(struct timecounter *, u64);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
  #line 1407 
  return & ((struct skb_shared_info *)skb_end_pointer(skb))->hwtstamps;
}

#line 1580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_get(struct sk_buff *skb)
{
  #line 1582 
  refcount_inc(& skb->users);
  #line 1583 
  return skb;
}

#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.h"
#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
void qede_ptp_rx_ts(struct qede_dev *edev, struct sk_buff *skb);
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.h"
#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
void qede_ptp_tx_ts(struct qede_dev *edev, struct sk_buff *skb);
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.h"
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
int qede_ptp_hw_ts(struct qede_dev *edev, struct ifreq *ifr);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.h"
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
void qede_ptp_disable(struct qede_dev *edev);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.h"
#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
int qede_ptp_enable(struct qede_dev *edev, bool init_tc);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.h"
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
int qede_ptp_get_ts_info(struct qede_dev *edev, struct ethtool_ts_info *info);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
static int qede_ptp_adjfreq(struct ptp_clock_info *info, s32 ppb)
{
  #line 65 
  void *__mptr;
  #line 67 
  int rc;
  #line 65 
  __mptr = (void *)info;
  #line 65 
  struct qede_ptp *ptp = ((struct qede_ptp *)(__mptr + 18446744073709551608U));
  #line 66 
  struct qede_dev *edev = ptp->edev;
  #line 69 
  __qede_lock(edev);
  #line 70 
  if (edev->state == 1U) {
    #line 71 
    cif_spin_lock_bh_lock_of_qede_ptp(& ptp->lock);
    #line 72 
    rc = (*((ptp->ops)->adjfreq))(edev->cdev,ppb);
    #line 73 
    cif_spin_unlock_bh_lock_of_qede_ptp(& ptp->lock);
  }
  else {
    #line 75 
    char *tmp_0;
    #line 75 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 75 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 75 
                                                                    tmp_0 = (char *)"";
    #line 75 
    printk((char *)"\001",(char *)"qede_ptp_adjfreq",75,tmp_0);
    #line 76 
    rc = -14;
  }
  #line 78 
  __qede_unlock(edev);
  #line 80 
  return rc;
}

#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
static int qede_ptp_adjtime(struct ptp_clock_info *info, s64 delta)
{
  #line 88 
  void *__mptr;
  #line 85 
  struct qede_dev *edev;
  #line 86 
  struct qede_ptp *ptp;
  #line 88 
  __mptr = (void *)info;
  #line 88 
  ptp = ((struct qede_ptp *)(__mptr + 18446744073709551608U));
  #line 89 
  edev = ptp->edev;
  #line 91 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
    #line 91 
    char *tmp_0;
    #line 91 
    ;
    #line 91 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 91 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 91 
                                                                    tmp_0 = (char *)"";
    #line 91 
    printk((char *)"\001",(char *)"qede_ptp_adjtime",91,tmp_0,delta);
  }
  #line 94 
  cif_spin_lock_bh_lock_of_qede_ptp(& ptp->lock);
  #line 95 
  timecounter_adjtime(& ptp->tc,delta);
  #line 96 
  cif_spin_unlock_bh_lock_of_qede_ptp(& ptp->lock);
  #line 98 
  return 0;
}

#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
static int qede_ptp_gettime(struct ptp_clock_info *info, struct timespec64 *ts)
{
  #line 107 
  void *__mptr;
  #line 103 
  struct qede_dev *edev;
  #line 104 
  struct qede_ptp *ptp;
  #line 105 
  u64 ns;
  #line 107 
  __mptr = (void *)info;
  #line 107 
  ptp = ((struct qede_ptp *)(__mptr + 18446744073709551608U));
  #line 108 
  edev = ptp->edev;
  #line 110 
  cif_spin_lock_bh_lock_of_qede_ptp(& ptp->lock);
  #line 111 
  ns = timecounter_read(& ptp->tc);
  #line 112 
  cif_spin_unlock_bh_lock_of_qede_ptp(& ptp->lock);
  #line 114 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
    #line 114 
    char *tmp_0;
    #line 114 
    ;
    #line 114 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 114 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 114 
                                                                    tmp_0 = (char *)"";
    #line 114 
    printk((char *)"\001",(char *)"qede_ptp_gettime",114,tmp_0,ns);
  }
  #line 116 
  *ts = ns_to_timespec64((long long)ns);
  #line 118 
  return 0;
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
static int qede_ptp_settime(struct ptp_clock_info *info, struct timespec64 *ts)
{
  #line 128 
  void *__mptr;
  #line 124 
  struct qede_dev *edev;
  #line 125 
  struct qede_ptp *ptp;
  #line 126 
  u64 ns;
  #line 128 
  __mptr = (void *)info;
  #line 128 
  ptp = ((struct qede_ptp *)(__mptr + 18446744073709551608U));
  #line 129 
  edev = ptp->edev;
  #line 131 
  ns = (unsigned long long)timespec64_to_ns(ts);
  #line 133 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
    #line 133 
    char *tmp_1;
    #line 133 
    ;
    #line 133 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 133 
                                                  tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 133 
                                                                    tmp_1 = (char *)"";
    #line 133 
    printk((char *)"\001",(char *)"qede_ptp_settime",133,tmp_1,ns);
  }
  #line 136 
  cif_spin_lock_bh_lock_of_qede_ptp(& ptp->lock);
  #line 137 
  timecounter_init(& ptp->tc,& ptp->cc,ns);
  #line 138 
  cif_spin_unlock_bh_lock_of_qede_ptp(& ptp->lock);
  #line 140 
  return 0;
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
static int qede_ptp_ancillary_feature_enable(struct ptp_clock_info *info, struct ptp_clock_request *rq, int on)
{
  #line 151 
  void *__mptr;
  #line 148 
  struct qede_dev *edev;
  #line 149 
  struct qede_ptp *ptp;
  #line 154 
  char *tmp_0;
  #line 151 
  __mptr = (void *)info;
  #line 151 
  ptp = ((struct qede_ptp *)(__mptr + 18446744073709551608U));
  #line 152 
  edev = ptp->edev;
  #line 154 
  if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                #line 154 
                                                tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 154 
                                                                    tmp_0 = (char *)"";
  #line 154 
  printk((char *)"\001",(char *)"qede_ptp_ancillary_feature_enable",154,tmp_0);
  #line 156 
  return -524;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
static void qede_ptp_task(struct work_struct *work)
{
  #line 168 
  void *__mptr;
  #line 161 
  struct skb_shared_hwtstamps shhwtstamps;
  #line 162 
  struct qede_dev *edev;
  #line 163 
  struct qede_ptp *ptp;
  #line 164 
  u64 timestamp;
  #line 164 
  u64 ns;
  #line 165 
  bool timedout;
  #line 166 
  int rc;
  #line 170 
  int tmp_2;
  #line 168 
  __mptr = (void *)work;
  #line 168 
  ptp = ((struct qede_ptp *)(__mptr + 18446744073709551400U));
  #line 169 
  edev = ptp->edev;
  {
    #line 170 
    unsigned long __dummy;
    #line 170 
    unsigned long __dummy2;
    }
  #line 170 
  if (1 != 0) {
    {
      #line 170 
      unsigned long __dummy_0;
      #line 170 
      unsigned long __dummy2_0;
      }
    #line 170 
    if (1 != 0) 
      #line 170 
      if ((long)((ptp->ptp_tx_start - jiffies) + 500UL) < 0L) 
                                                              #line 170 
                                                              tmp_2 = 1; else 
                                                                    #line 170 
                                                                    tmp_2 = 0;
    else 
         #line 170 
         tmp_2 = 0;
  }
  else 
       #line 170 
       tmp_2 = 0;
  #line 170 
  timedout = (_Bool)(tmp_2 != 0);
  #line 174 
  cif_spin_lock_bh_lock_of_qede_ptp(& ptp->lock);
  #line 175 
  rc = (*((ptp->ops)->read_tx_ts))(edev->cdev,& timestamp);
  #line 176 
  cif_spin_unlock_bh_lock_of_qede_ptp(& ptp->lock);
  #line 177 
  if (rc != 0) {
    #line 178 
    if ((long)((int)timedout != 0) != 0L) {
      #line 179 
      if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
        #line 179 
        char *tmp_3;
        #line 179 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 179 
                                                      tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 179 
                                                                    tmp_3 = (char *)"";
        #line 179 
        printk((char *)"\001",(char *)"qede_ptp_task",179,tmp_3);
      }
      #line 180 
      dev_kfree_skb_any(ptp->tx_skb);
      #line 181 
      ptp->tx_skb = (struct sk_buff *)0;
      #line 182 
      clear_bit_unlock(2L,& edev->flags);
      #line 184 
      (edev->ptp_skip_txts) ++;
    }
    else 
         #line 187 
         cif_schedule_work(& ptp->work);
    #line 189 
    return;
  }
  #line 192 
  ns = timecounter_cyc2time(& ptp->tc,timestamp);
  #line 193 
  memset((void *)(& shhwtstamps),0,8UL);
  #line 194 
  shhwtstamps.hwtstamp = ns_to_ktime(ns);
  #line 195 
  skb_tstamp_tx(ptp->tx_skb,& shhwtstamps);
  #line 196 
  dev_kfree_skb_any(ptp->tx_skb);
  #line 197 
  ptp->tx_skb = (struct sk_buff *)0;
  #line 198 
  clear_bit_unlock(2L,& edev->flags);
  #line 200 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
    #line 200 
    char *tmp_4;
    #line 200 
    ;
    #line 200 
    ;
    #line 200 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 200 
                                                  tmp_4 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 200 
                                                                    tmp_4 = (char *)"";
    #line 200 
    printk((char *)"\001",(char *)"qede_ptp_task",200,tmp_4,timestamp,ns);
  }
  #line 201 
  return;
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
static u64 qede_ptp_read_cc(struct cyclecounter *cc)
{
  #line 213 
  void *__mptr;
  #line 208 
  struct qede_dev *edev;
  #line 209 
  struct qede_ptp *ptp;
  #line 210 
  u64 phc_cycles;
  #line 211 
  int rc;
  #line 213 
  __mptr = (void *)cc;
  #line 213 
  ptp = ((struct qede_ptp *)(__mptr + 18446744073709551472U));
  #line 214 
  edev = ptp->edev;
  #line 215 
  rc = (*((ptp->ops)->read_cc))(edev->cdev,& phc_cycles);
  #line 216 
  if (rc != 0) {
    #line 217 
    bool __warned;
    #line 217 
    int __ret_warn_once = 1;
    #line 217 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 217 
      __warned = (_Bool)1;
      {
        #line 217 
        int __ret_warn_on = 1;
        #line 217 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 217 
          __warn_printk((char *)"PHC read err %d\n",rc);
          #line 218 
          ldv_inline_asm();
          #line 219 
          ldv_inline_asm();
        }
        #line 217 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 217 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 219 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
    #line 219 
    char *tmp_0;
    #line 219 
    ;
    #line 219 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 219 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 219 
                                                                    tmp_0 = (char *)"";
    #line 219 
    printk((char *)"\001",(char *)"qede_ptp_read_cc",219,tmp_0,phc_cycles);
  }
  #line 221 
  return phc_cycles;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
static int qede_ptp_cfg_filters(struct qede_dev *edev)
{
  #line 226 
  enum qed_ptp_hwtstamp_tx_type tx_type = QED_PTP_HWTSTAMP_TX_ON;
  #line 227 
  enum qed_ptp_filter_type rx_filter = QED_PTP_FILTER_NONE;
  #line 228 
  struct qede_ptp *ptp = edev->ptp;
  #line 230 
  if (ptp == (struct qede_ptp *)0) 
                                   #line 231 
                                   return -5;
  #line 233 
  if (! ptp->hw_ts_ioctl_called) {
    #line 234 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 234 
      char *tmp;
      #line 234 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 234 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 234 
                                                                    tmp = (char *)"";
      #line 234 
      printk((char *)"\001",(char *)"qede_ptp_cfg_filters",234,tmp);
    }
    #line 235 
    return 0;
  }
  #line 238 
  switch ((int)ptp->tx_type) {
    #line 250 
    char *tmp_0;
    #line 239 
    case 1: 
            #line 239 
    ;
    #line 240 
    cif_set_bit_0(3L,& edev->flags);
    #line 241 
    tx_type = QED_PTP_HWTSTAMP_TX_ON;
    #line 242 
    break;
    #line 244 
    case 0: 
            #line 244 
    ;
    #line 245 
    cif_clear_bit_0(3L,& edev->flags);
    #line 246 
    tx_type = QED_PTP_HWTSTAMP_TX_OFF;
    #line 247 
    break;
    #line 249 
    case 2: 
            #line 249 
    ;
    #line 250 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 250 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 250 
                                                                    tmp_0 = (char *)"";
    #line 250 
    printk((char *)"\001",(char *)"qede_ptp_cfg_filters",250,tmp_0);
    #line 251 
    return -34;
  }
  #line 254 
  cif_spin_lock_bh_lock_of_qede_ptp(& ptp->lock);
  #line 255 
  switch ((int)ptp->rx_filter) {
    #line 256 
    case 0: 
            #line 256 
    ;
    #line 257 
    rx_filter = QED_PTP_FILTER_NONE;
    #line 258 
    break;
    #line 259 
    case 1: 
            #line 259 
    ;
    #line 260 
    case 2: 
            #line 260 
    ;
    #line 261 
    case 15: 
             #line 261 
    ;
    #line 262 
    ptp->rx_filter = (unsigned short)0U;
    #line 263 
    rx_filter = QED_PTP_FILTER_ALL;
    #line 264 
    break;
    #line 265 
    case 3: 
            #line 265 
    ;
    #line 266 
    ptp->rx_filter = (unsigned short)3U;
    #line 267 
    rx_filter = QED_PTP_FILTER_V1_L4_EVENT;
    #line 268 
    break;
    #line 269 
    case 4: 
            #line 269 
    ;
    #line 270 
    case 5: 
            #line 270 
    ;
    #line 271 
    ptp->rx_filter = (unsigned short)3U;
    #line 273 
    rx_filter = QED_PTP_FILTER_V1_L4_GEN;
    #line 274 
    break;
    #line 275 
    case 6: 
            #line 275 
    ;
    #line 276 
    ptp->rx_filter = (unsigned short)6U;
    #line 277 
    rx_filter = QED_PTP_FILTER_V2_L4_EVENT;
    #line 278 
    break;
    #line 279 
    case 7: 
            #line 279 
    ;
    #line 280 
    case 8: 
            #line 280 
    ;
    #line 281 
    ptp->rx_filter = (unsigned short)6U;
    #line 283 
    rx_filter = QED_PTP_FILTER_V2_L4_GEN;
    #line 284 
    break;
    #line 285 
    case 9: 
            #line 285 
    ;
    #line 286 
    ptp->rx_filter = (unsigned short)9U;
    #line 287 
    rx_filter = QED_PTP_FILTER_V2_L2_EVENT;
    #line 288 
    break;
    #line 289 
    case 10: 
             #line 289 
    ;
    #line 290 
    case 11: 
             #line 290 
    ;
    #line 291 
    ptp->rx_filter = (unsigned short)9U;
    #line 293 
    rx_filter = QED_PTP_FILTER_V2_L2_GEN;
    #line 294 
    break;
    #line 295 
    case 12: 
             #line 295 
    ;
    #line 296 
    ptp->rx_filter = (unsigned short)12U;
    #line 297 
    rx_filter = QED_PTP_FILTER_V2_EVENT;
    #line 298 
    break;
    #line 299 
    case 13: 
             #line 299 
    ;
    #line 300 
    case 14: 
             #line 300 
    ;
    #line 301 
    ptp->rx_filter = (unsigned short)12U;
    #line 303 
    rx_filter = QED_PTP_FILTER_V2_GEN;
    #line 304 
    break;
  }
  #line 307 
  (*((ptp->ops)->cfg_filters))(edev->cdev,rx_filter,tx_type);
  #line 309 
  cif_spin_unlock_bh_lock_of_qede_ptp(& ptp->lock);
  #line 311 
  return 0;
}

#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
int qede_ptp_hw_ts(struct qede_dev *edev, struct ifreq *ifr)
{
  #line 316 
  struct hwtstamp_config config;
  #line 317 
  struct qede_ptp *ptp;
  #line 318 
  int rc;
  #line 347 
  int tmp_3;
  #line 320 
  ptp = edev->ptp;
  #line 321 
  if (ptp == (struct qede_ptp *)0) 
                                   #line 322 
                                   return -5;
  #line 324 
  if (copy_from_user((void *)(& config),ifr->ifr_ifru.ifru_data,12UL) != 0UL) 
    #line 325 
    return -14;
  #line 327 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
    #line 327 
    char *tmp_0;
    #line 327 
    ;
    #line 327 
    ;
    #line 327 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 327 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 327 
                                                                    tmp_0 = (char *)"";
    #line 327 
    printk((char *)"\001",(char *)"qede_ptp_hw_ts",327,tmp_0,config.tx_type,config.rx_filter);
  }
  #line 331 
  if (config.flags != 0) {
    #line 332 
    char *tmp_1;
    #line 332 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 332 
                                                  tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 332 
                                                                    tmp_1 = (char *)"";
    #line 332 
    printk((char *)"\001",(char *)"qede_ptp_hw_ts",332,tmp_1);
    #line 333 
    return -22;
  }
  #line 336 
  ptp->hw_ts_ioctl_called = (_Bool)1;
  #line 337 
  ptp->tx_type = (unsigned short)config.tx_type;
  #line 338 
  ptp->rx_filter = (unsigned short)config.rx_filter;
  #line 340 
  rc = qede_ptp_cfg_filters(edev);
  #line 341 
  if (rc != 0) 
               #line 342 
               return rc;
  #line 344 
  config.rx_filter = (int)ptp->rx_filter;
  #line 347 
  if (copy_to_user(ifr->ifr_ifru.ifru_data,(void *)(& config),12UL) != 0UL) 
    #line 347 
    tmp_3 = -14; else 
                      #line 347 
                      tmp_3 = 0;
  #line 347 
  return tmp_3;
}

#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
int qede_ptp_get_ts_info(struct qede_dev *edev, struct ethtool_ts_info *info)
{
  #line 352 
  struct qede_ptp *ptp = edev->ptp;
  #line 354 
  if (ptp == (struct qede_ptp *)0) {
    #line 355 
    info->so_timestamping = 26U;
    #line 358 
    info->phc_index = -1;
    #line 360 
    return 0;
  }
  #line 363 
  info->so_timestamping = 95U;
  #line 370 
  if (ptp->clock != (struct ptp_clock *)0) 
                                           #line 371 
                                           info->phc_index = ptp_clock_index(ptp->clock); else 
                                                                    #line 373 
                                                                    info->phc_index = -1;
  #line 375 
  info->rx_filters = 32761U;
  #line 389 
  info->tx_types = 3U;
  #line 391 
  return 0;
}

#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
void qede_ptp_disable(struct qede_dev *edev)
{
  #line 396 
  struct qede_ptp *ptp;
  #line 398 
  ptp = edev->ptp;
  #line 399 
  if (ptp == (struct qede_ptp *)0) 
                                   #line 400 
                                   return;
  #line 402 
  if (ptp->clock != (struct ptp_clock *)0) {
    #line 403 
    ptp_clock_unregister(ptp->clock);
    #line 404 
    ptp->clock = (struct ptp_clock *)0;
  }
  #line 410 
  cancel_work_sync(& ptp->work);
  #line 411 
  if (ptp->tx_skb != (struct sk_buff *)0) {
    #line 412 
    dev_kfree_skb_any(ptp->tx_skb);
    #line 413 
    ptp->tx_skb = (struct sk_buff *)0;
  }
  #line 417 
  cif_spin_lock_bh_lock_of_qede_ptp(& ptp->lock);
  #line 418 
  (*((ptp->ops)->disable))(edev->cdev);
  #line 419 
  cif_spin_unlock_bh_lock_of_qede_ptp(& ptp->lock);
  #line 421 
  kfree((void *)ptp);
  #line 422 
  edev->ptp = (struct qede_ptp *)0;
  #line 423 
  return;
}

#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
static int qede_ptp_init(struct qede_dev *edev, bool init_tc)
{
  #line 427 
  struct qede_ptp *ptp;
  #line 428 
  int rc;
  #line 430 
  ptp = edev->ptp;
  #line 431 
  if (ptp == (struct qede_ptp *)0) 
                                   #line 432 
                                   return -22;
  #line 434 
  spinlock_check(& ptp->lock);
  {
    #line 434 
    struct lock_class_key __key;
    #line 434 
    __raw_spin_lock_init(& ptp->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&ptp->lock)->rlock",& __key);
  }
  #line 437 
  rc = (*((ptp->ops)->enable))(edev->cdev);
  #line 438 
  if (rc != 0) {
    #line 439 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 439 
      char *tmp;
      #line 439 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 439 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 439 
                                                                    tmp = (char *)"";
      #line 439 
      printk((char *)"\001",(char *)"qede_ptp_init",439,tmp);
    }
    #line 440 
    return rc;
  }
  {
    #line 444 
    struct lock_class_key __key_0;
    #line 444 
    __init_work(& ptp->work,0);
    #line 444 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 444 
    ptp->work.data = __constr_expr_34;
    #line 444 
    lockdep_init_map(& ptp->work.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 444 
    INIT_LIST_HEAD_1(& ptp->work.entry);
    #line 444 
    ptp->work.func = & qede_ptp_task;
  }
  #line 450 
  if ((int)init_tc != 0) {
    #line 451 
    memset((void *)(& ptp->cc),0,24UL);
    #line 452 
    ptp->cc.read = & qede_ptp_read_cc;
    #line 453 
    ptp->cc.mask = 18446744073709551615ULL;
    #line 454 
    ptp->cc.shift = 0U;
    #line 455 
    ptp->cc.mult = 1U;
    #line 457 
    ;
    #line 457 
    ;
    #line 457 
    timecounter_init(& ptp->tc,& ptp->cc,(unsigned long long)ktime_to_ns(ktime_get_real()));
  }
  #line 461 
  return rc;
}

#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
int qede_ptp_enable(struct qede_dev *edev, bool init_tc)
{
  #line 466 
  struct qede_ptp *ptp;
  #line 467 
  int rc;
  #line 469 
  ptp = (struct qede_ptp *)kzalloc_1(400UL,3264U);
  #line 470 
  if (ptp == (struct qede_ptp *)0) {
    #line 471 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 471 
      char *tmp_0;
      #line 471 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 471 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 471 
                                                                    tmp_0 = (char *)"";
      #line 471 
      printk((char *)"\001",(char *)"qede_ptp_enable",471,tmp_0);
    }
    #line 472 
    return -12;
  }
  #line 475 
  ptp->edev = edev;
  #line 476 
  ptp->ops = (edev->ops)->ptp;
  #line 477 
  if (ptp->ops == (struct qed_eth_ptp_ops *)0) {
    #line 478 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 478 
      char *tmp_1;
      #line 478 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 478 
                                                    tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 478 
                                                                    tmp_1 = (char *)"";
      #line 478 
      printk((char *)"\001",(char *)"qede_ptp_enable",478,tmp_1);
    }
    #line 479 
    rc = -5;
    #line 480 
    goto err1;
  }
  #line 483 
  edev->ptp = ptp;
  #line 485 
  rc = qede_ptp_init(edev,(_Bool)((bool)((int)init_tc) != 0));
  #line 486 
  if (rc != 0) 
               #line 487 
               goto err1;
  #line 489 
  qede_ptp_cfg_filters(edev);
  #line 492 
  ptp->clock_info.owner = & __this_module;
  #line 493 
  snprintf((char *)(& ptp->clock_info.name),16UL,(char *)"%s",(char *)(& (edev->ndev)->name));
  #line 494 
  ptp->clock_info.max_adj = 291666666;
  #line 495 
  ptp->clock_info.n_alarm = 0;
  #line 496 
  ptp->clock_info.n_ext_ts = 0;
  #line 497 
  ptp->clock_info.n_per_out = 0;
  #line 498 
  ptp->clock_info.pps = 0;
  #line 499 
  ptp->clock_info.adjfreq = & qede_ptp_adjfreq;
  #line 500 
  ptp->clock_info.adjtime = & qede_ptp_adjtime;
  #line 501 
  ptp->clock_info.gettime64 = & qede_ptp_gettime;
  #line 502 
  ptp->clock_info.settime64 = & qede_ptp_settime;
  #line 503 
  ptp->clock_info.enable = & qede_ptp_ancillary_feature_enable;
  #line 505 
  ptp->clock = ptp_clock_register(& ptp->clock_info,& (edev->pdev)->dev);
  #line 506 
  if ((int)IS_ERR_0((void *)ptp->clock) != 0) {
    #line 507 
    char *tmp_2;
    #line 507 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 507 
                                                  tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 507 
                                                                    tmp_2 = (char *)"";
    #line 507 
    printk((char *)"\001",(char *)"qede_ptp_enable",507,tmp_2);
    #line 508 
    qede_ptp_disable(edev);
    #line 509 
    rc = -22;
    #line 510 
    goto err2;
  }
  #line 513 
  return 0;
  #line 515 
  err1: 
        #line 515 
  ;
  #line 516 
  kfree((void *)ptp);
  #line 517 
  err2: 
        #line 517 
  ;
  #line 518 
  edev->ptp = (struct qede_ptp *)0;
  #line 520 
  return rc;
}

#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
void qede_ptp_tx_ts(struct qede_dev *edev, struct sk_buff *skb)
{
  #line 525 
  struct qede_ptp *ptp;
  #line 538 
  int tmp_6;
  #line 527 
  ptp = edev->ptp;
  #line 528 
  if (ptp == (struct qede_ptp *)0) 
                                   #line 529 
                                   return;
  #line 531 
  if ((int)test_and_set_bit_lock(2L,& edev->flags) != 0) {
    #line 533 
    char *tmp;
    #line 533 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 533 
                                                  tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 533 
                                                                    tmp = (char *)"";
    #line 533 
    printk((char *)"\001",(char *)"qede_ptp_tx_ts",533,tmp);
    #line 534 
    (edev->ptp_skip_txts) ++;
    #line 535 
    return;
  }
  #line 538 
  if (test_bit(3L,& edev->flags)) 
                                  #line 538 
                                  tmp_6 = 0; else 
                                                  #line 538 
                                                  tmp_6 = 1;
  #line 538 
  if ((long)tmp_6 != 0L) {
    #line 539 
    char *tmp_1;
    #line 539 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 539 
                                                  tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 539 
                                                                    tmp_1 = (char *)"";
    #line 539 
    printk((char *)"\001",(char *)"qede_ptp_tx_ts",539,tmp_1);
    #line 541 
    clear_bit_unlock(2L,& edev->flags);
    #line 542 
    (edev->ptp_skip_txts) ++;
  }
  else 
    #line 543 
    if ((long)(ptp->tx_skb != (struct sk_buff *)0) != 0L) {
      #line 544 
      char *tmp_2;
      #line 544 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 544 
                                                    tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 544 
                                                                    tmp_2 = (char *)"";
      #line 544 
      printk((char *)"\001",(char *)"qede_ptp_tx_ts",544,tmp_2);
      #line 546 
      clear_bit_unlock(2L,& edev->flags);
      #line 547 
      (edev->ptp_skip_txts) ++;
    }
    else {
      #line 549 
      ((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags = (unsigned char)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags | 4U);
      #line 551 
      ptp->tx_skb = skb_get(skb);
      #line 552 
      ptp->ptp_tx_start = jiffies;
      #line 553 
      cif_schedule_work(& ptp->work);
    }
  #line 555 
  return;
}

#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.c"
void qede_ptp_rx_ts(struct qede_dev *edev, struct sk_buff *skb)
{
  #line 559 
  struct qede_ptp *ptp;
  #line 560 
  u64 timestamp;
  #line 560 
  u64 ns;
  #line 561 
  int rc;
  #line 563 
  ptp = edev->ptp;
  #line 564 
  if (ptp == (struct qede_ptp *)0) 
                                   #line 565 
                                   return;
  #line 567 
  cif_spin_lock_bh_lock_of_qede_ptp(& ptp->lock);
  #line 568 
  rc = (*((ptp->ops)->read_rx_ts))(edev->cdev,& timestamp);
  #line 569 
  if (rc != 0) {
    #line 570 
    cif_spin_unlock_bh_lock_of_qede_ptp(& ptp->lock);
    #line 571 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 571 
      char *tmp;
      #line 571 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 571 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 571 
                                                                    tmp = (char *)"";
      #line 571 
      printk((char *)"\001",(char *)"qede_ptp_rx_ts",571,tmp);
    }
    #line 572 
    return;
  }
  #line 575 
  ns = timecounter_cyc2time(& ptp->tc,timestamp);
  #line 576 
  cif_spin_unlock_bh_lock_of_qede_ptp(& ptp->lock);
  #line 577 
  skb_hwtstamps(skb)->hwtstamp = ns_to_ktime(ns);
  #line 578 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
    #line 578 
    char *tmp_1;
    #line 578 
    ;
    #line 578 
    ;
    #line 578 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 578 
                                                  tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 578 
                                                                    tmp_1 = (char *)"";
    #line 578 
    printk((char *)"\001",(char *)"qede_ptp_rx_ts",578,tmp_1,timestamp,ns);
  }
  #line 579 
  return;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
#line 102 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 123 
  ldv_set_bit(nr,addr);
  #line 124 
  return;
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 130 
  ldv_clear_bit(nr,addr);
  #line 131 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list)
{
  #line 137 
  ldv_init_list_head(list);
  #line 138 
  return;
}

#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static bool IS_ERR_0(void *ptr)
{
  #line 221 
  return ldv_is_err(ptr);
}

#line 485  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 488 
  return ldv_kzalloc(size,flags);
}

#line 665  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 669 
  return emg_schedule_work(work);
}

#line 752  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static void cif_spin_lock_bh_lock_of_qede_ptp(spinlock_t *lock)
{
  #line 755 
  ldv_spin_model_lock((char *)"lock_of_qede_ptp");
  #line 757 
  spin_lock_bh_0(lock);
  #line 758 
  return;
}

#line 761  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ptp.i.aux"
static void cif_spin_unlock_bh_lock_of_qede_ptp(spinlock_t *lock)
{
  #line 764 
  ldv_spin_model_unlock((char *)"lock_of_qede_ptp");
  #line 766 
  spin_unlock_bh_0(lock);
  #line 767 
  return;
}

#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_fp.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_fp.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_fp.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 83 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 84 
  return arch_test_and_set_bit(nr,addr);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 205 
void __cant_sleep(char *, int, int);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_fp.i.aux"
static void atomic_inc(atomic_t *v);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 91 
#line 91 
extern struct cpumask __cpu_online_mask;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static int cpumask_test_cpu(int cpu, struct cpumask *cpumask)
{
  #line 360 
  ;
  #line 360 
  return (int)test_bit((long)cpumask_check((unsigned int)cpu),
                 (unsigned long *)(& cpumask->bits));
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 546  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_fp.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 586  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_fp.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 223 
#line 223 
int rcu_read_lock_sched_held(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_3738 __u;
  #line 93 
  union __anonunion___u_3740 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_3744 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_44.__anonCompField___anonunion_186_39.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 527 
struct page *alloc_pages_current(gfp_t, unsigned int);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 532 
  return alloc_pages_current(gfp_mask,order);
}

#line 566 
#line 566 
void __free_pages(struct page *, unsigned int);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_inc(struct page *page)
{
  #line 107 
  atomic_inc(& page->_refcount);
  #line 108 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 109 
                                                                   __page_ref_mod(page,1);
  #line 110 
  return;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  #line 1375 
  return (_Bool)(page->__anonCompField_page_44.__anonCompField___anonunion_186_32.index == 18446744073709551615UL);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  #line 25 
  ldv_inline_asm();
  #line 30 
  return (unsigned short)(~ sum >> 16);
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 90 
  ldv_inline_asm();
  #line 98 
  return sum;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 117 
  return csum_fold(csum_tcpudp_nofold(saddr,daddr,len,(unsigned char)((int)proto),sum));
}

#line 180 
#line 180 
__sum16 csum_ipv6_magic(struct in6_addr *, struct in6_addr *, __u32, __u8, __wsum);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/clock.h"
#line 15 
unsigned long long sched_clock(void);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  #line 337 
  frag->bv_len = size;
  #line 338 
  return;
}

#line 1035 
#line 1035 
struct sk_buff *build_skb(void *, unsigned int);
#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2105 
  skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
  #line 2112 
  frag->bv_page = page;
  #line 2113 
  frag->bv_offset = (unsigned int)off;
  #line 2114 
  skb_frag_size_set(frag,(unsigned int)size);
  #line 2116 
  page = compound_head(page);
  #line 2117 
  if ((int)page_is_pfmemalloc(page) != 0) 
                                          #line 2118 
                                          skb->pfmemalloc = (unsigned char)1U;
  #line 2119 
  return;
}

#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2138 
  __skb_fill_page_desc(skb,i,page,off,size);
  #line 2139 
  ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
  #line 2140 
  return;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_put_data(struct sk_buff *skb, void *data, unsigned int len)
{
  #line 2233 
  void *tmp = skb_put(skb,len);
  #line 2235 
  memcpy(tmp,data,(unsigned long)len);
  #line 2237 
  return tmp;
}

#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_transport_header(struct sk_buff *skb)
{
  #line 2400 
  return skb->head + (unsigned long)skb->inner_transport_header;
}

#line 2437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_mac_header(struct sk_buff *skb)
{
  #line 2439 
  return skb->head + (unsigned long)skb->inner_mac_header;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_transport_header(struct sk_buff *skb)
{
  #line 2465 
  skb->transport_header = (unsigned short)(skb->data - skb->head);
  #line 2466 
  return;
}

#line 2468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_transport_header(struct sk_buff *skb, int offset)
{
  #line 2471 
  skb_reset_transport_header(skb);
  #line 2472 
  skb->transport_header = (unsigned short)((int)skb->transport_header + (int)((unsigned short)offset));
  #line 2473 
  return;
}

#line 2480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_network_header(struct sk_buff *skb)
{
  #line 2482 
  skb->network_header = (unsigned short)(skb->data - skb->head);
  #line 2483 
  return;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_linearize(struct sk_buff *skb)
{
  #line 3250 
  int tmp_0;
  #line 3250 
  if (__pskb_pull_tail(skb,(int)skb->data_len) != (void *)0) 
                                                             #line 3250 
                                                             tmp_0 = 0; else 
                                                                    #line 3250 
                                                                    tmp_0 = -12;
  #line 3250 
  return tmp_0;
}

#line 3260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_linearize(struct sk_buff *skb)
{
  #line 3262 
  int tmp_1;
  #line 3262 
  if ((int)skb_is_nonlinear(skb) != 0) 
                                       #line 3262 
                                       tmp_1 = __skb_linearize(skb); else 
                                                                    #line 3262 
                                                                    tmp_1 = 0;
  #line 3262 
  return tmp_1;
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_update_begin(struct u64_stats_sync *syncp)
{
  #line 124 
  return;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
__inline static void xdp_set_data_meta_invalid(struct xdp_buff *xdp)
{
  #line 162 
  xdp->data_meta = xdp->data + 1U;
  #line 163 
  return;
}

#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 424 
void __napi_schedule_irqoff(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule_irqoff(struct napi_struct *n)
{
  #line 454 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 455 
                                       __napi_schedule_irqoff(n);
  #line 456 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2156 
#line 2156 
u16 netdev_pick_tx(struct net_device *, struct sk_buff *, struct net_device *);
#line 3094 
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_1(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit_1(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit_1(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_clear_bit(1L,& dev_queue->state) != 0) 
                                                           #line 3321 
                                                           netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
#line 560 
extern struct static_key_false bpf_stats_enabled_key;
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
__inline static u32 bpf_prog_run_xdp(struct bpf_prog *prog, struct xdp_buff *xdp)
{
  #line 711 
  u32 ret;
  #line 711 
  __cant_sleep((char *)"./include/linux/filter.h",711,0);
  {
    #line 711 
    bool branch;
    #line 711 
    branch = arch_static_branch(& bpf_stats_enabled_key.key,(_Bool)0);
    #line 711 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 711 
      unsigned long tcp_ptr__;
      #line 711 
      struct bpf_prog_stats *stats;
      #line 711 
      u64 start = sched_clock();
      #line 711 
      ret = (*(prog->bpf_func))((void *)xdp,(struct bpf_insn *)(& prog->__anonCompField_bpf_prog_174.insnsi));
      {
        #line 711 
        void *__vpp_verify = (void *)0;
        #line 711 
        void *tmp_2 = __vpp_verify;
      }
      #line 712 
      ldv_inline_asm();
      #line 711 
      stats = ((struct bpf_prog_stats *)tcp_ptr__);
      #line 711 
      u64_stats_update_begin(& stats->syncp);
      #line 711 
      (stats->cnt) ++;
      #line 711 
      stats->nsecs += sched_clock() - start;
      #line 711 
      u64_stats_update_begin(& stats->syncp);
    }
    else 
         #line 711 
         ret = (*(prog->bpf_func))((void *)xdp,(struct bpf_insn *)(& prog->__anonCompField_bpf_prog_174.insnsi));
  }
  #line 711 
  return ret;
}

#line 925 
#line 925 
void bpf_warn_invalid_xdp_action(u32);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/trace/events/xdp.h"
#line 28 
extern struct tracepoint __tracepoint_xdp_exception;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/trace/events/xdp.h"
__inline static void trace_xdp_exception(struct net_device *dev, struct bpf_prog *xdp, u32 act)
{
  #line 28 
  int pscr_ret___0;
  #line 28 
  if ((int)static_key_false(& __tracepoint_xdp_exception.key) != 0) {
    #line 28 
    struct tracepoint_func *________p1;
    #line 28 
    int pscr_ret__;
    #line 28 
    struct tracepoint_func *it_func_ptr;
    #line 28 
    void *it_func;
    #line 28 
    void *__data;
    #line 28 
    int __idx = 0;
    {
      #line 28 
      void *__vpp_verify = (void *)0;
      #line 28 
      void *tmp = __vpp_verify;
    }
    #line 28 
    switch (4UL) {
      #line 28 
      int pfo_ret__;
      #line 28 
      int pfo_ret___0;
      #line 28 
      int pfo_ret___1;
      #line 28 
      int pfo_ret___2;
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret__;
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret___0;
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret___1;
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret___2;
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_size_call_parameter();
      #line 28 
      break;
    }
    #line 28 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 28 
                                                               return;
    {
      #line 28 
      int __ret_warn_on = 0;
      #line 28 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 29 
        ldv_inline_asm();
        #line 30 
        ldv_inline_asm();
      }
      #line 28 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 28 
    __preempt_count_add(1);
    #line 29 
    ldv_inline_asm();
    {
      #line 29 
      union __anonunion___u_4284 __u;
      #line 28 
      __read_once_size((void *)(& __tracepoint_xdp_exception.funcs),(void *)(& __u.__c),8);
      #line 28 
      ________p1 = (__u.__val);
      }
    #line 28 
    it_func_ptr = ________p1;
    #line 28 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 28 
      while (1) {
        #line 28 
        it_func = it_func_ptr->func;
        #line 28 
        __data = it_func_ptr->data;
        #line 28 
        (*((void (*)(void *, struct net_device *, struct bpf_prog *, u32 ))it_func))(__data,dev,xdp,act);
        #line 28 
        it_func_ptr ++;
        #line 29 
        ;
        #line 29 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 28 
                                                break;
      }
    #line 30 
    ldv_inline_asm();
    #line 28 
    __preempt_count_sub(1);
  }
  {
    #line 28 
    void *__vpp_verify_0 = (void *)0;
    #line 28 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 28 
  switch (4UL) {
    #line 28 
    int pfo_ret___5;
    #line 28 
    int pfo_ret___6;
    #line 28 
    int pfo_ret___3;
    #line 28 
    int pfo_ret___4;
    #line 28 
    case (unsigned long)1: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___3;
    #line 28 
    break;
    #line 28 
    case (unsigned long)2: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___4;
    #line 28 
    break;
    #line 28 
    case (unsigned long)4: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___5;
    #line 28 
    break;
    #line 28 
    case (unsigned long)8: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___6;
    #line 28 
    break;
    #line 28 
    default: 
             #line 28 
    ;
    #line 28 
    __bad_size_call_parameter();
    #line 28 
    break;
  }
  #line 28 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 28 
    __rcu_read_lock();
    {
      #line 29 
      union __anonunion___u_4286 __u_0;
      #line 28 
      __read_once_size((void *)(& __tracepoint_xdp_exception.funcs),(void *)(& __u_0.__c),8);
      #line 28 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 28 
        bool __warned;
        #line 28 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 28 
          if (! __warned) {
            #line 28 
            if (rcu_read_lock_sched_held() == 0) {
              #line 28 
              __warned = (_Bool)1;
              #line 28 
              lockdep_rcu_suspicious((char *)"./include/trace/events/xdp.h",28,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 28 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 28 
    __rcu_read_unlock();
  }
  #line 30 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int __tcp_hdrlen(struct tcphdr *th)
{
  #line 31 
  return (unsigned int)((int)th->doff * 4);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff *skb)
{
  #line 36 
  return __tcp_hdrlen(tcp_hdr(skb));
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *inner_tcp_hdr(struct sk_buff *skb)
{
  #line 41 
  return (struct tcphdr *)skb_inner_transport_header(skb);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int inner_tcp_hdrlen(struct sk_buff *skb)
{
  #line 46 
  ;
  #line 46 
  return (unsigned int)((int)inner_tcp_hdr(skb)->doff * 4);
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/udp.h"
__inline static struct udphdr *udp_hdr(struct sk_buff *skb)
{
  #line 23 
  return (struct udphdr *)skb_transport_header(skb);
}

#line 1341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
__inline static __sum16 tcp_v4_check(int len, __be32 saddr, __be32 daddr, __wsum base)
{
  #line 1344 
  return csum_tcpudp_magic(saddr,daddr,(unsigned int)len,(unsigned char)6,base);
}

#line 1929 
#line 1929 
int tcp_gro_complete(struct sk_buff *);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_checksum.h"
__inline static __sum16 tcp_v6_check(int len, struct in6_addr *saddr, struct in6_addr *daddr, __wsum base)
{
  #line 59 
  return csum_ipv6_magic(saddr,daddr,(unsigned int)len,(unsigned char)6,base);
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
__inline static u16 qed_chain_get_prod_idx(struct qed_chain *p_chain)
{
  #line 189 
  return p_chain->u.chain16.prod_idx;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
__inline static u16 qed_chain_get_cons_idx(struct qed_chain *p_chain)
{
  #line 194 
  return p_chain->u.chain16.cons_idx;
}

#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
__inline static u16 qed_chain_get_elem_left(struct qed_chain *p_chain)
{
  #line 204 
  u16 used;
  #line 206 
  used = (unsigned short)((int)p_chain->u.chain16.prod_idx - (int)p_chain->u.chain16.cons_idx);
  #line 209 
  if (p_chain->mode == (unsigned int)QED_CHAIN_MODE_NEXT_PTR) 
                                                              #line 210 
                                                              used = (unsigned short)(((int)((unsigned short)((int)p_chain->u.chain16.cons_idx / (int)p_chain->elem_per_page)) - (int)((unsigned short)((int)p_chain->u.chain16.prod_idx / (int)p_chain->elem_per_page))) + (int)used);
  #line 213 
  return (unsigned short)((int)((unsigned short)p_chain->capacity) - (int)used);
}

#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
__inline static u32 qed_chain_get_page_cnt(struct qed_chain *p_chain)
{
  #line 242 
  return p_chain->page_cnt;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
__inline static void qed_chain_advance_page(struct qed_chain *p_chain, void **p_next_elem, void *idx_to_inc, void *page_to_inc)
{
  #line 264 
  struct qed_chain_next *p_next = (struct qed_chain_next *)0;
  #line 265 
  u32 page_index = 0U;
  #line 267 
  switch ((unsigned int)p_chain->mode) {
    #line 268 
    case (unsigned int)0: 
                          #line 268 
    ;
    #line 269 
    p_next = (struct qed_chain_next *)*p_next_elem;
    #line 270 
    *p_next_elem = p_next->next_virt;
    #line 271 
    if ((unsigned int)p_chain->cnt_type == 0U) 
                                               #line 272 
                                               *((u16 *)idx_to_inc) = (unsigned short)((int)*((u16 *)idx_to_inc) + (int)((unsigned short)p_chain->elem_unusable)); else 
                                                                    #line 274 
                                                                    *((u32 *)idx_to_inc) += (unsigned int)p_chain->elem_unusable;
    #line 275 
    break;
    #line 276 
    case (unsigned int)1: 
                          #line 276 
    ;
    #line 277 
    *p_next_elem = p_chain->p_virt_addr;
    #line 278 
    break;
    #line 280 
    case (unsigned int)2: 
                          #line 280 
    ;
    #line 281 
    if ((unsigned int)p_chain->cnt_type == 0U) {
      #line 282 
      *((u16 *)page_to_inc) = (u16)((int)*((u16 *)page_to_inc) + 1);
      #line 282 
      ;
      #line 282 
      if ((unsigned int)*((u16 *)page_to_inc) == p_chain->page_cnt) 
                                                                    #line 283 
                                                                    *((u16 *)page_to_inc) = (unsigned short)0U;
      #line 284 
      page_index = (unsigned int)*((u16 *)page_to_inc);
    }
    else {
      #line 286 
      (*((u32 *)page_to_inc)) ++;
      #line 286 
      ;
      #line 286 
      if (*((u32 *)page_to_inc) == p_chain->page_cnt) 
                                                      #line 287 
                                                      *((u32 *)page_to_inc) = 0U;
      #line 288 
      page_index = *((u32 *)page_to_inc);
    }
    #line 290 
    *p_next_elem = *(p_chain->pbl.pp_virt_addr_tbl + (unsigned long)page_index);
  }
  #line 292 
  return;
}

#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
__inline static void *qed_chain_produce(struct qed_chain *p_chain)
{
  #line 348 
  void *p_prod_idx;
  #line 348 
  void *p_prod_page_idx;
  #line 348 
  void *p_ret = (void *)0;
  #line 350 
  if ((unsigned int)p_chain->cnt_type == 0U) {
    #line 351 
    if (((int)p_chain->u.chain16.prod_idx & (int)p_chain->elem_per_page_mask) == (int)p_chain->next_page_mask) {
      #line 353 
      p_prod_idx = (void *)(& p_chain->u.chain16.prod_idx);
      #line 354 
      p_prod_page_idx = (void *)(& p_chain->pbl.c.u16.prod_page_idx);
      #line 355 
      qed_chain_advance_page(p_chain,& p_chain->p_prod_elem,p_prod_idx,p_prod_page_idx);
    }
    #line 358 
    p_chain->u.chain16.prod_idx = (u16)((int)p_chain->u.chain16.prod_idx + 1);
  }
  else {
    #line 360 
    if ((p_chain->u.chain32.prod_idx & (unsigned int)p_chain->elem_per_page_mask) == (unsigned int)p_chain->next_page_mask) {
      #line 362 
      p_prod_idx = (void *)(& p_chain->u.chain32.prod_idx);
      #line 363 
      p_prod_page_idx = (void *)(& p_chain->pbl.c.u32.prod_page_idx);
      #line 364 
      qed_chain_advance_page(p_chain,& p_chain->p_prod_elem,p_prod_idx,p_prod_page_idx);
    }
    #line 367 
    (p_chain->u.chain32.prod_idx) ++;
  }
  #line 370 
  p_ret = p_chain->p_prod_elem;
  #line 371 
  p_chain->p_prod_elem = (void *)((u8 *)p_chain->p_prod_elem + (unsigned long)p_chain->elem_size);
  #line 374 
  return p_ret;
}

#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
__inline static void qed_chain_recycle_consumed(struct qed_chain *p_chain)
{
  #line 402 
  if ((unsigned int)p_chain->cnt_type == 0U) {
    #line 402 
    if (((int)p_chain->u.chain16.prod_idx & (int)p_chain->elem_per_page_mask) == (int)p_chain->usable_per_page) 
      #line 402 
      p_chain->u.chain16.prod_idx = (unsigned short)((int)p_chain->u.chain16.prod_idx + (int)((unsigned short)p_chain->elem_unusable));
  }
  else 
    #line 402 
    if ((p_chain->u.chain32.prod_idx & (unsigned int)p_chain->elem_per_page_mask) == (unsigned int)p_chain->usable_per_page) 
      #line 402 
      p_chain->u.chain32.prod_idx += (unsigned int)p_chain->elem_unusable;
  #line 403 
  if ((unsigned int)p_chain->cnt_type == 0U) 
                                             #line 404 
                                             p_chain->u.chain16.prod_idx = (u16)((int)p_chain->u.chain16.prod_idx + 1); else 
                                                                    #line 406 
                                                                    (p_chain->u.chain32.prod_idx) ++;
  #line 407 
  return;
}

#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
__inline static void *qed_chain_consume(struct qed_chain *p_chain)
{
  #line 421 
  void *p_cons_idx;
  #line 421 
  void *p_cons_page_idx;
  #line 421 
  void *p_ret = (void *)0;
  #line 423 
  if ((unsigned int)p_chain->cnt_type == 0U) {
    #line 424 
    if (((int)p_chain->u.chain16.cons_idx & (int)p_chain->elem_per_page_mask) == (int)p_chain->next_page_mask) {
      #line 426 
      p_cons_idx = (void *)(& p_chain->u.chain16.cons_idx);
      #line 427 
      p_cons_page_idx = (void *)(& p_chain->pbl.c.u16.cons_page_idx);
      #line 428 
      qed_chain_advance_page(p_chain,& p_chain->p_cons_elem,p_cons_idx,p_cons_page_idx);
    }
    #line 431 
    p_chain->u.chain16.cons_idx = (u16)((int)p_chain->u.chain16.cons_idx + 1);
  }
  else {
    #line 433 
    if ((p_chain->u.chain32.cons_idx & (unsigned int)p_chain->elem_per_page_mask) == (unsigned int)p_chain->next_page_mask) {
      #line 435 
      p_cons_idx = (void *)(& p_chain->u.chain32.cons_idx);
      #line 436 
      p_cons_page_idx = (void *)(& p_chain->pbl.c.u32.cons_page_idx);
      #line 437 
      qed_chain_advance_page(p_chain,& p_chain->p_cons_elem,p_cons_idx,p_cons_page_idx);
    }
    #line 440 
    (p_chain->u.chain32.cons_idx) ++;
  }
  #line 443 
  p_ret = p_chain->p_cons_elem;
  #line 444 
  p_chain->p_cons_elem = (void *)((u8 *)p_chain->p_cons_elem + (unsigned long)p_chain->elem_size);
  #line 447 
  return p_ret;
}

#line 663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
__inline static void qed_chain_set_prod(struct qed_chain *p_chain, u32 prod_idx, void *p_prod_elem)
{
  #line 666 
  if (p_chain->mode == (unsigned int)QED_CHAIN_MODE_PBL) {
    #line 667 
    u32 cur_prod;
    #line 667 
    u32 page_mask;
    #line 667 
    u32 page_cnt;
    #line 667 
    u32 page_diff;
    #line 669 
    if ((unsigned int)p_chain->cnt_type == 0U) 
                                               #line 669 
                                               cur_prod = (unsigned int)p_chain->u.chain16.prod_idx; else 
                                                                    #line 669 
                                                                    cur_prod = p_chain->u.chain32.prod_idx;
    #line 673 
    page_mask = (unsigned int)(~ ((int)p_chain->elem_per_page_mask));
    #line 682 
    page_diff = (((cur_prod + 4294967295U) & page_mask) - ((prod_idx + 4294967295U) & page_mask)) / (unsigned int)p_chain->elem_per_page;
    #line 686 
    page_cnt = qed_chain_get_page_cnt(p_chain);
    #line 687 
    if ((unsigned int)p_chain->cnt_type == 0U) 
                                               #line 688 
                                               p_chain->pbl.c.u16.prod_page_idx = (unsigned short)((((unsigned int)p_chain->pbl.c.u16.prod_page_idx - page_diff) + page_cnt) % page_cnt); else 
                                                                    #line 692 
                                                                    p_chain->pbl.c.u32.prod_page_idx = ((p_chain->pbl.c.u32.prod_page_idx - page_diff) + page_cnt) % page_cnt;
  }
  #line 697 
  if ((unsigned int)p_chain->cnt_type == 0U) 
                                             #line 698 
                                             p_chain->u.chain16.prod_idx = (unsigned short)prod_idx; else 
                                                                    #line 700 
                                                                    p_chain->u.chain32.prod_idx = prod_idx;
  #line 701 
  p_chain->p_prod_elem = p_prod_elem;
  #line 702 
  return;
}

#line 1365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
__inline static u16 qed_sb_update_sb_idx(struct qed_sb_info *sb_info)
{
  #line 1367 
  u32 prod = 0U;
  #line 1368 
  u16 rc = (unsigned short)0U;
  #line 1370 
  prod = (sb_info->sb_virt)->prod_index & 16777215U;
  #line 1372 
  if (sb_info->sb_ack != prod) {
    #line 1373 
    sb_info->sb_ack = prod;
    #line 1374 
    rc = (unsigned short)((unsigned int)rc | 2U);
  }
  #line 1378 
  return rc;
}

#line 1395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
__inline static void qed_sb_ack(struct qed_sb_info *sb_info, enum igu_int_cmd int_cmd, u8 upd_flg)
{
  #line 1399 
  struct igu_prod_cons_update igu_ack = {.sb_id_and_flags = 0U, .reserved1 = 0U};
  #line 1401 
  igu_ack.sb_id_and_flags = (sb_info->sb_ack | (unsigned int)((int)upd_flg << 24)) | ((unsigned int)int_cmd << 25);
  #line 1408 
  writel(igu_ack.sb_id_and_flags,sb_info->igu_addr);
  #line 1409 
  ldv_inline_asm();
  #line 1410 
  return;
}

#line 1416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
__inline static void __internal_ram_wr(void *p_hwfn, void *addr, int size, u32 *data)
{
  #line 1422 
  unsigned int i;
  #line 1424 
  i = 0U;
  #line 1424 
  while ((unsigned long)i < (unsigned long)size / 4UL) {
    #line 1425 
    writel(*(data + (unsigned long)i),(void *)((u32 *)addr + (unsigned long)i));
    #line 1424 
    i ++;
  }
  #line 1426 
  return;
}

#line 1428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_if.h"
__inline static void internal_ram_wr(void *addr, int size, u32 *data)
{
  #line 1432 
  __internal_ram_wr((void *)0,addr,size,data);
  #line 1433 
  return;
}

#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 1429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
netdev_tx_t qede_start_xmit(struct sk_buff *skb, struct net_device *ndev);
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 1689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
u16 qede_select_queue(struct net_device *dev, struct sk_buff *skb, struct net_device *sb_dev);
#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 1704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
unsigned long long qede_features_check(struct sk_buff *skb, struct net_device *dev, netdev_features_t features);
#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
int qede_alloc_rx_buffer(struct qede_rx_queue *rxq, bool allow_lazy);
#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
int qede_free_tx_pkt(struct qede_dev *edev, struct qede_tx_queue *txq, int *len);
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 1374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
int qede_poll(struct napi_struct *napi, int budget);
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
irqreturn_t qede_msix_fp_int(int irq, void *fp_cookie);
#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
bool qede_has_rx_work(struct qede_rx_queue *rxq);
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
int qede_txq_has_work(struct qede_tx_queue *txq);
#line 566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
void qede_recycle_rx_bd_ring(struct qede_rx_queue *rxq, u8 count);
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
void qede_update_rx_prod(struct qede_dev *edev, struct qede_rx_queue *rxq);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ptp.h"
__inline static void qede_ptp_record_rx_ts(struct qede_dev *edev, union eth_rx_cqe *cqe, struct sk_buff *skb)
{
  #line 52 
  if ((long)(((int)cqe->fast_path_regular.pars_flags.flags & 256) != 0) != 0L) 
    #line 54 
    if ((long)(((int)cqe->fast_path_regular.pars_flags.flags & 128) != 0) != 0L) 
      #line 56 
      qede_ptp_rx_ts(edev,skb);
    else 
      #line 58 
      if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
        #line 58 
        char *tmp;
        #line 58 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 58 
                                                      tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 58 
                                                                    tmp = (char *)"";
        #line 58 
        printk((char *)"\001",(char *)"qede_ptp_record_rx_ts",58,tmp);
      }
  #line 59 
  return;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
int qede_alloc_rx_buffer(struct qede_rx_queue *rxq, bool allow_lazy)
{
  #line 53 
  struct sw_rx_data *sw_rx_data;
  #line 54 
  struct eth_rx_bd *rx_bd;
  #line 55 
  dma_addr_t mapping;
  #line 56 
  struct page *data;
  #line 62 
  if ((int)allow_lazy != 0 && (long)((unsigned int)rxq->filled_buffers > 12U) != 0L) {
    #line 63 
    rxq->filled_buffers = (u16)((int)rxq->filled_buffers - 1);
    #line 64 
    return 0;
  }
  #line 67 
  data = alloc_pages(2592U,0U);
  #line 68 
  if ((long)(data == (struct page *)0) != 0L) 
                                              #line 69 
                                              return -12;
  #line 74 
  mapping = dma_map_page_attrs(rxq->dev,data,0UL,4096UL,(enum dma_data_direction)rxq->data_direction,0UL);
  #line 76 
  if ((long)(dma_mapping_error(rxq->dev,mapping) != 0) != 0L) {
    #line 77 
    __free_pages(data,0U);
    #line 78 
    return -12;
  }
  #line 81 
  sw_rx_data = rxq->sw_rx_ring + ((unsigned long)rxq->sw_rx_prod & (unsigned long)8191U);
  #line 82 
  sw_rx_data->page_offset = 0U;
  #line 83 
  sw_rx_data->data = data;
  #line 84 
  sw_rx_data->mapping = mapping;
  #line 87 
  rx_bd = (struct eth_rx_bd *)qed_chain_produce(& rxq->rx_bd_ring);
  {
    #line 88 
    int __ret_warn_on = rx_bd == (struct eth_rx_bd *)0;
    #line 88 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 89 
      ldv_inline_asm();
      #line 90 
      ldv_inline_asm();
    }
    #line 88 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 89 
  rx_bd->addr.hi = (unsigned int)(mapping >> 32);
  #line 90 
  rx_bd->addr.lo = (unsigned int)mapping + (unsigned int)rxq->rx_headroom;
  #line 93 
  rxq->sw_rx_prod = (u16)((int)rxq->sw_rx_prod + 1);
  #line 94 
  rxq->filled_buffers = (u16)((int)rxq->filled_buffers + 1);
  #line 96 
  return 0;
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
int qede_free_tx_pkt(struct qede_dev *edev, struct qede_tx_queue *txq, int *len)
{
  #line 104 
  struct eth_tx_1st_bd *first_bd;
  #line 105 
  struct eth_tx_bd *tx_data_bd;
  #line 107 
  int nbds;
  #line 109 
  int i;
  #line 102 
  u16 idx = txq->sw_tx_cons;
  #line 103 
  struct sk_buff *skb = (txq->sw_tx_ring.skbs + (unsigned long)idx)->skb;
  #line 106 
  int bds_consumed = 0;
  #line 108 
  bool data_split = (_Bool)(((unsigned long)(txq->sw_tx_ring.skbs + (unsigned long)idx)->flags & 1UL) != 0UL);
  #line 109 
  int split_bd_len = 0;
  #line 111 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    #line 112 
    char *tmp;
    #line 112 
    ;
    #line 112 
    ;
    #line 112 
    ;
    #line 112 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 112 
                                                  tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 112 
                                                                    tmp = (char *)"";
    #line 112 
    printk((char *)"\001",(char *)"qede_free_tx_pkt",112,tmp,(int)idx,(int)txq->sw_tx_cons,(int)txq->sw_tx_prod);
    #line 115 
    return -1;
  }
  #line 118 
  *len = (int)skb->len;
  #line 120 
  first_bd = (struct eth_tx_1st_bd *)qed_chain_consume(& txq->tx_pbl);
  #line 122 
  bds_consumed ++;
  #line 124 
  nbds = (int)first_bd->data.nbds;
  #line 126 
  if ((int)data_split != 0) {
    #line 127 
    struct eth_tx_bd *split = qed_chain_consume(& txq->tx_pbl);
    #line 129 
    split_bd_len = (int)split->nbytes;
    #line 130 
    bds_consumed ++;
  }
  #line 132 
  dma_unmap_single_attrs(& (edev->pdev)->dev,((unsigned long long)first_bd->addr.hi << 32) + (unsigned long long)first_bd->addr.lo,(unsigned long)((int)first_bd->nbytes + split_bd_len),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 136 
  i = 0;
  #line 136 
  while (1) {
    #line 136 
    ;
    #line 136 
    if (! ((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > i)) 
      #line 136 
      break;
    #line 137 
    tx_data_bd = (struct eth_tx_bd *)qed_chain_consume(& txq->tx_pbl);
    #line 139 
    dma_unmap_page_attrs(& (edev->pdev)->dev,((unsigned long long)tx_data_bd->addr.hi << 32) + (unsigned long long)tx_data_bd->addr.lo,(unsigned long)tx_data_bd->nbytes,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 136 
    i ++;
    #line 136 
    bds_consumed ++;
  }
  #line 143 
  while (1) {
    #line 143 
    int tmp_4;
    #line 143 
    tmp_4 = bds_consumed;
    #line 143 
    bds_consumed ++;
    #line 143 
    ;
    #line 143 
    if (! (tmp_4 < nbds)) 
                          #line 143 
                          break;
    #line 144 
    qed_chain_consume(& txq->tx_pbl);
  }
  #line 147 
  dev_kfree_skb_any(skb);
  #line 148 
  (txq->sw_tx_ring.skbs + (unsigned long)idx)->skb = (struct sk_buff *)0;
  #line 149 
  (txq->sw_tx_ring.skbs + (unsigned long)idx)->flags = (unsigned char)0U;
  #line 151 
  return 0;
}

#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static void qede_free_failed_tx_pkt(struct qede_tx_queue *txq, struct eth_tx_1st_bd *first_bd, int nbd, bool data_split)
{
  #line 161 
  struct eth_tx_bd *tx_data_bd;
  #line 162 
  int i;
  #line 159 
  u16 idx = txq->sw_tx_prod;
  #line 160 
  struct sk_buff *skb = (txq->sw_tx_ring.skbs + (unsigned long)idx)->skb;
  #line 162 
  int split_bd_len = 0;
  #line 165 
  qed_chain_set_prod(& txq->tx_pbl,(unsigned int)txq->tx_db.data.bd_prod,(void *)first_bd);
  #line 168 
  first_bd = (struct eth_tx_1st_bd *)qed_chain_produce(& txq->tx_pbl);
  #line 170 
  if ((int)data_split != 0) {
    #line 171 
    struct eth_tx_bd *split = qed_chain_produce(& txq->tx_pbl);
    #line 173 
    split_bd_len = (int)split->nbytes;
    #line 174 
    nbd --;
  }
  #line 177 
  dma_unmap_single_attrs(txq->dev,((unsigned long long)first_bd->addr.hi << 32) + (unsigned long long)first_bd->addr.lo,(unsigned long)((int)first_bd->nbytes + split_bd_len),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 181 
  i = 0;
  #line 181 
  while (i < nbd) {
    #line 182 
    tx_data_bd = (struct eth_tx_bd *)qed_chain_produce(& txq->tx_pbl);
    #line 184 
    if ((unsigned int)tx_data_bd->nbytes != 0U) 
                                                #line 185 
                                                dma_unmap_page_attrs(txq->dev,((unsigned long long)tx_data_bd->addr.hi << 32) + (unsigned long long)tx_data_bd->addr.lo,(unsigned long)tx_data_bd->nbytes,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 181 
    i ++;
  }
  #line 191 
  qed_chain_set_prod(& txq->tx_pbl,(unsigned int)txq->tx_db.data.bd_prod,(void *)first_bd);
  #line 195 
  dev_kfree_skb_any(skb);
  #line 196 
  (txq->sw_tx_ring.skbs + (unsigned long)idx)->skb = (struct sk_buff *)0;
  #line 197 
  (txq->sw_tx_ring.skbs + (unsigned long)idx)->flags = (unsigned char)0U;
  #line 198 
  return;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static u32 qede_xmit_type(struct sk_buff *skb, int *ipv6_ext)
{
  #line 203 
  __be16 l3_proto;
  #line 202 
  u32 rc = 1U;
  #line 205 
  if ((unsigned int)skb->ip_summed != 3U) 
                                          #line 206 
                                          return 0U;
  #line 208 
  l3_proto = vlan_get_protocol(skb);
  #line 209 
  if ((unsigned int)l3_proto == 56710U) {
    #line 209 
    ;
    #line 209 
    if ((unsigned int)ipv6_hdr(skb)->nexthdr == 41U) 
                                                     #line 211 
                                                     *ipv6_ext = 1;
  }
  #line 213 
  if ((unsigned int)skb->encapsulation != 0U) {
    #line 214 
    rc |= 4U;
    #line 215 
    if ((int)skb_is_gso(skb) != 0) {
      #line 216 
      unsigned short gso_type = (unsigned short)((struct skb_shared_info *)skb_end_pointer(skb))->gso_type;
      #line 218 
      if (((int)gso_type & 2048) != 0 || ((int)gso_type & 128) != 0) 
        #line 220 
        rc |= 8U;
      #line 222 
      rc |= 2U;
      #line 223 
      return rc;
    }
  }
  #line 227 
  if ((int)skb_is_gso(skb) != 0) 
                                 #line 228 
                                 rc |= 2U;
  #line 230 
  return rc;
}

#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static void qede_set_params_for_ipv6_ext(struct sk_buff *skb, struct eth_tx_2nd_bd *second_bd, struct eth_tx_3rd_bd *third_bd)
{
  #line 237 
  u8 l4_proto;
  #line 238 
  u16 bd2_bits1 = (unsigned short)0U;
  #line 238 
  u16 bd2_bits2 = (unsigned short)0U;
  #line 240 
  bd2_bits1 = (unsigned short)((unsigned int)bd2_bits1 | 4096U);
  #line 244 
  bd2_bits2 = (unsigned short)((((skb_transport_header(skb) - skb->data) >> 1) & 8191L) | (long)bd2_bits2);
  #line 246 
  bd2_bits1 = bd2_bits1;
  #line 249 
  if ((unsigned int)vlan_get_protocol(skb) == 56710U) {
    #line 250 
    l4_proto = ipv6_hdr(skb)->nexthdr;
  }
  else {
    #line 252 
    l4_proto = ip_hdr(skb)->protocol;
  }
  #line 254 
  if ((unsigned int)l4_proto == 17U) 
                                     #line 255 
                                     bd2_bits1 = (unsigned short)((unsigned int)bd2_bits1 | 16384U);
  #line 257 
  if (third_bd != (struct eth_tx_3rd_bd *)0) {
    #line 261 
    third_bd->data.bitfields = (unsigned short)((unsigned int)third_bd->data.bitfields | ((unsigned int)((unsigned short)(tcp_hdrlen(skb) / 4U)) & 15U));
  }
  #line 263 
  second_bd->data.bitfields1 = bd2_bits1;
  #line 264 
  second_bd->data.bitfields2 = bd2_bits2;
  #line 265 
  return;
}

#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static int map_frag_to_bd(struct qede_tx_queue *txq, skb_frag_t *frag, struct eth_tx_bd *bd)
{
  #line 270 
  dma_addr_t mapping;
  #line 273 
  ;
  #line 273 
  ;
  #line 273 
  mapping = skb_frag_dma_map(txq->dev,frag,0UL,(unsigned long)skb_frag_size(frag),(enum dma_data_direction)DMA_TO_DEVICE);
  #line 275 
  if ((long)(dma_mapping_error(txq->dev,mapping) != 0) != 0L) 
                                                              #line 276 
                                                              return -12;
  {
    #line 279 
    bd->addr.hi = (unsigned int)(mapping >> 32);
    #line 279 
    bd->addr.lo = (unsigned int)mapping;
    #line 279 
    bd->nbytes = (unsigned short)skb_frag_size(frag);
  }
  #line 281 
  return 0;
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static u16 qede_get_skb_hlen(struct sk_buff *skb, bool is_encap_pkt)
{
  #line 286 
  if ((int)is_encap_pkt != 0) {
    #line 288 
    ;
    #line 288 
    return (unsigned short)((skb_inner_transport_header(skb) + (unsigned long)inner_tcp_hdrlen(skb)) - skb->data);
  }
  else {
    #line 291 
    ;
    #line 291 
    return (unsigned short)((skb_transport_header(skb) + (unsigned long)tcp_hdrlen(skb)) - skb->data);
  }
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static bool qede_pkt_req_lin(struct sk_buff *skb, u8 xmit_type)
{
  #line 298 
  int allowed_frags = 17;
  #line 300 
  if (((unsigned long)xmit_type & 2UL) != 0UL) {
    #line 301 
    int hlen;
    #line 303 
    hlen = (int)qede_get_skb_hlen(skb,(_Bool)(((unsigned long)xmit_type & 4UL) != 0UL));
    #line 306 
    ;
    #line 306 
    if (skb_headlen(skb) > (unsigned int)hlen) 
                                               #line 307 
                                               allowed_frags --;
  }
  #line 310 
  ;
  #line 310 
  return (_Bool)((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > allowed_frags);
}

#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
__inline static void qede_update_tx_producer(struct qede_tx_queue *txq)
{
  #line 316 
  ldv_inline_asm();
  #line 317 
  ldv_inline_asm();
  #line 321 
  writel(txq->tx_db.raw,txq->doorbell_addr);
  #line 322 
  ldv_inline_asm();
  #line 323 
  return;
}

#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static int qede_xdp_xmit(struct qede_dev *edev, struct qede_fastpath *fp, struct sw_rx_data *metadata, u16 padding, u16 length)
{
  #line 334 
  struct eth_tx_1st_bd *first_bd;
  #line 336 
  u16 val;
  #line 333 
  struct qede_tx_queue *txq = fp->xdp_tx;
  #line 335 
  u16 idx = txq->sw_tx_prod;
  #line 338 
  if ((unsigned int)qed_chain_get_elem_left(& txq->tx_pbl) == 0U) {
    #line 339 
    (txq->stopped_cnt) ++;
    #line 340 
    return -12;
  }
  #line 343 
  first_bd = (struct eth_tx_1st_bd *)qed_chain_produce(& txq->tx_pbl);
  #line 345 
  memset((void *)first_bd,0,16UL);
  #line 346 
  first_bd->data.bd_flags.bitfields = (unsigned char)1U;
  #line 349 
  val = (unsigned short)((int)length << 2);
  #line 352 
  first_bd->data.bitfields = (unsigned short)((int)first_bd->data.bitfields | (int)val);
  #line 353 
  first_bd->data.nbds = (unsigned char)1U;
  #line 356 
  first_bd->addr.hi = (unsigned int)((metadata->mapping + (unsigned long long)padding) >> 32);
  #line 356 
  first_bd->addr.lo = (unsigned int)metadata->mapping + (unsigned int)padding;
  #line 356 
  first_bd->nbytes = length;
  #line 361 
  dma_sync_single_for_device(& (edev->pdev)->dev,metadata->mapping + (unsigned long long)padding,(unsigned long)length,(enum dma_data_direction)DMA_TO_DEVICE);
  #line 365 
  (txq->sw_tx_ring.xdp + (unsigned long)idx)->page = metadata->data;
  #line 366 
  (txq->sw_tx_ring.xdp + (unsigned long)idx)->mapping = metadata->mapping;
  #line 367 
  txq->sw_tx_prod = (unsigned short)(((int)txq->sw_tx_prod + 1) % (int)txq->num_tx_buffers);
  #line 370 
  fp->xdp_xmit = (unsigned char)1U;
  #line 372 
  return 0;
}

#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
int qede_txq_has_work(struct qede_tx_queue *txq)
{
  #line 377 
  u16 hw_bd_cons;
  #line 378 
  ldv_inline_asm();
  #line 381 
  hw_bd_cons = *(txq->hw_cons_ptr);
  #line 382 
  ;
  #line 382 
  if ((int)qed_chain_get_cons_idx(& txq->tx_pbl) == (int)hw_bd_cons + 1) 
    #line 383 
    return 0;
  #line 385 
  ;
  #line 385 
  return (int)qed_chain_get_cons_idx(& txq->tx_pbl) != (int)hw_bd_cons;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static void qede_xdp_tx_int(struct qede_dev *edev, struct qede_tx_queue *txq)
{
  #line 390 
  u16 hw_bd_cons;
  #line 390 
  u16 idx;
  #line 392 
  hw_bd_cons = *(txq->hw_cons_ptr);
  #line 393 
  ldv_inline_asm();
  #line 395 
  while (1) {
    #line 395 
    ;
    #line 395 
    if (! ((int)qed_chain_get_cons_idx(& txq->tx_pbl) != (int)hw_bd_cons)) 
      #line 395 
      break;
    #line 396 
    qed_chain_consume(& txq->tx_pbl);
    #line 397 
    idx = txq->sw_tx_cons;
    #line 399 
    dma_unmap_page_attrs(& (edev->pdev)->dev,(txq->sw_tx_ring.xdp + (unsigned long)idx)->mapping,4096UL,(enum dma_data_direction)DMA_BIDIRECTIONAL,0UL);
    #line 402 
    __free_pages((txq->sw_tx_ring.xdp + (unsigned long)idx)->page,0U);
    #line 404 
    txq->sw_tx_cons = (unsigned short)(((int)txq->sw_tx_cons + 1) % (int)txq->num_tx_buffers);
    #line 405 
    (txq->xmit_pkts) ++;
  }
  #line 407 
  return;
}

#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static int qede_tx_int(struct qede_dev *edev, struct qede_tx_queue *txq)
{
  #line 412 
  struct netdev_queue *netdev_txq;
  #line 413 
  u16 hw_bd_cons;
  #line 414 
  int rc;
  #line 411 
  unsigned int pkts_compl = 0U;
  #line 411 
  unsigned int bytes_compl = 0U;
  #line 416 
  netdev_txq = netdev_get_tx_queue(edev->ndev,(unsigned int)txq->ndev_txq_id);
  #line 418 
  hw_bd_cons = *(txq->hw_cons_ptr);
  #line 419 
  ldv_inline_asm();
  #line 421 
  while (1) {
    #line 421 
    ;
    #line 421 
    if (! ((int)qed_chain_get_cons_idx(& txq->tx_pbl) != (int)hw_bd_cons)) 
      #line 421 
      break;
    {
      #line 422 
      int len = 0;
      #line 424 
      rc = qede_free_tx_pkt(edev,txq,& len);
      #line 425 
      if (rc != 0) {
        #line 426 
        if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
          #line 426 
          u16 tmp;
          #line 426 
          char *tmp_0;
          #line 426 
          tmp = qed_chain_get_cons_idx(& txq->tx_pbl);
          #line 426 
          ;
          #line 426 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 426 
                                                        tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 426 
                                                                    tmp_0 = (char *)"";
          #line 426 
          printk((char *)"\001",(char *)"qede_tx_int",426,tmp_0,(int)hw_bd_cons,(int)tmp);
        }
        #line 429 
        break;
      }
      #line 432 
      bytes_compl += (unsigned int)len;
      #line 433 
      pkts_compl ++;
      #line 434 
      txq->sw_tx_cons = (unsigned short)(((int)txq->sw_tx_cons + 1) % (int)txq->num_tx_buffers);
      #line 435 
      (txq->xmit_pkts) ++;
    }
  }
  #line 438 
  netdev_tx_completed_queue(netdev_txq,pkts_compl,bytes_compl);
  #line 439 
  ldv_inline_asm();
  #line 451 
  if ((long)((int)netif_tx_queue_stopped(netdev_txq) != 0) != 0L) {
    #line 462 
    int pscr_ret__;
    #line 462 
    __this_cpu_preempt_check((char *)"read");
    {
      #line 462 
      void *__vpp_verify = (void *)0;
      #line 462 
      void *tmp_2 = __vpp_verify;
    }
    #line 462 
    switch (4UL) {
      #line 462 
      int pfo_ret__;
      #line 462 
      int pfo_ret___0;
      #line 462 
      int pfo_ret___1;
      #line 462 
      int pfo_ret___2;
      #line 462 
      case (unsigned long)1: 
                             #line 462 
      ;
      #line 462 
      switch (4UL) {
        #line 462 
        case (unsigned long)1: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        case (unsigned long)2: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        case (unsigned long)4: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        case (unsigned long)8: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        default: 
                 #line 462 
        ;
        #line 462 
        __bad_percpu_size();
      }
      #line 462 
      pscr_ret__ = pfo_ret__;
      #line 462 
      break;
      #line 462 
      case (unsigned long)2: 
                             #line 462 
      ;
      #line 462 
      switch (4UL) {
        #line 462 
        case (unsigned long)1: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        case (unsigned long)2: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        case (unsigned long)4: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        case (unsigned long)8: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        default: 
                 #line 462 
        ;
        #line 462 
        __bad_percpu_size();
      }
      #line 462 
      pscr_ret__ = pfo_ret___0;
      #line 462 
      break;
      #line 462 
      case (unsigned long)4: 
                             #line 462 
      ;
      #line 462 
      switch (4UL) {
        #line 462 
        case (unsigned long)1: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        case (unsigned long)2: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        case (unsigned long)4: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        case (unsigned long)8: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        default: 
                 #line 462 
        ;
        #line 462 
        __bad_percpu_size();
      }
      #line 462 
      pscr_ret__ = pfo_ret___1;
      #line 462 
      break;
      #line 462 
      case (unsigned long)8: 
                             #line 462 
      ;
      #line 462 
      switch (4UL) {
        #line 462 
        case (unsigned long)1: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        case (unsigned long)2: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        case (unsigned long)4: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        case (unsigned long)8: 
                               #line 462 
        ;
        #line 463 
        ldv_inline_asm();
        #line 462 
        break;
        #line 462 
        default: 
                 #line 462 
        ;
        #line 462 
        __bad_percpu_size();
      }
      #line 462 
      pscr_ret__ = pfo_ret___2;
      #line 462 
      break;
      #line 462 
      default: 
               #line 462 
      ;
      #line 462 
      __bad_size_call_parameter();
      #line 462 
      break;
    }
    #line 462 
    ;
    #line 462 
    __netif_tx_lock(netdev_txq,pscr_ret__);
    #line 464 
    if ((int)netif_tx_queue_stopped(netdev_txq) != 0) 
      #line 464 
      if (edev->state == 1U) {
        #line 465 
        if ((unsigned int)qed_chain_get_elem_left(& txq->tx_pbl) > 17U) {
          #line 468 
          netif_tx_wake_queue(netdev_txq);
          #line 469 
          if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 1024U) != 0U) != 0L) {
            #line 469 
            char *tmp_8;
            #line 469 
            if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                          #line 469 
                                                          tmp_8 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 469 
                                                                    tmp_8 = (char *)"";
            #line 469 
            printk((char *)"\001",(char *)"qede_tx_int",469,tmp_8);
          }
        }
      }
    #line 473 
    __netif_tx_unlock(netdev_txq);
  }
  #line 476 
  return 0;
}

#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
bool qede_has_rx_work(struct qede_rx_queue *rxq)
{
  #line 481 
  u16 hw_comp_cons;
  #line 481 
  u16 sw_comp_cons;
  #line 482 
  ldv_inline_asm();
  #line 486 
  hw_comp_cons = *(rxq->hw_cons_ptr);
  #line 487 
  sw_comp_cons = qed_chain_get_cons_idx(& rxq->rx_comp_ring);
  #line 489 
  return (_Bool)((int)hw_comp_cons != (int)sw_comp_cons);
}

#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
__inline static void qede_rx_bd_ring_consume(struct qede_rx_queue *rxq)
{
  #line 494 
  qed_chain_consume(& rxq->rx_bd_ring);
  #line 495 
  rxq->sw_rx_cons = (u16)((int)rxq->sw_rx_cons + 1);
  #line 496 
  return;
}

#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
__inline static void qede_reuse_page(struct qede_rx_queue *rxq, struct sw_rx_data *curr_cons)
{
  #line 505 
  struct sw_rx_data *curr_prod;
  #line 506 
  dma_addr_t new_mapping;
  #line 504 
  struct eth_rx_bd *rx_bd_prod = qed_chain_produce(& rxq->rx_bd_ring);
  #line 508 
  curr_prod = rxq->sw_rx_ring + ((unsigned long)rxq->sw_rx_prod & (unsigned long)8191U);
  #line 509 
  *curr_prod = *curr_cons;
  #line 511 
  new_mapping = curr_prod->mapping + (unsigned long long)curr_prod->page_offset;
  #line 513 
  rx_bd_prod->addr.hi = (unsigned int)(new_mapping >> 32);
  #line 514 
  rx_bd_prod->addr.lo = (unsigned int)new_mapping + (unsigned int)rxq->rx_headroom;
  #line 517 
  rxq->sw_rx_prod = (u16)((int)rxq->sw_rx_prod + 1);
  #line 518 
  curr_cons->data = (struct page *)0;
  #line 519 
  return;
}

#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
void qede_recycle_rx_bd_ring(struct qede_rx_queue *rxq, u8 count)
{
  #line 526 
  struct sw_rx_data *curr_cons;
  #line 528 
  while ((unsigned int)count != 0U) {
    #line 529 
    curr_cons = rxq->sw_rx_ring + ((unsigned long)rxq->sw_rx_cons & (unsigned long)8191U);
    #line 530 
    qede_reuse_page(rxq,curr_cons);
    #line 531 
    qede_rx_bd_ring_consume(rxq);
    #line 528 
    count = (u8)((int)count - 1);
  }
  #line 533 
  return;
}

#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
__inline static int qede_realloc_rx_buffer(struct qede_rx_queue *rxq, struct sw_rx_data *curr_cons)
{
  #line 539 
  curr_cons->page_offset += rxq->rx_buf_seg_size;
  #line 541 
  if (curr_cons->page_offset == 4096U) {
    #line 542 
    if ((long)(qede_alloc_rx_buffer(rxq,(_Bool)1) != 0) != 0L) {
      #line 546 
      curr_cons->page_offset -= rxq->rx_buf_seg_size;
      #line 548 
      return -12;
    }
    #line 551 
    dma_unmap_page_attrs(rxq->dev,curr_cons->mapping,4096UL,(enum dma_data_direction)rxq->data_direction,0UL);
  }
  else {
    #line 558 
    page_ref_inc(curr_cons->data);
    #line 559 
    qede_reuse_page(rxq,curr_cons);
  }
  #line 562 
  return 0;
}

#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
void qede_update_rx_prod(struct qede_dev *edev, struct qede_rx_queue *rxq)
{
  #line 567 
  u16 bd_prod = qed_chain_get_prod_idx(& rxq->rx_bd_ring);
  #line 568 
  u16 cqe_prod = qed_chain_get_prod_idx(& rxq->rx_comp_ring);
  #line 569 
  struct eth_rx_prod_data rx_prods = {.bd_prod = (unsigned short)0U, .cqe_prod = (unsigned short)0};
  #line 572 
  rx_prods.bd_prod = bd_prod;
  #line 573 
  rx_prods.cqe_prod = cqe_prod;
  #line 574 
  ldv_inline_asm();
  #line 581 
  internal_ram_wr(rxq->hw_rxq_prod_addr,4,(u32 *)(& rx_prods));
  #line 583 
  return;
}

#line 585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static void qede_get_rxhash(struct sk_buff *skb, u8 bitfields, __le32 rss_hash)
{
  #line 588 
  enum rss_hash_type htype;
  #line 587 
  enum pkt_hash_types hash_type = PKT_HASH_TYPE_NONE;
  #line 589 
  u32 hash = 0U;
  #line 591 
  htype = (enum rss_hash_type)((int)bitfields & 7);
  #line 592 
  if (htype != (unsigned int)RSS_HASH_TYPE_DEFAULT) {
    #line 593 
    if (htype == (unsigned int)RSS_HASH_TYPE_IPV4 || htype == (unsigned int)RSS_HASH_TYPE_IPV6) 
      #line 593 
      hash_type = PKT_HASH_TYPE_L3; else 
                                         #line 593 
                                         hash_type = PKT_HASH_TYPE_L4;
    #line 596 
    hash = rss_hash;
  }
  #line 598 
  skb_set_hash(skb,hash,hash_type);
  #line 599 
  return;
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static void qede_set_skb_csum(struct sk_buff *skb, u8 csum_flag)
{
  #line 603 
  skb_checksum_none_assert(skb);
  #line 605 
  if (((unsigned long)csum_flag & 2UL) != 0UL) 
                                               #line 606 
                                               skb->ip_summed = (unsigned char)1U;
  #line 608 
  if (((unsigned long)csum_flag & 4UL) != 0UL) {
    #line 609 
    skb->csum_level = (unsigned char)1U;
    #line 610 
    skb->encapsulation = (unsigned char)1U;
  }
  #line 612 
  return;
}

#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
__inline static void qede_skb_receive(struct qede_dev *edev, struct qede_fastpath *fp, struct qede_rx_queue *rxq, struct sk_buff *skb, u16 vlan_tag)
{
  #line 619 
  if ((unsigned int)vlan_tag != 0U) 
                                    #line 620 
                                    __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vlan_tag));
  #line 622 
  napi_gro_receive(& fp->napi,skb);
  #line 623 
  return;
}

#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static void qede_set_gro_params(struct qede_dev *edev, struct sk_buff *skb, struct eth_fast_path_rx_tpa_start_cqe *cqe)
{
  #line 629 
  u16 parsing_flags = cqe->pars_flags.flags;
  #line 631 
  if (((int)parsing_flags & 3) == 2) {
    #line 633 
    ((struct skb_shared_info *)skb_end_pointer(skb))->gso_type = 16U;
  }
  else {
    #line 635 
    ((struct skb_shared_info *)skb_end_pointer(skb))->gso_type = 1U;
  }
  #line 637 
  ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size = (unsigned short)((int)cqe->len_on_first_bd - (int)((unsigned short)cqe->header_len));
  #line 639 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static int qede_fill_frag_skb(struct qede_dev *edev, struct qede_rx_queue *rxq, u8 tpa_agg_index, u16 len_on_bd)
{
  #line 654 
  u8 tmp;
  #line 645 
  struct sw_rx_data *current_bd = rxq->sw_rx_ring + ((unsigned long)rxq->sw_rx_cons & (unsigned long)8191U);
  #line 647 
  struct qede_agg_info *tpa_info = & rxq->tpa_info[(int)tpa_agg_index];
  #line 648 
  struct sk_buff *skb = tpa_info->skb;
  #line 650 
  if ((long)((unsigned int)tpa_info->state != 1U) != 0L) 
                                                         #line 651 
                                                         goto out;
  #line 654 
  ;
  #line 654 
  ;
  #line 654 
  ;
  #line 654 
  tmp = tpa_info->frag_id;
  #line 654 
  tpa_info->frag_id = (u8)((int)tpa_info->frag_id + 1);
  #line 654 
  ;
  #line 654 
  ;
  #line 654 
  skb_fill_page_desc(skb,(int)tmp,current_bd->data,(int)(current_bd->page_offset + (unsigned int)rxq->rx_headroom),(int)len_on_bd);
  #line 659 
  if ((long)(qede_realloc_rx_buffer(rxq,current_bd) != 0) != 0L) {
    #line 663 
    page_ref_inc(current_bd->data);
    #line 664 
    goto out;
  }
  #line 667 
  qede_rx_bd_ring_consume(rxq);
  #line 669 
  skb->data_len += (unsigned int)len_on_bd;
  #line 670 
  skb->truesize += rxq->rx_buf_seg_size;
  #line 671 
  skb->len += (unsigned int)len_on_bd;
  #line 673 
  return 0;
  #line 675 
  out: 
       #line 675 
  ;
  #line 676 
  tpa_info->state = (unsigned char)2U;
  #line 677 
  qede_recycle_rx_bd_ring(rxq,(unsigned char)1);
  #line 679 
  return -12;
}

#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static bool qede_tunn_exist(u16 flag)
{
  #line 684 
  return (_Bool)(((int)flag & 2048) != 0);
}

#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static u8 qede_check_tunn_csum(u16 flag)
{
  #line 690 
  u16 csum_flag = (unsigned short)0U;
  #line 691 
  u8 tcsum = (unsigned char)0U;
  #line 693 
  if (((int)flag & 16384) != 0) 
                                #line 695 
                                csum_flag = (unsigned short)((unsigned int)csum_flag | 32768U);
  #line 698 
  if (((int)flag & 64) != 0) {
    #line 700 
    csum_flag = (unsigned short)((unsigned int)csum_flag | 1024U);
    #line 702 
    tcsum = (unsigned char)4U;
  }
  #line 705 
  csum_flag = (unsigned short)((unsigned int)csum_flag | 8704U);
  #line 710 
  if ((unsigned int)((int)csum_flag & (int)flag) != 0U) 
                                                        #line 711 
                                                        return (unsigned char)1U;
  #line 713 
  return (unsigned char)((unsigned int)tcsum | 2U);
}

#line 717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
__inline static struct sk_buff *qede_build_skb(struct qede_rx_queue *rxq, struct sw_rx_data *bd, u16 len, u16 pad)
{
  #line 720 
  struct sk_buff *skb;
  #line 721 
  void *buf;
  #line 723 
  buf = lowmem_page_address(bd->data) + (unsigned long)bd->page_offset;
  #line 724 
  skb = build_skb(buf,rxq->rx_buf_seg_size);
  #line 726 
  skb_reserve(skb,(int)pad);
  #line 727 
  skb_put(skb,(unsigned int)len);
  #line 729 
  return skb;
}

#line 733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static struct sk_buff *qede_tpa_rx_build_skb(struct qede_dev *edev, struct qede_rx_queue *rxq, struct sw_rx_data *bd, u16 len, u16 pad, bool alloc_skb)
{
  #line 738 
  struct sk_buff *skb;
  #line 740 
  skb = qede_build_skb(rxq,bd,(unsigned short)((int)len),(unsigned short)((int)pad));
  #line 741 
  bd->page_offset += rxq->rx_buf_seg_size;
  #line 743 
  if (bd->page_offset == 4096U) {
    #line 744 
    if ((long)(qede_alloc_rx_buffer(rxq,(_Bool)1) != 0) != 0L) {
      #line 745 
      if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
        #line 745 
        char *tmp;
        #line 745 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 745 
                                                      tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 745 
                                                                    tmp = (char *)"";
        #line 745 
        printk((char *)"\001",(char *)"qede_tpa_rx_build_skb",745,tmp);
      }
      #line 747 
      bd->page_offset -= rxq->rx_buf_seg_size;
      #line 748 
      page_ref_inc(bd->data);
      #line 749 
      dev_kfree_skb_any(skb);
      #line 750 
      return (struct sk_buff *)0;
    }
  }
  else {
    #line 753 
    page_ref_inc(bd->data);
    #line 754 
    qede_reuse_page(rxq,bd);
  }
  #line 758 
  qede_rx_bd_ring_consume(rxq);
  #line 760 
  return skb;
}

#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static struct sk_buff *qede_rx_build_skb(struct qede_dev *edev, struct qede_rx_queue *rxq, struct sw_rx_data *bd, u16 len, u16 pad)
{
  #line 768 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 774 
  if ((unsigned int)((int)len + (int)pad) <= edev->rx_copybreak) {
    #line 775 
    unsigned int offset = bd->page_offset + (unsigned int)pad;
    #line 777 
    skb = netdev_alloc_skb(edev->ndev,256U);
    #line 778 
    if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                  #line 779 
                                                  return (struct sk_buff *)0;
    #line 781 
    skb_reserve(skb,(int)pad);
    #line 782 
    ;
    #line 782 
    ;
    #line 782 
    ;
    #line 782 
    skb_put_data(skb,lowmem_page_address(bd->data) + (unsigned long)offset,(unsigned int)len);
    #line 783 
    qede_reuse_page(rxq,bd);
    #line 784 
    goto out;
  }
  #line 787 
  skb = qede_build_skb(rxq,bd,(unsigned short)((int)len),(unsigned short)((int)pad));
  #line 789 
  if ((long)(qede_realloc_rx_buffer(rxq,bd) != 0) != 0L) {
    #line 794 
    page_ref_inc(bd->data);
    #line 795 
    dev_kfree_skb_any(skb);
    #line 796 
    return (struct sk_buff *)0;
  }
  #line 798 
  out: 
       #line 798 
  ;
  #line 800 
  qede_rx_bd_ring_consume(rxq);
  #line 802 
  return skb;
}

#line 805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static void qede_tpa_start(struct qede_dev *edev, struct qede_rx_queue *rxq, struct eth_fast_path_rx_tpa_start_cqe *cqe)
{
  #line 810 
  struct sw_rx_data *sw_rx_data_cons;
  #line 811 
  u16 pad;
  #line 809 
  struct qede_agg_info *tpa_info = & rxq->tpa_info[(int)cqe->tpa_agg_index];
  #line 813 
  sw_rx_data_cons = rxq->sw_rx_ring + ((unsigned long)rxq->sw_rx_cons & (unsigned long)8191U);
  #line 814 
  pad = (unsigned short)((int)((unsigned short)cqe->placement_offset) + (int)rxq->rx_headroom);
  #line 816 
  tpa_info->skb = qede_tpa_rx_build_skb(edev,rxq,sw_rx_data_cons,(unsigned short)((int)cqe->len_on_first_bd),(unsigned short)((int)pad),(_Bool)0);
  #line 819 
  tpa_info->buffer.page_offset = sw_rx_data_cons->page_offset;
  #line 820 
  tpa_info->buffer.mapping = sw_rx_data_cons->mapping;
  #line 822 
  if ((long)(tpa_info->skb == (struct sk_buff *)0) != 0L) {
    #line 823 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 823 
      char *tmp;
      #line 823 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 823 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 823 
                                                                    tmp = (char *)"";
      #line 823 
      printk((char *)"\001",(char *)"qede_tpa_start",823,tmp);
    }
    #line 829 
    tpa_info->tpa_start_fail = (_Bool)1;
    #line 830 
    qede_rx_bd_ring_consume(rxq);
    #line 831 
    tpa_info->state = (unsigned char)2U;
    #line 832 
    goto cons_buf;
  }
  #line 835 
  tpa_info->frag_id = (unsigned char)0U;
  #line 836 
  tpa_info->state = (unsigned char)1U;
  #line 838 
  if ((((int)cqe->pars_flags.flags >> 5) & 1) != 0) 
                                                    #line 841 
                                                    tpa_info->vlan_tag = cqe->vlan_tag; else 
                                                                    #line 843 
                                                                    tpa_info->vlan_tag = (unsigned short)0U;
  #line 845 
  qede_get_rxhash(tpa_info->skb,(unsigned char)((int)cqe->bitfields),cqe->rss_hash);
  #line 848 
  qede_set_gro_params(edev,tpa_info->skb,cqe);
  #line 850 
  cons_buf: 
            #line 850 
  ;
  #line 851 
  if ((long)((unsigned int)cqe->ext_bd_len_list[0] != 0U) != 0L) 
                                                                 #line 852 
                                                                 qede_fill_frag_skb(edev,rxq,(unsigned char)((int)cqe->tpa_agg_index),(unsigned short)((int)cqe->ext_bd_len_list[0]));
  #line 855 
  if ((long)((unsigned int)cqe->ext_bd_len_list[1] != 0U) != 0L) {
    #line 856 
    char *tmp_0;
    #line 856 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 856 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 856 
                                                                    tmp_0 = (char *)"";
    #line 856 
    printk((char *)"\001",(char *)"qede_tpa_start",856,tmp_0);
    #line 858 
    tpa_info->state = (unsigned char)2U;
  }
  #line 860 
  return;
}

#line 863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static void qede_gro_ip_csum(struct sk_buff *skb)
{
  #line 866 
  struct tcphdr *th;
  #line 865 
  struct iphdr *iph = ip_hdr(skb);
  #line 868 
  skb_set_transport_header(skb,20);
  #line 869 
  th = tcp_hdr(skb);
  #line 871 
  ;
  #line 871 
  ;
  #line 871 
  ;
  #line 871 
  th->check = (unsigned short)(~ ((int)tcp_v4_check((int)(skb->len - (unsigned int)skb_transport_offset(skb)),
                     iph->saddr,iph->daddr,0U)));
  #line 874 
  tcp_gro_complete(skb);
  #line 875 
  return;
}

#line 877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static void qede_gro_ipv6_csum(struct sk_buff *skb)
{
  #line 880 
  struct tcphdr *th;
  #line 879 
  struct ipv6hdr *iph = ipv6_hdr(skb);
  #line 882 
  skb_set_transport_header(skb,40);
  #line 883 
  th = tcp_hdr(skb);
  #line 885 
  ;
  #line 885 
  ;
  #line 885 
  ;
  #line 885 
  th->check = (unsigned short)(~ ((int)tcp_v6_check((int)(skb->len - (unsigned int)skb_transport_offset(skb)),
                     & iph->saddr,& iph->daddr,0U)));
  #line 887 
  tcp_gro_complete(skb);
  #line 888 
  return;
}

#line 891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static void qede_gro_receive(struct qede_dev *edev, struct qede_fastpath *fp, struct sk_buff *skb, u16 vlan_tag)
{
  #line 901 
  if ((long)(skb->data_len == 0U) != 0L) {
    #line 902 
    ((struct skb_shared_info *)skb_end_pointer(skb))->gso_type = 0U;
    #line 903 
    ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size = (unsigned short)0U;
    #line 904 
    goto send_skb;
  }
  #line 908 
  ;
  #line 908 
  if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U) {
    #line 909 
    skb_reset_network_header(skb);
    #line 911 
    switch ((int)skb->protocol) {
      #line 919 
      unsigned short tmp_1;
      #line 919 
      char *tmp_2;
      #line 912 
      case 8: 
              #line 912 
      ;
      #line 913 
      qede_gro_ip_csum(skb);
      #line 914 
      break;
      #line 915 
      case 56710: 
                  #line 915 
      ;
      #line 916 
      qede_gro_ipv6_csum(skb);
      #line 917 
      break;
      #line 918 
      default: 
               #line 918 
      ;
      #line 919 
      tmp_1 = __builtin_bswap16((unsigned short)((int)skb->protocol));
      #line 919 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 919 
                                                    tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 919 
                                                                    tmp_2 = (char *)"";
      #line 919 
      printk((char *)"\001",(char *)"qede_gro_receive",919,tmp_2,(int)tmp_1);
    }
  }
  #line 926 
  send_skb: 
            #line 926 
  ;
  #line 927 
  skb_record_rx_queue(skb,(unsigned short)((int)(fp->rxq)->rxq_id));
  #line 928 
  qede_skb_receive(edev,fp,fp->rxq,skb,(unsigned short)((int)vlan_tag));
  #line 929 
  return;
}

#line 931  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
__inline static void qede_tpa_cont(struct qede_dev *edev, struct qede_rx_queue *rxq, struct eth_fast_path_rx_tpa_cont_cqe *cqe)
{
  #line 935 
  int i;
  #line 937 
  i = 0;
  #line 937 
  while ((unsigned int)cqe->len_list[i] != 0U) {
    #line 938 
    qede_fill_frag_skb(edev,rxq,(unsigned char)((int)cqe->tpa_agg_index),(unsigned short)((int)cqe->len_list[i]));
    #line 937 
    i ++;
  }
  #line 941 
  if ((long)(i > 1) != 0L) {
    #line 942 
    char *tmp;
    #line 942 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 942 
                                                  tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 942 
                                                                    tmp = (char *)"";
    #line 942 
    printk((char *)"\001",(char *)"qede_tpa_cont",942,tmp);
  }
  #line 943 
  return;
}

#line 946  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static int qede_tpa_end(struct qede_dev *edev, struct qede_fastpath *fp, struct eth_fast_path_rx_tpa_end_cqe *cqe)
{
  #line 951 
  struct qede_agg_info *tpa_info;
  #line 952 
  struct sk_buff *skb;
  #line 953 
  int i;
  #line 950 
  struct qede_rx_queue *rxq = fp->rxq;
  #line 955 
  tpa_info = & rxq->tpa_info[(int)cqe->tpa_agg_index];
  #line 956 
  skb = tpa_info->skb;
  #line 958 
  if (tpa_info->buffer.page_offset == 4096U) 
                                             #line 959 
                                             dma_unmap_page_attrs(rxq->dev,tpa_info->buffer.mapping,4096UL,(enum dma_data_direction)rxq->data_direction,0UL);
  #line 962 
  i = 0;
  #line 962 
  while ((unsigned int)cqe->len_list[i] != 0U) {
    #line 963 
    qede_fill_frag_skb(edev,rxq,(unsigned char)((int)cqe->tpa_agg_index),(unsigned short)((int)cqe->len_list[i]));
    #line 962 
    i ++;
  }
  #line 965 
  if ((long)(i > 1) != 0L) {
    #line 966 
    char *tmp;
    #line 966 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 966 
                                                  tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 966 
                                                                    tmp = (char *)"";
    #line 966 
    printk((char *)"\001",(char *)"qede_tpa_end",966,tmp);
  }
  #line 969 
  if ((long)((unsigned int)tpa_info->state != 1U) != 0L) 
                                                         #line 970 
                                                         goto err;
  #line 973 
  if ((long)((int)cqe->num_of_bds != (int)tpa_info->frag_id + 1) != 0L) {
    #line 974 
    char *tmp_0;
    #line 974 
    ;
    #line 974 
    ;
    #line 974 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 974 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 974 
                                                                    tmp_0 = (char *)"";
    #line 974 
    printk((char *)"\001",(char *)"qede_tpa_end",974,tmp_0,(int)cqe->num_of_bds,(int)tpa_info->frag_id);
  }
  #line 977 
  if ((long)(skb->len != (unsigned int)cqe->total_packet_len) != 0L) {
    #line 978 
    char *tmp_1;
    #line 978 
    ;
    #line 978 
    ;
    #line 978 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 978 
                                                  tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 978 
                                                                    tmp_1 = (char *)"";
    #line 978 
    printk((char *)"\001",(char *)"qede_tpa_end",978,tmp_1,(int)cqe->total_packet_len,skb->len);
  }
  #line 983 
  skb->protocol = eth_type_trans(skb,edev->ndev);
  #line 984 
  skb->ip_summed = (unsigned char)1U;
  #line 989 
  ((struct napi_gro_cb *)(& skb->cb))->count = cqe->num_of_coalesced_segs;
  #line 991 
  qede_gro_receive(edev,fp,skb,(unsigned short)((int)tpa_info->vlan_tag));
  #line 993 
  tpa_info->state = (unsigned char)0U;
  #line 995 
  return 1;
  #line 996 
  err: 
       #line 996 
  ;
  #line 997 
  tpa_info->state = (unsigned char)0U;
  #line 999 
  if ((int)tpa_info->tpa_start_fail != 0) {
    #line 1000 
    qede_reuse_page(rxq,& tpa_info->buffer);
    #line 1001 
    tpa_info->tpa_start_fail = (_Bool)0;
  }
  #line 1004 
  dev_kfree_skb_any(tpa_info->skb);
  #line 1005 
  tpa_info->skb = (struct sk_buff *)0;
  #line 1006 
  return 0;
}

#line 1009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static u8 qede_check_notunn_csum(u16 flag)
{
  #line 1011 
  u16 csum_flag = (unsigned short)0U;
  #line 1012 
  u8 csum = (unsigned char)0U;
  #line 1014 
  if (((int)flag & 64) != 0) {
    #line 1016 
    csum_flag = (unsigned short)((unsigned int)csum_flag | 1024U);
    #line 1018 
    csum = (unsigned char)2U;
  }
  #line 1021 
  csum_flag = (unsigned short)((unsigned int)csum_flag | 512U);
  #line 1024 
  if ((unsigned int)((int)csum_flag & (int)flag) != 0U) 
                                                        #line 1025 
                                                        return (unsigned char)1U;
  #line 1027 
  return csum;
}

#line 1030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static u8 qede_check_csum(u16 flag)
{
  #line 1032 
  if (qede_tunn_exist((unsigned short)((int)flag))) {
    #line 1035 
    return qede_check_tunn_csum((unsigned short)((int)flag));
  }
  else {
    #line 1033 
    return qede_check_notunn_csum((unsigned short)((int)flag));
  }
}

#line 1038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static bool qede_pkt_is_ip_fragmented(struct eth_fast_path_rx_reg_cqe *cqe, u16 flag)
{
  #line 1041 
  u8 tun_pars_flg = cqe->tunnel_pars_flags.flags;
  #line 1043 
  if (((int)tun_pars_flg & 64) != 0 || ((int)flag & 16) != 0) 
                                                              #line 1047 
                                                              return (_Bool)1;
  #line 1049 
  return (_Bool)0;
}

#line 1053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static bool qede_rx_xdp(struct qede_dev *edev, struct qede_fastpath *fp, struct qede_rx_queue *rxq, struct bpf_prog *prog, struct sw_rx_data *bd, struct eth_fast_path_rx_reg_cqe *cqe, u16 *data_offset, u16 *len)
{
  #line 1061 
  struct xdp_buff xdp;
  #line 1062 
  enum xdp_action act;
  #line 1064 
  xdp.data_hard_start = lowmem_page_address(bd->data);
  #line 1065 
  xdp.data = xdp.data_hard_start + (unsigned long)*data_offset;
  #line 1066 
  xdp_set_data_meta_invalid(& xdp);
  #line 1067 
  xdp.data_end = xdp.data + (unsigned long)*len;
  #line 1068 
  xdp.rxq = & rxq->xdp_rxq;
  #line 1074 
  rcu_read_lock();
  #line 1075 
  act = (enum xdp_action)bpf_prog_run_xdp(prog,& xdp);
  #line 1076 
  rcu_read_unlock();
  #line 1079 
  *data_offset = (unsigned short)(xdp.data - xdp.data_hard_start);
  #line 1080 
  *len = (unsigned short)(xdp.data_end - xdp.data);
  #line 1082 
  if (act == (unsigned int)XDP_PASS) 
                                     #line 1083 
                                     return (_Bool)1;
  #line 1086 
  (rxq->xdp_no_pass) ++;
  #line 1088 
  switch ((unsigned int)act) {
    #line 1089 
    case (unsigned int)3: 
                          #line 1089 
    ;
    #line 1091 
    if (qede_alloc_rx_buffer(rxq,(_Bool)1) != 0) {
      #line 1092 
      qede_recycle_rx_bd_ring(rxq,(unsigned char)1);
      #line 1093 
      trace_xdp_exception(edev->ndev,prog,(unsigned int)act);
      #line 1094 
      return (_Bool)0;
    }
    #line 1100 
    if (qede_xdp_xmit(edev,fp,bd,(unsigned short)((int)*data_offset),
                      (unsigned short)((int)*len)) != 0) {
      #line 1101 
      dma_unmap_page_attrs(rxq->dev,bd->mapping,4096UL,(enum dma_data_direction)DMA_BIDIRECTIONAL,0UL);
      #line 1103 
      __free_pages(bd->data,0U);
      #line 1104 
      trace_xdp_exception(edev->ndev,prog,(unsigned int)act);
    }
    #line 1108 
    qede_rx_bd_ring_consume(rxq);
    #line 1109 
    return (_Bool)0;
    #line 1111 
    default: 
             #line 1111 
    ;
    #line 1112 
    bpf_warn_invalid_xdp_action((unsigned int)act);
    #line 1114 
    case (unsigned int)0: 
                          #line 1114 
    ;
    #line 1115 
    trace_xdp_exception(edev->ndev,prog,(unsigned int)act);
    #line 1117 
    case (unsigned int)1: 
                          #line 1117 
    ;
    #line 1118 
    qede_recycle_rx_bd_ring(rxq,(unsigned char)((int)cqe->bd_num));
  }
  #line 1121 
  return (_Bool)0;
}

#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static int qede_rx_build_jumbo(struct qede_dev *edev, struct qede_rx_queue *rxq, struct sk_buff *skb, struct eth_fast_path_rx_reg_cqe *cqe, u16 first_bd_len)
{
  #line 1131 
  struct sw_rx_data *bd;
  #line 1132 
  u16 bd_cons_idx;
  #line 1133 
  u8 num_frags;
  #line 1130 
  u16 pkt_len = cqe->pkt_len;
  #line 1135 
  pkt_len = (unsigned short)((int)pkt_len - (int)first_bd_len);
  #line 1138 
  num_frags = (unsigned char)((unsigned int)cqe->bd_num + 255U);
  #line 1138 
  while ((unsigned int)num_frags != 0U) {
    {
      #line 1139 
      u32 tmp;
      #line 1163 
      __u8 tmp_3;
      #line 1139 
      if (rxq->rx_buf_size < (unsigned int)pkt_len) 
                                                    #line 1139 
                                                    tmp = rxq->rx_buf_size; else 
                                                                    #line 1139 
                                                                    tmp = (unsigned int)pkt_len;
      #line 1139 
      u16 cur_size = (unsigned short)tmp;
      #line 1142 
      if ((long)((unsigned int)cur_size == 0U) != 0L) {
        #line 1143 
        char *tmp_0;
        #line 1143 
        ;
        #line 1143 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1143 
                                                      tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1143 
                                                                    tmp_0 = (char *)"";
        #line 1143 
        printk((char *)"\001",(char *)"qede_rx_build_jumbo",1143,tmp_0,(int)num_frags);
        #line 1146 
        goto out;
      }
      #line 1150 
      if ((long)(qede_alloc_rx_buffer(rxq,(_Bool)1) != 0) != 0L) 
                                                                 #line 1151 
                                                                 goto out;
      #line 1156 
      bd_cons_idx = (unsigned short)((unsigned int)rxq->sw_rx_cons & 8191U);
      #line 1157 
      bd = rxq->sw_rx_ring + (unsigned long)bd_cons_idx;
      #line 1158 
      qede_rx_bd_ring_consume(rxq);
      #line 1160 
      dma_unmap_page_attrs(rxq->dev,bd->mapping,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 1163 
      ;
      #line 1163 
      ;
      #line 1163 
      ;
      #line 1163 
      tmp_3 = ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
      #line 1163 
      ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (__u8)((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1);
      #line 1163 
      ;
      #line 1163 
      skb_fill_page_desc(skb,(int)tmp_3,bd->data,(int)rxq->rx_headroom,(int)cur_size);
      #line 1166 
      skb->truesize += 4096U;
      #line 1167 
      skb->data_len += (unsigned int)cur_size;
      #line 1168 
      skb->len += (unsigned int)cur_size;
      #line 1169 
      pkt_len = (unsigned short)((int)pkt_len - (int)cur_size);
    }
    #line 1138 
    num_frags = (u8)((int)num_frags - 1);
  }
  #line 1172 
  if ((long)((unsigned int)pkt_len != 0U) != 0L) {
    #line 1173 
    char *tmp_4;
    #line 1173 
    ;
    #line 1173 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1173 
                                                  tmp_4 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1173 
                                                                    tmp_4 = (char *)"";
    #line 1173 
    printk((char *)"\001",(char *)"qede_rx_build_jumbo",1173,tmp_4,(int)pkt_len);
  }
  #line 1177 
  out: 
       #line 1177 
  ;
  #line 1178 
  return (int)num_frags;
}

#line 1181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static int qede_rx_process_tpa_cqe(struct qede_dev *edev, struct qede_fastpath *fp, struct qede_rx_queue *rxq, union eth_rx_cqe *cqe, enum eth_rx_cqe_type type)
{
  #line 1187 
  switch ((unsigned int)type) {
    #line 1188 
    case (unsigned int)3: 
                          #line 1188 
    ;
    #line 1189 
    qede_tpa_start(edev,rxq,& cqe->fast_path_tpa_start);
    #line 1190 
    return 0;
    #line 1191 
    case (unsigned int)4: 
                          #line 1191 
    ;
    #line 1192 
    qede_tpa_cont(edev,rxq,& cqe->fast_path_tpa_cont);
    #line 1193 
    return 0;
    #line 1194 
    case (unsigned int)5: 
                          #line 1194 
    ;
    #line 1195 
    return qede_tpa_end(edev,fp,& cqe->fast_path_tpa_end);
    #line 1196 
    default: 
             #line 1196 
    ;
    #line 1197 
    return 0;
  }
}

#line 1201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static int qede_rx_process_cqe(struct qede_dev *edev, struct qede_fastpath *fp, struct qede_rx_queue *rxq)
{
  #line 1206 
  union __anonunion___u_4647 __u;
  #line 1206 
  struct eth_fast_path_rx_reg_cqe *fp_cqe;
  #line 1207 
  u16 len;
  #line 1207 
  u16 pad;
  #line 1207 
  u16 bd_cons_idx;
  #line 1207 
  u16 parse_flag;
  #line 1208 
  enum eth_rx_cqe_type cqe_type;
  #line 1209 
  union eth_rx_cqe *cqe;
  #line 1210 
  struct sw_rx_data *bd;
  #line 1211 
  struct sk_buff *skb;
  #line 1212 
  __le16 flags;
  #line 1213 
  u8 csum_flag;
  #line 1205 
  __read_once_size((void *)(& rxq->xdp_prog),(void *)(& __u.__c),8);
  #line 1205 
  struct bpf_prog *xdp_prog = (__u.__val);
  #line 1216 
  cqe = (union eth_rx_cqe *)qed_chain_consume(& rxq->rx_comp_ring);
  #line 1217 
  cqe_type = (enum eth_rx_cqe_type)cqe->fast_path_regular.type;
  #line 1220 
  if ((long)(cqe_type == (unsigned int)ETH_RX_CQE_TYPE_SLOW_PATH) != 0L) {
    #line 1221 
    struct eth_slow_path_rx_cqe *sp_cqe;
    #line 1223 
    sp_cqe = (struct eth_slow_path_rx_cqe *)cqe;
    #line 1224 
    (*((edev->ops)->eth_cqe_completion))(edev->cdev,(unsigned char)((int)fp->id),sp_cqe);
    #line 1225 
    return 0;
  }
  #line 1229 
  if (cqe_type != (unsigned int)ETH_RX_CQE_TYPE_REGULAR) {
    #line 1230 
    return qede_rx_process_tpa_cqe(edev,fp,rxq,cqe,cqe_type);
  }
  #line 1235 
  bd_cons_idx = (unsigned short)((unsigned int)rxq->sw_rx_cons & 8191U);
  #line 1236 
  bd = rxq->sw_rx_ring + (unsigned long)bd_cons_idx;
  #line 1238 
  fp_cqe = & cqe->fast_path_regular;
  #line 1239 
  len = fp_cqe->len_on_first_bd;
  #line 1240 
  pad = (unsigned short)((int)((unsigned short)fp_cqe->placement_offset) + (int)rxq->rx_headroom);
  #line 1243 
  if (xdp_prog != (struct bpf_prog *)0) {
    #line 1244 
    if (! qede_rx_xdp(edev,fp,rxq,xdp_prog,bd,fp_cqe,& pad,& len)) 
                                                                   #line 1246 
                                                                   return 0;
  }
  #line 1249 
  flags = cqe->fast_path_regular.pars_flags.flags;
  #line 1250 
  parse_flag = flags;
  #line 1252 
  csum_flag = qede_check_csum((unsigned short)((int)parse_flag));
  #line 1253 
  if ((long)((unsigned int)csum_flag == 1U) != 0L) {
    #line 1254 
    if ((int)qede_pkt_is_ip_fragmented(fp_cqe,(unsigned short)((int)parse_flag)) != 0) 
      #line 1255 
      (rxq->rx_ip_frags) ++; else 
                                  #line 1257 
                                  (rxq->rx_hw_errors) ++;
  }
  #line 1263 
  skb = qede_rx_build_skb(edev,rxq,bd,(unsigned short)((int)len),(unsigned short)((int)pad));
  #line 1264 
  if (skb == (struct sk_buff *)0) {
    #line 1265 
    (rxq->rx_alloc_errors) ++;
    #line 1266 
    qede_recycle_rx_bd_ring(rxq,(unsigned char)((int)fp_cqe->bd_num));
    #line 1267 
    return 0;
  }
  #line 1273 
  if ((unsigned int)fp_cqe->bd_num > 1U) {
    #line 1274 
    u16 unmapped_frags = (unsigned short)qede_rx_build_jumbo(edev,rxq,skb,fp_cqe,(unsigned short)((int)len));
    #line 1277 
    if ((long)((unsigned int)unmapped_frags != 0U) != 0L) {
      #line 1278 
      qede_recycle_rx_bd_ring(rxq,(unsigned char)((int)((unsigned char)unmapped_frags)));
      #line 1279 
      dev_kfree_skb_any(skb);
      #line 1280 
      return 0;
    }
  }
  #line 1285 
  skb->protocol = eth_type_trans(skb,edev->ndev);
  #line 1286 
  qede_get_rxhash(skb,(unsigned char)((int)fp_cqe->bitfields),fp_cqe->rss_hash);
  #line 1287 
  qede_set_skb_csum(skb,(unsigned char)((int)csum_flag));
  #line 1288 
  skb_record_rx_queue(skb,(unsigned short)((int)rxq->rxq_id));
  #line 1289 
  qede_ptp_record_rx_ts(edev,cqe,skb);
  #line 1292 
  qede_skb_receive(edev,fp,rxq,skb,(unsigned short)((int)fp_cqe->vlan_tag));
  #line 1294 
  return 1;
}

#line 1297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static int qede_rx_int(struct qede_fastpath *fp, int budget)
{
  #line 1302 
  u16 hw_comp_cons;
  #line 1302 
  u16 sw_comp_cons;
  #line 1299 
  struct qede_rx_queue *rxq = fp->rxq;
  #line 1300 
  struct qede_dev *edev = fp->edev;
  #line 1301 
  int work_done = 0;
  #line 1301 
  int rcv_pkts = 0;
  #line 1304 
  hw_comp_cons = *(rxq->hw_cons_ptr);
  #line 1305 
  sw_comp_cons = qed_chain_get_cons_idx(& rxq->rx_comp_ring);
  #line 1306 
  ldv_inline_asm();
  #line 1315 
  while ((int)sw_comp_cons != (int)hw_comp_cons && work_done < budget) {
    #line 1316 
    rcv_pkts = qede_rx_process_cqe(edev,fp,rxq) + rcv_pkts;
    #line 1317 
    qed_chain_recycle_consumed(& rxq->rx_comp_ring);
    #line 1318 
    sw_comp_cons = qed_chain_get_cons_idx(& rxq->rx_comp_ring);
    #line 1319 
    work_done ++;
  }
  #line 1322 
  rxq->rcv_pkts += (unsigned long long)rcv_pkts;
  #line 1325 
  while ((int)rxq->num_rx_buffers != (int)rxq->filled_buffers) {
    #line 1326 
    if (qede_alloc_rx_buffer(rxq,(_Bool)0) != 0) 
                                                 #line 1327 
                                                 break;
  }
  #line 1330 
  qede_update_rx_prod(edev,rxq);
  #line 1332 
  return work_done;
}

#line 1335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
static bool qede_poll_is_more_work(struct qede_fastpath *fp)
{
  #line 1337 
  qed_sb_update_sb_idx(fp->sb_info);
  #line 1338 
  ldv_inline_asm();
  #line 1351 
  if ((long)(((unsigned long)fp->type & 2UL) != 0UL) != 0L) {
    #line 1352 
    if ((int)qede_has_rx_work(fp->rxq) != 0) 
                                             #line 1353 
                                             return (_Bool)1;
  }
  #line 1355 
  if (((unsigned long)fp->type & 4UL) != 0UL) {
    #line 1356 
    if (qede_txq_has_work(fp->xdp_tx) != 0) 
                                            #line 1357 
                                            return (_Bool)1;
  }
  #line 1359 
  if ((long)(((unsigned long)fp->type & 1UL) != 0UL) != 0L) {
    #line 1360 
    int cos;
    #line 1362 
    cos = 0;
    #line 1362 
    while ((int)(fp->edev)->dev_info.num_tc > cos) {
      #line 1363 
      if (qede_txq_has_work(fp->txq + (unsigned long)cos) != 0) 
                                                                #line 1364 
                                                                return (_Bool)1;
      #line 1362 
      cos ++;
    }
  }
  #line 1368 
  return (_Bool)0;
}

#line 1374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
int qede_poll(struct napi_struct *napi, int budget)
{
  #line 1376 
  void *__mptr;
  #line 1376 
  __mptr = (void *)napi;
  #line 1376 
  struct qede_fastpath *fp = ((struct qede_fastpath *)(__mptr + 18446744073709551600U));
  #line 1378 
  struct qede_dev *edev = fp->edev;
  #line 1379 
  int rx_work_done = 0;
  #line 1381 
  if ((long)(((unsigned long)fp->type & 1UL) != 0UL) != 0L) {
    #line 1382 
    int cos;
    #line 1384 
    cos = 0;
    #line 1384 
    while ((int)(fp->edev)->dev_info.num_tc > cos) {
      #line 1385 
      if (qede_txq_has_work(fp->txq + (unsigned long)cos) != 0) 
                                                                #line 1386 
                                                                qede_tx_int(edev,fp->txq + (unsigned long)cos);
      #line 1384 
      cos ++;
    }
  }
  #line 1390 
  if (((unsigned long)fp->type & 4UL) != 0UL) {
    #line 1390 
    if (qede_txq_has_work(fp->xdp_tx) != 0) 
                                            #line 1391 
                                            qede_xdp_tx_int(edev,fp->xdp_tx);
  }
  #line 1393 
  if ((long)(((unsigned long)fp->type & 2UL) != 0UL) != 0L) {
    #line 1393 
    if ((int)qede_has_rx_work(fp->rxq) != 0) 
                                             #line 1393 
                                             rx_work_done = qede_rx_int(fp,budget); else 
                                                                    #line 1393 
                                                                    rx_work_done = 0;
  }
  else 
       #line 1393 
       rx_work_done = 0;
  #line 1396 
  if (rx_work_done < budget) {
    #line 1397 
    if (qede_poll_is_more_work(fp)) 
                                    #line 1403 
                                    rx_work_done = budget;
    else {
      #line 1398 
      napi_complete_done(napi,rx_work_done);
      #line 1401 
      qed_sb_ack(fp->sb_info,(enum igu_int_cmd)IGU_INT_ENABLE,(unsigned char)1);
    }
  }
  #line 1407 
  if ((unsigned int)fp->xdp_xmit != 0U) {
    #line 1408 
    u16 xdp_prod = qed_chain_get_prod_idx(& (fp->xdp_tx)->tx_pbl);
    #line 1410 
    fp->xdp_xmit = (unsigned char)0U;
    #line 1411 
    (fp->xdp_tx)->tx_db.data.bd_prod = xdp_prod;
    #line 1412 
    qede_update_tx_producer(fp->xdp_tx);
  }
  #line 1415 
  return rx_work_done;
}

#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
irqreturn_t qede_msix_fp_int(int irq, void *fp_cookie)
{
  #line 1420 
  struct qede_fastpath *fp = (struct qede_fastpath *)fp_cookie;
  #line 1422 
  qed_sb_ack(fp->sb_info,(enum igu_int_cmd)IGU_INT_DISABLE,(unsigned char)0);
  #line 1424 
  napi_schedule_irqoff(& fp->napi);
  #line 1425 
  return IRQ_HANDLED;
}

#line 1429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
netdev_tx_t qede_start_xmit(struct sk_buff *skb, struct net_device *ndev)
{
  #line 1432 
  struct netdev_queue *netdev_txq;
  #line 1433 
  struct qede_tx_queue *txq;
  #line 1434 
  struct eth_tx_1st_bd *first_bd;
  #line 1438 
  u16 txq_index;
  #line 1440 
  dma_addr_t mapping;
  #line 1441 
  int rc;
  #line 1442 
  u8 xmit_type;
  #line 1443 
  u16 idx;
  #line 1444 
  u16 hlen;
  #line 1431 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 1435 
  struct eth_tx_2nd_bd *second_bd = (struct eth_tx_2nd_bd *)0;
  #line 1436 
  struct eth_tx_3rd_bd *third_bd = (struct eth_tx_3rd_bd *)0;
  #line 1437 
  struct eth_tx_bd *tx_data_bd = (struct eth_tx_bd *)0;
  #line 1438 
  u16 val = (unsigned short)0U;
  #line 1439 
  u8 nbd = (unsigned char)0U;
  #line 1441 
  int frag_idx = 0;
  #line 1441 
  int ipv6_ext = 0;
  #line 1445 
  bool data_split = (_Bool)0;
  #line 1448 
  txq_index = skb_get_queue_mapping(skb);
  {
    #line 1449 
    int __ret_warn_on = (int)txq_index >= ((int)edev->num_queues - (int)edev->fp_num_rx) * (int)edev->dev_info.num_tc;
    #line 1449 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1450 
      ldv_inline_asm();
      #line 1451 
      ldv_inline_asm();
    }
    #line 1449 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 1450 
  txq = (edev->fp_array + (unsigned long)((int)edev->fp_num_rx + (int)txq_index % ((int)edev->num_queues - (int)edev->fp_num_rx)))->txq + (unsigned long)((int)txq_index / ((int)edev->num_queues - (int)edev->fp_num_rx));
  #line 1451 
  netdev_txq = netdev_get_tx_queue(ndev,(unsigned int)txq_index);
  {
    #line 1453 
    int __ret_warn_on_0 = (unsigned int)qed_chain_get_elem_left(& txq->tx_pbl) <= 17U;
    #line 1453 
    if ((long)(__ret_warn_on_0 != 0) != 0L) {
      #line 1454 
      ldv_inline_asm();
      #line 1455 
      ldv_inline_asm();
    }
    #line 1453 
    long tmp_4 = (long)(__ret_warn_on_0 != 0);
  }
  #line 1455 
  xmit_type = (unsigned char)qede_xmit_type(skb,& ipv6_ext);
  #line 1458 
  if ((int)qede_pkt_req_lin(skb,(unsigned char)((int)xmit_type)) != 0) {
    #line 1459 
    if (skb_linearize(skb) != 0) {
      #line 1460 
      (txq->tx_mem_alloc_err) ++;
      #line 1462 
      dev_kfree_skb_any(skb);
      #line 1463 
      return NETDEV_TX_OK;
    }
  }
  #line 1469 
  idx = txq->sw_tx_prod;
  #line 1470 
  (txq->sw_tx_ring.skbs + (unsigned long)idx)->skb = skb;
  #line 1471 
  first_bd = (struct eth_tx_1st_bd *)qed_chain_produce(& txq->tx_pbl);
  #line 1473 
  memset((void *)first_bd,0,16UL);
  #line 1474 
  first_bd->data.bd_flags.bitfields = (unsigned char)1U;
  #line 1477 
  ;
  #line 1477 
  if ((long)(((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 1) != 0) != 0L) 
    #line 1478 
    qede_ptp_tx_ts(edev,skb);
  #line 1481 
  ;
  #line 1481 
  ;
  #line 1481 
  mapping = dma_map_single_attrs(txq->dev,(void *)skb->data,(unsigned long)skb_headlen(skb),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 1483 
  if ((long)(dma_mapping_error(txq->dev,mapping) != 0) != 0L) {
    #line 1484 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1484 
      char *tmp_7;
      #line 1484 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1484 
                                                    tmp_7 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1484 
                                                                    tmp_7 = (char *)"";
      #line 1484 
      printk((char *)"\001",(char *)"qede_start_xmit",1484,tmp_7);
    }
    #line 1485 
    qede_free_failed_tx_pkt(txq,first_bd,0,(_Bool)0);
    #line 1486 
    qede_update_tx_producer(txq);
    #line 1487 
    return NETDEV_TX_OK;
  }
  #line 1489 
  nbd = (u8)((int)nbd + 1);
  {
    #line 1490 
    first_bd->addr.hi = (unsigned int)(mapping >> 32);
    #line 1490 
    first_bd->addr.lo = (unsigned int)mapping;
    #line 1490 
    first_bd->nbytes = (unsigned short)skb_headlen(skb);
  }
  #line 1495 
  if ((long)((((unsigned long)xmit_type & 2UL) | (unsigned long)ipv6_ext) != 0UL) != 0L) {
    #line 1496 
    second_bd = (struct eth_tx_2nd_bd *)qed_chain_produce(& txq->tx_pbl);
    #line 1498 
    memset((void *)second_bd,0,16UL);
    #line 1500 
    nbd = (u8)((int)nbd + 1);
    #line 1501 
    third_bd = (struct eth_tx_3rd_bd *)qed_chain_produce(& txq->tx_pbl);
    #line 1503 
    memset((void *)third_bd,0,16UL);
    #line 1505 
    nbd = (u8)((int)nbd + 1);
    #line 1507 
    tx_data_bd = (struct eth_tx_bd *)second_bd;
  }
  #line 1510 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 1511 
    first_bd->data.vlan = skb->vlan_tci;
    #line 1512 
    first_bd->data.bd_flags.bitfields = (unsigned char)((unsigned int)first_bd->data.bd_flags.bitfields | 16U);
  }
  #line 1517 
  if (((unsigned long)xmit_type & 1UL) != 0UL) {
    #line 1521 
    first_bd->data.bd_flags.bitfields = (unsigned char)((unsigned int)first_bd->data.bd_flags.bitfields | 8U);
    #line 1524 
    if (((unsigned long)xmit_type & 4UL) != 0UL) {
      #line 1525 
      first_bd->data.bd_flags.bitfields = (unsigned char)((unsigned int)first_bd->data.bd_flags.bitfields | 4U);
      #line 1528 
      val = (unsigned short)((unsigned int)val | 1U);
    }
    #line 1535 
    if ((long)((int)txq->is_legacy != 0) != 0L) 
                                                #line 1536 
                                                val = (unsigned short)((unsigned int)val ^ 1U);
    #line 1542 
    if ((long)(ipv6_ext != 0) != 0L) 
                                     #line 1543 
                                     qede_set_params_for_ipv6_ext(skb,second_bd,third_bd);
  }
  #line 1546 
  if (((unsigned long)xmit_type & 2UL) != 0UL) {
    #line 1547 
    first_bd->data.bd_flags.bitfields = (unsigned char)((unsigned int)first_bd->data.bd_flags.bitfields | 32U);
    #line 1549 
    third_bd->data.lso_mss = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
    #line 1552 
    if ((long)(((unsigned long)xmit_type & 4UL) != 0UL) != 0L) {
      #line 1553 
      first_bd->data.bd_flags.bitfields = (unsigned char)((unsigned int)first_bd->data.bd_flags.bitfields | 64U);
      #line 1556 
      if (((unsigned long)xmit_type & 8UL) != 0UL) {
        #line 1557 
        u8 tmp = (unsigned char)7U;
        #line 1559 
        first_bd->data.bd_flags.bitfields = (unsigned char)((int)first_bd->data.bd_flags.bitfields | (1 << (int)tmp));
      }
      #line 1561 
      hlen = qede_get_skb_hlen(skb,(_Bool)1);
    }
    else {
      #line 1563 
      first_bd->data.bd_flags.bitfields = (unsigned char)((unsigned int)first_bd->data.bd_flags.bitfields | 4U);
      #line 1565 
      hlen = qede_get_skb_hlen(skb,(_Bool)0);
    }
    #line 1569 
    third_bd->data.bitfields = (unsigned short)((unsigned int)third_bd->data.bitfields | 16U);
    #line 1575 
    ;
    #line 1575 
    if ((long)(skb_headlen(skb) > (unsigned int)hlen) != 0L) {
      #line 1576 
      if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 256U) != 0U) != 0L) {
        #line 1576 
        char *tmp_14;
        #line 1576 
        ;
        #line 1576 
        ;
        #line 1576 
        ;
        #line 1576 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1576 
                                                      tmp_14 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1576 
                                                                    tmp_14 = (char *)"";
        #line 1576 
        printk((char *)"\001",(char *)"qede_start_xmit",1576,tmp_14,(int)first_bd->nbytes,first_bd->addr.hi,first_bd->addr.lo);
      }
      #line 1581 
      mapping = (((unsigned long long)first_bd->addr.hi << 32) + (unsigned long long)first_bd->addr.lo) + (unsigned long long)hlen;
      #line 1585 
      tx_data_bd->addr.hi = (unsigned int)(mapping >> 32);
      #line 1585 
      tx_data_bd->addr.lo = (unsigned int)mapping;
      #line 1585 
      tx_data_bd->nbytes = (unsigned short)((int)first_bd->nbytes - (int)hlen);
      #line 1592 
      (txq->sw_tx_ring.skbs + (unsigned long)idx)->flags = (unsigned char)((unsigned int)(txq->sw_tx_ring.skbs + (unsigned long)idx)->flags | 1U);
      #line 1594 
      first_bd->nbytes = hlen;
      #line 1596 
      tx_data_bd = (struct eth_tx_bd *)third_bd;
      #line 1597 
      data_split = (_Bool)1;
    }
  }
  else 
       #line 1600 
       val = (unsigned short)(((int)((unsigned short)skb->len) << 2U) | (int)val);
  #line 1604 
  first_bd->data.bitfields = val;
  #line 1608 
  while (1) {
    #line 1608 
    if (tx_data_bd != (struct eth_tx_bd *)0) {
      #line 1608 
      ;
      #line 1608 
      if (! ((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > frag_idx)) 
        #line 1608 
        break;
    }
    else 
         #line 1608 
         break;
    {
      #line 1609 
      ;
      #line 1609 
      ;
      #line 1609 
      rc = map_frag_to_bd(txq,& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[frag_idx],tx_data_bd);
      #line 1612 
      if (rc != 0) {
        #line 1613 
        qede_free_failed_tx_pkt(txq,first_bd,(int)nbd,(_Bool)((bool)((int)data_split) != 0));
        #line 1614 
        qede_update_tx_producer(txq);
        #line 1615 
        return NETDEV_TX_OK;
      }
      #line 1618 
      if (tx_data_bd == (struct eth_tx_bd *)second_bd) 
                                                       #line 1619 
                                                       tx_data_bd = (struct eth_tx_bd *)third_bd; else 
                                                                    #line 1621 
                                                                    tx_data_bd = (struct eth_tx_bd *)0;
      #line 1623 
      frag_idx ++;
    }
  }
  #line 1627 
  while (1) {
    #line 1627 
    ;
    #line 1627 
    if (! ((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > frag_idx)) 
      #line 1627 
      break;
    {
      #line 1628 
      tx_data_bd = (struct eth_tx_bd *)qed_chain_produce(& txq->tx_pbl);
      #line 1631 
      memset((void *)tx_data_bd,0,16UL);
      #line 1633 
      ;
      #line 1633 
      ;
      #line 1633 
      rc = map_frag_to_bd(txq,& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[frag_idx],tx_data_bd);
      #line 1636 
      if (rc != 0) {
        #line 1637 
        qede_free_failed_tx_pkt(txq,first_bd,(int)nbd,(_Bool)((bool)((int)data_split) != 0));
        #line 1638 
        qede_update_tx_producer(txq);
        #line 1639 
        return NETDEV_TX_OK;
      }
    }
    #line 1627 
    frag_idx ++;
    #line 1627 
    nbd = (u8)((int)nbd + 1);
  }
  #line 1644 
  first_bd->data.nbds = nbd;
  #line 1646 
  netdev_tx_sent_queue(netdev_txq,skb->len);
  #line 1648 
  skb_tx_timestamp(skb);
  #line 1653 
  txq->sw_tx_prod = (unsigned short)(((int)txq->sw_tx_prod + 1) % (int)txq->num_tx_buffers);
  #line 1657 
  txq->tx_db.data.bd_prod = qed_chain_get_prod_idx(& txq->tx_pbl);
  #line 1659 
  if (netdev_xmit_more()) {
    #line 1659 
    if ((int)netif_xmit_stopped(netdev_txq) != 0) 
                                                  #line 1660 
                                                  qede_update_tx_producer(txq);
  }
  else 
       #line 1660 
       qede_update_tx_producer(txq);
  #line 1662 
  if ((long)((unsigned int)qed_chain_get_elem_left(& txq->tx_pbl) <= 17U) != 0L) {
    #line 1664 
    if ((int)netdev_xmit_more() != 0) 
                                      #line 1665 
                                      qede_update_tx_producer(txq);
    #line 1667 
    netif_tx_stop_queue(netdev_txq);
    #line 1668 
    (txq->stopped_cnt) ++;
    #line 1669 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 256U) != 0U) != 0L) {
      #line 1669 
      char *tmp_25;
      #line 1669 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1669 
                                                    tmp_25 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1669 
                                                                    tmp_25 = (char *)"";
      #line 1669 
      printk((char *)"\001",(char *)"qede_start_xmit",1669,tmp_25);
    }
    #line 1670 
    ldv_inline_asm();
    #line 1677 
    if ((unsigned int)qed_chain_get_elem_left(& txq->tx_pbl) > 17U) 
      #line 1678 
      if (edev->state == 1U) {
        #line 1680 
        netif_tx_wake_queue(netdev_txq);
        #line 1681 
        if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 256U) != 0U) != 0L) {
          #line 1681 
          char *tmp_26;
          #line 1681 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 1681 
                                                        tmp_26 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1681 
                                                                    tmp_26 = (char *)"";
          #line 1681 
          printk((char *)"\001",(char *)"qede_start_xmit",1681,tmp_26);
        }
      }
  }
  #line 1686 
  return NETDEV_TX_OK;
}

#line 1689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
u16 qede_select_queue(struct net_device *dev, struct sk_buff *skb, struct net_device *sb_dev)
{
  #line 1693 
  int total_txq;
  #line 1698 
  unsigned int tmp_1;
  #line 1692 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1695 
  total_txq = ((int)edev->num_queues - (int)edev->fp_num_rx) * (int)edev->dev_info.num_tc;
  #line 1698 
  if ((int)edev->num_queues != (int)((unsigned short)edev->fp_num_rx)) {
    #line 1698 
    tmp_1 = (unsigned int)((unsigned short)((int)netdev_pick_tx(dev,skb,(struct net_device *)0) % total_txq));
  }
  else 
       #line 1698 
       tmp_1 = 0U;
  #line 1698 
  return (unsigned short)tmp_1;
}

#line 1704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_fp.c"
unsigned long long qede_features_check(struct sk_buff *skb, struct net_device *dev, netdev_features_t features)
{
  #line 1708 
  if ((unsigned int)skb->encapsulation != 0U) {
    #line 1709 
    u8 l4_proto = (unsigned char)0U;
    #line 1711 
    switch ((int)vlan_get_protocol(skb)) {
      #line 1712 
      case 8: 
              #line 1712 
      ;
      #line 1713 
      l4_proto = ip_hdr(skb)->protocol;
      #line 1714 
      break;
      #line 1715 
      case 56710: 
                  #line 1715 
      ;
      #line 1716 
      l4_proto = ipv6_hdr(skb)->nexthdr;
      #line 1717 
      break;
      #line 1718 
      default: 
               #line 1718 
      ;
      #line 1719 
      return features;
    }
    #line 1726 
    if ((unsigned int)l4_proto == 17U) {
      #line 1728 
      u16 hdrlen;
      #line 1728 
      u16 vxln_port;
      #line 1728 
      u16 gnv_port;
      #line 1727 
      struct qede_dev *edev = netdev_priv(dev);
      #line 1730 
      hdrlen = (unsigned short)48U;
      #line 1731 
      vxln_port = edev->vxlan_dst_port;
      #line 1732 
      gnv_port = edev->geneve_dst_port;
      #line 1734 
      ;
      #line 1734 
      if (skb_inner_mac_header(skb) - skb_transport_header(skb) > (long)hdrlen) 
        #line 1738 
        return features & 18446744056529747941ULL;
      else {
        #line 1735 
        ;
        #line 1735 
        if ((int)__builtin_bswap16((unsigned short)((int)udp_hdr(skb)->dest)) != (int)vxln_port) {
          #line 1736 
          ;
          #line 1736 
          if ((int)__builtin_bswap16((unsigned short)((int)udp_hdr(skb)->dest)) != (int)gnv_port) 
            #line 1738 
            return features & 18446744056529747941ULL;
        }
      }
    }
  }
  #line 1743 
  return features;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_fp.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr)
{
  #line 123 
  ldv_set_bit(nr,addr);
  #line 124 
  return;
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_fp.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr)
{
  #line 130 
  ldv_clear_bit(nr,addr);
  #line 131 
  return;
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_fp.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 186 
  ldv_atomic_inc(v);
  #line 187 
  return;
}

#line 546  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_fp.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 549 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 551 
  spin_lock(lock);
  #line 552 
  return;
}

#line 586  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_fp.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 589 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 591 
  spin_unlock(lock);
  #line 592 
  return;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 215  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_clear_bit_2(long nr, unsigned long *addr);
#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  #line 183 
  return (unsigned int)fls64((unsigned long long)l);
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static unsigned long __roundup_pow_of_two(unsigned long n)
{
  #line 57 
  return 1UL << fls_long(n + 18446744073709551615UL);
}

#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 570 
extern enum system_states system_state;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 229  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void INIT_LIST_HEAD_2(struct list_head *list);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 49 
#line 902  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static int cif_strcmp(char *cs, char *ct);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 243  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static size_t cif_strlen(char *s);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 641  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue_0(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_1(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 726  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device_0(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 681  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue_0(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_1(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 744  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device_0(spinlock_t *lock);
#line 26 
#line 972 
static void cif_mutex_lock_qede_lock_of_qede_dev(struct mutex *lock);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 26 
#line 26 
int ldv_strcmp(char *cs, char *ct);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 979  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_mutex_unlock_qede_lock_of_qede_dev(struct mutex *lock);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 612 
#line 1026  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static bool cif_schedule_delayed_work_0(struct delayed_work *dwork, unsigned long delay);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void *cif_vzalloc_0(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 941  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_vfree_0(void *addr);
#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1018  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1010  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 559  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 580  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags);
#line 1346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 948  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 956  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 2033 
#line 2033 
int pci_num_vf(struct pci_dev *);
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail_0(struct dql *dql)
{
  #line 93 
  union __anonunion___u_5104 __u;
  #line 93 
  union __anonunion___u_5106 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
#line 814 
void bpf_prog_add(struct bpf_prog *, int);
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
#line 147 
int xdp_rxq_info_reg(struct xdp_rxq_info *, struct net_device *, u32);
#line 149 
#line 149 
void xdp_rxq_info_unreg(struct xdp_rxq_info *);
#line 151 
#line 151 
bool xdp_rxq_info_is_reg(struct xdp_rxq_info *);
#line 503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit_2(0L,& n->state);
  #line 517 
  cif_clear_bit_2(3L,& n->state);
  #line 518 
  return;
}

#line 2110 
#line 2110 
void netdev_reset_tc(struct net_device *);
#line 2111 
#line 2111 
int netdev_set_tc_queue(struct net_device *, u8, u16, u16);
#line 2112 
#line 2112 
int netdev_set_num_tc(struct net_device *, u8);
#line 2115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int netdev_get_num_tc(struct net_device *dev)
{
  #line 2117 
  return (int)dev->num_tc;
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2519 
#line 2519 
int register_netdevice_notifier(struct notifier_block *);
#line 2520 
#line 2520 
int unregister_netdevice_notifier(struct notifier_block *);
#line 2568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct net_device *netdev_notifier_info_to_dev(struct netdev_notifier_info *info)
{
  #line 2570 
  return info->dev;
}

#line 2579 
#line 2579 
int call_netdevice_notifiers(unsigned long, struct net_device *);
#line 2679 
#line 994  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_2(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue_0(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_2(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue_0(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail_0(& dev_queue->dql) < 0) != 0L) 
                                                       #line 3318 
                                                       return;
  #line 3320 
  if ((int)test_and_clear_bit(1L,& dev_queue->state) != 0) 
                                                           #line 3321 
                                                           netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3609 
#line 3609 
int netif_get_num_default_rss_queues(void);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock_0(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue_0(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock_0(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue_0(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    int pfo_ret__;
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock_0(txq,cpu);
      #line 4081 
      netif_tx_stop_queue_0(txq);
      #line 4082 
      __netif_tx_unlock_0(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_lock_bh_0(struct net_device *dev)
{
  #line 4094 
  cif_spin_lock_bh_addr_list_lock_of_net_device_0(& dev->addr_list_lock);
  #line 4095 
  return;
}

#line 4102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_unlock_bh_0(struct net_device *dev)
{
  #line 4104 
  cif_spin_unlock_bh_addr_list_lock_of_net_device_0(& dev->addr_list_lock);
  #line 4105 
  return;
}

#line 4131 
#line 986  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1002  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 964  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 36 
#line 36 
int rtnl_is_locked(void);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
#line 340 
int flow_block_cb_setup_simple(struct flow_block_offload *, struct list_head *, flow_setup_cb_t *, void *, void *, bool);
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp_tunnel.h"
__inline static void udp_tunnel_get_rx_info(struct net_device *dev)
{
  {
    #line 130 
    bool __warned;
    #line 130 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 130 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 130 
      __warned = (_Bool)1;
      {
        #line 130 
        int __ret_warn_on = 1;
        #line 130 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 130 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"./include/net/udp_tunnel.h",130);
          #line 131 
          ldv_inline_asm();
          #line 132 
          ldv_inline_asm();
        }
        #line 130 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 130 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 131 
  call_netdevice_notifiers(28UL,dev);
  #line 132 
  return;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
#line 64 
int irq_cpu_rmap_add(struct cpu_rmap *, int);
#line 245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_chain.h"
__inline static dma_addr_t qed_chain_get_pbl_phys(struct qed_chain *p_chain)
{
  #line 247 
  return p_chain->pbl_sp.p_phys_table;
}

#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/qed/qed_eth_if.h"
#line 368 
struct qed_eth_ops *qed_get_eth_ops(void);
#line 369 
#line 369 
void qed_put_eth_ops(void);
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
__inline static bool tc_can_offload(struct net_device *dev)
{
  #line 567 
  return (_Bool)((dev->features & 281474976710656ULL) != 0ULL);
}

#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
__inline static bool tc_can_offload_extack(struct net_device *dev, struct netlink_ext_ack *extack)
{
  #line 573 
  bool can = tc_can_offload(dev);
  #line 575 
  if (! can) {
    #line 576 
    char __msg[37U] = {(char)'T', (char)'C', (char)' ', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)' ', (char)'i', (char)'s', (char)' ', (char)'d', (char)'i', (char)'s', (char)'a', (char)'b', (char)'l', (char)'e', (char)'d', (char)' ', (char)'o', (char)'n', (char)' ', (char)'n', (char)'e', (char)'t', (char)' ', (char)'d', (char)'e', (char)'v', (char)'i', (char)'c', (char)'e', (char)'\000'};
    #line 576 
    struct netlink_ext_ack *__extack = extack;
    #line 576 
    if (__extack != (struct netlink_ext_ack *)0) 
                                                 #line 576 
                                                 __extack->_msg = (char *)(& __msg);
  }
  #line 578 
  return can;
}

#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
__inline static bool tc_cls_can_offload_and_chain0(struct net_device *dev, struct flow_cls_common_offload *common)
{
  #line 585 
  if (! tc_can_offload_extack(dev,common->extack)) 
                                                   #line 586 
                                                   return (_Bool)0;
  #line 587 
  if (common->chain_index != 0U) {
    {
      #line 588 
      char __msg[40U] = {(char)'D', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r', (char)' ', (char)'s', (char)'u', (char)'p', (char)'p', (char)'o', (char)'r', (char)'t', (char)'s', (char)' ', (char)'o', (char)'n', (char)'l', (char)'y', (char)' ', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)' ', (char)'o', (char)'f', (char)' ', (char)'c', (char)'h', (char)'a', (char)'i', (char)'n', (char)' ', (char)'0', (char)'\000'};
      #line 588 
      struct netlink_ext_ack *__extack = common->extack;
      #line 588 
      if (__extack != (struct netlink_ext_ack *)0) 
                                                   #line 588 
                                                   __extack->_msg = (char *)(& __msg);
    }
    #line 590 
    return (_Bool)0;
  }
  #line 592 
  return (_Bool)1;
}

#line 556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
void qede_config_debug(uint debug_0, u32 *p_dp_module, u8 *p_dp_level);
#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede.h"
#line 557 
void qede_set_ethtool_ops(struct net_device *dev);
#line 560 
#line 560 
int qede_change_mtu(struct net_device *ndev, int new_mtu);
#line 561 
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
void qede_fill_by_demand_stats(struct qede_dev *edev);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static char version[54U] = {(char)'Q', (char)'L', (char)'o', (char)'g', (char)'i', (char)'c', (char)' ', (char)'F', (char)'a', (char)'s', (char)'t', (char)'L', (char)'i', (char)'n', (char)'Q', (char)' ', (char)'4', (char)'x', (char)'x', (char)'x', (char)'x', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t', (char)' ', (char)'D', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r', (char)' ', (char)'q', (char)'e', (char)'d', (char)'e', (char)' '};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static uint debug;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static struct qed_eth_ops *qed_ops;
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static struct pci_device_id qede_pci_tbl[10U] = {{.vendor = 4215U, .device = 5684U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4215U, .device = 5734U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4215U, .device = 5686U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4215U, .device = 5700U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4215U, .device = 5716U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4215U, .device = 5718U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4215U, .device = 5732U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}, {.vendor = 4215U, .device = 32880U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4215U, .device = 32912U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
struct pci_device_id __mod_pci__qede_pci_tbl_device_table[10U];
#line 126 
#line 1180 
static int qede_probe(struct pci_dev *pdev, struct pci_device_id *id);
#line 133 
#line 1256 
static void qede_remove(struct pci_dev *pdev);
#line 134 
#line 1261 
static void qede_shutdown(struct pci_dev *pdev);
#line 135 
#line 2388 
static void qede_link_update(void *dev, struct qed_link_output *link);
#line 136 
#line 2414 
static void qede_schedule_recovery_handler(void *dev);
#line 137 
#line 2440 
static void qede_recovery_handler(struct qede_dev *edev);
#line 138 
#line 2522 
static void qede_get_eth_tlv_data(void *dev, void *data);
#line 139 
#line 2496 
static void qede_get_generic_tlv_data(void *dev, struct qed_generic_tlvs *data);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_set_vf_vlan(struct net_device *ndev, int vf, u16 vlan, u8 qos, __be16 vlan_proto)
{
  #line 146 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 148 
  if ((unsigned int)vlan > 4095U) {
    #line 149 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 149 
      char *tmp_0;
      #line 149 
      ;
      #line 149 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 149 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 149 
                                                                    tmp_0 = (char *)"";
      #line 149 
      printk((char *)"\001",(char *)"qede_set_vf_vlan",149,tmp_0,(int)vlan);
    }
    #line 150 
    return -22;
  }
  #line 153 
  if ((unsigned int)vlan_proto != 129U) 
                                        #line 154 
                                        return -93;
  #line 156 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 524288U) != 0U) != 0L) {
    #line 156 
    char *tmp_1;
    #line 156 
    ;
    #line 156 
    ;
    #line 156 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 156 
                                                  tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 156 
                                                                    tmp_1 = (char *)"";
    #line 156 
    printk((char *)"\001",(char *)"qede_set_vf_vlan",156,tmp_1,(int)vlan,vf);
  }
  #line 159 
  return (*(((edev->ops)->iov)->set_vlan))(edev->cdev,
                                          (unsigned short)((int)vlan),vf);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_set_vf_mac(struct net_device *ndev, int vfidx, u8 *mac)
{
  #line 164 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 166 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 524288U) != 0U) != 0L) {
    #line 166 
    char *tmp_0;
    #line 166 
    ;
    #line 166 
    ;
    #line 166 
    ;
    #line 166 
    ;
    #line 166 
    ;
    #line 166 
    ;
    #line 166 
    ;
    #line 166 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 166 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 166 
                                                                    tmp_0 = (char *)"";
    #line 166 
    printk((char *)"\001",(char *)"qede_set_vf_mac",166,tmp_0,(int)*mac,(int)*(mac + 1U),(int)*(mac + 2U),(int)*(mac + 3U),(int)*(mac + 4U),(int)*(mac + 5U),vfidx);
  }
  #line 170 
  if (! is_valid_ether_addr(mac)) {
    #line 171 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 524288U) != 0U) != 0L) {
      #line 171 
      char *tmp_1;
      #line 171 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 171 
                                                    tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 171 
                                                                    tmp_1 = (char *)"";
      #line 171 
      printk((char *)"\001",(char *)"qede_set_vf_mac",171,tmp_1);
    }
    #line 172 
    return -22;
  }
  #line 175 
  return (*(((edev->ops)->iov)->set_mac))(edev->cdev,mac,vfidx);
}

#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_sriov_configure(struct pci_dev *pdev, int num_vfs_param)
{
  #line 182 
  struct qed_update_vport_params *vport_params;
  #line 183 
  int rc;
  #line 180 
  struct qede_dev *edev = (struct qede_dev *)netdev_priv((struct net_device *)pci_get_drvdata(pdev));
  #line 181 
  struct qed_dev_info *qed_info = & edev->dev_info.common;
  #line 185 
  vport_params = (struct qed_update_vport_params *)cif_vzalloc_0(1080UL);
  #line 186 
  if (vport_params == (struct qed_update_vport_params *)0) 
                                                           #line 187 
                                                           return -12;
  #line 188 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 524288U) != 0U) != 0L) {
    #line 188 
    char *tmp_2;
    #line 188 
    ;
    #line 188 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 188 
                                                  tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 188 
                                                                    tmp_2 = (char *)"";
    #line 188 
    printk((char *)"\001",(char *)"qede_sriov_configure",188,tmp_2,num_vfs_param);
  }
  #line 190 
  rc = (*(((edev->ops)->iov)->configure))(edev->cdev,num_vfs_param);
  #line 193 
  if (rc == num_vfs_param) {
    #line 193 
    if ((int)netif_running(edev->ndev) != 0) 
      #line 194 
      if (! qed_info->b_inter_pf_switch) 
        #line 194 
        if ((int)qed_info->tx_switching != 0) {
          #line 195 
          vport_params->vport_id = (unsigned char)0U;
          #line 196 
          vport_params->update_tx_switching_flg = (unsigned char)1U;
          #line 197 
          vport_params->tx_switching_flg = (unsigned char)(num_vfs_param != 0);
          #line 198 
          (*((edev->ops)->vport_update))(edev->cdev,vport_params);
        }
  }
  #line 201 
  cif_vfree_0((void *)vport_params);
  #line 202 
  return rc;
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static struct pci_driver qede_pci_driver = {.name = (char *)"qede", .id_table = (struct pci_device_id *)(& qede_pci_tbl), .probe = & qede_probe, .remove = & qede_remove, .shutdown = & qede_shutdown, .sriov_configure = & qede_sriov_configure};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static struct qed_eth_cb_ops qede_ll_ops = {.common = {.arfs_filter_op = & qede_arfs_filter_op, .link_update = & qede_link_update, .schedule_recovery_handler = & qede_schedule_recovery_handler, .get_generic_tlv_data = & qede_get_generic_tlv_data, .get_protocol_tlv_data = & qede_get_eth_tlv_data}, .force_mac = & qede_force_mac, .ports_update = & qede_udp_ports_update};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_netdev_event(struct notifier_block *this, unsigned long event, void *ptr)
{
  #line 235 
  struct ethtool_drvinfo drvinfo;
  #line 236 
  struct qede_dev *edev;
  #line 234 
  struct net_device *ndev = netdev_notifier_info_to_dev((struct netdev_notifier_info *)ptr);
  #line 238 
  if (event != 11UL && event != 8UL) 
                                     #line 239 
                                     goto done;
  #line 242 
  if ((ndev == (struct net_device *)0 || ndev->ethtool_ops == (struct ethtool_ops *)0) || (ndev->ethtool_ops)->get_drvinfo == (void (*)(struct net_device *, struct ethtool_drvinfo *))0) 
    #line 243 
    goto done;
  #line 245 
  memset((void *)(& drvinfo),0,196UL);
  #line 246 
  (*((ndev->ethtool_ops)->get_drvinfo))(ndev,& drvinfo);
  #line 247 
  if (cif_strcmp((char *)(& drvinfo.driver),(char *)"qede") != 0) 
                                                                  #line 248 
                                                                  goto done;
  #line 249 
  edev = (struct qede_dev *)netdev_priv(ndev);
  #line 251 
  switch (event) {
    #line 252 
    case (unsigned long)11: 
                            #line 252 
    ;
    #line 254 
    if (edev->ops == (struct qed_eth_ops *)0 || (edev->ops)->common == (struct qed_common_ops *)0) 
      #line 255 
      goto done;
    #line 256 
    (*(((edev->ops)->common)->set_name))(edev->cdev,(char *)(& (edev->ndev)->name));
    #line 257 
    break;
    #line 258 
    case (unsigned long)8: 
                           #line 258 
    ;
    #line 259 
    edev = (struct qede_dev *)netdev_priv(ndev);
    #line 260 
    qede_rdma_event_changeaddr(edev);
    #line 261 
    break;
  }
  #line 264 
  done: 
        #line 264 
  ;
  #line 265 
  return 0;
}

#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static struct notifier_block qede_netdev_notifier = {.notifier_call = & qede_netdev_event};
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_init(void)
{
  #line 275 
  int ret;
  #line 277 
  printk((char *)"\001",(char *)(& version));
  #line 279 
  qed_ops = qed_get_eth_ops();
  #line 280 
  if (qed_ops == (struct qed_eth_ops *)0) {
    #line 281 
    printk((char *)"\001");
    #line 282 
    return -22;
  }
  #line 288 
  ret = register_netdevice_notifier(& qede_netdev_notifier);
  #line 289 
  if (ret != 0) {
    #line 290 
    printk((char *)"\001");
    #line 291 
    qed_put_eth_ops();
    #line 292 
    return -22;
  }
  #line 295 
  ret = cif___pci_register_driver(& qede_pci_driver,& __this_module,(char *)"qede");
  #line 296 
  if (ret != 0) {
    #line 297 
    printk((char *)"\001");
    #line 298 
    unregister_netdevice_notifier(& qede_netdev_notifier);
    #line 299 
    qed_put_eth_ops();
    #line 300 
    return -22;
  }
  #line 303 
  return 0;
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_cleanup(void)
{
  #line 308 
  if ((debug & 1073741824U) != 0U) 
                                   #line 309 
                                   printk((char *)"\001");
  #line 311 
  unregister_netdevice_notifier(& qede_netdev_notifier);
  #line 312 
  cif_pci_unregister_driver(& qede_pci_driver);
  #line 313 
  qed_put_eth_ops();
  #line 314 
  return;
}

#line 319 
#line 2357 
static int qede_open(struct net_device *ndev);
#line 320 
#line 2377 
static int qede_close(struct net_device *ndev);
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
void qede_fill_by_demand_stats(struct qede_dev *edev)
{
  #line 325 
  struct qed_eth_stats stats;
  #line 324 
  struct qede_stats_common *p_common = & edev->stats.common;
  #line 327 
  (*((edev->ops)->get_vport_stats))(edev->cdev,& stats);
  #line 329 
  p_common->no_buff_discards = stats.common.no_buff_discards;
  #line 330 
  p_common->packet_too_big_discard = stats.common.packet_too_big_discard;
  #line 331 
  p_common->ttl0_discard = stats.common.ttl0_discard;
  #line 332 
  p_common->rx_ucast_bytes = stats.common.rx_ucast_bytes;
  #line 333 
  p_common->rx_mcast_bytes = stats.common.rx_mcast_bytes;
  #line 334 
  p_common->rx_bcast_bytes = stats.common.rx_bcast_bytes;
  #line 335 
  p_common->rx_ucast_pkts = stats.common.rx_ucast_pkts;
  #line 336 
  p_common->rx_mcast_pkts = stats.common.rx_mcast_pkts;
  #line 337 
  p_common->rx_bcast_pkts = stats.common.rx_bcast_pkts;
  #line 338 
  p_common->mftag_filter_discards = stats.common.mftag_filter_discards;
  #line 339 
  p_common->mac_filter_discards = stats.common.mac_filter_discards;
  #line 340 
  p_common->gft_filter_drop = stats.common.gft_filter_drop;
  #line 342 
  p_common->tx_ucast_bytes = stats.common.tx_ucast_bytes;
  #line 343 
  p_common->tx_mcast_bytes = stats.common.tx_mcast_bytes;
  #line 344 
  p_common->tx_bcast_bytes = stats.common.tx_bcast_bytes;
  #line 345 
  p_common->tx_ucast_pkts = stats.common.tx_ucast_pkts;
  #line 346 
  p_common->tx_mcast_pkts = stats.common.tx_mcast_pkts;
  #line 347 
  p_common->tx_bcast_pkts = stats.common.tx_bcast_pkts;
  #line 348 
  p_common->tx_err_drop_pkts = stats.common.tx_err_drop_pkts;
  #line 349 
  p_common->coalesced_pkts = stats.common.tpa_coalesced_pkts;
  #line 350 
  p_common->coalesced_events = stats.common.tpa_coalesced_events;
  #line 351 
  p_common->coalesced_aborts_num = stats.common.tpa_aborts_num;
  #line 352 
  p_common->non_coalesced_pkts = stats.common.tpa_not_coalesced_pkts;
  #line 353 
  p_common->coalesced_bytes = stats.common.tpa_coalesced_bytes;
  #line 355 
  p_common->rx_64_byte_packets = stats.common.rx_64_byte_packets;
  #line 356 
  p_common->rx_65_to_127_byte_packets = stats.common.rx_65_to_127_byte_packets;
  #line 358 
  p_common->rx_128_to_255_byte_packets = stats.common.rx_128_to_255_byte_packets;
  #line 360 
  p_common->rx_256_to_511_byte_packets = stats.common.rx_256_to_511_byte_packets;
  #line 362 
  p_common->rx_512_to_1023_byte_packets = stats.common.rx_512_to_1023_byte_packets;
  #line 364 
  p_common->rx_1024_to_1518_byte_packets = stats.common.rx_1024_to_1518_byte_packets;
  #line 366 
  p_common->rx_crc_errors = stats.common.rx_crc_errors;
  #line 367 
  p_common->rx_mac_crtl_frames = stats.common.rx_mac_crtl_frames;
  #line 368 
  p_common->rx_pause_frames = stats.common.rx_pause_frames;
  #line 369 
  p_common->rx_pfc_frames = stats.common.rx_pfc_frames;
  #line 370 
  p_common->rx_align_errors = stats.common.rx_align_errors;
  #line 371 
  p_common->rx_carrier_errors = stats.common.rx_carrier_errors;
  #line 372 
  p_common->rx_oversize_packets = stats.common.rx_oversize_packets;
  #line 373 
  p_common->rx_jabbers = stats.common.rx_jabbers;
  #line 374 
  p_common->rx_undersize_packets = stats.common.rx_undersize_packets;
  #line 375 
  p_common->rx_fragments = stats.common.rx_fragments;
  #line 376 
  p_common->tx_64_byte_packets = stats.common.tx_64_byte_packets;
  #line 377 
  p_common->tx_65_to_127_byte_packets = stats.common.tx_65_to_127_byte_packets;
  #line 379 
  p_common->tx_128_to_255_byte_packets = stats.common.tx_128_to_255_byte_packets;
  #line 381 
  p_common->tx_256_to_511_byte_packets = stats.common.tx_256_to_511_byte_packets;
  #line 383 
  p_common->tx_512_to_1023_byte_packets = stats.common.tx_512_to_1023_byte_packets;
  #line 385 
  p_common->tx_1024_to_1518_byte_packets = stats.common.tx_1024_to_1518_byte_packets;
  #line 387 
  p_common->tx_pause_frames = stats.common.tx_pause_frames;
  #line 388 
  p_common->tx_pfc_frames = stats.common.tx_pfc_frames;
  #line 389 
  p_common->brb_truncates = stats.common.brb_truncates;
  #line 390 
  p_common->brb_discards = stats.common.brb_discards;
  #line 391 
  p_common->tx_mac_ctrl_frames = stats.common.tx_mac_ctrl_frames;
  #line 392 
  p_common->link_change_count = stats.common.link_change_count;
  #line 393 
  p_common->ptp_skip_txts = edev->ptp_skip_txts;
  #line 395 
  if (edev->dev_info.common.dev_type == (unsigned int)QED_DEV_TYPE_BB) {
    #line 396 
    struct qede_stats_bb *p_bb = & edev->stats.__anonCompField_qede_stats_209.bb;
    #line 398 
    p_bb->rx_1519_to_1522_byte_packets = stats.__anonCompField_qed_eth_stats_203.bb.rx_1519_to_1522_byte_packets;
    #line 400 
    p_bb->rx_1519_to_2047_byte_packets = stats.__anonCompField_qed_eth_stats_203.bb.rx_1519_to_2047_byte_packets;
    #line 402 
    p_bb->rx_2048_to_4095_byte_packets = stats.__anonCompField_qed_eth_stats_203.bb.rx_2048_to_4095_byte_packets;
    #line 404 
    p_bb->rx_4096_to_9216_byte_packets = stats.__anonCompField_qed_eth_stats_203.bb.rx_4096_to_9216_byte_packets;
    #line 406 
    p_bb->rx_9217_to_16383_byte_packets = stats.__anonCompField_qed_eth_stats_203.bb.rx_9217_to_16383_byte_packets;
    #line 408 
    p_bb->tx_1519_to_2047_byte_packets = stats.__anonCompField_qed_eth_stats_203.bb.tx_1519_to_2047_byte_packets;
    #line 410 
    p_bb->tx_2048_to_4095_byte_packets = stats.__anonCompField_qed_eth_stats_203.bb.tx_2048_to_4095_byte_packets;
    #line 412 
    p_bb->tx_4096_to_9216_byte_packets = stats.__anonCompField_qed_eth_stats_203.bb.tx_4096_to_9216_byte_packets;
    #line 414 
    p_bb->tx_9217_to_16383_byte_packets = stats.__anonCompField_qed_eth_stats_203.bb.tx_9217_to_16383_byte_packets;
    #line 416 
    p_bb->tx_lpi_entry_count = stats.__anonCompField_qed_eth_stats_203.bb.tx_lpi_entry_count;
    #line 417 
    p_bb->tx_total_collisions = stats.__anonCompField_qed_eth_stats_203.bb.tx_total_collisions;
  }
  else {
    #line 419 
    struct qede_stats_ah *p_ah = & edev->stats.__anonCompField_qede_stats_209.ah;
    #line 421 
    p_ah->rx_1519_to_max_byte_packets = stats.__anonCompField_qed_eth_stats_203.ah.rx_1519_to_max_byte_packets;
    #line 423 
    p_ah->tx_1519_to_max_byte_packets = stats.__anonCompField_qed_eth_stats_203.ah.tx_1519_to_max_byte_packets;
  }
  #line 426 
  return;
}

#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
{
  #line 432 
  struct qede_stats_common *p_common;
  #line 431 
  struct qede_dev *edev = netdev_priv(dev);
  #line 434 
  qede_fill_by_demand_stats(edev);
  #line 435 
  p_common = & edev->stats.common;
  #line 437 
  stats->rx_packets = (p_common->rx_ucast_pkts + p_common->rx_mcast_pkts) + p_common->rx_bcast_pkts;
  #line 439 
  stats->tx_packets = (p_common->tx_ucast_pkts + p_common->tx_mcast_pkts) + p_common->tx_bcast_pkts;
  #line 442 
  stats->rx_bytes = (p_common->rx_ucast_bytes + p_common->rx_mcast_bytes) + p_common->rx_bcast_bytes;
  #line 444 
  stats->tx_bytes = (p_common->tx_ucast_bytes + p_common->tx_mcast_bytes) + p_common->tx_bcast_bytes;
  #line 447 
  stats->tx_errors = p_common->tx_err_drop_pkts;
  #line 448 
  stats->multicast = p_common->rx_mcast_pkts + p_common->rx_bcast_pkts;
  #line 450 
  stats->rx_fifo_errors = p_common->no_buff_discards;
  #line 452 
  if (edev->dev_info.common.dev_type == (unsigned int)QED_DEV_TYPE_BB) 
    #line 453 
    stats->collisions = edev->stats.__anonCompField_qede_stats_209.bb.tx_total_collisions;
  #line 454 
  stats->rx_crc_errors = p_common->rx_crc_errors;
  #line 455 
  stats->rx_frame_errors = p_common->rx_align_errors;
  #line 456 
  return;
}

#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_get_vf_config(struct net_device *dev, int vfidx, struct ifla_vf_info *ivi)
{
  #line 462 
  struct qede_dev *edev = netdev_priv(dev);
  #line 464 
  if (edev->ops == (struct qed_eth_ops *)0) 
                                            #line 465 
                                            return -22;
  #line 467 
  return (*(((edev->ops)->iov)->get_config))(edev->cdev,vfidx,ivi);
}

#line 470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_set_vf_rate(struct net_device *dev, int vfidx, int min_tx_rate, int max_tx_rate)
{
  #line 473 
  struct qede_dev *edev = netdev_priv(dev);
  #line 475 
  return (*(((edev->ops)->iov)->set_rate))(edev->cdev,vfidx,
                                          (unsigned int)min_tx_rate,
                                          (unsigned int)max_tx_rate);
}

#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_set_vf_spoofchk(struct net_device *dev, int vfidx, bool val)
{
  #line 481 
  struct qede_dev *edev = netdev_priv(dev);
  #line 483 
  if (edev->ops == (struct qed_eth_ops *)0) 
                                            #line 484 
                                            return -22;
  #line 486 
  return (*(((edev->ops)->iov)->set_spoof))(edev->cdev,vfidx,
                                           (_Bool)((bool)((int)val) != 0));
}

#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_set_vf_link_state(struct net_device *dev, int vfidx, int link_state)
{
  #line 492 
  struct qede_dev *edev = netdev_priv(dev);
  #line 494 
  if (edev->ops == (struct qed_eth_ops *)0) 
                                            #line 495 
                                            return -22;
  #line 497 
  return (*(((edev->ops)->iov)->set_link_state))(edev->cdev,vfidx,link_state);
}

#line 500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_set_vf_trust(struct net_device *dev, int vfidx, bool setting)
{
  #line 502 
  struct qede_dev *edev = netdev_priv(dev);
  #line 504 
  if (edev->ops == (struct qed_eth_ops *)0) 
                                            #line 505 
                                            return -22;
  #line 507 
  return (*(((edev->ops)->iov)->set_trust))(edev->cdev,vfidx,
                                           (_Bool)((bool)((int)setting) != 0));
}

#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
{
  #line 513 
  struct qede_dev *edev = netdev_priv(dev);
  #line 515 
  if (! netif_running(dev)) 
                            #line 516 
                            return -11;
  #line 518 
  switch (cmd) {
    #line 519 
    case 35248: 
                #line 519 
    ;
    #line 520 
    return qede_ptp_hw_ts(edev,ifr);
    #line 521 
    default: 
             #line 521 
    ;
    #line 522 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
      #line 522 
      char *tmp_2;
      #line 522 
      ;
      #line 522 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 522 
                                                    tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 522 
                                                                    tmp_2 = (char *)"";
      #line 522 
      printk((char *)"\001",(char *)"qede_ioctl",522,tmp_2,cmd);
    }
    #line 524 
    return -95;
  }
  #line 527 
  return 0;
}

#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_setup_tc(struct net_device *ndev, u8 num_tc)
{
  #line 533 
  int cos;
  #line 533 
  int count;
  #line 533 
  int offset;
  #line 532 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 535 
  if ((int)edev->dev_info.num_tc < (int)num_tc) 
                                                #line 536 
                                                return -22;
  #line 538 
  netdev_reset_tc(ndev);
  #line 539 
  netdev_set_num_tc(ndev,(unsigned char)((int)num_tc));
  #line 541 
  cos = 0;
  #line 541 
  while ((int)edev->dev_info.num_tc > cos) {
    #line 542 
    count = (int)edev->num_queues - (int)edev->fp_num_rx;
    #line 543 
    offset = ((int)edev->num_queues - (int)edev->fp_num_rx) * cos;
    #line 544 
    netdev_set_tc_queue(ndev,(unsigned char)((int)((unsigned char)cos)),(unsigned short)((int)((unsigned short)count)),(unsigned short)((int)((unsigned short)offset)));
    #line 541 
    cos ++;
  }
  #line 547 
  return 0;
}

#line 551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_set_flower(struct qede_dev *edev, struct flow_cls_offload *f, __be16 proto)
{
  #line 554 
  switch ((unsigned int)f->command) {
    #line 555 
    case (unsigned int)0: 
                          #line 555 
    ;
    #line 556 
    return qede_add_tc_flower_fltr(edev,(unsigned short)((int)proto),f);
    #line 557 
    case (unsigned int)1: 
                          #line 557 
    ;
    #line 558 
    return qede_delete_flow_filter(edev,(unsigned long long)f->cookie);
    #line 559 
    default: 
             #line 559 
    ;
    #line 560 
    return -95;
  }
}

#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_setup_tc_block_cb(enum tc_setup_type type, void *type_data, void *cb_priv)
{
  #line 567 
  struct flow_cls_offload *f;
  #line 568 
  struct qede_dev *edev = (struct qede_dev *)cb_priv;
  #line 570 
  if (! tc_cls_can_offload_and_chain0(edev->ndev,
                                    (struct flow_cls_common_offload *)type_data)) 
    #line 571 
    return -95;
  #line 573 
  switch ((unsigned int)type) {
    #line 574 
    case (unsigned int)2: 
                          #line 574 
    ;
    #line 575 
    f = (struct flow_cls_offload *)type_data;
    #line 576 
    return qede_set_flower(edev,f,(unsigned short)((int)f->common.protocol));
    #line 577 
    default: 
             #line 577 
    ;
    #line 578 
    return -95;
  }
}

#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static struct list_head qede_block_cb_list = {.next = & qede_block_cb_list, .prev = & qede_block_cb_list};
#line 585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_setup_tc_offload(struct net_device *dev, enum tc_setup_type type, void *type_data)
{
  #line 589 
  struct tc_mqprio_qopt *mqprio;
  #line 588 
  struct qede_dev *edev = netdev_priv(dev);
  #line 591 
  switch ((unsigned int)type) {
    #line 592 
    case (unsigned int)5: 
                          #line 592 
    ;
    #line 593 
    return flow_block_cb_setup_simple((struct flow_block_offload *)type_data,
                                   & qede_block_cb_list,
                                   & qede_setup_tc_block_cb,(void *)edev,
                                   (void *)edev,(_Bool)1);
    #line 597 
    case (unsigned int)0: 
                          #line 597 
    ;
    #line 598 
    mqprio = (struct tc_mqprio_qopt *)type_data;
    #line 600 
    mqprio->hw = (unsigned char)1U;
    #line 601 
    return qede_setup_tc(dev,(unsigned char)((int)mqprio->num_tc));
    #line 602 
    default: 
             #line 602 
    ;
    #line 603 
    return -95;
  }
}

#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static struct net_device_ops qede_netdev_ops = {.ndo_open = & qede_open, .ndo_stop = & qede_close, .ndo_start_xmit = & qede_start_xmit, .ndo_features_check = & qede_features_check, .ndo_select_queue = & qede_select_queue, .ndo_set_rx_mode = & qede_set_rx_mode, .ndo_set_mac_address = & qede_set_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & qede_ioctl, .ndo_change_mtu = & qede_change_mtu, .ndo_get_stats64 = & qede_get_stats64, .ndo_vlan_rx_add_vid = & qede_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & qede_vlan_rx_kill_vid, .ndo_set_vf_mac = & qede_set_vf_mac, .ndo_set_vf_vlan = & qede_set_vf_vlan, .ndo_set_vf_rate = & qede_set_vf_rate, .ndo_set_vf_spoofchk = & qede_set_vf_spoofchk, .ndo_set_vf_trust = & qede_set_vf_trust, .ndo_get_vf_config = & qede_get_vf_config, .ndo_set_vf_link_state = & qede_set_vf_link_state, .ndo_setup_tc = & qede_setup_tc_offload, .ndo_rx_flow_steer = & qede_rx_flow_steer, .ndo_fix_features = & qede_fix_features, .ndo_set_features = & qede_set_features, .ndo_udp_tunnel_add = & qede_udp_tunnel_add, .ndo_udp_tunnel_del = & qede_udp_tunnel_del, .ndo_bpf = & qede_xdp};
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static struct net_device_ops qede_netdev_vf_ops = {.ndo_open = & qede_open, .ndo_stop = & qede_close, .ndo_start_xmit = & qede_start_xmit, .ndo_features_check = & qede_features_check, .ndo_select_queue = & qede_select_queue, .ndo_set_rx_mode = & qede_set_rx_mode, .ndo_set_mac_address = & qede_set_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_change_mtu = & qede_change_mtu, .ndo_get_stats64 = & qede_get_stats64, .ndo_vlan_rx_add_vid = & qede_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & qede_vlan_rx_kill_vid, .ndo_fix_features = & qede_fix_features, .ndo_set_features = & qede_set_features, .ndo_udp_tunnel_add = & qede_udp_tunnel_add, .ndo_udp_tunnel_del = & qede_udp_tunnel_del};
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static struct net_device_ops qede_netdev_vf_xdp_ops = {.ndo_open = & qede_open, .ndo_stop = & qede_close, .ndo_start_xmit = & qede_start_xmit, .ndo_features_check = & qede_features_check, .ndo_select_queue = & qede_select_queue, .ndo_set_rx_mode = & qede_set_rx_mode, .ndo_set_mac_address = & qede_set_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_change_mtu = & qede_change_mtu, .ndo_get_stats64 = & qede_get_stats64, .ndo_vlan_rx_add_vid = & qede_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & qede_vlan_rx_kill_vid, .ndo_fix_features = & qede_fix_features, .ndo_set_features = & qede_set_features, .ndo_udp_tunnel_add = & qede_udp_tunnel_add, .ndo_udp_tunnel_del = & qede_udp_tunnel_del, .ndo_bpf = & qede_xdp};
#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static struct qede_dev *qede_alloc_etherdev(struct qed_dev *cdev, struct pci_dev *pdev, struct qed_dev_eth_info *info, u32 dp_module, u8 dp_level)
{
  #line 692 
  struct net_device *ndev;
  #line 693 
  struct qede_dev *edev;
  #line 695 
  ndev = cif_alloc_etherdev_mqs(1504,(unsigned int)((int)info->num_queues * (int)info->num_tc),(unsigned int)info->num_queues);
  #line 698 
  if (ndev == (struct net_device *)0) {
    #line 699 
    printk((char *)"\001");
    #line 700 
    return (struct qede_dev *)0;
  }
  #line 703 
  edev = (struct qede_dev *)netdev_priv(ndev);
  #line 704 
  edev->ndev = ndev;
  #line 705 
  edev->cdev = cdev;
  #line 706 
  edev->pdev = pdev;
  #line 707 
  edev->dp_module = dp_module;
  #line 708 
  edev->dp_level = dp_level;
  #line 709 
  edev->ops = qed_ops;
  #line 710 
  edev->q_num_rx_buffers = (unsigned short)1023U;
  #line 711 
  edev->q_num_tx_buffers = (unsigned short)8191U;
  #line 713 
  if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
    #line 713 
    char *tmp_0;
    #line 713 
    ;
    #line 713 
    ;
    #line 713 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 713 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 713 
                                                                    tmp_0 = (char *)"";
    #line 713 
    printk((char *)"\001",(char *)"qede_alloc_etherdev",713,tmp_0,(int)info->num_queues,(int)info->num_queues);
  }
  #line 716 
  ndev->dev.parent = & pdev->dev;
  #line 718 
  memset((void *)(& edev->stats),0,512UL);
  #line 719 
  memcpy((void *)(& edev->dev_info),(void *)info,80UL);
  #line 724 
  if ((int)edev->dev_info.common.wol_support != 0) 
                                                   #line 725 
                                                   edev->wol_enabled = (_Bool)1;
  #line 727 
  INIT_LIST_HEAD_2(& edev->vlan_list);
  #line 729 
  return edev;
}

#line 732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_init_ndev(struct qede_dev *edev)
{
  #line 737 
  netdev_features_t hw_features;
  #line 734 
  struct net_device *ndev = edev->ndev;
  #line 735 
  struct pci_dev *pdev = edev->pdev;
  #line 736 
  bool udp_tunnel_enable = (_Bool)0;
  #line 739 
  pci_set_drvdata(pdev,(void *)ndev);
  #line 741 
  ndev->mem_start = edev->dev_info.common.pci_mem_start;
  #line 742 
  ndev->base_addr = ndev->mem_start;
  #line 743 
  ndev->mem_end = edev->dev_info.common.pci_mem_end;
  #line 744 
  ndev->irq = (int)edev->dev_info.common.pci_irq;
  #line 746 
  ndev->watchdog_timeo = 1250;
  #line 748 
  if ((int)test_bit(0L,& edev->flags) != 0) 
    #line 749 
    if ((int)edev->dev_info.xdp_supported != 0) 
                                                #line 750 
                                                ndev->netdev_ops = & qede_netdev_vf_xdp_ops; else 
                                                                    #line 752 
                                                                    ndev->netdev_ops = & qede_netdev_vf_ops;
  else 
       #line 754 
       ndev->netdev_ops = & qede_netdev_ops;
  #line 757 
  qede_set_ethtool_ops(ndev);
  #line 759 
  ndev->priv_flags |= 4096U;
  #line 762 
  hw_features = 18295873487323155ULL;
  #line 766 
  if (! test_bit(0L,& edev->flags)) 
    #line 766 
    if ((unsigned int)edev->dev_info.common.num_hwfns == 1U) 
                                                             #line 767 
                                                             hw_features |= 137438953472ULL;
  #line 769 
  if ((int)edev->dev_info.common.vxlan_enable != 0 || (int)edev->dev_info.common.geneve_enable != 0) 
    #line 771 
    udp_tunnel_enable = (_Bool)1;
  #line 773 
  if ((int)udp_tunnel_enable != 0 || (int)edev->dev_info.common.gre_enable != 0) {
    #line 774 
    hw_features |= 262144ULL;
    #line 775 
    ndev->hw_enc_features = 549757190163ULL;
  }
  #line 781 
  if ((int)udp_tunnel_enable != 0) {
    #line 782 
    hw_features |= 201326592ULL;
    #line 784 
    ndev->hw_enc_features |= 201326592ULL;
  }
  #line 788 
  if ((int)edev->dev_info.common.gre_enable != 0) {
    #line 789 
    hw_features |= 12582912ULL;
    #line 790 
    ndev->hw_enc_features |= 12582912ULL;
  }
  #line 794 
  ndev->vlan_features = hw_features | 824633720864ULL;
  #line 796 
  ndev->features = hw_features | 824633721760ULL;
  #line 800 
  ndev->hw_features = hw_features;
  #line 803 
  ndev->min_mtu = 46U;
  #line 804 
  ndev->max_mtu = 9600U;
  #line 807 
  ether_addr_copy((edev->ndev)->dev_addr,(u8 *)(& edev->dev_info.common.hw_mac));
  #line 809 
  ndev->mtu = (unsigned int)edev->dev_info.common.mtu;
  #line 810 
  return;
}

#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
void qede_config_debug(uint debug_0, u32 *p_dp_module, u8 *p_dp_level)
{
  #line 825 
  *p_dp_level = (unsigned char)2U;
  #line 826 
  *p_dp_module = 0U;
  #line 828 
  if ((debug_0 & 1073741823U) != 0U) {
    #line 829 
    *p_dp_level = (unsigned char)0U;
    #line 830 
    *p_dp_module = debug_0 & 1073741823U;
  }
  else 
    #line 831 
    if ((debug_0 & 1073741824U) != 0U) 
                                       #line 832 
                                       *p_dp_level = (unsigned char)1U;
    else 
      #line 833 
      if ((debug_0 & 2147483648U) != 0U) 
                                         #line 834 
                                         *p_dp_level = (unsigned char)2U;
  #line 835 
  return;
}

#line 838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_free_fp_array(struct qede_dev *edev)
{
  #line 840 
  if (edev->fp_array != (struct qede_fastpath *)0) {
    #line 841 
    struct qede_fastpath *fp;
    #line 842 
    int i;
    #line 844 
    i = 0;
    #line 844 
    while ((int)edev->num_queues > i) {
      #line 845 
      fp = edev->fp_array + (unsigned long)i;
      #line 847 
      kfree((void *)fp->sb_info);
      #line 852 
      if (fp->rxq != (struct qede_rx_queue *)0) {
        #line 852 
        if ((int)xdp_rxq_info_is_reg(& (fp->rxq)->xdp_rxq) != 0) 
                                                                 #line 853 
                                                                 xdp_rxq_info_unreg(& (fp->rxq)->xdp_rxq);
      }
      #line 854 
      kfree((void *)fp->rxq);
      #line 855 
      kfree((void *)fp->xdp_tx);
      #line 856 
      kfree((void *)fp->txq);
      #line 844 
      i ++;
    }
    #line 858 
    kfree((void *)edev->fp_array);
  }
  #line 861 
  edev->num_queues = (unsigned short)0U;
  #line 862 
  edev->fp_num_tx = (unsigned char)0U;
  #line 863 
  edev->fp_num_rx = (unsigned char)0U;
  #line 864 
  return;
}

#line 866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_alloc_fp_array(struct qede_dev *edev)
{
  #line 868 
  u8 fp_combined;
  #line 869 
  struct qede_fastpath *fp;
  #line 870 
  int i;
  #line 868 
  u8 fp_rx = edev->fp_num_rx;
  #line 872 
  edev->fp_array = (struct qede_fastpath *)kcalloc((unsigned long)edev->num_queues,464UL,3264U);
  #line 874 
  if (edev->fp_array == (struct qede_fastpath *)0) {
    #line 875 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 875 
      char *tmp_0;
      #line 875 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 875 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 875 
                                                                    tmp_0 = (char *)"";
      #line 875 
      printk((char *)"\001",(char *)"qede_alloc_fp_array",875,tmp_0);
    }
    #line 876 
    goto err;
  }
  #line 879 
  fp_combined = (unsigned char)(((int)((unsigned char)edev->num_queues) - (int)fp_rx) - (int)edev->fp_num_tx);
  #line 886 
  i = 0;
  #line 886 
  while ((int)edev->num_queues > i) {
    #line 887 
    fp = edev->fp_array + (unsigned long)i;
    #line 889 
    fp->sb_info = (struct qed_sb_info *)kzalloc_2(48UL,3264U);
    #line 890 
    if (fp->sb_info == (struct qed_sb_info *)0) {
      #line 891 
      if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
        #line 891 
        char *tmp_2;
        #line 891 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 891 
                                                      tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 891 
                                                                    tmp_2 = (char *)"";
        #line 891 
        printk((char *)"\001",(char *)"qede_alloc_fp_array",891,tmp_2);
      }
      #line 892 
      goto err;
    }
    #line 895 
    if ((unsigned int)fp_rx != 0U) {
      #line 896 
      fp->type = (unsigned char)2U;
      #line 897 
      fp_rx = (u8)((int)fp_rx - 1);
    }
    else 
      #line 898 
      if ((unsigned int)fp_combined != 0U) {
        #line 899 
        fp->type = (unsigned char)3U;
        #line 900 
        fp_combined = (u8)((int)fp_combined - 1);
      }
      else 
           #line 902 
           fp->type = (unsigned char)1U;
    #line 905 
    if (((unsigned long)fp->type & 1UL) != 0UL) {
      #line 906 
      fp->txq = (struct qede_tx_queue *)kcalloc((unsigned long)edev->dev_info.num_tc,192UL,3264U);
      #line 908 
      if (fp->txq == (struct qede_tx_queue *)0) 
                                                #line 909 
                                                goto err;
    }
    #line 912 
    if (((unsigned long)fp->type & 2UL) != 0UL) {
      #line 913 
      fp->rxq = (struct qede_rx_queue *)kzalloc_2(3008UL,3264U);
      #line 914 
      if (fp->rxq == (struct qede_rx_queue *)0) 
                                                #line 915 
                                                goto err;
      #line 917 
      if (edev->xdp_prog != (struct bpf_prog *)0) {
        #line 918 
        fp->xdp_tx = (struct qede_tx_queue *)kzalloc_2(192UL,3264U);
        #line 920 
        if (fp->xdp_tx == (struct qede_tx_queue *)0) 
                                                     #line 921 
                                                     goto err;
        #line 922 
        fp->type = (unsigned char)((unsigned int)fp->type | 4U);
      }
    }
    #line 886 
    i ++;
  }
  #line 927 
  return 0;
  #line 928 
  err: 
       #line 928 
  ;
  #line 929 
  qede_free_fp_array(edev);
  #line 930 
  return -12;
}

#line 936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
void __qede_lock(struct qede_dev *edev)
{
  #line 938 
  cif_mutex_lock_qede_lock_of_qede_dev(& edev->qede_lock);
  #line 939 
  return;
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
void __qede_unlock(struct qede_dev *edev)
{
  #line 943 
  cif_mutex_unlock_qede_lock_of_qede_dev(& edev->qede_lock);
  #line 944 
  return;
}

#line 949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_lock(struct qede_dev *edev)
{
  #line 951 
  rtnl_lock();
  #line 952 
  __qede_lock(edev);
  #line 953 
  return;
}

#line 955  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_unlock(struct qede_dev *edev)
{
  #line 957 
  __qede_unlock(edev);
  #line 958 
  rtnl_unlock();
  #line 959 
  return;
}

#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_sp_task(struct work_struct *work)
{
  #line 963 
  void *__mptr;
  #line 963 
  __mptr = (void *)work;
  #line 963 
  struct qede_dev *edev = ((struct qede_dev *)(__mptr + 18446744073709550416U));
  #line 972 
  if ((int)test_and_clear_bit(0L,& edev->sp_flags) != 0) {
    #line 977 
    qede_sriov_configure(edev->pdev,0);
    #line 979 
    qede_lock(edev);
    #line 980 
    qede_recovery_handler(edev);
    #line 981 
    qede_unlock(edev);
  }
  #line 984 
  __qede_lock(edev);
  #line 986 
  if ((int)test_and_clear_bit(1L,& edev->sp_flags) != 0) 
    #line 987 
    if (edev->state == 1U) 
                           #line 988 
                           qede_config_rx_mode(edev->ndev);
  #line 991 
  if ((int)test_and_clear_bit(4L,& edev->sp_flags) != 0) 
    #line 992 
    if (edev->state == 1U) 
                           #line 993 
                           qede_process_arfs_filters(edev,(_Bool)0);
  #line 996 
  __qede_unlock(edev);
  #line 997 
  return;
}

#line 999  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_update_pf_params(struct qed_dev *cdev)
{
  #line 1001 
  struct qed_pf_params pf_params;
  #line 1002 
  u16 num_cons;
  #line 1005 
  memset((void *)(& pf_params),0,176UL);
  #line 1008 
  num_cons = (unsigned short)6U;
  #line 1010 
  pf_params.eth_pf_params.num_cons = (unsigned short)((unsigned int)num_cons * 128U);
  #line 1015 
  pf_params.eth_pf_params.num_vf_cons = (unsigned char)48U;
  #line 1017 
  pf_params.eth_pf_params.num_arfs_filters = 256U;
  #line 1018 
  (*((qed_ops->common)->update_pf_params))(cdev,& pf_params);
  #line 1019 
  return;
}

#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_log_probe(struct qede_dev *edev)
{
  #line 1026 
  u8 buf[80U];
  #line 1027 
  size_t left_size;
  #line 1025 
  struct qed_dev_info *p_dev_info = & edev->dev_info.common;
  #line 1029 
  snprintf((char *)(& buf),80UL,(char *)"Storm FW %d.%d.%d.%d, Management FW %d.%d.%d.%d",(int)p_dev_info->fw_major,(int)p_dev_info->fw_minor,(int)p_dev_info->fw_rev,(int)p_dev_info->fw_eng,p_dev_info->mfw_rev >> 24,(p_dev_info->mfw_rev >> 16) & 255U,(p_dev_info->mfw_rev >> 8) & 255U,p_dev_info->mfw_rev & 255U);
  #line 1042 
  left_size = 80UL - cif_strlen((char *)(& buf));
  #line 1043 
  if (p_dev_info->mbi_version != 0U && left_size != 0UL) {
    #line 1044 
    ;
    #line 1044 
    ;
    #line 1044 
    ;
    #line 1044 
    ;
    #line 1044 
    snprintf((char *)((u8 *)(& buf) + cif_strlen((char *)(& buf))),left_size,(char *)" [MBI %d.%d.%d]",(p_dev_info->mbi_version >> 16) & 255U,(p_dev_info->mbi_version >> 8) & 255U,p_dev_info->mbi_version & 255U);
  }
  #line 1053 
  printk((char *)"\001",(int)((edev->pdev)->bus)->number,((edev->pdev)->devfn >> 3) & 31U,(edev->pdev)->devfn & 7U,(u8 *)(& buf),(char *)(& (edev->ndev)->name));
  #line 1054 
  return;
}

#line 1063  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int __qede_probe(struct pci_dev *pdev, u32 dp_module, u8 dp_level, bool is_vf, enum qede_probe_mode mode)
{
  #line 1066 
  struct qed_probe_params probe_params;
  #line 1067 
  struct qed_slowpath_params sp_params;
  #line 1068 
  struct qed_dev_eth_info dev_info;
  #line 1069 
  struct qede_dev *edev;
  #line 1070 
  struct qed_dev *cdev;
  #line 1071 
  int rc;
  #line 1073 
  if ((long)(((int)dp_level & 1) != 0) != 0L) 
                                              #line 1074 
                                              printk((char *)"\001");
  #line 1076 
  memset((void *)(& probe_params),0,12UL);
  #line 1077 
  probe_params.protocol = QED_PROTOCOL_ETH;
  #line 1078 
  probe_params.dp_module = dp_module;
  #line 1079 
  probe_params.dp_level = dp_level;
  #line 1080 
  probe_params.is_vf = is_vf;
  #line 1081 
  probe_params.recov_in_prog = (_Bool)(mode == (unsigned int)QEDE_PROBE_RECOVERY);
  #line 1082 
  cdev = (*((qed_ops->common)->probe))(pdev,& probe_params);
  #line 1083 
  if (cdev == (struct qed_dev *)0) {
    #line 1084 
    rc = -19;
    #line 1085 
    goto err0;
  }
  #line 1088 
  qede_update_pf_params(cdev);
  #line 1091 
  memset((void *)(& sp_params),0,20UL);
  #line 1092 
  sp_params.int_mode = 1U;
  #line 1093 
  sp_params.drv_major = (unsigned char)8U;
  #line 1094 
  sp_params.drv_minor = (unsigned char)37U;
  #line 1095 
  sp_params.drv_rev = (unsigned char)0U;
  #line 1096 
  sp_params.drv_eng = (unsigned char)20U;
  #line 1097 
  strlcpy((char *)(& sp_params.name),(char *)"qede LAN",12UL);
  #line 1098 
  rc = (*((qed_ops->common)->slowpath_start))(cdev,& sp_params);
  #line 1099 
  if (rc != 0) {
    #line 1100 
    printk((char *)"\001");
    #line 1101 
    goto err1;
  }
  #line 1105 
  rc = (*(qed_ops->fill_dev_info))(cdev,& dev_info);
  #line 1106 
  if (rc != 0) 
               #line 1107 
               goto err2;
  #line 1109 
  if (mode != (unsigned int)QEDE_PROBE_RECOVERY) {
    #line 1110 
    edev = qede_alloc_etherdev(cdev,pdev,& dev_info,dp_module,(unsigned char)((int)dp_level));
    #line 1112 
    if (edev == (struct qede_dev *)0) {
      #line 1113 
      rc = -12;
      #line 1114 
      goto err2;
    }
  }
  else {
    #line 1117 
    struct net_device *ndev = pci_get_drvdata(pdev);
    #line 1119 
    edev = (struct qede_dev *)netdev_priv(ndev);
    #line 1120 
    edev->cdev = cdev;
    #line 1121 
    memset((void *)(& edev->stats),0,512UL);
    #line 1122 
    memcpy((void *)(& edev->dev_info),(void *)(& dev_info),80UL);
  }
  #line 1125 
  if ((int)is_vf != 0) 
                       #line 1126 
                       cif_set_bit_2(0L,& edev->flags);
  #line 1128 
  qede_init_ndev(edev);
  #line 1130 
  rc = qede_rdma_dev_add(edev,(_Bool)(mode == (unsigned int)QEDE_PROBE_RECOVERY));
  #line 1131 
  if (rc != 0) 
               #line 1132 
               goto err3;
  #line 1134 
  if (mode != (unsigned int)QEDE_PROBE_RECOVERY) {
    {
      #line 1140 
      struct lock_class_key __key;
      #line 1140 
      __init_work(& edev->sp_task.work,0);
      #line 1140 
      atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
      #line 1140 
      edev->sp_task.work.data = __constr_expr_44;
      #line 1140 
      lockdep_init_map(& edev->sp_task.work.lockdep_map,(char *)"(work_completion)",& __key,0);
      #line 1140 
      INIT_LIST_HEAD_2(& edev->sp_task.work.entry);
      #line 1140 
      edev->sp_task.work.func = & qede_sp_task;
    }
    {
      #line 1140 
      struct lock_class_key __key_0;
      #line 1140 
      init_timer_key(& edev->sp_task.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&edev->sp_task)->timer",& __key_0);
    }
    {
      #line 1141 
      struct lock_class_key __key_1;
      #line 1141 
      __mutex_init(& edev->qede_lock,(char *)"&edev->qede_lock",& __key_1);
    }
    #line 1143 
    rc = cif_register_netdev(edev->ndev);
    #line 1144 
    if (rc != 0) {
      #line 1145 
      if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
        #line 1145 
        char *tmp_1;
        #line 1145 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1145 
                                                      tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1145 
                                                                    tmp_1 = (char *)"";
        #line 1145 
        printk((char *)"\001",(char *)"__qede_probe",1145,tmp_1);
      }
      #line 1146 
      goto err4;
    }
  }
  #line 1150 
  (*(((edev->ops)->common)->set_name))(cdev,(char *)(& (edev->ndev)->name));
  #line 1153 
  if (! is_vf) 
               #line 1154 
               qede_ptp_enable(edev,(_Bool)(mode == (unsigned int)QEDE_PROBE_NORMAL));
  #line 1156 
  (*((edev->ops)->register_ops))(cdev,& qede_ll_ops,(void *)edev);
  #line 1159 
  if (! test_bit(0L,& edev->flags)) 
                                    #line 1160 
                                    qede_set_dcbnl_ops(edev->ndev);
  #line 1163 
  edev->rx_copybreak = 256U;
  #line 1165 
  qede_log_probe(edev);
  #line 1166 
  return 0;
  #line 1168 
  err4: 
        #line 1168 
  ;
  #line 1169 
  qede_rdma_dev_remove(edev,(_Bool)(mode == (unsigned int)QEDE_PROBE_RECOVERY));
  #line 1170 
  err3: 
        #line 1170 
  ;
  #line 1171 
  cif_free_netdev(edev->ndev);
  #line 1172 
  err2: 
        #line 1172 
  ;
  #line 1173 
  (*((qed_ops->common)->slowpath_stop))(cdev);
  #line 1174 
  err1: 
        #line 1174 
  ;
  #line 1175 
  (*((qed_ops->common)->remove))(cdev);
  #line 1176 
  err0: 
        #line 1176 
  ;
  #line 1177 
  return rc;
}

#line 1180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_probe(struct pci_dev *pdev, struct pci_device_id *id)
{
  #line 1182 
  bool is_vf = (_Bool)0;
  #line 1183 
  u32 dp_module = 0U;
  #line 1184 
  u8 dp_level = (unsigned char)0U;
  #line 1186 
  switch ((unsigned int)id->driver_data) {
    #line 1187 
    case (unsigned int)1: 
                          #line 1187 
    ;
    #line 1188 
    if ((debug & 1073741823U) != 0U) 
                                     #line 1189 
                                     _dev_err(& pdev->dev,(char *)"Probing a VF\n");
    #line 1190 
    is_vf = (_Bool)1;
    #line 1191 
    break;
    #line 1192 
    default: 
             #line 1192 
    ;
    #line 1193 
    if ((debug & 1073741823U) != 0U) 
                                     #line 1194 
                                     _dev_err(& pdev->dev,(char *)"Probing a PF\n");
  }
  #line 1197 
  qede_config_debug(debug,& dp_module,& dp_level);
  #line 1199 
  return __qede_probe(pdev,dp_module,(unsigned char)((int)dp_level),
                   (_Bool)((bool)((int)is_vf) != 0),
                   (enum qede_probe_mode)QEDE_PROBE_NORMAL);
}

#line 1208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void __qede_remove(struct pci_dev *pdev, enum qede_remove_mode mode)
{
  #line 1211 
  struct qede_dev *edev;
  #line 1212 
  struct qed_dev *cdev;
  #line 1210 
  struct net_device *ndev = pci_get_drvdata(pdev);
  #line 1214 
  if (ndev == (struct net_device *)0) {
    #line 1215 
    _dev_info(& pdev->dev,(char *)"Device has already been removed\n");
    #line 1216 
    return;
  }
  #line 1219 
  edev = (struct qede_dev *)netdev_priv(ndev);
  #line 1220 
  cdev = edev->cdev;
  #line 1222 
  if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
    #line 1222 
    char *tmp_1;
    #line 1222 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1222 
                                                  tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1222 
                                                                    tmp_1 = (char *)"";
    #line 1222 
    printk((char *)"\001",(char *)"__qede_remove",1222,tmp_1);
  }
  #line 1224 
  qede_rdma_dev_remove(edev,(_Bool)(mode == (unsigned int)QEDE_REMOVE_RECOVERY));
  #line 1226 
  if (mode != (unsigned int)QEDE_REMOVE_RECOVERY) {
    #line 1227 
    cif_unregister_netdev(ndev);
    #line 1229 
    cancel_delayed_work_sync(& edev->sp_task);
    #line 1231 
    (*(((edev->ops)->common)->set_power_state))(cdev,0);
    #line 1233 
    pci_set_drvdata(pdev,(void *)0);
  }
  #line 1236 
  qede_ptp_disable(edev);
  #line 1239 
  (*((qed_ops->common)->slowpath_stop))(cdev);
  #line 1240 
  if (system_state == (unsigned int)SYSTEM_POWER_OFF) 
                                                      #line 1241 
                                                      return;
  #line 1242 
  (*((qed_ops->common)->remove))(cdev);
  #line 1250 
  if (mode != (unsigned int)QEDE_REMOVE_RECOVERY) 
                                                  #line 1251 
                                                  cif_free_netdev(ndev);
  #line 1253 
  _dev_info(& pdev->dev,(char *)"Ending qede_remove successfully\n");
  #line 1254 
  return;
}

#line 1256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_remove(struct pci_dev *pdev)
{
  #line 1258 
  __qede_remove(pdev,(enum qede_remove_mode)QEDE_REMOVE_NORMAL);
  #line 1259 
  return;
}

#line 1261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_shutdown(struct pci_dev *pdev)
{
  #line 1263 
  __qede_remove(pdev,(enum qede_remove_mode)QEDE_REMOVE_NORMAL);
  #line 1264 
  return;
}

#line 1271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_set_num_queues(struct qede_dev *edev)
{
  #line 1283 
  unsigned short __UNIQUE_ID___x564;
  #line 1283 
  int tmp_0;
  #line 1273 
  int rc;
  #line 1274 
  u16 rss_num;
  #line 1277 
  if ((unsigned int)edev->req_queues != 0U) 
                                            #line 1278 
                                            rss_num = edev->req_queues;
  else {
    #line 1280 
    rss_num = (unsigned short)((int)((unsigned short)netif_get_num_default_rss_queues()) * (int)((unsigned short)edev->dev_info.common.num_hwfns));
  }
  {
    #line 1283 
    __UNIQUE_ID___x564 = (unsigned short)edev->dev_info.num_queues;
    #line 1283 
    unsigned short __UNIQUE_ID___y565 = rss_num;
    #line 1283 
    if ((int)__UNIQUE_ID___x564 < (int)__UNIQUE_ID___y565) 
                                                           #line 1283 
                                                           tmp_0 = (int)__UNIQUE_ID___x564; else 
                                                                    #line 1283 
                                                                    tmp_0 = (int)__UNIQUE_ID___y565;
    }
  #line 1283 
  rss_num = (unsigned short)tmp_0;
  #line 1285 
  rc = (*(((edev->ops)->common)->set_fp_int))(edev->cdev,(unsigned short)((int)rss_num));
  #line 1286 
  if (rc > 0) {
    #line 1288 
    edev->num_queues = (unsigned short)rc;
    #line 1289 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 1289 
      char *tmp_2;
      #line 1289 
      ;
      #line 1289 
      ;
      #line 1289 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1289 
                                                    tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1289 
                                                                    tmp_2 = (char *)"";
      #line 1289 
      printk((char *)"\001",(char *)"qede_set_num_queues",1289,tmp_2,(int)edev->num_queues,(int)rss_num);
    }
    #line 1291 
    rc = 0;
  }
  #line 1294 
  edev->fp_num_tx = edev->req_num_tx;
  #line 1295 
  edev->fp_num_rx = edev->req_num_rx;
  #line 1297 
  return rc;
}

#line 1300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_free_mem_sb(struct qede_dev *edev, struct qed_sb_info *sb_info, u16 sb_id)
{
  #line 1303 
  if (sb_info->sb_virt != (struct status_block_e4 *)0) {
    #line 1304 
    (*(((edev->ops)->common)->sb_release))(edev->cdev,sb_info,(unsigned short)((int)sb_id),(enum qed_sb_type)QED_SB_TYPE_L2_QUEUE);
    #line 1306 
    dma_free_coherent(& (edev->pdev)->dev,32UL,(void *)sb_info->sb_virt,sb_info->sb_phys);
    #line 1308 
    memset((void *)sb_info,0,48UL);
  }
  #line 1310 
  return;
}

#line 1313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_alloc_mem_sb(struct qede_dev *edev, struct qed_sb_info *sb_info, u16 sb_id)
{
  #line 1316 
  struct status_block_e4 *sb_virt;
  #line 1317 
  dma_addr_t sb_phys;
  #line 1318 
  int rc;
  #line 1320 
  sb_virt = (struct status_block_e4 *)dma_alloc_coherent(& (edev->pdev)->dev,32UL,& sb_phys,3264U);
  #line 1322 
  if (sb_virt == (struct status_block_e4 *)0) {
    #line 1323 
    char *tmp_0;
    #line 1323 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1323 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1323 
                                                                    tmp_0 = (char *)"";
    #line 1323 
    printk((char *)"\001",(char *)"qede_alloc_mem_sb",1323,tmp_0);
    #line 1324 
    return -12;
  }
  #line 1327 
  rc = (int)(*(((edev->ops)->common)->sb_init))(edev->cdev,sb_info,
                                            (void *)sb_virt,sb_phys,
                                            (unsigned short)((int)sb_id),
                                            (enum qed_sb_type)QED_SB_TYPE_L2_QUEUE);
  #line 1330 
  if (rc != 0) {
    #line 1331 
    char *tmp_2;
    #line 1331 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1331 
                                                  tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1331 
                                                                    tmp_2 = (char *)"";
    #line 1331 
    printk((char *)"\001",(char *)"qede_alloc_mem_sb",1331,tmp_2);
    #line 1332 
    dma_free_coherent(& (edev->pdev)->dev,32UL,(void *)sb_virt,sb_phys);
    #line 1334 
    return rc;
  }
  #line 1337 
  return 0;
}

#line 1340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_free_rx_buffers(struct qede_dev *edev, struct qede_rx_queue *rxq)
{
  #line 1343 
  u16 i;
  #line 1345 
  i = rxq->sw_rx_cons;
  #line 1345 
  while ((int)rxq->sw_rx_prod != (int)i) {
    {
      #line 1346 
      struct sw_rx_data *rx_buf;
      #line 1347 
      struct page *data;
      #line 1349 
      rx_buf = rxq->sw_rx_ring + ((unsigned long)i & (unsigned long)8191U);
      #line 1350 
      data = rx_buf->data;
      #line 1352 
      dma_unmap_page_attrs(& (edev->pdev)->dev,rx_buf->mapping,4096UL,(enum dma_data_direction)rxq->data_direction,0UL);
      #line 1355 
      rx_buf->data = (struct page *)0;
      #line 1356 
      __free_pages(data,0U);
    }
    #line 1345 
    i = (u16)((int)i + 1);
  }
  #line 1358 
  return;
}

#line 1360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_free_mem_rxq(struct qede_dev *edev, struct qede_rx_queue *rxq)
{
  #line 1363 
  qede_free_rx_buffers(edev,rxq);
  #line 1366 
  kfree((void *)rxq->sw_rx_ring);
  #line 1369 
  (*(((edev->ops)->common)->chain_free))(edev->cdev,& rxq->rx_bd_ring);
  #line 1370 
  (*(((edev->ops)->common)->chain_free))(edev->cdev,& rxq->rx_comp_ring);
  #line 1371 
  return;
}

#line 1373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_set_tpa_param(struct qede_rx_queue *rxq)
{
  #line 1375 
  int i;
  #line 1377 
  i = 0;
  #line 1377 
  while (i <= 63) {
    {
      #line 1378 
      struct qede_agg_info *tpa_info = & rxq->tpa_info[i];
      #line 1380 
      tpa_info->state = (unsigned char)0U;
    }
    #line 1377 
    i ++;
  }
  #line 1382 
  return;
}

#line 1385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_alloc_mem_rxq(struct qede_dev *edev, struct qede_rx_queue *rxq)
{
  #line 1387 
  int i;
  #line 1387 
  int rc;
  #line 1387 
  int size;
  #line 1389 
  rxq->num_rx_buffers = edev->q_num_rx_buffers;
  #line 1391 
  rxq->rx_buf_size = (edev->ndev)->mtu + 30U;
  #line 1393 
  if (edev->xdp_prog != (struct bpf_prog *)0) 
                                              #line 1393 
                                              rxq->rx_headroom = (unsigned short)256U; else 
                                                                    #line 1393 
                                                                    rxq->rx_headroom = (unsigned short)64U;
  #line 1394 
  size = (int)((unsigned int)rxq->rx_headroom + 320U);
  #line 1398 
  if (rxq->rx_buf_size + (unsigned int)size > 4096U) 
                                                     #line 1399 
                                                     rxq->rx_buf_size = 4096U - (unsigned int)size;
  #line 1404 
  if (edev->xdp_prog == (struct bpf_prog *)0) {
    #line 1405 
    size = (int)(rxq->rx_buf_size + (unsigned int)size);
    #line 1406 
    if (0 != 0) {
      #line 1406 
      unsigned int tmp_36;
      #line 1406 
      unsigned int tmp_4;
      #line 1406 
      unsigned int tmp_5;
      #line 1406 
      unsigned int tmp_37;
      #line 1406 
      unsigned int tmp_38;
      #line 1406 
      unsigned int tmp_6;
      #line 1406 
      unsigned int tmp_7;
      #line 1406 
      unsigned int tmp_39;
      #line 1406 
      unsigned int tmp_40;
      #line 1406 
      unsigned int tmp_8;
      #line 1406 
      unsigned int tmp_9;
      #line 1406 
      unsigned int tmp_41;
      #line 1406 
      unsigned int tmp_42;
      #line 1406 
      unsigned int tmp_10;
      #line 1406 
      unsigned int tmp_11;
      #line 1406 
      unsigned int tmp_43;
      #line 1406 
      unsigned int tmp_44;
      #line 1406 
      unsigned int tmp_12;
      #line 1406 
      unsigned int tmp_13;
      #line 1406 
      unsigned int tmp_45;
      #line 1406 
      unsigned int tmp_46;
      #line 1406 
      unsigned int tmp_14;
      #line 1406 
      unsigned int tmp_15;
      #line 1406 
      unsigned int tmp_47;
      #line 1406 
      unsigned int tmp_48;
      #line 1406 
      unsigned int tmp_16;
      #line 1406 
      unsigned int tmp_17;
      #line 1406 
      unsigned int tmp_49;
      #line 1406 
      unsigned int tmp_50;
      #line 1406 
      unsigned int tmp_18;
      #line 1406 
      unsigned int tmp_19;
      #line 1406 
      unsigned int tmp_51;
      #line 1406 
      unsigned int tmp_52;
      #line 1406 
      unsigned int tmp_20;
      #line 1406 
      unsigned int tmp_21;
      #line 1406 
      unsigned int tmp_53;
      #line 1406 
      unsigned int tmp_54;
      #line 1406 
      unsigned int tmp_22;
      #line 1406 
      unsigned int tmp_23;
      #line 1406 
      unsigned int tmp_55;
      #line 1406 
      unsigned int tmp_56;
      #line 1406 
      unsigned int tmp_24;
      #line 1406 
      unsigned int tmp_25;
      #line 1406 
      unsigned int tmp_57;
      #line 1406 
      unsigned int tmp_58;
      #line 1406 
      unsigned int tmp_26;
      #line 1406 
      unsigned int tmp_27;
      #line 1406 
      unsigned int tmp_59;
      #line 1406 
      unsigned int tmp_60;
      #line 1406 
      unsigned int tmp_28;
      #line 1406 
      unsigned int tmp_29;
      #line 1406 
      unsigned int tmp_61;
      #line 1406 
      unsigned int tmp_30;
      #line 1406 
      unsigned int tmp_63;
      #line 1406 
      unsigned int tmp;
      #line 1406 
      unsigned int tmp_31;
      #line 1406 
      unsigned int tmp_32;
      #line 1406 
      unsigned int tmp_0;
      #line 1406 
      unsigned int tmp_1;
      #line 1406 
      unsigned int tmp_33;
      #line 1406 
      unsigned int tmp_34;
      #line 1406 
      unsigned int tmp_2;
      #line 1406 
      unsigned int tmp_3;
      #line 1406 
      unsigned int tmp_35;
      #line 1406 
      unsigned int tmp_64;
      #line 1406 
      if (size != 1) {
        #line 1406 
        if (0 != 0) {
          #line 1406 
          if (size > 2) {
            #line 1406 
            if (((unsigned long long)(size + -1) & 9223372036854775808ULL) == 0ULL) {
              #line 1406 
              if (((unsigned long long)(size + -1) & 4611686018427387904ULL) == 0ULL) {
                #line 1406 
                if (((unsigned long long)(size + -1) & 2305843009213693952ULL) == 0ULL) {
                  #line 1406 
                  if (((unsigned long long)(size + -1) & 1152921504606846976ULL) == 0ULL) {
                    #line 1406 
                    if (((unsigned long long)(size + -1) & 576460752303423488ULL) == 0ULL) {
                      #line 1406 
                      if (((unsigned long long)(size + -1) & 288230376151711744ULL) == 0ULL) {
                        #line 1406 
                        if (((unsigned long long)(size + -1) & 144115188075855872ULL) == 0ULL) {
                          #line 1406 
                          if (((unsigned long long)(size + -1) & 72057594037927936ULL) == 0ULL) {
                            #line 1406 
                            if (((unsigned long long)(size + -1) & 36028797018963968ULL) == 0ULL) {
                              #line 1406 
                              if (((unsigned long long)(size + -1) & 18014398509481984ULL) == 0ULL) {
                                #line 1406 
                                if (((unsigned long long)(size + -1) & 9007199254740992ULL) == 0ULL) {
                                  #line 1406 
                                  if (((unsigned long long)(size + -1) & 4503599627370496ULL) == 0ULL) {
                                    #line 1406 
                                    if (((unsigned long long)(size + -1) & 2251799813685248ULL) == 0ULL) {
                                      #line 1406 
                                      if (((unsigned long long)(size + -1) & 1125899906842624ULL) == 0ULL) {
                                        #line 1406 
                                        if (((unsigned long long)(size + -1) & 562949953421312ULL) == 0ULL) {
                                          #line 1406 
                                          if (((unsigned long long)(size + -1) & 281474976710656ULL) == 0ULL) {
                                            #line 1406 
                                            if (((unsigned long long)(size + -1) & 140737488355328ULL) == 0ULL) {
                                              #line 1406 
                                              if (((unsigned long long)(size + -1) & 70368744177664ULL) == 0ULL) {
                                                #line 1406 
                                                if (((unsigned long long)(size + -1) & 35184372088832ULL) == 0ULL) {
                                                  #line 1406 
                                                  if (((unsigned long long)(size + -1) & 17592186044416ULL) == 0ULL) {
                                                    #line 1406 
                                                    if (((unsigned long long)(size + -1) & 8796093022208ULL) == 0ULL) {
                                                      #line 1406 
                                                      if (((unsigned long long)(size + -1) & 4398046511104ULL) == 0ULL) {
                                                        #line 1406 
                                                        if (((unsigned long long)(size + -1) & 2199023255552ULL) == 0ULL) {
                                                          #line 1406 
                                                          if (((unsigned long long)(size + -1) & 1099511627776ULL) == 0ULL) {
                                                            #line 1406 
                                                            if (((unsigned long long)(size + -1) & 549755813888ULL) == 0ULL) {
                                                              #line 1406 
                                                              if (((unsigned long long)(size + -1) & 274877906944ULL) == 0ULL) {
                                                                #line 1406 
                                                                if (((unsigned long long)(size + -1) & 137438953472ULL) == 0ULL) {
                                                                  #line 1406 
                                                                  if (
                                                                    ((unsigned long long)(size + -1) & 68719476736ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 34359738368ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 17179869184ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 8589934592ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 4294967296ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 2147483648ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 1073741824ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 536870912ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 268435456ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 134217728ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 67108864ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 33554432ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 16777216ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 8388608ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 4194304ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 2097152ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 1048576ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 524288ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 262144ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 131072ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 65536ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 32768ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 16384ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 8192ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 4096ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 2048ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 1024ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 512ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 256ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 128ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 64ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 32ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 16ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 8ULL) == 0ULL) {
                                                                    #line 1406 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 4ULL) != 0ULL) 
                                                                    #line 1406 
                                                                    tmp = 8U; else 
                                                                    #line 1406 
                                                                    tmp = 4U;
                                                                    #line 1406 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_0 = 16U;
                                                                    #line 1406 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_1 = 32U;
                                                                    #line 1406 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_2 = 64U;
                                                                    #line 1406 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_3 = 128U;
                                                                    #line 1406 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_4 = 256U;
                                                                    #line 1406 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_5 = 512U;
                                                                    #line 1406 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_6 = 1024U;
                                                                    #line 1406 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_7 = 2048U;
                                                                    #line 1406 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_8 = 4096U;
                                                                    #line 1406 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_9 = 8192U;
                                                                    #line 1406 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_10 = 16384U;
                                                                    #line 1406 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_11 = 32768U;
                                                                    #line 1406 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_12 = 65536U;
                                                                    #line 1406 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_13 = 131072U;
                                                                    #line 1406 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_14 = 262144U;
                                                                    #line 1406 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_15 = 524288U;
                                                                    #line 1406 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_16 = 1048576U;
                                                                    #line 1406 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_17 = 2097152U;
                                                                    #line 1406 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_18 = 4194304U;
                                                                    #line 1406 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_19 = 8388608U;
                                                                    #line 1406 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_20 = 16777216U;
                                                                    #line 1406 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_21 = 33554432U;
                                                                    #line 1406 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_22 = 67108864U;
                                                                    #line 1406 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_23 = 134217728U;
                                                                    #line 1406 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_24 = 268435456U;
                                                                    #line 1406 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_25 = 536870912U;
                                                                    #line 1406 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_26 = 1073741824U;
                                                                    #line 1406 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_27 = 2147483648U;
                                                                    #line 1406 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_28 = 0U;
                                                                    #line 1406 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_29 = 0U;
                                                                    #line 1406 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_30 = 0U;
                                                                    #line 1406 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_31 = 0U;
                                                                    #line 1406 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 1406 
                                                                    tmp_32 = 0U;
                                                                    #line 1406 
                                                                    tmp_33 = tmp_32;
                                                                  }
                                                                  else 
                                                                    #line 1406 
                                                                    tmp_33 = 0U;
                                                                  #line 1406 
                                                                  tmp_34 = tmp_33;
                                                                }
                                                                else 
                                                                  #line 1406 
                                                                  tmp_34 = 0U;
                                                                #line 1406 
                                                                tmp_35 = tmp_34;
                                                              }
                                                              else 
                                                                   #line 1406 
                                                                   tmp_35 = 0U;
                                                              #line 1406 
                                                              tmp_36 = tmp_35;
                                                            }
                                                            else 
                                                                 #line 1406 
                                                                 tmp_36 = 0U;
                                                            #line 1406 
                                                            tmp_37 = tmp_36;
                                                          }
                                                          else 
                                                               #line 1406 
                                                               tmp_37 = 0U;
                                                          #line 1406 
                                                          tmp_38 = tmp_37;
                                                        }
                                                        else 
                                                             #line 1406 
                                                             tmp_38 = 0U;
                                                        #line 1406 
                                                        tmp_39 = tmp_38;
                                                      }
                                                      else 
                                                           #line 1406 
                                                           tmp_39 = 0U;
                                                      #line 1406 
                                                      tmp_40 = tmp_39;
                                                    }
                                                    else 
                                                         #line 1406 
                                                         tmp_40 = 0U;
                                                    #line 1406 
                                                    tmp_41 = tmp_40;
                                                  }
                                                  else 
                                                       #line 1406 
                                                       tmp_41 = 0U;
                                                  #line 1406 
                                                  tmp_42 = tmp_41;
                                                }
                                                else 
                                                     #line 1406 
                                                     tmp_42 = 0U;
                                                #line 1406 
                                                tmp_43 = tmp_42;
                                              }
                                              else 
                                                   #line 1406 
                                                   tmp_43 = 0U;
                                              #line 1406 
                                              tmp_44 = tmp_43;
                                            }
                                            else 
                                                 #line 1406 
                                                 tmp_44 = 0U;
                                            #line 1406 
                                            tmp_45 = tmp_44;
                                          }
                                          else 
                                               #line 1406 
                                               tmp_45 = 0U;
                                          #line 1406 
                                          tmp_46 = tmp_45;
                                        }
                                        else 
                                             #line 1406 
                                             tmp_46 = 0U;
                                        #line 1406 
                                        tmp_47 = tmp_46;
                                      }
                                      else 
                                           #line 1406 
                                           tmp_47 = 0U;
                                      #line 1406 
                                      tmp_48 = tmp_47;
                                    }
                                    else 
                                         #line 1406 
                                         tmp_48 = 0U;
                                    #line 1406 
                                    tmp_49 = tmp_48;
                                  }
                                  else 
                                       #line 1406 
                                       tmp_49 = 0U;
                                  #line 1406 
                                  tmp_50 = tmp_49;
                                }
                                else 
                                     #line 1406 
                                     tmp_50 = 0U;
                                #line 1406 
                                tmp_51 = tmp_50;
                              }
                              else 
                                   #line 1406 
                                   tmp_51 = 0U;
                              #line 1406 
                              tmp_52 = tmp_51;
                            }
                            else 
                                 #line 1406 
                                 tmp_52 = 0U;
                            #line 1406 
                            tmp_53 = tmp_52;
                          }
                          else 
                               #line 1406 
                               tmp_53 = 0U;
                          #line 1406 
                          tmp_54 = tmp_53;
                        }
                        else 
                             #line 1406 
                             tmp_54 = 0U;
                        #line 1406 
                        tmp_55 = tmp_54;
                      }
                      else 
                           #line 1406 
                           tmp_55 = 0U;
                      #line 1406 
                      tmp_56 = tmp_55;
                    }
                    else 
                         #line 1406 
                         tmp_56 = 0U;
                    #line 1406 
                    tmp_57 = tmp_56;
                  }
                  else 
                       #line 1406 
                       tmp_57 = 0U;
                  #line 1406 
                  tmp_58 = tmp_57;
                }
                else 
                     #line 1406 
                     tmp_58 = 0U;
                #line 1406 
                tmp_59 = tmp_58;
              }
              else 
                   #line 1406 
                   tmp_59 = 0U;
              #line 1406 
              tmp_60 = tmp_59;
            }
            else 
                 #line 1406 
                 tmp_60 = 0U;
            #line 1406 
            tmp_61 = tmp_60;
          }
          else 
               #line 1406 
               tmp_61 = 2U;
          #line 1406 
          tmp_63 = tmp_61;
        }
        else {
          #line 1406 
          tmp_63 = (unsigned int)(1UL << (__ilog2_u32((unsigned int)(size + -1)) + 1));
        }
        #line 1406 
        tmp_64 = tmp_63;
      }
      else 
           #line 1406 
           tmp_64 = 1U;
      #line 1406 
      rxq->rx_buf_seg_size = tmp_64;
    }
    else {
      #line 1406 
      rxq->rx_buf_seg_size = (unsigned int)__roundup_pow_of_two((unsigned long)size);
    }
  }
  else {
    #line 1408 
    rxq->rx_buf_seg_size = 4096U;
    #line 1409 
    (edev->ndev)->features &= 18428729675200069631ULL;
  }
  #line 1413 
  size = 196608;
  #line 1414 
  rxq->sw_rx_ring = (struct sw_rx_data *)kzalloc_2((unsigned long)size,3264U);
  #line 1415 
  if (rxq->sw_rx_ring == (struct sw_rx_data *)0) {
    #line 1416 
    char *tmp_67;
    #line 1416 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1416 
                                                  tmp_67 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1416 
                                                                    tmp_67 = (char *)"";
    #line 1416 
    printk((char *)"\001",(char *)"qede_alloc_mem_rxq",1416,tmp_67);
    #line 1417 
    rc = -12;
    #line 1418 
    goto err;
  }
  #line 1422 
  rc = (*(((edev->ops)->common)->chain_alloc))(edev->cdev,(enum qed_chain_use_mode)QED_CHAIN_USE_TO_CONSUME_PRODUCE,(enum qed_chain_mode)QED_CHAIN_MODE_NEXT_PTR,(enum qed_chain_cnt_type)QED_CHAIN_CNT_TYPE_U16,8192U,8UL,& rxq->rx_bd_ring,(struct qed_chain_ext_pbl *)0);
  #line 1429 
  if (rc != 0) 
               #line 1430 
               goto err;
  #line 1433 
  rc = (*(((edev->ops)->common)->chain_alloc))(edev->cdev,(enum qed_chain_use_mode)QED_CHAIN_USE_TO_CONSUME,(enum qed_chain_mode)QED_CHAIN_MODE_PBL,(enum qed_chain_cnt_type)QED_CHAIN_CNT_TYPE_U16,8192U,32UL,& rxq->rx_comp_ring,(struct qed_chain_ext_pbl *)0);
  #line 1440 
  if (rc != 0) 
               #line 1441 
               goto err;
  #line 1444 
  rxq->filled_buffers = (unsigned short)0U;
  #line 1445 
  i = 0;
  #line 1445 
  while ((int)rxq->num_rx_buffers > i) {
    #line 1446 
    rc = qede_alloc_rx_buffer(rxq,(_Bool)0);
    #line 1447 
    if (rc != 0) {
      #line 1448 
      char *tmp_68;
      #line 1448 
      ;
      #line 1448 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1448 
                                                    tmp_68 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1448 
                                                                    tmp_68 = (char *)"";
      #line 1448 
      printk((char *)"\001",(char *)"qede_alloc_mem_rxq",1448,tmp_68,i);
      #line 1450 
      goto err;
    }
    #line 1445 
    i ++;
  }
  #line 1454 
  edev->gro_disable = (_Bool)(((edev->ndev)->features & 18014398509481984ULL) == 0ULL);
  #line 1455 
  if (! edev->gro_disable) 
                           #line 1456 
                           qede_set_tpa_param(rxq);
  #line 1457 
  err: 
       #line 1457 
  ;
  #line 1458 
  return rc;
}

#line 1461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_free_mem_txq(struct qede_dev *edev, struct qede_tx_queue *txq)
{
  #line 1464 
  if ((unsigned int)txq->is_xdp != 0U) 
                                       #line 1465 
                                       kfree((void *)txq->sw_tx_ring.xdp); else 
                                                                    #line 1467 
                                                                    kfree((void *)txq->sw_tx_ring.skbs);
  #line 1470 
  (*(((edev->ops)->common)->chain_free))(edev->cdev,& txq->tx_pbl);
  #line 1471 
  return;
}

#line 1474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_alloc_mem_txq(struct qede_dev *edev, struct qede_tx_queue *txq)
{
  #line 1476 
  union eth_tx_bd_types *p_virt;
  #line 1477 
  int size;
  #line 1477 
  int rc;
  #line 1479 
  txq->num_tx_buffers = edev->q_num_tx_buffers;
  #line 1482 
  if ((unsigned int)txq->is_xdp != 0U) {
    #line 1483 
    size = (int)((unsigned int)txq->num_tx_buffers * 16U);
    #line 1484 
    txq->sw_tx_ring.xdp = (struct sw_tx_xdp *)kzalloc_2((unsigned long)size,3264U);
    #line 1485 
    if (txq->sw_tx_ring.xdp == (struct sw_tx_xdp *)0) 
                                                      #line 1486 
                                                      goto err;
  }
  else {
    #line 1488 
    size = (int)((unsigned int)txq->num_tx_buffers * 16U);
    #line 1489 
    txq->sw_tx_ring.skbs = (struct sw_tx_bd *)kzalloc_2((unsigned long)size,3264U);
    #line 1490 
    if (txq->sw_tx_ring.skbs == (struct sw_tx_bd *)0) 
                                                      #line 1491 
                                                      goto err;
  }
  #line 1494 
  rc = (*(((edev->ops)->common)->chain_alloc))(edev->cdev,(enum qed_chain_use_mode)QED_CHAIN_USE_TO_CONSUME_PRODUCE,(enum qed_chain_mode)QED_CHAIN_MODE_PBL,(enum qed_chain_cnt_type)QED_CHAIN_CNT_TYPE_U16,(unsigned int)txq->num_tx_buffers,16UL,& txq->tx_pbl,(struct qed_chain_ext_pbl *)0);
  #line 1501 
  if (rc != 0) 
               #line 1502 
               goto err;
  #line 1504 
  return 0;
  #line 1506 
  err: 
       #line 1506 
  ;
  #line 1507 
  qede_free_mem_txq(edev,txq);
  #line 1508 
  return -12;
}

#line 1512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_free_mem_fp(struct qede_dev *edev, struct qede_fastpath *fp)
{
  #line 1514 
  qede_free_mem_sb(edev,fp->sb_info,(unsigned short)((int)fp->id));
  #line 1516 
  if (((unsigned long)fp->type & 2UL) != 0UL) 
                                              #line 1517 
                                              qede_free_mem_rxq(edev,fp->rxq);
  #line 1519 
  if (((unsigned long)fp->type & 4UL) != 0UL) 
                                              #line 1520 
                                              qede_free_mem_txq(edev,fp->xdp_tx);
  #line 1522 
  if (((unsigned long)fp->type & 1UL) != 0UL) {
    #line 1523 
    int cos;
    #line 1525 
    cos = 0;
    #line 1525 
    while ((int)edev->dev_info.num_tc > cos) {
      #line 1526 
      qede_free_mem_txq(edev,fp->txq + (unsigned long)cos);
      #line 1525 
      cos ++;
    }
  }
  #line 1528 
  return;
}

#line 1533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_alloc_mem_fp(struct qede_dev *edev, struct qede_fastpath *fp)
{
  #line 1535 
  int rc = 0;
  #line 1537 
  rc = qede_alloc_mem_sb(edev,fp->sb_info,(unsigned short)((int)fp->id));
  #line 1538 
  if (rc != 0) 
               #line 1539 
               goto out;
  #line 1541 
  if (((unsigned long)fp->type & 2UL) != 0UL) {
    #line 1542 
    rc = qede_alloc_mem_rxq(edev,fp->rxq);
    #line 1543 
    if (rc != 0) 
                 #line 1544 
                 goto out;
  }
  #line 1547 
  if (((unsigned long)fp->type & 4UL) != 0UL) {
    #line 1548 
    rc = qede_alloc_mem_txq(edev,fp->xdp_tx);
    #line 1549 
    if (rc != 0) 
                 #line 1550 
                 goto out;
  }
  #line 1553 
  if (((unsigned long)fp->type & 1UL) != 0UL) {
    #line 1554 
    int cos;
    #line 1556 
    cos = 0;
    #line 1556 
    while ((int)edev->dev_info.num_tc > cos) {
      #line 1557 
      rc = qede_alloc_mem_txq(edev,fp->txq + (unsigned long)cos);
      #line 1558 
      if (rc != 0) 
                   #line 1559 
                   goto out;
      #line 1556 
      cos ++;
    }
  }
  #line 1563 
  out: 
       #line 1563 
  ;
  #line 1564 
  return rc;
}

#line 1567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_free_mem_load(struct qede_dev *edev)
{
  #line 1569 
  int i;
  #line 1571 
  i = 0;
  #line 1571 
  while ((int)edev->num_queues > i) {
    {
      #line 1572 
      struct qede_fastpath *fp = edev->fp_array + (unsigned long)i;
      #line 1574 
      qede_free_mem_fp(edev,fp);
    }
    #line 1571 
    i ++;
  }
  #line 1576 
  return;
}

#line 1579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_alloc_mem_load(struct qede_dev *edev)
{
  #line 1581 
  int queue_id;
  #line 1581 
  int rc = 0;
  #line 1583 
  queue_id = 0;
  #line 1583 
  while ((int)edev->num_queues > queue_id) {
    {
      #line 1584 
      struct qede_fastpath *fp = edev->fp_array + (unsigned long)queue_id;
      #line 1586 
      rc = qede_alloc_mem_fp(edev,fp);
      #line 1587 
      if (rc != 0) {
        #line 1588 
        char *tmp;
        #line 1588 
        ;
        #line 1588 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1588 
                                                      tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1588 
                                                                    tmp = (char *)"";
        #line 1588 
        printk((char *)"\001",(char *)"qede_alloc_mem_load",1588,tmp,queue_id);
        #line 1591 
        qede_free_mem_load(edev);
        #line 1592 
        return rc;
      }
    }
    #line 1583 
    queue_id ++;
  }
  #line 1596 
  return 0;
}

#line 1599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_empty_tx_queue(struct qede_dev *edev, struct qede_tx_queue *txq)
{
  #line 1603 
  struct netdev_queue *netdev_txq;
  #line 1604 
  int rc;
  #line 1602 
  unsigned int pkts_compl = 0U;
  #line 1602 
  unsigned int bytes_compl = 0U;
  #line 1604 
  int len = 0;
  #line 1606 
  netdev_txq = netdev_get_tx_queue(edev->ndev,(unsigned int)txq->ndev_txq_id);
  #line 1608 
  while (1) {
    #line 1608 
    if (! ((int)qed_chain_get_cons_idx(& txq->tx_pbl) != (int)qed_chain_get_prod_idx(& txq->tx_pbl))) 
      #line 1608 
      break;
    #line 1610 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 16U) != 0U) != 0L) {
      #line 1610 
      u16 tmp;
      #line 1610 
      u16 tmp_0;
      #line 1610 
      char *tmp_1;
      #line 1610 
      tmp = qed_chain_get_prod_idx(& txq->tx_pbl);
      #line 1610 
      tmp_0 = qed_chain_get_cons_idx(& txq->tx_pbl);
      #line 1610 
      ;
      #line 1610 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1610 
                                                    tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1610 
                                                                    tmp_1 = (char *)"";
      #line 1610 
      printk((char *)"\001",(char *)"qede_empty_tx_queue",1610,tmp_1,txq->index,(int)tmp_0,(int)tmp);
    }
    #line 1615 
    rc = qede_free_tx_pkt(edev,txq,& len);
    #line 1616 
    if (rc != 0) {
      #line 1617 
      if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
        #line 1617 
        u16 tmp_2;
        #line 1617 
        u16 tmp_3;
        #line 1617 
        char *tmp_4;
        #line 1617 
        tmp_2 = qed_chain_get_prod_idx(& txq->tx_pbl);
        #line 1617 
        tmp_3 = qed_chain_get_cons_idx(& txq->tx_pbl);
        #line 1617 
        ;
        #line 1617 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1617 
                                                      tmp_4 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1617 
                                                                    tmp_4 = (char *)"";
        #line 1617 
        printk((char *)"\001",(char *)"qede_empty_tx_queue",1617,tmp_4,txq->index,(int)tmp_3,(int)tmp_2);
      }
      #line 1622 
      break;
    }
    #line 1625 
    bytes_compl += (unsigned int)len;
    #line 1626 
    pkts_compl ++;
    #line 1627 
    txq->sw_tx_cons = (u16)((int)txq->sw_tx_cons + 1);
  }
  #line 1630 
  netdev_tx_completed_queue_0(netdev_txq,pkts_compl,bytes_compl);
  #line 1631 
  return;
}

#line 1633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_empty_tx_queues(struct qede_dev *edev)
{
  #line 1635 
  int i;
  #line 1637 
  i = 0;
  #line 1637 
  while ((int)edev->num_queues > i) {
    #line 1638 
    if (((unsigned long)(edev->fp_array + (unsigned long)i)->type & 1UL) != 0UL) {
      #line 1639 
      int cos;
      #line 1641 
      cos = 0;
      #line 1641 
      while ((int)edev->dev_info.num_tc > cos) {
        {
          #line 1642 
          struct qede_fastpath *fp;
          #line 1644 
          fp = edev->fp_array + (unsigned long)i;
          #line 1645 
          qede_empty_tx_queue(edev,fp->txq + (unsigned long)cos);
        }
        #line 1641 
        cos ++;
      }
    }
    #line 1637 
    i ++;
  }
  #line 1649 
  return;
}

#line 1652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_init_fp(struct qede_dev *edev)
{
  #line 1654 
  int queue_id;
  #line 1655 
  struct qede_fastpath *fp;
  #line 1654 
  int rxq_index = 0;
  #line 1654 
  int txq_index = 0;
  #line 1657 
  queue_id = 0;
  #line 1657 
  while ((int)edev->num_queues > queue_id) {
    #line 1658 
    fp = edev->fp_array + (unsigned long)queue_id;
    #line 1660 
    fp->edev = edev;
    #line 1661 
    fp->id = (unsigned char)queue_id;
    #line 1663 
    if (((unsigned long)fp->type & 4UL) != 0UL) {
      #line 1664 
      (fp->xdp_tx)->index = (int)edev->dev_info.num_queues + rxq_index;
      #line 1666 
      (fp->xdp_tx)->is_xdp = (unsigned char)1U;
    }
    #line 1669 
    if (((unsigned long)fp->type & 2UL) != 0UL) {
      #line 1670 
      int tmp;
      #line 1670 
      tmp = rxq_index;
      #line 1670 
      rxq_index ++;
      #line 1670 
      (fp->rxq)->rxq_id = (unsigned char)tmp;
      #line 1673 
      if (((unsigned long)fp->type & 4UL) != 0UL) 
                                                  #line 1674 
                                                  (fp->rxq)->data_direction = (unsigned char)0U; else 
                                                                    #line 1676 
                                                                    (fp->rxq)->data_direction = (unsigned char)2U;
      #line 1677 
      (fp->rxq)->dev = & (edev->pdev)->dev;
      {
        #line 1680 
        int __ret_warn_on = xdp_rxq_info_reg(& (fp->rxq)->xdp_rxq,edev->ndev,
                         (unsigned int)(fp->rxq)->rxq_id) < 0;
        #line 1680 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 1681 
          ldv_inline_asm();
          #line 1682 
          ldv_inline_asm();
        }
        #line 1680 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 1684 
    if (((unsigned long)fp->type & 1UL) != 0UL) {
      #line 1685 
      int cos;
      #line 1687 
      cos = 0;
      #line 1687 
      while ((int)edev->dev_info.num_tc > cos) {
        {
          #line 1689 
          u16 ndev_tx_id;
          #line 1688 
          struct qede_tx_queue *txq = fp->txq + (unsigned long)cos;
          #line 1691 
          txq->cos = (unsigned short)cos;
          #line 1692 
          txq->index = txq_index;
          #line 1693 
          ndev_tx_id = (unsigned short)((int)((unsigned short)((int)edev->num_queues - (int)edev->fp_num_rx)) * (int)txq->cos + (int)((unsigned short)txq->index));
          #line 1694 
          txq->ndev_txq_id = ndev_tx_id;
          #line 1696 
          if ((int)edev->dev_info.is_legacy != 0) 
                                                  #line 1697 
                                                  txq->is_legacy = (_Bool)1;
          #line 1698 
          txq->dev = & (edev->pdev)->dev;
        }
        #line 1687 
        cos ++;
      }
      #line 1701 
      txq_index ++;
    }
    #line 1704 
    snprintf((char *)(& fp->name),24UL,(char *)"%s-fp-%d",(char *)(& (edev->ndev)->name),queue_id);
    #line 1657 
    queue_id ++;
  }
  #line 1707 
  return;
}

#line 1709  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_set_real_num_queues(struct qede_dev *edev)
{
  #line 1711 
  int rc = 0;
  #line 1713 
  rc = netif_set_real_num_tx_queues(edev->ndev,(unsigned int)(((int)edev->num_queues - (int)edev->fp_num_rx) * (int)edev->dev_info.num_tc));
  #line 1716 
  if (rc != 0) {
    #line 1717 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1717 
      char *tmp;
      #line 1717 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1717 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1717 
                                                                    tmp = (char *)"";
      #line 1717 
      printk((char *)"\001",(char *)"qede_set_real_num_queues",1717,tmp);
    }
    #line 1718 
    return rc;
  }
  #line 1721 
  rc = netif_set_real_num_rx_queues(edev->ndev,(unsigned int)((int)edev->num_queues - (int)edev->fp_num_tx));
  #line 1722 
  if (rc != 0) {
    #line 1723 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1723 
      char *tmp_0;
      #line 1723 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1723 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1723 
                                                                    tmp_0 = (char *)"";
      #line 1723 
      printk((char *)"\001",(char *)"qede_set_real_num_queues",1723,tmp_0);
    }
    #line 1724 
    return rc;
  }
  #line 1727 
  return 0;
}

#line 1730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_napi_disable_remove(struct qede_dev *edev)
{
  #line 1732 
  int i;
  #line 1734 
  i = 0;
  #line 1734 
  while ((int)edev->num_queues > i) {
    #line 1735 
    napi_disable(& (edev->fp_array + (unsigned long)i)->napi);
    #line 1737 
    netif_napi_del(& (edev->fp_array + (unsigned long)i)->napi);
    #line 1734 
    i ++;
  }
  #line 1739 
  return;
}

#line 1741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_napi_add_enable(struct qede_dev *edev)
{
  #line 1743 
  int i;
  #line 1746 
  i = 0;
  #line 1746 
  while ((int)edev->num_queues > i) {
    #line 1747 
    netif_napi_add(edev->ndev,& (edev->fp_array + (unsigned long)i)->napi,& qede_poll,64);
    #line 1749 
    napi_enable(& (edev->fp_array + (unsigned long)i)->napi);
    #line 1746 
    i ++;
  }
  #line 1751 
  return;
}

#line 1753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_sync_free_irqs(struct qede_dev *edev)
{
  #line 1755 
  int i;
  #line 1757 
  i = 0;
  #line 1757 
  while ((int)edev->int_info.used_cnt > i) {
    #line 1758 
    if ((unsigned int)edev->int_info.msix_cnt != 0U) {
      #line 1759 
      synchronize_irq((edev->int_info.msix + (unsigned long)i)->vector);
      #line 1760 
      cif_free_irq((edev->int_info.msix + (unsigned long)i)->vector,(void *)(edev->fp_array + (unsigned long)i));
    }
    else 
         #line 1763 
         (*(((edev->ops)->common)->simd_handler_clean))(edev->cdev,i);
    #line 1757 
    i ++;
  }
  #line 1767 
  edev->int_info.used_cnt = (unsigned char)0U;
  #line 1768 
  return;
}

#line 1770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_req_msix_irqs(struct qede_dev *edev)
{
  #line 1772 
  int i;
  #line 1772 
  int rc;
  #line 1775 
  if ((int)edev->num_queues > (int)((unsigned short)edev->int_info.msix_cnt)) {
    #line 1776 
    char *tmp;
    #line 1776 
    ;
    #line 1776 
    ;
    #line 1776 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1776 
                                                  tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1776 
                                                                    tmp = (char *)"";
    #line 1776 
    printk((char *)"\001",(char *)"qede_req_msix_irqs",1776,tmp,(int)edev->num_queues,(int)edev->int_info.msix_cnt);
    #line 1779 
    return -22;
  }
  #line 1782 
  i = 0;
  #line 1782 
  while ((int)edev->num_queues > i) {
    {
      #line 1784 
      struct qede_fastpath *fp = edev->fp_array + (unsigned long)i;
      #line 1786 
      if ((edev->ndev)->rx_cpu_rmap != (struct cpu_rmap *)0 && ((unsigned long)fp->type & 2UL) != 0UL) {
        #line 1787 
        rc = irq_cpu_rmap_add((edev->ndev)->rx_cpu_rmap,(int)(edev->int_info.msix + (unsigned long)i)->vector);
        #line 1789 
        if (rc != 0) {
          #line 1790 
          char *tmp_0;
          #line 1790 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 1790 
                                                        tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1790 
                                                                    tmp_0 = (char *)"";
          #line 1790 
          printk((char *)"\001",(char *)"qede_req_msix_irqs",1790,tmp_0);
          #line 1791 
          qede_free_arfs(edev);
        }
      }
      #line 1795 
      rc = cif_request_irq((edev->int_info.msix + (unsigned long)i)->vector,& qede_msix_fp_int,0UL,(char *)(& (edev->fp_array + (unsigned long)i)->name),(void *)(edev->fp_array + (unsigned long)i));
      #line 1798 
      if (rc != 0) {
        #line 1799 
        char *tmp_1;
        #line 1799 
        ;
        #line 1799 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1799 
                                                      tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1799 
                                                                    tmp_1 = (char *)"";
        #line 1799 
        printk((char *)"\001",(char *)"qede_req_msix_irqs",1799,tmp_1,i);
        #line 1800 
        qede_sync_free_irqs(edev);
        #line 1801 
        return rc;
      }
      #line 1803 
      if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 512U) != 0U) != 0L) {
        #line 1803 
        char *tmp_2;
        #line 1803 
        ;
        #line 1803 
        ;
        #line 1803 
        ;
        #line 1803 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1803 
                                                      tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1803 
                                                                    tmp_2 = (char *)"";
        #line 1803 
        printk((char *)"\001",(char *)"qede_req_msix_irqs",1803,tmp_2,(char *)(& (edev->fp_array + (unsigned long)i)->name),i,edev->fp_array + (unsigned long)i);
      }
      #line 1807 
      edev->int_info.used_cnt = (u8)((int)edev->int_info.used_cnt + 1);
    }
    #line 1782 
    i ++;
  }
  #line 1810 
  return 0;
}

#line 1813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_simd_fp_handler(void *cookie)
{
  #line 1815 
  struct qede_fastpath *fp = (struct qede_fastpath *)cookie;
  #line 1817 
  napi_schedule_irqoff(& fp->napi);
  #line 1818 
  return;
}

#line 1820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_setup_irqs(struct qede_dev *edev)
{
  #line 1822 
  int i;
  #line 1822 
  int rc = 0;
  #line 1825 
  rc = (*(((edev->ops)->common)->get_fp_int))(edev->cdev,& edev->int_info);
  #line 1826 
  if (rc != 0) 
               #line 1827 
               return rc;
  #line 1829 
  if ((unsigned int)edev->int_info.msix_cnt != 0U) {
    #line 1830 
    rc = qede_req_msix_irqs(edev);
    #line 1831 
    if (rc != 0) 
                 #line 1832 
                 return rc;
    #line 1833 
    (edev->ndev)->irq = (int)(edev->int_info.msix)->vector;
  }
  else {
    #line 1835 
    struct qed_common_ops *ops;
    #line 1838 
    ops = (edev->ops)->common;
    #line 1839 
    i = 0;
    #line 1839 
    while ((int)edev->num_queues > i) {
      #line 1840 
      (*(ops->simd_handler_config))(edev->cdev,(void *)(edev->fp_array + (unsigned long)i),i,& qede_simd_fp_handler);
      #line 1839 
      i ++;
    }
    #line 1843 
    edev->int_info.used_cnt = (unsigned char)edev->num_queues;
  }
  #line 1845 
  return 0;
}

#line 1848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_drain_txq(struct qede_dev *edev, struct qede_tx_queue *txq, bool allow_drain)
{
  #line 1851 
  int rc;
  #line 1851 
  int cnt = 1000;
  #line 1853 
  while ((int)txq->sw_tx_cons != (int)txq->sw_tx_prod) {
    #line 1854 
    if (cnt == 0) {
      #line 1855 
      if ((int)allow_drain != 0) {
        #line 1856 
        if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
          #line 1856 
          char *tmp;
          #line 1856 
          ;
          #line 1856 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 1856 
                                                        tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1856 
                                                                    tmp = (char *)"";
          #line 1856 
          printk((char *)"\001",(char *)"qede_drain_txq",1856,tmp,txq->index);
        }
        #line 1859 
        rc = (*(((edev->ops)->common)->drain))(edev->cdev);
        #line 1860 
        if (rc != 0) 
                     #line 1861 
                     return rc;
        #line 1862 
        return qede_drain_txq(edev,txq,(_Bool)0);
      }
      #line 1864 
      if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
        #line 1864 
        char *tmp_1;
        #line 1864 
        ;
        #line 1864 
        ;
        #line 1864 
        ;
        #line 1864 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1864 
                                                      tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1864 
                                                                    tmp_1 = (char *)"";
        #line 1864 
        printk((char *)"\001",(char *)"qede_drain_txq",1864,tmp_1,txq->index,(int)txq->sw_tx_prod,(int)txq->sw_tx_cons);
      }
      #line 1868 
      return -19;
    }
    #line 1870 
    cnt --;
    #line 1871 
    usleep_range(1000UL,2000UL);
    #line 1872 
    ldv_inline_asm();
  }
  #line 1876 
  usleep_range(1000UL,2000UL);
  #line 1878 
  return 0;
}

#line 1881  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_stop_txq(struct qede_dev *edev, struct qede_tx_queue *txq, int rss_id)
{
  #line 1885 
  (*(((edev->ops)->common)->db_recovery_del))(edev->cdev,txq->doorbell_addr,(void *)(& txq->tx_db));
  #line 1888 
  return (*((edev->ops)->q_tx_stop))(edev->cdev,
                                  (unsigned char)((int)((unsigned char)rss_id)),
                                  txq->handle);
}

#line 1891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_stop_queues(struct qede_dev *edev)
{
  #line 1893 
  struct qed_update_vport_params *vport_update_params;
  #line 1895 
  struct qede_fastpath *fp;
  #line 1896 
  int rc;
  #line 1896 
  int i;
  #line 1894 
  struct qed_dev *cdev = edev->cdev;
  #line 1899 
  vport_update_params = (struct qed_update_vport_params *)cif_vzalloc_0(1080UL);
  #line 1900 
  if (vport_update_params == (struct qed_update_vport_params *)0) 
                                                                  #line 1901 
                                                                  return -12;
  #line 1903 
  vport_update_params->vport_id = (unsigned char)0U;
  #line 1904 
  vport_update_params->update_vport_active_flg = (unsigned char)1U;
  #line 1905 
  vport_update_params->vport_active_flg = (unsigned char)0U;
  #line 1906 
  vport_update_params->update_rss_flg = (unsigned char)0U;
  #line 1908 
  rc = (*((edev->ops)->vport_update))(cdev,vport_update_params);
  #line 1909 
  cif_vfree_0((void *)vport_update_params);
  #line 1911 
  if (rc != 0) {
    #line 1912 
    char *tmp_0;
    #line 1912 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1912 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1912 
                                                                    tmp_0 = (char *)"";
    #line 1912 
    printk((char *)"\001",(char *)"qede_stop_queues",1912,tmp_0);
    #line 1913 
    return rc;
  }
  #line 1917 
  i = 0;
  #line 1917 
  while ((int)edev->num_queues > i) {
    #line 1918 
    fp = edev->fp_array + (unsigned long)i;
    #line 1920 
    if (((unsigned long)fp->type & 1UL) != 0UL) {
      #line 1921 
      int cos;
      #line 1923 
      cos = 0;
      #line 1923 
      while ((int)edev->dev_info.num_tc > cos) {
        #line 1924 
        rc = qede_drain_txq(edev,fp->txq + (unsigned long)cos,(_Bool)1);
        #line 1925 
        if (rc != 0) 
                     #line 1926 
                     return rc;
        #line 1923 
        cos ++;
      }
    }
    #line 1930 
    if (((unsigned long)fp->type & 4UL) != 0UL) {
      #line 1931 
      rc = qede_drain_txq(edev,fp->xdp_tx,(_Bool)1);
      #line 1932 
      if (rc != 0) 
                   #line 1933 
                   return rc;
    }
    #line 1917 
    i ++;
  }
  #line 1938 
  i = (int)edev->num_queues + -1;
  #line 1938 
  while (i >= 0) {
    #line 1939 
    fp = edev->fp_array + (unsigned long)i;
    #line 1942 
    if (((unsigned long)fp->type & 1UL) != 0UL) {
      #line 1943 
      int cos_0;
      #line 1945 
      cos_0 = 0;
      #line 1945 
      while ((int)edev->dev_info.num_tc > cos_0) {
        #line 1946 
        rc = qede_stop_txq(edev,fp->txq + (unsigned long)cos_0,i);
        #line 1947 
        if (rc != 0) 
                     #line 1948 
                     return rc;
        #line 1945 
        cos_0 ++;
      }
    }
    #line 1953 
    if (((unsigned long)fp->type & 2UL) != 0UL) {
      #line 1954 
      rc = (*((edev->ops)->q_rx_stop))(cdev,(unsigned char)((int)((unsigned char)i)),(fp->rxq)->handle);
      #line 1955 
      if (rc != 0) {
        #line 1956 
        char *tmp_1;
        #line 1956 
        ;
        #line 1956 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1956 
                                                      tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1956 
                                                                    tmp_1 = (char *)"";
        #line 1956 
        printk((char *)"\001",(char *)"qede_stop_queues",1956,tmp_1,i);
        #line 1957 
        return rc;
      }
    }
    #line 1962 
    if (((unsigned long)fp->type & 4UL) != 0UL) {
      #line 1963 
      rc = qede_stop_txq(edev,fp->xdp_tx,i);
      #line 1964 
      if (rc != 0) 
                   #line 1965 
                   return rc;
      #line 1967 
      bpf_prog_put((fp->rxq)->xdp_prog);
    }
    #line 1938 
    i --;
  }
  #line 1972 
  rc = (*((edev->ops)->vport_stop))(cdev,(unsigned char)0);
  #line 1973 
  if (rc != 0) {
    #line 1974 
    char *tmp_2;
    #line 1974 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1974 
                                                  tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1974 
                                                                    tmp_2 = (char *)"";
    #line 1974 
    printk((char *)"\001",(char *)"qede_stop_queues",1974,tmp_2);
  }
  #line 1976 
  return rc;
}

#line 1979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_start_txq(struct qede_dev *edev, struct qede_fastpath *fp, struct qede_tx_queue *txq, u8 rss_id, u16 sb_idx)
{
  #line 1985 
  struct qed_queue_start_common_params params;
  #line 1986 
  struct qed_txq_start_ret_params ret_params;
  #line 1987 
  int rc;
  #line 1983 
  dma_addr_t phys_table = qed_chain_get_pbl_phys(& txq->tx_pbl);
  #line 1984 
  u32 page_cnt = qed_chain_get_page_cnt(& txq->tx_pbl);
  #line 1989 
  memset((void *)(& params),0,24UL);
  #line 1990 
  memset((void *)(& ret_params),0,16UL);
  #line 1995 
  if ((unsigned int)txq->is_xdp != 0U) 
                                       #line 1996 
                                       params.queue_id = (unsigned short)((int)((unsigned short)txq->index) - (int)((unsigned short)edev->dev_info.num_queues)); else 
                                                                    #line 1998 
                                                                    params.queue_id = (unsigned short)txq->index;
  #line 2000 
  params.p_sb = fp->sb_info;
  #line 2001 
  params.sb_idx = (unsigned char)sb_idx;
  #line 2002 
  params.tc = (unsigned char)txq->cos;
  #line 2004 
  rc = (*((edev->ops)->q_tx_start))(edev->cdev,(unsigned char)((int)rss_id),& params,phys_table,(unsigned short)((int)((unsigned short)page_cnt)),& ret_params);
  #line 2006 
  if (rc != 0) {
    #line 2007 
    char *tmp_1;
    #line 2007 
    ;
    #line 2007 
    ;
    #line 2007 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2007 
                                                  tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2007 
                                                                    tmp_1 = (char *)"";
    #line 2007 
    printk((char *)"\001",(char *)"qede_start_txq",2007,tmp_1,txq->index,rc);
    #line 2008 
    return rc;
  }
  #line 2011 
  txq->doorbell_addr = ret_params.p_doorbell;
  #line 2012 
  txq->handle = ret_params.p_handle;
  #line 2015 
  txq->hw_cons_ptr = & ((fp->sb_info)->sb_virt)->pi_array[(int)sb_idx];
  #line 2018 
  txq->tx_db.data.params = (unsigned char)((unsigned int)txq->tx_db.data.params & 252U);
  #line 2018 
  txq->tx_db.data.params = txq->tx_db.data.params;
  #line 2019 
  txq->tx_db.data.params = (unsigned char)((unsigned int)txq->tx_db.data.params & 243U);
  #line 2019 
  txq->tx_db.data.params = (unsigned char)((unsigned int)txq->tx_db.data.params | 4U);
  #line 2020 
  txq->tx_db.data.params = (unsigned char)((unsigned int)txq->tx_db.data.params & 63U);
  #line 2020 
  txq->tx_db.data.params = (unsigned char)((unsigned int)txq->tx_db.data.params | 128U);
  #line 2022 
  txq->tx_db.data.agg_flags = (unsigned char)16U;
  #line 2025 
  rc = (*(((edev->ops)->common)->db_recovery_add))(edev->cdev,txq->doorbell_addr,(void *)(& txq->tx_db),(enum qed_db_rec_width)DB_REC_WIDTH_32B,(enum qed_db_rec_space)DB_REC_KERNEL);
  #line 2029 
  return rc;
}

#line 2032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_start_queues(struct qede_dev *edev, bool clear_stats)
{
  #line 2037 
  struct qed_update_vport_params *vport_update_params;
  #line 2038 
  struct qed_queue_start_common_params q_params;
  #line 2040 
  int rc;
  #line 2040 
  int i;
  #line 2034 
  int vlan_removal_en = 1;
  #line 2035 
  struct qed_dev *cdev = edev->cdev;
  #line 2036 
  struct qed_dev_info *qed_info = & edev->dev_info.common;
  #line 2039 
  struct qed_start_vport_params start = {.remove_inner_vlan = (_Bool)0, .handle_ptp_pkts = (_Bool)0, .gro_enable = (_Bool)0, .drop_ttl0 = (_Bool)0, .vport_id = (unsigned char)0, .mtu = (unsigned short)0, .clear_stats = (_Bool)0};
  #line 2042 
  if ((unsigned int)edev->num_queues == 0U) {
    #line 2043 
    char *tmp;
    #line 2043 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2043 
                                                  tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2043 
                                                                    tmp = (char *)"";
    #line 2043 
    printk((char *)"\001",(char *)"qede_start_queues",2043,tmp);
    #line 2045 
    return -22;
  }
  #line 2048 
  vport_update_params = (struct qed_update_vport_params *)cif_vzalloc_0(1080UL);
  #line 2049 
  if (vport_update_params == (struct qed_update_vport_params *)0) 
                                                                  #line 2050 
                                                                  return -12;
  #line 2052 
  start.handle_ptp_pkts = (_Bool)(edev->ptp != (struct qede_ptp *)0);
  #line 2053 
  start.gro_enable = (_Bool)(! ((int)edev->gro_disable != 0));
  #line 2054 
  start.mtu = (unsigned short)(edev->ndev)->mtu;
  #line 2055 
  start.vport_id = (unsigned char)0U;
  #line 2056 
  start.drop_ttl0 = (_Bool)1;
  #line 2057 
  start.remove_inner_vlan = (_Bool)(vlan_removal_en != 0);
  #line 2058 
  start.clear_stats = clear_stats;
  #line 2060 
  rc = (*((edev->ops)->vport_start))(cdev,& start);
  #line 2062 
  if (rc != 0) {
    #line 2063 
    char *tmp_1;
    #line 2063 
    ;
    #line 2063 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2063 
                                                  tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2063 
                                                                    tmp_1 = (char *)"";
    #line 2063 
    printk((char *)"\001",(char *)"qede_start_queues",2063,tmp_1,rc);
    #line 2064 
    goto out;
  }
  #line 2067 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 32U) != 0U) != 0L) {
    #line 2067 
    char *tmp_2;
    #line 2067 
    ;
    #line 2067 
    ;
    #line 2067 
    ;
    #line 2067 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2067 
                                                  tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2067 
                                                                    tmp_2 = (char *)"";
    #line 2067 
    printk((char *)"\001",(char *)"qede_start_queues",2067,tmp_2,(int)start.vport_id,(edev->ndev)->mtu + 14U,vlan_removal_en);
  }
  #line 2071 
  i = 0;
  #line 2071 
  while ((int)edev->num_queues > i) {
    {
      #line 2073 
      dma_addr_t p_phys_table;
      #line 2074 
      u32 page_cnt;
      #line 2072 
      struct qede_fastpath *fp = edev->fp_array + (unsigned long)i;
      #line 2076 
      if (((unsigned long)fp->type & 2UL) != 0UL) {
        #line 2077 
        struct qed_rxq_start_ret_params ret_params;
        #line 2079 
        __le16 *val;
        #line 2078 
        struct qede_rx_queue *rxq = fp->rxq;
        #line 2081 
        memset((void *)(& ret_params),0,16UL);
        #line 2082 
        memset((void *)(& q_params),0,24UL);
        #line 2083 
        q_params.queue_id = (unsigned short)rxq->rxq_id;
        #line 2084 
        q_params.vport_id = (unsigned char)0U;
        #line 2085 
        q_params.p_sb = fp->sb_info;
        #line 2086 
        q_params.sb_idx = (unsigned char)0U;
        #line 2088 
        p_phys_table = qed_chain_get_pbl_phys(& rxq->rx_comp_ring);
        #line 2090 
        page_cnt = qed_chain_get_page_cnt(& rxq->rx_comp_ring);
        #line 2092 
        rc = (*((edev->ops)->q_rx_start))(cdev,(unsigned char)((int)((unsigned char)i)),& q_params,(unsigned short)((int)((unsigned short)rxq->rx_buf_size)),rxq->rx_bd_ring.p_phys_addr,p_phys_table,(unsigned short)((int)((unsigned short)page_cnt)),& ret_params);
        #line 2097 
        if (rc != 0) {
          #line 2098 
          char *tmp_3;
          #line 2098 
          ;
          #line 2098 
          ;
          #line 2098 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 2098 
                                                        tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2098 
                                                                    tmp_3 = (char *)"";
          #line 2098 
          printk((char *)"\001",(char *)"qede_start_queues",2098,tmp_3,i,rc);
          #line 2100 
          goto out;
        }
        #line 2104 
        rxq->hw_rxq_prod_addr = ret_params.p_prod;
        #line 2105 
        rxq->handle = ret_params.p_handle;
        #line 2107 
        val = & ((fp->sb_info)->sb_virt)->pi_array[0];
        #line 2108 
        rxq->hw_cons_ptr = val;
        #line 2110 
        qede_update_rx_prod(edev,rxq);
      }
      #line 2113 
      if (((unsigned long)fp->type & 4UL) != 0UL) {
        #line 2114 
        rc = qede_start_txq(edev,fp,fp->xdp_tx,(unsigned char)((int)((unsigned char)i)),(unsigned short)11);
        #line 2115 
        if (rc != 0) 
                     #line 2116 
                     goto out;
        #line 2118 
        bpf_prog_add(edev->xdp_prog,1);
        #line 2119 
        (fp->rxq)->xdp_prog = edev->xdp_prog;
      }
      #line 2122 
      if (((unsigned long)fp->type & 1UL) != 0UL) {
        #line 2123 
        int cos;
        #line 2125 
        cos = 0;
        #line 2125 
        while ((int)edev->dev_info.num_tc > cos) {
          #line 2126 
          rc = qede_start_txq(edev,fp,fp->txq + (unsigned long)cos,(unsigned char)((int)((unsigned char)i)),(unsigned short)((int)((unsigned int)((unsigned short)cos) + 1U)));
          #line 2128 
          if (rc != 0) 
                       #line 2129 
                       goto out;
          #line 2125 
          cos ++;
        }
      }
    }
    #line 2071 
    i ++;
  }
  #line 2135 
  vport_update_params->vport_id = start.vport_id;
  #line 2136 
  vport_update_params->update_vport_active_flg = (unsigned char)1U;
  #line 2137 
  vport_update_params->vport_active_flg = (unsigned char)1U;
  #line 2139 
  if ((int)qed_info->b_inter_pf_switch != 0) 
                                             #line 2139 
                                             goto _LOR;
  else {
    #line 2139 
    if (pci_num_vf(edev->pdev) != 0) {
      #line 2139 
      _LOR: 
            #line 2139 
      ;
      #line 2139 
      if ((int)qed_info->tx_switching != 0) {
        #line 2141 
        vport_update_params->update_tx_switching_flg = (unsigned char)1U;
        #line 2142 
        vport_update_params->tx_switching_flg = (unsigned char)1U;
      }
    }
  }
  #line 2145 
  qede_fill_rss_params(edev,& vport_update_params->rss_params,& vport_update_params->update_rss_flg);
  #line 2148 
  rc = (*((edev->ops)->vport_update))(cdev,vport_update_params);
  #line 2149 
  if (rc != 0) {
    #line 2150 
    char *tmp_5;
    #line 2150 
    ;
    #line 2150 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2150 
                                                  tmp_5 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2150 
                                                                    tmp_5 = (char *)"";
    #line 2150 
    printk((char *)"\001",(char *)"qede_start_queues",2150,tmp_5,rc);
  }
  #line 2152 
  out: 
       #line 2152 
  ;
  #line 2153 
  cif_vfree_0((void *)vport_update_params);
  #line 2154 
  return rc;
}

#line 2162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_unload(struct qede_dev *edev, enum qede_unload_mode mode, bool is_locked)
{
  #line 2165 
  struct qed_link_params link_params;
  #line 2166 
  int rc;
  #line 2168 
  if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
    #line 2168 
    char *tmp;
    #line 2168 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2168 
                                                  tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2168 
                                                                    tmp = (char *)"";
    #line 2168 
    printk((char *)"\001",(char *)"qede_unload",2168,tmp);
  }
  #line 2170 
  if (! is_locked) 
                   #line 2171 
                   __qede_lock(edev);
  #line 2173 
  cif_clear_bit_2(1L,& edev->flags);
  #line 2175 
  if (mode != (unsigned int)QEDE_UNLOAD_RECOVERY) 
                                                  #line 2176 
                                                  edev->state = 0U;
  #line 2178 
  qede_rdma_dev_event_close(edev);
  #line 2181 
  netif_tx_disable(edev->ndev);
  #line 2182 
  netif_carrier_off(edev->ndev);
  #line 2184 
  if (mode != (unsigned int)QEDE_UNLOAD_RECOVERY) {
    #line 2186 
    memset((void *)(& link_params),0,36UL);
    #line 2187 
    link_params.link_up = (_Bool)0;
    #line 2188 
    (*(((edev->ops)->common)->set_link))(edev->cdev,& link_params);
    #line 2190 
    rc = qede_stop_queues(edev);
    #line 2191 
    if (rc != 0) {
      #line 2192 
      qede_sync_free_irqs(edev);
      #line 2193 
      goto out;
    }
    #line 2196 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 2196 
      char *tmp_0;
      #line 2196 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 2196 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2196 
                                                                    tmp_0 = (char *)"";
      #line 2196 
      printk((char *)"\001",(char *)"qede_unload",2196,tmp_0);
    }
  }
  #line 2199 
  qede_vlan_mark_nonconfigured(edev);
  #line 2200 
  (*((edev->ops)->fastpath_stop))(edev->cdev);
  #line 2202 
  if (! test_bit(0L,& edev->flags)) 
    #line 2202 
    if ((unsigned int)edev->dev_info.common.num_hwfns == 1U) {
      #line 2203 
      qede_poll_for_freeing_arfs_filters(edev);
      #line 2204 
      qede_free_arfs(edev);
    }
  #line 2208 
  qede_sync_free_irqs(edev);
  #line 2209 
  (*(((edev->ops)->common)->set_fp_int))(edev->cdev,(unsigned short)0);
  #line 2211 
  qede_napi_disable_remove(edev);
  #line 2213 
  if (mode == (unsigned int)QEDE_UNLOAD_RECOVERY) 
                                                  #line 2214 
                                                  qede_empty_tx_queues(edev);
  #line 2216 
  qede_free_mem_load(edev);
  #line 2217 
  qede_free_fp_array(edev);
  #line 2219 
  out: 
       #line 2219 
  ;
  #line 2220 
  if (! is_locked) 
                   #line 2221 
                   __qede_unlock(edev);
  #line 2223 
  if (mode != (unsigned int)QEDE_UNLOAD_RECOVERY) 
    #line 2224 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 2224 
      char *tmp_2;
      #line 2224 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 2224 
                                                    tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2224 
                                                                    tmp_2 = (char *)"";
      #line 2224 
      printk((char *)"\001",(char *)"qede_unload",2224,tmp_2);
    }
  #line 2226 
  edev->ptp_skip_txts = 0ULL;
  #line 2228 
  if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
    #line 2228 
    char *tmp_3;
    #line 2228 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2228 
                                                  tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2228 
                                                                    tmp_3 = (char *)"";
    #line 2228 
    printk((char *)"\001",(char *)"qede_unload",2228,tmp_3);
  }
  #line 2229 
  return;
}

#line 2237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_load(struct qede_dev *edev, enum qede_load_mode mode, bool is_locked)
{
  #line 2240 
  struct qed_link_params link_params;
  #line 2241 
  u8 num_tc;
  #line 2242 
  int rc;
  #line 2244 
  if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
    #line 2244 
    char *tmp;
    #line 2244 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2244 
                                                  tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2244 
                                                                    tmp = (char *)"";
    #line 2244 
    printk((char *)"\001",(char *)"qede_load",2244,tmp);
  }
  #line 2246 
  if (! is_locked) 
                   #line 2247 
                   __qede_lock(edev);
  #line 2249 
  rc = qede_set_num_queues(edev);
  #line 2250 
  if (rc != 0) 
               #line 2251 
               goto out;
  #line 2253 
  rc = qede_alloc_fp_array(edev);
  #line 2254 
  if (rc != 0) 
               #line 2255 
               goto out;
  #line 2257 
  qede_init_fp(edev);
  #line 2259 
  rc = qede_alloc_mem_load(edev);
  #line 2260 
  if (rc != 0) 
               #line 2261 
               goto err1;
  #line 2262 
  if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
    #line 2262 
    char *tmp_0;
    #line 2262 
    ;
    #line 2262 
    ;
    #line 2262 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2262 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2262 
                                                                    tmp_0 = (char *)"";
    #line 2262 
    printk((char *)"\001",(char *)"qede_load",2262,tmp_0,(int)edev->num_queues - (int)edev->fp_num_tx,(int)edev->num_queues - (int)edev->fp_num_rx);
  }
  #line 2265 
  rc = qede_set_real_num_queues(edev);
  #line 2266 
  if (rc != 0) 
               #line 2267 
               goto err2;
  #line 2269 
  if (! test_bit(0L,& edev->flags)) 
    #line 2269 
    if ((unsigned int)edev->dev_info.common.num_hwfns == 1U) {
      #line 2270 
      rc = qede_alloc_arfs(edev);
      #line 2271 
      if (rc != 0) 
        #line 2272 
        if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
          #line 2272 
          char *tmp_1;
          #line 2272 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 2272 
                                                        tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2272 
                                                                    tmp_1 = (char *)"";
          #line 2272 
          printk((char *)"\001",(char *)"qede_load",2272,tmp_1);
        }
    }
  #line 2275 
  qede_napi_add_enable(edev);
  #line 2276 
  if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
    #line 2276 
    char *tmp_3;
    #line 2276 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2276 
                                                  tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2276 
                                                                    tmp_3 = (char *)"";
    #line 2276 
    printk((char *)"\001",(char *)"qede_load",2276,tmp_3);
  }
  #line 2278 
  rc = qede_setup_irqs(edev);
  #line 2279 
  if (rc != 0) 
               #line 2280 
               goto err3;
  #line 2281 
  if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
    #line 2281 
    char *tmp_4;
    #line 2281 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2281 
                                                  tmp_4 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2281 
                                                                    tmp_4 = (char *)"";
    #line 2281 
    printk((char *)"\001",(char *)"qede_load",2281,tmp_4);
  }
  #line 2283 
  rc = qede_start_queues(edev,(_Bool)(mode != (unsigned int)QEDE_LOAD_RELOAD));
  #line 2284 
  if (rc != 0) 
               #line 2285 
               goto err4;
  #line 2286 
  if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
    #line 2286 
    char *tmp_5;
    #line 2286 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2286 
                                                  tmp_5 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2286 
                                                                    tmp_5 = (char *)"";
    #line 2286 
    printk((char *)"\001",(char *)"qede_load",2286,tmp_5);
  }
  #line 2288 
  num_tc = (unsigned char)netdev_get_num_tc(edev->ndev);
  #line 2289 
  if ((unsigned int)num_tc == 0U) 
                                  #line 2289 
                                  num_tc = edev->dev_info.num_tc; else 
                                                                    #line 2289 
                                                                    num_tc = num_tc;
  #line 2290 
  qede_setup_tc(edev->ndev,(unsigned char)((int)num_tc));
  #line 2293 
  qede_configure_vlan_filters(edev);
  #line 2295 
  cif_set_bit_2(1L,& edev->flags);
  #line 2298 
  memset((void *)(& link_params),0,36UL);
  #line 2299 
  link_params.link_up = (_Bool)1;
  #line 2300 
  (*(((edev->ops)->common)->set_link))(edev->cdev,& link_params);
  #line 2302 
  edev->state = 1U;
  #line 2304 
  if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
    #line 2304 
    char *tmp_7;
    #line 2304 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2304 
                                                  tmp_7 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2304 
                                                                    tmp_7 = (char *)"";
    #line 2304 
    printk((char *)"\001",(char *)"qede_load",2304,tmp_7);
  }
  #line 2306 
  goto out;
  #line 2307 
  err4: 
        #line 2307 
  ;
  #line 2308 
  qede_sync_free_irqs(edev);
  #line 2309 
  memset((void *)(& edev->int_info.msix_cnt),0,16UL);
  #line 2310 
  err3: 
        #line 2310 
  ;
  #line 2311 
  qede_napi_disable_remove(edev);
  #line 2312 
  err2: 
        #line 2312 
  ;
  #line 2313 
  qede_free_mem_load(edev);
  #line 2314 
  err1: 
        #line 2314 
  ;
  #line 2315 
  (*(((edev->ops)->common)->set_fp_int))(edev->cdev,(unsigned short)0);
  #line 2316 
  qede_free_fp_array(edev);
  #line 2317 
  edev->num_queues = (unsigned short)0U;
  #line 2318 
  edev->fp_num_tx = (unsigned char)0U;
  #line 2319 
  edev->fp_num_rx = (unsigned char)0U;
  #line 2320 
  out: 
       #line 2320 
  ;
  #line 2321 
  if (! is_locked) 
                   #line 2322 
                   __qede_unlock(edev);
  #line 2324 
  return rc;
}

#line 2330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
void qede_reload(struct qede_dev *edev, struct qede_reload_args *args, bool is_locked)
{
  #line 2333 
  if (! is_locked) 
                   #line 2334 
                   __qede_lock(edev);
  #line 2340 
  if (edev->state == 1U) {
    #line 2341 
    qede_unload(edev,(enum qede_unload_mode)QEDE_UNLOAD_NORMAL,(_Bool)1);
    #line 2342 
    if (args != (struct qede_reload_args *)0) 
                                              #line 2343 
                                              (*(args->func))(edev,args);
    #line 2344 
    qede_load(edev,(enum qede_load_mode)QEDE_LOAD_RELOAD,(_Bool)1);
    #line 2347 
    qede_config_rx_mode(edev->ndev);
  }
  else 
    #line 2348 
    if (args != (struct qede_reload_args *)0) 
                                              #line 2349 
                                              (*(args->func))(edev,args);
  #line 2352 
  if (! is_locked) 
                   #line 2353 
                   __qede_unlock(edev);
  #line 2354 
  return;
}

#line 2357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_open(struct net_device *ndev)
{
  #line 2360 
  int rc;
  #line 2359 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 2362 
  netif_carrier_off(ndev);
  #line 2364 
  (*(((edev->ops)->common)->set_power_state))(edev->cdev,0);
  #line 2366 
  rc = qede_load(edev,(enum qede_load_mode)QEDE_LOAD_NORMAL,(_Bool)0);
  #line 2367 
  if (rc != 0) 
               #line 2368 
               return rc;
  #line 2370 
  udp_tunnel_get_rx_info(ndev);
  #line 2372 
  (*(((edev->ops)->common)->update_drv_state))(edev->cdev,(_Bool)1);
  #line 2374 
  return 0;
}

#line 2377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static int qede_close(struct net_device *ndev)
{
  #line 2379 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 2381 
  qede_unload(edev,(enum qede_unload_mode)QEDE_UNLOAD_NORMAL,(_Bool)0);
  #line 2383 
  (*(((edev->ops)->common)->update_drv_state))(edev->cdev,(_Bool)0);
  #line 2385 
  return 0;
}

#line 2388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_link_update(void *dev, struct qed_link_output *link)
{
  #line 2390 
  struct qede_dev *edev = (struct qede_dev *)dev;
  #line 2392 
  if (! test_bit(1L,& edev->flags)) {
    #line 2393 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 4U) != 0U) != 0L) {
      #line 2393 
      char *tmp;
      #line 2393 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 2393 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2393 
                                                                    tmp = (char *)"";
      #line 2393 
      printk((char *)"\001",(char *)"qede_link_update",2393,tmp);
    }
    #line 2394 
    return;
  }
  #line 2397 
  if ((int)link->link_up != 0) {
    #line 2398 
    if (! netif_carrier_ok(edev->ndev)) {
      #line 2399 
      if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
        #line 2399 
        char *tmp_1;
        #line 2399 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 2399 
                                                      tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2399 
                                                                    tmp_1 = (char *)"";
        #line 2399 
        printk((char *)"\001",(char *)"qede_link_update",2399,tmp_1);
      }
      #line 2400 
      netif_tx_start_all_queues(edev->ndev);
      #line 2401 
      netif_carrier_on(edev->ndev);
      #line 2402 
      qede_rdma_dev_event_open(edev);
    }
  }
  else {
    #line 2405 
    if ((int)netif_carrier_ok(edev->ndev) != 0) {
      #line 2406 
      if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
        #line 2406 
        char *tmp_3;
        #line 2406 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 2406 
                                                      tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2406 
                                                                    tmp_3 = (char *)"";
        #line 2406 
        printk((char *)"\001",(char *)"qede_link_update",2406,tmp_3);
      }
      #line 2407 
      netif_tx_disable(edev->ndev);
      #line 2408 
      netif_carrier_off(edev->ndev);
      #line 2409 
      qede_rdma_dev_event_close(edev);
    }
  }
  #line 2411 
  return;
}

#line 2414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_schedule_recovery_handler(void *dev)
{
  #line 2416 
  struct qede_dev *edev = (struct qede_dev *)dev;
  #line 2418 
  if (edev->state == 2U) {
    #line 2419 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 2419 
      char *tmp;
      #line 2419 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 2419 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2419 
                                                                    tmp = (char *)"";
      #line 2419 
      printk((char *)"\001",(char *)"qede_schedule_recovery_handler",2419,tmp);
    }
    #line 2421 
    return;
  }
  #line 2424 
  cif_set_bit_2(0L,& edev->sp_flags);
  #line 2425 
  cif_schedule_delayed_work_0(& edev->sp_task,0UL);
  #line 2427 
  if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
    #line 2427 
    char *tmp_0;
    #line 2427 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2427 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2427 
                                                                    tmp_0 = (char *)"";
    #line 2427 
    printk((char *)"\001",(char *)"qede_schedule_recovery_handler",2427,tmp_0);
  }
  #line 2428 
  return;
}

#line 2430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_recovery_failed(struct qede_dev *edev)
{
  #line 2432 
  netdev_err(edev->ndev,(char *)"Recovery handling has failed. Power cycle is needed.\n");
  #line 2434 
  netif_device_detach(edev->ndev);
  #line 2436 
  if (edev->cdev != (struct qed_dev *)0) 
                                         #line 2437 
                                         (*(((edev->ops)->common)->set_power_state))(edev->cdev,3);
  #line 2438 
  return;
}

#line 2440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_recovery_handler(struct qede_dev *edev)
{
  #line 2443 
  int rc;
  #line 2442 
  u32 curr_state = edev->state;
  #line 2445 
  if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
    #line 2445 
    char *tmp;
    #line 2445 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2445 
                                                  tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2445 
                                                                    tmp = (char *)"";
    #line 2445 
    printk((char *)"\001",(char *)"qede_recovery_handler",2445,tmp);
  }
  #line 2450 
  edev->state = 2U;
  #line 2452 
  (*(((edev->ops)->common)->recovery_prolog))(edev->cdev);
  #line 2454 
  if (curr_state == 1U) 
                        #line 2455 
                        qede_unload(edev,(enum qede_unload_mode)QEDE_UNLOAD_RECOVERY,(_Bool)1);
  #line 2457 
  __qede_remove(edev->pdev,(enum qede_remove_mode)QEDE_REMOVE_RECOVERY);
  #line 2459 
  ;
  #line 2459 
  ;
  #line 2459 
  ;
  #line 2459 
  rc = __qede_probe(edev->pdev,edev->dp_module,(unsigned char)((int)edev->dp_level),(_Bool)((bool)((int)test_bit(0L,& edev->flags)) != 0),(enum qede_probe_mode)QEDE_PROBE_RECOVERY);
  #line 2461 
  if (rc != 0) {
    #line 2462 
    edev->cdev = (struct qed_dev *)0;
    #line 2463 
    goto err;
  }
  #line 2466 
  if (curr_state == 1U) {
    #line 2467 
    rc = qede_load(edev,(enum qede_load_mode)QEDE_LOAD_RECOVERY,(_Bool)1);
    #line 2468 
    if (rc != 0) 
                 #line 2469 
                 goto err;
    #line 2471 
    qede_config_rx_mode(edev->ndev);
    #line 2472 
    udp_tunnel_get_rx_info(edev->ndev);
  }
  #line 2475 
  edev->state = curr_state;
  #line 2477 
  if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
    #line 2477 
    char *tmp_1;
    #line 2477 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2477 
                                                  tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2477 
                                                                    tmp_1 = (char *)"";
    #line 2477 
    printk((char *)"\001",(char *)"qede_recovery_handler",2477,tmp_1);
  }
  #line 2479 
  return;
  #line 2481 
  err: 
       #line 2481 
  ;
  #line 2482 
  qede_recovery_failed(edev);
  #line 2483 
  return;
}

#line 2485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static bool qede_is_txq_full(struct qede_dev *edev, struct qede_tx_queue *txq)
{
  #line 2487 
  struct netdev_queue *netdev_txq;
  #line 2489 
  netdev_txq = netdev_get_tx_queue(edev->ndev,(unsigned int)txq->ndev_txq_id);
  #line 2490 
  if ((int)netif_xmit_stopped(netdev_txq) != 0) 
                                                #line 2491 
                                                return (_Bool)1;
  #line 2493 
  return (_Bool)0;
}

#line 2496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_get_generic_tlv_data(void *dev, struct qed_generic_tlvs *data)
{
  #line 2513 
  void *__mptr;
  #line 2499 
  struct netdev_hw_addr *ha;
  #line 2500 
  int i;
  #line 2498 
  struct qede_dev *edev = (struct qede_dev *)dev;
  #line 2502 
  if (((edev->ndev)->features & 2ULL) != 0ULL) 
                                               #line 2503 
                                               data->feat_flags = (unsigned short)((unsigned int)data->feat_flags | 1U);
  #line 2504 
  if (((edev->ndev)->features & 65536ULL) != 0ULL) 
                                                   #line 2505 
                                                   data->feat_flags = (unsigned short)((unsigned int)data->feat_flags | 2U);
  #line 2507 
  ether_addr_copy((u8 *)(& data->mac[0]),(edev->ndev)->dev_addr);
  #line 2508 
  memset((void *)(& data->mac[1]),0,6UL);
  #line 2509 
  memset((void *)(& data->mac[2]),0,6UL);
  #line 2511 
  netif_addr_lock_bh_0(edev->ndev);
  #line 2512 
  i = 1;
  #line 2513 
  __mptr = (void *)(edev->ndev)->uc.list.next;
  #line 2513 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 2513 
  while (& ha->list != & (edev->ndev)->uc.list) {
    #line 2513 
    void *__mptr_0;
    {
      #line 2514 
      int tmp_1;
      #line 2514 
      ;
      #line 2514 
      tmp_1 = i;
      #line 2514 
      i ++;
      #line 2514 
      ;
      #line 2514 
      ether_addr_copy((u8 *)(& data->mac[tmp_1]),(u8 *)(& ha->addr));
      #line 2515 
      if (i == 3) 
                  #line 2516 
                  break;
    }
    #line 2513 
    __mptr_0 = (void *)ha->list.next;
    #line 2513 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 2519 
  netif_addr_unlock_bh_0(edev->ndev);
  #line 2520 
  return;
}

#line 2522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_main.c"
static void qede_get_eth_tlv_data(void *dev, void *data)
{
  #line 2526 
  struct qede_fastpath *fp;
  #line 2527 
  int i;
  #line 2524 
  struct qed_mfw_tlv_eth *etlv = (struct qed_mfw_tlv_eth *)data;
  #line 2525 
  struct qede_dev *edev = (struct qede_dev *)dev;
  #line 2529 
  etlv->lso_maxoff_size = (unsigned short)65535U;
  #line 2530 
  etlv->lso_maxoff_size_set = (_Bool)1;
  #line 2531 
  etlv->lso_minseg_size = (unsigned short)9700U;
  #line 2532 
  etlv->lso_minseg_size_set = (_Bool)1;
  #line 2533 
  etlv->prom_mode = (unsigned char)(((edev->ndev)->flags & 256U) != 0U);
  #line 2534 
  etlv->prom_mode_set = (_Bool)1;
  #line 2535 
  etlv->tx_descr_size = (unsigned short)((int)edev->num_queues - (int)((unsigned short)edev->fp_num_rx));
  #line 2536 
  etlv->tx_descr_size_set = (_Bool)1;
  #line 2537 
  etlv->rx_descr_size = (unsigned short)((int)edev->num_queues - (int)((unsigned short)edev->fp_num_tx));
  #line 2538 
  etlv->rx_descr_size_set = (_Bool)1;
  #line 2539 
  etlv->iov_offload = (unsigned char)2U;
  #line 2540 
  etlv->iov_offload_set = (_Bool)1;
  #line 2545 
  etlv->txqs_empty = (unsigned char)1U;
  #line 2546 
  etlv->rxqs_empty = (unsigned char)1U;
  #line 2547 
  etlv->num_txqs_full = (unsigned char)0U;
  #line 2548 
  etlv->num_rxqs_full = (unsigned char)0U;
  #line 2550 
  __qede_lock(edev);
  #line 2551 
  i = 0;
  #line 2551 
  while ((int)edev->num_queues > i) {
    #line 2552 
    fp = edev->fp_array + (unsigned long)i;
    #line 2553 
    if (((unsigned long)fp->type & 1UL) != 0UL) {
      #line 2554 
      struct qede_tx_queue *txq = fp->txq;
      #line 2556 
      if ((int)txq->sw_tx_cons != (int)txq->sw_tx_prod) 
                                                        #line 2557 
                                                        etlv->txqs_empty = (unsigned char)0U;
      #line 2558 
      if ((int)qede_is_txq_full(edev,txq) != 0) 
                                                #line 2559 
                                                etlv->num_txqs_full = (u8)((int)etlv->num_txqs_full + 1);
    }
    #line 2561 
    if (((unsigned long)fp->type & 2UL) != 0UL) {
      #line 2562 
      if ((int)qede_has_rx_work(fp->rxq) != 0) 
                                               #line 2563 
                                               etlv->rxqs_empty = (unsigned char)0U;
      #line 2569 
      ;
      #line 2569 
      if ((int)*((fp->rxq)->hw_cons_ptr) - (int)qed_chain_get_cons_idx(& (fp->rxq)->rx_comp_ring) > 8092) 
        #line 2572 
        etlv->num_rxqs_full = (u8)((int)etlv->num_rxqs_full + 1);
    }
    #line 2551 
    i ++;
  }
  #line 2575 
  __qede_unlock(edev);
  #line 2577 
  etlv->txqs_empty_set = (_Bool)1;
  #line 2578 
  etlv->rxqs_empty_set = (_Bool)1;
  #line 2579 
  etlv->num_txqs_full_set = (_Bool)1;
  #line 2580 
  etlv->num_rxqs_full_set = (_Bool)1;
  #line 2581 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
int (*emg_alias_eth_validate_addr)(struct net_device *) = & eth_validate_addr;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
struct pci_driver *emg_alias_qede_pci_driver = & qede_pci_driver;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
struct pci_device_id (*emg_alias_qede_pci_tbl)[10U] = & qede_pci_tbl;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 99 
#line 99 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 100 
#line 100 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 101 
#line 101 
void emg_free_netdev(struct net_device *arg0);
#line 102 
#line 102 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 104 
#line 104 
int emg_register_netdev(struct net_device *arg0);
#line 105 
#line 105 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 108 
#line 108 
void emg_unregister_netdev(struct net_device *arg0);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
int emg_wrapper_qede_close(struct net_device *arg0)
{
  #line 113 
  return qede_close(arg0);
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
void emg_wrapper_qede_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 118 
  qede_get_stats64(arg0,arg1);
  #line 119 
  return;
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
int emg_wrapper_qede_get_vf_config(struct net_device *arg0, int arg1, struct ifla_vf_info *arg2)
{
  #line 123 
  return qede_get_vf_config(arg0,arg1,arg2);
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
int emg_wrapper_qede_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 128 
  return qede_ioctl(arg0,arg1,arg2);
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
int emg_wrapper_qede_open(struct net_device *arg0)
{
  #line 133 
  return qede_open(arg0);
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
int emg_wrapper_qede_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 138 
  return qede_probe(arg0,arg1);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
void emg_wrapper_qede_remove(struct pci_dev *arg0)
{
  #line 143 
  qede_remove(arg0);
  #line 144 
  return;
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
int emg_wrapper_qede_set_vf_link_state(struct net_device *arg0, int arg1, int arg2)
{
  #line 148 
  return qede_set_vf_link_state(arg0,arg1,arg2);
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
int emg_wrapper_qede_set_vf_mac(struct net_device *arg0, int arg1, unsigned char *arg2)
{
  #line 153 
  return qede_set_vf_mac(arg0,arg1,arg2);
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
int emg_wrapper_qede_set_vf_rate(struct net_device *arg0, int arg1, int arg2, int arg3)
{
  #line 158 
  return qede_set_vf_rate(arg0,arg1,arg2,arg3);
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
int emg_wrapper_qede_set_vf_spoofchk(struct net_device *arg0, int arg1, _Bool arg2)
{
  #line 163 
  return qede_set_vf_spoofchk(arg0,arg1,(_Bool)((bool)((int)arg2) != 0));
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
int emg_wrapper_qede_set_vf_trust(struct net_device *arg0, int arg1, _Bool arg2)
{
  #line 168 
  return qede_set_vf_trust(arg0,arg1,(_Bool)((bool)((int)arg2) != 0));
}

#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
int emg_wrapper_qede_set_vf_vlan(struct net_device *arg0, int arg1, unsigned short arg2, unsigned char arg3, unsigned short arg4)
{
  #line 173 
  return qede_set_vf_vlan(arg0,arg1,(unsigned short)((int)arg2),
                       (unsigned char)((int)arg3),
                       (unsigned short)((int)arg4));
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
int emg_wrapper_qede_setup_tc_offload(struct net_device *arg0, enum tc_setup_type arg1, void *arg2)
{
  #line 178 
  return qede_setup_tc_offload(arg0,arg1,arg2);
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
void emg_wrapper_qede_shutdown(struct pci_dev *arg0)
{
  #line 183 
  qede_shutdown(arg0);
  #line 184 
  return;
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
int emg_wrapper_qede_sriov_configure(struct pci_dev *arg0, int arg1)
{
  #line 188 
  return qede_sriov_configure(arg0,arg1);
}

#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
void emg_qede_cleanup(void)
{
  #line 193 
  qede_cleanup();
  #line 194 
  return;
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
int emg_qede_init(void)
{
  #line 197 
  return qede_init();
}

#line 215  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr)
{
  #line 218 
  ldv_set_bit(nr,addr);
  #line 219 
  return;
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_clear_bit_2(long nr, unsigned long *addr)
{
  #line 225 
  ldv_clear_bit(nr,addr);
  #line 226 
  return;
}

#line 229  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void INIT_LIST_HEAD_2(struct list_head *list)
{
  #line 232 
  ldv_init_list_head(list);
  #line 233 
  return;
}

#line 243  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static size_t cif_strlen(char *s)
{
  #line 246 
  return ldv_strlen(s);
}

#line 559  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 562 
  return ldv_kcalloc(n,size,flags);
}

#line 580  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags)
{
  #line 583 
  return ldv_kzalloc(size,flags);
}

#line 641  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue_0(spinlock_t *lock)
{
  #line 644 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 646 
  spin_lock_0(lock);
  #line 647 
  return;
}

#line 681  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue_0(spinlock_t *lock)
{
  #line 684 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 686 
  spin_unlock_0(lock);
  #line 687 
  return;
}

#line 726  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device_0(spinlock_t *lock)
{
  #line 729 
  ldv_spin_model_lock((char *)"addr_list_lock_of_net_device");
  #line 731 
  spin_lock_bh_1(lock);
  #line 732 
  return;
}

#line 744  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device_0(spinlock_t *lock)
{
  #line 747 
  ldv_spin_model_unlock((char *)"addr_list_lock_of_net_device");
  #line 749 
  spin_unlock_bh_1(lock);
  #line 750 
  return;
}

#line 902  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static int cif_strcmp(char *cs, char *ct)
{
  #line 905 
  return ldv_strcmp(cs,ct);
}

#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void *cif_vzalloc_0(unsigned long size)
{
  #line 937 
  return ldv_vzalloc(size);
}

#line 941  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_vfree_0(void *addr)
{
  #line 944 
  ldv_vfree(addr);
  #line 945 
  return;
}

#line 948  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 952 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 956  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 960 
  emg_pci_unregister_driver(dev);
  #line 961 
  return;
}

#line 964  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 968 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 972  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_mutex_lock_qede_lock_of_qede_dev(struct mutex *lock)
{
  #line 975 
  ldv_mutex_model_lock(lock,(char *)"qede_lock_of_qede_dev");
  #line 976 
  return;
}

#line 979  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_mutex_unlock_qede_lock_of_qede_dev(struct mutex *lock)
{
  #line 982 
  ldv_mutex_model_unlock(lock,(char *)"qede_lock_of_qede_dev");
  #line 983 
  return;
}

#line 986  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 990 
  return emg_register_netdev(dev);
}

#line 994  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 998 
  emg_free_netdev(dev);
  #line 999 
  return;
}

#line 1002  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1006 
  emg_unregister_netdev(dev);
  #line 1007 
  return;
}

#line 1010  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 1014 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 1018  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 1022 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 1026  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_main.i.aux"
static bool cif_schedule_delayed_work_0(struct delayed_work *dwork, unsigned long delay)
{
  #line 1030 
  return emg_schedule_delayed_work(dwork,delay);
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 339  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
static void cif_clear_bit_3(long nr, unsigned long *addr);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 63 
char *strcpy(char *, char *);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 360  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
static size_t cif_strlen_0(char *s);
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 409  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27 
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 60 
unsigned long msleep_interruptible(unsigned int);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 964  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
static void *cif_vzalloc_1(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 971  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
static void cif_vfree_1(void *addr);
#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1023 
void consume_skb(struct sk_buff *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable_0(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit_3(0L,& n->state);
  #line 517 
  cif_clear_bit_3(3L,& n->state);
  #line 518 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static struct __anonstruct_qede_rqstats_arr_6566 qede_rqstats_arr[5U] = {{.offset = 2856ULL, .string = {(char)'r', (char)'c', (char)'v', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}}, {.offset = 2864ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.offset = 2872ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.offset = 2880ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'i', (char)'p', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'s'}}, {.offset = 2888ULL, .string = {(char)'x', (char)'d', (char)'p', (char)'_', (char)'n', (char)'o', (char)'_', (char)'p', (char)'a', (char)'s', (char)'s'}}};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static struct __anonstruct_qede_tqstats_arr_6567 qede_tqstats_arr[3U] = {{.offset = 8ULL, .string = {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}}, {.offset = 16ULL, .string = {(char)'s', (char)'t', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'c', (char)'n', (char)'t'}}, {.offset = 24ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'e', (char)'m', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r'}}};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static struct __anonstruct_qede_stats_arr_6568 qede_stats_arr[66U] = {{.offset = 24ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.offset = 32ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.offset = 40ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.offset = 48ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}}, {.offset = 56ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}}, {.offset = 64ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}}, {.offset = 96ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.offset = 104ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.offset = 112ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.offset = 120ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}}, {.offset = 128ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}}, {.offset = 136ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}}, {.offset = 208ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 1UL}, {.offset = 216ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 1UL}, {.offset = 224ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 1UL}, {.offset = 232ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 1UL}, {.offset = 240ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 1UL}, {.offset = 248ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 1UL}, {.offset = 424ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'5', (char)'2', (char)'2', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 3UL}, {.offset = 432ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'0', (char)'4', (char)'7', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 3UL}, {.offset = 440ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'2', (char)'0', (char)'4', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'4', (char)'0', (char)'9', (char)'5', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 3UL}, {.offset = 448ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'4', (char)'0', (char)'9', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'9', (char)'2', (char)'1', (char)'6', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 3UL}, {.offset = 456ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'9', (char)'2', (char)'1', (char)'7', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'6', (char)'3', (char)'8', (char)'3', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 3UL}, {.offset = 424ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'t', (char)'o', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 5UL}, {.offset = 336ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'6', (char)'4', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 1UL}, {.offset = 344ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'6', (char)'5', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 1UL}, {.offset = 352ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 1UL}, {.offset = 360ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 1UL}, {.offset = 368ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 1UL}, {.offset = 376ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 1UL}, {.offset = 464ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'0', (char)'4', (char)'7', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 3UL}, {.offset = 472ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'2', (char)'0', (char)'4', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'4', (char)'0', (char)'9', (char)'5', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 3UL}, {.offset = 480ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'4', (char)'0', (char)'9', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'9', (char)'2', (char)'1', (char)'6', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 3UL}, {.offset = 488ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'9', (char)'2', (char)'1', (char)'7', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'6', (char)'3', (char)'8', (char)'3', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 3UL}, {.offset = 432ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'t', (char)'o', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 5UL}, {.offset = 264ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'c', (char)'r', (char)'t', (char)'l', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .attr = 1UL}, {.offset = 416ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .attr = 1UL}, {.offset = 272ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .attr = 1UL}, {.offset = 384ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .attr = 1UL}, {.offset = 280ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .attr = 1UL}, {.offset = 392ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'f', (char)'c', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .attr = 1UL}, {.offset = 256ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .attr = 1UL}, {.offset = 288ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .attr = 1UL}, {.offset = 296ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .attr = 1UL}, {.offset = 304ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 1UL}, {.offset = 312ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'s'}, .attr = 1UL}, {.offset = 320ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, .attr = 1UL}, {.offset = 328ULL, .string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'m', (char)'e', (char)'n', (char)'t', (char)'s'}, .attr = 1UL}, {.offset = 496ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'l', (char)'p', (char)'i', (char)'_', (char)'e', (char)'n', (char)'t', (char)'r', (char)'y', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t'}, .attr = 3UL}, {.offset = 504ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, .attr = 3UL}, {.offset = 400ULL, .string = {(char)'b', (char)'r', (char)'b', (char)'_', (char)'t', (char)'r', (char)'u', (char)'n', (char)'c', (char)'a', (char)'t', (char)'e', (char)'s'}, .attr = 1UL}, {.offset = 408ULL, .string = {(char)'b', (char)'r', (char)'b', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'s'}, .attr = 1UL}, {.string = {(char)'n', (char)'o', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'s'}}, {.offset = 72ULL, .string = {(char)'m', (char)'f', (char)'t', (char)'a', (char)'g', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'s'}, .attr = 1UL}, {.offset = 80ULL, .string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'s'}, .attr = 1UL}, {.offset = 88ULL, .string = {(char)'g', (char)'f', (char)'t', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p'}, .attr = 1UL}, {.offset = 144ULL, .string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}}, {.offset = 16ULL, .string = {(char)'t', (char)'t', (char)'l', (char)'0', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d'}}, {.offset = 8ULL, .string = {(char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'b', (char)'i', (char)'g', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d'}}, {.offset = 152ULL, .string = {(char)'c', (char)'o', (char)'a', (char)'l', (char)'e', (char)'s', (char)'c', (char)'e', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}}, {.offset = 160ULL, .string = {(char)'c', (char)'o', (char)'a', (char)'l', (char)'e', (char)'s', (char)'c', (char)'e', (char)'d', (char)'_', (char)'e', (char)'v', (char)'e', (char)'n', (char)'t', (char)'s'}}, {.offset = 168ULL, .string = {(char)'c', (char)'o', (char)'a', (char)'l', (char)'e', (char)'s', (char)'c', (char)'e', (char)'d', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'s', (char)'_', (char)'n', (char)'u', (char)'m'}}, {.offset = 176ULL, .string = {(char)'n', (char)'o', (char)'n', (char)'_', (char)'c', (char)'o', (char)'a', (char)'l', (char)'e', (char)'s', (char)'c', (char)'e', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}}, {.offset = 184ULL, .string = {(char)'c', (char)'o', (char)'a', (char)'l', (char)'e', (char)'s', (char)'c', (char)'e', (char)'d', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.offset = 192ULL, .string = {(char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'c', (char)'h', (char)'a', (char)'n', (char)'g', (char)'e', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t'}}, {.offset = 200ULL, .string = {(char)'p', (char)'t', (char)'p', (char)'_', (char)'s', (char)'k', (char)'i', (char)'p', (char)'_', (char)'t', (char)'x', (char)'t', (char)'s'}}};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static char qede_private_arr[2U][32U] = {{(char)'C', (char)'o', (char)'u', (char)'p', (char)'l', (char)'e', (char)'d', (char)'-', (char)'F', (char)'u', (char)'n', (char)'c', (char)'t', (char)'i', (char)'o', (char)'n'}, {(char)'S', (char)'m', (char)'a', (char)'r', (char)'t', (char)'A', (char)'N', (char)' ', (char)'c', (char)'a', (char)'p', (char)'a', (char)'b', (char)'l', (char)'e'}};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static char qede_tests_str_arr[6U][32U] = {{(char)'I', (char)'n', (char)'t', (char)'e', (char)'r', (char)'n', (char)'a', (char)'l', (char)' ', (char)'l', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}, {(char)'I', (char)'n', (char)'t', (char)'e', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)' ', (char)'(', (char)'o', (char)'n', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\t'}, {(char)'M', (char)'e', (char)'m', (char)'o', (char)'r', (char)'y', (char)' ', (char)'(', (char)'o', (char)'n', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\t', (char)'\t'}, {(char)'R', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)' ', (char)'(', (char)'o', (char)'n', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\t'}, {(char)'C', (char)'l', (char)'o', (char)'c', (char)'k', (char)' ', (char)'(', (char)'o', (char)'n', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\t', (char)'\t'}, {(char)'N', (char)'v', (char)'r', (char)'a', (char)'m', (char)' ', (char)'(', (char)'o', (char)'n', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\t', (char)'\t'}};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_get_strings_stats_txq(struct qede_dev *edev, struct qede_tx_queue *txq, u8 **buf)
{
  #line 223 
  int i;
  #line 225 
  i = 0;
  #line 225 
  while ((unsigned int)i <= 2U) {
    #line 226 
    if ((unsigned int)txq->is_xdp != 0U) 
                                         #line 227 
                                         sprintf((char *)*buf,(char *)"%d [XDP]: %s",txq->index - (int)edev->dev_info.num_queues,(char *)(& qede_tqstats_arr[i].string)); else 
                                                                    #line 231 
                                                                    sprintf((char *)*buf,(char *)"%d_%d: %s",txq->index,(int)txq->cos,(char *)(& qede_tqstats_arr[i].string));
    #line 233 
    *buf += 32U;
    #line 225 
    i ++;
  }
  #line 235 
  return;
}

#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_get_strings_stats_rxq(struct qede_dev *edev, struct qede_rx_queue *rxq, u8 **buf)
{
  #line 240 
  int i;
  #line 242 
  i = 0;
  #line 242 
  while ((unsigned int)i <= 4U) {
    #line 243 
    sprintf((char *)*buf,(char *)"%d: %s",(int)rxq->rxq_id,(char *)(& qede_rqstats_arr[i].string));
    #line 245 
    *buf += 32U;
    #line 242 
    i ++;
  }
  #line 247 
  return;
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static bool qede_is_irrelevant_stat(struct qede_dev *edev, int stat_index)
{
  #line 252 
  int tmp_3;
  #line 252 
  if ((int)test_bit(0L,& edev->flags) != 0) {
    #line 251 
    if ((int)test_bit(0L,& qede_stats_arr[stat_index].attr) != 0) 
                                                                  #line 252 
                                                                  tmp_3 = 1; else 
                                                                    #line 252 
                                                                    goto _LAND_0;
  }
  else {
    #line 252 
    _LAND_0: 
             #line 251 
    ;
    #line 251 
    if (edev->dev_info.common.dev_type == (unsigned int)QED_DEV_TYPE_BB) {
      #line 252 
      if ((int)test_bit(2L,& qede_stats_arr[stat_index].attr) != 0) 
                                                                    #line 252 
                                                                    tmp_3 = 1; else 
                                                                    #line 252 
                                                                    goto _LAND;
    }
    else {
      #line 252 
      _LAND: 
             #line 252 
      ;
      #line 252 
      if (edev->dev_info.common.dev_type == (unsigned int)QED_DEV_TYPE_AH) {
        #line 253 
        if ((int)test_bit(1L,& qede_stats_arr[stat_index].attr) != 0) 
          #line 252 
          tmp_3 = 1; else 
                          #line 252 
                          tmp_3 = 0;
      }
      else 
           #line 252 
           tmp_3 = 0;
    }
  }
  #line 252 
  return (_Bool)(tmp_3 != 0);
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_get_strings_stats(struct qede_dev *edev, u8 *buf)
{
  #line 258 
  struct qede_fastpath *fp;
  #line 259 
  int i;
  #line 262 
  i = 0;
  #line 262 
  while ((int)edev->num_queues > i) {
    #line 263 
    fp = edev->fp_array + (unsigned long)i;
    #line 265 
    if (((unsigned long)fp->type & 2UL) != 0UL) 
                                                #line 266 
                                                qede_get_strings_stats_rxq(edev,fp->rxq,& buf);
    #line 268 
    if (((unsigned long)fp->type & 4UL) != 0UL) 
                                                #line 269 
                                                qede_get_strings_stats_txq(edev,fp->xdp_tx,& buf);
    #line 271 
    if (((unsigned long)fp->type & 1UL) != 0UL) {
      #line 272 
      int cos;
      #line 274 
      cos = 0;
      #line 274 
      while ((int)edev->dev_info.num_tc > cos) {
        #line 275 
        qede_get_strings_stats_txq(edev,fp->txq + (unsigned long)cos,& buf);
        #line 274 
        cos ++;
      }
    }
    #line 262 
    i ++;
  }
  #line 281 
  i = 0;
  #line 281 
  while ((unsigned int)i <= 65U) {
    {
      #line 282 
      if ((int)qede_is_irrelevant_stat(edev,i) != 0) 
                                                     #line 283 
                                                     goto __Cont;
      #line 284 
      strcpy((char *)buf,(char *)(& qede_stats_arr[i].string));
      #line 285 
      buf += 32U;
    }
    #line 281 
    __Cont: 
            #line 281 
    i ++;
  }
  #line 287 
  return;
}

#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_get_strings(struct net_device *dev, u32 stringset, u8 *buf)
{
  #line 291 
  struct qede_dev *edev = netdev_priv(dev);
  #line 293 
  switch (stringset) {
    #line 294 
    case (u32)1: 
                 #line 294 
    ;
    #line 295 
    qede_get_strings_stats(edev,buf);
    #line 296 
    break;
    #line 297 
    case (u32)2: 
                 #line 297 
    ;
    #line 298 
    memcpy((void *)buf,(void *)(& qede_private_arr),64UL);
    #line 300 
    break;
    #line 301 
    case (u32)0: 
                 #line 301 
    ;
    #line 302 
    memcpy((void *)buf,(void *)(& qede_tests_str_arr),192UL);
    #line 304 
    break;
    #line 305 
    default: 
             #line 305 
    ;
    #line 306 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
      #line 306 
      char *tmp_0;
      #line 306 
      ;
      #line 306 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 306 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 306 
                                                                    tmp_0 = (char *)"";
      #line 306 
      printk((char *)"\001",(char *)"qede_get_strings",306,tmp_0,stringset);
    }
  }
  #line 308 
  return;
}

#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_get_ethtool_stats_txq(struct qede_tx_queue *txq, u64 **buf)
{
  #line 313 
  int i;
  #line 315 
  i = 0;
  #line 315 
  while ((unsigned int)i <= 2U) {
    #line 316 
    *(*buf) = *((u64 *)((void *)txq + qede_tqstats_arr[i].offset));
    #line 317 
    (*buf) ++;
    #line 315 
    i ++;
  }
  #line 319 
  return;
}

#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_get_ethtool_stats_rxq(struct qede_rx_queue *rxq, u64 **buf)
{
  #line 323 
  int i;
  #line 325 
  i = 0;
  #line 325 
  while ((unsigned int)i <= 4U) {
    #line 326 
    *(*buf) = *((u64 *)((void *)rxq + qede_rqstats_arr[i].offset));
    #line 327 
    (*buf) ++;
    #line 325 
    i ++;
  }
  #line 329 
  return;
}

#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *buf)
{
  #line 335 
  struct qede_fastpath *fp;
  #line 336 
  int i;
  #line 334 
  struct qede_dev *edev = netdev_priv(dev);
  #line 338 
  qede_fill_by_demand_stats(edev);
  #line 341 
  __qede_lock(edev);
  #line 343 
  i = 0;
  #line 343 
  while ((int)edev->num_queues > i) {
    #line 344 
    fp = edev->fp_array + (unsigned long)i;
    #line 346 
    if (((unsigned long)fp->type & 2UL) != 0UL) 
                                                #line 347 
                                                qede_get_ethtool_stats_rxq(fp->rxq,& buf);
    #line 349 
    if (((unsigned long)fp->type & 4UL) != 0UL) 
                                                #line 350 
                                                qede_get_ethtool_stats_txq(fp->xdp_tx,& buf);
    #line 352 
    if (((unsigned long)fp->type & 1UL) != 0UL) {
      #line 353 
      int cos;
      #line 355 
      cos = 0;
      #line 355 
      while ((int)edev->dev_info.num_tc > cos) {
        #line 356 
        qede_get_ethtool_stats_txq(fp->txq + (unsigned long)cos,& buf);
        #line 355 
        cos ++;
      }
    }
    #line 343 
    i ++;
  }
  #line 360 
  i = 0;
  #line 360 
  while ((unsigned int)i <= 65U) {
    {
      #line 361 
      if ((int)qede_is_irrelevant_stat(edev,i) != 0) 
                                                     #line 362 
                                                     goto __Cont;
      #line 363 
      *buf = *((u64 *)((void *)(& edev->stats) + qede_stats_arr[i].offset));
      #line 366 
      buf ++;
    }
    #line 360 
    __Cont: 
            #line 360 
    i ++;
  }
  #line 369 
  __qede_unlock(edev);
  #line 370 
  return;
}

#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_get_sset_count(struct net_device *dev, int stringset)
{
  #line 375 
  int i;
  #line 374 
  struct qede_dev *edev = netdev_priv(dev);
  #line 375 
  int num_stats = 66;
  #line 377 
  switch (stringset) {
    #line 378 
    case 1: 
            #line 378 
    ;
    #line 379 
    i = 0;
    #line 379 
    while ((unsigned int)i <= 65U) {
      #line 380 
      if ((int)qede_is_irrelevant_stat(edev,i) != 0) 
                                                     #line 381 
                                                     num_stats --;
      #line 379 
      i ++;
    }
    #line 384 
    num_stats = (int)(((unsigned long)((int)edev->num_queues - (int)edev->fp_num_rx) * (unsigned long)edev->dev_info.num_tc) * (unsigned long)3U + (unsigned long)num_stats);
    #line 388 
    num_stats = (int)((unsigned long)((int)edev->num_queues - (int)edev->fp_num_tx) * (unsigned long)5U + (unsigned long)num_stats);
    #line 391 
    if (edev->xdp_prog != (struct bpf_prog *)0) 
                                                #line 392 
                                                num_stats = (int)((unsigned long)((int)edev->num_queues - (int)edev->fp_num_tx) * (unsigned long)3U + (unsigned long)num_stats);
    #line 393 
    return num_stats;
    #line 395 
    case 2: 
            #line 395 
    ;
    #line 396 
    return 2;
    #line 397 
    case 0: 
            #line 397 
    ;
    #line 398 
    if (test_bit(0L,& edev->flags)) 
                                    #line 401 
                                    return 0; else 
                                                   #line 399 
                                                   return 6;
    #line 402 
    default: 
             #line 402 
    ;
    #line 403 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
      #line 403 
      char *tmp_2;
      #line 403 
      ;
      #line 403 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 403 
                                                    tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 403 
                                                                    tmp_2 = (char *)"";
      #line 403 
      printk((char *)"\001",(char *)"qede_get_sset_count",403,tmp_2,stringset);
    }
    #line 405 
    return -22;
  }
}

#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static u32 qede_get_priv_flags(struct net_device *dev)
{
  #line 411 
  struct qede_dev *edev = netdev_priv(dev);
  #line 412 
  u32 flags = 0U;
  #line 414 
  if ((unsigned int)edev->dev_info.common.num_hwfns > 1U) 
                                                          #line 415 
                                                          flags |= 1U;
  #line 417 
  if ((int)edev->dev_info.common.smart_an != 0) 
                                                #line 418 
                                                flags |= 2U;
  #line 420 
  return flags;
}

#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static struct qede_link_mode_mapping qed_lm_map[33U] = {{.qed_link_mode = 1U, .ethtool_link_mode = 10U}, {.qed_link_mode = 2U, .ethtool_link_mode = 6U}, {.qed_link_mode = 4U, .ethtool_link_mode = 14U}, {.qed_link_mode = 8U, .ethtool_link_mode = 13U}, {.qed_link_mode = 16U, .ethtool_link_mode = 5U}, {.qed_link_mode = 32U, .ethtool_link_mode = 12U}, {.qed_link_mode = 4096U, .ethtool_link_mode = 7U}, {.qed_link_mode = 8192U, .ethtool_link_mode = 16U}, {.qed_link_mode = 16384U, .ethtool_link_mode = 17U}, {.qed_link_mode = 32768U, .ethtool_link_mode = 18U}, {.qed_link_mode = 64U, .ethtool_link_mode = 19U}, {.qed_link_mode = 64U, .ethtool_link_mode = 19U}, {.qed_link_mode = 65536U, .ethtool_link_mode = 20U}, {.qed_link_mode = 128U, .ethtool_link_mode = 22U}, {.qed_link_mode = 131072U, .ethtool_link_mode = 23U}, {.qed_link_mode = 262144U, .ethtool_link_mode = 24U}, {.qed_link_mode = 524288U, .ethtool_link_mode = 25U}, {.qed_link_mode = 512U, .ethtool_link_mode = 26U}, {.qed_link_mode = 1048576U, .ethtool_link_mode = 31U}, {.qed_link_mode = 256U, .ethtool_link_mode = 32U}, {.qed_link_mode = 2097152U, .ethtool_link_mode = 33U}, {.qed_link_mode = 4194304U, .ethtool_link_mode = 34U}, {.qed_link_mode = 1024U, .ethtool_link_mode = 35U}, {.qed_link_mode = 2048U, .ethtool_link_mode = 36U}, {.qed_link_mode = 8388608U, .ethtool_link_mode = 37U}, {.qed_link_mode = 16777216U, .ethtool_link_mode = 38U}, {.qed_link_mode = 33554432U, .ethtool_link_mode = 39U}, {.qed_link_mode = 67108864U, .ethtool_link_mode = 40U}, {.qed_link_mode = 134217728U, .ethtool_link_mode = 41U}, {.qed_link_mode = 268435456U, .ethtool_link_mode = 42U}, {.qed_link_mode = 536870912U, .ethtool_link_mode = 43U}, {.qed_link_mode = 1073741824U, .ethtool_link_mode = 44U}, {.qed_link_mode = QED_LM_10000baseLRM_Full_BIT, .ethtool_link_mode = 45U}};
#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_get_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 495 
  struct qed_link_output current_link;
  #line 493 
  struct ethtool_link_settings *base = & cmd->base;
  #line 494 
  struct qede_dev *edev = netdev_priv(dev);
  #line 497 
  __qede_lock(edev);
  #line 499 
  memset((void *)(& current_link),0,40UL);
  #line 500 
  (*(((edev->ops)->common)->get_link))(edev->cdev,& current_link);
  #line 502 
  cif_bitmap_zero((unsigned long *)(& cmd->link_modes.supported),74U);
  {
    #line 503 
    int i;
    #line 503 
    i = 0;
    #line 503 
    while ((unsigned int)i <= 32U) {
      #line 503 
      if ((current_link.supported_caps & qed_lm_map[i].qed_link_mode) != 0U) 
        #line 503 
        __set_bit((long)qed_lm_map[i].ethtool_link_mode,(unsigned long *)(& cmd->link_modes.supported));
      #line 503 
      i ++;
    }
  }
  #line 505 
  cif_bitmap_zero((unsigned long *)(& cmd->link_modes.advertising),74U);
  {
    #line 506 
    int i_0;
    #line 506 
    i_0 = 0;
    #line 506 
    while ((unsigned int)i_0 <= 32U) {
      #line 506 
      if ((current_link.advertised_caps & qed_lm_map[i_0].qed_link_mode) != 0U) 
        #line 506 
        __set_bit((long)qed_lm_map[i_0].ethtool_link_mode,(unsigned long *)(& cmd->link_modes.advertising));
      #line 506 
      i_0 ++;
    }
  }
  #line 508 
  cif_bitmap_zero((unsigned long *)(& cmd->link_modes.lp_advertising),74U);
  {
    #line 509 
    int i_1;
    #line 509 
    i_1 = 0;
    #line 509 
    while ((unsigned int)i_1 <= 32U) {
      #line 509 
      if ((current_link.lp_caps & qed_lm_map[i_1].qed_link_mode) != 0U) 
        #line 509 
        __set_bit((long)qed_lm_map[i_1].ethtool_link_mode,(unsigned long *)(& cmd->link_modes.lp_advertising));
      #line 509 
      i_1 ++;
    }
  }
  #line 511 
  if (edev->state == 1U && (int)current_link.link_up != 0) {
    #line 512 
    base->speed = current_link.speed;
    #line 513 
    base->duplex = current_link.duplex;
  }
  else {
    #line 515 
    base->speed = 4294967295U;
    #line 516 
    base->duplex = (unsigned char)255U;
  }
  #line 519 
  __qede_unlock(edev);
  #line 521 
  base->port = current_link.port;
  #line 522 
  base->autoneg = (unsigned char)((int)current_link.autoneg != 0);
  #line 525 
  return 0;
}

#line 528  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_set_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 533 
  struct qed_link_output current_link;
  #line 534 
  struct qed_link_params params;
  #line 535 
  u32 sup_caps;
  #line 531 
  struct ethtool_link_settings *base = & cmd->base;
  #line 532 
  struct qede_dev *edev = netdev_priv(dev);
  #line 537 
  if (edev->ops == (struct qed_eth_ops *)0) 
                                            #line 537 
                                            goto _LOR;
  else {
    #line 537 
    if (! (*(((edev->ops)->common)->can_link_change))(edev->cdev)) {
      #line 537 
      _LOR: {
              #line 538 
              if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
                #line 538 
                char *tmp_0;
                #line 538 
                if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                              #line 538 
                                                              tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 538 
                                                                    tmp_0 = (char *)"";
                #line 538 
                printk((char *)"\001",(char *)"qede_set_link_ksettings",538,tmp_0);
              }
              #line 539 
              return -95;
            }
    }
  }
  #line 541 
  memset((void *)(& current_link),0,40UL);
  #line 542 
  memset((void *)(& params),0,36UL);
  #line 543 
  (*(((edev->ops)->common)->get_link))(edev->cdev,& current_link);
  #line 545 
  params.override_flags |= 2U;
  #line 546 
  params.override_flags |= 1U;
  #line 547 
  if ((unsigned int)base->autoneg == 1U) {
    #line 548 
    if ((current_link.supported_caps & 2U) == 0U) {
      #line 549 
      if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
        #line 549 
        char *tmp_2;
        #line 549 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 549 
                                                      tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 549 
                                                                    tmp_2 = (char *)"";
        #line 549 
        printk((char *)"\001",(char *)"qede_set_link_ksettings",549,tmp_2);
      }
      #line 550 
      return -95;
    }
    #line 553 
    params.autoneg = (_Bool)1;
    #line 554 
    params.forced_speed = 0U;
    {
      #line 555 
      int i;
      #line 555 
      i = 0;
      #line 555 
      while ((unsigned int)i <= 32U) {
        #line 555 
        if ((int)test_bit((long)qed_lm_map[i].ethtool_link_mode,
                 (unsigned long *)(& cmd->link_modes.advertising)) != 0) 
          #line 555 
          params.adv_speeds |= qed_lm_map[i].qed_link_mode;
        #line 555 
        i ++;
      }
    }
  }
  else {
    #line 557 
    params.override_flags |= 4U;
    #line 558 
    params.autoneg = (_Bool)0;
    #line 559 
    params.forced_speed = base->speed;
    #line 560 
    switch (base->speed) {
      #line 561 
      case (__u32)1000: 
                        #line 561 
      ;
      #line 562 
      sup_caps = 134234128U;
      #line 565 
      if ((current_link.supported_caps & sup_caps) == 0U) {
        #line 566 
        if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
          #line 566 
          char *tmp_4;
          #line 566 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 566 
                                                        tmp_4 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 566 
                                                                    tmp_4 = (char *)"";
          #line 566 
          printk((char *)"\001",(char *)"qede_set_link_ksettings",566,tmp_4);
        }
        #line 567 
        return -22;
      }
      #line 569 
      params.adv_speeds = current_link.supported_caps & sup_caps;
      #line 571 
      break;
      #line 572 
      case (__u32)10000: 
                         #line 572 
      ;
      #line 573 
      sup_caps = 4026630240U;
      #line 581 
      if ((current_link.supported_caps & sup_caps) == 0U) {
        #line 582 
        if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
          #line 582 
          char *tmp_5;
          #line 582 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 582 
                                                        tmp_5 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 582 
                                                                    tmp_5 = (char *)"";
          #line 582 
          printk((char *)"\001",(char *)"qede_set_link_ksettings",582,tmp_5);
        }
        #line 583 
        return -22;
      }
      #line 585 
      params.adv_speeds = current_link.supported_caps & sup_caps;
      #line 587 
      break;
      #line 588 
      case (__u32)20000: 
                         #line 588 
      ;
      #line 589 
      if ((current_link.supported_caps & 128U) == 0U) {
        #line 591 
        if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
          #line 591 
          char *tmp_6;
          #line 591 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 591 
                                                        tmp_6 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 591 
                                                                    tmp_6 = (char *)"";
          #line 591 
          printk((char *)"\001",(char *)"qede_set_link_ksettings",591,tmp_6);
        }
        #line 592 
        return -22;
      }
      #line 594 
      params.adv_speeds = 128U;
      #line 595 
      break;
      #line 596 
      case (__u32)25000: 
                         #line 596 
      ;
      #line 597 
      sup_caps = 3145984U;
      #line 600 
      if ((current_link.supported_caps & sup_caps) == 0U) {
        #line 601 
        if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
          #line 601 
          char *tmp_7;
          #line 601 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 601 
                                                        tmp_7 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 601 
                                                                    tmp_7 = (char *)"";
          #line 601 
          printk((char *)"\001",(char *)"qede_set_link_ksettings",601,tmp_7);
        }
        #line 602 
        return -22;
      }
      #line 604 
      params.adv_speeds = current_link.supported_caps & sup_caps;
      #line 606 
      break;
      #line 607 
      case (__u32)40000: 
                         #line 607 
      ;
      #line 608 
      sup_caps = 918016U;
      #line 612 
      if ((current_link.supported_caps & sup_caps) == 0U) {
        #line 613 
        if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
          #line 613 
          char *tmp_8;
          #line 613 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 613 
                                                        tmp_8 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 613 
                                                                    tmp_8 = (char *)"";
          #line 613 
          printk((char *)"\001",(char *)"qede_set_link_ksettings",613,tmp_8);
        }
        #line 614 
        return -22;
      }
      #line 616 
      params.adv_speeds = current_link.supported_caps & sup_caps;
      #line 618 
      break;
      #line 619 
      case (__u32)50000: 
                         #line 619 
      ;
      #line 620 
      sup_caps = 71304192U;
      #line 623 
      if ((current_link.supported_caps & sup_caps) == 0U) {
        #line 624 
        if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
          #line 624 
          char *tmp_9;
          #line 624 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 624 
                                                        tmp_9 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 624 
                                                                    tmp_9 = (char *)"";
          #line 624 
          printk((char *)"\001",(char *)"qede_set_link_ksettings",624,tmp_9);
        }
        #line 625 
        return -22;
      }
      #line 627 
      params.adv_speeds = current_link.supported_caps & sup_caps;
      #line 629 
      break;
      #line 630 
      case (__u32)100000: 
                          #line 630 
      ;
      #line 631 
      sup_caps = 58722304U;
      #line 635 
      if ((current_link.supported_caps & sup_caps) == 0U) {
        #line 636 
        if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
          #line 636 
          char *tmp_10;
          #line 636 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 636 
                                                        tmp_10 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 636 
                                                                    tmp_10 = (char *)"";
          #line 636 
          printk((char *)"\001",(char *)"qede_set_link_ksettings",636,tmp_10);
        }
        #line 637 
        return -22;
      }
      #line 639 
      params.adv_speeds = current_link.supported_caps & sup_caps;
      #line 641 
      break;
      #line 642 
      default: 
               #line 642 
      ;
      #line 643 
      if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
        #line 643 
        char *tmp_11;
        #line 643 
        ;
        #line 643 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 643 
                                                      tmp_11 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 643 
                                                                    tmp_11 = (char *)"";
        #line 643 
        printk((char *)"\001",(char *)"qede_set_link_ksettings",643,tmp_11,base->speed);
      }
      #line 644 
      return -22;
    }
  }
  #line 648 
  params.link_up = (_Bool)1;
  #line 649 
  (*(((edev->ops)->common)->set_link))(edev->cdev,& params);
  #line 651 
  return 0;
}

#line 654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_get_drvinfo(struct net_device *ndev, struct ethtool_drvinfo *info)
{
  #line 657 
  char mfw[32U];
  #line 657 
  char storm[32U];
  #line 659 
  char mbi[32U];
  #line 658 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 661 
  strlcpy((char *)(& info->driver),(char *)"qede",32UL);
  #line 663 
  snprintf((char *)(& storm),32UL,(char *)"%d.%d.%d.%d",(int)edev->dev_info.common.fw_major,(int)edev->dev_info.common.fw_minor,(int)edev->dev_info.common.fw_rev,(int)edev->dev_info.common.fw_eng);
  #line 669 
  snprintf((char *)(& mfw),32UL,(char *)"%d.%d.%d.%d",edev->dev_info.common.mfw_rev >> 24,(edev->dev_info.common.mfw_rev >> 16) & 255U,(edev->dev_info.common.mfw_rev >> 8) & 255U,edev->dev_info.common.mfw_rev & 255U);
  #line 675 
  if ((cif_strlen_0((char *)(& storm)) + cif_strlen_0((char *)"8")) + cif_strlen_0((char *)"[storm]  ") <= 31UL) 
    #line 677 
    snprintf((char *)(& info->version),32UL,(char *)"%s [storm %s]",(char *)"8",(char *)(& storm)); else 
                                                                    #line 680 
                                                                    snprintf((char *)(& info->version),32UL,(char *)"%s %s",(char *)"8",(char *)(& storm));
  #line 683 
  if (edev->dev_info.common.mbi_version != 0U) {
    #line 684 
    snprintf((char *)(& mbi),32UL,(char *)"%d.%d.%d",(edev->dev_info.common.mbi_version >> 16) & 255U,(edev->dev_info.common.mbi_version >> 8) & 255U,edev->dev_info.common.mbi_version & 255U);
    #line 691 
    snprintf((char *)(& info->fw_version),32UL,(char *)"mbi %s [mfw %s]",(char *)(& mbi),(char *)(& mfw));
  }
  else 
       #line 694 
       snprintf((char *)(& info->fw_version),32UL,(char *)"mfw %s",(char *)(& mfw));
  #line 698 
  ;
  #line 698 
  strlcpy((char *)(& info->bus_info),pci_name(edev->pdev),32UL);
  #line 699 
  return;
}

#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_get_wol(struct net_device *ndev, struct ethtool_wolinfo *wol)
{
  #line 703 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 705 
  if ((int)edev->dev_info.common.wol_support != 0) {
    #line 706 
    wol->supported = 32U;
    #line 707 
    if ((int)edev->wol_enabled != 0) 
                                     #line 707 
                                     wol->wolopts = 32U; else 
                                                              #line 707 
                                                              wol->wolopts = 0U;
  }
  #line 709 
  return;
}

#line 711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_set_wol(struct net_device *ndev, struct ethtool_wolinfo *wol)
{
  #line 714 
  bool wol_requested;
  #line 715 
  int rc;
  #line 713 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 717 
  if ((wol->wolopts & 4294967263U) != 0U) {
    #line 718 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 718 
      char *tmp_0;
      #line 718 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 718 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 718 
                                                                    tmp_0 = (char *)"";
      #line 718 
      printk((char *)"\001",(char *)"qede_set_wol",718,tmp_0);
    }
    #line 720 
    return -22;
  }
  #line 723 
  wol_requested = (_Bool)((wol->wolopts & 32U) != 0U);
  #line 724 
  if ((int)edev->wol_enabled == (int)wol_requested) 
                                                    #line 725 
                                                    return 0;
  #line 728 
  if (! edev->dev_info.common.wol_support) {
    #line 729 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 729 
      char *tmp_1;
      #line 729 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 729 
                                                    tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 729 
                                                                    tmp_1 = (char *)"";
      #line 729 
      printk((char *)"\001",(char *)"qede_set_wol",729,tmp_1);
    }
    #line 730 
    return -22;
  }
  #line 733 
  rc = (*(((edev->ops)->common)->update_wol))(edev->cdev,(_Bool)((bool)((int)wol_requested) != 0));
  #line 734 
  if (rc == 0) 
               #line 735 
               edev->wol_enabled = wol_requested;
  #line 737 
  return rc;
}

#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static u32 qede_get_msglevel(struct net_device *ndev)
{
  #line 742 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 744 
  return ((unsigned int)edev->dp_level << 30) | edev->dp_module;
}

#line 747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_set_msglevel(struct net_device *ndev, u32 level)
{
  #line 749 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 750 
  u32 dp_module = 0U;
  #line 751 
  u8 dp_level = (unsigned char)0U;
  #line 753 
  qede_config_debug(level,& dp_module,& dp_level);
  #line 755 
  edev->dp_level = dp_level;
  #line 756 
  edev->dp_module = dp_module;
  #line 757 
  (*(((edev->ops)->common)->update_msglvl))(edev->cdev,dp_module,(unsigned char)((int)dp_level));
  #line 758 
  return;
}

#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_nway_reset(struct net_device *dev)
{
  #line 764 
  struct qed_link_output current_link;
  #line 765 
  struct qed_link_params link_params;
  #line 763 
  struct qede_dev *edev = netdev_priv(dev);
  #line 767 
  if (edev->ops == (struct qed_eth_ops *)0) 
                                            #line 767 
                                            goto _LOR;
  else {
    #line 767 
    if (! (*(((edev->ops)->common)->can_link_change))(edev->cdev)) {
      #line 767 
      _LOR: {
              #line 768 
              if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
                #line 768 
                char *tmp_0;
                #line 768 
                if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                              #line 768 
                                                              tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 768 
                                                                    tmp_0 = (char *)"";
                #line 768 
                printk((char *)"\001",(char *)"qede_nway_reset",768,tmp_0);
              }
              #line 769 
              return -95;
            }
    }
  }
  #line 772 
  if (! netif_running(dev)) 
                            #line 773 
                            return 0;
  #line 775 
  memset((void *)(& current_link),0,40UL);
  #line 776 
  (*(((edev->ops)->common)->get_link))(edev->cdev,& current_link);
  #line 777 
  if (! current_link.link_up) 
                              #line 778 
                              return 0;
  #line 781 
  memset((void *)(& link_params),0,36UL);
  #line 782 
  link_params.link_up = (_Bool)0;
  #line 783 
  (*(((edev->ops)->common)->set_link))(edev->cdev,& link_params);
  #line 784 
  link_params.link_up = (_Bool)1;
  #line 785 
  (*(((edev->ops)->common)->set_link))(edev->cdev,& link_params);
  #line 787 
  return 0;
}

#line 790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static u32 qede_get_link(struct net_device *dev)
{
  #line 793 
  struct qed_link_output current_link;
  #line 792 
  struct qede_dev *edev = netdev_priv(dev);
  #line 795 
  memset((void *)(& current_link),0,40UL);
  #line 796 
  (*(((edev->ops)->common)->get_link))(edev->cdev,& current_link);
  #line 798 
  return (unsigned int)current_link.link_up;
}

#line 801  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_flash_device(struct net_device *dev, struct ethtool_flash *flash)
{
  #line 804 
  struct qede_dev *edev = netdev_priv(dev);
  #line 806 
  return (*(((edev->ops)->common)->nvm_flash))(edev->cdev,
                                              (char *)(& flash->data));
}

#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_get_coalesce(struct net_device *dev, struct ethtool_coalesce *coal)
{
  #line 814 
  u16 rx_coal;
  #line 814 
  u16 tx_coal;
  #line 814 
  u16 i;
  #line 815 
  struct qede_fastpath *fp;
  #line 812 
  void *rx_handle = (void *)0;
  #line 812 
  void *tx_handle = (void *)0;
  #line 813 
  struct qede_dev *edev = netdev_priv(dev);
  #line 814 
  u16 rc = (unsigned short)0U;
  #line 817 
  rx_coal = (unsigned short)12U;
  #line 818 
  tx_coal = (unsigned short)48U;
  #line 820 
  memset((void *)coal,0,92UL);
  #line 822 
  __qede_lock(edev);
  #line 823 
  if (edev->state == 1U) {
    #line 824 
    i = (unsigned short)0U;
    #line 824 
    while ((int)edev->num_queues > (int)i) {
      #line 825 
      fp = edev->fp_array + (unsigned long)i;
      #line 827 
      if (((unsigned long)fp->type & 2UL) != 0UL) {
        #line 828 
        rx_handle = (fp->rxq)->handle;
        #line 829 
        break;
      }
      #line 824 
      i = (u16)((int)i + 1);
    }
    #line 833 
    rc = (unsigned short)(*((edev->ops)->get_coalesce))(edev->cdev,& rx_coal,rx_handle);
    #line 834 
    if ((unsigned int)rc != 0U) {
      #line 835 
      if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
        #line 835 
        char *tmp_1;
        #line 835 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 835 
                                                      tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 835 
                                                                    tmp_1 = (char *)"";
        #line 835 
        printk((char *)"\001",(char *)"qede_get_coalesce",835,tmp_1);
      }
      #line 836 
      goto out;
    }
    #line 839 
    i = (unsigned short)0U;
    #line 839 
    while ((int)edev->num_queues > (int)i) {
      {
        #line 840 
        struct qede_tx_queue *txq;
        #line 842 
        fp = edev->fp_array + (unsigned long)i;
        #line 848 
        if (((unsigned long)fp->type & 1UL) != 0UL) {
          #line 849 
          txq = fp->txq;
          #line 850 
          tx_handle = txq->handle;
          #line 851 
          break;
        }
      }
      #line 839 
      i = (u16)((int)i + 1);
    }
    #line 855 
    rc = (unsigned short)(*((edev->ops)->get_coalesce))(edev->cdev,& tx_coal,tx_handle);
    #line 856 
    if ((unsigned int)rc != 0U) 
      #line 857 
      if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
        #line 857 
        char *tmp_3;
        #line 857 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 857 
                                                      tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 857 
                                                                    tmp_3 = (char *)"";
        #line 857 
        printk((char *)"\001",(char *)"qede_get_coalesce",857,tmp_3);
      }
  }
  #line 860 
  out: 
       #line 860 
  ;
  #line 861 
  __qede_unlock(edev);
  #line 863 
  coal->rx_coalesce_usecs = (unsigned int)rx_coal;
  #line 864 
  coal->tx_coalesce_usecs = (unsigned int)tx_coal;
  #line 866 
  return (int)rc;
}

#line 869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_set_coalesce(struct net_device *dev, struct ethtool_coalesce *coal)
{
  #line 873 
  struct qede_fastpath *fp;
  #line 874 
  int i;
  #line 875 
  u16 rxc;
  #line 875 
  u16 txc;
  #line 872 
  struct qede_dev *edev = netdev_priv(dev);
  #line 874 
  int rc = 0;
  #line 877 
  if (! netif_running(dev)) {
    #line 878 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 878 
      char *tmp_0;
      #line 878 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 878 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 878 
                                                                    tmp_0 = (char *)"";
      #line 878 
      printk((char *)"\001",(char *)"qede_set_coalesce",878,tmp_0);
    }
    #line 879 
    return -22;
  }
  #line 882 
  if (coal->rx_coalesce_usecs > 511U || coal->tx_coalesce_usecs > 511U) {
    #line 884 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 884 
      char *tmp_2;
      #line 884 
      char *tmp_3;
      #line 884 
      if (coal->rx_coalesce_usecs > 511U) 
                                          #line 884 
                                          tmp_2 = (char *)"rx"; else 
                                                                  #line 884 
                                                                  tmp_2 = (char *)"tx";
      #line 884 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 884 
                                                    tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 884 
                                                                    tmp_3 = (char *)"";
      #line 884 
      printk((char *)"\001",(char *)"qede_set_coalesce",884,tmp_3,tmp_2,511);
    }
    #line 888 
    return -22;
  }
  #line 891 
  rxc = (unsigned short)coal->rx_coalesce_usecs;
  #line 892 
  txc = (unsigned short)coal->tx_coalesce_usecs;
  #line 893 
  i = 0;
  #line 893 
  while ((int)edev->num_queues > i) {
    #line 894 
    fp = edev->fp_array + (unsigned long)i;
    #line 896 
    if (((unsigned long)(edev->fp_array + (unsigned long)i)->type & 2UL) != 0UL) {
      #line 897 
      rc = (*(((edev->ops)->common)->set_coalesce))(edev->cdev,(unsigned short)((int)rxc),(unsigned short)0,(fp->rxq)->handle);
      #line 900 
      if (rc != 0) {
        #line 901 
        if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
          #line 901 
          char *tmp_4;
          #line 901 
          ;
          #line 901 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 901 
                                                        tmp_4 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 901 
                                                                    tmp_4 = (char *)"";
          #line 901 
          printk((char *)"\001",(char *)"qede_set_coalesce",901,tmp_4,rc);
        }
        #line 903 
        return rc;
      }
    }
    #line 907 
    if (((unsigned long)(edev->fp_array + (unsigned long)i)->type & 1UL) != 0UL) {
      #line 908 
      struct qede_tx_queue *txq;
      #line 914 
      txq = fp->txq;
      #line 916 
      rc = (*(((edev->ops)->common)->set_coalesce))(edev->cdev,(unsigned short)0,(unsigned short)((int)txc),txq->handle);
      #line 919 
      if (rc != 0) {
        #line 920 
        if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
          #line 920 
          char *tmp_5;
          #line 920 
          ;
          #line 920 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 920 
                                                        tmp_5 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 920 
                                                                    tmp_5 = (char *)"";
          #line 920 
          printk((char *)"\001",(char *)"qede_set_coalesce",920,tmp_5,rc);
        }
        #line 922 
        return rc;
      }
    }
    #line 893 
    i ++;
  }
  #line 927 
  return rc;
}

#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_get_ringparam(struct net_device *dev, struct ethtool_ringparam *ering)
{
  #line 933 
  struct qede_dev *edev = netdev_priv(dev);
  #line 935 
  ering->rx_max_pending = 8191U;
  #line 936 
  ering->rx_pending = (unsigned int)edev->q_num_rx_buffers;
  #line 937 
  ering->tx_max_pending = 8191U;
  #line 938 
  ering->tx_pending = (unsigned int)edev->q_num_tx_buffers;
  #line 939 
  return;
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_set_ringparam(struct net_device *dev, struct ethtool_ringparam *ering)
{
  #line 944 
  struct qede_dev *edev = netdev_priv(dev);
  #line 946 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 48U) != 0U) != 0L) {
    #line 946 
    char *tmp_0;
    #line 946 
    ;
    #line 946 
    ;
    #line 946 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 946 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 946 
                                                                    tmp_0 = (char *)"";
    #line 946 
    printk((char *)"\001",(char *)"qede_set_ringparam",946,tmp_0,ering->rx_pending,ering->tx_pending);
  }
  #line 951 
  if ((ering->rx_pending + 4294967168U > 8063U || ering->tx_pending > 8191U) || ering->tx_pending <= 127U) {
    #line 955 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 48U) != 0U) != 0L) {
      #line 955 
      char *tmp_1;
      #line 955 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 955 
                                                    tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 955 
                                                                    tmp_1 = (char *)"";
      #line 955 
      printk((char *)"\001",(char *)"qede_set_ringparam",955,tmp_1,128,8191,128,8191);
    }
    #line 959 
    return -22;
  }
  #line 963 
  edev->q_num_rx_buffers = (unsigned short)ering->rx_pending;
  #line 964 
  edev->q_num_tx_buffers = (unsigned short)ering->tx_pending;
  #line 966 
  qede_reload(edev,(struct qede_reload_args *)0,(_Bool)0);
  #line 968 
  return 0;
}

#line 971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_get_pauseparam(struct net_device *dev, struct ethtool_pauseparam *epause)
{
  #line 975 
  struct qed_link_output current_link;
  #line 974 
  struct qede_dev *edev = netdev_priv(dev);
  #line 977 
  memset((void *)(& current_link),0,40UL);
  #line 978 
  (*(((edev->ops)->common)->get_link))(edev->cdev,& current_link);
  #line 980 
  if (((unsigned long)current_link.pause_config & 1UL) != 0UL) 
                                                               #line 981 
                                                               epause->autoneg = 1U;
  #line 982 
  if (((unsigned long)current_link.pause_config & 2UL) != 0UL) 
                                                               #line 983 
                                                               epause->rx_pause = 1U;
  #line 984 
  if (((unsigned long)current_link.pause_config & 4UL) != 0UL) 
                                                               #line 985 
                                                               epause->tx_pause = 1U;
  #line 987 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
    #line 987 
    char *tmp_0;
    #line 987 
    ;
    #line 987 
    ;
    #line 987 
    ;
    #line 987 
    ;
    #line 987 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 987 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 987 
                                                                    tmp_0 = (char *)"";
    #line 987 
    printk((char *)"\001",(char *)"qede_get_pauseparam",987,tmp_0,epause->cmd,epause->autoneg,epause->rx_pause,epause->tx_pause);
  }
  #line 988 
  return;
}

#line 993  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_set_pauseparam(struct net_device *dev, struct ethtool_pauseparam *epause)
{
  #line 997 
  struct qed_link_params params;
  #line 998 
  struct qed_link_output current_link;
  #line 996 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1000 
  if (edev->ops == (struct qed_eth_ops *)0) 
                                            #line 1000 
                                            goto _LOR;
  else {
    #line 1000 
    if (! (*(((edev->ops)->common)->can_link_change))(edev->cdev)) {
      #line 1000 
      _LOR: {
              #line 1001 
              if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
                #line 1001 
                char *tmp_0;
                #line 1001 
                if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                              #line 1001 
                                                              tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1001 
                                                                    tmp_0 = (char *)"";
                #line 1001 
                printk((char *)"\001",(char *)"qede_set_pauseparam",1001,tmp_0);
              }
              #line 1003 
              return -95;
            }
    }
  }
  #line 1006 
  memset((void *)(& current_link),0,40UL);
  #line 1007 
  (*(((edev->ops)->common)->get_link))(edev->cdev,& current_link);
  #line 1009 
  memset((void *)(& params),0,36UL);
  #line 1010 
  params.override_flags |= 8U;
  #line 1011 
  if (epause->autoneg != 0U) {
    #line 1012 
    if ((current_link.supported_caps & 2U) == 0U) {
      #line 1013 
      if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
        #line 1013 
        char *tmp_2;
        #line 1013 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1013 
                                                      tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1013 
                                                                    tmp_2 = (char *)"";
        #line 1013 
        printk((char *)"\001",(char *)"qede_set_pauseparam",1013,tmp_2);
      }
      #line 1014 
      return -22;
    }
    #line 1016 
    params.pause_config |= 1U;
  }
  #line 1018 
  if (epause->rx_pause != 0U) 
                              #line 1019 
                              params.pause_config |= 2U;
  #line 1020 
  if (epause->tx_pause != 0U) 
                              #line 1021 
                              params.pause_config |= 4U;
  #line 1023 
  params.link_up = (_Bool)1;
  #line 1024 
  (*(((edev->ops)->common)->set_link))(edev->cdev,& params);
  #line 1026 
  return 0;
}

#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_get_regs(struct net_device *ndev, struct ethtool_regs *regs, void *buffer)
{
  #line 1032 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 1034 
  regs->version = 0U;
  #line 1035 
  memset(buffer,0,(unsigned long)regs->len);
  #line 1037 
  if (edev->ops != (struct qed_eth_ops *)0 && (edev->ops)->common != (struct qed_common_ops *)0) 
    #line 1038 
    (*(((edev->ops)->common)->dbg_all_data))(edev->cdev,buffer);
  #line 1039 
  return;
}

#line 1041  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_get_regs_len(struct net_device *ndev)
{
  #line 1043 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 1045 
  if (edev->ops != (struct qed_eth_ops *)0 && (edev->ops)->common != (struct qed_common_ops *)0) {
    #line 1046 
    return (*(((edev->ops)->common)->dbg_all_data_size))(edev->cdev);
  }
  else 
       #line 1048 
       return -22;
}

#line 1051  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_update_mtu(struct qede_dev *edev, struct qede_reload_args *args)
{
  #line 1054 
  (edev->ndev)->mtu = (unsigned int)args->u.mtu;
  #line 1055 
  return;
}

#line 1058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
int qede_change_mtu(struct net_device *ndev, int new_mtu)
{
  #line 1061 
  struct qede_reload_args args;
  #line 1060 
  struct qede_dev *edev = netdev_priv(ndev);
  #line 1063 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 48U) != 0U) != 0L) {
    #line 1063 
    char *tmp_0;
    #line 1063 
    ;
    #line 1063 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1063 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1063 
                                                                    tmp_0 = (char *)"";
    #line 1063 
    printk((char *)"\001",(char *)"qede_change_mtu",1063,tmp_0,new_mtu);
  }
  #line 1066 
  if ((unsigned int)new_mtu > 4096U) 
                                     #line 1067 
                                     ndev->features &= 18428729675200069631ULL;
  #line 1070 
  args.u.mtu = (unsigned short)new_mtu;
  #line 1071 
  args.func = & qede_update_mtu;
  #line 1072 
  qede_reload(edev,& args,(_Bool)0);
  #line 1074 
  (*(((edev->ops)->common)->update_mtu))(edev->cdev,(unsigned short)((int)((unsigned short)new_mtu)));
  #line 1076 
  return 0;
}

#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_get_channels(struct net_device *dev, struct ethtool_channels *channels)
{
  #line 1082 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1084 
  channels->max_combined = (unsigned int)edev->dev_info.num_queues;
  #line 1085 
  channels->max_rx = (unsigned int)edev->dev_info.num_queues;
  #line 1086 
  channels->max_tx = (unsigned int)edev->dev_info.num_queues;
  #line 1087 
  channels->combined_count = (unsigned int)(((int)edev->num_queues - (int)edev->fp_num_tx) - (int)edev->fp_num_rx);
  #line 1089 
  channels->tx_count = (unsigned int)edev->fp_num_tx;
  #line 1090 
  channels->rx_count = (unsigned int)edev->fp_num_rx;
  #line 1091 
  return;
}

#line 1093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_set_channels(struct net_device *dev, struct ethtool_channels *channels)
{
  #line 1097 
  u32 count;
  #line 1096 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1099 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 48U) != 0U) != 0L) {
    #line 1099 
    char *tmp_0;
    #line 1099 
    ;
    #line 1099 
    ;
    #line 1099 
    ;
    #line 1099 
    ;
    #line 1099 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1099 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1099 
                                                                    tmp_0 = (char *)"";
    #line 1099 
    printk((char *)"\001",(char *)"qede_set_channels",1099,tmp_0,channels->rx_count,channels->tx_count,channels->other_count,channels->combined_count);
  }
  #line 1104 
  count = (channels->rx_count + channels->tx_count) + channels->combined_count;
  #line 1108 
  if (channels->other_count != 0U) {
    #line 1109 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 48U) != 0U) != 0L) {
      #line 1109 
      char *tmp_1;
      #line 1109 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1109 
                                                    tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1109 
                                                                    tmp_1 = (char *)"";
      #line 1109 
      printk((char *)"\001",(char *)"qede_set_channels",1109,tmp_1);
    }
    #line 1111 
    return -22;
  }
  #line 1114 
  if (channels->combined_count == 0U && (channels->rx_count == 0U || channels->tx_count == 0U)) {
    #line 1116 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 48U) != 0U) != 0L) {
      #line 1116 
      char *tmp_2;
      #line 1116 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1116 
                                                    tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1116 
                                                                    tmp_2 = (char *)"";
      #line 1116 
      printk((char *)"\001",(char *)"qede_set_channels",1116,tmp_2);
    }
    #line 1118 
    return -22;
  }
  #line 1121 
  if ((unsigned int)edev->dev_info.num_queues < count) {
    #line 1122 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 48U) != 0U) != 0L) {
      #line 1122 
      char *tmp_3;
      #line 1122 
      ;
      #line 1122 
      ;
      #line 1122 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1122 
                                                    tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1122 
                                                                    tmp_3 = (char *)"";
      #line 1122 
      printk((char *)"\001",(char *)"qede_set_channels",1122,tmp_3,count,(int)edev->dev_info.num_queues);
    }
    #line 1125 
    return -22;
  }
  #line 1129 
  if (((unsigned int)edev->num_queues == count && channels->tx_count == (unsigned int)edev->fp_num_tx) && channels->rx_count == (unsigned int)edev->fp_num_rx) {
    #line 1132 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 48U) != 0U) != 0L) {
      #line 1132 
      char *tmp_4;
      #line 1132 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1132 
                                                    tmp_4 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1132 
                                                                    tmp_4 = (char *)"";
      #line 1132 
      printk((char *)"\001",(char *)"qede_set_channels",1132,tmp_4);
    }
    #line 1134 
    return 0;
  }
  #line 1138 
  if ((count % (unsigned int)edev->dev_info.common.num_hwfns != 0U || channels->tx_count % (unsigned int)edev->dev_info.common.num_hwfns != 0U) || channels->rx_count % (unsigned int)edev->dev_info.common.num_hwfns != 0U) {
    #line 1141 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 48U) != 0U) != 0L) {
      #line 1141 
      char *tmp_5;
      #line 1141 
      ;
      #line 1141 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1141 
                                                    tmp_5 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1141 
                                                                    tmp_5 = (char *)"";
      #line 1141 
      printk((char *)"\001",(char *)"qede_set_channels",1141,tmp_5,(int)edev->dev_info.common.num_hwfns);
    }
    #line 1144 
    return -22;
  }
  #line 1148 
  edev->req_queues = (unsigned short)count;
  #line 1149 
  edev->req_num_tx = (unsigned char)channels->tx_count;
  #line 1150 
  edev->req_num_rx = (unsigned char)channels->rx_count;
  #line 1152 
  if ((int)edev->req_queues - (int)edev->req_num_tx != (int)edev->num_queues - (int)edev->fp_num_tx) {
    #line 1153 
    edev->rss_params_inited &= 4294967294U;
    #line 1154 
    memset((void *)(& edev->rss_ind_table),0,256UL);
  }
  #line 1157 
  qede_reload(edev,(struct qede_reload_args *)0,(_Bool)0);
  #line 1159 
  return 0;
}

#line 1162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_get_ts_info(struct net_device *dev, struct ethtool_ts_info *info)
{
  #line 1165 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1167 
  return qede_ptp_get_ts_info(edev,info);
}

#line 1170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_set_phys_id(struct net_device *dev, enum ethtool_phys_id_state state)
{
  #line 1173 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1174 
  u8 led_state = (unsigned char)0U;
  #line 1176 
  switch ((unsigned int)state) {
    #line 1177 
    case (unsigned int)1: 
                          #line 1177 
    ;
    #line 1178 
    return 1;
    #line 1180 
    case (unsigned int)2: 
                          #line 1180 
    ;
    #line 1181 
    led_state = (unsigned char)1U;
    #line 1182 
    break;
    #line 1184 
    case (unsigned int)3: 
                          #line 1184 
    ;
    #line 1185 
    led_state = (unsigned char)0U;
    #line 1186 
    break;
    #line 1188 
    case (unsigned int)0: 
                          #line 1188 
    ;
    #line 1189 
    led_state = (unsigned char)2U;
    #line 1190 
    break;
  }
  #line 1193 
  (*(((edev->ops)->common)->set_led))(edev->cdev,(enum qed_led_mode)led_state);
  #line 1195 
  return 0;
}

#line 1198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_get_rss_flags(struct qede_dev *edev, struct ethtool_rxnfc *info)
{
  #line 1200 
  info->data = 48ULL;
  #line 1202 
  switch (info->flow_type) {
    #line 1203 
    case (__u32)1: 
                   #line 1203 
    ;
    #line 1204 
    case (__u32)5: 
                   #line 1204 
    ;
    #line 1205 
    info->data |= 192ULL;
    #line 1206 
    break;
    #line 1207 
    case (__u32)2: 
                   #line 1207 
    ;
    #line 1208 
    if (((int)edev->rss_caps & 16) != 0) 
                                         #line 1209 
                                         info->data |= 192ULL;
    #line 1210 
    break;
    #line 1211 
    case (__u32)6: 
                   #line 1211 
    ;
    #line 1212 
    if (((int)edev->rss_caps & 32) != 0) 
                                         #line 1213 
                                         info->data |= 192ULL;
    #line 1214 
    break;
    #line 1215 
    case (__u32)16: 
                    #line 1215 
    ;
    #line 1216 
    case (__u32)17: 
                    #line 1216 
    ;
    #line 1217 
    break;
    #line 1218 
    default: 
             #line 1218 
    ;
    #line 1219 
    info->data = 0ULL;
    #line 1220 
    break;
  }
  #line 1223 
  return 0;
}

#line 1226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_get_rxnfc(struct net_device *dev, struct ethtool_rxnfc *info, u32 *rule_locs)
{
  #line 1229 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1230 
  int rc = 0;
  #line 1232 
  switch (info->cmd) {
    #line 1250 
    char *tmp_1;
    #line 1233 
    case (__u32)45: 
                    #line 1233 
    ;
    #line 1234 
    info->data = (unsigned long long)((int)edev->num_queues - (int)edev->fp_num_tx);
    #line 1235 
    break;
    #line 1236 
    case (__u32)41: 
                    #line 1236 
    ;
    #line 1237 
    rc = qede_get_rss_flags(edev,info);
    #line 1238 
    break;
    #line 1239 
    case (__u32)46: 
                    #line 1239 
    ;
    #line 1240 
    info->__anonCompField_ethtool_rxnfc_99.rule_cnt = (unsigned int)qede_get_arfs_filter_count(edev);
    #line 1241 
    info->data = 256ULL;
    #line 1242 
    break;
    #line 1243 
    case (__u32)47: 
                    #line 1243 
    ;
    #line 1244 
    rc = qede_get_cls_rule_entry(edev,info);
    #line 1245 
    break;
    #line 1246 
    case (__u32)48: 
                    #line 1246 
    ;
    #line 1247 
    rc = qede_get_cls_rule_all(edev,info,rule_locs);
    #line 1248 
    break;
    #line 1249 
    default: 
             #line 1249 
    ;
    #line 1250 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1250 
                                                  tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1250 
                                                                    tmp_1 = (char *)"";
    #line 1250 
    printk((char *)"\001",(char *)"qede_get_rxnfc",1250,tmp_1);
    #line 1251 
    rc = -95;
  }
  #line 1254 
  return rc;
}

#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_set_rss_flags(struct qede_dev *edev, struct ethtool_rxnfc *info)
{
  #line 1259 
  struct qed_update_vport_params *vport_update_params;
  #line 1260 
  u8 set_caps = (unsigned char)0U;
  #line 1260 
  u8 clr_caps = (unsigned char)0U;
  #line 1261 
  int rc = 0;
  #line 1263 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
    #line 1263 
    char *tmp;
    #line 1263 
    ;
    #line 1263 
    ;
    #line 1263 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1263 
                                                  tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1263 
                                                                    tmp = (char *)"";
    #line 1263 
    printk((char *)"\001",(char *)"qede_set_rss_flags",1263,tmp,info->flow_type,info->data);
  }
  #line 1267 
  switch (info->flow_type) {
    #line 1268 
    case (__u32)1: 
                   #line 1268 
    ;
    #line 1269 
    case (__u32)5: 
                   #line 1269 
    ;
    #line 1271 
    if (info->data != 240ULL) {
      #line 1273 
      if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
        #line 1273 
        char *tmp_0;
        #line 1273 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1273 
                                                      tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1273 
                                                                    tmp_0 = (char *)"";
        #line 1273 
        printk((char *)"\001",(char *)"qede_set_rss_flags",1273,tmp_0);
      }
      #line 1274 
      return -22;
    }
    #line 1276 
    return 0;
    #line 1277 
    case (__u32)2: 
                   #line 1277 
    ;
    #line 1279 
    if (info->data == 240ULL) {
      #line 1281 
      set_caps = (unsigned char)16U;
      #line 1282 
      if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
        #line 1282 
        char *tmp_1;
        #line 1282 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1282 
                                                      tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1282 
                                                                    tmp_1 = (char *)"";
        #line 1282 
        printk((char *)"\001",(char *)"qede_set_rss_flags",1282,tmp_1);
      }
    }
    else 
      #line 1284 
      if (info->data == 48ULL) {
        #line 1285 
        clr_caps = (unsigned char)16U;
        #line 1286 
        if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
          #line 1286 
          char *tmp_2;
          #line 1286 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 1286 
                                                        tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1286 
                                                                    tmp_2 = (char *)"";
          #line 1286 
          printk((char *)"\001",(char *)"qede_set_rss_flags",1286,tmp_2);
        }
      }
      else 
           #line 1289 
           return -22;
    #line 1291 
    break;
    #line 1292 
    case (__u32)6: 
                   #line 1292 
    ;
    #line 1294 
    if (info->data == 240ULL) {
      #line 1296 
      set_caps = (unsigned char)32U;
      #line 1297 
      if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
        #line 1297 
        char *tmp_3;
        #line 1297 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1297 
                                                      tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1297 
                                                                    tmp_3 = (char *)"";
        #line 1297 
        printk((char *)"\001",(char *)"qede_set_rss_flags",1297,tmp_3);
      }
    }
    else 
      #line 1299 
      if (info->data == 48ULL) {
        #line 1300 
        clr_caps = (unsigned char)32U;
        #line 1301 
        if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
          #line 1301 
          char *tmp_4;
          #line 1301 
          if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                        #line 1301 
                                                        tmp_4 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1301 
                                                                    tmp_4 = (char *)"";
          #line 1301 
          printk((char *)"\001",(char *)"qede_set_rss_flags",1301,tmp_4);
        }
      }
      else 
           #line 1304 
           return -22;
    #line 1306 
    break;
    #line 1307 
    case (__u32)16: 
                    #line 1307 
    ;
    #line 1308 
    case (__u32)17: 
                    #line 1308 
    ;
    #line 1310 
    if (info->data != 48ULL) {
      #line 1311 
      if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
        #line 1311 
        char *tmp_5;
        #line 1311 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1311 
                                                      tmp_5 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1311 
                                                                    tmp_5 = (char *)"";
        #line 1311 
        printk((char *)"\001",(char *)"qede_set_rss_flags",1311,tmp_5);
      }
      #line 1312 
      return -22;
    }
    #line 1314 
    return 0;
    #line 1315 
    case (__u32)3: 
                   #line 1315 
    ;
    #line 1316 
    case (__u32)4: 
                   #line 1316 
    ;
    #line 1317 
    case (__u32)9: 
                   #line 1317 
    ;
    #line 1318 
    case (__u32)10: 
                    #line 1318 
    ;
    #line 1319 
    case (__u32)7: 
                   #line 1319 
    ;
    #line 1320 
    case (__u32)8: 
                   #line 1320 
    ;
    #line 1321 
    case (__u32)11: 
                    #line 1321 
    ;
    #line 1322 
    case (__u32)12: 
                    #line 1322 
    ;
    #line 1323 
    case (__u32)13: 
                    #line 1323 
    ;
    #line 1324 
    case (__u32)18: 
                    #line 1324 
    ;
    #line 1326 
    if (info->data != 0ULL) {
      #line 1327 
      if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
        #line 1327 
        char *tmp_6;
        #line 1327 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1327 
                                                      tmp_6 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1327 
                                                                    tmp_6 = (char *)"";
        #line 1327 
        printk((char *)"\001",(char *)"qede_set_rss_flags",1327,tmp_6);
      }
      #line 1328 
      return -22;
    }
    #line 1330 
    return 0;
    #line 1331 
    default: 
             #line 1331 
    ;
    #line 1332 
    return -22;
  }
  #line 1336 
  if ((int)edev->rss_caps == (((int)edev->rss_caps & ~ ((int)clr_caps)) | (int)set_caps)) 
    #line 1337 
    return 0;
  #line 1340 
  edev->rss_caps = (unsigned char)(((int)edev->rss_caps & ~ ((int)clr_caps)) | (int)set_caps);
  #line 1341 
  edev->rss_params_inited |= 4U;
  #line 1344 
  __qede_lock(edev);
  #line 1345 
  if (edev->state == 1U) {
    #line 1346 
    vport_update_params = (struct qed_update_vport_params *)cif_vzalloc_1(1080UL);
    #line 1347 
    if (vport_update_params == (struct qed_update_vport_params *)0) {
      #line 1348 
      __qede_unlock(edev);
      #line 1349 
      return -12;
    }
    #line 1351 
    qede_fill_rss_params(edev,& vport_update_params->rss_params,& vport_update_params->update_rss_flg);
    #line 1353 
    rc = (*((edev->ops)->vport_update))(edev->cdev,vport_update_params);
    #line 1354 
    cif_vfree_1((void *)vport_update_params);
  }
  #line 1356 
  __qede_unlock(edev);
  #line 1358 
  return rc;
}

#line 1361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_set_rxnfc(struct net_device *dev, struct ethtool_rxnfc *info)
{
  #line 1364 
  int rc;
  #line 1363 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1366 
  switch (info->cmd) {
    #line 1367 
    case (__u32)42: 
                    #line 1367 
    ;
    #line 1368 
    rc = qede_set_rss_flags(edev,info);
    #line 1369 
    break;
    #line 1370 
    case (__u32)50: 
                    #line 1370 
    ;
    #line 1371 
    rc = qede_add_cls_rule(edev,info);
    #line 1372 
    break;
    #line 1373 
    case (__u32)49: 
                    #line 1373 
    ;
    #line 1374 
    rc = qede_delete_flow_filter(edev,(unsigned long long)info->fs.location);
    #line 1375 
    break;
    #line 1376 
    default: 
             #line 1376 
    ;
    #line 1377 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 1377 
      char *tmp_0;
      #line 1377 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1377 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1377 
                                                                    tmp_0 = (char *)"";
      #line 1377 
      printk((char *)"\001",(char *)"qede_set_rxnfc",1377,tmp_0);
    }
    #line 1378 
    rc = -95;
  }
  #line 1381 
  return rc;
}

#line 1384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static u32 qede_get_rxfh_indir_size(struct net_device *dev)
{
  #line 1386 
  return 128U;
}

#line 1389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static u32 qede_get_rxfh_key_size(struct net_device *dev)
{
  #line 1391 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1393 
  return 40U;
}

#line 1396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_get_rxfh(struct net_device *dev, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 1399 
  int i;
  #line 1398 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1401 
  if (hfunc != (u8 *)0U) 
                         #line 1402 
                         *hfunc = (unsigned char)1U;
  #line 1404 
  if (indir == (u32 *)0U) 
                          #line 1405 
                          return 0;
  #line 1407 
  i = 0;
  #line 1407 
  while (i <= 127) {
    #line 1408 
    *(indir + (unsigned long)i) = (unsigned int)edev->rss_ind_table[i];
    #line 1407 
    i ++;
  }
  #line 1410 
  if (key != (u8 *)0U) {
    #line 1411 
    ;
    #line 1411 
    ;
    #line 1411 
    memcpy((void *)key,(void *)(& edev->rss_key),(unsigned long)qede_get_rxfh_key_size(dev));
  }
  #line 1413 
  return 0;
}

#line 1416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_set_rxfh(struct net_device *dev, u32 *indir, u8 *key, u8 hfunc)
{
  #line 1419 
  struct qed_update_vport_params *vport_update_params;
  #line 1421 
  int i;
  #line 1420 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1421 
  int rc = 0;
  #line 1423 
  if ((unsigned int)edev->dev_info.common.num_hwfns > 1U) {
    #line 1424 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 1424 
      char *tmp_0;
      #line 1424 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1424 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1424 
                                                                    tmp_0 = (char *)"";
      #line 1424 
      printk((char *)"\001",(char *)"qede_set_rxfh",1424,tmp_0);
    }
    #line 1426 
    return -95;
  }
  #line 1429 
  if ((unsigned int)hfunc > 1U) 
                                #line 1430 
                                return -95;
  #line 1432 
  if (indir == (u32 *)0U && key == (u8 *)0U) 
                                             #line 1433 
                                             return 0;
  #line 1435 
  if (indir != (u32 *)0U) {
    #line 1436 
    i = 0;
    #line 1436 
    while (i <= 127) {
      #line 1437 
      edev->rss_ind_table[i] = (unsigned short)*(indir + (unsigned long)i);
      #line 1436 
      i ++;
    }
    #line 1438 
    edev->rss_params_inited |= 1U;
  }
  #line 1441 
  if (key != (u8 *)0U) {
    #line 1442 
    ;
    #line 1442 
    ;
    #line 1442 
    memcpy((void *)(& edev->rss_key),(void *)key,(unsigned long)qede_get_rxfh_key_size(dev));
    #line 1443 
    edev->rss_params_inited |= 2U;
  }
  #line 1446 
  __qede_lock(edev);
  #line 1447 
  if (edev->state == 1U) {
    #line 1448 
    vport_update_params = (struct qed_update_vport_params *)cif_vzalloc_1(1080UL);
    #line 1449 
    if (vport_update_params == (struct qed_update_vport_params *)0) {
      #line 1450 
      __qede_unlock(edev);
      #line 1451 
      return -12;
    }
    #line 1453 
    qede_fill_rss_params(edev,& vport_update_params->rss_params,& vport_update_params->update_rss_flg);
    #line 1455 
    rc = (*((edev->ops)->vport_update))(edev->cdev,vport_update_params);
    #line 1456 
    cif_vfree_1((void *)vport_update_params);
  }
  #line 1458 
  __qede_unlock(edev);
  #line 1460 
  return rc;
}

#line 1464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_netif_start(struct qede_dev *edev)
{
  #line 1466 
  int i;
  #line 1468 
  if (! netif_running(edev->ndev)) 
                                   #line 1469 
                                   return;
  #line 1471 
  i = 0;
  #line 1471 
  while ((int)edev->num_queues > i) {
    #line 1473 
    qed_sb_ack((edev->fp_array + (unsigned long)i)->sb_info,(enum igu_int_cmd)IGU_INT_ENABLE,(unsigned char)1);
    #line 1474 
    napi_enable_0(& (edev->fp_array + (unsigned long)i)->napi);
    #line 1471 
    i ++;
  }
  #line 1476 
  return;
}

#line 1479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_netif_stop(struct qede_dev *edev)
{
  #line 1481 
  int i;
  #line 1483 
  i = 0;
  #line 1483 
  while ((int)edev->num_queues > i) {
    #line 1484 
    napi_disable(& (edev->fp_array + (unsigned long)i)->napi);
    #line 1486 
    qed_sb_ack((edev->fp_array + (unsigned long)i)->sb_info,(enum igu_int_cmd)IGU_INT_DISABLE,(unsigned char)0);
    #line 1483 
    i ++;
  }
  #line 1488 
  return;
}

#line 1490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_selftest_transmit_traffic(struct qede_dev *edev, struct sk_buff *skb)
{
  #line 1494 
  struct eth_tx_1st_bd *first_bd;
  #line 1495 
  dma_addr_t mapping;
  #line 1496 
  int i;
  #line 1496 
  int idx;
  #line 1497 
  u16 val;
  #line 1493 
  struct qede_tx_queue *txq = (struct qede_tx_queue *)0;
  #line 1499 
  i = 0;
  #line 1499 
  while ((int)edev->num_queues > i) {
    {
      #line 1500 
      struct qede_fastpath *fp = edev->fp_array + (unsigned long)i;
      #line 1502 
      if (((unsigned long)fp->type & 1UL) != 0UL) {
        #line 1503 
        txq = fp->txq;
        #line 1504 
        break;
      }
    }
    #line 1499 
    i ++;
  }
  #line 1508 
  if (txq == (struct qede_tx_queue *)0) {
    #line 1509 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1509 
      char *tmp;
      #line 1509 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1509 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1509 
                                                                    tmp = (char *)"";
      #line 1509 
      printk((char *)"\001",(char *)"qede_selftest_transmit_traffic",1509,tmp);
    }
    #line 1510 
    return -1;
  }
  #line 1514 
  idx = (int)txq->sw_tx_prod;
  #line 1515 
  (txq->sw_tx_ring.skbs + (unsigned long)idx)->skb = skb;
  #line 1516 
  first_bd = (struct eth_tx_1st_bd *)qed_chain_produce(& txq->tx_pbl);
  #line 1517 
  memset((void *)first_bd,0,16UL);
  #line 1518 
  val = (unsigned short)1U;
  #line 1519 
  first_bd->data.bd_flags.bitfields = (unsigned char)val;
  #line 1520 
  val = (unsigned short)((unsigned int)((unsigned short)skb->len) & 16383U);
  #line 1521 
  val = (unsigned short)((int)val << 2U);
  #line 1522 
  first_bd->data.bitfields = (unsigned short)((int)first_bd->data.bitfields | (int)val);
  #line 1525 
  ;
  #line 1525 
  ;
  #line 1525 
  mapping = dma_map_single_attrs(& (edev->pdev)->dev,(void *)skb->data,(unsigned long)skb_headlen(skb),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 1527 
  if ((long)(dma_mapping_error(& (edev->pdev)->dev,mapping) != 0) != 0L) {
    #line 1528 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1528 
      char *tmp_2;
      #line 1528 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1528 
                                                    tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1528 
                                                                    tmp_2 = (char *)"";
      #line 1528 
      printk((char *)"\001",(char *)"qede_selftest_transmit_traffic",1528,tmp_2);
    }
    #line 1529 
    return -12;
  }
  {
    #line 1531 
    first_bd->addr.hi = (unsigned int)(mapping >> 32);
    #line 1531 
    first_bd->addr.lo = (unsigned int)mapping;
    #line 1531 
    first_bd->nbytes = (unsigned short)skb_headlen(skb);
  }
  #line 1534 
  first_bd->data.nbds = (unsigned char)1U;
  #line 1535 
  txq->sw_tx_prod = (unsigned short)(((int)txq->sw_tx_prod + 1) % (int)txq->num_tx_buffers);
  #line 1537 
  val = qed_chain_get_prod_idx(& txq->tx_pbl);
  #line 1538 
  txq->tx_db.data.bd_prod = val;
  #line 1539 
  ldv_inline_asm();
  #line 1540 
  ldv_inline_asm();
  #line 1545 
  writel(txq->tx_db.raw,txq->doorbell_addr);
  #line 1547 
  i = 0;
  #line 1547 
  while (i <= 99) {
    {
      #line 1548 
      if (qede_txq_has_work(txq) != 0) 
                                       #line 1549 
                                       break;
      #line 1550 
      usleep_range(100UL,200UL);
    }
    #line 1547 
    i ++;
  }
  #line 1553 
  if (qede_txq_has_work(txq) == 0) {
    #line 1554 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1554 
      char *tmp_6;
      #line 1554 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1554 
                                                    tmp_6 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1554 
                                                                    tmp_6 = (char *)"";
      #line 1554 
      printk((char *)"\001",(char *)"qede_selftest_transmit_traffic",1554,tmp_6);
    }
    #line 1555 
    return -1;
  }
  #line 1558 
  first_bd = (struct eth_tx_1st_bd *)qed_chain_consume(& txq->tx_pbl);
  #line 1559 
  dma_unmap_single_attrs(& (edev->pdev)->dev,((unsigned long long)first_bd->addr.hi << 32) + (unsigned long long)first_bd->addr.lo,(unsigned long)first_bd->nbytes,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 1561 
  txq->sw_tx_cons = (unsigned short)(((int)txq->sw_tx_cons + 1) % (int)txq->num_tx_buffers);
  #line 1562 
  (txq->sw_tx_ring.skbs + (unsigned long)idx)->skb = (struct sk_buff *)0;
  #line 1564 
  return 0;
}

#line 1567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_selftest_receive_traffic(struct qede_dev *edev)
{
  #line 1569 
  u16 hw_comp_cons;
  #line 1569 
  u16 sw_comp_cons;
  #line 1569 
  u16 sw_rx_index;
  #line 1569 
  u16 len;
  #line 1570 
  struct eth_fast_path_rx_reg_cqe *fp_cqe;
  #line 1572 
  struct sw_rx_data *sw_rx_data;
  #line 1573 
  union eth_rx_cqe *cqe;
  #line 1574 
  int i;
  #line 1574 
  int iter;
  #line 1575 
  u8 *data_ptr;
  #line 1571 
  struct qede_rx_queue *rxq = (struct qede_rx_queue *)0;
  #line 1574 
  int rc = 0;
  #line 1577 
  i = 0;
  #line 1577 
  while ((int)edev->num_queues > i) {
    #line 1578 
    if (((unsigned long)(edev->fp_array + (unsigned long)i)->type & 2UL) != 0UL) {
      #line 1579 
      rxq = (edev->fp_array + (unsigned long)i)->rxq;
      #line 1580 
      break;
    }
    #line 1577 
    i ++;
  }
  #line 1584 
  if (rxq == (struct qede_rx_queue *)0) {
    #line 1585 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1585 
      char *tmp;
      #line 1585 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1585 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1585 
                                                                    tmp = (char *)"";
      #line 1585 
      printk((char *)"\001",(char *)"qede_selftest_receive_traffic",1585,tmp);
    }
    #line 1586 
    return -1;
  }
  #line 1593 
  iter = 0;
  #line 1593 
  while (iter <= 99) {
    {
      #line 1594 
      if (! qede_has_rx_work(rxq)) {
        #line 1595 
        usleep_range(100UL,200UL);
        #line 1596 
        goto __Cont;
      }
      #line 1599 
      hw_comp_cons = *(rxq->hw_cons_ptr);
      #line 1600 
      sw_comp_cons = qed_chain_get_cons_idx(& rxq->rx_comp_ring);
      #line 1601 
      ldv_inline_asm();
      #line 1611 
      cqe = (union eth_rx_cqe *)qed_chain_consume(& rxq->rx_comp_ring);
      #line 1614 
      sw_rx_index = (unsigned short)((unsigned int)rxq->sw_rx_cons & 8191U);
      #line 1615 
      sw_rx_data = rxq->sw_rx_ring + (unsigned long)sw_rx_index;
      #line 1616 
      fp_cqe = & cqe->fast_path_regular;
      #line 1617 
      len = fp_cqe->len_on_first_bd;
      #line 1618 
      data_ptr = (u8 *)(lowmem_page_address(sw_rx_data->data) + (((unsigned long)fp_cqe->placement_offset + (unsigned long)sw_rx_data->page_offset) + (unsigned long)rxq->rx_headroom));
      #line 1622 
      if ((int)ether_addr_equal(data_ptr,(edev->ndev)->dev_addr) != 0) {
        #line 1622 
        if ((int)ether_addr_equal(data_ptr + 6U,(edev->ndev)->dev_addr) != 0) {
          #line 1625 
          i = 14;
          #line 1625 
          while ((int)len > i) {
            #line 1626 
            if ((int)*(data_ptr + (unsigned long)i) != (int)((unsigned char)i)) {
              #line 1627 
              rc = -1;
              #line 1628 
              break;
            }
            #line 1625 
            i ++;
          }
          #line 1631 
          qede_recycle_rx_bd_ring(rxq,(unsigned char)1);
          #line 1632 
          qed_chain_recycle_consumed(& rxq->rx_comp_ring);
          #line 1633 
          break;
        }
      }
      #line 1636 
      if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
        #line 1636 
        char *tmp_5;
        #line 1636 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1636 
                                                      tmp_5 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1636 
                                                                    tmp_5 = (char *)"";
        #line 1636 
        printk((char *)"\001",(char *)"qede_selftest_receive_traffic",1636,tmp_5);
      }
      #line 1637 
      qede_recycle_rx_bd_ring(rxq,(unsigned char)1);
      #line 1638 
      qed_chain_recycle_consumed(& rxq->rx_comp_ring);
    }
    #line 1593 
    __Cont: 
            #line 1593 
    iter ++;
  }
  #line 1641 
  if (iter == 100) {
    #line 1642 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1642 
      char *tmp_6;
      #line 1642 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1642 
                                                    tmp_6 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1642 
                                                                    tmp_6 = (char *)"";
      #line 1642 
      printk((char *)"\001",(char *)"qede_selftest_receive_traffic",1642,tmp_6);
    }
    #line 1643 
    return -1;
  }
  #line 1646 
  qede_update_rx_prod(edev,rxq);
  #line 1648 
  return rc;
}

#line 1651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_selftest_run_loopback(struct qede_dev *edev, u32 loopback_mode)
{
  #line 1653 
  struct qed_link_params link_params;
  #line 1655 
  int i;
  #line 1656 
  u32 pkt_size;
  #line 1657 
  u8 *packet;
  #line 1679 
  unsigned int tmp_1;
  #line 1654 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 1655 
  int rc = 0;
  #line 1659 
  if (! netif_running(edev->ndev)) {
    #line 1660 
    if ((long)((unsigned int)edev->dp_level <= 2U) != 0L) {
      #line 1660 
      char *tmp;
      #line 1660 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1660 
                                                    tmp = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1660 
                                                                    tmp = (char *)"";
      #line 1660 
      printk((char *)"\001",(char *)"qede_selftest_run_loopback",1660,tmp);
    }
    #line 1661 
    return -22;
  }
  #line 1664 
  qede_netif_stop(edev);
  #line 1667 
  memset((void *)(& link_params),0,36UL);
  #line 1668 
  link_params.link_up = (_Bool)1;
  #line 1669 
  link_params.override_flags = 16U;
  #line 1670 
  link_params.loopback_mode = loopback_mode;
  #line 1671 
  (*(((edev->ops)->common)->set_link))(edev->cdev,& link_params);
  #line 1674 
  msleep_interruptible(500U);
  #line 1679 
  if (1500U < (edev->ndev)->mtu) 
                                 #line 1679 
                                 tmp_1 = 1500U; else 
                                                     #line 1679 
                                                     tmp_1 = (edev->ndev)->mtu;
  #line 1679 
  pkt_size = tmp_1 + 14U;
  #line 1682 
  skb = netdev_alloc_skb(edev->ndev,pkt_size);
  #line 1683 
  if (skb == (struct sk_buff *)0) {
    #line 1684 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 1684 
      char *tmp_2;
      #line 1684 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1684 
                                                    tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1684 
                                                                    tmp_2 = (char *)"";
      #line 1684 
      printk((char *)"\001",(char *)"qede_selftest_run_loopback",1684,tmp_2);
    }
    #line 1685 
    rc = -12;
    #line 1686 
    goto test_loopback_exit;
  }
  #line 1688 
  packet = (u8 *)skb_put(skb,pkt_size);
  #line 1689 
  ether_addr_copy(packet,(edev->ndev)->dev_addr);
  #line 1690 
  ether_addr_copy(packet + 6U,(edev->ndev)->dev_addr);
  #line 1691 
  memset((void *)(packet + 12U),119,2UL);
  #line 1692 
  i = 14;
  #line 1692 
  while ((unsigned int)i < pkt_size) {
    #line 1693 
    *(packet + (unsigned long)i) = (unsigned char)i;
    #line 1692 
    i ++;
  }
  #line 1695 
  rc = qede_selftest_transmit_traffic(edev,skb);
  #line 1696 
  if (rc != 0) 
               #line 1697 
               goto test_loopback_exit;
  #line 1699 
  rc = qede_selftest_receive_traffic(edev);
  #line 1700 
  if (rc != 0) 
               #line 1701 
               goto test_loopback_exit;
  #line 1703 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 2048U) != 0U) != 0L) {
    #line 1703 
    char *tmp_4;
    #line 1703 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1703 
                                                  tmp_4 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1703 
                                                                    tmp_4 = (char *)"";
    #line 1703 
    printk((char *)"\001",(char *)"qede_selftest_run_loopback",1703,tmp_4);
  }
  #line 1705 
  test_loopback_exit: 
                      #line 1705 
  ;
  #line 1706 
  consume_skb(skb);
  #line 1709 
  memset((void *)(& link_params),0,36UL);
  #line 1710 
  link_params.link_up = (_Bool)1;
  #line 1711 
  link_params.override_flags = 16U;
  #line 1712 
  link_params.loopback_mode = 1U;
  #line 1713 
  (*(((edev->ops)->common)->set_link))(edev->cdev,& link_params);
  #line 1716 
  msleep_interruptible(500U);
  #line 1718 
  qede_netif_start(edev);
  #line 1720 
  return rc;
}

#line 1723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static void qede_self_test(struct net_device *dev, struct ethtool_test *etest, u64 *buf)
{
  #line 1726 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1728 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
    #line 1728 
    char *tmp_0;
    #line 1728 
    ;
    #line 1728 
    ;
    #line 1728 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1728 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1728 
                                                                    tmp_0 = (char *)"";
    #line 1728 
    printk((char *)"\001",(char *)"qede_self_test",1728,tmp_0,etest->flags & 1U,(etest->flags >> 2) & 1U);
  }
  #line 1733 
  memset((void *)buf,0,48UL);
  #line 1735 
  if ((etest->flags & 1U) != 0U) {
    #line 1736 
    if (qede_selftest_run_loopback(edev,2U) != 0) {
      #line 1738 
      *buf = 1ULL;
      #line 1739 
      etest->flags |= 2U;
    }
  }
  #line 1743 
  if ((*((((edev->ops)->common)->selftest)->selftest_interrupt))(edev->cdev) != 0) {
    #line 1744 
    *(buf + 1U) = 1ULL;
    #line 1745 
    etest->flags |= 2U;
  }
  #line 1748 
  if ((*((((edev->ops)->common)->selftest)->selftest_memory))(edev->cdev) != 0) {
    #line 1749 
    *(buf + 2U) = 1ULL;
    #line 1750 
    etest->flags |= 2U;
  }
  #line 1753 
  if ((*((((edev->ops)->common)->selftest)->selftest_register))(edev->cdev) != 0) {
    #line 1754 
    *(buf + 3U) = 1ULL;
    #line 1755 
    etest->flags |= 2U;
  }
  #line 1758 
  if ((*((((edev->ops)->common)->selftest)->selftest_clock))(edev->cdev) != 0) {
    #line 1759 
    *(buf + 4U) = 1ULL;
    #line 1760 
    etest->flags |= 2U;
  }
  #line 1763 
  if ((*((((edev->ops)->common)->selftest)->selftest_nvram))(edev->cdev) != 0) {
    #line 1764 
    *(buf + 5U) = 1ULL;
    #line 1765 
    etest->flags |= 2U;
  }
  #line 1767 
  return;
}

#line 1769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_set_tunable(struct net_device *dev, struct ethtool_tunable *tuna, void *data)
{
  #line 1774 
  u32 val;
  #line 1773 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1776 
  switch (tuna->id) {
    #line 1777 
    case (__u32)1: 
                   #line 1777 
    ;
    #line 1778 
    val = *((u32 *)data);
    #line 1779 
    if (val + 4294967232U > 192U) {
      #line 1780 
      if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
        #line 1780 
        char *tmp_0;
        #line 1780 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1780 
                                                      tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1780 
                                                                    tmp_0 = (char *)"";
        #line 1780 
        printk((char *)"\001",(char *)"qede_set_tunable",1780,tmp_0,64,256);
      }
      #line 1783 
      return -22;
    }
    #line 1786 
    edev->rx_copybreak = *((u32 *)data);
    #line 1787 
    break;
    #line 1788 
    default: 
             #line 1788 
    ;
    #line 1789 
    return -95;
  }
  #line 1792 
  return 0;
}

#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_get_tunable(struct net_device *dev, struct ethtool_tunable *tuna, void *data)
{
  #line 1798 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1800 
  switch (tuna->id) {
    #line 1801 
    case (__u32)1: 
                   #line 1801 
    ;
    #line 1802 
    *((u32 *)data) = edev->rx_copybreak;
    #line 1803 
    break;
    #line 1804 
    default: 
             #line 1804 
    ;
    #line 1805 
    return -95;
  }
  #line 1808 
  return 0;
}

#line 1811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_get_eee(struct net_device *dev, struct ethtool_eee *edata)
{
  #line 1814 
  struct qed_link_output current_link;
  #line 1813 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1816 
  memset((void *)(& current_link),0,40UL);
  #line 1817 
  (*(((edev->ops)->common)->get_link))(edev->cdev,& current_link);
  #line 1819 
  if (! current_link.eee_supported) {
    #line 1820 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 1820 
      char *tmp_0;
      #line 1820 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1820 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1820 
                                                                    tmp_0 = (char *)"";
      #line 1820 
      printk((char *)"\001",(char *)"qede_get_eee",1820,tmp_0);
    }
    #line 1821 
    return -95;
  }
  #line 1824 
  if (((unsigned long)current_link.eee.adv_caps & 1UL) != 0UL) 
                                                               #line 1825 
                                                               edata->advertised = 32U;
  #line 1826 
  if (((unsigned long)current_link.eee.adv_caps & 2UL) != 0UL) 
                                                               #line 1827 
                                                               edata->advertised |= 4096U;
  #line 1828 
  if (((unsigned long)current_link.sup_caps & 1UL) != 0UL) 
                                                           #line 1829 
                                                           edata->supported = 32U;
  #line 1830 
  if (((unsigned long)current_link.sup_caps & 2UL) != 0UL) 
                                                           #line 1831 
                                                           edata->supported |= 4096U;
  #line 1832 
  if (((unsigned long)current_link.eee.lp_adv_caps & 1UL) != 0UL) 
                                                                  #line 1833 
                                                                  edata->lp_advertised = 32U;
  #line 1834 
  if (((unsigned long)current_link.eee.lp_adv_caps & 2UL) != 0UL) 
                                                                  #line 1835 
                                                                  edata->lp_advertised |= 4096U;
  #line 1837 
  edata->tx_lpi_timer = current_link.eee.tx_lpi_timer;
  #line 1838 
  edata->eee_enabled = (unsigned int)current_link.eee.enable;
  #line 1839 
  edata->tx_lpi_enabled = (unsigned int)current_link.eee.tx_lpi_enable;
  #line 1840 
  edata->eee_active = (unsigned int)current_link.eee_active;
  #line 1842 
  return 0;
}

#line 1845  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_set_eee(struct net_device *dev, struct ethtool_eee *edata)
{
  #line 1848 
  struct qed_link_output current_link;
  #line 1849 
  struct qed_link_params params;
  #line 1847 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1851 
  if (! (*(((edev->ops)->common)->can_link_change))(edev->cdev)) {
    #line 1852 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 1852 
      char *tmp_0;
      #line 1852 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1852 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1852 
                                                                    tmp_0 = (char *)"";
      #line 1852 
      printk((char *)"\001",(char *)"qede_set_eee",1852,tmp_0);
    }
    #line 1853 
    return -95;
  }
  #line 1856 
  memset((void *)(& current_link),0,40UL);
  #line 1857 
  (*(((edev->ops)->common)->get_link))(edev->cdev,& current_link);
  #line 1859 
  if (! current_link.eee_supported) {
    #line 1860 
    if ((long)((unsigned int)edev->dp_level <= 1U) != 0L) {
      #line 1860 
      char *tmp_2;
      #line 1860 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1860 
                                                    tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1860 
                                                                    tmp_2 = (char *)"";
      #line 1860 
      printk((char *)"\001",(char *)"qede_set_eee",1860,tmp_2);
    }
    #line 1861 
    return -95;
  }
  #line 1864 
  memset((void *)(& params),0,36UL);
  #line 1865 
  params.override_flags |= 32U;
  #line 1867 
  if (((unsigned long)edata->advertised & 4128UL) == 0UL || ((unsigned long)edata->advertised & 4128UL) != (unsigned long)edata->advertised) {
    #line 1872 
    if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
      #line 1872 
      char *tmp_3;
      #line 1872 
      ;
      #line 1872 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1872 
                                                    tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1872 
                                                                    tmp_3 = (char *)"";
      #line 1872 
      printk((char *)"\001",(char *)"qede_set_eee",1872,tmp_3,edata->advertised);
    }
    #line 1875 
    return -22;
  }
  #line 1878 
  if (((unsigned long)edata->advertised & 32UL) != 0UL) 
                                                        #line 1879 
                                                        params.eee.adv_caps = (unsigned char)1U;
  #line 1880 
  if (((unsigned long)edata->advertised & 4096UL) != 0UL) 
                                                          #line 1881 
                                                          params.eee.adv_caps = (unsigned char)((unsigned int)params.eee.adv_caps | 2U);
  #line 1882 
  params.eee.enable = (_Bool)(edata->eee_enabled != 0U);
  #line 1883 
  params.eee.tx_lpi_enable = (_Bool)(edata->tx_lpi_enabled != 0U);
  #line 1884 
  params.eee.tx_lpi_timer = edata->tx_lpi_timer;
  #line 1886 
  params.link_up = (_Bool)1;
  #line 1887 
  (*(((edev->ops)->common)->set_link))(edev->cdev,& params);
  #line 1889 
  return 0;
}

#line 1892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_get_module_info(struct net_device *dev, struct ethtool_modinfo *modinfo)
{
  #line 1896 
  u8 buf[4U];
  #line 1897 
  int rc;
  #line 1895 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1900 
  rc = (*(((edev->ops)->common)->read_module_eeprom))(edev->cdev,(char *)(& buf),(unsigned char)160,0U,4U);
  #line 1902 
  if (rc != 0) {
    #line 1903 
    char *tmp_0;
    #line 1903 
    ;
    #line 1903 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1903 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1903 
                                                                    tmp_0 = (char *)"";
    #line 1903 
    printk((char *)"\001",(char *)"qede_get_module_info",1903,tmp_0,rc);
    #line 1904 
    return rc;
  }
  #line 1907 
  switch ((int)buf[0]) {
    #line 1922 
    char *tmp_1;
    #line 1908 
    case 3: 
            #line 1908 
    ;
    #line 1909 
    modinfo->type = 2U;
    #line 1910 
    modinfo->eeprom_len = 512U;
    #line 1911 
    break;
    #line 1912 
    case 12: 
             #line 1912 
    ;
    #line 1913 
    case 13: 
             #line 1913 
    ;
    #line 1914 
    modinfo->type = 4U;
    #line 1915 
    modinfo->eeprom_len = 256U;
    #line 1916 
    break;
    #line 1917 
    case 17: 
             #line 1917 
    ;
    #line 1918 
    modinfo->type = 3U;
    #line 1919 
    modinfo->eeprom_len = 256U;
    #line 1920 
    break;
    #line 1921 
    default: 
             #line 1921 
    ;
    #line 1922 
    ;
    #line 1922 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1922 
                                                  tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1922 
                                                                    tmp_1 = (char *)"";
    #line 1922 
    printk((char *)"\001",(char *)"qede_get_module_info",1922,tmp_1,(int)buf[0]);
    #line 1923 
    return -22;
  }
  #line 1926 
  return 0;
}

#line 1929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_get_module_eeprom(struct net_device *dev, struct ethtool_eeprom *ee, u8 *data)
{
  #line 1932 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1933 
  u32 start_addr = ee->offset;
  #line 1933 
  u32 size = 0U;
  #line 1934 
  u8 *buf = data;
  #line 1935 
  int rc = 0;
  #line 1938 
  if (ee->offset <= 255U) {
    #line 1940 
    if (ee->offset + ee->len > 256U) 
                                     #line 1941 
                                     size = 256U - ee->offset; else 
                                                                    #line 1943 
                                                                    size = ee->len;
    #line 1945 
    rc = (*(((edev->ops)->common)->read_module_eeprom))(edev->cdev,(char *)buf,(unsigned char)160,start_addr,size);
    #line 1948 
    if (rc != 0) {
      #line 1949 
      char *tmp_0;
      #line 1949 
      ;
      #line 1949 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1949 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1949 
                                                                    tmp_0 = (char *)"";
      #line 1949 
      printk((char *)"\001",(char *)"qede_get_module_eeprom",1949,tmp_0,rc);
      #line 1950 
      return rc;
    }
    #line 1953 
    buf += (unsigned long)size;
    #line 1954 
    start_addr += size;
  }
  #line 1958 
  if (start_addr + 4294967040U <= 255U) {
    #line 1960 
    size = ee->len - size;
    #line 1962 
    if (start_addr + size > 512U) 
                                  #line 1963 
                                  size = 512U - start_addr;
    #line 1964 
    start_addr += 4294967040U;
    #line 1965 
    rc = (*(((edev->ops)->common)->read_module_eeprom))(edev->cdev,(char *)buf,(unsigned char)162,start_addr,size);
    #line 1968 
    if (rc != 0) {
      #line 1969 
      if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
        #line 1969 
        char *tmp_1;
        #line 1969 
        ;
        #line 1969 
        if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                      #line 1969 
                                                      tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1969 
                                                                    tmp_1 = (char *)"";
        #line 1969 
        printk((char *)"\001",(char *)"qede_get_module_eeprom",1969,tmp_1,rc);
      }
      #line 1971 
      return 0;
    }
  }
  #line 1975 
  return rc;
}

#line 1978  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_set_dump(struct net_device *dev, struct ethtool_dump *val)
{
  #line 1980 
  struct qede_dev *edev = netdev_priv(dev);
  #line 1981 
  int rc = 0;
  #line 1983 
  if (edev->dump_info.cmd == (unsigned int)QEDE_DUMP_CMD_NONE) {
    #line 1984 
    if (val->flag > 3U) {
      #line 1985 
      char *tmp_0;
      #line 1985 
      ;
      #line 1985 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 1985 
                                                    tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1985 
                                                                    tmp_0 = (char *)"";
      #line 1985 
      printk((char *)"\001",(char *)"qede_set_dump",1985,tmp_0,val->flag);
      #line 1986 
      return -22;
    }
    #line 1988 
    edev->dump_info.cmd = (enum qede_dump_cmd)val->flag;
    #line 1989 
    edev->dump_info.num_args = (unsigned char)0U;
    #line 1990 
    return 0;
  }
  #line 1993 
  if ((unsigned int)edev->dump_info.num_args == 4U) {
    #line 1994 
    char *tmp_1;
    #line 1994 
    ;
    #line 1994 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 1994 
                                                  tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 1994 
                                                                    tmp_1 = (char *)"";
    #line 1994 
    printk((char *)"\001",(char *)"qede_set_dump",1994,tmp_1,(int)edev->dump_info.num_args);
    #line 1995 
    return -22;
  }
  #line 1998 
  switch ((unsigned int)edev->dump_info.cmd) {
    #line 1999 
    case (unsigned int)1: 
                          #line 1999 
    ;
    #line 2000 
    edev->dump_info.args[(int)edev->dump_info.num_args] = val->flag;
    #line 2001 
    edev->dump_info.num_args = (u8)((int)edev->dump_info.num_args + 1);
    #line 2002 
    break;
    #line 2003 
    case (unsigned int)2: 
                          #line 2003 
    ;
    #line 2004 
    rc = (*(((edev->ops)->common)->set_grc_config))(edev->cdev,val->flag,1U);
    #line 2006 
    break;
    #line 2007 
    default: 
             #line 2007 
    ;
    #line 2008 
    break;
  }
  #line 2011 
  return rc;
}

#line 2014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_get_dump_flag(struct net_device *dev, struct ethtool_dump *dump)
{
  #line 2017 
  struct qede_dev *edev = netdev_priv(dev);
  #line 2019 
  if (edev->ops == (struct qed_eth_ops *)0 || (edev->ops)->common == (struct qed_common_ops *)0) {
    #line 2020 
    char *tmp_0;
    #line 2020 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2020 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2020 
                                                                    tmp_0 = (char *)"";
    #line 2020 
    printk((char *)"\001",(char *)"qede_get_dump_flag",2020,tmp_0);
    #line 2021 
    return -22;
  }
  #line 2024 
  dump->version = 1U;
  #line 2025 
  switch ((unsigned int)edev->dump_info.cmd) {
    #line 2036 
    char *tmp_3;
    #line 2026 
    case (unsigned int)1: 
                          #line 2026 
    ;
    #line 2027 
    dump->flag = 1U;
    #line 2028 
    dump->len = (unsigned int)(*(((edev->ops)->common)->read_nvm_cfg_len))(edev->cdev,
                                                     edev->dump_info.args[0]);
    #line 2030 
    break;
    #line 2031 
    case (unsigned int)2: 
                          #line 2031 
    ;
    #line 2032 
    dump->flag = 2U;
    #line 2033 
    dump->len = (unsigned int)(*(((edev->ops)->common)->dbg_all_data_size))(edev->cdev);
    #line 2034 
    break;
    #line 2035 
    default: 
             #line 2035 
    ;
    #line 2036 
    ;
    #line 2036 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2036 
                                                  tmp_3 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2036 
                                                                    tmp_3 = (char *)"";
    #line 2036 
    printk((char *)"\001",(char *)"qede_get_dump_flag",2036,tmp_3,(unsigned int)edev->dump_info.cmd);
    #line 2037 
    return -22;
  }
  #line 2040 
  if ((long)((unsigned int)edev->dp_level == 0U) != 0L && (long)((edev->dp_module & 134217728U) != 0U) != 0L) {
    #line 2040 
    char *tmp_4;
    #line 2040 
    ;
    #line 2040 
    ;
    #line 2040 
    ;
    #line 2040 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2040 
                                                  tmp_4 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2040 
                                                                    tmp_4 = (char *)"";
    #line 2040 
    printk((char *)"\001",(char *)"qede_get_dump_flag",2040,tmp_4,dump->version,dump->flag,dump->len);
  }
  #line 2043 
  return 0;
}

#line 2046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static int qede_get_dump_data(struct net_device *dev, struct ethtool_dump *dump, void *buf)
{
  #line 2049 
  struct qede_dev *edev = netdev_priv(dev);
  #line 2050 
  int rc = 0;
  #line 2052 
  if (edev->ops == (struct qed_eth_ops *)0 || (edev->ops)->common == (struct qed_common_ops *)0) {
    #line 2053 
    char *tmp_0;
    #line 2053 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2053 
                                                  tmp_0 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2053 
                                                                    tmp_0 = (char *)"";
    #line 2053 
    printk((char *)"\001",(char *)"qede_get_dump_data",2053,tmp_0);
    #line 2054 
    rc = -22;
    #line 2055 
    goto err;
  }
  #line 2058 
  switch ((unsigned int)edev->dump_info.cmd) {
    #line 2076 
    char *tmp_2;
    #line 2059 
    case (unsigned int)1: 
                          #line 2059 
    ;
    #line 2060 
    if ((unsigned int)edev->dump_info.num_args != 2U) {
      #line 2061 
      char *tmp_1;
      #line 2061 
      ;
      #line 2061 
      if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                    #line 2061 
                                                    tmp_1 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2061 
                                                                    tmp_1 = (char *)"";
      #line 2061 
      printk((char *)"\001",(char *)"qede_get_dump_data",2061,tmp_1,(int)edev->dump_info.num_args,2);
      #line 2064 
      rc = -22;
      #line 2065 
      goto err;
    }
    #line 2067 
    rc = (*(((edev->ops)->common)->read_nvm_cfg))(edev->cdev,(u8 **)(& buf),edev->dump_info.args[0],edev->dump_info.args[1]);
    #line 2070 
    break;
    #line 2071 
    case (unsigned int)2: 
                          #line 2071 
    ;
    #line 2072 
    memset(buf,0,(unsigned long)dump->len);
    #line 2073 
    rc = (*(((edev->ops)->common)->dbg_all_data))(edev->cdev,buf);
    #line 2074 
    break;
    #line 2075 
    default: 
             #line 2075 
    ;
    #line 2076 
    ;
    #line 2076 
    if (& (edev->ndev)->name != (char (*)[16U])0) 
                                                  #line 2076 
                                                  tmp_2 = (char *)(& (edev->ndev)->name); else 
                                                                    #line 2076 
                                                                    tmp_2 = (char *)"";
    #line 2076 
    printk((char *)"\001",(char *)"qede_get_dump_data",2076,tmp_2,(unsigned int)edev->dump_info.cmd);
    #line 2077 
    rc = -22;
    #line 2078 
    break;
  }
  #line 2081 
  err: 
       #line 2081 
  ;
  #line 2082 
  edev->dump_info.cmd = QEDE_DUMP_CMD_NONE;
  #line 2083 
  edev->dump_info.num_args = (unsigned char)0U;
  #line 2084 
  memset((void *)(& edev->dump_info.args),0,16UL);
  #line 2086 
  return rc;
}

#line 2089  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static struct ethtool_ops qede_ethtool_ops = {.get_drvinfo = & qede_get_drvinfo, .get_regs_len = & qede_get_regs_len, .get_regs = & qede_get_regs, .get_wol = & qede_get_wol, .set_wol = & qede_set_wol, .get_msglevel = & qede_get_msglevel, .set_msglevel = & qede_set_msglevel, .nway_reset = & qede_nway_reset, .get_link = & qede_get_link, .get_coalesce = & qede_get_coalesce, .set_coalesce = & qede_set_coalesce, .get_ringparam = & qede_get_ringparam, .set_ringparam = & qede_set_ringparam, .get_pauseparam = & qede_get_pauseparam, .set_pauseparam = & qede_set_pauseparam, .self_test = & qede_self_test, .get_strings = & qede_get_strings, .set_phys_id = & qede_set_phys_id, .get_ethtool_stats = & qede_get_ethtool_stats, .get_priv_flags = & qede_get_priv_flags, .get_sset_count = & qede_get_sset_count, .get_rxnfc = & qede_get_rxnfc, .set_rxnfc = & qede_set_rxnfc, .flash_device = & qede_flash_device, .get_rxfh_key_size = & qede_get_rxfh_key_size, .get_rxfh_indir_size = & qede_get_rxfh_indir_size, .get_rxfh = & qede_get_rxfh, .set_rxfh = & qede_set_rxfh, .get_channels = & qede_get_channels, .set_channels = & qede_set_channels, .get_dump_flag = & qede_get_dump_flag, .get_dump_data = & qede_get_dump_data, .set_dump = & qede_set_dump, .get_ts_info = & qede_get_ts_info, .get_module_info = & qede_get_module_info, .get_module_eeprom = & qede_get_module_eeprom, .get_eee = & qede_get_eee, .set_eee = & qede_set_eee, .get_tunable = & qede_get_tunable, .set_tunable = & qede_set_tunable, .get_link_ksettings = & qede_get_link_ksettings, .set_link_ksettings = & qede_set_link_ksettings};
#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
static struct ethtool_ops qede_vf_ethtool_ops = {.get_drvinfo = & qede_get_drvinfo, .get_msglevel = & qede_get_msglevel, .set_msglevel = & qede_set_msglevel, .get_link = & qede_get_link, .get_coalesce = & qede_get_coalesce, .set_coalesce = & qede_set_coalesce, .get_ringparam = & qede_get_ringparam, .set_ringparam = & qede_set_ringparam, .get_strings = & qede_get_strings, .get_ethtool_stats = & qede_get_ethtool_stats, .get_priv_flags = & qede_get_priv_flags, .get_sset_count = & qede_get_sset_count, .get_rxnfc = & qede_get_rxnfc, .set_rxnfc = & qede_set_rxnfc, .get_rxfh_key_size = & qede_get_rxfh_key_size, .get_rxfh_indir_size = & qede_get_rxfh_indir_size, .get_rxfh = & qede_get_rxfh, .set_rxfh = & qede_set_rxfh, .get_channels = & qede_get_channels, .set_channels = & qede_set_channels, .get_tunable = & qede_get_tunable, .set_tunable = & qede_set_tunable, .get_link_ksettings = & qede_get_link_ksettings};
#line 2161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/qlogic/qede/qede_ethtool.c"
void qede_set_ethtool_ops(struct net_device *dev)
{
  #line 2163 
  struct qede_dev *edev = netdev_priv(dev);
  #line 2165 
  if ((int)test_bit(0L,& edev->flags) != 0) 
                                            #line 2166 
                                            dev->ethtool_ops = & qede_vf_ethtool_ops; else 
                                                                    #line 2168 
                                                                    dev->ethtool_ops = & qede_ethtool_ops;
  #line 2169 
  return;
}

#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_flash_device(struct net_device *arg0, struct ethtool_flash *arg1)
{
  #line 108 
  return qede_flash_device(arg0,arg1);
}

#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
void emg_wrapper_qede_get_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 113 
  qede_get_channels(arg0,arg1);
  #line 114 
  return;
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 118 
  return qede_get_coalesce(arg0,arg1);
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
void emg_wrapper_qede_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 123 
  qede_get_drvinfo(arg0,arg1);
  #line 124 
  return;
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_get_dump_data(struct net_device *arg0, struct ethtool_dump *arg1, void *arg2)
{
  #line 128 
  return qede_get_dump_data(arg0,arg1,arg2);
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_get_dump_flag(struct net_device *arg0, struct ethtool_dump *arg1)
{
  #line 133 
  return qede_get_dump_flag(arg0,arg1);
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_get_eee(struct net_device *arg0, struct ethtool_eee *arg1)
{
  #line 138 
  return qede_get_eee(arg0,arg1);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
void emg_wrapper_qede_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 143 
  qede_get_ethtool_stats(arg0,arg1,arg2);
  #line 144 
  return;
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
unsigned int emg_wrapper_qede_get_link(struct net_device *arg0)
{
  #line 148 
  return qede_get_link(arg0);
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 153 
  return qede_get_link_ksettings(arg0,arg1);
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_get_module_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 158 
  return qede_get_module_eeprom(arg0,arg1,arg2);
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_get_module_info(struct net_device *arg0, struct ethtool_modinfo *arg1)
{
  #line 163 
  return qede_get_module_info(arg0,arg1);
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
unsigned int emg_wrapper_qede_get_msglevel(struct net_device *arg0)
{
  #line 168 
  return qede_get_msglevel(arg0);
}

#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
void emg_wrapper_qede_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 173 
  qede_get_pauseparam(arg0,arg1);
  #line 174 
  return;
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
unsigned int emg_wrapper_qede_get_priv_flags(struct net_device *arg0)
{
  #line 178 
  return qede_get_priv_flags(arg0);
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
void emg_wrapper_qede_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 183 
  qede_get_regs(arg0,arg1,arg2);
  #line 184 
  return;
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_get_regs_len(struct net_device *arg0)
{
  #line 188 
  return qede_get_regs_len(arg0);
}

#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
void emg_wrapper_qede_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 193 
  qede_get_ringparam(arg0,arg1);
  #line 194 
  return;
}

#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_get_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  #line 198 
  return qede_get_rxfh(arg0,arg1,arg2,arg3);
}

#line 202  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
unsigned int emg_wrapper_qede_get_rxfh_indir_size(struct net_device *arg0)
{
  #line 203 
  return qede_get_rxfh_indir_size(arg0);
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
unsigned int emg_wrapper_qede_get_rxfh_key_size(struct net_device *arg0)
{
  #line 208 
  return qede_get_rxfh_key_size(arg0);
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 213 
  return qede_get_rxnfc(arg0,arg1,arg2);
}

#line 217  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 218 
  return qede_get_sset_count(arg0,arg1);
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
void emg_wrapper_qede_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 223 
  qede_get_strings(arg0,arg1,arg2);
  #line 224 
  return;
}

#line 227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_get_ts_info(struct net_device *arg0, struct ethtool_ts_info *arg1)
{
  #line 228 
  return qede_get_ts_info(arg0,arg1);
}

#line 232  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_get_tunable(struct net_device *arg0, struct ethtool_tunable *arg1, void *arg2)
{
  #line 233 
  return qede_get_tunable(arg0,arg1,arg2);
}

#line 237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
void emg_wrapper_qede_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 238 
  qede_get_wol(arg0,arg1);
  #line 239 
  return;
}

#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_nway_reset(struct net_device *arg0)
{
  #line 243 
  return qede_nway_reset(arg0);
}

#line 247  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
void emg_wrapper_qede_self_test(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  #line 248 
  qede_self_test(arg0,arg1,arg2);
  #line 249 
  return;
}

#line 252  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_set_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 253 
  return qede_set_channels(arg0,arg1);
}

#line 257  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 258 
  return qede_set_coalesce(arg0,arg1);
}

#line 262  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_set_dump(struct net_device *arg0, struct ethtool_dump *arg1)
{
  #line 263 
  return qede_set_dump(arg0,arg1);
}

#line 267  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_set_eee(struct net_device *arg0, struct ethtool_eee *arg1)
{
  #line 268 
  return qede_set_eee(arg0,arg1);
}

#line 272  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 273 
  return qede_set_link_ksettings(arg0,arg1);
}

#line 277  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
void emg_wrapper_qede_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 278 
  qede_set_msglevel(arg0,arg1);
  #line 279 
  return;
}

#line 282  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 283 
  return qede_set_pauseparam(arg0,arg1);
}

#line 287  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_set_phys_id(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 288 
  return qede_set_phys_id(arg0,arg1);
}

#line 292  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 293 
  return qede_set_ringparam(arg0,arg1);
}

#line 297  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_set_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  #line 298 
  return qede_set_rxfh(arg0,arg1,arg2,(unsigned char)((int)arg3));
}

#line 302  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_set_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  #line 303 
  return qede_set_rxnfc(arg0,arg1);
}

#line 307  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_set_tunable(struct net_device *arg0, struct ethtool_tunable *arg1, void *arg2)
{
  #line 308 
  return qede_set_tunable(arg0,arg1,arg2);
}

#line 312  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
int emg_wrapper_qede_set_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 313 
  return qede_set_wol(arg0,arg1);
}

#line 339  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
static void cif_clear_bit_3(long nr, unsigned long *addr)
{
  #line 342 
  ldv_clear_bit(nr,addr);
  #line 343 
  return;
}

#line 360  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
static size_t cif_strlen_0(char *s)
{
  #line 363 
  return ldv_strlen(s);
}

#line 409  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 412 
  ldv_bitmap_zero(dst,nbits);
  #line 413 
  return;
}

#line 964  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
static void *cif_vzalloc_1(unsigned long size)
{
  #line 967 
  return ldv_vzalloc(size);
}

#line 971  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/0/concurrency safety/weaver/qede_ethtool.i.aux"
static void cif_vfree_1(void *addr)
{
  #line 974 
  ldv_vfree(addr);
  #line 975 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
#line 203 
void emg_dispatch_deregister_12(struct net_device *arg0);
#line 122 
#line 169 
void emg_dispatch_deregister_6(struct pci_driver *arg0);
#line 123 
#line 160 
void emg_dispatch_irq_deregister_4(int arg0);
#line 124 
#line 189 
void emg_dispatch_irq_register_9(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 125 
#line 149 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 126 
#line 178 
void emg_dispatch_register_8(struct net_device *arg0);
#line 127 
#line 2316 
void *emg_entry_point_insmod(void *arg0);
#line 130 
#line 212 
void *emg_interrupt_interrupt_scenario_qede_msix_fp_int(void *arg0);
#line 131 
#line 275 
void *emg_net_random_allocationless_scenario_qede_flash_device(void *arg0);
#line 132 
#line 1837 
void *emg_pci_pci_scenario_qede_pci_driver(void *arg0);
#line 140 
#line 2345 
int main(void);
#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 150 
  int ret;
  #line 151 
  struct emg_struct_pci_scenario_qede_pci_driver_15 *cf_arg_15;
  #line 152 
  cf_arg_15 = (struct emg_struct_pci_scenario_qede_pci_driver_15 *)ldv_xmalloc(16UL);
  #line 153 
  cf_arg_15->arg0 = arg0;
  #line 154 
  ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_pci_pci_scenario_qede_pci_driver,(void *)cf_arg_15);
  #line 155 
  __VERIFIER_assume(ret == 0);
  #line 156 
  return;
}

#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_4(int arg0)
{
  #line 161 
  int ret;
  #line 162 
  struct emg_struct_free_irq_4 *cf_arg_13;
  #line 163 
  ret = pthread_join(emg_thread_13,(void **)0);
  #line 164 
  __VERIFIER_assume(ret == 0);
  #line 165 
  return;
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_6(struct pci_driver *arg0)
{
  #line 170 
  int ret;
  #line 171 
  struct emg_struct_pci_scenario_qede_pci_driver_15 *cf_arg_15;
  #line 172 
  ret = pthread_join(emg_thread_15,(void **)0);
  #line 173 
  __VERIFIER_assume(ret == 0);
  #line 174 
  return;
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_8(struct net_device *arg0)
{
  #line 179 
  int ret;
  #line 180 
  struct emg_struct_random_allocationless_scenario_qede_flash_device_14 *cf_arg_14;
  #line 181 
  cf_arg_14 = (struct emg_struct_random_allocationless_scenario_qede_flash_device_14 *)ldv_xmalloc(16UL);
  #line 182 
  cf_arg_14->arg0 = arg0;
  #line 183 
  ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_qede_flash_device,(void *)cf_arg_14);
  #line 184 
  __VERIFIER_assume(ret == 0);
  #line 185 
  return;
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_9(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 190 
  int ret;
  #line 191 
  struct emg_struct_interrupt_scenario_qede_msix_fp_int_13 *cf_arg_13;
  #line 192 
  cf_arg_13 = (struct emg_struct_interrupt_scenario_qede_msix_fp_int_13 *)ldv_xmalloc(40UL);
  #line 193 
  cf_arg_13->arg0 = arg0;
  #line 194 
  cf_arg_13->arg1 = arg1;
  #line 195 
  cf_arg_13->arg2 = arg2;
  #line 196 
  cf_arg_13->arg3 = arg3;
  #line 197 
  ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_qede_msix_fp_int,(void *)cf_arg_13);
  #line 198 
  __VERIFIER_assume(ret == 0);
  #line 199 
  return;
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_12(struct net_device *arg0)
{
  #line 204 
  int ret;
  #line 205 
  struct emg_struct_random_allocationless_scenario_qede_flash_device_14 *cf_arg_14;
  #line 206 
  ret = pthread_join(emg_thread_14,(void **)0);
  #line 207 
  __VERIFIER_assume(ret == 0);
  #line 208 
  return;
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_qede_msix_fp_int(void *arg0)
{
  #line 215 
  enum irqreturn (*emg_13_callback)(int , void *);
  #line 216 
  void *emg_13_data;
  #line 217 
  int emg_13_line;
  #line 218 
  enum irqreturn emg_13_ret_val;
  #line 219 
  enum irqreturn (*emg_13_thread)(int , void *);
  #line 221 
  struct emg_struct_interrupt_scenario_qede_msix_fp_int_13 *data = (struct emg_struct_interrupt_scenario_qede_msix_fp_int_13 *)arg0;
  #line 224 
  emg_13_callback = & qede_msix_fp_int;
  #line 227 
  if (data != (struct emg_struct_interrupt_scenario_qede_msix_fp_int_13 *)0) {
    #line 228 
    emg_13_line = data->arg0;
    #line 229 
    emg_13_callback = data->arg1;
    #line 230 
    emg_13_thread = data->arg2;
    #line 231 
    emg_13_data = data->arg3;
    #line 232 
    ldv_free((void *)data);
  }
  #line 238 
  ldv_switch_to_interrupt_context();
  #line 242 
  emg_13_ret_val = qede_msix_fp_int(emg_13_line,emg_13_data);
  #line 247 
  ldv_switch_to_process_context();
  #line 250 
  if (ldv_undef_int() != 0) {
    #line 252 
    __VERIFIER_assume(emg_13_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 256 
    if (emg_13_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 257 
                                                              (*emg_13_thread)(emg_13_line,emg_13_data);
  }
  else 
       #line 262 
       __VERIFIER_assume(emg_13_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 270 
  return (void *)0;
}

#line 275  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_qede_flash_device(void *arg0)
{
  #line 278 
  struct net_device *emg_14_container;
  #line 279 
  struct sk_buff *emg_14_emg_param_0_11;
  #line 280 
  struct sk_buff *emg_14_emg_param_0_124;
  #line 281 
  struct sk_buff *emg_14_emg_param_0_13;
  #line 282 
  struct sk_buff *emg_14_emg_param_0_30;
  #line 283 
  struct sk_buff *emg_14_emg_param_0_32;
  #line 284 
  struct sk_buff *emg_14_emg_param_0_94;
  #line 285 
  struct ethtool_flash *emg_14_emg_param_1_0;
  #line 286 
  struct ethtool_drvinfo *emg_14_emg_param_1_1;
  #line 287 
  struct sk_buff *emg_14_emg_param_1_100;
  #line 288 
  struct sk_buff *emg_14_emg_param_1_103;
  #line 289 
  unsigned long long emg_14_emg_param_1_105;
  #line 290 
  void *emg_14_emg_param_1_106;
  #line 291 
  int emg_14_emg_param_1_107;
  #line 292 
  int emg_14_emg_param_1_109;
  #line 293 
  int emg_14_emg_param_1_111;
  #line 294 
  int emg_14_emg_param_1_114;
  #line 295 
  int emg_14_emg_param_1_116;
  #line 296 
  int emg_14_emg_param_1_118;
  #line 297 
  enum tc_setup_type *emg_14_emg_param_1_122;
  #line 298 
  struct udp_tunnel_info *emg_14_emg_param_1_125;
  #line 299 
  struct udp_tunnel_info *emg_14_emg_param_1_126;
  #line 300 
  unsigned short emg_14_emg_param_1_127;
  #line 301 
  unsigned short emg_14_emg_param_1_129;
  #line 302 
  struct ethtool_test *emg_14_emg_param_1_131;
  #line 303 
  struct ethtool_channels *emg_14_emg_param_1_133;
  #line 304 
  struct ethtool_coalesce *emg_14_emg_param_1_134;
  #line 305 
  struct ethtool_dump *emg_14_emg_param_1_135;
  #line 306 
  struct ethtool_eee *emg_14_emg_param_1_136;
  #line 307 
  struct ethtool_link_ksettings *emg_14_emg_param_1_137;
  #line 308 
  unsigned int emg_14_emg_param_1_138;
  #line 309 
  struct ethtool_pauseparam *emg_14_emg_param_1_139;
  #line 310 
  struct netdev_bpf *emg_14_emg_param_1_14;
  #line 311 
  enum ethtool_phys_id_state *emg_14_emg_param_1_140;
  #line 312 
  struct ethtool_ringparam *emg_14_emg_param_1_141;
  #line 313 
  unsigned int *emg_14_emg_param_1_142;
  #line 314 
  struct ethtool_rxnfc *emg_14_emg_param_1_145;
  #line 315 
  struct ethtool_tunable *emg_14_emg_param_1_146;
  #line 316 
  struct ethtool_wolinfo *emg_14_emg_param_1_148;
  #line 317 
  struct udp_tunnel_info *emg_14_emg_param_1_15;
  #line 318 
  struct udp_tunnel_info *emg_14_emg_param_1_16;
  #line 319 
  struct udp_tunnel_info *emg_14_emg_param_1_17;
  #line 320 
  unsigned long long emg_14_emg_param_1_18;
  #line 321 
  unsigned long long emg_14_emg_param_1_19;
  #line 322 
  unsigned short emg_14_emg_param_1_2;
  #line 323 
  unsigned short emg_14_emg_param_1_20;
  #line 324 
  unsigned short emg_14_emg_param_1_22;
  #line 325 
  struct rtnl_link_stats64 *emg_14_emg_param_1_24;
  #line 326 
  int emg_14_emg_param_1_25;
  #line 327 
  void *emg_14_emg_param_1_26;
  #line 328 
  struct udp_tunnel_info *emg_14_emg_param_1_27;
  #line 329 
  struct sk_buff *emg_14_emg_param_1_28;
  #line 330 
  struct ethtool_link_ksettings *emg_14_emg_param_1_33;
  #line 331 
  struct ethtool_tunable *emg_14_emg_param_1_34;
  #line 332 
  struct ethtool_tunable *emg_14_emg_param_1_36;
  #line 333 
  struct ethtool_channels *emg_14_emg_param_1_38;
  #line 334 
  struct ethtool_channels *emg_14_emg_param_1_39;
  #line 335 
  unsigned short emg_14_emg_param_1_4;
  #line 336 
  unsigned int *emg_14_emg_param_1_40;
  #line 337 
  unsigned int *emg_14_emg_param_1_43;
  #line 338 
  unsigned long long emg_14_emg_param_1_46;
  #line 339 
  struct ethtool_rxnfc *emg_14_emg_param_1_47;
  #line 340 
  struct ethtool_rxnfc *emg_14_emg_param_1_48;
  #line 341 
  int emg_14_emg_param_1_50;
  #line 342 
  struct ethtool_stats *emg_14_emg_param_1_51;
  #line 343 
  unsigned int emg_14_emg_param_1_53;
  #line 344 
  struct ethtool_ringparam *emg_14_emg_param_1_55;
  #line 345 
  struct ethtool_ringparam *emg_14_emg_param_1_56;
  #line 346 
  unsigned long long emg_14_emg_param_1_57;
  #line 347 
  struct ethtool_coalesce *emg_14_emg_param_1_58;
  #line 348 
  struct ethtool_coalesce *emg_14_emg_param_1_59;
  #line 349 
  struct rtnl_link_stats64 *emg_14_emg_param_1_6;
  #line 350 
  unsigned int emg_14_emg_param_1_60;
  #line 351 
  struct ethtool_channels *emg_14_emg_param_1_61;
  #line 352 
  struct ethtool_coalesce *emg_14_emg_param_1_62;
  #line 353 
  struct ethtool_drvinfo *emg_14_emg_param_1_63;
  #line 354 
  struct ethtool_dump *emg_14_emg_param_1_64;
  #line 355 
  struct ethtool_dump *emg_14_emg_param_1_66;
  #line 356 
  struct ethtool_eee *emg_14_emg_param_1_67;
  #line 357 
  struct ethtool_stats *emg_14_emg_param_1_68;
  #line 358 
  int emg_14_emg_param_1_7;
  #line 359 
  struct ethtool_link_ksettings *emg_14_emg_param_1_70;
  #line 360 
  struct ethtool_eeprom *emg_14_emg_param_1_71;
  #line 361 
  struct ethtool_modinfo *emg_14_emg_param_1_73;
  #line 362 
  struct ethtool_pauseparam *emg_14_emg_param_1_74;
  #line 363 
  struct ethtool_regs *emg_14_emg_param_1_75;
  #line 364 
  struct ethtool_ringparam *emg_14_emg_param_1_77;
  #line 365 
  unsigned int *emg_14_emg_param_1_78;
  #line 366 
  void *emg_14_emg_param_1_8;
  #line 367 
  struct ethtool_rxnfc *emg_14_emg_param_1_81;
  #line 368 
  int emg_14_emg_param_1_83;
  #line 369 
  unsigned int emg_14_emg_param_1_84;
  #line 370 
  struct ethtool_ts_info *emg_14_emg_param_1_86;
  #line 371 
  struct ethtool_tunable *emg_14_emg_param_1_87;
  #line 372 
  struct ethtool_wolinfo *emg_14_emg_param_1_89;
  #line 373 
  struct sk_buff *emg_14_emg_param_1_9;
  #line 374 
  struct netdev_bpf *emg_14_emg_param_1_90;
  #line 375 
  int emg_14_emg_param_1_91;
  #line 376 
  struct ifreq *emg_14_emg_param_1_92;
  #line 377 
  unsigned long long emg_14_emg_param_1_96;
  #line 378 
  struct rtnl_link_stats64 *emg_14_emg_param_1_97;
  #line 379 
  int emg_14_emg_param_1_98;
  #line 380 
  struct net_device *emg_14_emg_param_2_10;
  #line 381 
  unsigned short emg_14_emg_param_2_101;
  #line 382 
  struct net_device *emg_14_emg_param_2_104;
  #line 383 
  int emg_14_emg_param_2_108;
  #line 384 
  unsigned char *emg_14_emg_param_2_110;
  #line 385 
  int emg_14_emg_param_2_112;
  #line 386 
  _Bool emg_14_emg_param_2_115;
  #line 387 
  _Bool emg_14_emg_param_2_117;
  #line 388 
  unsigned short emg_14_emg_param_2_119;
  #line 389 
  unsigned long long emg_14_emg_param_2_12;
  #line 390 
  void *emg_14_emg_param_2_123;
  #line 391 
  unsigned short emg_14_emg_param_2_128;
  #line 392 
  unsigned short emg_14_emg_param_2_130;
  #line 393 
  unsigned long long *emg_14_emg_param_2_132;
  #line 394 
  unsigned char *emg_14_emg_param_2_143;
  #line 395 
  void *emg_14_emg_param_2_147;
  #line 396 
  unsigned short emg_14_emg_param_2_21;
  #line 397 
  unsigned short emg_14_emg_param_2_23;
  #line 398 
  struct net_device *emg_14_emg_param_2_29;
  #line 399 
  unsigned short emg_14_emg_param_2_3;
  #line 400 
  unsigned long long emg_14_emg_param_2_31;
  #line 401 
  void *emg_14_emg_param_2_35;
  #line 402 
  void *emg_14_emg_param_2_37;
  #line 403 
  unsigned char *emg_14_emg_param_2_41;
  #line 404 
  unsigned char *emg_14_emg_param_2_44;
  #line 405 
  unsigned int *emg_14_emg_param_2_49;
  #line 406 
  unsigned short emg_14_emg_param_2_5;
  #line 407 
  unsigned long long *emg_14_emg_param_2_52;
  #line 408 
  unsigned char *emg_14_emg_param_2_54;
  #line 409 
  void *emg_14_emg_param_2_65;
  #line 410 
  unsigned long long *emg_14_emg_param_2_69;
  #line 411 
  unsigned char *emg_14_emg_param_2_72;
  #line 412 
  void *emg_14_emg_param_2_76;
  #line 413 
  unsigned char *emg_14_emg_param_2_79;
  #line 414 
  unsigned int *emg_14_emg_param_2_82;
  #line 415 
  unsigned char *emg_14_emg_param_2_85;
  #line 416 
  void *emg_14_emg_param_2_88;
  #line 417 
  int emg_14_emg_param_2_93;
  #line 418 
  unsigned long long emg_14_emg_param_2_95;
  #line 419 
  struct ifla_vf_info *emg_14_emg_param_2_99;
  #line 420 
  unsigned int emg_14_emg_param_3_102;
  #line 421 
  int emg_14_emg_param_3_113;
  #line 422 
  unsigned char emg_14_emg_param_3_120;
  #line 423 
  unsigned char emg_14_emg_param_3_144;
  #line 424 
  unsigned char emg_14_emg_param_3_42;
  #line 425 
  unsigned char *emg_14_emg_param_3_45;
  #line 426 
  unsigned char *emg_14_emg_param_3_80;
  #line 427 
  unsigned short emg_14_emg_param_4_121;
  #line 428 
  int emg_repeat_cnt_call_14 = 1;
  #line 430 
  struct emg_struct_random_allocationless_scenario_qede_flash_device_14 *data = (struct emg_struct_random_allocationless_scenario_qede_flash_device_14 *)arg0;
  #line 435 
  if (data != (struct emg_struct_random_allocationless_scenario_qede_flash_device_14 *)0) {
    #line 436 
    emg_14_container = data->arg0;
    #line 437 
    ldv_free((void *)data);
  }
  #line 442 
  goto emg_call_14;
  #line 446 
  return (void *)0;
  #line 449 
  emg_call_14: 
               #line 449 
  ;
  #line 450 
  switch (ldv_undef_int()) {
    #line 451 
    case 0: 
            #line 451 
    ;
    #line 453 
    emg_14_emg_param_1_148 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 453 
    emg_14_emg_param_1_148 = emg_14_emg_param_1_148;
    #line 457 
    emg_wrapper_qede_set_wol(emg_14_container,emg_14_emg_param_1_148);
    #line 461 
    ldv_free((void *)emg_14_emg_param_1_148);
    #line 463 
    break;
    #line 465 
    case 1: 
            #line 465 
    ;
    #line 467 
    emg_14_emg_param_1_146 = (struct ethtool_tunable *)ldv_xmalloc_unknown_size(0UL);
    #line 467 
    emg_14_emg_param_1_146 = emg_14_emg_param_1_146;
    #line 468 
    emg_14_emg_param_2_147 = ldv_xmalloc_unknown_size(0UL);
    #line 468 
    emg_14_emg_param_2_147 = emg_14_emg_param_2_147;
    #line 472 
    emg_wrapper_qede_set_tunable(emg_14_container,emg_14_emg_param_1_146,emg_14_emg_param_2_147);
    #line 476 
    ldv_free((void *)emg_14_emg_param_1_146);
    #line 477 
    ldv_free(emg_14_emg_param_2_147);
    #line 479 
    break;
    #line 481 
    case 2: 
            #line 481 
    ;
    #line 483 
    emg_14_emg_param_1_145 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 483 
    emg_14_emg_param_1_145 = emg_14_emg_param_1_145;
    #line 487 
    emg_wrapper_qede_set_rxnfc(emg_14_container,emg_14_emg_param_1_145);
    #line 491 
    ldv_free((void *)emg_14_emg_param_1_145);
    #line 493 
    break;
    #line 495 
    case 3: 
            #line 495 
    ;
    #line 497 
    emg_14_emg_param_1_142 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 497 
    emg_14_emg_param_1_142 = emg_14_emg_param_1_142;
    #line 498 
    emg_14_emg_param_2_143 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 498 
    emg_14_emg_param_2_143 = emg_14_emg_param_2_143;
    #line 502 
    emg_wrapper_qede_set_rxfh(emg_14_container,emg_14_emg_param_1_142,emg_14_emg_param_2_143,(unsigned char)((int)emg_14_emg_param_3_144));
    #line 506 
    ldv_free((void *)emg_14_emg_param_1_142);
    #line 507 
    ldv_free((void *)emg_14_emg_param_2_143);
    #line 509 
    break;
    #line 511 
    case 4: 
            #line 511 
    ;
    #line 513 
    emg_14_emg_param_1_141 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 513 
    emg_14_emg_param_1_141 = emg_14_emg_param_1_141;
    #line 517 
    emg_wrapper_qede_set_ringparam(emg_14_container,emg_14_emg_param_1_141);
    #line 521 
    ldv_free((void *)emg_14_emg_param_1_141);
    #line 523 
    break;
    #line 525 
    case 5: 
            #line 525 
    ;
    #line 527 
    emg_14_emg_param_1_140 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 527 
    emg_14_emg_param_1_140 = emg_14_emg_param_1_140;
    #line 531 
    emg_wrapper_qede_set_phys_id(emg_14_container,*emg_14_emg_param_1_140);
    #line 535 
    ldv_free((void *)emg_14_emg_param_1_140);
    #line 537 
    break;
    #line 539 
    case 6: 
            #line 539 
    ;
    #line 541 
    emg_14_emg_param_1_139 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 541 
    emg_14_emg_param_1_139 = emg_14_emg_param_1_139;
    #line 545 
    emg_wrapper_qede_set_pauseparam(emg_14_container,emg_14_emg_param_1_139);
    #line 549 
    ldv_free((void *)emg_14_emg_param_1_139);
    #line 551 
    break;
    #line 553 
    case 7: 
            #line 553 
    ;
    #line 555 
    emg_wrapper_qede_set_msglevel(emg_14_container,emg_14_emg_param_1_138);
    #line 557 
    break;
    #line 559 
    case 8: 
            #line 559 
    ;
    #line 561 
    emg_14_emg_param_1_137 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 561 
    emg_14_emg_param_1_137 = emg_14_emg_param_1_137;
    #line 565 
    emg_wrapper_qede_set_link_ksettings(emg_14_container,emg_14_emg_param_1_137);
    #line 569 
    ldv_free((void *)emg_14_emg_param_1_137);
    #line 571 
    break;
    #line 573 
    case 9: 
            #line 573 
    ;
    #line 575 
    emg_14_emg_param_1_136 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
    #line 575 
    emg_14_emg_param_1_136 = emg_14_emg_param_1_136;
    #line 579 
    emg_wrapper_qede_set_eee(emg_14_container,emg_14_emg_param_1_136);
    #line 583 
    ldv_free((void *)emg_14_emg_param_1_136);
    #line 585 
    break;
    #line 587 
    case 10: 
             #line 587 
    ;
    #line 589 
    emg_14_emg_param_1_135 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
    #line 589 
    emg_14_emg_param_1_135 = emg_14_emg_param_1_135;
    #line 593 
    emg_wrapper_qede_set_dump(emg_14_container,emg_14_emg_param_1_135);
    #line 597 
    ldv_free((void *)emg_14_emg_param_1_135);
    #line 599 
    break;
    #line 601 
    case 11: 
             #line 601 
    ;
    #line 603 
    emg_14_emg_param_1_134 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 603 
    emg_14_emg_param_1_134 = emg_14_emg_param_1_134;
    #line 607 
    emg_wrapper_qede_set_coalesce(emg_14_container,emg_14_emg_param_1_134);
    #line 611 
    ldv_free((void *)emg_14_emg_param_1_134);
    #line 613 
    break;
    #line 615 
    case 12: 
             #line 615 
    ;
    #line 617 
    emg_14_emg_param_1_133 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 617 
    emg_14_emg_param_1_133 = emg_14_emg_param_1_133;
    #line 621 
    emg_wrapper_qede_set_channels(emg_14_container,emg_14_emg_param_1_133);
    #line 625 
    ldv_free((void *)emg_14_emg_param_1_133);
    #line 627 
    break;
    #line 629 
    case 13: 
             #line 629 
    ;
    #line 631 
    emg_14_emg_param_1_131 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
    #line 631 
    emg_14_emg_param_1_131 = emg_14_emg_param_1_131;
    #line 632 
    emg_14_emg_param_2_132 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 632 
    emg_14_emg_param_2_132 = emg_14_emg_param_2_132;
    #line 636 
    emg_wrapper_qede_self_test(emg_14_container,emg_14_emg_param_1_131,emg_14_emg_param_2_132);
    #line 640 
    ldv_free((void *)emg_14_emg_param_1_131);
    #line 641 
    ldv_free((void *)emg_14_emg_param_2_132);
    #line 643 
    break;
    #line 645 
    case 14: 
             #line 645 
    ;
    #line 647 
    emg_wrapper_qede_nway_reset(emg_14_container);
    #line 649 
    break;
    #line 651 
    case 15: 
             #line 651 
    ;
    #line 653 
    qede_vlan_rx_kill_vid(emg_14_container,(unsigned short)((int)emg_14_emg_param_1_129),(unsigned short)((int)emg_14_emg_param_2_130));
    #line 655 
    break;
    #line 657 
    case 16: 
             #line 657 
    ;
    #line 659 
    qede_vlan_rx_add_vid(emg_14_container,(unsigned short)((int)emg_14_emg_param_1_127),(unsigned short)((int)emg_14_emg_param_2_128));
    #line 661 
    break;
    #line 663 
    case 17: 
             #line 663 
    ;
    #line 665 
    (*emg_alias_eth_validate_addr)(emg_14_container);
    #line 667 
    break;
    #line 669 
    case 18: 
             #line 669 
    ;
    #line 671 
    emg_14_emg_param_1_126 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 671 
    emg_14_emg_param_1_126 = emg_14_emg_param_1_126;
    #line 675 
    qede_udp_tunnel_del(emg_14_container,emg_14_emg_param_1_126);
    #line 679 
    ldv_free((void *)emg_14_emg_param_1_126);
    #line 681 
    break;
    #line 683 
    case 19: 
             #line 683 
    ;
    #line 685 
    emg_14_emg_param_1_125 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 685 
    emg_14_emg_param_1_125 = emg_14_emg_param_1_125;
    #line 689 
    qede_udp_tunnel_add(emg_14_container,emg_14_emg_param_1_125);
    #line 693 
    ldv_free((void *)emg_14_emg_param_1_125);
    #line 695 
    break;
    #line 697 
    case 20: 
             #line 697 
    ;
    #line 699 
    emg_14_emg_param_0_124 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 699 
    emg_14_emg_param_0_124 = emg_14_emg_param_0_124;
    #line 703 
    qede_start_xmit(emg_14_emg_param_0_124,emg_14_container);
    #line 707 
    ldv_free((void *)emg_14_emg_param_0_124);
    #line 709 
    break;
    #line 711 
    case 21: 
             #line 711 
    ;
    #line 713 
    emg_14_emg_param_1_122 = (enum tc_setup_type *)ldv_xmalloc_unknown_size(0UL);
    #line 713 
    emg_14_emg_param_1_122 = emg_14_emg_param_1_122;
    #line 714 
    emg_14_emg_param_2_123 = ldv_xmalloc_unknown_size(0UL);
    #line 714 
    emg_14_emg_param_2_123 = emg_14_emg_param_2_123;
    #line 718 
    emg_wrapper_qede_setup_tc_offload(emg_14_container,*emg_14_emg_param_1_122,emg_14_emg_param_2_123);
    #line 722 
    ldv_free((void *)emg_14_emg_param_1_122);
    #line 723 
    ldv_free(emg_14_emg_param_2_123);
    #line 725 
    break;
    #line 727 
    case 22: 
             #line 727 
    ;
    #line 729 
    emg_wrapper_qede_set_vf_vlan(emg_14_container,emg_14_emg_param_1_118,(unsigned short)((int)emg_14_emg_param_2_119),(unsigned char)((int)emg_14_emg_param_3_120),(unsigned short)((int)emg_14_emg_param_4_121));
    #line 731 
    break;
    #line 733 
    case 23: 
             #line 733 
    ;
    #line 735 
    emg_wrapper_qede_set_vf_trust(emg_14_container,emg_14_emg_param_1_116,(_Bool)((_Bool)((int)emg_14_emg_param_2_117) != 0));
    #line 737 
    break;
    #line 739 
    case 24: 
             #line 739 
    ;
    #line 741 
    emg_wrapper_qede_set_vf_spoofchk(emg_14_container,emg_14_emg_param_1_114,(_Bool)((_Bool)((int)emg_14_emg_param_2_115) != 0));
    #line 743 
    break;
    #line 745 
    case 25: 
             #line 745 
    ;
    #line 747 
    emg_wrapper_qede_set_vf_rate(emg_14_container,emg_14_emg_param_1_111,emg_14_emg_param_2_112,emg_14_emg_param_3_113);
    #line 749 
    break;
    #line 751 
    case 26: 
             #line 751 
    ;
    #line 753 
    emg_14_emg_param_2_110 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 753 
    emg_14_emg_param_2_110 = emg_14_emg_param_2_110;
    #line 757 
    emg_wrapper_qede_set_vf_mac(emg_14_container,emg_14_emg_param_1_109,emg_14_emg_param_2_110);
    #line 761 
    ldv_free((void *)emg_14_emg_param_2_110);
    #line 763 
    break;
    #line 765 
    case 27: 
             #line 765 
    ;
    #line 767 
    emg_wrapper_qede_set_vf_link_state(emg_14_container,emg_14_emg_param_1_107,emg_14_emg_param_2_108);
    #line 769 
    break;
    #line 771 
    case 28: 
             #line 771 
    ;
    #line 773 
    qede_set_rx_mode(emg_14_container);
    #line 775 
    break;
    #line 777 
    case 29: 
             #line 777 
    ;
    #line 779 
    emg_14_emg_param_1_106 = ldv_xmalloc_unknown_size(0UL);
    #line 779 
    emg_14_emg_param_1_106 = emg_14_emg_param_1_106;
    #line 783 
    qede_set_mac_addr(emg_14_container,emg_14_emg_param_1_106);
    #line 787 
    ldv_free(emg_14_emg_param_1_106);
    #line 789 
    break;
    #line 791 
    case 30: 
             #line 791 
    ;
    #line 793 
    qede_set_features(emg_14_container,emg_14_emg_param_1_105);
    #line 795 
    break;
    #line 797 
    case 31: 
             #line 797 
    ;
    #line 799 
    emg_14_emg_param_1_103 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 799 
    emg_14_emg_param_1_103 = emg_14_emg_param_1_103;
    #line 800 
    emg_14_emg_param_2_104 = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    #line 800 
    emg_14_emg_param_2_104 = emg_14_emg_param_2_104;
    #line 804 
    qede_select_queue(emg_14_container,emg_14_emg_param_1_103,emg_14_emg_param_2_104);
    #line 808 
    ldv_free((void *)emg_14_emg_param_1_103);
    #line 809 
    ldv_free((void *)emg_14_emg_param_2_104);
    #line 811 
    break;
    #line 813 
    case 32: 
             #line 813 
    ;
    #line 815 
    emg_14_emg_param_1_100 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 815 
    emg_14_emg_param_1_100 = emg_14_emg_param_1_100;
    #line 819 
    qede_rx_flow_steer(emg_14_container,emg_14_emg_param_1_100,(unsigned short)((int)emg_14_emg_param_2_101),emg_14_emg_param_3_102);
    #line 823 
    ldv_free((void *)emg_14_emg_param_1_100);
    #line 825 
    break;
    #line 827 
    case 33: 
             #line 827 
    ;
    #line 829 
    emg_14_emg_param_2_99 = (struct ifla_vf_info *)ldv_xmalloc_unknown_size(0UL);
    #line 829 
    emg_14_emg_param_2_99 = emg_14_emg_param_2_99;
    #line 833 
    emg_wrapper_qede_get_vf_config(emg_14_container,emg_14_emg_param_1_98,emg_14_emg_param_2_99);
    #line 837 
    ldv_free((void *)emg_14_emg_param_2_99);
    #line 839 
    break;
    #line 841 
    case 34: 
             #line 841 
    ;
    #line 843 
    emg_14_emg_param_1_97 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 843 
    emg_14_emg_param_1_97 = emg_14_emg_param_1_97;
    #line 847 
    emg_wrapper_qede_get_stats64(emg_14_container,emg_14_emg_param_1_97);
    #line 851 
    ldv_free((void *)emg_14_emg_param_1_97);
    #line 853 
    break;
    #line 855 
    case 35: 
             #line 855 
    ;
    #line 857 
    qede_fix_features(emg_14_container,emg_14_emg_param_1_96);
    #line 859 
    break;
    #line 861 
    case 36: 
             #line 861 
    ;
    #line 863 
    emg_14_emg_param_0_94 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 863 
    emg_14_emg_param_0_94 = emg_14_emg_param_0_94;
    #line 867 
    qede_features_check(emg_14_emg_param_0_94,emg_14_container,emg_14_emg_param_2_95);
    #line 871 
    ldv_free((void *)emg_14_emg_param_0_94);
    #line 873 
    break;
    #line 875 
    case 37: 
             #line 875 
    ;
    #line 877 
    emg_14_emg_param_1_92 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 877 
    emg_14_emg_param_1_92 = emg_14_emg_param_1_92;
    #line 881 
    emg_wrapper_qede_ioctl(emg_14_container,emg_14_emg_param_1_92,emg_14_emg_param_2_93);
    #line 885 
    ldv_free((void *)emg_14_emg_param_1_92);
    #line 887 
    break;
    #line 889 
    case 38: 
             #line 889 
    ;
    #line 891 
    qede_change_mtu(emg_14_container,emg_14_emg_param_1_91);
    #line 893 
    break;
    #line 895 
    case 39: 
             #line 895 
    ;
    #line 897 
    emg_14_emg_param_1_90 = (struct netdev_bpf *)ldv_xmalloc_unknown_size(0UL);
    #line 897 
    emg_14_emg_param_1_90 = emg_14_emg_param_1_90;
    #line 901 
    qede_xdp(emg_14_container,emg_14_emg_param_1_90);
    #line 905 
    ldv_free((void *)emg_14_emg_param_1_90);
    #line 907 
    break;
    #line 909 
    case 40: 
             #line 909 
    ;
    #line 911 
    emg_14_emg_param_1_89 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 911 
    emg_14_emg_param_1_89 = emg_14_emg_param_1_89;
    #line 915 
    emg_wrapper_qede_get_wol(emg_14_container,emg_14_emg_param_1_89);
    #line 919 
    ldv_free((void *)emg_14_emg_param_1_89);
    #line 921 
    break;
    #line 923 
    case 41: 
             #line 923 
    ;
    #line 925 
    emg_14_emg_param_1_87 = (struct ethtool_tunable *)ldv_xmalloc_unknown_size(0UL);
    #line 925 
    emg_14_emg_param_1_87 = emg_14_emg_param_1_87;
    #line 926 
    emg_14_emg_param_2_88 = ldv_xmalloc_unknown_size(0UL);
    #line 926 
    emg_14_emg_param_2_88 = emg_14_emg_param_2_88;
    #line 930 
    emg_wrapper_qede_get_tunable(emg_14_container,emg_14_emg_param_1_87,emg_14_emg_param_2_88);
    #line 934 
    ldv_free((void *)emg_14_emg_param_1_87);
    #line 935 
    ldv_free(emg_14_emg_param_2_88);
    #line 937 
    break;
    #line 939 
    case 42: 
             #line 939 
    ;
    #line 941 
    emg_14_emg_param_1_86 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 941 
    emg_14_emg_param_1_86 = emg_14_emg_param_1_86;
    #line 945 
    emg_wrapper_qede_get_ts_info(emg_14_container,emg_14_emg_param_1_86);
    #line 949 
    ldv_free((void *)emg_14_emg_param_1_86);
    #line 951 
    break;
    #line 953 
    case 43: 
             #line 953 
    ;
    #line 955 
    emg_14_emg_param_2_85 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 955 
    emg_14_emg_param_2_85 = emg_14_emg_param_2_85;
    #line 959 
    emg_wrapper_qede_get_strings(emg_14_container,emg_14_emg_param_1_84,emg_14_emg_param_2_85);
    #line 963 
    ldv_free((void *)emg_14_emg_param_2_85);
    #line 965 
    break;
    #line 967 
    case 44: 
             #line 967 
    ;
    #line 969 
    emg_wrapper_qede_get_sset_count(emg_14_container,emg_14_emg_param_1_83);
    #line 971 
    break;
    #line 973 
    case 45: 
             #line 973 
    ;
    #line 975 
    emg_14_emg_param_1_81 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 975 
    emg_14_emg_param_1_81 = emg_14_emg_param_1_81;
    #line 976 
    emg_14_emg_param_2_82 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 976 
    emg_14_emg_param_2_82 = emg_14_emg_param_2_82;
    #line 980 
    emg_wrapper_qede_get_rxnfc(emg_14_container,emg_14_emg_param_1_81,emg_14_emg_param_2_82);
    #line 984 
    ldv_free((void *)emg_14_emg_param_1_81);
    #line 985 
    ldv_free((void *)emg_14_emg_param_2_82);
    #line 987 
    break;
    #line 989 
    case 46: 
             #line 989 
    ;
    #line 991 
    emg_wrapper_qede_get_rxfh_key_size(emg_14_container);
    #line 993 
    break;
    #line 995 
    case 47: 
             #line 995 
    ;
    #line 997 
    emg_wrapper_qede_get_rxfh_indir_size(emg_14_container);
    #line 999 
    break;
    #line 1001 
    case 48: 
             #line 1001 
    ;
    #line 1003 
    emg_14_emg_param_1_78 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 1003 
    emg_14_emg_param_1_78 = emg_14_emg_param_1_78;
    #line 1004 
    emg_14_emg_param_2_79 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1004 
    emg_14_emg_param_2_79 = emg_14_emg_param_2_79;
    #line 1005 
    emg_14_emg_param_3_80 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1005 
    emg_14_emg_param_3_80 = emg_14_emg_param_3_80;
    #line 1009 
    emg_wrapper_qede_get_rxfh(emg_14_container,emg_14_emg_param_1_78,emg_14_emg_param_2_79,emg_14_emg_param_3_80);
    #line 1013 
    ldv_free((void *)emg_14_emg_param_1_78);
    #line 1014 
    ldv_free((void *)emg_14_emg_param_2_79);
    #line 1015 
    ldv_free((void *)emg_14_emg_param_3_80);
    #line 1017 
    break;
    #line 1019 
    case 49: 
             #line 1019 
    ;
    #line 1021 
    emg_14_emg_param_1_77 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1021 
    emg_14_emg_param_1_77 = emg_14_emg_param_1_77;
    #line 1025 
    emg_wrapper_qede_get_ringparam(emg_14_container,emg_14_emg_param_1_77);
    #line 1029 
    ldv_free((void *)emg_14_emg_param_1_77);
    #line 1031 
    break;
    #line 1033 
    case 50: 
             #line 1033 
    ;
    #line 1035 
    emg_wrapper_qede_get_regs_len(emg_14_container);
    #line 1037 
    break;
    #line 1039 
    case 51: 
             #line 1039 
    ;
    #line 1041 
    emg_14_emg_param_1_75 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 1041 
    emg_14_emg_param_1_75 = emg_14_emg_param_1_75;
    #line 1042 
    emg_14_emg_param_2_76 = ldv_xmalloc_unknown_size(0UL);
    #line 1042 
    emg_14_emg_param_2_76 = emg_14_emg_param_2_76;
    #line 1046 
    emg_wrapper_qede_get_regs(emg_14_container,emg_14_emg_param_1_75,emg_14_emg_param_2_76);
    #line 1050 
    ldv_free((void *)emg_14_emg_param_1_75);
    #line 1051 
    ldv_free(emg_14_emg_param_2_76);
    #line 1053 
    break;
    #line 1055 
    case 52: 
             #line 1055 
    ;
    #line 1057 
    emg_wrapper_qede_get_priv_flags(emg_14_container);
    #line 1059 
    break;
    #line 1061 
    case 53: 
             #line 1061 
    ;
    #line 1063 
    emg_14_emg_param_1_74 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1063 
    emg_14_emg_param_1_74 = emg_14_emg_param_1_74;
    #line 1067 
    emg_wrapper_qede_get_pauseparam(emg_14_container,emg_14_emg_param_1_74);
    #line 1071 
    ldv_free((void *)emg_14_emg_param_1_74);
    #line 1073 
    break;
    #line 1075 
    case 54: 
             #line 1075 
    ;
    #line 1077 
    emg_wrapper_qede_get_msglevel(emg_14_container);
    #line 1079 
    break;
    #line 1081 
    case 55: 
             #line 1081 
    ;
    #line 1083 
    emg_14_emg_param_1_73 = (struct ethtool_modinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1083 
    emg_14_emg_param_1_73 = emg_14_emg_param_1_73;
    #line 1087 
    emg_wrapper_qede_get_module_info(emg_14_container,emg_14_emg_param_1_73);
    #line 1091 
    ldv_free((void *)emg_14_emg_param_1_73);
    #line 1093 
    break;
    #line 1095 
    case 56: 
             #line 1095 
    ;
    #line 1097 
    emg_14_emg_param_1_71 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 1097 
    emg_14_emg_param_1_71 = emg_14_emg_param_1_71;
    #line 1098 
    emg_14_emg_param_2_72 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1098 
    emg_14_emg_param_2_72 = emg_14_emg_param_2_72;
    #line 1102 
    emg_wrapper_qede_get_module_eeprom(emg_14_container,emg_14_emg_param_1_71,emg_14_emg_param_2_72);
    #line 1106 
    ldv_free((void *)emg_14_emg_param_1_71);
    #line 1107 
    ldv_free((void *)emg_14_emg_param_2_72);
    #line 1109 
    break;
    #line 1111 
    case 57: 
             #line 1111 
    ;
    #line 1113 
    emg_14_emg_param_1_70 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1113 
    emg_14_emg_param_1_70 = emg_14_emg_param_1_70;
    #line 1117 
    emg_wrapper_qede_get_link_ksettings(emg_14_container,emg_14_emg_param_1_70);
    #line 1121 
    ldv_free((void *)emg_14_emg_param_1_70);
    #line 1123 
    break;
    #line 1125 
    case 58: 
             #line 1125 
    ;
    #line 1127 
    emg_wrapper_qede_get_link(emg_14_container);
    #line 1129 
    break;
    #line 1131 
    case 59: 
             #line 1131 
    ;
    #line 1133 
    emg_14_emg_param_1_68 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 1133 
    emg_14_emg_param_1_68 = emg_14_emg_param_1_68;
    #line 1134 
    emg_14_emg_param_2_69 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 1134 
    emg_14_emg_param_2_69 = emg_14_emg_param_2_69;
    #line 1138 
    emg_wrapper_qede_get_ethtool_stats(emg_14_container,emg_14_emg_param_1_68,emg_14_emg_param_2_69);
    #line 1142 
    ldv_free((void *)emg_14_emg_param_1_68);
    #line 1143 
    ldv_free((void *)emg_14_emg_param_2_69);
    #line 1145 
    break;
    #line 1147 
    case 60: 
             #line 1147 
    ;
    #line 1149 
    emg_14_emg_param_1_67 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
    #line 1149 
    emg_14_emg_param_1_67 = emg_14_emg_param_1_67;
    #line 1153 
    emg_wrapper_qede_get_eee(emg_14_container,emg_14_emg_param_1_67);
    #line 1157 
    ldv_free((void *)emg_14_emg_param_1_67);
    #line 1159 
    break;
    #line 1161 
    case 61: 
             #line 1161 
    ;
    #line 1163 
    emg_14_emg_param_1_66 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
    #line 1163 
    emg_14_emg_param_1_66 = emg_14_emg_param_1_66;
    #line 1167 
    emg_wrapper_qede_get_dump_flag(emg_14_container,emg_14_emg_param_1_66);
    #line 1171 
    ldv_free((void *)emg_14_emg_param_1_66);
    #line 1173 
    break;
    #line 1175 
    case 62: 
             #line 1175 
    ;
    #line 1177 
    emg_14_emg_param_1_64 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
    #line 1177 
    emg_14_emg_param_1_64 = emg_14_emg_param_1_64;
    #line 1178 
    emg_14_emg_param_2_65 = ldv_xmalloc_unknown_size(0UL);
    #line 1178 
    emg_14_emg_param_2_65 = emg_14_emg_param_2_65;
    #line 1182 
    emg_wrapper_qede_get_dump_data(emg_14_container,emg_14_emg_param_1_64,emg_14_emg_param_2_65);
    #line 1186 
    ldv_free((void *)emg_14_emg_param_1_64);
    #line 1187 
    ldv_free(emg_14_emg_param_2_65);
    #line 1189 
    break;
    #line 1191 
    case 63: 
             #line 1191 
    ;
    #line 1193 
    emg_14_emg_param_1_63 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1193 
    emg_14_emg_param_1_63 = emg_14_emg_param_1_63;
    #line 1197 
    emg_wrapper_qede_get_drvinfo(emg_14_container,emg_14_emg_param_1_63);
    #line 1201 
    ldv_free((void *)emg_14_emg_param_1_63);
    #line 1203 
    break;
    #line 1205 
    case 64: 
             #line 1205 
    ;
    #line 1207 
    emg_14_emg_param_1_62 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1207 
    emg_14_emg_param_1_62 = emg_14_emg_param_1_62;
    #line 1211 
    emg_wrapper_qede_get_coalesce(emg_14_container,emg_14_emg_param_1_62);
    #line 1215 
    ldv_free((void *)emg_14_emg_param_1_62);
    #line 1217 
    break;
    #line 1219 
    case 65: 
             #line 1219 
    ;
    #line 1221 
    emg_14_emg_param_1_61 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 1221 
    emg_14_emg_param_1_61 = emg_14_emg_param_1_61;
    #line 1225 
    emg_wrapper_qede_get_channels(emg_14_container,emg_14_emg_param_1_61);
    #line 1229 
    ldv_free((void *)emg_14_emg_param_1_61);
    #line 1231 
    break;
    #line 1233 
    case 66: 
             #line 1233 
    ;
    #line 1235 
    emg_wrapper_qede_get_msglevel(emg_14_container);
    #line 1237 
    break;
    #line 1239 
    case 67: 
             #line 1239 
    ;
    #line 1241 
    emg_wrapper_qede_set_msglevel(emg_14_container,emg_14_emg_param_1_60);
    #line 1243 
    break;
    #line 1245 
    case 68: 
             #line 1245 
    ;
    #line 1247 
    emg_wrapper_qede_get_link(emg_14_container);
    #line 1249 
    break;
    #line 1251 
    case 69: 
             #line 1251 
    ;
    #line 1253 
    emg_14_emg_param_1_59 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1253 
    emg_14_emg_param_1_59 = emg_14_emg_param_1_59;
    #line 1257 
    emg_wrapper_qede_get_coalesce(emg_14_container,emg_14_emg_param_1_59);
    #line 1261 
    ldv_free((void *)emg_14_emg_param_1_59);
    #line 1263 
    break;
    #line 1265 
    case 70: 
             #line 1265 
    ;
    #line 1267 
    emg_14_emg_param_1_58 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1267 
    emg_14_emg_param_1_58 = emg_14_emg_param_1_58;
    #line 1271 
    emg_wrapper_qede_set_coalesce(emg_14_container,emg_14_emg_param_1_58);
    #line 1275 
    ldv_free((void *)emg_14_emg_param_1_58);
    #line 1277 
    break;
    #line 1279 
    case 71: 
             #line 1279 
    ;
    #line 1281 
    qede_fix_features(emg_14_container,emg_14_emg_param_1_57);
    #line 1283 
    break;
    #line 1285 
    case 72: 
             #line 1285 
    ;
    #line 1287 
    emg_14_emg_param_1_56 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1287 
    emg_14_emg_param_1_56 = emg_14_emg_param_1_56;
    #line 1291 
    emg_wrapper_qede_get_ringparam(emg_14_container,emg_14_emg_param_1_56);
    #line 1295 
    ldv_free((void *)emg_14_emg_param_1_56);
    #line 1297 
    break;
    #line 1299 
    case 73: 
             #line 1299 
    ;
    #line 1301 
    emg_14_emg_param_1_55 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1301 
    emg_14_emg_param_1_55 = emg_14_emg_param_1_55;
    #line 1305 
    emg_wrapper_qede_set_ringparam(emg_14_container,emg_14_emg_param_1_55);
    #line 1309 
    ldv_free((void *)emg_14_emg_param_1_55);
    #line 1311 
    break;
    #line 1313 
    case 74: 
             #line 1313 
    ;
    #line 1315 
    emg_14_emg_param_2_54 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1315 
    emg_14_emg_param_2_54 = emg_14_emg_param_2_54;
    #line 1319 
    emg_wrapper_qede_get_strings(emg_14_container,emg_14_emg_param_1_53,emg_14_emg_param_2_54);
    #line 1323 
    ldv_free((void *)emg_14_emg_param_2_54);
    #line 1325 
    break;
    #line 1327 
    case 75: 
             #line 1327 
    ;
    #line 1329 
    emg_14_emg_param_1_51 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 1329 
    emg_14_emg_param_1_51 = emg_14_emg_param_1_51;
    #line 1330 
    emg_14_emg_param_2_52 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 1330 
    emg_14_emg_param_2_52 = emg_14_emg_param_2_52;
    #line 1334 
    emg_wrapper_qede_get_ethtool_stats(emg_14_container,emg_14_emg_param_1_51,emg_14_emg_param_2_52);
    #line 1338 
    ldv_free((void *)emg_14_emg_param_1_51);
    #line 1339 
    ldv_free((void *)emg_14_emg_param_2_52);
    #line 1341 
    break;
    #line 1343 
    case 76: 
             #line 1343 
    ;
    #line 1345 
    emg_wrapper_qede_get_priv_flags(emg_14_container);
    #line 1347 
    break;
    #line 1349 
    case 77: 
             #line 1349 
    ;
    #line 1351 
    emg_wrapper_qede_get_sset_count(emg_14_container,emg_14_emg_param_1_50);
    #line 1353 
    break;
    #line 1355 
    case 78: 
             #line 1355 
    ;
    #line 1357 
    emg_14_emg_param_1_48 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 1357 
    emg_14_emg_param_1_48 = emg_14_emg_param_1_48;
    #line 1358 
    emg_14_emg_param_2_49 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 1358 
    emg_14_emg_param_2_49 = emg_14_emg_param_2_49;
    #line 1362 
    emg_wrapper_qede_get_rxnfc(emg_14_container,emg_14_emg_param_1_48,emg_14_emg_param_2_49);
    #line 1366 
    ldv_free((void *)emg_14_emg_param_1_48);
    #line 1367 
    ldv_free((void *)emg_14_emg_param_2_49);
    #line 1369 
    break;
    #line 1371 
    case 79: 
             #line 1371 
    ;
    #line 1373 
    emg_14_emg_param_1_47 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 1373 
    emg_14_emg_param_1_47 = emg_14_emg_param_1_47;
    #line 1377 
    emg_wrapper_qede_set_rxnfc(emg_14_container,emg_14_emg_param_1_47);
    #line 1381 
    ldv_free((void *)emg_14_emg_param_1_47);
    #line 1383 
    break;
    #line 1385 
    case 80: 
             #line 1385 
    ;
    #line 1387 
    emg_wrapper_qede_get_rxfh_key_size(emg_14_container);
    #line 1389 
    break;
    #line 1391 
    case 81: 
             #line 1391 
    ;
    #line 1393 
    emg_wrapper_qede_get_rxfh_indir_size(emg_14_container);
    #line 1395 
    break;
    #line 1397 
    case 82: 
             #line 1397 
    ;
    #line 1399 
    qede_set_features(emg_14_container,emg_14_emg_param_1_46);
    #line 1401 
    break;
    #line 1403 
    case 83: 
             #line 1403 
    ;
    #line 1405 
    emg_14_emg_param_1_43 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 1405 
    emg_14_emg_param_1_43 = emg_14_emg_param_1_43;
    #line 1406 
    emg_14_emg_param_2_44 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1406 
    emg_14_emg_param_2_44 = emg_14_emg_param_2_44;
    #line 1407 
    emg_14_emg_param_3_45 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1407 
    emg_14_emg_param_3_45 = emg_14_emg_param_3_45;
    #line 1411 
    emg_wrapper_qede_get_rxfh(emg_14_container,emg_14_emg_param_1_43,emg_14_emg_param_2_44,emg_14_emg_param_3_45);
    #line 1415 
    ldv_free((void *)emg_14_emg_param_1_43);
    #line 1416 
    ldv_free((void *)emg_14_emg_param_2_44);
    #line 1417 
    ldv_free((void *)emg_14_emg_param_3_45);
    #line 1419 
    break;
    #line 1421 
    case 84: 
             #line 1421 
    ;
    #line 1423 
    emg_14_emg_param_1_40 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 1423 
    emg_14_emg_param_1_40 = emg_14_emg_param_1_40;
    #line 1424 
    emg_14_emg_param_2_41 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1424 
    emg_14_emg_param_2_41 = emg_14_emg_param_2_41;
    #line 1428 
    emg_wrapper_qede_set_rxfh(emg_14_container,emg_14_emg_param_1_40,emg_14_emg_param_2_41,(unsigned char)((int)emg_14_emg_param_3_42));
    #line 1432 
    ldv_free((void *)emg_14_emg_param_1_40);
    #line 1433 
    ldv_free((void *)emg_14_emg_param_2_41);
    #line 1435 
    break;
    #line 1437 
    case 85: 
             #line 1437 
    ;
    #line 1439 
    emg_14_emg_param_1_39 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 1439 
    emg_14_emg_param_1_39 = emg_14_emg_param_1_39;
    #line 1443 
    emg_wrapper_qede_get_channels(emg_14_container,emg_14_emg_param_1_39);
    #line 1447 
    ldv_free((void *)emg_14_emg_param_1_39);
    #line 1449 
    break;
    #line 1451 
    case 86: 
             #line 1451 
    ;
    #line 1453 
    emg_14_emg_param_1_38 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 1453 
    emg_14_emg_param_1_38 = emg_14_emg_param_1_38;
    #line 1457 
    emg_wrapper_qede_set_channels(emg_14_container,emg_14_emg_param_1_38);
    #line 1461 
    ldv_free((void *)emg_14_emg_param_1_38);
    #line 1463 
    break;
    #line 1465 
    case 87: 
             #line 1465 
    ;
    #line 1467 
    emg_14_emg_param_1_36 = (struct ethtool_tunable *)ldv_xmalloc_unknown_size(0UL);
    #line 1467 
    emg_14_emg_param_1_36 = emg_14_emg_param_1_36;
    #line 1468 
    emg_14_emg_param_2_37 = ldv_xmalloc_unknown_size(0UL);
    #line 1468 
    emg_14_emg_param_2_37 = emg_14_emg_param_2_37;
    #line 1472 
    emg_wrapper_qede_get_tunable(emg_14_container,emg_14_emg_param_1_36,emg_14_emg_param_2_37);
    #line 1476 
    ldv_free((void *)emg_14_emg_param_1_36);
    #line 1477 
    ldv_free(emg_14_emg_param_2_37);
    #line 1479 
    break;
    #line 1481 
    case 88: 
             #line 1481 
    ;
    #line 1483 
    emg_14_emg_param_1_34 = (struct ethtool_tunable *)ldv_xmalloc_unknown_size(0UL);
    #line 1483 
    emg_14_emg_param_1_34 = emg_14_emg_param_1_34;
    #line 1484 
    emg_14_emg_param_2_35 = ldv_xmalloc_unknown_size(0UL);
    #line 1484 
    emg_14_emg_param_2_35 = emg_14_emg_param_2_35;
    #line 1488 
    emg_wrapper_qede_set_tunable(emg_14_container,emg_14_emg_param_1_34,emg_14_emg_param_2_35);
    #line 1492 
    ldv_free((void *)emg_14_emg_param_1_34);
    #line 1493 
    ldv_free(emg_14_emg_param_2_35);
    #line 1495 
    break;
    #line 1497 
    case 89: 
             #line 1497 
    ;
    #line 1499 
    emg_14_emg_param_1_33 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1499 
    emg_14_emg_param_1_33 = emg_14_emg_param_1_33;
    #line 1503 
    emg_wrapper_qede_get_link_ksettings(emg_14_container,emg_14_emg_param_1_33);
    #line 1507 
    ldv_free((void *)emg_14_emg_param_1_33);
    #line 1509 
    break;
    #line 1511 
    case 90: 
             #line 1511 
    ;
    #line 1513 
    emg_14_emg_param_0_32 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1513 
    emg_14_emg_param_0_32 = emg_14_emg_param_0_32;
    #line 1517 
    qede_start_xmit(emg_14_emg_param_0_32,emg_14_container);
    #line 1521 
    ldv_free((void *)emg_14_emg_param_0_32);
    #line 1523 
    break;
    #line 1525 
    case 91: 
             #line 1525 
    ;
    #line 1527 
    emg_14_emg_param_0_30 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1527 
    emg_14_emg_param_0_30 = emg_14_emg_param_0_30;
    #line 1531 
    qede_features_check(emg_14_emg_param_0_30,emg_14_container,emg_14_emg_param_2_31);
    #line 1535 
    ldv_free((void *)emg_14_emg_param_0_30);
    #line 1537 
    break;
    #line 1539 
    case 92: 
             #line 1539 
    ;
    #line 1541 
    emg_14_emg_param_1_28 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1541 
    emg_14_emg_param_1_28 = emg_14_emg_param_1_28;
    #line 1542 
    emg_14_emg_param_2_29 = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    #line 1542 
    emg_14_emg_param_2_29 = emg_14_emg_param_2_29;
    #line 1546 
    qede_select_queue(emg_14_container,emg_14_emg_param_1_28,emg_14_emg_param_2_29);
    #line 1550 
    ldv_free((void *)emg_14_emg_param_1_28);
    #line 1551 
    ldv_free((void *)emg_14_emg_param_2_29);
    #line 1553 
    break;
    #line 1555 
    case 93: 
             #line 1555 
    ;
    #line 1557 
    emg_14_emg_param_1_27 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 1557 
    emg_14_emg_param_1_27 = emg_14_emg_param_1_27;
    #line 1561 
    qede_udp_tunnel_add(emg_14_container,emg_14_emg_param_1_27);
    #line 1565 
    ldv_free((void *)emg_14_emg_param_1_27);
    #line 1567 
    break;
    #line 1569 
    case 94: 
             #line 1569 
    ;
    #line 1571 
    qede_set_rx_mode(emg_14_container);
    #line 1573 
    break;
    #line 1575 
    case 95: 
             #line 1575 
    ;
    #line 1577 
    emg_14_emg_param_1_26 = ldv_xmalloc_unknown_size(0UL);
    #line 1577 
    emg_14_emg_param_1_26 = emg_14_emg_param_1_26;
    #line 1581 
    qede_set_mac_addr(emg_14_container,emg_14_emg_param_1_26);
    #line 1585 
    ldv_free(emg_14_emg_param_1_26);
    #line 1587 
    break;
    #line 1589 
    case 96: 
             #line 1589 
    ;
    #line 1591 
    qede_change_mtu(emg_14_container,emg_14_emg_param_1_25);
    #line 1593 
    break;
    #line 1595 
    case 97: 
             #line 1595 
    ;
    #line 1597 
    emg_14_emg_param_1_24 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 1597 
    emg_14_emg_param_1_24 = emg_14_emg_param_1_24;
    #line 1601 
    emg_wrapper_qede_get_stats64(emg_14_container,emg_14_emg_param_1_24);
    #line 1605 
    ldv_free((void *)emg_14_emg_param_1_24);
    #line 1607 
    break;
    #line 1609 
    case 98: 
             #line 1609 
    ;
    #line 1611 
    qede_vlan_rx_add_vid(emg_14_container,(unsigned short)((int)emg_14_emg_param_1_22),(unsigned short)((int)emg_14_emg_param_2_23));
    #line 1613 
    break;
    #line 1615 
    case 99: 
             #line 1615 
    ;
    #line 1617 
    qede_vlan_rx_kill_vid(emg_14_container,(unsigned short)((int)emg_14_emg_param_1_20),(unsigned short)((int)emg_14_emg_param_2_21));
    #line 1619 
    break;
    #line 1621 
    case 100: 
              #line 1621 
    ;
    #line 1623 
    qede_fix_features(emg_14_container,emg_14_emg_param_1_19);
    #line 1625 
    break;
    #line 1627 
    case 101: 
              #line 1627 
    ;
    #line 1629 
    qede_set_features(emg_14_container,emg_14_emg_param_1_18);
    #line 1631 
    break;
    #line 1633 
    case 102: 
              #line 1633 
    ;
    #line 1635 
    emg_14_emg_param_1_17 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 1635 
    emg_14_emg_param_1_17 = emg_14_emg_param_1_17;
    #line 1639 
    qede_udp_tunnel_add(emg_14_container,emg_14_emg_param_1_17);
    #line 1643 
    ldv_free((void *)emg_14_emg_param_1_17);
    #line 1645 
    break;
    #line 1647 
    case 103: 
              #line 1647 
    ;
    #line 1649 
    emg_14_emg_param_1_16 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 1649 
    emg_14_emg_param_1_16 = emg_14_emg_param_1_16;
    #line 1653 
    qede_udp_tunnel_del(emg_14_container,emg_14_emg_param_1_16);
    #line 1657 
    ldv_free((void *)emg_14_emg_param_1_16);
    #line 1659 
    break;
    #line 1661 
    case 104: 
              #line 1661 
    ;
    #line 1663 
    emg_14_emg_param_1_15 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 1663 
    emg_14_emg_param_1_15 = emg_14_emg_param_1_15;
    #line 1667 
    qede_udp_tunnel_del(emg_14_container,emg_14_emg_param_1_15);
    #line 1671 
    ldv_free((void *)emg_14_emg_param_1_15);
    #line 1673 
    break;
    #line 1675 
    case 105: 
              #line 1675 
    ;
    #line 1677 
    emg_14_emg_param_1_14 = (struct netdev_bpf *)ldv_xmalloc_unknown_size(0UL);
    #line 1677 
    emg_14_emg_param_1_14 = emg_14_emg_param_1_14;
    #line 1681 
    qede_xdp(emg_14_container,emg_14_emg_param_1_14);
    #line 1685 
    ldv_free((void *)emg_14_emg_param_1_14);
    #line 1687 
    break;
    #line 1689 
    case 106: 
              #line 1689 
    ;
    #line 1691 
    emg_14_emg_param_0_13 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1691 
    emg_14_emg_param_0_13 = emg_14_emg_param_0_13;
    #line 1695 
    qede_start_xmit(emg_14_emg_param_0_13,emg_14_container);
    #line 1699 
    ldv_free((void *)emg_14_emg_param_0_13);
    #line 1701 
    break;
    #line 1703 
    case 107: 
              #line 1703 
    ;
    #line 1705 
    emg_14_emg_param_0_11 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1705 
    emg_14_emg_param_0_11 = emg_14_emg_param_0_11;
    #line 1709 
    qede_features_check(emg_14_emg_param_0_11,emg_14_container,emg_14_emg_param_2_12);
    #line 1713 
    ldv_free((void *)emg_14_emg_param_0_11);
    #line 1715 
    break;
    #line 1717 
    case 108: 
              #line 1717 
    ;
    #line 1719 
    emg_14_emg_param_1_9 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1719 
    emg_14_emg_param_1_9 = emg_14_emg_param_1_9;
    #line 1720 
    emg_14_emg_param_2_10 = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    #line 1720 
    emg_14_emg_param_2_10 = emg_14_emg_param_2_10;
    #line 1724 
    qede_select_queue(emg_14_container,emg_14_emg_param_1_9,emg_14_emg_param_2_10);
    #line 1728 
    ldv_free((void *)emg_14_emg_param_1_9);
    #line 1729 
    ldv_free((void *)emg_14_emg_param_2_10);
    #line 1731 
    break;
    #line 1733 
    case 109: 
              #line 1733 
    ;
    #line 1735 
    qede_set_rx_mode(emg_14_container);
    #line 1737 
    break;
    #line 1739 
    case 110: 
              #line 1739 
    ;
    #line 1741 
    emg_14_emg_param_1_8 = ldv_xmalloc_unknown_size(0UL);
    #line 1741 
    emg_14_emg_param_1_8 = emg_14_emg_param_1_8;
    #line 1745 
    qede_set_mac_addr(emg_14_container,emg_14_emg_param_1_8);
    #line 1749 
    ldv_free(emg_14_emg_param_1_8);
    #line 1751 
    break;
    #line 1753 
    case 111: 
              #line 1753 
    ;
    #line 1755 
    qede_change_mtu(emg_14_container,emg_14_emg_param_1_7);
    #line 1757 
    break;
    #line 1759 
    case 112: 
              #line 1759 
    ;
    #line 1761 
    emg_14_emg_param_1_6 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 1761 
    emg_14_emg_param_1_6 = emg_14_emg_param_1_6;
    #line 1765 
    emg_wrapper_qede_get_stats64(emg_14_container,emg_14_emg_param_1_6);
    #line 1769 
    ldv_free((void *)emg_14_emg_param_1_6);
    #line 1771 
    break;
    #line 1773 
    case 113: 
              #line 1773 
    ;
    #line 1775 
    qede_vlan_rx_add_vid(emg_14_container,(unsigned short)((int)emg_14_emg_param_1_4),(unsigned short)((int)emg_14_emg_param_2_5));
    #line 1777 
    break;
    #line 1779 
    case 114: 
              #line 1779 
    ;
    #line 1781 
    qede_vlan_rx_kill_vid(emg_14_container,(unsigned short)((int)emg_14_emg_param_1_2),(unsigned short)((int)emg_14_emg_param_2_3));
    #line 1783 
    break;
    #line 1785 
    case 115: 
              #line 1785 
    ;
    #line 1787 
    emg_14_emg_param_1_1 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1787 
    emg_14_emg_param_1_1 = emg_14_emg_param_1_1;
    #line 1791 
    emg_wrapper_qede_get_drvinfo(emg_14_container,emg_14_emg_param_1_1);
    #line 1795 
    ldv_free((void *)emg_14_emg_param_1_1);
    #line 1797 
    break;
    #line 1799 
    case 116: 
              #line 1799 
    ;
    #line 1801 
    emg_14_emg_param_1_0 = (struct ethtool_flash *)ldv_xmalloc_unknown_size(0UL);
    #line 1801 
    emg_14_emg_param_1_0 = emg_14_emg_param_1_0;
    #line 1805 
    emg_wrapper_qede_flash_device(emg_14_container,emg_14_emg_param_1_0);
    #line 1809 
    ldv_free((void *)emg_14_emg_param_1_0);
    #line 1812 
    if (emg_repeat_cnt_call_14 > 0) {
      #line 1813 
      emg_repeat_cnt_call_14 --;
      #line 1815 
      goto emg_call_14;
    }
    else 
         #line 1817 
         __VERIFIER_assume(0);
    #line 1821 
    break;
    #line 1823 
    case 117: 
              #line 1823 
    ;
    #line 1827 
    break;
    #line 1829 
    default: 
             #line 1829 
    ;
    #line 1829 
    __VERIFIER_assume(0);
  }
  #line 1832 
  return (void *)0;
}

#line 1837  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_qede_pci_driver(void *arg0)
{
  #line 1840 
  int emg_15_choice;
  #line 1841 
  struct pci_driver *emg_15_container;
  #line 1842 
  struct pci_device_id *emg_15_device_id;
  #line 1843 
  int emg_15_emg_param_1_0;
  #line 1844 
  struct pci_dev *emg_15_resource_0;
  #line 1845 
  struct pm_message emg_15_resource_1;
  #line 1846 
  int emg_15_ret;
  #line 1847 
  int emg_repeat_cnt_main_15_0 = 1;
  #line 1848 
  int emg_repeat_cnt_main_15_1 = 1;
  #line 1849 
  int emg_repeat_cnt_call_15_1 = 1;
  #line 1850 
  int emg_repeat_cnt_call_15_0 = 1;
  #line 1852 
  struct emg_struct_pci_scenario_qede_pci_driver_15 *data = (struct emg_struct_pci_scenario_qede_pci_driver_15 *)arg0;
  #line 1856 
  emg_15_choice = 0;
  #line 1857 
  emg_15_ret = ldv_undef_int();
  #line 1858 
  emg_15_choice = 0;
  #line 1859 
  emg_15_container = emg_alias_qede_pci_driver;
  #line 1860 
  emg_15_ret = ldv_undef_int();
  #line 1862 
  __VERIFIER_assume(data->arg0 == emg_alias_qede_pci_driver);
  #line 1864 
  if (data != (struct emg_struct_pci_scenario_qede_pci_driver_15 *)0) {
    #line 1865 
    emg_15_container = data->arg0;
    #line 1866 
    ldv_free((void *)data);
  }
  #line 1871 
  emg_15_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 1872 
  emg_15_choice = __ldv_undef_int_range(0,9);
  #line 1873 
  emg_15_device_id = emg_15_container->id_table + (unsigned long)emg_15_choice;
  #line 1877 
  goto emg_main_15;
  #line 1881 
  return (void *)0;
  #line 1884 
  emg_call_15: 
               #line 1884 
  ;
  #line 1885 
  switch (ldv_undef_int()) {
    #line 1886 
    case 0: 
            #line 1886 
    ;
    #line 1888 
    emg_wrapper_qede_sriov_configure(emg_15_resource_0,emg_15_emg_param_1_0);
    #line 1891 
    if (emg_repeat_cnt_call_15_1 > 0) {
      #line 1892 
      emg_repeat_cnt_call_15_1 --;
      #line 1894 
      goto emg_call_15;
    }
    else 
         #line 1896 
         __VERIFIER_assume(0);
    #line 1900 
    break;
    #line 1902 
    case 1: 
            #line 1902 
    ;
    #line 1904 
    if (emg_15_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 1905 
      emg_15_ret = (*(emg_15_container->suspend))(emg_15_resource_0,emg_15_resource_1); else 
                                                                    #line 1907 
                                                                    emg_15_ret = ldv_undef_int();
    #line 1913 
    emg_15_ret = ldv_filter_err_code(emg_15_ret);
    #line 1917 
    if (emg_15_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 1918 
                                                                  (*(emg_15_container->resume))(emg_15_resource_0);
    #line 1922 
    if (emg_repeat_cnt_call_15_0 > 0) {
      #line 1923 
      emg_repeat_cnt_call_15_0 --;
      #line 1925 
      goto emg_call_15;
    }
    else 
         #line 1927 
         __VERIFIER_assume(0);
    #line 1931 
    break;
    #line 1933 
    case 2: 
            #line 1933 
    ;
    #line 1935 
    emg_wrapper_qede_shutdown(emg_15_resource_0);
    #line 1939 
    emg_wrapper_qede_remove(emg_15_resource_0);
    #line 1942 
    if (emg_repeat_cnt_main_15_0 > 0) {
      #line 1943 
      emg_repeat_cnt_main_15_0 --;
      #line 1945 
      goto emg_main_15;
    }
    else 
         #line 1947 
         __VERIFIER_assume(0);
    #line 1951 
    break;
    #line 1953 
    default: 
             #line 1953 
    ;
    #line 1953 
    __VERIFIER_assume(0);
  }
  #line 1956 
  return (void *)0;
  #line 1959 
  emg_main_15: 
               #line 1959 
  ;
  #line 1960 
  if (ldv_undef_int() != 0) {
    #line 1963 
    ldv_pre_probe();
    #line 1967 
    emg_15_ret = emg_wrapper_qede_probe(emg_15_resource_0,emg_15_device_id);
    #line 1972 
    emg_15_ret = ldv_post_probe(emg_15_ret);
    #line 1975 
    if (ldv_undef_int() != 0) {
      #line 1977 
      __VERIFIER_assume(emg_15_ret == 0);
      #line 1981 
      goto emg_call_15;
    }
    else 
         #line 1986 
         __VERIFIER_assume(emg_15_ret != 0);
    #line 1990 
    if (emg_repeat_cnt_main_15_1 > 0) {
      #line 1991 
      emg_repeat_cnt_main_15_1 --;
      #line 1993 
      goto emg_main_15;
    }
    else 
         #line 1995 
         __VERIFIER_assume(0);
  }
  else 
       #line 2001 
       ldv_free((void *)emg_15_resource_0);
  #line 2009 
  return (void *)0;
}

#line 2014  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 2017 
  struct pci_driver *emg_2_pci_driver;
  #line 2019 
  emg_2_pci_driver = emg_alias_qede_pci_driver;
  #line 2020 
  if (ldv_undef_int() != 0) {
    #line 2022 
    emg_2_pci_driver = arg0;
    #line 2026 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 2030 
    return 0;
  }
  else {
    #line 2034 
    return ldv_undef_int_negative();
  }
}

#line 2042  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 2045 
  struct net_device *emg_3_netdev;
  #line 2047 
  if (ldv_undef_int() != 0) {
    #line 2049 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 2053 
    return emg_3_netdev;
  }
  else 
       #line 2057 
       return (struct net_device *)0;
}

#line 2065  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 2068 
  int emg_4_line;
  #line 2071 
  emg_4_line = (int)arg0;
  #line 2075 
  emg_dispatch_irq_deregister_4(emg_4_line);
  #line 2076 
  ;
  #line 2076 
  return (void *)0;
}

#line 2082  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 2085 
  struct net_device *emg_5_netdev;
  #line 2088 
  emg_5_netdev = arg0;
  #line 2089 
  ldv_free((void *)emg_5_netdev);
  #line 2092 
  return;
}

#line 2097  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 2100 
  struct pci_driver *emg_6_pci_driver;
  #line 2102 
  emg_6_pci_driver = emg_alias_qede_pci_driver;
  #line 2104 
  emg_6_pci_driver = arg0;
  #line 2108 
  emg_dispatch_deregister_6(emg_6_pci_driver);
  #line 2111 
  return;
}

#line 2116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 2119 
  struct work_struct *emg_7_work_struct;
  #line 2121 
  if (ldv_undef_int() != 0) {
    #line 2123 
    emg_7_work_struct = arg1;
    #line 2127 
    if (emg_7_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 2128 
      (*(emg_7_work_struct->func))(emg_7_work_struct);
    #line 2133 
    return (_Bool)1;
  }
  else 
       #line 2137 
       return (_Bool)0;
}

#line 2145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 2148 
  struct net_device *emg_8_netdev;
  #line 2149 
  int emg_8_ret;
  #line 2152 
  emg_8_ret = ldv_undef_int();
  #line 2153 
  emg_8_ret = ldv_undef_int();
  #line 2154 
  if (ldv_undef_int() != 0) {
    #line 2156 
    emg_8_netdev = arg0;
    #line 2160 
    emg_8_ret = emg_wrapper_qede_open(emg_8_netdev);
    #line 2163 
    if (ldv_undef_int() != 0) {
      #line 2165 
      __VERIFIER_assume(emg_8_ret == 0);
      #line 2169 
      emg_dispatch_register_8(emg_8_netdev);
      #line 2173 
      return 0;
    }
    else {
      #line 2177 
      __VERIFIER_assume(emg_8_ret != 0);
      #line 2178 
      ldv_failed_register_netdev();
      #line 2179 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 2184 
    ldv_failed_register_netdev();
    #line 2185 
    return ldv_undef_int_negative();
  }
}

#line 2193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 2196 
  enum irqreturn (*emg_9_callback)(int , void *);
  #line 2197 
  void *emg_9_data;
  #line 2198 
  int emg_9_line;
  #line 2199 
  enum irqreturn (*emg_9_thread)(int , void *);
  #line 2201 
  emg_9_callback = & qede_msix_fp_int;
  #line 2202 
  if (ldv_undef_int() != 0) {
    #line 2204 
    emg_9_line = (int)arg0;
    #line 2205 
    emg_9_callback = arg1;
    #line 2206 
    emg_9_thread = (enum irqreturn (*)(int , void *))0;
    #line 2207 
    emg_9_data = arg4;
    #line 2211 
    emg_dispatch_irq_register_9(emg_9_line,emg_9_callback,emg_9_thread,emg_9_data);
    #line 2215 
    return 0;
  }
  else {
    #line 2219 
    return ldv_undef_int_negative();
  }
}

#line 2227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1)
{
  #line 2230 
  struct delayed_work *emg_10_delayed_work;
  #line 2231 
  struct work_struct *emg_10_emg_param_0_0;
  #line 2233 
  if (ldv_undef_int() != 0) {
    #line 2235 
    emg_10_delayed_work = arg0;
    #line 2239 
    emg_10_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 2239 
    emg_10_emg_param_0_0 = emg_10_emg_param_0_0;
    #line 2243 
    if (emg_10_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 2244 
      (*(emg_10_delayed_work->work.func))(emg_10_emg_param_0_0);
    #line 2249 
    ldv_free((void *)emg_10_emg_param_0_0);
    #line 2253 
    return (_Bool)1;
  }
  else 
       #line 2257 
       return (_Bool)0;
}

#line 2265  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 2268 
  struct work_struct *emg_11_work_struct;
  #line 2270 
  if (ldv_undef_int() != 0) {
    #line 2272 
    emg_11_work_struct = arg0;
    #line 2276 
    if (emg_11_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 2277 
      (*(emg_11_work_struct->func))(emg_11_work_struct);
    #line 2282 
    return (_Bool)1;
  }
  else 
       #line 2286 
       return (_Bool)0;
}

#line 2294  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 2297 
  struct net_device *emg_12_netdev;
  #line 2300 
  emg_12_netdev = arg0;
  #line 2304 
  emg_wrapper_qede_close(emg_12_netdev);
  #line 2308 
  emg_dispatch_deregister_12(emg_12_netdev);
  #line 2311 
  return;
}

#line 2316  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 2319 
  int emg_1_ret;
  #line 2322 
  emg_1_ret = emg_qede_init();
  #line 2323 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 2326 
  if (ldv_undef_int() != 0) {
    #line 2328 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 2332 
    emg_qede_cleanup();
  }
  else 
       #line 2336 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 2340 
  return (void *)0;
}

#line 2345  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qede/qede.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 2347 
  ldv_initialize();
  #line 2349 
  emg_entry_point_insmod((void *)0);
  #line 2351 
  return 0;
}

