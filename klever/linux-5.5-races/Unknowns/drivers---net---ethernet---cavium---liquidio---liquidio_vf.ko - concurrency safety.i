/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 uint64_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_mem_ops.i.aux"
struct task_struct;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
typedef struct __call_single_data call_single_data_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
struct __anonstruct_nodemask_t_161 {
   unsigned long bits[16U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
typedef struct __anonstruct_nodemask_t_161 nodemask_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 194 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 212 
struct ldt_struct;
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct __anonstruct_mm_context_t_162 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
typedef struct __anonstruct_mm_context_t_162 mm_context_t;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
struct notifier_block;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct workqueue_struct;
#line 48 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_184 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_185 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_183 {
   struct __anonstruct_184 __anonCompField___anonunion_183_29 ;
   struct __anonstruct_185 __anonCompField___anonunion_183_30 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_183 __anonCompField_uprobe_task_31 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct address_space;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_187 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_188 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_191 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_190 {
   struct list_head slab_list ;
   struct __anonstruct_191 __anonCompField___anonunion_190_34 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_193 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_192 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_193 __anonCompField___anonunion_192_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_189 {
   union __anonunion_190 __anonCompField___anonstruct_189_35 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_192 __anonCompField___anonstruct_189_37 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_194 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_195 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_197 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_196 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_197 __anonCompField___anonstruct_196_41 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_198 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_186 {
   struct __anonstruct_187 __anonCompField___anonunion_186_32 ;
   struct __anonstruct_188 __anonCompField___anonunion_186_33 ;
   struct __anonstruct_189 __anonCompField___anonunion_186_38 ;
   struct __anonstruct_194 __anonCompField___anonunion_186_39 ;
   struct __anonstruct_195 __anonCompField___anonunion_186_40 ;
   struct __anonstruct_196 __anonCompField___anonunion_186_42 ;
   struct __anonstruct_198 __anonCompField___anonunion_186_43 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_199 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_186 __anonCompField_page_44 ;
   union __anonunion_199 __anonCompField_page_45 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278 
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_200 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_200 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_201 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_201 __anonCompField_mm_struct_46 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_252 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_252 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_253 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_253 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sched.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_280 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_280 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_281 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_282 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_283 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_284 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_287 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_288 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_286 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_287 _addr_bnd ;
   struct __anonstruct__addr_pkey_288 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_285 {
   void *_addr ;
   union __anonunion_286 __anonCompField___anonstruct__sigfault_285_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_289 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_290 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_281 _kill ;
   struct __anonstruct__timer_282 _timer ;
   struct __anonstruct__rt_283 _rt ;
   struct __anonstruct__sigchld_284 _sigchld ;
   struct __anonstruct__sigfault_285 _sigfault ;
   struct __anonstruct__sigpoll_289 _sigpoll ;
   struct __anonstruct__sigsys_290 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_295 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_295 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_300 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_300 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_302 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_302 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_381 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_383 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_382 {
   unsigned long nr_segs ;
   struct __anonstruct_383 __anonCompField___anonunion_382_54 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_381 __anonCompField_iov_iter_53 ;
   union __anonunion_382 __anonCompField_iov_iter_55 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_386 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_386 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_387 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_387 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_388 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_388 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_389 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_389 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_390 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_390 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_391 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_391 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_392 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_392 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_393 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_393 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_394 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_395 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_394 ifr_ifrn ;
   union __anonunion_ifr_ifru_395 ifr_ifru ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_410 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_409 {
   struct __anonstruct_410 __anonCompField___anonunion_409_58 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_409 __anonCompField_lockref_59 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_412 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_411 {
   struct __anonstruct_412 __anonCompField___anonunion_411_60 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_411 __anonCompField_qstr_61 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_413 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_414 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_413 __anonCompField_dentry_62 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_414 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_432 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_432 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_433 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_434 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_433 __anonCompField_io_cq_65 ;
   union __anonunion_434 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 290 
struct kobject;
#line 292 
struct kstatfs;
#line 293 
struct swap_info_struct;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_context;
#line 299 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_435 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_435 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_436 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_436 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_443 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_444 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_441 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_442 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_443 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_444 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_445 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_445 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_447 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_446 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_447 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_446 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_495 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_495 __anonCompField_kernfs_node_73 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_498 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_498 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_499 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_499 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_521 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_520 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_521 __anonCompField___anonstruct_520_86 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_519 {
   struct __anonstruct_520 __anonCompField___anonunion_519_87 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_522 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_523 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_525 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_524 {
   struct __anonstruct_525 __anonCompField___anonunion_524_91 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_527 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_526 {
   __wsum csum ;
   struct __anonstruct_527 __anonCompField___anonunion_526_93 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_528 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_529 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_530 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_519 __anonCompField_sk_buff_88 ;
   union __anonunion_522 __anonCompField_sk_buff_89 ;
   union __anonunion_523 __anonCompField_sk_buff_90 ;
   char cb[48U] ;
   union __anonunion_524 __anonCompField_sk_buff_92 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_526 __anonCompField_sk_buff_94 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_528 __anonCompField_sk_buff_95 ;
   __u32 secmark ;
   union __anonunion_529 __anonCompField_sk_buff_96 ;
   union __anonunion_530 __anonCompField_sk_buff_97 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 139 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 925 
struct devlink;
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14504 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14505 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14504 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14505 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct __anonstruct_r_689 {
   u64 ossp : 32 ;
   u64 reserved : 17 ;
   u64 len : 3 ;
   u64 subcode : 8 ;
   u64 opcode : 4 ;
};
#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct __anonstruct_r_dh_690 {
   u64 has_hash : 1 ;
   u64 encap_on : 1 ;
   u64 has_hwtstamp : 1 ;
   u64 csum_verified : 3 ;
   u64 priority : 3 ;
   u64 vlan : 12 ;
   u64 extra : 28 ;
   u64 len : 3 ;
   u64 subcode : 8 ;
   u64 opcode : 4 ;
};
#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct __anonstruct_r_core_drv_init_691 {
   u64 pkind : 8 ;
   u64 app_mode : 8 ;
   u64 app_cap_flags : 4 ;
   u64 max_nic_ports : 10 ;
   u64 num_gmx_ports : 8 ;
   u64 reserved : 11 ;
   u64 len : 3 ;
   u64 subcode : 8 ;
   u64 opcode : 4 ;
};
#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct __anonstruct_r_nic_info_692 {
   u64 gmxport : 16 ;
   u64 extra : 25 ;
   u64 reserved : 8 ;
   u64 len : 3 ;
   u64 subcode : 8 ;
   u64 opcode : 4 ;
};
#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
union octeon_rh {
   u64 u64 ;
   struct __anonstruct_r_689 r ;
   struct __anonstruct_r_dh_690 r_dh ;
   struct __anonstruct_r_core_drv_init_691 r_core_drv_init ;
   struct __anonstruct_r_nic_info_692 r_nic_info ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct __anonstruct_s_695 {
   u64 reserved : 9 ;
   u64 ctrl_qpg : 11 ;
   u64 reserved0 : 10 ;
   u64 qpg : 11 ;
   u64 use_qpg : 1 ;
   u64 pkind : 6 ;
   u64 port : 8 ;
   u64 q_no : 8 ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
union oct_txpciq {
   u64 u64 ;
   struct __anonstruct_s_695 s ;
};
#line 808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct nic_rx_stats {
   u64 total_rcvd ;
   u64 bytes_rcvd ;
   u64 total_bcst ;
   u64 total_mcst ;
   u64 runts ;
   u64 ctl_rcvd ;
   u64 fifo_err ;
   u64 dmac_drop ;
   u64 fcs_err ;
   u64 jabber_err ;
   u64 l2_err ;
   u64 frame_err ;
   u64 red_drops ;
   u64 fw_total_rcvd ;
   u64 fw_total_fwd ;
   u64 fw_total_fwd_bytes ;
   u64 fw_total_mcast ;
   u64 fw_total_bcast ;
   u64 fw_err_pko ;
   u64 fw_err_link ;
   u64 fw_err_drop ;
   u64 fw_rx_vxlan ;
   u64 fw_rx_vxlan_err ;
   u64 fw_lro_pkts ;
   u64 fw_lro_octs ;
   u64 fw_total_lro ;
   u64 fw_lro_aborts ;
   u64 fw_lro_aborts_port ;
   u64 fw_lro_aborts_seq ;
   u64 fw_lro_aborts_tsval ;
   u64 fw_lro_aborts_timer ;
   u64 fwd_rate ;
};
#line 856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct nic_tx_stats {
   u64 total_pkts_sent ;
   u64 total_bytes_sent ;
   u64 mcast_pkts_sent ;
   u64 bcast_pkts_sent ;
   u64 ctl_sent ;
   u64 one_collision_sent ;
   u64 multi_collision_sent ;
   u64 max_collision_fail ;
   u64 max_deferral_fail ;
   u64 fifo_err ;
   u64 runts ;
   u64 total_collisions ;
   u64 fw_total_sent ;
   u64 fw_total_fwd ;
   u64 fw_total_fwd_bytes ;
   u64 fw_total_mcast_sent ;
   u64 fw_total_bcast_sent ;
   u64 fw_err_pko ;
   u64 fw_err_link ;
   u64 fw_err_drop ;
   u64 fw_err_tso ;
   u64 fw_tso ;
   u64 fw_tso_fwd ;
   u64 fw_tx_vxlan ;
   u64 fw_err_pki ;
};
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct oct_link_stats {
   struct nic_rx_stats fromwire ;
   struct nic_tx_stats fromhost ;
};
#line 983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct lio_trusted_vf {
   uint64_t active : 1 ;
   uint64_t id : 8 ;
   uint64_t reserved : 55 ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.h"
struct octeon_droq_desc {
   u64 buffer_ptr ;
   u64 info_ptr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.h"
struct octeon_skb_page_info {
   dma_addr_t dma ;
   struct page *page ;
   unsigned int page_offset ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.h"
struct octeon_recv_buffer {
   void *buffer ;
   u8 *data ;
   struct octeon_skb_page_info pg_info ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.h"
struct oct_droq_stats {
   u64 pkts_received ;
   u64 bytes_received ;
   u64 dropped_nodispatch ;
   u64 dropped_nomem ;
   u64 dropped_toomany ;
   u64 rx_pkts_received ;
   u64 rx_bytes_received ;
   u64 rx_dropped ;
   u64 rx_vxlan ;
   u64 rx_alloc_failure ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.h"
struct octeon_recv_pkt {
   u16 buffer_count ;
   u16 octeon_id ;
   u32 length ;
   union octeon_rh rh ;
   void *buffer_ptr[64U] ;
   u32 buffer_size[64U] ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.h"
struct octeon_recv_info {
   void *rsvd ;
   struct octeon_recv_pkt *recv_pkt ;
};
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.h"
struct octeon_droq_ops {
   void (*fptr)(u32 , void *, u32 , union octeon_rh *, void *, void *) ;
   void *farg ;
   void (*napi_fn)(void *) ;
   u32 poll_mode ;
   u32 drop_on_max ;
};
#line 247 
struct octeon_device;
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.h"
struct octeon_droq {
   u32 q_no ;
   u32 pkt_count ;
   struct octeon_droq_ops ops ;
   struct octeon_device *oct_dev ;
   struct octeon_droq_desc *desc_ring ;
   u32 read_idx ;
   u32 write_idx ;
   u32 refill_idx ;
   atomic_t pkts_pending ;
   u32 max_count ;
   u32 refill_count ;
   u32 pkts_per_intr ;
   u32 refill_threshold ;
   u32 max_empty_descs ;
   struct octeon_recv_buffer *recv_buf_list ;
   u32 buffer_size ;
   void *pkts_credit_reg ;
   void *pkts_sent_reg ;
   struct list_head dispatch_list ;
   struct oct_droq_stats stats ;
   size_t desc_ring_dma ;
   void *app_ctx ;
   struct napi_struct napi ;
   u32 cpu_id ;
   call_single_data_t csd ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_iq.h"
struct octeon_request_list {
   u32 reqtype ;
   void *buf ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_iq.h"
struct oct_iq_stats {
   u64 instr_posted ;
   u64 instr_processed ;
   u64 instr_dropped ;
   u64 bytes_sent ;
   u64 sgentry_sent ;
   u64 tx_done ;
   u64 tx_iq_busy ;
   u64 tx_dropped ;
   u64 tx_tot_bytes ;
   u64 tx_gso ;
   u64 tx_vxlan ;
   u64 tx_dmamap_fail ;
   u64 tx_restart ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_iq.h"
struct octeon_instr_queue {
   struct octeon_device *oct_dev ;
   spinlock_t lock ;
   spinlock_t post_lock ;
   bool allow_soft_cmds ;
   u32 pkt_in_done ;
   u32 pkts_processed ;
   spinlock_t iq_flush_running_lock ;
   u32 iqcmd_64B : 1 ;
   union oct_txpciq txpciq ;
   u32 rsvd : 17 ;
   u32 do_auto_flush : 1 ;
   u32 status : 8 ;
   u32 max_count ;
   u32 host_write_index ;
   u32 octeon_read_index ;
   u32 flush_index ;
   atomic_t instr_pending ;
   u32 reset_instr_cnt ;
   u8 *base_addr ;
   struct octeon_request_list *request_list ;
   void *doorbell_reg ;
   void *inst_cnt_reg ;
   u32 fill_cnt ;
   u32 fill_threshold ;
   u64 last_db_time ;
   u32 db_timeout ;
   struct oct_iq_stats stats ;
   dma_addr_t base_addr_dma ;
   void *app_ctx ;
   int q_index ;
   int ifidx ;
};
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_iq.h"
struct octeon_sc_buffer_pool {
   struct list_head head ;
   spinlock_t lock ;
   atomic_t alloc_buf_count ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/response_manager.h"
struct octeon_response_list {
   struct list_head head ;
   spinlock_t lock ;
   atomic_t pending_req_count ;
};
#line 215 
enum devlink_port_type {
    DEVLINK_PORT_TYPE_NOTSET = 0,
    DEVLINK_PORT_TYPE_AUTO = 1,
    DEVLINK_PORT_TYPE_ETH = 2,
    DEVLINK_PORT_TYPE_IB = 3
};
#line 222 
enum devlink_sb_pool_type {
    DEVLINK_SB_POOL_TYPE_INGRESS = 0,
    DEVLINK_SB_POOL_TYPE_EGRESS = 1
};
#line 227 
enum devlink_sb_threshold_type {
    DEVLINK_SB_THRESHOLD_TYPE_STATIC = 0,
    DEVLINK_SB_THRESHOLD_TYPE_DYNAMIC = 1
};
#line 232 
enum devlink_eswitch_mode {
    DEVLINK_ESWITCH_MODE_LEGACY = 0,
    DEVLINK_ESWITCH_MODE_SWITCHDEV = 1
};
#line 244 
enum devlink_eswitch_encap_mode {
    DEVLINK_ESWITCH_ENCAP_MODE_NONE = 0,
    DEVLINK_ESWITCH_ENCAP_MODE_BASIC = 1
};
#line 249 
enum devlink_port_flavour {
    DEVLINK_PORT_FLAVOUR_PHYSICAL = 0,
    DEVLINK_PORT_FLAVOUR_CPU = 1,
    DEVLINK_PORT_FLAVOUR_DSA = 2,
    DEVLINK_PORT_FLAVOUR_PCI_PF = 3,
    DEVLINK_PORT_FLAVOUR_PCI_VF = 4
};
#line 286 
enum devlink_trap_action {
    DEVLINK_TRAP_ACTION_DROP = 0,
    DEVLINK_TRAP_ACTION_TRAP = 1
};
#line 291 
enum devlink_trap_type {
    DEVLINK_TRAP_TYPE_DROP = 0,
    DEVLINK_TRAP_TYPE_EXCEPTION = 1
};
#line 446 
enum devlink_dpipe_field_mapping_type {
    DEVLINK_DPIPE_FIELD_MAPPING_TYPE_NONE = 0,
    DEVLINK_DPIPE_FIELD_MAPPING_TYPE_IFINDEX = 1
};
#line 481 
struct devlink_ops;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_dpipe_headers;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink {
   struct list_head list ;
   struct list_head port_list ;
   struct list_head sb_list ;
   struct list_head dpipe_table_list ;
   struct list_head resource_list ;
   struct list_head param_list ;
   struct list_head region_list ;
   u32 snapshot_id ;
   struct list_head reporter_list ;
   struct mutex reporters_lock ;
   struct devlink_dpipe_headers *dpipe_headers ;
   struct list_head trap_list ;
   struct list_head trap_group_list ;
   struct devlink_ops *ops ;
   struct device *dev ;
   possible_net_t _net ;
   struct mutex lock ;
   u8 reload_failed : 1 ;
   u8 reload_enabled : 1 ;
   u8 registered : 1 ;
   char priv[0U] ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_port_phys_attrs {
   u32 port_number ;
   u32 split_subport_number ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_port_pci_pf_attrs {
   u16 pf ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_port_pci_vf_attrs {
   u16 pf ;
   u16 vf ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
union __anonunion_699 {
   struct devlink_port_phys_attrs phys ;
   struct devlink_port_pci_pf_attrs pci_pf ;
   struct devlink_port_pci_vf_attrs pci_vf ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_port_attrs {
   u8 set : 1 ;
   u8 split : 1 ;
   u8 switch_port : 1 ;
   enum devlink_port_flavour flavour ;
   struct netdev_phys_item_id switch_id ;
   union __anonunion_699 __anonCompField_devlink_port_attrs_161 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_port {
   struct list_head list ;
   struct list_head param_list ;
   struct devlink *devlink ;
   unsigned int index ;
   bool registered ;
   spinlock_t type_lock ;
   enum devlink_port_type type ;
   enum devlink_port_type desired_type ;
   void *type_dev ;
   struct devlink_port_attrs attrs ;
   struct delayed_work type_warn_dw ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_sb_pool_info {
   enum devlink_sb_pool_type pool_type ;
   u32 size ;
   enum devlink_sb_threshold_type threshold_type ;
   u32 cell_size ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_dpipe_field {
   char *name ;
   unsigned int id ;
   unsigned int bitwidth ;
   enum devlink_dpipe_field_mapping_type mapping_type ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_dpipe_header {
   char *name ;
   unsigned int id ;
   struct devlink_dpipe_field *fields ;
   unsigned int fields_count ;
   bool global ;
};
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_dpipe_headers {
   struct devlink_dpipe_header **headers ;
   unsigned int headers_count ;
};
#line 410 
struct devlink_info_req;
#line 533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_trap_group {
   char *name ;
   u16 id ;
   bool generic ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_trap {
   enum devlink_trap_type type ;
   enum devlink_trap_action init_action ;
   bool generic ;
   u16 id ;
   char *name ;
   struct devlink_trap_group group ;
   u32 metadata_cap ;
};
#line 698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/devlink.h"
struct devlink_ops {
   int (*reload_down)(struct devlink *, bool , struct netlink_ext_ack *) ;
   int (*reload_up)(struct devlink *, struct netlink_ext_ack *) ;
   int (*port_type_set)(struct devlink_port *, enum devlink_port_type ) ;
   int (*port_split)(struct devlink *, unsigned int , unsigned int , struct netlink_ext_ack *) ;
   int (*port_unsplit)(struct devlink *, unsigned int , struct netlink_ext_ack *) ;
   int (*sb_pool_get)(struct devlink *, unsigned int , u16 , struct devlink_sb_pool_info *) ;
   int (*sb_pool_set)(struct devlink *, unsigned int , u16 , u32 , enum devlink_sb_threshold_type , struct netlink_ext_ack *) ;
   int (*sb_port_pool_get)(struct devlink_port *, unsigned int , u16 , u32 *) ;
   int (*sb_port_pool_set)(struct devlink_port *, unsigned int , u16 , u32 , struct netlink_ext_ack *) ;
   int (*sb_tc_pool_bind_get)(struct devlink_port *, unsigned int , u16 , enum devlink_sb_pool_type , u16 *, u32 *) ;
   int (*sb_tc_pool_bind_set)(struct devlink_port *, unsigned int , u16 , enum devlink_sb_pool_type , u16 , u32 , struct netlink_ext_ack *) ;
   int (*sb_occ_snapshot)(struct devlink *, unsigned int ) ;
   int (*sb_occ_max_clear)(struct devlink *, unsigned int ) ;
   int (*sb_occ_port_pool_get)(struct devlink_port *, unsigned int , u16 , u32 *, u32 *) ;
   int (*sb_occ_tc_port_bind_get)(struct devlink_port *, unsigned int , u16 , enum devlink_sb_pool_type , u32 *, u32 *) ;
   int (*eswitch_mode_get)(struct devlink *, u16 *) ;
   int (*eswitch_mode_set)(struct devlink *, u16 , struct netlink_ext_ack *) ;
   int (*eswitch_inline_mode_get)(struct devlink *, u8 *) ;
   int (*eswitch_inline_mode_set)(struct devlink *, u8 , struct netlink_ext_ack *) ;
   int (*eswitch_encap_mode_get)(struct devlink *, enum devlink_eswitch_encap_mode *) ;
   int (*eswitch_encap_mode_set)(struct devlink *, enum devlink_eswitch_encap_mode , struct netlink_ext_ack *) ;
   int (*info_get)(struct devlink *, struct devlink_info_req *, struct netlink_ext_ack *) ;
   int (*flash_update)(struct devlink *, char *, char *, struct netlink_ext_ack *) ;
   int (*trap_init)(struct devlink *, struct devlink_trap *, void *) ;
   void (*trap_fini)(struct devlink *, struct devlink_trap *, void *) ;
   int (*trap_action_set)(struct devlink *, struct devlink_trap *, enum devlink_trap_action ) ;
   int (*trap_group_init)(struct devlink *, struct devlink_trap_group *) ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct octeon_dispatch {
   struct list_head list ;
   u16 opcode ;
   int (*dispatch_fn)(struct octeon_recv_info *, void *) ;
   void *arg ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct octeon_dispatch_list {
   spinlock_t lock ;
   u32 count ;
   struct octeon_dispatch *dlist ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct octeon_mmio {
   u64 start ;
   u32 len ;
   u32 mapped_len ;
   u8 *hw_addr ;
   u32 done ;
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct octeon_io_enable {
   u64 iq ;
   u64 oq ;
   u64 iq64B ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct octeon_reg_list {
   u32 *pci_win_wr_addr_hi ;
   u32 *pci_win_wr_addr_lo ;
   u64 *pci_win_wr_addr ;
   u32 *pci_win_rd_addr_hi ;
   u32 *pci_win_rd_addr_lo ;
   u64 *pci_win_rd_addr ;
   u32 *pci_win_wr_data_hi ;
   u32 *pci_win_wr_data_lo ;
   u64 *pci_win_wr_data ;
   u32 *pci_win_rd_data_hi ;
   u32 *pci_win_rd_data_lo ;
   u64 *pci_win_rd_data ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct octeon_console {
   u32 active ;
   u32 waiting ;
   u64 addr ;
   u32 buffer_size ;
   u64 input_base_addr ;
   u64 output_base_addr ;
   int (*print)(struct octeon_device *, u32 , char *, char *) ;
   char leftover[512U] ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct octeon_board_info {
   char name[32U] ;
   char serial_number[64U] ;
   u64 major ;
   u64 minor ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct octeon_fn_list {
   void (*setup_iq_regs)(struct octeon_device *, u32 ) ;
   void (*setup_oq_regs)(struct octeon_device *, u32 ) ;
   irqreturn_t (*process_interrupt_regs)(void *) ;
   u64 (*msix_interrupt_handler)(void *) ;
   int (*setup_mbox)(struct octeon_device *) ;
   int (*free_mbox)(struct octeon_device *) ;
   int (*soft_reset)(struct octeon_device *) ;
   int (*setup_device_regs)(struct octeon_device *) ;
   void (*bar1_idx_setup)(struct octeon_device *, u64 , u32 , int ) ;
   void (*bar1_idx_write)(struct octeon_device *, u32 , u32 ) ;
   u32 (*bar1_idx_read)(struct octeon_device *, u32 ) ;
   u32 (*update_iq_read_idx)(struct octeon_instr_queue *) ;
   void (*enable_oq_pkt_time_intr)(struct octeon_device *, u32 ) ;
   void (*disable_oq_pkt_time_intr)(struct octeon_device *, u32 ) ;
   void (*enable_interrupt)(struct octeon_device *, u8 ) ;
   void (*disable_interrupt)(struct octeon_device *, u8 ) ;
   int (*enable_io_queues)(struct octeon_device *) ;
   void (*disable_io_queues)(struct octeon_device *) ;
};
#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct cvmx_bootmem_named_block_desc {
   u64 base_addr ;
   u64 size ;
   char name[128U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct __anonstruct_ver_701 {
   u8 maj ;
   u8 min ;
   u8 rev ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct oct_fw_info {
   u32 max_nic_ports ;
   u32 num_gmx_ports ;
   u64 app_cap_flags ;
   u32 app_mode ;
   char liquidio_firmware_version[32U] ;
   struct __anonstruct_ver_701 ver ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct cavium_wk {
   struct delayed_work work ;
   void *ctxptr ;
   u64 ctxul ;
};
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct cavium_wq {
   struct workqueue_struct *wq ;
   struct cavium_wk wk ;
};
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct octdev_props {
   int rx_on ;
   int fec ;
   int fec_boot ;
   int napi_enabled ;
   int gmxport ;
   struct net_device *netdev ;
};
#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct octeon_pf_vf_hs_word {
   u64 pkind : 8 ;
   u64 core_tics_per_us : 16 ;
   u64 coproc_tics_per_us : 16 ;
   u64 app_mode : 8 ;
   u64 reserved : 16 ;
};
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct octeon_sriov_info {
   u32 rings_per_vf ;
   u32 max_vfs ;
   u32 num_vfs_alloced ;
   u32 num_pf_rings ;
   u32 pf_srn ;
   u32 trs ;
   u32 sriov_enabled ;
   struct lio_trusted_vf trusted_vf ;
   struct pci_dev *dpiring_to_vfpcidev_lut[64U] ;
   u64 vf_macaddr[64U] ;
   u16 vf_vlantci[64U] ;
   int vf_linkstate[64U] ;
   bool vf_spoofchk[64U] ;
   u64 vf_drv_loaded_mask ;
};
#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct octeon_ioq_vector {
   struct octeon_device *oct_dev ;
   int iq_index ;
   int droq_index ;
   int vector ;
   struct octeon_mbox *mbox ;
   struct cpumask affinity_mask ;
   u32 ioq_num ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct lio_vf_rep_list {
   int num_vfs ;
   struct net_device *ndev[63U] ;
};
#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct __anonstruct_console_nb_info_702 {
   u64 dram_region_base ;
   int bar1_index ;
};
#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct __anonstruct_loc_703 {
   int bus ;
   int dev ;
   int func ;
};
#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
struct octeon_device {
   spinlock_t pci_win_lock ;
   spinlock_t mem_access_lock ;
   struct pci_dev *pci_dev ;
   void *chip ;
   u32 ifcount ;
   struct octdev_props props[128U] ;
   u16 chip_id ;
   u16 rev_id ;
   u32 subsystem_id ;
   u16 pf_num ;
   u16 vf_num ;
   u32 octeon_id ;
   u16 pcie_port ;
   u16 flags ;
   atomic_t status ;
   struct octeon_mmio mmio[3U] ;
   struct octeon_reg_list reg_list ;
   struct octeon_fn_list fn_list ;
   struct octeon_board_info boardinfo ;
   u32 num_iqs ;
   struct octeon_sc_buffer_pool sc_buf_pool ;
   struct octeon_instr_queue *instr_queue[64U] ;
   struct octeon_response_list response_list[6U] ;
   u32 num_oqs ;
   struct octeon_droq *droq[64U] ;
   struct octeon_io_enable io_qmask ;
   struct octeon_dispatch_list dispatch ;
   u32 int_status ;
   u64 droq_intr ;
   u64 bootmem_desc_addr ;
   struct cvmx_bootmem_named_block_desc bootmem_named_block_desc ;
   u64 console_desc_addr ;
   u32 num_consoles ;
   struct octeon_console console[32U] ;
   struct __anonstruct_console_nb_info_702 console_nb_info ;
   u64 coproc_clock_rate ;
   u32 app_mode ;
   struct oct_fw_info fw_info ;
   char device_name[32U] ;
   void *app_ctx ;
   struct cavium_wq dma_comp_wq ;
   spinlock_t cmd_resp_wqlock ;
   u32 cmd_resp_state ;
   struct cavium_wq check_db_wq[64U] ;
   struct cavium_wk nic_poll_work ;
   struct cavium_wk console_poll_work[32U] ;
   void *priv ;
   int num_msix_irqs ;
   void *msix_entries ;
   void *irq_name_storage ;
   struct octeon_sriov_info sriov_info ;
   struct octeon_pf_vf_hs_word pfvf_hsword ;
   int msix_on ;
   struct octeon_mbox *mbox[64U] ;
   struct octeon_ioq_vector *ioq_vector ;
   int rx_pause ;
   int tx_pause ;
   struct oct_link_stats link_stats ;
   u32 priv_flags ;
   void *watchdog_task ;
   u32 rx_coalesce_usecs ;
   u32 rx_max_coalesced_frames ;
   u32 tx_max_coalesced_frames ;
   bool cores_crashed ;
   struct __anonstruct_loc_703 loc ;
   atomic_t *adapter_refcount ;
   atomic_t *adapter_fw_state ;
   bool ptp_enable ;
   struct lio_vf_rep_list vf_rep_list ;
   struct devlink *devlink ;
   enum devlink_eswitch_mode eswitch_mode ;
   u8 speed_boot ;
   u8 speed_setting ;
   u8 no_speed_setting ;
   u32 vfstats_poll ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_711 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_711 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_712 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_712 key ;
} __attribute__((__aligned__(8)));
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_716 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_718 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_770 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_772 {
   int __val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
struct system_device_crosststamp {
   ktime_t device ;
   ktime_t sys_realtime ;
   ktime_t sys_monoraw ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_852 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_962 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_962 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_1109 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_1109 __anonCompField_pci_dev_59 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 288 
struct hd_geometry;
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_1139 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_1138 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_1139 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_1138 read_descriptor_t;
#line 1771 
struct block_device_operations;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_11221 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_11221 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_1227 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_1228 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_1229 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_1230 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_1227 ports ;
   struct __anonstruct_icmpt_1228 icmpt ;
   struct __anonstruct_dnports_1229 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_1230 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_1231 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_1231 u ;
} __attribute__((__aligned__(8)));
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 973 
struct rtable;
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_1356 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_1355 {
   struct __anonstruct_1356 __anonCompField___anonunion_1355_153 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_1355 __anonCompField_sock_cgroup_data_154 ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 178 
struct request_sock;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_1406 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_1406 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_1407 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_1407 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1410 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1411 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_1413 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_1414 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1412 {
   struct __anonstruct_elv_1413 elv ;
   struct __anonstruct_flush_1414 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1415 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_1410 __anonCompField_request_164 ;
   union __anonunion_1411 __anonCompField_request_165 ;
   union __anonunion_1412 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_1415 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_1432 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_1431 {
   void *validation_data ;
   struct __anonstruct_1432 __anonCompField___anonunion_1431_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_1431 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_1506 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_1507 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_1505 {
   struct __anonstruct_1506 __anonCompField___anonunion_1505_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_1507 __anonCompField___anonunion_1505_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_1505 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_1509 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_1509 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_1522 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_1522 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_metrics {
   u32 metrics[17U] ;
   refcount_t refcnt ;
} __attribute__((__aligned__(4)));
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/net_tstamp.h"
struct hwtstamp_config {
   int flags ;
   int tx_type ;
   int rx_filter ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_1544 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_1544 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_1546 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1545 {
   __addrpair skc_addrpair ;
   struct __anonstruct_1546 __anonCompField___anonunion_1545_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1547 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_1549 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1548 {
   __portpair skc_portpair ;
   struct __anonstruct_1549 __anonCompField___anonunion_1548_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1550 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1551 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1552 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1553 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1554 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_1545 __anonCompField_sock_common_178 ;
   union __anonunion_1547 __anonCompField_sock_common_179 ;
   union __anonunion_1548 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_1550 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_1551 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_1552 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_1553 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_1554 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_1555 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1556 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1557 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_1555 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_1556 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_1557 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_1592 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_1592 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct __anonstruct_s_1665 {
   unsigned int len ;
   struct callback_head rcu ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
union __anonunion_1664 {
   struct __anonstruct_s_1665 s ;
   void *ptr[0U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct net_generic {
   union __anonunion_1664 __anonCompField_net_generic_191 ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 261 
struct fib6_nh;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_exception {
   struct fib_nh_exception *fnhe_next ;
   int fnhe_genid ;
   __be32 fnhe_daddr ;
   u32 fnhe_pmtu ;
   bool fnhe_mtu_locked ;
   __be32 fnhe_gw ;
   unsigned long fnhe_expires ;
   struct rtable *fnhe_rth_input ;
   struct rtable *fnhe_rth_output ;
   unsigned long fnhe_stamp ;
   struct callback_head rcu ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fnhe_hash_bucket {
   struct fib_nh_exception *chain ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
union __anonunion_nhc_gw_1683 {
   __be32 ipv4 ;
   struct in6_addr ipv6 ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh_common {
   struct net_device *nhc_dev ;
   int nhc_oif ;
   unsigned char nhc_scope ;
   u8 nhc_family ;
   u8 nhc_gw_family ;
   unsigned char nhc_flags ;
   struct lwtunnel_state *nhc_lwtstate ;
   union __anonunion_nhc_gw_1683 nhc_gw ;
   int nhc_weight ;
   atomic_t nhc_upper_bound ;
   struct rtable **nhc_pcpu_rth_output ;
   struct rtable *nhc_rth_input ;
   struct fnhe_hash_bucket *nhc_exceptions ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_nh {
   struct fib_nh_common nh_common ;
   struct hlist_node nh_hash ;
   struct fib_info *nh_parent ;
   __u32 nh_tclassid ;
   __be32 nh_saddr ;
   int nh_saddr_genid ;
};
#line 113 
struct nexthop;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_info {
   struct hlist_node fib_hash ;
   struct hlist_node fib_lhash ;
   struct list_head nh_list ;
   struct net *fib_net ;
   int fib_treeref ;
   refcount_t fib_clntref ;
   unsigned int fib_flags ;
   unsigned char fib_dead ;
   unsigned char fib_protocol ;
   unsigned char fib_scope ;
   unsigned char fib_type ;
   __be32 fib_prefsrc ;
   u32 fib_tb_id ;
   u32 fib_priority ;
   struct dst_metrics *fib_metrics ;
   int fib_nhs ;
   bool fib_nh_is_v6 ;
   bool nh_updated ;
   struct nexthop *nh ;
   struct callback_head rcu ;
   struct fib_nh fib_nh[0U] ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/route.h"
struct uncached_list;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
union __anonunion_1692 {
   __be32 rt_gw4 ;
   struct in6_addr rt_gw6 ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   u8 rt_gw_family ;
   union __anonunion_1692 __anonCompField_rtable_196 ;
   u32 rt_mtu_locked : 1 ;
   u32 rt_pmtu : 31 ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lwtunnel.h"
struct lwtunnel_state {
   __u16 type ;
   __u16 flags ;
   __u16 headroom ;
   atomic_t refcnt ;
   int (*orig_output)(struct net *, struct sock *, struct sk_buff *) ;
   int (*orig_input)(struct sk_buff *) ;
   struct callback_head rcu ;
   __u8 data[0U] ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_node {
   struct fib6_node *parent ;
   struct fib6_node *left ;
   struct fib6_node *right ;
   struct fib6_node *subtree ;
   struct fib6_info *leaf ;
   __u16 fn_bit ;
   __u16 fn_flags ;
   int fn_sernum ;
   struct fib6_info *rr_ptr ;
   struct callback_head rcu ;
};
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6key {
   struct in6_addr addr ;
   int plen ;
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_exception_bucket {
   struct hlist_head chain ;
   int depth ;
};
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_nh {
   struct fib_nh_common nh_common ;
   unsigned long last_probe ;
   struct rt6_info **rt6i_pcpu ;
   struct rt6_exception_bucket *rt6i_exception_bucket ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
union __anonunion_1693 {
   struct list_head fib6_siblings ;
   struct list_head nh_list ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_info {
   struct fib6_table *fib6_table ;
   struct fib6_info *fib6_next ;
   struct fib6_node *fib6_node ;
   union __anonunion_1693 __anonCompField_fib6_info_197 ;
   unsigned int fib6_nsiblings ;
   refcount_t fib6_ref ;
   unsigned long expires ;
   struct dst_metrics *fib6_metrics ;
   struct rt6key fib6_dst ;
   u32 fib6_flags ;
   struct rt6key fib6_src ;
   struct rt6key fib6_prefsrc ;
   u32 fib6_metric ;
   u8 fib6_protocol ;
   u8 fib6_type ;
   u8 should_flush : 1 ;
   u8 dst_nocount : 1 ;
   u8 dst_nopolicy : 1 ;
   u8 dst_host : 1 ;
   u8 fib6_destroying : 1 ;
   u8 unused : 3 ;
   struct callback_head rcu ;
   struct nexthop *nh ;
   struct fib6_nh fib6_nh[0U] ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_info {
   struct dst_entry dst ;
   struct fib6_info *from ;
   struct rt6key rt6i_dst ;
   struct rt6key rt6i_src ;
   struct in6_addr rt6i_gateway ;
   struct inet6_dev *rt6i_idev ;
   u32 rt6i_flags ;
   struct list_head rt6i_uncached ;
   struct uncached_list *rt6i_uncached_list ;
   unsigned short rt6i_nfheader_len ;
};
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct rt6_statistics {
   __u32 fib_nodes ;
   __u32 fib_route_nodes ;
   __u32 fib_rt_entries ;
   __u32 fib_rt_cache ;
   __u32 fib_discarded_routes ;
   atomic_t fib_rt_alloc ;
   atomic_t fib_rt_uncache ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip6_fib.h"
struct fib6_table {
   struct hlist_node tb6_hlist ;
   u32 tb6_id ;
   spinlock_t tb6_lock ;
   struct fib6_node tb6_root ;
   struct inet_peer_base tb6_peers ;
   unsigned int flags ;
   unsigned int fib_seq ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/addrconf.h"
struct prefix_info {
   __u8 type ;
   __u8 length ;
   __u8 prefix_len ;
   __u8 reserved : 6 ;
   __u8 autoconf : 1 ;
   __u8 onlink : 1 ;
   __be32 valid ;
   __be32 prefered ;
   __be32 reserved2 ;
   struct in6_addr prefix ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_1707 {
   struct fib_nh_common fib_nhc ;
   struct fib_nh fib_nh ;
   struct fib6_nh fib6_nh ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_info {
   struct hlist_node dev_hash ;
   struct nexthop *nh_parent ;
   u8 family ;
   bool reject_nh ;
   union __anonunion_1707 __anonCompField_nh_info_198 ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_grp_entry {
   struct nexthop *nh ;
   u8 weight ;
   atomic_t upper_bound ;
   struct list_head nh_list ;
   struct nexthop *nh_parent ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nh_group {
   u16 num_nh ;
   bool mpath ;
   bool has_v4 ;
   struct nh_grp_entry nh_entries[0U] ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
union __anonunion_1708 {
   struct nh_info *nh_info ;
   struct nh_group *nh_grp ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/nexthop.h"
struct nexthop {
   struct rb_node rb_node ;
   struct list_head fi_list ;
   struct list_head f6i_list ;
   struct list_head grp_list ;
   struct net *net ;
   u32 id ;
   u8 protocol ;
   u8 nh_flags ;
   bool is_group ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   union __anonunion_1708 __anonCompField_nexthop_199 ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_1734 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_1734 __anonCompField_ip_ra_chain_200 ;
   struct callback_head rcu ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_hslot {
   struct hlist_head head ;
   int count ;
   spinlock_t lock ;
} __attribute__((__aligned__(16)));
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp.h"
struct udp_table {
   struct udp_hslot *hash ;
   struct udp_hslot *hash2 ;
   unsigned int mask ;
   unsigned int log ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/udp_tunnel.h"
struct udp_tunnel_info {
   unsigned short type ;
   sa_family_t sa_family ;
   __be16 port ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct lio_version {
   u16 major ;
   u16 minor ;
   u16 micro ;
   u16 reserved ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
union __anonunion_u_1748 {
   u16 size[4U] ;
   u64 size64 ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct octeon_sg_entry {
   union __anonunion_u_1748 u ;
   u64 ptr[4U] ;
};
#line 188 
enum octnet_ifflags {
    OCTNET_IFFLAG_PROMISC = 1,
    OCTNET_IFFLAG_ALLMULTI = 2,
    OCTNET_IFFLAG_MULTICAST = 4,
    OCTNET_IFFLAG_BROADCAST = 8,
    OCTNET_IFFLAG_UNICAST = 16
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct __anonstruct_s_1749 {
   u64 param2 : 8 ;
   u64 param1 : 16 ;
   u64 reserved : 21 ;
   u64 cmdgroup : 8 ;
   u64 more : 6 ;
   u64 cmd : 5 ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
union octnet_cmd {
   u64 u64 ;
   struct __anonstruct_s_1749 s ;
};
#line 356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct octeon_instr_ih3 {
   u64 reserved1 : 32 ;
   u64 pkind : 6 ;
   u64 reserved2 : 4 ;
   u64 fsz : 6 ;
   u64 dlengsz : 14 ;
   u64 gather : 1 ;
   u64 reserved3 : 1 ;
};
#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct octeon_instr_pki_ih3 {
   u64 tag : 32 ;
   u64 qpg : 11 ;
   u64 reserved1 : 2 ;
   u64 tagtype : 2 ;
   u64 utt : 1 ;
   u64 sl : 8 ;
   u64 pm : 3 ;
   u64 reserved2 : 1 ;
   u64 uqpg : 1 ;
   u64 utag : 1 ;
   u64 raw : 1 ;
   u64 w : 1 ;
};
#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct octeon_instr_ih2 {
   u64 tag : 32 ;
   u64 tagtype : 2 ;
   u64 rs : 1 ;
   u64 grp : 4 ;
   u64 qos : 3 ;
   u64 fsz : 6 ;
   u64 dlengsz : 14 ;
   u64 gather : 1 ;
   u64 raw : 1 ;
};
#line 547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct octeon_instr_irh {
   u64 ossp : 32 ;
   u64 reserved : 5 ;
   u64 priority : 3 ;
   u64 vlan : 12 ;
   u64 subcode : 7 ;
   u64 rflag : 1 ;
   u64 opcode : 4 ;
};
#line 667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct __anonstruct_s_1754 {
   u32 ipsec_ops : 4 ;
   u32 tsflag : 1 ;
   u32 tnl_csum : 1 ;
   u32 transport_csum : 1 ;
   u32 ip_csum : 1 ;
   u32 reserved : 24 ;
};
#line 667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
union octnic_packet_params {
   u32 u32 ;
   struct __anonstruct_s_1754 s ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct __anonstruct_s_1755 {
   u64 reserved : 10 ;
   u64 phy_type : 5 ;
   u64 flashing : 1 ;
   u64 pause : 1 ;
   u64 if_mode : 5 ;
   u64 autoneg : 1 ;
   u64 link_up : 1 ;
   u64 speed : 16 ;
   u64 mtu : 16 ;
   u64 duplex : 8 ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
union oct_link_status {
   u64 u64 ;
   struct __anonstruct_s_1755 s ;
};
#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct __anonstruct_s_1757 {
   u64 reserved : 56 ;
   u64 q_no : 8 ;
};
#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
union oct_rxpciq {
   u64 u64 ;
   struct __anonstruct_s_1757 s ;
};
#line 772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct oct_link_info {
   union oct_link_status link ;
   u64 hw_addr ;
   u64 num_rxpciq : 8 ;
   u64 num_txpciq : 8 ;
   u64 rsvd1 : 17 ;
   u64 macaddr_spoofchk : 1 ;
   u64 rsvd : 13 ;
   u64 macaddr_is_admin_asgnd : 1 ;
   u64 gmxport : 16 ;
   union oct_txpciq txpciq[64U] ;
   union oct_rxpciq rxpciq[64U] ;
};
#line 800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct liquidio_if_cfg_info {
   u64 iqmask ;
   u64 oqmask ;
   struct oct_link_info linfo ;
   char liquidio_firmware_version[32U] ;
};
#line 964  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct __anonstruct_s_1758 {
   u64 vf_id : 8 ;
   u64 gmx_port_id : 8 ;
   u64 num_oqueues : 16 ;
   u64 num_iqueues : 16 ;
   u64 base_queue : 16 ;
};
#line 964  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
union oct_nic_if_cfg {
   u64 u64 ;
   struct __anonstruct_s_1758 s ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_iq.h"
struct octeon_instr2_64B {
   u64 dptr ;
   u64 ih2 ;
   u64 irh ;
   u64 ossp[2U] ;
   u64 rdp ;
   u64 rptr ;
   u64 reserved ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_iq.h"
struct octeon_instr3_64B {
   u64 dptr ;
   u64 ih3 ;
   u64 pki_ih3 ;
   u64 irh ;
   u64 ossp[2U] ;
   u64 rdp ;
   u64 rptr ;
};
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_iq.h"
union octeon_instr_64B {
   struct octeon_instr2_64B cmd2 ;
   struct octeon_instr3_64B cmd3 ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_iq.h"
struct octeon_soft_command {
   struct list_head node ;
   u64 dma_addr ;
   u32 size ;
   union octeon_instr_64B cmd ;
   u64 *status_word ;
   void *virtdptr ;
   u64 dmadptr ;
   u32 datasize ;
   void *virtrptr ;
   u64 dmarptr ;
   u32 rdatasize ;
   void *ctxptr ;
   u32 ctxsize ;
   size_t expiry_time ;
   u32 iq_no ;
   void (*callback)(struct octeon_device *, u32 , void *) ;
   void *callback_arg ;
   int caller_is_done ;
   u32 sc_status ;
   struct completion complete ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.h"
struct octnic_ctrl_pkt {
   union octnet_cmd ncmd ;
   void *data ;
   u64 dmadata ;
   void *rdata ;
   u64 dmardata ;
   u64 udd[32U] ;
   u64 iq_no ;
   u64 netpndev ;
   void (*cb_fn)(void *) ;
   u32 sc_status ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.h"
struct octnic_data_pkt {
   void *buf ;
   u32 reqtype ;
   u32 datasize ;
   union octeon_instr_64B cmd ;
   u32 q_no ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.h"
union __anonunion_u_1766 {
   u32 datasize ;
   u32 gatherptrs ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.h"
struct __anonstruct_s_1765 {
   u32 iq_no : 8 ;
   u32 gather : 1 ;
   u32 timestamp : 1 ;
   u32 ip_csum : 1 ;
   u32 transport_csum : 1 ;
   u32 tnl_csum : 1 ;
   u32 rsvd : 19 ;
   union __anonunion_u_1766 u ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.h"
union octnic_cmd_setup {
   struct __anonstruct_s_1765 s ;
   u64 u64 ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
struct octeon_device_priv {
   struct tasklet_struct droq_tasklet ;
   unsigned long napi_mask ;
};
#line 48 
struct lio;
#line 48 
struct octnic_gather;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
struct octnet_buf_free_info {
   struct lio *lio ;
   struct sk_buff *skb ;
   struct octnic_gather *g ;
   u64 dptr ;
   struct octeon_soft_command *sc ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
union __anonunion___u_1768 {
   int __val ;
   char __c[1U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
union __anonunion___u_1770 {
   int __val ;
   char __c[1U] ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
union __anonunion___u_1772 {
   int __val ;
   char __c[1U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_clock_time {
   __s64 sec ;
   __u32 nsec ;
   __u32 reserved ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_extts_request {
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[2U] ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_perout_request {
   struct ptp_clock_time start ;
   struct ptp_clock_time period ;
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[4U] ;
};
#line 138 
enum ptp_pin_function {
    PTP_PF_NONE = 0,
    PTP_PF_EXTTS = 1,
    PTP_PF_PEROUT = 2,
    PTP_PF_PHYSYNC = 3
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_pin_desc {
   char name[64U] ;
   unsigned int index ;
   unsigned int func ;
   unsigned int chan ;
   unsigned int rsv[5U] ;
};
#line 205 
enum ldv_21296 {
    PTP_CLK_REQ_EXTTS = 0,
    PTP_CLK_REQ_PEROUT = 1,
    PTP_CLK_REQ_PPS = 2
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
union __anonunion_1773 {
   struct ptp_extts_request extts ;
   struct ptp_perout_request perout ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_request {
   enum ldv_21296 type ;
   union __anonunion_1773 __anonCompField_ptp_clock_request_206 ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_info {
   struct module *owner ;
   char name[16U] ;
   s32 max_adj ;
   int n_alarm ;
   int n_ext_ts ;
   int n_per_out ;
   int n_pins ;
   int pps ;
   struct ptp_pin_desc *pin_config ;
   int (*adjfine)(struct ptp_clock_info *, long ) ;
   int (*adjfreq)(struct ptp_clock_info *, s32 ) ;
   int (*adjtime)(struct ptp_clock_info *, s64 ) ;
   int (*gettime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*gettimex64)(struct ptp_clock_info *, struct timespec64 *, struct ptp_system_timestamp *) ;
   int (*getcrosststamp)(struct ptp_clock_info *, struct system_device_crosststamp *) ;
   int (*settime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*enable)(struct ptp_clock_info *, struct ptp_clock_request *, int ) ;
   int (*verify)(struct ptp_clock_info *, unsigned int , enum ptp_pin_function , unsigned int ) ;
   long (*do_aux_work)(struct ptp_clock_info *) ;
};
#line 144 
struct ptp_clock;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
struct liquidio_if_cfg_resp {
   u64 rh ;
   struct liquidio_if_cfg_info cfg_info ;
   u64 status ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
struct octnic_gather {
   struct list_head list ;
   int sg_size ;
   int adjust ;
   struct octeon_sg_entry *sg ;
   dma_addr_t sg_dma_ptr ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
struct lio {
   atomic_t ifstate ;
   int ifidx ;
   int txq ;
   int rxq ;
   spinlock_t *glist_lock ;
   struct list_head *glist ;
   void **glists_virt_base ;
   dma_addr_t *glists_dma_base ;
   u32 glist_entry_size ;
   struct octdev_props *octprops ;
   struct octeon_device *oct_dev ;
   struct net_device *netdev ;
   struct oct_link_info linfo ;
   u64 link_changes ;
   u32 tx_qsize ;
   u32 rx_qsize ;
   u32 mtu ;
   u32 msg_enable ;
   u64 dev_capability ;
   u64 enc_dev_capability ;
   u32 phy_beacon_val ;
   u32 led_ctrl_val ;
   struct ptp_clock_info ptp_info ;
   struct ptp_clock *ptp_clock ;
   s64 ptp_adjust ;
   spinlock_t ptp_lock ;
   u32 intf_open ;
   struct cavium_wq txq_status_wq ;
   struct cavium_wq rxq_status_wq[64U] ;
   struct cavium_wq link_status_wq ;
   struct cavium_wq sync_octeon_time_wq ;
   int netdev_uc_count ;
   struct cavium_wk stats_wk ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
struct oct_timestamp_resp {
   u64 rh ;
   u64 timestamp ;
   u64 status ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
struct __anonstruct_s_1776 {
   u32 reserved ;
   u16 gso_segs ;
   u16 gso_size ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
union tx_info {
   u64 u64 ;
   struct __anonstruct_s_1776 s ;
};
#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
union __anonunion___u_1778 {
   int __val ;
   char __c[1U] ;
};
#line 2005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
union __anonunion___u_1780 {
   int __val ;
   char __c[1U] ;
};
#line 2023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
union __anonunion___u_1782 {
   int __val ;
   char __c[1U] ;
};
#line 2035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
union __anonunion___u_1784 {
   int __val ;
   char __c[1U] ;
};
#line 2114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
union __anonunion___u_1786 {
   int __val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_1853 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_1855 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_config.h"
struct octeon_iq_config {
   u64 max_iqs : 8 ;
   u64 pending_list_size : 32 ;
   u64 instr_type : 32 ;
   u64 db_min : 8 ;
   u64 db_timeout : 16 ;
   u64 iq_intr_pkt : 16 ;
   u64 reserved : 16 ;
};
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_config.h"
struct octeon_oq_config {
   u64 max_oqs : 8 ;
   u64 refill_threshold : 16 ;
   u64 oq_intr_pkt : 16 ;
   u64 oq_intr_time : 16 ;
   u64 pkts_per_intr : 16 ;
   u64 reserved : 16 ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_config.h"
struct octeon_nic_if_config {
   u64 max_txqs : 16 ;
   u64 num_txqs : 16 ;
   u64 max_rxqs : 16 ;
   u64 num_rxqs : 16 ;
   u64 num_rx_descs : 16 ;
   u64 num_tx_descs : 16 ;
   u64 rx_buf_size : 16 ;
   u64 gmx_port_id : 8 ;
   u64 base_queue : 16 ;
   u64 reserved : 56 ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_config.h"
struct octeon_misc_config {
   u64 ctrlq_grp : 4 ;
   u64 enable_sli_oq_bp : 1 ;
   u64 oct_link_query_interval : 32 ;
   u64 host_link_query_interval : 32 ;
};
#line 405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_config.h"
struct octeon_config {
   u16 card_type ;
   char *card_name ;
   struct octeon_iq_config iq ;
   struct octeon_oq_config oq ;
   struct octeon_nic_if_config nic_if_cfg[128U] ;
   struct octeon_misc_config misc ;
   int num_nic_ports ;
   int num_def_tx_descs ;
   int num_def_rx_descs ;
   int def_rx_buf_size ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.h"
struct octeon_cn23xx_vf {
   struct octeon_config *conf ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.h"
struct __anonstruct_s_2498 {
   u16 type : 1 ;
   u16 resp_needed : 1 ;
   u16 cmd : 6 ;
   u16 len : 8 ;
   u8 params[6U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.h"
union octeon_mbox_message {
   u64 u64 ;
   struct __anonstruct_s_2498 s ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.h"
struct octeon_mbox_cmd {
   union octeon_mbox_message msg ;
   u64 data[32U] ;
   u32 q_no ;
   u32 recv_len ;
   u32 recv_status ;
   void (*fn)(void *, void *, void *) ;
   void *fn_arg ;
};
#line 71 
enum octeon_mbox_state {
    OCTEON_MBOX_STATE_IDLE = 1,
    OCTEON_MBOX_STATE_REQUEST_RECEIVING = 2,
    OCTEON_MBOX_STATE_REQUEST_RECEIVED = 4,
    OCTEON_MBOX_STATE_RESPONSE_PENDING = 8,
    OCTEON_MBOX_STATE_RESPONSE_RECEIVING = 16,
    OCTEON_MBOX_STATE_RESPONSE_RECEIVED = 32,
    OCTEON_MBOX_STATE_ERROR = 64
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.h"
struct octeon_mbox {
   spinlock_t lock ;
   struct octeon_device *oct_dev ;
   u32 q_no ;
   enum octeon_mbox_state state ;
   struct cavium_wk mbox_poll_wk ;
   void *mbox_int_reg ;
   void *mbox_write_reg ;
   void *mbox_read_reg ;
   struct octeon_mbox_cmd mbox_req ;
   struct octeon_mbox_cmd mbox_resp ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
union __anonunion___u_2500 {
   u64 __val ;
   char __c[1U] ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
union __anonunion___u_2502 {
   u64 __val ;
   char __c[1U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
union __anonunion___u_2504 {
   u64 __val ;
   char __c[1U] ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
union __anonunion___u_2506 {
   u64 __val ;
   char __c[1U] ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
union __anonunion___u_2508 {
   u64 __val ;
   char __c[1U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
union __anonunion___u_2510 {
   u64 __val ;
   char __c[1U] ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
union __anonunion___u_2512 {
   u64 __val ;
   char __c[1U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
union __anonunion___u_2514 {
   u64 __val ;
   char __c[1U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2527 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2529 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2531 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_2581 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_2583 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/response_manager.c"
union __anonunion___u_3227 {
   int __val ;
   char __c[1U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3240 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3242 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_3294 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_3377 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
enum kmalloc_cache_type {
    KMALLOC_NORMAL = 0,
    KMALLOC_RECLAIM = 1,
    KMALLOC_DMA = 2,
    NR_KMALLOC_TYPES = 3
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_3672 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_3674 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 1165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
union __anonunion___u_3946 {
   int __val ;
   char __c[1U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
union __anonunion___u_3948 {
   int __val ;
   char __c[1U] ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
union __anonunion___u_3950 {
   int __val ;
   char __c[1U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
struct oct_nic_stats_resp {
   u64 rh ;
   struct oct_link_stats stats ;
   u64 status ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
struct oct_nic_vf_stats_resp {
   u64 rh ;
   u64 spoofmac_cnt ;
   u64 status ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
union __anonunion_3953 {
   u32 fec_setting ;
   u32 speed ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
struct oct_nic_seapi_resp {
   u64 rh ;
   union __anonunion_3953 __anonCompField_oct_nic_seapi_resp_166 ;
   u64 status ;
};
#line 1250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
union __anonunion___u_3955 {
   int __val ;
   char __c[1U] ;
};
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
union __anonunion___u_3957 {
   int __val ;
   char __c[1U] ;
};
#line 1440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
union __anonunion___u_3959 {
   int __val ;
   char __c[1U] ;
};
#line 1504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
union __anonunion___u_3961 {
   int __val ;
   char __c[1U] ;
};
#line 1572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
union __anonunion___u_3963 {
   int __val ;
   char __c[1U] ;
};
#line 1585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
union __anonunion___u_3965 {
   int __val ;
   char __c[1U] ;
};
#line 1658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
union __anonunion___u_3967 {
   int __val ;
   char __c[1U] ;
};
#line 1741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
union __anonunion___u_3969 {
   int __val ;
   char __c[1U] ;
};
#line 1805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
union __anonunion___u_3971 {
   int __val ;
   char __c[1U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3984 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3986 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_4038 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_4040 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_4121 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.h"
struct octeon_droq_info {
   u64 length ;
   union octeon_rh rh ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.h"
typedef int (*octeon_dispatch_fn_t)(struct octeon_recv_info *, void *);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.h"
struct octeon_cn6xxx {
   u8 *intr_sum_reg64 ;
   u8 *intr_enb_reg64 ;
   u64 intr_mask64 ;
   struct octeon_config *conf ;
   spinlock_t lock_for_droq_int_enb_reg ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.h"
struct octeon_cn23xx_pf {
   u8 *intr_sum_reg64 ;
   u8 *intr_enb_reg64 ;
   u64 intr_mask64 ;
   struct octeon_config *conf ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
struct __dispatch {
   struct list_head list ;
   struct octeon_recv_info *rinfo ;
   int (*disp_fn)(struct octeon_recv_info *, void *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct octeon_instr_rdp {
   u64 rlen : 12 ;
   u64 pcie_port : 3 ;
   u64 reserved : 49 ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
union __anonunion___u_5394 {
   int __val ;
   char __c[1U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
union __anonunion___u_5396 {
   int __val ;
   char __c[1U] ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
union __anonunion___u_5398 {
   int __val ;
   char __c[1U] ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.c"
union __anonunion___u_5400 {
   int __val ;
   char __c[1U] ;
};
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.c"
union __anonunion___u_5402 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.h"
enum octeon_pcie_mps {
    PCIE_MPS_DEFAULT = -1,
    PCIE_MPS_128B = 0,
    PCIE_MPS_256B = 1
};
#line 55 
enum octeon_pcie_mrrs {
    PCIE_MRRS_DEFAULT = -1,
    PCIE_MRRS_128B = 0,
    PCIE_MRRS_256B = 1,
    PCIE_MRRS_512B = 2,
    PCIE_MRRS_1024B = 3,
    PCIE_MRRS_2048B = 4,
    PCIE_MRRS_4096B = 5
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_6180 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_6182 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct oct_mdio_cmd {
   u64 op ;
   u64 mdio_addr ;
   u64 value1 ;
   u64 value2 ;
   u64 value3 ;
};
#line 945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct oct_intrmod_cfg {
   u64 rx_enable ;
   u64 tx_enable ;
   u64 check_intrvl ;
   u64 maxpkt_ratethr ;
   u64 minpkt_ratethr ;
   u64 rx_maxcnt_trigger ;
   u64 rx_mincnt_trigger ;
   u64 rx_maxtmr_trigger ;
   u64 rx_mintmr_trigger ;
   u64 tx_mincnt_trigger ;
   u64 tx_maxcnt_trigger ;
   u64 rx_frames ;
   u64 tx_frames ;
   u64 rx_usecs ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
union __anonunion___u_6822 {
   int __val ;
   char __c[1U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
union __anonunion___u_6824 {
   int __val ;
   char __c[1U] ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
union __anonunion___u_6826 {
   int __val ;
   char __c[1U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
struct oct_intrmod_resp {
   u64 rh ;
   struct oct_intrmod_cfg intrmod ;
   u64 status ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
struct oct_mdio_cmd_resp {
   u64 rh ;
   struct oct_mdio_cmd resp ;
   u64 status ;
};
#line 813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
union __anonunion___u_6831 {
   int __val ;
   char __c[1U] ;
};
#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
union __anonunion___u_6833 {
   int __val ;
   char __c[1U] ;
};
#line 1048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
union __anonunion___u_6835 {
   int __val ;
   char __c[1U] ;
};
#line 1077  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
union __anonunion___u_6837 {
   int __val ;
   char __c[1U] ;
};
#line 2039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
union __anonunion___u_6853 {
   int __val ;
   char __c[1U] ;
};
#line 2046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
union __anonunion___u_6855 {
   int __val ;
   char __c[1U] ;
};
#line 2101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
union __anonunion___u_6857 {
   int __val ;
   char __c[1U] ;
};
#line 2107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
union __anonunion___u_6859 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.h"
struct oct_vf_stats;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.h"
struct oct_vf_stats {
   u64 rx_packets ;
   u64 tx_packets ;
   u64 rx_bytes ;
   u64 tx_bytes ;
   u64 broadcast ;
   u64 multicast ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_8295 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_8297 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_8349 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_8351 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_8432 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
struct octeon_core_setup {
   u64 corefreq ;
   char boardname[32U] ;
   char board_serial_number[64U] ;
   u64 board_rev_major ;
   u64 board_rev_minor ;
};
#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
struct octeon_config_ptr {
   u32 conf_type ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_9063 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_9065 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.h"
struct oct_vf_stats_ctx {
   atomic_t status ;
   struct oct_vf_stats *stats ;
};
#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9714 {
   u64 __val ;
   char __c[1U] ;
};
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9716 {
   u64 __val ;
   char __c[1U] ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9718 {
   u64 __val ;
   char __c[1U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9720 {
   u64 __val ;
   char __c[1U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9722 {
   u64 __val ;
   char __c[1U] ;
};
#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9724 {
   u64 __val ;
   char __c[1U] ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9726 {
   u64 __val ;
   char __c[1U] ;
};
#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9728 {
   u64 __val ;
   char __c[1U] ;
};
#line 882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9730 {
   u64 __val ;
   char __c[1U] ;
};
#line 884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9732 {
   u64 __val ;
   char __c[1U] ;
};
#line 884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9734 {
   u64 __val ;
   char __c[1U] ;
};
#line 886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9736 {
   u64 __val ;
   char __c[1U] ;
};
#line 886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9738 {
   u64 __val ;
   char __c[1U] ;
};
#line 887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9740 {
   u64 __val ;
   char __c[1U] ;
};
#line 893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9742 {
   u64 __val ;
   char __c[1U] ;
};
#line 896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9744 {
   u64 __val ;
   char __c[1U] ;
};
#line 895  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9746 {
   u64 __val ;
   char __c[1U] ;
};
#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9748 {
   u64 __val ;
   char __c[1U] ;
};
#line 920  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9750 {
   u64 __val ;
   char __c[1U] ;
};
#line 919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9752 {
   u64 __val ;
   char __c[1U] ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9754 {
   u32 __val ;
   char __c[1U] ;
};
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9756 {
   u32 __val ;
   char __c[1U] ;
};
#line 1051  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9758 {
   u64 __val ;
   char __c[1U] ;
};
#line 1052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9760 {
   u64 __val ;
   char __c[1U] ;
};
#line 1056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9762 {
   u64 __val ;
   char __c[1U] ;
};
#line 1066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
union __anonunion___u_9764 {
   u64 __val ;
   char __c[1U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_9777 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_9779 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_9781 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_9831 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_9833 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
struct iq_post_status {
   int status ;
   int index ;
};
#line 792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
union __anonunion___u_10480 {
   int __val ;
   char __c[1U] ;
};
#line 739  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
typedef int ldv_func_ret_type;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_12259 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_12259 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_12260 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_12260 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_12276 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_12276 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_12280 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_12280 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_12281 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_12282 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_12281 __anonCompField_media_link_90 ;
   union __anonunion_12282 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_12284 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_12283 {
   struct __anonstruct_dev_12284 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_12283 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_12298 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_12299 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_12297 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_12298 i2c ;
   struct __anonstruct_custom_12299 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_12297 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_13200 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_13200 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_4 {
   int arg0 ;
   int signal_pending ;
};
#line 19  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_liquidio_legacy_intr_handler_14 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_lio_get_sset_count_16 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_liquidio_vf_pci_driver_17 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   unsigned long __builtin_bswap64(unsigned long);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_mem_ops.i.aux"
static void cif_spin_unlock_irqrestore_mem_access_lock_of_octeon_device(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 664 
static void cif___ldv_spin_lock_mem_access_lock_of_octeon_device(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned char readb(void *addr)
{
  #line 57 
  unsigned char ret;
  #line 58 
  ldv_inline_asm();
  #line 57 
  return ret;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writeb(unsigned char val, void *addr)
{
  #line 67 
  ldv_inline_asm();
  #line 68 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static u64 readq(void *addr)
{
  #line 95 
  u64 ret;
  #line 96 
  ldv_inline_asm();
  #line 95 
  return ret;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writeq(u64 val, void *addr)
{
  #line 99 
  ldv_inline_asm();
  #line 100 
  return;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mem_ops.c"
static void octeon_pci_fastwrite(struct octeon_device *oct, u8 *mapped_addr, u8 *hostbuf, u32 len)
{
  #line 46 
  while (len != 0U && ((unsigned long)mapped_addr & 7UL) != 0UL) {
    #line 47 
    u8 *tmp;
    #line 47 
    u8 *tmp_0;
    #line 47 
    tmp = mapped_addr;
    #line 47 
    mapped_addr ++;
    #line 47 
    ;
    #line 47 
    tmp_0 = hostbuf;
    #line 47 
    hostbuf ++;
    #line 47 
    ;
    #line 47 
    writeb((unsigned char)((int)*tmp_0),(void *)tmp);
    #line 48 
    len --;
  }
  #line 53 
  while (len > 7U) {
    #line 54 
    writeq(*((u64 *)hostbuf),(void *)mapped_addr);
    #line 55 
    mapped_addr += 8U;
    #line 56 
    hostbuf += 8U;
    #line 57 
    len += 4294967288U;
  }
  #line 62 
  while (1) {
    #line 62 
    u32 tmp_3;
    #line 63 
    u8 *tmp_1;
    #line 63 
    u8 *tmp_2;
    #line 62 
    tmp_3 = len;
    #line 62 
    len --;
    #line 62 
    ;
    #line 62 
    if (! (tmp_3 != 0U)) 
                         #line 62 
                         break;
    #line 63 
    tmp_1 = mapped_addr;
    #line 63 
    mapped_addr ++;
    #line 63 
    ;
    #line 63 
    tmp_2 = hostbuf;
    #line 63 
    hostbuf ++;
    #line 63 
    ;
    #line 63 
    writeb((unsigned char)((int)*tmp_2),(void *)tmp_1);
  }
  #line 64 
  return;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mem_ops.c"
static void octeon_pci_fastread(struct octeon_device *oct, u8 *mapped_addr, u8 *hostbuf, u32 len)
{
  #line 70 
  while (len != 0U && ((unsigned long)mapped_addr & 7UL) != 0UL) {
    #line 71 
    u8 *tmp;
    #line 71 
    u8 *tmp_0;
    #line 71 
    tmp = hostbuf;
    #line 71 
    hostbuf ++;
    #line 71 
    tmp_0 = mapped_addr;
    #line 71 
    mapped_addr ++;
    #line 71 
    ;
    #line 71 
    *tmp = readb((void *)tmp_0);
    #line 72 
    len --;
  }
  #line 77 
  while (len > 7U) {
    #line 78 
    *((u64 *)hostbuf) = readq((void *)mapped_addr);
    #line 79 
    mapped_addr += 8U;
    #line 80 
    hostbuf += 8U;
    #line 81 
    len += 4294967288U;
  }
  #line 86 
  while (1) {
    #line 86 
    u32 tmp_3;
    #line 87 
    u8 *tmp_1;
    #line 87 
    u8 *tmp_2;
    #line 86 
    tmp_3 = len;
    #line 86 
    len --;
    #line 86 
    ;
    #line 86 
    if (! (tmp_3 != 0U)) 
                         #line 86 
                         break;
    #line 87 
    tmp_1 = hostbuf;
    #line 87 
    hostbuf ++;
    #line 87 
    tmp_2 = mapped_addr;
    #line 87 
    mapped_addr ++;
    #line 87 
    ;
    #line 87 
    *tmp_1 = readb((void *)tmp_2);
  }
  #line 88 
  return;
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mem_ops.c"
static void __octeon_pci_rw_core_mem(struct octeon_device *oct, u64 addr, u8 *hostbuf, u32 len, u32 op)
{
  #line 97 
  unsigned long flags;
  #line 98 
  u8 *mapped_addr;
  #line 99 
  u64 static_mapping_base;
  #line 96 
  u32 copy_len = 0U;
  #line 96 
  u32 index_reg_val = 0U;
  #line 101 
  static_mapping_base = oct->console_nb_info.dram_region_base;
  #line 103 
  if (static_mapping_base != 0ULL && (addr & 18446744073705357312ULL) == static_mapping_base) {
    #line 105 
    int bar1_index = oct->console_nb_info.bar1_index;
    #line 107 
    mapped_addr = oct->mmio[1].hw_addr + ((unsigned long long)((unsigned long)(bar1_index << 22)) + (addr & 4194303ULL));
    #line 111 
    if (op != 0U) 
                  #line 112 
                  octeon_pci_fastread(oct,mapped_addr,hostbuf,len); else 
                                                                    #line 114 
                                                                    octeon_pci_fastwrite(oct,mapped_addr,hostbuf,len);
    #line 116 
    return;
  }
  #line 119 
  cif___ldv_spin_lock_mem_access_lock_of_octeon_device(& oct->mem_access_lock);
  #line 122 
  index_reg_val = (*(oct->fn_list.bar1_idx_read))(oct,2U);
  #line 123 
  while (1) {
    #line 124 
    (*(oct->fn_list.bar1_idx_setup))(oct,addr,2U,1);
    #line 125 
    mapped_addr = oct->mmio[1].hw_addr + ((addr & 4194303ULL) + (unsigned long long)8388608U);
    #line 132 
    if ((((((unsigned long long)len + addr) + 18446744073709551615ULL) ^ addr) & 18446744073705357312ULL) != 0ULL) 
      #line 133 
      copy_len = (((unsigned int)addr & 4290772992U) - (unsigned int)addr) + 8388608U; else 
                                                                    #line 136 
                                                                    copy_len = len;
    #line 139 
    if (op != 0U) 
                  #line 140 
                  octeon_pci_fastread(oct,mapped_addr,hostbuf,copy_len); else 
                                                                    #line 143 
                                                                    octeon_pci_fastwrite(oct,mapped_addr,hostbuf,copy_len);
    #line 147 
    len -= copy_len;
    #line 148 
    addr = (unsigned long long)copy_len + addr;
    #line 149 
    hostbuf += (unsigned long)copy_len;
    #line 150 
    if (! (len != 0U)) 
                       #line 123 
                       break;
  }
  #line 153 
  (*(oct->fn_list.bar1_idx_write))(oct,2U,index_reg_val);
  #line 155 
  cif_spin_unlock_irqrestore_mem_access_lock_of_octeon_device(& oct->mem_access_lock,flags);
  #line 156 
  return;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mem_ops.c"
void octeon_pci_read_core_mem(struct octeon_device *oct, u64 coreaddr, u8 *buf, u32 len)
{
  #line 164 
  __octeon_pci_rw_core_mem(oct,coreaddr,buf,len,1U);
  #line 165 
  return;
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mem_ops.c"
void octeon_pci_write_core_mem(struct octeon_device *oct, u64 coreaddr, u8 *buf, u32 len)
{
  #line 173 
  __octeon_pci_rw_core_mem(oct,coreaddr,buf,len,0U);
  #line 174 
  return;
}

#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mem_ops.c"
u64 octeon_read_device_mem64(struct octeon_device *oct, u64 coreaddr)
{
  #line 178 
  __be64 ret;
  #line 180 
  __octeon_pci_rw_core_mem(oct,coreaddr,(u8 *)(& ret),8U,1U);
  #line 182 
  return (u64)__builtin_bswap64((unsigned long)ret);
}

#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mem_ops.c"
u32 octeon_read_device_mem32(struct octeon_device *oct, u64 coreaddr)
{
  #line 187 
  __be32 ret;
  #line 189 
  __octeon_pci_rw_core_mem(oct,coreaddr,(u8 *)(& ret),4U,1U);
  #line 191 
  return __builtin_bswap32(ret);
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mem_ops.c"
void octeon_write_device_mem32(struct octeon_device *oct, u64 coreaddr, u32 val)
{
  #line 197 
  __be32 t = __builtin_bswap32(val);
  #line 199 
  __octeon_pci_rw_core_mem(oct,coreaddr,(u8 *)(& t),4U,0U);
  #line 200 
  return;
}

#line 664  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_mem_ops.i.aux"
static void cif___ldv_spin_lock_mem_access_lock_of_octeon_device(spinlock_t *lock)
{
  #line 667 
  ldv_spin_model_lock((char *)"mem_access_lock_of_octeon_device");
  #line 669 
  __ldv_spin_lock(lock);
  #line 670 
  return;
}

#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_mem_ops.i.aux"
static void cif_spin_unlock_irqrestore_mem_access_lock_of_octeon_device(spinlock_t *lock, unsigned long flags)
{
  #line 676 
  ldv_spin_model_unlock((char *)"mem_access_lock_of_octeon_device");
  #line 678 
  spin_unlock_irqrestore(lock,flags);
  #line 679 
  return;
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 8 
#line 8 
void ldv_atomic_dec(atomic_t *v);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w)
{
  #line 45 
  unsigned long res;
  #line 46 
  ldv_inline_asm();
  #line 51 
  return res;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 215  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/swab.h"
__inline static __u64 __swab64p(__u64 *p)
{
  #line 192 
  return (__u64)__builtin_bswap64((unsigned long)*p);
}

#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/swab.h"
__inline static void __swab64s(__u64 *p)
{
  #line 260 
  *p = __swab64p(p);
  #line 261 
  return;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 229  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_716 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_718 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 15 
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_770 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_772 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_dec_and_test(atomic_t *v)
{
  #line 125 
  bool c;
  #line 126 
  ldv_inline_asm();
  #line 125 
  return c;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set(v,i);
  #line 46 
  return;
}

#line 237 
#line 278  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void atomic_inc(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 285  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void atomic_dec(atomic_t *v);
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_dec_and_test(atomic_t *v)
{
  #line 747 
  kasan_check_read((void *)v,4U);
  #line 748 
  return arch_atomic_dec_and_test(v);
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 28 
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 977  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_spin_lock_NOT_ARG_SIGN(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 917  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_spin_lock_bh_lock_of_octeon_instr_queue(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 959  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_spin_lock_bh_cmd_resp_wqlock_of_octeon_device(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 986  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_spin_unlock_NOT_ARG_SIGN(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 926  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_spin_unlock_bh_lock_of_octeon_instr_queue(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 968  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_spin_unlock_bh_cmd_resp_wqlock_of_octeon_device(spinlock_t *lock);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void __init_completion(struct completion *x)
{
  #line 87 
  x->done = 0U;
  {
    #line 88 
    struct lock_class_key __key;
    #line 88 
    __init_waitqueue_head(& x->wait,(char *)"&x->wait",& __key);
  }
  #line 90 
  return;
}

#line 111 
#line 111 
long wait_for_completion_interruptible_timeout(struct completion *, unsigned long);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static ktime_t ns_to_ktime(u64 ns)
{
  #line 267 
  return (long long)ns;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 407 
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 511 
#line 407  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 995  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_852 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_44.__anonCompField___anonunion_186_39.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 209 
#line 209 
void iounmap(void *);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 935  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 352 
int irq_set_affinity_hint(unsigned int, struct cpumask *);
#line 638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static void tasklet_unlock_wait(struct tasklet_struct *t)
{
  #line 640 
  while (1) {
    #line 640 
    if (! ((int)test_bit(1L,& t->state) != 0)) 
                                               #line 640 
                                               break;
    #line 641 
    ldv_inline_asm();
  }
  #line 642 
  return;
}

#line 655 
#line 909  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t);
#line 664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static void tasklet_disable_nosync(struct tasklet_struct *t)
{
  #line 666 
  atomic_inc(& t->count);
  #line 670 
  return;
}

#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static void tasklet_disable(struct tasklet_struct *t)
{
  #line 672 
  tasklet_disable_nosync(t);
  #line 673 
  tasklet_unlock_wait(t);
  #line 674 
  ldv_inline_asm();
  #line 675 
  return;
}

#line 677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static void tasklet_enable(struct tasklet_struct *t)
{
  #line 680 
  atomic_dec(& t->count);
  #line 681 
  return;
}

#line 683 
#line 683 
void tasklet_kill(struct tasklet_struct *);
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 222 
long schedule_timeout_uninterruptible(long);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 137 
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 1085  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1085 
int pci_read_config_dword(struct pci_dev *, int, u32 *);
#line 1087 
#line 1087 
int pci_write_config_word(struct pci_dev *, int, u16);
#line 1088 
#line 1088 
int pci_write_config_dword(struct pci_dev *, int, u32);
#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1161 
#line 1161 
void pci_clear_master(struct pci_dev *);
#line 1187 
#line 1187 
int pcie_flr(struct pci_dev *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1285 
#line 1285 
void pci_release_region(struct pci_dev *, int);
#line 1346 
#line 1019  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1027  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 12 
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
#line 31 
#line 31 
void __page_ref_mod_and_test(struct page *, int, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count(struct page *page)
{
  #line 67 
  return atomic_read(& page->_refcount);
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_dec_and_test(struct page *page)
{
  #line 139 
  int ret = (int)atomic_dec_and_test(& page->_refcount);
  #line 141 
  if ((int)static_key_false(& __tracepoint_page_ref_mod_and_test.key) != 0) 
    #line 142 
    __page_ref_mod_and_test(page,-1,ret);
  #line 143 
  return ret;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int put_page_testzero(struct page *page)
{
  #line 592 
  if ((long)(page_ref_count(page) == 0) != 0L) {
    #line 592 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 593 
    ldv_inline_asm();
    #line 594 
    ldv_inline_asm();
    #line 595 
    ldv_inline_asm();
    #line 592 
    ;
  }
  #line 593 
  return page_ref_dec_and_test(page);
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 736 
#line 736 
void __put_page(struct page *);
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static enum zone_type page_zonenum(struct page *page)
{
  #line 937 
  return (enum zone_type)((unsigned int)(page->flags >> 51UL) & 7U);
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_zone_device_page(struct page *page)
{
  #line 943 
  return (_Bool)(page_zonenum(page) == (unsigned int)ZONE_DEVICE);
}

#line 955 
#line 955 
void __put_devmap_managed_page(struct page *);
#line 956 
#line 956 
extern struct static_key_false devmap_managed_key;
#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool put_devmap_managed_page(struct page *page)
{
  #line 959 
  bool branch;
  #line 959 
  branch = arch_static_branch(& devmap_managed_key.key,(_Bool)0);
  #line 959 
  if ((long)((long)((int)branch != 0)) == 0L) 
                                              #line 960 
                                              return (_Bool)0;
  #line 961 
  if (! is_zone_device_page(page)) 
                                   #line 962 
                                   return (_Bool)0;
  #line 963 
  switch ((unsigned int)(page->__anonCompField_page_44.__anonCompField___anonunion_186_43.pgmap)->type) {
    #line 964 
    case (unsigned int)1: 
                          #line 964 
    ;
    #line 965 
    case (unsigned int)2: 
                          #line 965 
    ;
    #line 966 
    __put_devmap_managed_page(page);
    #line 967 
    return (_Bool)1;
    #line 968 
    default: 
             #line 968 
    ;
    #line 969 
    break;
  }
  #line 971 
  return (_Bool)0;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void put_page(struct page *page)
{
  #line 1023 
  page = compound_head(page);
  #line 1031 
  if ((int)put_devmap_managed_page(page) != 0) 
                                               #line 1032 
                                               return;
  #line 1034 
  if (put_page_testzero(page) != 0) 
                                    #line 1035 
                                    __put_page(page);
  #line 1036 
  return;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1570 
#line 1570 
void pci_cfg_access_lock(struct pci_dev *);
#line 1572 
#line 1572 
void pci_cfg_access_unlock(struct pci_dev *);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address, size_t size, int direction)
{
  #line 61 
  dma_unmap_page_attrs(& hwdev->dev,dma_address,size,(enum dma_data_direction)direction,0UL);
  #line 62 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2679 
#line 951  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_start_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3408 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3410 
  netif_tx_start_queue(txq);
  #line 3411 
  return;
}

#line 3420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3422 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3423 
  netif_tx_stop_queue(txq);
  #line 3424 
  return;
}

#line 3433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool __netif_subqueue_stopped(struct net_device *dev, u16 queue_index)
{
  #line 3436 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3438 
  return netif_tx_queue_stopped(txq);
}

#line 3454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3456 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3458 
  netif_tx_wake_queue(txq);
  #line 3459 
  return;
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3705 
#line 3705 
int dev_set_mtu(struct net_device *, int);
#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  #line 3926 
  if ((unsigned int)debug_value > 31U) 
                                       #line 3927 
                                       return (unsigned int)default_msg_enable_bits;
  #line 3928 
  if (debug_value == 0) 
                        #line 3929 
                        return 0U;
  #line 3931 
  return (1U << debug_value) + 4294967295U;
}

#line 3984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_trans_update(struct net_device *dev)
{
  #line 3986 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,0U);
  #line 3988 
  if (txq->trans_start != jiffies) 
                                   #line 3989 
                                   txq->trans_start = jiffies;
  #line 3990 
  return;
}

#line 4131 
#line 1011  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 943  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 4575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_set_gso_max_size(struct net_device *dev, unsigned int size)
{
  #line 4578 
  dev->gso_max_size = size;
  #line 4579 
  return;
}

#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 1003  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
__inline static void add_sg_size(struct octeon_sg_entry *sg_entry, u16 size, u32 pos)
{
  #line 186 
  sg_entry->u.size[3U - pos] = size;
  #line 187 
  return;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.h"
__inline static void octeon_free_recv_info(struct octeon_recv_info *recv_info)
{
  #line 212 
  kfree((void *)recv_info);
  #line 213 
  return;
}

#line 350 
#line 350 
int octeon_delete_droq(struct octeon_device *oct, u32 q_no);
#line 376 
#line 376 
int octeon_unregister_droq_ops(struct octeon_device *oct, u32 q_no);
#line 390 
#line 390 
int octeon_register_dispatch_fn(struct octeon_device *oct, u16 opcode, u16 subcode, int (*fn)(struct octeon_recv_info *, void *), void *fn_arg);
#line 400 
#line 400 
u32 octeon_droq_check_hw_for_pkts(struct octeon_droq *droq);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_iq.h"
#line 327 
int octeon_setup_sc_buffer_pool(struct octeon_device *oct);
#line 328 
#line 328 
int octeon_free_sc_done_list(struct octeon_device *oct);
#line 329 
#line 329 
int octeon_free_sc_zombie_list(struct octeon_device *oct);
#line 330 
#line 330 
int octeon_free_sc_buffer_pool(struct octeon_device *oct);
#line 332 
#line 332 
struct octeon_soft_command *octeon_alloc_soft_command(struct octeon_device *oct, u32 datasize, u32 rdatasize, u32 ctxsize);
#line 335 
#line 335 
void octeon_free_soft_command(struct octeon_device *oct, struct octeon_soft_command *sc);
#line 362 
#line 362 
int octeon_delete_instr_queue(struct octeon_device *oct, u32 iq_no);
#line 364 
#line 364 
int lio_wait_for_instr_fetch(struct octeon_device *oct);
#line 367 
#line 367 
void octeon_ring_doorbell_locked(struct octeon_device *oct, u32 iq_no);
#line 370 
#line 370 
int octeon_register_reqtype_free_fn(struct octeon_device *oct, int reqtype, void (*fn)(void *));
#line 374 
#line 374 
int lio_process_iq_request_list(struct octeon_device *oct, struct octeon_instr_queue *iq, u32 napi_budget);
#line 377 
#line 377 
int octeon_send_command(struct octeon_device *oct, u32 iq_no, u32 force_db, void *cmd, void *buf, u32 datasize, u32 reqtype);
#line 384 
#line 384 
void octeon_prepare_soft_command(struct octeon_device *oct, struct octeon_soft_command *sc, u8 opcode, u8 subcode, u32 irh_ossp, u64 ossp0, u64 ossp1);
#line 390 
#line 390 
int octeon_send_soft_command(struct octeon_device *oct, struct octeon_soft_command *sc);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/response_manager.h"
#line 130 
int octeon_setup_response_list(struct octeon_device *oct);
#line 132 
#line 132 
void octeon_delete_response_list(struct octeon_device *oct);
#line 140 
#line 140 
int lio_process_ordered_list(struct octeon_device *octeon_dev, u32 force_quit);
#line 635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
#line 635 
void octeon_init_device_list(int conf_type);
#line 638 
#line 638 
void octeon_free_device_mem(struct octeon_device *oct);
#line 644 
#line 644 
struct octeon_device *octeon_allocate_device(u32 pci_id, u32 priv_size);
#line 669 
#line 669 
int octeon_init_dispatch_list(struct octeon_device *oct);
#line 675 
#line 675 
void octeon_delete_dispatch_list(struct octeon_device *oct);
#line 854 
#line 854 
char *lio_get_state_string(atomic_t *state_ptr);
#line 861 
#line 861 
int octeon_setup_instr_queues(struct octeon_device *oct);
#line 868 
#line 868 
int octeon_setup_output_queues(struct octeon_device *oct);
#line 870 
#line 870 
int octeon_get_tx_qsize(struct octeon_device *oct, u32 q_no);
#line 872 
#line 872 
int octeon_get_rx_qsize(struct octeon_device *oct, u32 q_no);
#line 877 
#line 877 
int octeon_set_io_queues_off(struct octeon_device *oct);
#line 899 
#line 899 
void octeon_free_ioq_vector(struct octeon_device *oct);
#line 900 
#line 900 
int octeon_allocate_ioq_vector(struct octeon_device *oct, u32 num_ioqs);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.h"
__inline static int octnet_iq_is_full(struct octeon_device *oct, u32 q_no)
{
  #line 114 
  ;
  #line 115 
  return (unsigned int)atomic_read(& (oct->instr_queue[q_no])->instr_pending) >= (oct->instr_queue[q_no])->max_count + 4294967294U;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.h"
__inline static void octnet_prepare_pci_cmd_o2(struct octeon_device *oct, union octeon_instr_64B *cmd, union octnic_cmd_setup *setup, u32 tag)
{
  #line 123 
  struct octeon_instr_ih2 *ih2;
  #line 124 
  struct octeon_instr_irh *irh;
  #line 125 
  union octnic_packet_params packet_params;
  #line 126 
  int port;
  #line 128 
  memset((void *)cmd,0,64UL);
  #line 130 
  ih2 = (struct octeon_instr_ih2 *)(& cmd->cmd2.ih2);
  #line 135 
  ih2->fsz = (unsigned long long)24U;
  #line 137 
  ih2->tagtype = (unsigned long long)0U;
  #line 138 
  ih2->grp = (unsigned long long)0U;
  #line 140 
  port = (int)(oct->instr_queue[(int)setup->s.iq_no])->txpciq.s.port;
  #line 142 
  if (tag != 0U) 
                 #line 143 
                 ih2->tag = (unsigned long long)tag; else 
                                                          #line 145 
                                                          ih2->tag = (unsigned long long)((unsigned int)(port + 286331153));
  #line 147 
  ih2->raw = (unsigned long long)1U;
  #line 148 
  ih2->qos = (unsigned long long)(((unsigned int)((unsigned char)port) & 3U) + 4U);
  #line 150 
  if ((unsigned int)setup->s.gather == 0U) 
                                           #line 151 
                                           ih2->dlengsz = (unsigned long long)setup->s.u.datasize;
  else {
    #line 153 
    ih2->gather = (unsigned long long)1U;
    #line 154 
    ih2->dlengsz = (unsigned long long)setup->s.u.gatherptrs;
  }
  #line 157 
  irh = (struct octeon_instr_irh *)(& cmd->cmd2.irh);
  #line 159 
  irh->opcode = (unsigned long long)1U;
  #line 160 
  irh->subcode = (unsigned long long)2U;
  #line 162 
  packet_params.u32 = 0U;
  #line 164 
  packet_params.s.ip_csum = setup->s.ip_csum;
  #line 165 
  packet_params.s.transport_csum = setup->s.transport_csum;
  #line 166 
  packet_params.s.tnl_csum = setup->s.tnl_csum;
  #line 167 
  packet_params.s.tsflag = setup->s.timestamp;
  #line 169 
  irh->ossp = (unsigned long long)packet_params.u32;
  #line 170 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.h"
__inline static void octnet_prepare_pci_cmd_o3(struct octeon_device *oct, union octeon_instr_64B *cmd, union octnic_cmd_setup *setup, u32 tag)
{
  #line 177 
  struct octeon_instr_irh *irh;
  #line 178 
  struct octeon_instr_ih3 *ih3;
  #line 179 
  struct octeon_instr_pki_ih3 *pki_ih3;
  #line 180 
  union octnic_packet_params packet_params;
  #line 181 
  int port;
  #line 183 
  memset((void *)cmd,0,64UL);
  #line 185 
  ih3 = (struct octeon_instr_ih3 *)(& cmd->cmd3.ih3);
  #line 186 
  pki_ih3 = (struct octeon_instr_pki_ih3 *)(& cmd->cmd3.pki_ih3);
  #line 191 
  ih3->pkind = (oct->instr_queue[(int)setup->s.iq_no])->txpciq.s.pkind;
  #line 193 
  ih3->fsz = (unsigned long long)32U;
  #line 195 
  if ((unsigned int)setup->s.gather == 0U) 
                                           #line 196 
                                           ih3->dlengsz = (unsigned long long)setup->s.u.datasize;
  else {
    #line 198 
    ih3->gather = (unsigned long long)1U;
    #line 199 
    ih3->dlengsz = (unsigned long long)setup->s.u.gatherptrs;
  }
  #line 202 
  pki_ih3->w = (unsigned long long)1U;
  #line 203 
  pki_ih3->raw = (unsigned long long)1U;
  #line 204 
  pki_ih3->utag = (unsigned long long)1U;
  #line 205 
  pki_ih3->utt = (unsigned long long)1U;
  #line 206 
  pki_ih3->uqpg = (oct->instr_queue[(int)setup->s.iq_no])->txpciq.s.use_qpg;
  #line 208 
  port = (int)(oct->instr_queue[(int)setup->s.iq_no])->txpciq.s.port;
  #line 210 
  if (tag != 0U) 
                 #line 211 
                 pki_ih3->tag = (unsigned long long)tag; else 
                                                              #line 213 
                                                              pki_ih3->tag = (unsigned long long)((unsigned int)(port + 286331153));
  #line 215 
  pki_ih3->tagtype = (unsigned long long)0U;
  #line 216 
  pki_ih3->qpg = (oct->instr_queue[(int)setup->s.iq_no])->txpciq.s.qpg;
  #line 217 
  pki_ih3->pm = (unsigned long long)7U;
  #line 218 
  pki_ih3->sl = (unsigned long long)8U;
  #line 220 
  irh = (struct octeon_instr_irh *)(& cmd->cmd3.irh);
  #line 222 
  irh->opcode = (unsigned long long)1U;
  #line 223 
  irh->subcode = (unsigned long long)2U;
  #line 225 
  packet_params.u32 = 0U;
  #line 227 
  packet_params.s.ip_csum = setup->s.ip_csum;
  #line 228 
  packet_params.s.transport_csum = setup->s.transport_csum;
  #line 229 
  packet_params.s.tnl_csum = setup->s.tnl_csum;
  #line 230 
  packet_params.s.tsflag = setup->s.timestamp;
  #line 232 
  irh->ossp = (unsigned long long)packet_params.u32;
  #line 233 
  return;
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.h"
__inline static void octnet_prepare_pci_cmd(struct octeon_device *oct, union octeon_instr_64B *cmd, union octnic_cmd_setup *setup, u32 tag)
{
  #line 246 
  struct octeon_device *_oct;
  #line 246 
  _oct = oct;
  #line 246 
  if (((unsigned int)_oct->chip_id + 65391U <= 1U) != 0) 
                                                         #line 247 
                                                         octnet_prepare_pci_cmd_o2(oct,cmd,setup,tag); else 
                                                                    #line 249 
                                                                    octnet_prepare_pci_cmd_o3(oct,cmd,setup,tag);
  #line 250 
  return;
}

#line 263 
#line 263 
void *octeon_alloc_soft_command_resp(struct octeon_device *oct, union octeon_instr_64B *cmd, u32 rdatasize);
#line 274 
#line 274 
int octnet_send_nic_data_pkt(struct octeon_device *oct, struct octnic_data_pkt *ndata, int xmit_more);
#line 285 
#line 285 
int octnet_send_nic_ctrl_pkt(struct octeon_device *oct, struct octnic_ctrl_pkt *nctrl);
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
__inline static void octeon_swap_8B_data(u64 *data, u32 blocks)
{
  #line 80 
  while (blocks != 0U) {
    #line 81 
    __swab64s(data);
    #line 82 
    blocks --;
    #line 83 
    data ++;
  }
  #line 85 
  return;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
__inline static void octeon_unmap_pci_barx(struct octeon_device *oct, int baridx)
{
  {
    #line 94 
    bool branch;
    #line 94 
    struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"liquidio_vf", .function = (char *)"octeon_unmap_pci_barx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h", .format = (char *)"Freeing PCI mapped regions for Bar%d\n", .lineno = (unsigned int)94U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 94 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
    #line 94 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 94 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug544,& (oct->pci_dev)->dev,(char *)"Freeing PCI mapped regions for Bar%d\n",baridx);
  }
  #line 97 
  if (oct->mmio[baridx].done != 0U) 
                                    #line 98 
                                    iounmap((void *)oct->mmio[baridx].hw_addr);
  #line 100 
  if (oct->mmio[baridx].start != 0ULL) 
                                       #line 101 
                                       pci_release_region(oct->pci_dev,baridx * 2);
  #line 102 
  return;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
__inline static int wait_for_sc_completion_timeout(struct octeon_device *oct_dev, struct octeon_soft_command *sc, unsigned long timeout)
{
  #line 189 
  long timeout_jiff;
  #line 188 
  int errno = 0;
  #line 191 
  if (timeout != 0UL) {
    #line 192 
    timeout_jiff = (long)msecs_to_jiffies((unsigned int)timeout);
  }
  else 
       #line 194 
       timeout_jiff = 9223372036854775807L;
  #line 196 
  timeout_jiff = wait_for_completion_interruptible_timeout(& sc->complete,(unsigned long)timeout_jiff);
  #line 199 
  if (timeout_jiff == 0L) {
    #line 200 
    _dev_err(& (oct_dev->pci_dev)->dev,(char *)"%s: sc is timeout\n",(char *)"wait_for_sc_completion_timeout");
    {
      #line 203 
      union __anonunion___u_1768 __u = {.__val = 1};
      #line 202 
      __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
      #line 202 
      int tmp_2 = __u.__val;
    }
    #line 203 
    errno = -62;
  }
  else 
    #line 204 
    if (timeout_jiff == -512L) {
      #line 205 
      _dev_err(& (oct_dev->pci_dev)->dev,(char *)"%s: sc is interrupted\n",(char *)"wait_for_sc_completion_timeout");
      {
        #line 208 
        union __anonunion___u_1770 __u_0 = {.__val = 1};
        #line 207 
        __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_0.__c),4);
        #line 207 
        int tmp_4 = __u_0.__val;
      }
      #line 208 
      errno = -4;
    }
    else 
      #line 209 
      if (sc->sc_status == 3U) {
        #line 210 
        _dev_err(& (oct_dev->pci_dev)->dev,(char *)"%s: sc has fatal timeout\n",(char *)"wait_for_sc_completion_timeout");
        {
          #line 213 
          union __anonunion___u_1772 __u_1 = {.__val = 1};
          #line 212 
          __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_1.__c),4);
          #line 212 
          int tmp_6 = __u_1.__val;
        }
        #line 213 
        errno = -16;
      }
  #line 216 
  return errno;
}

#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
#line 202 
int liquidio_set_feature(struct net_device *netdev, int cmd, u16 param1);
#line 204 
#line 204 
int setup_rx_oom_poll_fn(struct net_device *netdev);
#line 206 
#line 206 
void cleanup_rx_oom_poll_fn(struct net_device *netdev);
#line 217 
#line 217 
void liquidio_link_ctrl_cmd_completion(void *nctrl_ptr);
#line 219 
#line 219 
int liquidio_setup_io_queues(struct octeon_device *octeon_dev, int ifidx, u32 num_iqs, u32 num_oqs);
#line 225 
#line 225 
int octeon_setup_interrupt(struct octeon_device *oct, u32 num_ioqs);
#line 227 
#line 227 
void lio_fetch_stats(struct work_struct *work);
#line 229 
#line 229 
int lio_wait_for_clean_oq(struct octeon_device *oct);
#line 234 
#line 234 
void liquidio_set_ethtool_ops(struct net_device *netdev);
#line 236 
#line 236 
void lio_delete_glists(struct lio *lio);
#line 238 
#line 238 
int lio_setup_glists(struct octeon_device *oct, struct lio *lio, int num_iqs);
#line 249 
#line 249 
int liquidio_change_mtu(struct net_device *netdev, int new_mtu);
#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void recv_buffer_free(void *buffer)
{
  #line 407 
  struct octeon_skb_page_info *pg_info;
  #line 406 
  struct sk_buff *skb = (struct sk_buff *)buffer;
  #line 409 
  pg_info = (struct octeon_skb_page_info *)(& skb->cb);
  #line 411 
  if (pg_info->page != (struct page *)0) {
    #line 412 
    put_page(pg_info->page);
    #line 413 
    pg_info->dma = 0ULL;
    #line 414 
    pg_info->page = (struct page *)0;
    #line 415 
    pg_info->page_offset = 0U;
  }
  #line 418 
  dev_kfree_skb_any((struct sk_buff *)buffer);
  #line 419 
  return;
}

#line 427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void tx_buffer_free(void *buffer)
{
  #line 429 
  dev_kfree_skb_any((struct sk_buff *)buffer);
  #line 430 
  return;
}

#line 438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void *get_rbd(struct sk_buff *skb)
{
  #line 440 
  struct octeon_skb_page_info *pg_info;
  #line 441 
  unsigned char *va;
  #line 443 
  pg_info = (struct octeon_skb_page_info *)(& skb->cb);
  #line 444 
  va = (unsigned char *)(lowmem_page_address(pg_info->page) + (unsigned long)pg_info->page_offset);
  #line 446 
  return (void *)va;
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static int ifstate_check(struct lio *lio, int state_flag)
{
  #line 506 
  ;
  #line 506 
  return atomic_read(& lio->ifstate) & state_flag;
}

#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void ifstate_set(struct lio *lio, int state_flag)
{
  #line 516 
  ;
  #line 516 
  ;
  #line 516 
  atomic_set(& lio->ifstate,atomic_read(& lio->ifstate) | state_flag);
  #line 517 
  return;
}

#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void ifstate_reset(struct lio *lio, int state_flag)
{
  #line 526 
  ;
  #line 526 
  ;
  #line 526 
  atomic_set(& lio->ifstate,atomic_read(& lio->ifstate) & ~ state_flag);
  #line 527 
  return;
}

#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static int wait_for_pending_requests(struct octeon_device *oct)
{
  #line 537 
  int i;
  #line 537 
  int pcount = 0;
  #line 539 
  i = 0;
  #line 539 
  while (i <= 99) {
    #line 540 
    pcount = atomic_read(& oct->response_list[3].pending_req_count);
    #line 543 
    if (pcount != 0) 
                     #line 544 
                     schedule_timeout_uninterruptible(25L); else 
                                                                 #line 546 
                                                                 break;
    #line 539 
    i ++;
  }
  #line 549 
  if (pcount != 0) 
                   #line 550 
                   return 1;
  #line 552 
  return 0;
}

#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void stop_txqs(struct net_device *netdev)
{
  #line 561 
  int i;
  #line 563 
  i = 0;
  #line 563 
  while (netdev->real_num_tx_queues > (unsigned int)i) {
    #line 564 
    netif_stop_subqueue(netdev,(unsigned short)((int)((unsigned short)i)));
    #line 563 
    i ++;
  }
  #line 565 
  return;
}

#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void wake_txqs(struct net_device *netdev)
{
  #line 574 
  int i;
  #line 574 
  int qno;
  #line 573 
  struct lio *lio = netdev_priv(netdev);
  #line 576 
  i = 0;
  #line 576 
  while (netdev->real_num_tx_queues > (unsigned int)i) {
    {
      #line 577 
      qno = (int)lio->linfo.txpciq[(unsigned int)i % (lio->oct_dev)->num_iqs].s.q_no;
      #line 579 
      if ((int)__netif_subqueue_stopped(netdev,
                                 (unsigned short)((int)((unsigned short)i))) != 0) {
        #line 580 
        (((lio->oct_dev)->instr_queue[qno])->stats.tx_restart) ++;
        #line 582 
        netif_wake_subqueue(netdev,(unsigned short)((int)((unsigned short)i)));
      }
    }
    #line 576 
    i ++;
  }
  #line 585 
  return;
}

#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void start_txqs(struct net_device *netdev)
{
  #line 594 
  int i;
  #line 593 
  struct lio *lio = netdev_priv(netdev);
  #line 596 
  if ((unsigned int)lio->linfo.link.s.link_up != 0U) {
    #line 597 
    i = 0;
    #line 597 
    while (netdev->real_num_tx_queues > (unsigned int)i) {
      #line 598 
      netif_start_subqueue(netdev,(unsigned short)((int)((unsigned short)i)));
      #line 597 
      i ++;
    }
  }
  #line 600 
  return;
}

#line 602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static int skb_iq(struct octeon_device *oct, struct sk_buff *skb)
{
  #line 604 
  return (int)((unsigned int)skb->queue_mapping % oct->num_iqs);
}

#line 611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static struct list_head *lio_list_delete_head(struct list_head *root)
{
  #line 613 
  struct list_head *node;
  #line 615 
  if (root->prev == root && root->next == root) 
                                                #line 616 
                                                node = (struct list_head *)0; else 
                                                                    #line 618 
                                                                    node = root->next;
  #line 620 
  if (node != (struct list_head *)0) 
                                     #line 621 
                                     list_del(node);
  #line 623 
  return node;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.h"
#line 39 
void cn23xx_vf_ask_pf_to_do_flr(struct octeon_device *oct);
#line 41 
#line 41 
int cn23xx_octeon_pfvf_handshake(struct octeon_device *oct);
#line 43 
#line 43 
int cn23xx_setup_octeon_vf_device(struct octeon_device *oct);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int debug = -1;
#line 69 
#line 383 
static int liquidio_vf_probe(struct pci_dev *pdev, struct pci_device_id *ent);
#line 70 
#line 745 
static void liquidio_vf_remove(struct pci_dev *pdev);
#line 71 
#line 2271 
static int octeon_device_init(struct octeon_device *oct);
#line 72 
#line 949 
static int liquidio_stop(struct net_device *netdev);
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int lio_wait_for_oq_pkts(struct octeon_device *oct)
{
  #line 79 
  int pending_pkts;
  #line 80 
  int i;
  #line 76 
  struct octeon_device_priv *oct_priv = (struct octeon_device_priv *)oct->priv;
  #line 78 
  int retry = 100;
  #line 79 
  int pkt_cnt = 0;
  #line 82 
  while (1) {
    #line 96 
    int tmp_1;
    #line 83 
    pending_pkts = 0;
    #line 85 
    i = 0;
    #line 85 
    while (1) {
      #line 85 
      int tmp_0;
      #line 85 
      if ((unsigned int)oct->chip_id == 38658U) 
                                                #line 85 
                                                tmp_0 = 64; else 
                                                                 #line 85 
                                                                 tmp_0 = 32;
      #line 85 
      ;
      #line 85 
      if (! (tmp_0 > i)) 
                         #line 85 
                         break;
      {
        #line 86 
        if (((oct->io_qmask.oq >> i) & 1ULL) == 0ULL) 
                                                      #line 87 
                                                      goto __Cont;
        #line 88 
        pkt_cnt = (int)(octeon_droq_check_hw_for_pkts(oct->droq[i]) + (unsigned int)pkt_cnt);
      }
      #line 85 
      __Cont: 
              #line 85 
      i ++;
    }
    #line 90 
    if (pkt_cnt > 0) {
      #line 91 
      pending_pkts += pkt_cnt;
      #line 92 
      cif_tasklet_schedule(& oct_priv->droq_tasklet);
    }
    #line 94 
    pkt_cnt = 0;
    #line 95 
    schedule_timeout_uninterruptible(1L);
    #line 96 
    tmp_1 = retry;
    #line 96 
    retry --;
    #line 96 
    ;
    #line 96 
    if (tmp_1 != 0) {
      #line 97 
      if (! (pending_pkts != 0)) 
                                 #line 82 
                                 break;
    }
    else 
         #line 82 
         break;
  }
  #line 99 
  return pkt_cnt;
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void pcierror_quiesce_device(struct octeon_device *oct)
{
  #line 108 
  int i;
  #line 116 
  schedule_timeout_uninterruptible(100L);
  #line 118 
  if (wait_for_pending_requests(oct) != 0) 
                                           #line 119 
                                           _dev_err(& (oct->pci_dev)->dev,(char *)"There were pending requests\n");
  #line 122 
  i = 0;
  #line 122 
  while (1) {
    #line 122 
    int tmp_2;
    #line 122 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 122 
                                              tmp_2 = 64; else 
                                                               #line 122 
                                                               tmp_2 = 32;
    #line 122 
    ;
    #line 122 
    if (! (tmp_2 > i)) 
                       #line 122 
                       break;
    {
      #line 123 
      struct octeon_instr_queue *iq;
      #line 125 
      if (((oct->io_qmask.iq >> i) & 1ULL) == 0ULL) 
                                                    #line 126 
                                                    goto __Cont;
      #line 127 
      iq = oct->instr_queue[i];
      #line 129 
      if (atomic_read(& iq->instr_pending) != 0) {
        #line 130 
        cif_spin_lock_bh_lock_of_octeon_instr_queue(& iq->lock);
        #line 131 
        iq->fill_cnt = 0U;
        #line 132 
        iq->octeon_read_index = iq->host_write_index;
        #line 134 
        iq->stats.instr_processed += (unsigned long long)atomic_read(& iq->instr_pending);
        #line 135 
        lio_process_iq_request_list(oct,iq,0U);
        #line 136 
        cif_spin_unlock_bh_lock_of_octeon_instr_queue(& iq->lock);
      }
    }
    #line 122 
    __Cont: 
            #line 122 
    i ++;
  }
  #line 141 
  lio_process_ordered_list(oct,1U);
  #line 142 
  return;
}

#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void cleanup_aer_uncorrect_error_status(struct pci_dev *dev)
{
  #line 152 
  u32 status;
  #line 152 
  u32 mask;
  #line 153 
  int pos = 256;
  #line 155 
  printk((char *)"\001",(char *)"cleanup_aer_uncorrect_error_status");
  #line 157 
  pci_read_config_dword(dev,pos + 4,& status);
  #line 158 
  pci_read_config_dword(dev,pos + 12,& mask);
  #line 159 
  if (dev->error_state == 1U) 
                              #line 160 
                              status = ~ mask & status; else 
                                                             #line 162 
                                                             status &= mask;
  #line 163 
  pci_write_config_dword(dev,pos + 4,status);
  #line 164 
  return;
}

#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void stop_pci_io(struct octeon_device *oct)
{
  #line 172 
  struct msix_entry *msix_entries;
  #line 173 
  int i;
  #line 176 
  atomic_set(& oct->status,16);
  #line 178 
  i = 0;
  #line 178 
  while (oct->ifcount > (unsigned int)i) {
    #line 179 
    netif_device_detach(oct->props[i].netdev);
    #line 178 
    i ++;
  }
  #line 182 
  (*(oct->fn_list.disable_interrupt))(oct,(unsigned char)255);
  #line 184 
  pcierror_quiesce_device(oct);
  #line 185 
  if (oct->msix_on != 0) {
    #line 186 
    msix_entries = (struct msix_entry *)oct->msix_entries;
    #line 187 
    i = 0;
    #line 187 
    while (oct->num_msix_irqs > i) {
      #line 189 
      irq_set_affinity_hint((msix_entries + (unsigned long)i)->vector,(struct cpumask *)0);
      #line 191 
      cif_free_irq((msix_entries + (unsigned long)i)->vector,(void *)(oct->ioq_vector + (unsigned long)i));
      #line 187 
      i ++;
    }
    #line 194 
    pci_disable_msix(oct->pci_dev);
    #line 195 
    kfree(oct->msix_entries);
    #line 196 
    oct->msix_entries = (void *)0;
    #line 197 
    octeon_free_ioq_vector(oct);
  }
  {
    #line 199 
    bool branch;
    #line 199 
    struct _ddebug __UNIQUE_ID_ddebug554 = {.modname = (char *)"liquidio_vf", .function = (char *)"stop_pci_io", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c", .format = (char *)"Device state is now %s\n", .lineno = (unsigned int)199U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 199 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug554.key.dd_key_false.key,(_Bool)0);
    #line 199 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 199 
      ;
      #line 199 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug554,& (oct->pci_dev)->dev,(char *)"Device state is now %s\n",lio_get_state_string(& oct->status));
    }
  }
  #line 203 
  cleanup_aer_uncorrect_error_status(oct->pci_dev);
  #line 205 
  pci_disable_device(oct->pci_dev);
  #line 206 
  return;
}

#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static pci_ers_result_t liquidio_pcie_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 219 
  struct octeon_device *oct = pci_get_drvdata(pdev);
  #line 222 
  if (state == 1U) {
    #line 223 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Non-correctable non-fatal error reported:\n");
    #line 224 
    cleanup_aer_uncorrect_error_status(oct->pci_dev);
    #line 225 
    return 2U;
  }
  #line 229 
  _dev_err(& (oct->pci_dev)->dev,(char *)"Non-correctable FATAL reported by PCI AER driver\n");
  #line 230 
  stop_pci_io(oct);
  #line 232 
  return 4U;
}

#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static struct pci_error_handlers liquidio_vf_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& liquidio_pcie_error_detected)};
#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static struct pci_device_id liquidio_vf_pci_tbl[2U] = {{.vendor = 6013U, .device = 38674U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
struct pci_device_id __mod_pci__liquidio_vf_pci_tbl_device_table[2U];
#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static struct pci_driver liquidio_vf_pci_driver = {.name = (char *)"LiquidIO_VF", .id_table = (struct pci_device_id *)(& liquidio_vf_pci_tbl), .probe = & liquidio_vf_probe, .remove = & liquidio_vf_remove, .err_handler = & liquidio_vf_err_handler};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void print_link_info(struct net_device *netdev)
{
  #line 265 
  struct lio *lio = netdev_priv(netdev);
  #line 267 
  if (ifstate_check(lio,16) == 0) {
    #line 267 
    if (ifstate_check(lio,2) != 0) {
      #line 269 
      struct oct_link_info *linfo = & lio->linfo;
      #line 271 
      if ((unsigned int)linfo->link.s.link_up != 0U) {
        #line 272 
        if ((lio->msg_enable & 4U) != 0U) {
          #line 272 
          char *tmp_0;
          #line 272 
          if ((unsigned int)linfo->link.s.duplex != 0U) 
                                                        #line 272 
                                                        tmp_0 = (char *)"Full"; else 
                                                                    #line 272 
                                                                    tmp_0 = (char *)"Half";
          #line 272 
          ;
          #line 272 
          ;
          #line 272 
          netdev_info(lio->netdev,(char *)"%d Mbps %s Duplex UP\n",(int)linfo->link.s.speed,tmp_0);
        }
      }
      else 
        #line 276 
        if ((lio->msg_enable & 4U) != 0U) 
                                          #line 276 
                                          netdev_info(lio->netdev,(char *)"Link Down\n");
    }
  }
  #line 278 
  return;
}

#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void octnet_link_status_change(struct work_struct *work)
{
  #line 287 
  struct cavium_wk *wk = (struct cavium_wk *)work;
  #line 288 
  struct lio *lio = (struct lio *)wk->ctxptr;
  #line 294 
  rtnl_lock();
  #line 295 
  dev_set_mtu(lio->netdev,(int)lio->linfo.link.s.mtu);
  #line 296 
  rtnl_unlock();
  #line 297 
  return;
}

#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int setup_link_status_change_wq(struct net_device *netdev)
{
  #line 305 
  struct lio *lio = netdev_priv(netdev);
  #line 306 
  struct octeon_device *oct = lio->oct_dev;
  #line 308 
  lio->link_status_wq.wq = alloc_workqueue((char *)"link-status",8U,0);
  #line 310 
  if (lio->link_status_wq.wq == (struct workqueue_struct *)0) {
    #line 311 
    _dev_err(& (oct->pci_dev)->dev,(char *)"unable to create cavium link status wq\n");
    #line 312 
    return -1;
  }
  {
    #line 314 
    struct lock_class_key __key;
    #line 314 
    __init_work(& lio->link_status_wq.wk.work.work,0);
    #line 314 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 314 
    lio->link_status_wq.wk.work.work.data = __constr_expr_44;
    #line 314 
    lockdep_init_map(& lio->link_status_wq.wk.work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 314 
    INIT_LIST_HEAD(& lio->link_status_wq.wk.work.work.entry);
    #line 314 
    lio->link_status_wq.wk.work.work.func = & octnet_link_status_change;
  }
  {
    #line 314 
    struct lock_class_key __key_0;
    #line 314 
    init_timer_key(& lio->link_status_wq.wk.work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&lio->link_status_wq.wk.work)->timer",& __key_0);
  }
  #line 316 
  lio->link_status_wq.wk.ctxptr = (void *)lio;
  #line 318 
  return 0;
}

#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void cleanup_link_status_change_wq(struct net_device *netdev)
{
  #line 323 
  struct lio *lio = netdev_priv(netdev);
  #line 325 
  if (lio->link_status_wq.wq != (struct workqueue_struct *)0) {
    #line 326 
    cancel_delayed_work_sync(& lio->link_status_wq.wk.work);
    #line 327 
    destroy_workqueue(lio->link_status_wq.wq);
  }
  #line 329 
  return;
}

#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void update_link_status(struct net_device *netdev, union oct_link_status *ls)
{
  #line 342 
  struct lio *lio = netdev_priv(netdev);
  #line 343 
  int current_max_mtu = (int)lio->linfo.link.s.mtu;
  #line 344 
  struct octeon_device *oct = lio->oct_dev;
  #line 346 
  if (lio->intf_open != 0U && lio->linfo.link.u64 != ls->u64) {
    #line 347 
    lio->linfo.link.u64 = ls->u64;
    #line 349 
    print_link_info(netdev);
    #line 350 
    (lio->link_changes) ++;
    #line 352 
    if ((unsigned int)lio->linfo.link.s.link_up != 0U) {
      #line 353 
      netif_carrier_on(netdev);
      #line 354 
      wake_txqs(netdev);
    }
    else {
      #line 356 
      netif_carrier_off(netdev);
      #line 357 
      stop_txqs(netdev);
    }
    #line 360 
    if ((int)lio->linfo.link.s.mtu != current_max_mtu) {
      #line 361 
      _dev_info(& (oct->pci_dev)->dev,(char *)"Max MTU Changed from %d to %d\n",current_max_mtu,(int)lio->linfo.link.s.mtu);
      #line 364 
      netdev->max_mtu = (unsigned int)lio->linfo.link.s.mtu;
    }
    #line 367 
    if ((unsigned int)lio->linfo.link.s.mtu < netdev->mtu) {
      #line 368 
      _dev_warn(& (oct->pci_dev)->dev,(char *)"Current MTU is higher than new max MTU; Reducing the current mtu from %d to %d\n",netdev->mtu,(int)lio->linfo.link.s.mtu);
      #line 371 
      cif_queue_delayed_work(lio->link_status_wq.wq,& lio->link_status_wq.wk.work,0UL);
    }
  }
  #line 375 
  return;
}

#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int liquidio_vf_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 386 
  struct octeon_device *oct_dev = (struct octeon_device *)0;
  #line 388 
  oct_dev = octeon_allocate_device((unsigned int)pdev->device,48U);
  #line 391 
  if (oct_dev == (struct octeon_device *)0) {
    #line 392 
    _dev_err(& pdev->dev,(char *)"Unable to allocate device\n");
    #line 393 
    return -12;
  }
  #line 395 
  oct_dev->msix_on = 1;
  #line 397 
  _dev_info(& pdev->dev,(char *)"Initializing device %x:%x.\n",(unsigned int)pdev->vendor,(unsigned int)pdev->device);
  #line 401 
  pci_set_drvdata(pdev,(void *)oct_dev);
  #line 404 
  oct_dev->pci_dev = pdev;
  #line 406 
  oct_dev->subsystem_id = (unsigned int)((int)pdev->subsystem_vendor | ((int)pdev->subsystem_device << 16));
  #line 409 
  if (octeon_device_init(oct_dev) != 0) {
    #line 410 
    liquidio_vf_remove(pdev);
    #line 411 
    return -12;
  }
  {
    #line 414 
    bool branch;
    #line 414 
    struct _ddebug __UNIQUE_ID_ddebug555 = {.modname = (char *)"liquidio_vf", .function = (char *)"liquidio_vf_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c", .format = (char *)"Device is ready\n", .lineno = (unsigned int)414U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 414 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug555.key.dd_key_false.key,(_Bool)0);
    #line 414 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 414 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug555,& (oct_dev->pci_dev)->dev,(char *)"Device is ready\n");
  }
  #line 416 
  return 0;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void octeon_pci_flr(struct octeon_device *oct)
{
  #line 425 
  pci_save_state(oct->pci_dev);
  #line 427 
  pci_cfg_access_lock(oct->pci_dev);
  #line 430 
  pci_write_config_word(oct->pci_dev,4,(unsigned short)1024);
  #line 433 
  pcie_flr(oct->pci_dev);
  #line 435 
  pci_cfg_access_unlock(oct->pci_dev);
  #line 437 
  pci_restore_state(oct->pci_dev);
  #line 438 
  return;
}

#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void octeon_destroy_resources(struct octeon_device *oct)
{
  #line 449 
  struct msix_entry *msix_entries;
  #line 450 
  int i;
  #line 447 
  struct octeon_device_priv *oct_priv = (struct octeon_device_priv *)oct->priv;
  #line 452 
  switch (atomic_read(& oct->status)) {
    #line 453 
    case 15: 
             #line 453 
    ;
    #line 454 
    case 14: 
             #line 454 
    ;
    #line 456 
    atomic_set(& oct->status,16);
    #line 458 
    oct->app_mode = 2U;
    {
      #line 459 
      bool branch;
      #line 459 
      struct _ddebug __UNIQUE_ID_ddebug556 = {.modname = (char *)"liquidio_vf", .function = (char *)"octeon_destroy_resources", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c", .format = (char *)"Device state is now %s\n", .lineno = (unsigned int)459U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 459 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug556.key.dd_key_false.key,(_Bool)0);
      #line 459 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 459 
        ;
        #line 459 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug556,& (oct->pci_dev)->dev,(char *)"Device state is now %s\n",lio_get_state_string(& oct->status));
      }
    }
    #line 462 
    schedule_timeout_uninterruptible(25L);
    #line 465 
    case 13: 
             #line 465 
    ;
    #line 467 
    case 11: 
             #line 467 
    ;
    #line 468 
    if (lio_wait_for_instr_fetch(oct) != 0) 
                                            #line 469 
                                            _dev_err(& (oct->pci_dev)->dev,(char *)"IQ had pending instructions\n");
    #line 471 
    if (wait_for_pending_requests(oct) != 0) 
                                             #line 472 
                                             _dev_err(& (oct->pci_dev)->dev,(char *)"There were pending requests\n");
    #line 478 
    (*(oct->fn_list.disable_io_queues))(oct);
    #line 480 
    if (lio_wait_for_oq_pkts(oct) != 0) 
                                        #line 481 
                                        _dev_err(& (oct->pci_dev)->dev,(char *)"OQ had pending packets\n");
    #line 486 
    i = 0;
    #line 486 
    while (1) {
      #line 486 
      int tmp_7;
      #line 486 
      if ((unsigned int)oct->chip_id == 38658U) 
                                                #line 486 
                                                tmp_7 = 64; else 
                                                                 #line 486 
                                                                 tmp_7 = 32;
      #line 486 
      ;
      #line 486 
      if (! (tmp_7 > i)) 
                         #line 486 
                         break;
      {
        #line 487 
        struct octeon_instr_queue *iq;
        #line 489 
        if (((oct->io_qmask.iq >> i) & 1ULL) == 0ULL) 
                                                      #line 490 
                                                      goto __Cont;
        #line 491 
        iq = oct->instr_queue[i];
        #line 493 
        if (atomic_read(& iq->instr_pending) != 0) {
          #line 494 
          cif_spin_lock_bh_lock_of_octeon_instr_queue(& iq->lock);
          #line 495 
          iq->fill_cnt = 0U;
          #line 496 
          iq->octeon_read_index = iq->host_write_index;
          #line 498 
          iq->stats.instr_processed += (unsigned long long)atomic_read(& iq->instr_pending);
          #line 499 
          lio_process_iq_request_list(oct,iq,0U);
          #line 500 
          cif_spin_unlock_bh_lock_of_octeon_instr_queue(& iq->lock);
        }
      }
      #line 486 
      __Cont: 
              #line 486 
      i ++;
    }
    #line 504 
    lio_process_ordered_list(oct,1U);
    #line 505 
    octeon_free_sc_done_list(oct);
    #line 506 
    octeon_free_sc_zombie_list(oct);
    #line 509 
    case 10: 
             #line 509 
    ;
    #line 511 
    (*(oct->fn_list.disable_interrupt))(oct,(unsigned char)255);
    #line 513 
    if (oct->msix_on != 0) {
      #line 514 
      msix_entries = (struct msix_entry *)oct->msix_entries;
      #line 515 
      i = 0;
      #line 515 
      while (oct->num_msix_irqs > i) {
        #line 516 
        if ((oct->ioq_vector + (unsigned long)i)->vector != 0) {
          #line 517 
          irq_set_affinity_hint((msix_entries + (unsigned long)i)->vector,(struct cpumask *)0);
          #line 520 
          cif_free_irq((msix_entries + (unsigned long)i)->vector,(void *)(oct->ioq_vector + (unsigned long)i));
          #line 522 
          (oct->ioq_vector + (unsigned long)i)->vector = 0;
        }
        #line 515 
        i ++;
      }
      #line 525 
      pci_disable_msix(oct->pci_dev);
      #line 526 
      kfree(oct->msix_entries);
      #line 527 
      oct->msix_entries = (void *)0;
      #line 528 
      kfree(oct->irq_name_storage);
      #line 529 
      oct->irq_name_storage = (void *)0;
    }
    #line 532 
    if ((unsigned int)(oct->pci_dev)->reset_fn != 0U) 
                                                      #line 533 
                                                      octeon_pci_flr(oct); else 
                                                                    #line 535 
                                                                    cn23xx_vf_ask_pf_to_do_flr(oct);
    #line 538 
    case 9: 
            #line 538 
    ;
    #line 539 
    octeon_free_ioq_vector(oct);
    #line 542 
    case 8: 
            #line 542 
    ;
    #line 543 
    (*(oct->fn_list.free_mbox))(oct);
    #line 546 
    case 16: 
             #line 546 
    ;
    #line 547 
    case 7: 
            #line 547 
    ;
    {
      #line 548 
      unsigned long __ms = 100UL;
      #line 548 
      while (1) {
        #line 548 
        unsigned long tmp_8;
        #line 548 
        tmp_8 = __ms;
        #line 548 
        __ms --;
        #line 548 
        ;
        #line 548 
        if (! (tmp_8 != 0UL)) 
                              #line 548 
                              break;
        #line 548 
        __const_udelay(4295000UL);
      }
    }
    #line 549 
    i = 0;
    #line 549 
    while (1) {
      #line 549 
      int tmp_9;
      #line 549 
      if ((unsigned int)oct->chip_id == 38658U) 
                                                #line 549 
                                                tmp_9 = 64; else 
                                                                 #line 549 
                                                                 tmp_9 = 32;
      #line 549 
      ;
      #line 549 
      if (! (tmp_9 > i)) 
                         #line 549 
                         break;
      #line 550 
      if (((oct->io_qmask.oq >> i) & 1ULL) == 0ULL) 
                                                    #line 551 
                                                    goto __Cont_0;
      #line 552 
      octeon_delete_droq(oct,(unsigned int)i);
      #line 549 
      __Cont_0: 
                #line 549 
      i ++;
    }
    #line 556 
    case 6: 
            #line 556 
    ;
    #line 557 
    octeon_delete_response_list(oct);
    #line 560 
    case 4: 
            #line 560 
    ;
    #line 561 
    i = 0;
    #line 561 
    while (1) {
      #line 561 
      int tmp_10;
      #line 561 
      if ((unsigned int)oct->chip_id == 38658U) 
                                                #line 561 
                                                tmp_10 = 64; else 
                                                                  #line 561 
                                                                  tmp_10 = 32;
      #line 561 
      ;
      #line 561 
      if (! (tmp_10 > i)) 
                          #line 561 
                          break;
      #line 562 
      if (((oct->io_qmask.iq >> i) & 1ULL) == 0ULL) 
                                                    #line 563 
                                                    goto __Cont_1;
      #line 564 
      octeon_delete_instr_queue(oct,(unsigned int)i);
      #line 561 
      __Cont_1: 
                #line 561 
      i ++;
    }
    #line 568 
    case 5: 
            #line 568 
    ;
    #line 569 
    octeon_free_sc_buffer_pool(oct);
    #line 572 
    case 3: 
            #line 572 
    ;
    #line 573 
    octeon_delete_dispatch_list(oct);
    #line 574 
    cancel_delayed_work_sync(& oct->nic_poll_work.work);
    #line 577 
    case 2: 
            #line 577 
    ;
    #line 578 
    octeon_unmap_pci_barx(oct,0);
    #line 579 
    octeon_unmap_pci_barx(oct,1);
    #line 582 
    case 1: 
            #line 582 
    ;
    #line 583 
    pci_clear_master(oct->pci_dev);
    #line 585 
    pci_disable_device(oct->pci_dev);
    #line 588 
    case 0: 
            #line 588 
    ;
    #line 590 
    break;
  }
  #line 593 
  tasklet_kill(& oct_priv->droq_tasklet);
  #line 594 
  return;
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void send_rx_ctrl_cmd(struct lio *lio, int start_stop)
{
  #line 604 
  struct octeon_soft_command *sc;
  #line 605 
  union octnet_cmd *ncmd;
  #line 606 
  int retval;
  #line 603 
  struct octeon_device *oct = lio->oct_dev;
  #line 608 
  if (oct->props[lio->ifidx].rx_on == start_stop) 
                                                  #line 609 
                                                  return;
  #line 611 
  sc = octeon_alloc_soft_command(oct,8U,16U,0U);
  #line 615 
  ncmd = (union octnet_cmd *)sc->virtdptr;
  #line 617 
  ncmd->u64 = 0ULL;
  #line 618 
  ncmd->s.cmd = (unsigned long long)4U;
  #line 619 
  ncmd->s.param1 = (unsigned long long)((unsigned short)start_stop);
  #line 621 
  octeon_swap_8B_data((u64 *)ncmd,1U);
  #line 623 
  sc->iq_no = (unsigned int)lio->linfo.txpciq[0].s.q_no;
  #line 625 
  octeon_prepare_soft_command(oct,sc,(unsigned char)1,(unsigned char)3,0U,0ULL,0ULL);
  #line 628 
  __init_completion(& sc->complete);
  #line 629 
  sc->sc_status = 1U;
  #line 631 
  retval = octeon_send_soft_command(oct,sc);
  #line 632 
  if (retval == -1) {
    #line 633 
    if ((lio->msg_enable & 64U) != 0U) 
                                       #line 633 
                                       netdev_info(lio->netdev,(char *)"Failed to send RX Control message\n");
    #line 634 
    octeon_free_soft_command(oct,sc);
  }
  else {
    #line 639 
    retval = wait_for_sc_completion_timeout(oct,sc,0UL);
    #line 640 
    if (retval != 0) 
                     #line 641 
                     return;
    #line 643 
    oct->props[lio->ifidx].rx_on = start_stop;
    {
      #line 645 
      union __anonunion___u_1778 __u = {.__val = 1};
      #line 644 
      __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
      #line 644 
      int tmp = __u.__val;
    }
  }
  #line 647 
  return;
}

#line 656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void liquidio_destroy_nic_device(struct octeon_device *oct, int ifidx)
{
  #line 687 
  void *__mptr_2;
  #line 687 
  void *__mptr_3;
  #line 661 
  struct napi_struct *napi;
  #line 661 
  struct napi_struct *n;
  #line 662 
  struct lio *lio;
  #line 658 
  struct net_device *netdev = oct->props[ifidx].netdev;
  #line 659 
  struct octeon_device_priv *oct_priv = (struct octeon_device_priv *)oct->priv;
  #line 664 
  if (netdev == (struct net_device *)0) {
    #line 665 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s No netdevice ptr for index %d\n",(char *)"liquidio_destroy_nic_device",ifidx);
    #line 667 
    return;
  }
  #line 670 
  lio = (struct lio *)netdev_priv(netdev);
  {
    #line 672 
    bool branch;
    #line 672 
    struct _ddebug __UNIQUE_ID_ddebug557 = {.modname = (char *)"liquidio_vf", .function = (char *)"liquidio_destroy_nic_device", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c", .format = (char *)"NIC device cleanup\n", .lineno = (unsigned int)672U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 672 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug557.key.dd_key_false.key,(_Bool)0);
    #line 672 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 672 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug557,& (oct->pci_dev)->dev,(char *)"NIC device cleanup\n");
  }
  #line 674 
  if ((atomic_read(& lio->ifstate) & 4) != 0) 
                                              #line 675 
                                              liquidio_stop(netdev);
  #line 677 
  if (oct->props[lio->ifidx].napi_enabled == 1) {
    #line 678 
    void *__mptr;
    #line 678 
    void *__mptr_0;
    #line 678 
    __mptr = (void *)netdev->napi_list.next;
    #line 678 
    napi = ((struct napi_struct *)(__mptr + 18446744073709551264U));
    #line 678 
    __mptr_0 = (void *)napi->dev_list.next;
    #line 679 
    n = ((struct napi_struct *)(__mptr_0 + 18446744073709551264U));
    #line 678 
    while (& napi->dev_list != & netdev->napi_list) {
      #line 678 
      void *__mptr_1;
      #line 679 
      napi_disable(napi);
      #line 678 
      napi = n;
      #line 678 
      __mptr_1 = (void *)n->dev_list.next;
      #line 678 
      n = ((struct napi_struct *)(__mptr_1 + 18446744073709551264U));
    }
    #line 681 
    oct->props[lio->ifidx].napi_enabled = 0;
    #line 683 
    (oct->droq[0])->ops.poll_mode = 0U;
  }
  #line 687 
  __mptr_2 = (void *)netdev->napi_list.next;
  #line 687 
  napi = ((struct napi_struct *)(__mptr_2 + 18446744073709551264U));
  #line 687 
  __mptr_3 = (void *)napi->dev_list.next;
  #line 688 
  n = ((struct napi_struct *)(__mptr_3 + 18446744073709551264U));
  #line 687 
  while (& napi->dev_list != & netdev->napi_list) {
    #line 687 
    void *__mptr_4;
    #line 688 
    netif_napi_del(napi);
    #line 687 
    napi = n;
    #line 687 
    __mptr_4 = (void *)n->dev_list.next;
    #line 687 
    n = ((struct napi_struct *)(__mptr_4 + 18446744073709551264U));
  }
  #line 690 
  tasklet_enable(& oct_priv->droq_tasklet);
  #line 692 
  if ((atomic_read(& lio->ifstate) & 2) != 0) 
                                              #line 693 
                                              cif_unregister_netdev(netdev);
  #line 695 
  cleanup_rx_oom_poll_fn(netdev);
  #line 697 
  cleanup_link_status_change_wq(netdev);
  #line 699 
  lio_delete_glists(lio);
  #line 701 
  cif_free_netdev(netdev);
  #line 703 
  oct->props[ifidx].gmxport = -1;
  #line 705 
  oct->props[ifidx].netdev = (struct net_device *)0;
  #line 706 
  return;
}

#line 712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int liquidio_stop_nic_module(struct octeon_device *oct)
{
  #line 714 
  struct lio *lio;
  #line 715 
  int i;
  #line 715 
  int j;
  {
    #line 717 
    bool branch;
    #line 717 
    struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"liquidio_vf", .function = (char *)"liquidio_stop_nic_module", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c", .format = (char *)"Stopping network interfaces\n", .lineno = (unsigned int)717U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 717 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
    #line 717 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 717 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug558,& (oct->pci_dev)->dev,(char *)"Stopping network interfaces\n");
  }
  #line 718 
  if (oct->ifcount == 0U) {
    #line 719 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Init for Octeon was not completed\n");
    #line 720 
    return 1;
  }
  #line 723 
  cif_spin_lock_bh_cmd_resp_wqlock_of_octeon_device(& oct->cmd_resp_wqlock);
  #line 724 
  oct->cmd_resp_state = 2U;
  #line 725 
  cif_spin_unlock_bh_cmd_resp_wqlock_of_octeon_device(& oct->cmd_resp_wqlock);
  #line 727 
  i = 0;
  #line 727 
  while (oct->ifcount > (unsigned int)i) {
    #line 728 
    lio = (struct lio *)netdev_priv(oct->props[i].netdev);
    #line 729 
    j = 0;
    #line 729 
    while (oct->num_oqs > (unsigned int)j) {
      #line 730 
      octeon_unregister_droq_ops(oct,(unsigned int)lio->linfo.rxpciq[j].s.q_no);
      #line 729 
      j ++;
    }
    #line 727 
    i ++;
  }
  #line 734 
  i = 0;
  #line 734 
  while (oct->ifcount > (unsigned int)i) {
    #line 735 
    liquidio_destroy_nic_device(oct,i);
    #line 734 
    i ++;
  }
  {
    #line 737 
    bool branch_0;
    #line 737 
    struct _ddebug __UNIQUE_ID_ddebug559 = {.modname = (char *)"liquidio_vf", .function = (char *)"liquidio_stop_nic_module", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c", .format = (char *)"Network interfaces stopped\n", .lineno = (unsigned int)737U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 737 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug559.key.dd_key_false.key,(_Bool)0);
    #line 737 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 737 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug559,& (oct->pci_dev)->dev,(char *)"Network interfaces stopped\n");
  }
  #line 738 
  return 0;
}

#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void liquidio_vf_remove(struct pci_dev *pdev)
{
  #line 747 
  struct octeon_device *oct_dev = pci_get_drvdata(pdev);
  {
    #line 749 
    bool branch;
    #line 749 
    struct _ddebug __UNIQUE_ID_ddebug560 = {.modname = (char *)"liquidio_vf", .function = (char *)"liquidio_vf_remove", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c", .format = (char *)"Stopping device\n", .lineno = (unsigned int)749U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 749 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug560.key.dd_key_false.key,(_Bool)0);
    #line 749 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 749 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug560,& (oct_dev->pci_dev)->dev,(char *)"Stopping device\n");
  }
  #line 751 
  if (oct_dev->app_mode == 1U) 
                               #line 752 
                               liquidio_stop_nic_module(oct_dev);
  #line 757 
  octeon_destroy_resources(oct_dev);
  #line 759 
  _dev_info(& (oct_dev->pci_dev)->dev,(char *)"Device removed\n");
  #line 764 
  octeon_free_device_mem(oct_dev);
  #line 765 
  return;
}

#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int octeon_pci_os_setup(struct octeon_device *oct)
{
  #line 775 
  if ((oct->pci_dev)->__anonCompField_pci_dev_59.physfn == (struct pci_dev *)0) 
    #line 776 
    octeon_pci_flr(oct);
  #line 779 
  if (pci_enable_device(oct->pci_dev) != 0) {
    #line 780 
    _dev_err(& (oct->pci_dev)->dev,(char *)"pci_enable_device failed\n");
    #line 781 
    return 1;
  }
  #line 784 
  if (dma_set_mask_and_coherent(& (oct->pci_dev)->dev,
                                  18446744073709551615ULL) != 0) {
    #line 785 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Unexpected DMA device capability\n");
    #line 786 
    pci_disable_device(oct->pci_dev);
    #line 787 
    return 1;
  }
  #line 791 
  pci_set_master(oct->pci_dev);
  #line 793 
  return 0;
}

#line 800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void free_netbuf(void *buf)
{
  #line 802 
  struct octnet_buf_free_info *finfo;
  #line 803 
  struct sk_buff *skb;
  #line 804 
  struct lio *lio;
  #line 806 
  finfo = (struct octnet_buf_free_info *)buf;
  #line 807 
  skb = finfo->skb;
  #line 808 
  lio = finfo->lio;
  #line 810 
  dma_unmap_single_attrs(& ((lio->oct_dev)->pci_dev)->dev,finfo->dptr,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 813 
  tx_buffer_free((void *)skb);
  #line 814 
  return;
}

#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void free_netsgbuf(void *buf)
{
  #line 822 
  struct octnet_buf_free_info *finfo;
  #line 823 
  struct octnic_gather *g;
  #line 824 
  struct sk_buff *skb;
  #line 825 
  int i;
  #line 825 
  int frags;
  #line 825 
  int iq;
  #line 826 
  struct lio *lio;
  #line 828 
  finfo = (struct octnet_buf_free_info *)buf;
  #line 829 
  skb = finfo->skb;
  #line 830 
  lio = finfo->lio;
  #line 831 
  g = finfo->g;
  #line 832 
  frags = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 834 
  dma_unmap_single_attrs(& ((lio->oct_dev)->pci_dev)->dev,(g->sg)->ptr[0],(unsigned long)(skb->len - skb->data_len),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 838 
  i = 1;
  #line 839 
  while (1) {
    #line 839 
    int tmp_2;
    #line 839 
    tmp_2 = frags;
    #line 839 
    frags --;
    #line 839 
    ;
    #line 839 
    if (! (tmp_2 != 0)) 
                        #line 839 
                        break;
    {
      #line 840 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i + -1];
      #line 842 
      ;
      #line 842 
      ;
      #line 842 
      pci_unmap_page((lio->oct_dev)->pci_dev,(g->sg + (unsigned long)(i >> 2))->ptr[i & 3],(unsigned long)skb_frag_size(frag),1);
      #line 845 
      i ++;
    }
  }
  #line 848 
  iq = skb_iq(lio->oct_dev,skb);
  #line 850 
  cif_spin_lock_NOT_ARG_SIGN(lio->glist_lock + (unsigned long)iq);
  #line 851 
  list_add_tail(& g->list,lio->glist + (unsigned long)iq);
  #line 852 
  cif_spin_unlock_NOT_ARG_SIGN(lio->glist_lock + (unsigned long)iq);
  #line 854 
  tx_buffer_free((void *)skb);
  #line 855 
  return;
}

#line 861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void free_netsgbuf_with_resp(void *buf)
{
  #line 863 
  struct octnet_buf_free_info *finfo;
  #line 864 
  struct octeon_soft_command *sc;
  #line 865 
  struct octnic_gather *g;
  #line 866 
  struct sk_buff *skb;
  #line 867 
  int i;
  #line 867 
  int frags;
  #line 867 
  int iq;
  #line 868 
  struct lio *lio;
  #line 870 
  sc = (struct octeon_soft_command *)buf;
  #line 871 
  skb = (struct sk_buff *)sc->callback_arg;
  #line 872 
  finfo = (struct octnet_buf_free_info *)(& skb->cb);
  #line 874 
  lio = finfo->lio;
  #line 875 
  g = finfo->g;
  #line 876 
  frags = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 878 
  dma_unmap_single_attrs(& ((lio->oct_dev)->pci_dev)->dev,(g->sg)->ptr[0],(unsigned long)(skb->len - skb->data_len),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 882 
  i = 1;
  #line 883 
  while (1) {
    #line 883 
    int tmp_2;
    #line 883 
    tmp_2 = frags;
    #line 883 
    frags --;
    #line 883 
    ;
    #line 883 
    if (! (tmp_2 != 0)) 
                        #line 883 
                        break;
    {
      #line 884 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i + -1];
      #line 886 
      ;
      #line 886 
      ;
      #line 886 
      pci_unmap_page((lio->oct_dev)->pci_dev,(g->sg + (unsigned long)(i >> 2))->ptr[i & 3],(unsigned long)skb_frag_size(frag),1);
      #line 889 
      i ++;
    }
  }
  #line 892 
  iq = skb_iq(lio->oct_dev,skb);
  #line 894 
  cif_spin_lock_NOT_ARG_SIGN(lio->glist_lock + (unsigned long)iq);
  #line 895 
  list_add_tail(& g->list,lio->glist + (unsigned long)iq);
  #line 896 
  cif_spin_unlock_NOT_ARG_SIGN(lio->glist_lock + (unsigned long)iq);
  #line 897 
  return;
}

#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int liquidio_open(struct net_device *netdev)
{
  #line 911 
  struct napi_struct *napi;
  #line 911 
  struct napi_struct *n;
  #line 907 
  struct lio *lio = netdev_priv(netdev);
  #line 908 
  struct octeon_device *oct = lio->oct_dev;
  #line 909 
  struct octeon_device_priv *oct_priv = (struct octeon_device_priv *)oct->priv;
  #line 913 
  if (oct->props[lio->ifidx].napi_enabled == 0) {
    #line 916 
    void *__mptr;
    #line 916 
    void *__mptr_0;
    #line 914 
    tasklet_disable(& oct_priv->droq_tasklet);
    #line 916 
    __mptr = (void *)netdev->napi_list.next;
    #line 916 
    napi = ((struct napi_struct *)(__mptr + 18446744073709551264U));
    #line 916 
    __mptr_0 = (void *)napi->dev_list.next;
    #line 917 
    n = ((struct napi_struct *)(__mptr_0 + 18446744073709551264U));
    #line 916 
    while (& napi->dev_list != & netdev->napi_list) {
      #line 916 
      void *__mptr_1;
      #line 917 
      napi_enable(napi);
      #line 916 
      napi = n;
      #line 916 
      __mptr_1 = (void *)n->dev_list.next;
      #line 916 
      n = ((struct napi_struct *)(__mptr_1 + 18446744073709551264U));
    }
    #line 919 
    oct->props[lio->ifidx].napi_enabled = 1;
    #line 921 
    (oct->droq[0])->ops.poll_mode = 1U;
  }
  #line 924 
  ifstate_set(lio,4);
  #line 927 
  lio->intf_open = 1U;
  #line 929 
  if ((lio->msg_enable & 32U) != 0U) 
                                     #line 929 
                                     netdev_info(lio->netdev,(char *)"Interface Open, ready for traffic\n");
  #line 930 
  start_txqs(netdev);
  {
    #line 932 
    struct lock_class_key __key;
    #line 932 
    __init_work(& lio->stats_wk.work.work,0);
    #line 932 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 932 
    lio->stats_wk.work.work.data = __constr_expr_45;
    #line 932 
    lockdep_init_map(& lio->stats_wk.work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 932 
    INIT_LIST_HEAD(& lio->stats_wk.work.work.entry);
    #line 932 
    lio->stats_wk.work.work.func = & lio_fetch_stats;
  }
  {
    #line 932 
    struct lock_class_key __key_0;
    #line 932 
    init_timer_key(& lio->stats_wk.work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&lio->stats_wk.work)->timer",& __key_0);
  }
  #line 933 
  lio->stats_wk.ctxptr = (void *)lio;
  #line 934 
  ;
  #line 934 
  cif_schedule_delayed_work(& lio->stats_wk.work,msecs_to_jiffies(200U));
  #line 938 
  send_rx_ctrl_cmd(lio,1);
  #line 940 
  _dev_info(& (oct->pci_dev)->dev,(char *)"%s interface is opened\n",(char *)(& netdev->name));
  #line 942 
  return 0;
}

#line 949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int liquidio_stop(struct net_device *netdev)
{
  #line 955 
  struct napi_struct *napi;
  #line 955 
  struct napi_struct *n;
  #line 951 
  struct lio *lio = netdev_priv(netdev);
  #line 952 
  struct octeon_device *oct = lio->oct_dev;
  #line 953 
  struct octeon_device_priv *oct_priv = (struct octeon_device_priv *)oct->priv;
  #line 958 
  send_rx_ctrl_cmd(lio,0);
  #line 960 
  if ((lio->msg_enable & 16U) != 0U) 
                                     #line 960 
                                     netdev_info(lio->netdev,(char *)"Stopping interface!\n");
  #line 962 
  lio->intf_open = 0U;
  #line 963 
  lio->linfo.link.s.link_up = (unsigned long long)0U;
  #line 965 
  netif_carrier_off(netdev);
  #line 966 
  (lio->link_changes) ++;
  #line 968 
  ifstate_reset(lio,4);
  #line 970 
  stop_txqs(netdev);
  #line 973 
  if (lio_wait_for_clean_oq(oct) != 0) 
    #line 974 
    if ((lio->msg_enable & 64U) != 0U) 
                                       #line 974 
                                       netdev_info(lio->netdev,(char *)"Proceeding with stop interface after partial RX desc processing\n");
  #line 977 
  if (oct->props[lio->ifidx].napi_enabled == 1) {
    #line 978 
    void *__mptr_0;
    #line 978 
    void *__mptr;
    #line 978 
    __mptr = (void *)netdev->napi_list.next;
    #line 978 
    napi = ((struct napi_struct *)(__mptr + 18446744073709551264U));
    #line 978 
    __mptr_0 = (void *)napi->dev_list.next;
    #line 979 
    n = ((struct napi_struct *)(__mptr_0 + 18446744073709551264U));
    #line 978 
    while (& napi->dev_list != & netdev->napi_list) {
      #line 978 
      void *__mptr_1;
      #line 979 
      napi_disable(napi);
      #line 978 
      napi = n;
      #line 978 
      __mptr_1 = (void *)n->dev_list.next;
      #line 978 
      n = ((struct napi_struct *)(__mptr_1 + 18446744073709551264U));
    }
    #line 981 
    oct->props[lio->ifidx].napi_enabled = 0;
    #line 983 
    (oct->droq[0])->ops.poll_mode = 0U;
    #line 985 
    tasklet_enable(& oct_priv->droq_tasklet);
  }
  #line 988 
  cancel_delayed_work_sync(& lio->stats_wk.work);
  #line 990 
  _dev_info(& (oct->pci_dev)->dev,(char *)"%s interface is stopped\n",(char *)(& netdev->name));
  #line 992 
  return 0;
}

#line 1002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static enum octnet_ifflags get_new_flags(struct net_device *netdev)
{
  #line 1004 
  enum octnet_ifflags f = OCTNET_IFFLAG_UNICAST;
  #line 1006 
  if ((netdev->flags & 256U) != 0U) 
                                    #line 1007 
                                    f = (enum octnet_ifflags)((unsigned int)f | 1U);
  #line 1009 
  if ((netdev->flags & 512U) != 0U) 
                                    #line 1010 
                                    f = (enum octnet_ifflags)((unsigned int)f | 2U);
  #line 1012 
  if ((netdev->flags & 4096U) != 0U) {
    #line 1013 
    f = (enum octnet_ifflags)((unsigned int)f | 4U);
    #line 1018 
    if (netdev->mc.count > 32) 
                               #line 1019 
                               f = (enum octnet_ifflags)((unsigned int)f | 2U);
  }
  #line 1022 
  if ((netdev->flags & 2U) != 0U) 
                                  #line 1023 
                                  f = (enum octnet_ifflags)((unsigned int)f | 8U);
  #line 1025 
  return f;
}

#line 1028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void liquidio_set_uc_list(struct net_device *netdev)
{
  #line 1056 
  void *__mptr;
  #line 1032 
  struct octnic_ctrl_pkt nctrl;
  #line 1033 
  struct netdev_hw_addr *ha;
  #line 1034 
  u64 *mac;
  #line 1030 
  struct lio *lio = netdev_priv(netdev);
  #line 1031 
  struct octeon_device *oct = lio->oct_dev;
  #line 1036 
  if (lio->netdev_uc_count == netdev->uc.count) 
                                                #line 1037 
                                                return;
  #line 1039 
  if (netdev->uc.count > 32) {
    #line 1040 
    _dev_err(& (oct->pci_dev)->dev,(char *)"too many MAC addresses in netdev uc list\n");
    #line 1041 
    return;
  }
  #line 1044 
  lio->netdev_uc_count = netdev->uc.count;
  #line 1046 
  memset((void *)(& nctrl),0,328UL);
  #line 1047 
  nctrl.ncmd.s.cmd = (unsigned long long)27U;
  #line 1048 
  nctrl.ncmd.s.more = (unsigned long long)lio->netdev_uc_count;
  #line 1049 
  nctrl.ncmd.s.param1 = (unsigned long long)oct->vf_num;
  #line 1050 
  nctrl.iq_no = (unsigned long long)lio->linfo.txpciq[0].s.q_no;
  #line 1051 
  nctrl.netpndev = (unsigned long long)netdev;
  #line 1052 
  nctrl.cb_fn = & liquidio_link_ctrl_cmd_completion;
  #line 1055 
  mac = & nctrl.udd[0];
  #line 1056 
  __mptr = (void *)netdev->uc.list.next;
  #line 1056 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 1056 
  while (& ha->list != & netdev->uc.list) {
    #line 1056 
    void *__mptr_0;
    #line 1057 
    ether_addr_copy((u8 *)mac + 2U,(u8 *)(& ha->addr));
    #line 1058 
    mac ++;
    #line 1056 
    __mptr_0 = (void *)ha->list.next;
    #line 1056 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 1061 
  octnet_send_nic_ctrl_pkt(lio->oct_dev,& nctrl);
  #line 1062 
  return;
}

#line 1068  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void liquidio_set_mcast_list(struct net_device *netdev)
{
  #line 1070 
  int __UNIQUE_ID___x561;
  #line 1070 
  int tmp;
  #line 1091 
  void *__mptr;
  #line 1073 
  struct octnic_ctrl_pkt nctrl;
  #line 1074 
  struct netdev_hw_addr *ha;
  #line 1075 
  u64 *mc;
  #line 1076 
  int ret;
  {
    #line 1070 
    __UNIQUE_ID___x561 = netdev->mc.count;
    #line 1070 
    int __UNIQUE_ID___y562 = 32;
    #line 1070 
    if (__UNIQUE_ID___x561 < __UNIQUE_ID___y562) 
                                                 #line 1070 
                                                 tmp = __UNIQUE_ID___x561; else 
                                                                    #line 1070 
                                                                    tmp = __UNIQUE_ID___y562;
    }
  #line 1070 
  int mc_count = tmp;
  #line 1071 
  struct lio *lio = netdev_priv(netdev);
  #line 1072 
  struct octeon_device *oct = lio->oct_dev;
  #line 1078 
  memset((void *)(& nctrl),0,328UL);
  #line 1081 
  nctrl.ncmd.u64 = 0ULL;
  #line 1082 
  nctrl.ncmd.s.cmd = (unsigned long long)5U;
  #line 1083 
  nctrl.ncmd.s.param1 = (unsigned long long)((unsigned short)get_new_flags(netdev));
  #line 1084 
  nctrl.ncmd.s.param2 = (unsigned long long)((unsigned char)mc_count);
  #line 1085 
  nctrl.ncmd.s.more = (unsigned long long)mc_count;
  #line 1086 
  nctrl.netpndev = (unsigned long long)netdev;
  #line 1087 
  nctrl.cb_fn = & liquidio_link_ctrl_cmd_completion;
  #line 1090 
  mc = & nctrl.udd[0];
  #line 1091 
  __mptr = (void *)netdev->mc.list.next;
  #line 1091 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 1091 
  while (& ha->list != & netdev->mc.list) {
    #line 1091 
    void *__mptr_0;
    #line 1092 
    *mc = 0ULL;
    #line 1093 
    ether_addr_copy((u8 *)mc + 2U,(u8 *)(& ha->addr));
    #line 1095 
    mc ++;
    #line 1095 
    ;
    #line 1095 
    if (mc > & nctrl.udd[mc_count]) 
                                    #line 1096 
                                    break;
    #line 1091 
    __mptr_0 = (void *)ha->list.next;
    #line 1091 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 1099 
  nctrl.iq_no = (unsigned long long)lio->linfo.txpciq[0].s.q_no;
  #line 1105 
  ret = octnet_send_nic_ctrl_pkt(lio->oct_dev,& nctrl);
  #line 1106 
  if (ret != 0) 
                #line 1107 
                _dev_err(& (oct->pci_dev)->dev,(char *)"DEVFLAGS change failed in core (ret: 0x%x)\n",ret);
  #line 1111 
  liquidio_set_uc_list(netdev);
  #line 1112 
  return;
}

#line 1118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int liquidio_set_mac(struct net_device *netdev, void *p)
{
  #line 1123 
  struct octnic_ctrl_pkt nctrl;
  #line 1120 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 1121 
  struct lio *lio = netdev_priv(netdev);
  #line 1122 
  struct octeon_device *oct = lio->oct_dev;
  #line 1124 
  int ret = 0;
  #line 1126 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 1127 
                                                      return -99;
  #line 1129 
  if ((int)ether_addr_equal((u8 *)(& addr->sa_data),netdev->dev_addr) != 0) 
    #line 1130 
    return 0;
  #line 1132 
  if ((unsigned int)lio->linfo.macaddr_is_admin_asgnd != 0U) 
                                                             #line 1133 
                                                             return -1;
  #line 1135 
  memset((void *)(& nctrl),0,328UL);
  #line 1137 
  nctrl.ncmd.u64 = 0ULL;
  #line 1138 
  nctrl.ncmd.s.cmd = (unsigned long long)2U;
  #line 1139 
  nctrl.ncmd.s.param1 = (unsigned long long)0U;
  #line 1140 
  nctrl.ncmd.s.more = (unsigned long long)1U;
  #line 1141 
  nctrl.iq_no = (unsigned long long)lio->linfo.txpciq[0].s.q_no;
  #line 1142 
  nctrl.netpndev = (unsigned long long)netdev;
  #line 1144 
  nctrl.udd[0] = 0ULL;
  #line 1146 
  ether_addr_copy((u8 *)(& nctrl.udd[0]) + 2U,(u8 *)(& addr->sa_data));
  #line 1148 
  ret = octnet_send_nic_ctrl_pkt(lio->oct_dev,& nctrl);
  #line 1149 
  if (ret < 0) {
    #line 1150 
    _dev_err(& (oct->pci_dev)->dev,(char *)"MAC Address change failed\n");
    #line 1151 
    return -12;
  }
  #line 1154 
  if (nctrl.sc_status == 65548U) {
    #line 1156 
    _dev_err(& (oct->pci_dev)->dev,(char *)"MAC Address change failed: no permission\n");
    #line 1157 
    return -1;
  }
  #line 1160 
  memcpy((void *)netdev->dev_addr,(void *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  #line 1161 
  ether_addr_copy((u8 *)(& lio->linfo.hw_addr) + 2U,(u8 *)(& addr->sa_data));
  #line 1163 
  return 0;
}

#line 1167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void liquidio_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *lstats)
{
  #line 1171 
  struct octeon_device *oct;
  #line 1173 
  struct oct_droq_stats *oq_stats;
  #line 1174 
  struct oct_iq_stats *iq_stats;
  #line 1175 
  int i;
  #line 1175 
  int iq_no;
  #line 1175 
  int oq_no;
  #line 1170 
  struct lio *lio = netdev_priv(netdev);
  #line 1172 
  u64 pkts = 0ULL;
  #line 1172 
  u64 drop = 0ULL;
  #line 1172 
  u64 bytes = 0ULL;
  #line 1177 
  oct = lio->oct_dev;
  #line 1179 
  if (ifstate_check(lio,16) != 0) 
                                  #line 1180 
                                  return;
  #line 1182 
  i = 0;
  #line 1182 
  while (oct->num_iqs > (unsigned int)i) {
    #line 1183 
    iq_no = (int)lio->linfo.txpciq[i].s.q_no;
    #line 1184 
    iq_stats = & (oct->instr_queue[iq_no])->stats;
    #line 1185 
    pkts = iq_stats->tx_done + pkts;
    #line 1186 
    drop = iq_stats->tx_dropped + drop;
    #line 1187 
    bytes = iq_stats->tx_tot_bytes + bytes;
    #line 1182 
    i ++;
  }
  #line 1190 
  lstats->tx_packets = pkts;
  #line 1191 
  lstats->tx_bytes = bytes;
  #line 1192 
  lstats->tx_dropped = drop;
  #line 1194 
  pkts = 0ULL;
  #line 1195 
  drop = 0ULL;
  #line 1196 
  bytes = 0ULL;
  #line 1198 
  i = 0;
  #line 1198 
  while (oct->num_oqs > (unsigned int)i) {
    #line 1199 
    oq_no = (int)lio->linfo.rxpciq[i].s.q_no;
    #line 1200 
    oq_stats = & (oct->droq[oq_no])->stats;
    #line 1201 
    pkts = oq_stats->rx_pkts_received + pkts;
    #line 1202 
    drop = (((oq_stats->rx_dropped + oq_stats->dropped_nodispatch) + oq_stats->dropped_toomany) + oq_stats->dropped_nomem) + drop;
    #line 1206 
    bytes = oq_stats->rx_bytes_received + bytes;
    #line 1198 
    i ++;
  }
  #line 1209 
  lstats->rx_bytes = bytes;
  #line 1210 
  lstats->rx_packets = pkts;
  #line 1211 
  lstats->rx_dropped = drop;
  #line 1213 
  lstats->multicast = oct->link_stats.fromwire.fw_total_mcast;
  #line 1216 
  lstats->rx_length_errors = oct->link_stats.fromwire.l2_err;
  #line 1218 
  lstats->rx_crc_errors = oct->link_stats.fromwire.fcs_err;
  #line 1220 
  lstats->rx_frame_errors = oct->link_stats.fromwire.frame_err;
  #line 1222 
  lstats->rx_errors = (lstats->rx_length_errors + lstats->rx_crc_errors) + lstats->rx_frame_errors;
  #line 1226 
  lstats->tx_aborted_errors = oct->link_stats.fromhost.fw_err_pko;
  #line 1227 
  lstats->tx_carrier_errors = oct->link_stats.fromhost.fw_err_link;
  #line 1229 
  lstats->tx_errors = lstats->tx_aborted_errors + lstats->tx_carrier_errors;
  #line 1231 
  return;
}

#line 1239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int hwtstamp_ioctl(struct net_device *netdev, struct ifreq *ifr)
{
  #line 1242 
  struct hwtstamp_config conf;
  #line 1288 
  int tmp_2;
  #line 1241 
  struct lio *lio = netdev_priv(netdev);
  #line 1244 
  if (copy_from_user((void *)(& conf),ifr->ifr_ifru.ifru_data,12UL) != 0UL) 
    #line 1245 
    return -14;
  #line 1247 
  if (conf.flags != 0) 
                       #line 1248 
                       return -22;
  #line 1250 
  switch (conf.tx_type) {
    #line 1251 
    case 1: 
            #line 1251 
    ;
    #line 1252 
    case 0: 
            #line 1252 
    ;
    #line 1253 
    break;
    #line 1254 
    default: 
             #line 1254 
    ;
    #line 1255 
    return -34;
  }
  #line 1258 
  switch (conf.rx_filter) {
    #line 1259 
    case 0: 
            #line 1259 
    ;
    #line 1260 
    break;
    #line 1261 
    case 1: 
            #line 1261 
    ;
    #line 1262 
    case 2: 
            #line 1262 
    ;
    #line 1263 
    case 3: 
            #line 1263 
    ;
    #line 1264 
    case 4: 
            #line 1264 
    ;
    #line 1265 
    case 5: 
            #line 1265 
    ;
    #line 1266 
    case 6: 
            #line 1266 
    ;
    #line 1267 
    case 7: 
            #line 1267 
    ;
    #line 1268 
    case 8: 
            #line 1268 
    ;
    #line 1269 
    case 9: 
            #line 1269 
    ;
    #line 1270 
    case 10: 
             #line 1270 
    ;
    #line 1271 
    case 11: 
             #line 1271 
    ;
    #line 1272 
    case 12: 
             #line 1272 
    ;
    #line 1273 
    case 13: 
             #line 1273 
    ;
    #line 1274 
    case 14: 
             #line 1274 
    ;
    #line 1275 
    case 15: 
             #line 1275 
    ;
    #line 1276 
    conf.rx_filter = 1;
    #line 1277 
    break;
    #line 1278 
    default: 
             #line 1278 
    ;
    #line 1279 
    return -34;
  }
  #line 1282 
  if (conf.rx_filter == 1) 
                           #line 1283 
                           ifstate_set(lio,8); else 
                                                    #line 1286 
                                                    ifstate_reset(lio,8);
  #line 1288 
  if (copy_to_user(ifr->ifr_ifru.ifru_data,(void *)(& conf),12UL) != 0UL) 
    #line 1288 
    tmp_2 = -14; else 
                      #line 1288 
                      tmp_2 = 0;
  #line 1288 
  return tmp_2;
}

#line 1297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int liquidio_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd)
{
  #line 1299 
  switch (cmd) {
    #line 1300 
    case 35248: 
                #line 1300 
    ;
    #line 1301 
    return hwtstamp_ioctl(netdev,ifr);
    #line 1302 
    default: 
             #line 1302 
    ;
    #line 1303 
    return -95;
  }
}

#line 1307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void handle_timestamp(struct octeon_device *oct, u32 status, void *buf)
{
  #line 1310 
  struct octnet_buf_free_info *finfo;
  #line 1311 
  struct oct_timestamp_resp *resp;
  #line 1312 
  struct octeon_soft_command *sc;
  #line 1313 
  struct lio *lio;
  #line 1309 
  struct sk_buff *skb = (struct sk_buff *)buf;
  #line 1315 
  finfo = (struct octnet_buf_free_info *)(& skb->cb);
  #line 1316 
  lio = finfo->lio;
  #line 1317 
  sc = finfo->sc;
  #line 1318 
  oct = lio->oct_dev;
  #line 1319 
  resp = (struct oct_timestamp_resp *)sc->virtrptr;
  #line 1321 
  if (status != 0U) {
    #line 1322 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Tx timestamp instruction failed. Status: %llx\n",(long long)status);
    #line 1324 
    resp->timestamp = 0ULL;
  }
  #line 1327 
  octeon_swap_8B_data(& resp->timestamp,1U);
  #line 1329 
  ;
  #line 1329 
  if ((long)(((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 4) != 0) != 0L) {
    #line 1330 
    struct skb_shared_hwtstamps ts;
    #line 1331 
    u64 ns = resp->timestamp;
    #line 1333 
    if ((lio->msg_enable & 1024U) != 0U) 
                                         #line 1333 
                                         netdev_info(lio->netdev,(char *)"Got resulting SKBTX_HW_TSTAMP skb=%p ns=%016llu\n",skb,ns);
    #line 1336 
    ts.hwtstamp = ns_to_ktime((unsigned long long)lio->ptp_adjust + ns);
    #line 1337 
    skb_tstamp_tx(skb,& ts);
  }
  #line 1340 
  octeon_free_soft_command(oct,sc);
  #line 1341 
  tx_buffer_free((void *)skb);
  #line 1342 
  return;
}

#line 1349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int send_nic_timestamp_pkt(struct octeon_device *oct, struct octnic_data_pkt *ndata, struct octnet_buf_free_info *finfo, int xmit_more)
{
  #line 1354 
  struct octeon_soft_command *sc;
  #line 1355 
  int ring_doorbell_0;
  #line 1356 
  struct lio *lio;
  #line 1357 
  int retval;
  #line 1358 
  u32 len;
  #line 1360 
  lio = finfo->lio;
  #line 1362 
  sc = (struct octeon_soft_command *)octeon_alloc_soft_command_resp(oct,& ndata->cmd,24U);
  #line 1364 
  finfo->sc = sc;
  #line 1366 
  if (sc == (struct octeon_soft_command *)0) {
    #line 1367 
    _dev_err(& (oct->pci_dev)->dev,(char *)"No memory for timestamped data packet\n");
    #line 1368 
    return -1;
  }
  #line 1371 
  if (ndata->reqtype == 1U) 
                            #line 1372 
                            ndata->reqtype = 3U;
  else 
    #line 1373 
    if (ndata->reqtype == 2U) 
                              #line 1374 
                              ndata->reqtype = 4U;
  #line 1376 
  sc->callback = & handle_timestamp;
  #line 1377 
  sc->callback_arg = (void *)finfo->skb;
  #line 1378 
  sc->iq_no = ndata->q_no;
  #line 1380 
  len = (unsigned int)((struct octeon_instr_ih3 *)(& sc->cmd.cmd3.ih3))->dlengsz;
  #line 1382 
  ring_doorbell_0 = xmit_more == 0;
  #line 1384 
  retval = octeon_send_command(oct,sc->iq_no,(unsigned int)ring_doorbell_0,(void *)(& sc->cmd),(void *)sc,len,ndata->reqtype);
  #line 1387 
  if (retval == -1) {
    #line 1388 
    _dev_err(& (oct->pci_dev)->dev,(char *)"timestamp data packet failed status: %x\n",retval);
    #line 1390 
    octeon_free_soft_command(oct,sc);
  }
  else 
    #line 1392 
    if ((lio->msg_enable & 256U) != 0U) 
                                        #line 1392 
                                        netdev_info(lio->netdev,(char *)"Queued timestamp packet\n");
  #line 1395 
  return retval;
}

#line 1404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static netdev_tx_t liquidio_xmit(struct sk_buff *skb, struct net_device *netdev)
{
  #line 1406 
  struct octnet_buf_free_info *finfo;
  #line 1407 
  union octnic_cmd_setup cmdsetup;
  #line 1408 
  struct octnic_data_pkt ndata;
  #line 1409 
  struct octeon_instr_irh *irh;
  #line 1410 
  struct oct_iq_stats *stats;
  #line 1411 
  struct octeon_device *oct;
  #line 1413 
  union tx_info *tx_info;
  #line 1415 
  struct lio *lio;
  #line 1419 
  int j;
  #line 1412 
  int q_idx = 0;
  #line 1412 
  int iq_no = 0;
  #line 1414 
  int xmit_more = 0;
  #line 1416 
  int status = 0;
  #line 1417 
  u64 dptr = 0ULL;
  #line 1418 
  u32 tag = 0U;
  #line 1421 
  lio = (struct lio *)netdev_priv(netdev);
  #line 1422 
  oct = lio->oct_dev;
  #line 1424 
  q_idx = skb_iq(lio->oct_dev,skb);
  #line 1425 
  tag = (unsigned int)q_idx;
  #line 1426 
  iq_no = (int)lio->linfo.txpciq[q_idx].s.q_no;
  #line 1428 
  stats = & (oct->instr_queue[iq_no])->stats;
  #line 1433 
  if ((atomic_read(& lio->ifstate) & 4) == 0) 
                                              #line 1433 
                                              goto _LOR;
  else 
    #line 1433 
    if ((unsigned int)lio->linfo.link.s.link_up == 0U) 
                                                       #line 1433 
                                                       goto _LOR;
    else 
      #line 1434 
      if (skb->len == 0U) {
        #line 1433 
        _LOR: {
                #line 1435 
                if ((lio->msg_enable & 128U) != 0U) 
                                                    #line 1435 
                                                    netdev_info(lio->netdev,(char *)"Transmit failed link_status : %d\n",(int)lio->linfo.link.s.link_up);
                #line 1437 
                goto lio_xmit_failed;
              }
      }
  #line 1443 
  finfo = (struct octnet_buf_free_info *)(& skb->cb);
  #line 1444 
  finfo->lio = lio;
  #line 1445 
  finfo->skb = skb;
  #line 1446 
  finfo->sc = (struct octeon_soft_command *)0;
  #line 1449 
  memset((void *)(& ndata),0,88UL);
  #line 1451 
  ndata.buf = (void *)finfo;
  #line 1453 
  ndata.q_no = (unsigned int)iq_no;
  #line 1455 
  if (octnet_iq_is_full(oct,ndata.q_no) != 0) {
    #line 1457 
    if ((lio->msg_enable & 128U) != 0U) 
                                        #line 1457 
                                        netdev_info(lio->netdev,(char *)"Transmit failed iq:%d full\n",ndata.q_no);
    #line 1459 
    (stats->tx_iq_busy) ++;
    #line 1460 
    return NETDEV_TX_BUSY;
  }
  #line 1463 
  ndata.datasize = skb->len;
  #line 1465 
  cmdsetup.u64 = 0ULL;
  #line 1466 
  cmdsetup.s.iq_no = (unsigned int)((unsigned char)iq_no);
  #line 1468 
  if ((unsigned int)skb->ip_summed == 3U) 
    #line 1469 
    if ((unsigned int)skb->encapsulation != 0U) {
      #line 1470 
      cmdsetup.s.tnl_csum = (unsigned int)1U;
      #line 1471 
      (stats->tx_vxlan) ++;
    }
    else 
         #line 1473 
         cmdsetup.s.transport_csum = (unsigned int)1U;
  #line 1476 
  ;
  #line 1476 
  if ((long)(((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 1) != 0) != 0L) {
    #line 1477 
    ((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags = (unsigned char)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags | 4U);
    #line 1478 
    cmdsetup.s.timestamp = (unsigned int)1U;
  }
  #line 1481 
  ;
  #line 1481 
  if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags == 0U) {
    #line 1482 
    cmdsetup.s.u.datasize = skb->len;
    #line 1483 
    octnet_prepare_pci_cmd(oct,& ndata.cmd,& cmdsetup,tag);
    #line 1485 
    dptr = dma_map_single_attrs(& (oct->pci_dev)->dev,(void *)skb->data,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 1489 
    if (dma_mapping_error(& (oct->pci_dev)->dev,dptr) != 0) {
      #line 1490 
      _dev_err(& (oct->pci_dev)->dev,(char *)"%s DMA mapping error 1\n",(char *)"liquidio_xmit");
      #line 1492 
      return NETDEV_TX_BUSY;
    }
    #line 1495 
    ndata.cmd.cmd3.dptr = dptr;
    #line 1496 
    finfo->dptr = dptr;
    #line 1497 
    ndata.reqtype = 1U;
  }
  else {
    #line 1500 
    skb_frag_t *frag;
    #line 1501 
    struct octnic_gather *g;
    #line 1502 
    int i;
    #line 1502 
    int frags;
    #line 1504 
    cif_spin_lock_NOT_ARG_SIGN(lio->glist_lock + (unsigned long)q_idx);
    #line 1505 
    g = (struct octnic_gather *)lio_list_delete_head(lio->glist + (unsigned long)q_idx);
    #line 1507 
    cif_spin_unlock_NOT_ARG_SIGN(lio->glist_lock + (unsigned long)q_idx);
    #line 1509 
    if (g == (struct octnic_gather *)0) {
      #line 1510 
      if ((lio->msg_enable & 128U) != 0U) 
                                          #line 1510 
                                          netdev_info(lio->netdev,(char *)"Transmit scatter gather: glist null!\n");
      #line 1512 
      goto lio_xmit_failed;
    }
    #line 1515 
    cmdsetup.s.gather = (unsigned int)1U;
    #line 1516 
    cmdsetup.s.u.gatherptrs = (unsigned int)((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1);
    #line 1517 
    octnet_prepare_pci_cmd(oct,& ndata.cmd,& cmdsetup,tag);
    #line 1519 
    memset((void *)g->sg,0,(unsigned long)g->sg_size);
    #line 1521 
    (g->sg)->ptr[0] = dma_map_single_attrs(& (oct->pci_dev)->dev,(void *)skb->data,(unsigned long)(skb->len - skb->data_len),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 1525 
    if (dma_mapping_error(& (oct->pci_dev)->dev,(g->sg)->ptr[0]) != 0) {
      #line 1526 
      _dev_err(& (oct->pci_dev)->dev,(char *)"%s DMA mapping error 2\n",(char *)"liquidio_xmit");
      #line 1528 
      return NETDEV_TX_BUSY;
    }
    #line 1530 
    add_sg_size(g->sg,(unsigned short)((int)((unsigned short)skb->len) - (int)((unsigned short)skb->data_len)),0U);
    #line 1532 
    frags = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
    #line 1533 
    i = 1;
    #line 1534 
    while (1) {
      #line 1534 
      int tmp_16;
      #line 1534 
      tmp_16 = frags;
      #line 1534 
      frags --;
      #line 1534 
      ;
      #line 1534 
      if (! (tmp_16 != 0)) 
                           #line 1534 
                           break;
      {
        #line 1535 
        frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i + -1];
        #line 1537 
        ;
        #line 1537 
        ;
        #line 1537 
        (g->sg + (unsigned long)(i >> 2))->ptr[i & 3] = skb_frag_dma_map(& (oct->pci_dev)->dev,frag,0UL,(unsigned long)skb_frag_size(frag),(enum dma_data_direction)DMA_TO_DEVICE);
        #line 1541 
        if (dma_mapping_error(& (oct->pci_dev)->dev,
                           (g->sg + (unsigned long)(i >> 2))->ptr[i & 3]) != 0) {
          #line 1543 
          dma_unmap_single_attrs(& (oct->pci_dev)->dev,(g->sg)->ptr[0],(unsigned long)(skb->len - skb->data_len),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
          #line 1547 
          j = 1;
          #line 1547 
          while (j < i) {
            {
              #line 1548 
              frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[j + -1];
              #line 1549 
              ;
              #line 1549 
              ;
              #line 1549 
              dma_unmap_page_attrs(& (oct->pci_dev)->dev,(g->sg + (unsigned long)(j >> 2))->ptr[j & 3],(unsigned long)skb_frag_size(frag),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
            }
            #line 1547 
            j ++;
          }
          #line 1554 
          _dev_err(& (oct->pci_dev)->dev,(char *)"%s DMA mapping error 3\n",(char *)"liquidio_xmit");
          #line 1556 
          return NETDEV_TX_BUSY;
        }
        #line 1559 
        ;
        #line 1559 
        ;
        #line 1559 
        add_sg_size(g->sg + (unsigned long)(i >> 2),(unsigned short)((int)((unsigned short)skb_frag_size(frag))),(unsigned int)i & 3U);
        #line 1561 
        i ++;
      }
    }
    #line 1564 
    dptr = g->sg_dma_ptr;
    #line 1566 
    ndata.cmd.cmd3.dptr = dptr;
    #line 1567 
    finfo->dptr = dptr;
    #line 1568 
    finfo->g = g;
    #line 1570 
    ndata.reqtype = 2U;
  }
  #line 1573 
  irh = (struct octeon_instr_irh *)(& ndata.cmd.cmd3.irh);
  #line 1574 
  tx_info = (union tx_info *)(& ndata.cmd.cmd3.ossp[0]);
  #line 1576 
  ;
  #line 1576 
  if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U) {
    #line 1577 
    tx_info->s.gso_size = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
    #line 1578 
    tx_info->s.gso_segs = ((struct skb_shared_info *)skb_end_pointer(skb))->gso_segs;
  }
  #line 1582 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 1583 
    irh->priority = (unsigned long long)((int)skb->vlan_tci >> 13);
    #line 1584 
    irh->vlan = (unsigned long long)skb->vlan_tci;
  }
  #line 1587 
  xmit_more = (int)netdev_xmit_more();
  #line 1589 
  if ((long)((unsigned int)cmdsetup.s.timestamp != 0U) != 0L) 
                                                              #line 1590 
                                                              status = send_nic_timestamp_pkt(oct,& ndata,finfo,xmit_more); else 
                                                                    #line 1592 
                                                                    status = octnet_send_nic_data_pkt(oct,& ndata,xmit_more);
  #line 1593 
  if (status == -1) 
                    #line 1594 
                    goto lio_xmit_failed;
  #line 1596 
  if ((lio->msg_enable & 256U) != 0U) 
                                      #line 1596 
                                      netdev_info(lio->netdev,(char *)"Transmit queued successfully\n");
  #line 1598 
  if (status == 1) {
    #line 1599 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Rcvd IQ_SEND_STOP signal; stopping IQ-%d\n",iq_no);
    #line 1601 
    netif_stop_subqueue(netdev,(unsigned short)((int)((unsigned short)q_idx)));
  }
  #line 1604 
  netif_trans_update(netdev);
  #line 1606 
  if ((unsigned int)tx_info->s.gso_segs != 0U) 
                                               #line 1607 
                                               stats->tx_done += (unsigned long long)tx_info->s.gso_segs; else 
                                                                    #line 1609 
                                                                    (stats->tx_done) ++;
  #line 1610 
  stats->tx_tot_bytes += (unsigned long long)ndata.datasize;
  #line 1612 
  return NETDEV_TX_OK;
  #line 1614 
  lio_xmit_failed: 
                   #line 1614 
  ;
  #line 1615 
  (stats->tx_dropped) ++;
  #line 1616 
  if ((lio->msg_enable & 128U) != 0U) 
                                      #line 1616 
                                      netdev_info(lio->netdev,(char *)"IQ%d Transmit dropped:%llu\n",iq_no,stats->tx_dropped);
  #line 1618 
  if (dptr != 0ULL) 
                    #line 1619 
                    dma_unmap_single_attrs(& (oct->pci_dev)->dev,dptr,(unsigned long)ndata.datasize,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 1622 
  octeon_ring_doorbell_locked(oct,(unsigned int)iq_no);
  #line 1624 
  tx_buffer_free((void *)skb);
  #line 1625 
  return NETDEV_TX_OK;
}

#line 1631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void liquidio_tx_timeout(struct net_device *netdev)
{
  #line 1633 
  struct lio *lio;
  #line 1635 
  lio = (struct lio *)netdev_priv(netdev);
  #line 1637 
  if ((lio->msg_enable & 128U) != 0U) 
                                      #line 1637 
                                      netdev_info(lio->netdev,(char *)"Transmit timeout tx_dropped:%ld, waking up queues now!!\n",netdev->stats.tx_dropped);
  #line 1640 
  netif_trans_update(netdev);
  #line 1641 
  wake_txqs(netdev);
  #line 1642 
  return;
}

#line 1645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int liquidio_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 1650 
  struct octnic_ctrl_pkt nctrl;
  #line 1648 
  struct lio *lio = netdev_priv(netdev);
  #line 1649 
  struct octeon_device *oct = lio->oct_dev;
  #line 1651 
  int ret = 0;
  #line 1653 
  memset((void *)(& nctrl),0,328UL);
  #line 1655 
  nctrl.ncmd.u64 = 0ULL;
  #line 1656 
  nctrl.ncmd.s.cmd = (unsigned long long)23U;
  #line 1657 
  nctrl.ncmd.s.param1 = (unsigned long long)vid;
  #line 1658 
  nctrl.iq_no = (unsigned long long)lio->linfo.txpciq[0].s.q_no;
  #line 1659 
  nctrl.netpndev = (unsigned long long)netdev;
  #line 1660 
  nctrl.cb_fn = & liquidio_link_ctrl_cmd_completion;
  #line 1662 
  ret = octnet_send_nic_ctrl_pkt(lio->oct_dev,& nctrl);
  #line 1663 
  if (ret != 0) {
    #line 1664 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Add VLAN filter failed in core (ret: 0x%x)\n",ret);
    #line 1666 
    return -1;
  }
  #line 1669 
  return 0;
}

#line 1673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int liquidio_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 1678 
  struct octnic_ctrl_pkt nctrl;
  #line 1676 
  struct lio *lio = netdev_priv(netdev);
  #line 1677 
  struct octeon_device *oct = lio->oct_dev;
  #line 1679 
  int ret = 0;
  #line 1681 
  memset((void *)(& nctrl),0,328UL);
  #line 1683 
  nctrl.ncmd.u64 = 0ULL;
  #line 1684 
  nctrl.ncmd.s.cmd = (unsigned long long)24U;
  #line 1685 
  nctrl.ncmd.s.param1 = (unsigned long long)vid;
  #line 1686 
  nctrl.iq_no = (unsigned long long)lio->linfo.txpciq[0].s.q_no;
  #line 1687 
  nctrl.netpndev = (unsigned long long)netdev;
  #line 1688 
  nctrl.cb_fn = & liquidio_link_ctrl_cmd_completion;
  #line 1690 
  ret = octnet_send_nic_ctrl_pkt(lio->oct_dev,& nctrl);
  #line 1691 
  if (ret != 0) {
    #line 1692 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Del VLAN filter failed in core (ret: 0x%x)\n",ret);
    #line 1694 
    if (ret > 0) 
                 #line 1695 
                 ret = -5;
  }
  #line 1697 
  return ret;
}

#line 1707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int liquidio_set_rxcsum_command(struct net_device *netdev, int command, u8 rx_cmd)
{
  #line 1712 
  struct octnic_ctrl_pkt nctrl;
  #line 1710 
  struct lio *lio = netdev_priv(netdev);
  #line 1711 
  struct octeon_device *oct = lio->oct_dev;
  #line 1713 
  int ret = 0;
  #line 1715 
  memset((void *)(& nctrl),0,328UL);
  #line 1717 
  nctrl.ncmd.u64 = 0ULL;
  #line 1718 
  nctrl.ncmd.s.cmd = (unsigned long long)command;
  #line 1719 
  nctrl.ncmd.s.param1 = (unsigned long long)((unsigned short)rx_cmd);
  #line 1720 
  nctrl.iq_no = (unsigned long long)lio->linfo.txpciq[0].s.q_no;
  #line 1721 
  nctrl.netpndev = (unsigned long long)netdev;
  #line 1722 
  nctrl.cb_fn = & liquidio_link_ctrl_cmd_completion;
  #line 1724 
  ret = octnet_send_nic_ctrl_pkt(lio->oct_dev,& nctrl);
  #line 1725 
  if (ret != 0) {
    #line 1726 
    _dev_err(& (oct->pci_dev)->dev,(char *)"DEVFLAGS RXCSUM change failed in core (ret:0x%x)\n",ret);
    #line 1728 
    if (ret > 0) 
                 #line 1729 
                 ret = -5;
  }
  #line 1731 
  return ret;
}

#line 1742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int liquidio_vxlan_port_command(struct net_device *netdev, int command, u16 vxlan_port, u8 vxlan_cmd_bit)
{
  #line 1747 
  struct octnic_ctrl_pkt nctrl;
  #line 1745 
  struct lio *lio = netdev_priv(netdev);
  #line 1746 
  struct octeon_device *oct = lio->oct_dev;
  #line 1748 
  int ret = 0;
  #line 1750 
  memset((void *)(& nctrl),0,328UL);
  #line 1752 
  nctrl.ncmd.u64 = 0ULL;
  #line 1753 
  nctrl.ncmd.s.cmd = (unsigned long long)command;
  #line 1754 
  nctrl.ncmd.s.more = (unsigned long long)vxlan_cmd_bit;
  #line 1755 
  nctrl.ncmd.s.param1 = (unsigned long long)vxlan_port;
  #line 1756 
  nctrl.iq_no = (unsigned long long)lio->linfo.txpciq[0].s.q_no;
  #line 1757 
  nctrl.netpndev = (unsigned long long)netdev;
  #line 1758 
  nctrl.cb_fn = & liquidio_link_ctrl_cmd_completion;
  #line 1760 
  ret = octnet_send_nic_ctrl_pkt(lio->oct_dev,& nctrl);
  #line 1761 
  if (ret != 0) {
    #line 1762 
    _dev_err(& (oct->pci_dev)->dev,(char *)"DEVFLAGS VxLAN port add/delete failed in core (ret : 0x%x)\n",ret);
    #line 1765 
    if (ret > 0) 
                 #line 1766 
                 ret = -5;
  }
  #line 1768 
  return ret;
}

#line 1776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static netdev_features_t liquidio_fix_features(struct net_device *netdev, netdev_features_t request)
{
  #line 1779 
  struct lio *lio = netdev_priv(netdev);
  #line 1781 
  if ((request & 549755813888ULL) != 0ULL && (lio->dev_capability & 549755813888ULL) == 0ULL) 
    #line 1783 
    request &= 18446743523953737727ULL;
  #line 1785 
  if ((request & 8ULL) != 0ULL && (lio->dev_capability & 8ULL) == 0ULL) 
    #line 1787 
    request &= 18446744073709551607ULL;
  #line 1789 
  if ((request & 65536ULL) != 0ULL && (lio->dev_capability & 65536ULL) == 0ULL) 
    #line 1790 
    request &= 18446744073709486079ULL;
  #line 1792 
  if ((request & 1048576ULL) != 0ULL && (lio->dev_capability & 1048576ULL) == 0ULL) 
    #line 1793 
    request &= 18446744073708503039ULL;
  #line 1795 
  if ((request & 32768ULL) != 0ULL && (lio->dev_capability & 32768ULL) == 0ULL) 
    #line 1796 
    request &= 18446744073709518847ULL;
  #line 1799 
  if (((request & 549755813888ULL) == 0ULL && (netdev->features & 32768ULL) != 0ULL) && (lio->dev_capability & 32768ULL) != 0ULL) 
    #line 1801 
    request &= 18446744073709518847ULL;
  #line 1803 
  return request;
}

#line 1810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int liquidio_set_features(struct net_device *netdev, netdev_features_t features)
{
  #line 1813 
  struct lio *lio = netdev_priv(netdev);
  #line 1815 
  if (((netdev->features ^ features) & 32768ULL) == 0ULL) 
                                                          #line 1816 
                                                          return 0;
  #line 1818 
  if ((features & 32768ULL) != 0ULL && (lio->dev_capability & 32768ULL) != 0ULL) 
    #line 1819 
    liquidio_set_feature(netdev,11,(unsigned short)3);
  else 
    #line 1821 
    if ((features & 32768ULL) == 0ULL && (lio->dev_capability & 32768ULL) != 0ULL) 
      #line 1823 
      liquidio_set_feature(netdev,12,(unsigned short)3);
  #line 1825 
  if (((netdev->features & 549755813888ULL) == 0ULL && (lio->enc_dev_capability & 549755813888ULL) != 0ULL) && (features & 549755813888ULL) != 0ULL) 
    #line 1828 
    liquidio_set_rxcsum_command(netdev,16,(unsigned char)0);
  else 
    #line 1830 
    if (((netdev->features & 549755813888ULL) != 0ULL && (lio->enc_dev_capability & 549755813888ULL) != 0ULL) && (features & 549755813888ULL) == 0ULL) 
      #line 1833 
      liquidio_set_rxcsum_command(netdev,16,(unsigned char)1);
  #line 1836 
  return 0;
}

#line 1839  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void liquidio_add_vxlan_port(struct net_device *netdev, struct udp_tunnel_info *ti)
{
  #line 1842 
  if ((unsigned int)ti->type != 0U) 
                                    #line 1843 
                                    return;
  #line 1845 
  ;
  #line 1845 
  liquidio_vxlan_port_command(netdev,25,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)ti->port))),(unsigned char)0);
  #line 1848 
  return;
}

#line 1851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void liquidio_del_vxlan_port(struct net_device *netdev, struct udp_tunnel_info *ti)
{
  #line 1854 
  if ((unsigned int)ti->type != 0U) 
                                    #line 1855 
                                    return;
  #line 1857 
  ;
  #line 1857 
  liquidio_vxlan_port_command(netdev,25,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)ti->port))),(unsigned char)1);
  #line 1860 
  return;
}

#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static struct net_device_ops lionetdevops = {.ndo_open = & liquidio_open, .ndo_stop = & liquidio_stop, .ndo_start_xmit = & liquidio_xmit, .ndo_set_rx_mode = & liquidio_set_mcast_list, .ndo_set_mac_address = & liquidio_set_mac, .ndo_do_ioctl = & liquidio_ioctl, .ndo_change_mtu = & liquidio_change_mtu, .ndo_tx_timeout = & liquidio_tx_timeout, .ndo_get_stats64 = & liquidio_get_stats64, .ndo_vlan_rx_add_vid = & liquidio_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & liquidio_vlan_rx_kill_vid, .ndo_fix_features = & liquidio_fix_features, .ndo_set_features = & liquidio_set_features, .ndo_udp_tunnel_add = & liquidio_add_vxlan_port, .ndo_udp_tunnel_del = & liquidio_del_vxlan_port};
#line 1881  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int lio_nic_info(struct octeon_recv_info *recv_info, void *buf)
{
  #line 1885 
  union oct_link_status *ls;
  #line 1887 
  int i;
  #line 1883 
  struct octeon_device *oct = (struct octeon_device *)buf;
  #line 1884 
  struct octeon_recv_pkt *recv_pkt = recv_info->recv_pkt;
  #line 1886 
  int gmxport = 0;
  #line 1889 
  if (recv_pkt->buffer_size[0] != 24U) {
    #line 1890 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Malformed NIC_INFO, len=%d, ifidx=%d\n",recv_pkt->buffer_size[0],(int)recv_pkt->rh.r_nic_info.gmxport);
    #line 1893 
    goto nic_info_err;
  }
  #line 1896 
  gmxport = (int)recv_pkt->rh.r_nic_info.gmxport;
  #line 1897 
  ls = (union oct_link_status *)(get_rbd((struct sk_buff *)recv_pkt->buffer_ptr[0]) + 16UL);
  #line 1900 
  octeon_swap_8B_data((u64 *)ls,1U);
  #line 1902 
  i = 0;
  #line 1902 
  while (oct->ifcount > (unsigned int)i) {
    #line 1903 
    if (oct->props[i].gmxport == gmxport) {
      #line 1904 
      update_link_status(oct->props[i].netdev,ls);
      #line 1905 
      break;
    }
    #line 1902 
    i ++;
  }
  #line 1909 
  nic_info_err: 
                #line 1909 
  ;
  #line 1910 
  i = 0;
  #line 1910 
  while ((int)recv_pkt->buffer_count > i) {
    #line 1911 
    recv_buffer_free(recv_pkt->buffer_ptr[i]);
    #line 1910 
    i ++;
  }
  #line 1912 
  octeon_free_recv_info(recv_info);
  #line 1913 
  return 0;
}

#line 1924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int setup_nic_devices(struct octeon_device *octeon_dev)
{
  #line 1926 
  int retval;
  #line 1926 
  int num_iqueues;
  #line 1926 
  int num_oqueues;
  #line 1927 
  u32 resp_size;
  #line 1927 
  u32 data_size;
  #line 1928 
  struct liquidio_if_cfg_resp *resp;
  #line 1929 
  struct octeon_soft_command *sc;
  #line 1930 
  union oct_nic_if_cfg if_cfg;
  #line 1931 
  struct octdev_props *props;
  #line 1932 
  struct net_device *netdev;
  #line 1933 
  struct lio_version *vdata;
  #line 1935 
  u8 mac[6U];
  #line 1935 
  u8 i;
  #line 1935 
  u8 j;
  #line 1936 
  u32 ifidx_or_pfnum;
  #line 1934 
  struct lio *lio = (struct lio *)0;
  #line 1938 
  ifidx_or_pfnum = (unsigned int)octeon_dev->pf_num;
  #line 1941 
  octeon_register_dispatch_fn(octeon_dev,(unsigned short)1,(unsigned short)4,& lio_nic_info,(void *)octeon_dev);
  #line 1947 
  octeon_register_reqtype_free_fn(octeon_dev,1,& free_netbuf);
  #line 1950 
  octeon_register_reqtype_free_fn(octeon_dev,2,& free_netsgbuf);
  #line 1953 
  octeon_register_reqtype_free_fn(octeon_dev,4,& free_netsgbuf_with_resp);
  #line 1956 
  i = (unsigned char)0U;
  #line 1956 
  while ((unsigned int)i < octeon_dev->ifcount) {
    {
      #line 1957 
      resp_size = 1112U;
      #line 1958 
      data_size = 8U;
      #line 1959 
      sc = octeon_alloc_soft_command(octeon_dev,data_size,resp_size,0U);
      #line 1962 
      resp = (struct liquidio_if_cfg_resp *)sc->virtrptr;
      #line 1963 
      vdata = (struct lio_version *)sc->virtdptr;
      #line 1965 
      *((u64 *)vdata) = 0ULL;
      #line 1966 
      vdata->major = (unsigned short)256U;
      #line 1967 
      vdata->minor = (unsigned short)1792U;
      #line 1968 
      vdata->micro = (unsigned short)512U;
      #line 1970 
      if_cfg.u64 = 0ULL;
      #line 1972 
      if_cfg.s.num_iqueues = (unsigned long long)((unsigned short)octeon_dev->sriov_info.rings_per_vf);
      #line 1973 
      if_cfg.s.num_oqueues = (unsigned long long)((unsigned short)octeon_dev->sriov_info.rings_per_vf);
      #line 1974 
      if_cfg.s.base_queue = (unsigned long long)0U;
      #line 1976 
      sc->iq_no = 0U;
      #line 1978 
      octeon_prepare_soft_command(octeon_dev,sc,(unsigned char)1,(unsigned char)9,0U,if_cfg.u64,0ULL);
      #line 1982 
      __init_completion(& sc->complete);
      #line 1983 
      sc->sc_status = 1U;
      #line 1985 
      retval = octeon_send_soft_command(octeon_dev,sc);
      #line 1986 
      if (retval == -1) {
        #line 1987 
        _dev_err(& (octeon_dev->pci_dev)->dev,(char *)"iq/oq config failed status: %x\n",retval);
        #line 1990 
        octeon_free_soft_command(octeon_dev,sc);
        #line 1991 
        return -5;
      }
      #line 1997 
      retval = wait_for_sc_completion_timeout(octeon_dev,sc,0UL);
      #line 1998 
      if (retval != 0) 
                       #line 1999 
                       return retval;
      #line 2001 
      retval = (int)resp->status;
      #line 2002 
      if (retval != 0) {
        #line 2003 
        _dev_err(& (octeon_dev->pci_dev)->dev,(char *)"iq/oq config failed, retval = %d\n",retval);
        {
          #line 2006 
          union __anonunion___u_1780 __u = {.__val = 1};
          #line 2005 
          __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
          #line 2005 
          int tmp = __u.__val;
        }
        #line 2006 
        return -5;
      }
      #line 2009 
      snprintf((char *)(& octeon_dev->fw_info.liquidio_firmware_version),32UL,(char *)"%s",(char *)(& resp->cfg_info.liquidio_firmware_version));
      #line 2013 
      octeon_swap_8B_data((u64 *)(& resp->cfg_info),137U);
      #line 2016 
      if (0 != 0) 
                  #line 2016 
                  num_iqueues = (int)((((unsigned int)(((((((((resp->cfg_info.iqmask & 1ULL) != 0ULL) + ((resp->cfg_info.iqmask & 2ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 8ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 16ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 32ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 64ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 128ULL) != 0ULL)) + (unsigned int)(((((((((resp->cfg_info.iqmask & 256ULL) != 0ULL) + ((resp->cfg_info.iqmask & 512ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 1024ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 2048ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4096ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 8192ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 16384ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 32768ULL) != 0ULL))) + ((unsigned int)(((((((((resp->cfg_info.iqmask & 65536ULL) != 0ULL) + ((resp->cfg_info.iqmask & 131072ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 262144ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 524288ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 1048576ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 2097152ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4194304ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 8388608ULL) != 0ULL)) + (unsigned int)(((((((((resp->cfg_info.iqmask & 16777216ULL) != 0ULL) + ((resp->cfg_info.iqmask & 33554432ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 67108864ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 134217728ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 268435456ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 536870912ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 1073741824ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 2147483648ULL) != 0ULL)))) + (((unsigned int)(((((((((resp->cfg_info.iqmask & 4294967296ULL) != 0ULL) + ((resp->cfg_info.iqmask & 8589934592ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 17179869184ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 34359738368ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 68719476736ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 137438953472ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 274877906944ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 549755813888ULL) != 0ULL)) + (unsigned int)(((((((((resp->cfg_info.iqmask & 1099511627776ULL) != 0ULL) + ((resp->cfg_info.iqmask & 2199023255552ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4398046511104ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 8796093022208ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 17592186044416ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 35184372088832ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 70368744177664ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 140737488355328ULL) != 0ULL))) + ((unsigned int)(((((((((resp->cfg_info.iqmask & 281474976710656ULL) != 0ULL) + ((resp->cfg_info.iqmask & 562949953421312ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 1125899906842624ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 2251799813685248ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4503599627370496ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 9007199254740992ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 18014398509481984ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 36028797018963968ULL) != 0ULL)) + (unsigned int)(((((((((resp->cfg_info.iqmask & 72057594037927936ULL) != 0ULL) + ((resp->cfg_info.iqmask & 144115188075855872ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 288230376151711744ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 576460752303423488ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 1152921504606846976ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 2305843009213693952ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4611686018427387904ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 9223372036854775808ULL) != 0ULL)))));
      else {
        #line 2016 
        num_iqueues = (int)__arch_hweight64(resp->cfg_info.iqmask);
      }
      #line 2017 
      if (0 != 0) 
                  #line 2017 
                  num_oqueues = (int)((((unsigned int)(((((((((resp->cfg_info.oqmask & 1ULL) != 0ULL) + ((resp->cfg_info.oqmask & 2ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 4ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 8ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 16ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 32ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 64ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 128ULL) != 0ULL)) + (unsigned int)(((((((((resp->cfg_info.oqmask & 256ULL) != 0ULL) + ((resp->cfg_info.oqmask & 512ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 1024ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 2048ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 4096ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 8192ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 16384ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 32768ULL) != 0ULL))) + ((unsigned int)(((((((((resp->cfg_info.oqmask & 65536ULL) != 0ULL) + ((resp->cfg_info.oqmask & 131072ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 262144ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 524288ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 1048576ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 2097152ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 4194304ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 8388608ULL) != 0ULL)) + (unsigned int)(((((((((resp->cfg_info.oqmask & 16777216ULL) != 0ULL) + ((resp->cfg_info.oqmask & 33554432ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 67108864ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 134217728ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 268435456ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 536870912ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 1073741824ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 2147483648ULL) != 0ULL)))) + (((unsigned int)(((((((((resp->cfg_info.oqmask & 4294967296ULL) != 0ULL) + ((resp->cfg_info.oqmask & 8589934592ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 17179869184ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 34359738368ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 68719476736ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 137438953472ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 274877906944ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 549755813888ULL) != 0ULL)) + (unsigned int)(((((((((resp->cfg_info.oqmask & 1099511627776ULL) != 0ULL) + ((resp->cfg_info.oqmask & 2199023255552ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 4398046511104ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 8796093022208ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 17592186044416ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 35184372088832ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 70368744177664ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 140737488355328ULL) != 0ULL))) + ((unsigned int)(((((((((resp->cfg_info.oqmask & 281474976710656ULL) != 0ULL) + ((resp->cfg_info.oqmask & 562949953421312ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 1125899906842624ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 2251799813685248ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 4503599627370496ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 9007199254740992ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 18014398509481984ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 36028797018963968ULL) != 0ULL)) + (unsigned int)(((((((((resp->cfg_info.oqmask & 72057594037927936ULL) != 0ULL) + ((resp->cfg_info.oqmask & 144115188075855872ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 288230376151711744ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 576460752303423488ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 1152921504606846976ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 2305843009213693952ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 4611686018427387904ULL) != 0ULL)) + ((resp->cfg_info.oqmask & 9223372036854775808ULL) != 0ULL)))));
      else {
        #line 2017 
        num_oqueues = (int)__arch_hweight64(resp->cfg_info.oqmask);
      }
      #line 2019 
      if (num_iqueues == 0 || num_oqueues == 0) {
        #line 2020 
        _dev_err(& (octeon_dev->pci_dev)->dev,(char *)"Got bad iqueues (%016llx) or oqueues (%016llx) from firmware.\n",resp->cfg_info.iqmask,resp->cfg_info.oqmask);
        {
          #line 2024 
          union __anonunion___u_1782 __u_0 = {.__val = 1};
          #line 2023 
          __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_0.__c),4);
          #line 2023 
          int tmp_3 = __u_0.__val;
        }
        #line 2024 
        goto setup_nic_dev_done;
      }
      {
        #line 2026 
        bool branch;
        #line 2026 
        struct _ddebug __UNIQUE_ID_ddebug563 = {.modname = (char *)"liquidio_vf", .function = (char *)"setup_nic_devices", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c", .format = (char *)"interface %d, iqmask %016llx, oqmask %016llx, numiqueues %d, numoqueues %d\n", .lineno = (unsigned int)2026U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2026 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug563.key.dd_key_false.key,(_Bool)0);
        #line 2026 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 2026 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug563,& (octeon_dev->pci_dev)->dev,(char *)"interface %d, iqmask %016llx, oqmask %016llx, numiqueues %d, numoqueues %d\n",(int)i,resp->cfg_info.iqmask,resp->cfg_info.oqmask,num_iqueues,num_oqueues);
      }
      #line 2031 
      netdev = cif_alloc_etherdev_mqs(15552,(unsigned int)num_iqueues,(unsigned int)num_iqueues);
      #line 2033 
      if (netdev == (struct net_device *)0) {
        #line 2034 
        _dev_err(& (octeon_dev->pci_dev)->dev,(char *)"Device allocation failed\n");
        {
          #line 2036 
          union __anonunion___u_1784 __u_1 = {.__val = 1};
          #line 2035 
          __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_1.__c),4);
          #line 2035 
          int tmp_5 = __u_1.__val;
        }
        #line 2036 
        goto setup_nic_dev_done;
      }
      #line 2039 
      netdev->dev.parent = & (octeon_dev->pci_dev)->dev;
      #line 2044 
      netdev->netdev_ops = & lionetdevops;
      #line 2046 
      lio = (struct lio *)netdev_priv(netdev);
      #line 2048 
      memset((void *)lio,0,15552UL);
      #line 2050 
      lio->ifidx = (int)ifidx_or_pfnum;
      #line 2052 
      props = & octeon_dev->props[(int)i];
      #line 2053 
      props->gmxport = (int)resp->cfg_info.linfo.gmxport;
      #line 2054 
      props->netdev = netdev;
      #line 2056 
      lio->linfo.num_rxpciq = (unsigned long long)((unsigned char)num_oqueues);
      #line 2057 
      lio->linfo.num_txpciq = (unsigned long long)((unsigned char)num_iqueues);
      #line 2059 
      j = (unsigned char)0U;
      #line 2059 
      while ((int)j < num_oqueues) {
        #line 2060 
        lio->linfo.rxpciq[(int)j].u64 = resp->cfg_info.linfo.rxpciq[(int)j].u64;
        #line 2059 
        j = (u8)((int)j + 1);
      }
      #line 2063 
      j = (unsigned char)0U;
      #line 2063 
      while ((int)j < num_iqueues) {
        #line 2064 
        lio->linfo.txpciq[(int)j].u64 = resp->cfg_info.linfo.txpciq[(int)j].u64;
        #line 2063 
        j = (u8)((int)j + 1);
      }
      #line 2068 
      lio->linfo.hw_addr = resp->cfg_info.linfo.hw_addr;
      #line 2069 
      lio->linfo.gmxport = resp->cfg_info.linfo.gmxport;
      #line 2070 
      lio->linfo.link.u64 = resp->cfg_info.linfo.link.u64;
      #line 2071 
      lio->linfo.macaddr_is_admin_asgnd = resp->cfg_info.linfo.macaddr_is_admin_asgnd;
      #line 2073 
      lio->linfo.macaddr_spoofchk = resp->cfg_info.linfo.macaddr_spoofchk;
      #line 2076 
      lio->msg_enable = netif_msg_init(debug,7);
      #line 2078 
      lio->dev_capability = 549756977203ULL;
      #line 2084 
      netif_set_gso_max_size(netdev,59872U);
      #line 2089 
      lio->enc_dev_capability = 549824069659ULL;
      #line 2097 
      netdev->hw_enc_features = lio->enc_dev_capability & 18446744073709518847ULL;
      #line 2099 
      netdev->vlan_features = lio->dev_capability;
      #line 2101 
      lio->dev_capability |= 896ULL;
      #line 2105 
      netdev->features = lio->dev_capability & 18446744073709518847ULL;
      #line 2107 
      netdev->hw_features = lio->dev_capability;
      #line 2108 
      netdev->hw_features &= 18446744073709551359ULL;
      #line 2111 
      netdev->min_mtu = 68U;
      #line 2112 
      netdev->max_mtu = 16000U;
      {
        #line 2115 
        union __anonunion___u_1786 __u_2 = {.__val = 1};
        #line 2114 
        __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_2.__c),4);
        #line 2114 
        int tmp_7 = __u_2.__val;
      }
      #line 2119 
      lio->oct_dev = octeon_dev;
      #line 2120 
      lio->octprops = props;
      #line 2121 
      lio->netdev = netdev;
      {
        #line 2123 
        bool branch_0;
        #line 2123 
        struct _ddebug __UNIQUE_ID_ddebug564 = {.modname = (char *)"liquidio_vf", .function = (char *)"setup_nic_devices", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c", .format = (char *)"if%d gmx: %d hw_addr: 0x%llx\n", .lineno = (unsigned int)2123U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2123 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug564.key.dd_key_false.key,(_Bool)0);
        #line 2123 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 2123 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug564,& (octeon_dev->pci_dev)->dev,(char *)"if%d gmx: %d hw_addr: 0x%llx\n",(int)i,(int)lio->linfo.gmxport,(long long)lio->linfo.hw_addr);
      }
      #line 2128 
      octeon_swap_8B_data(& lio->linfo.hw_addr,1U);
      #line 2129 
      j = (unsigned char)0U;
      #line 2129 
      while ((unsigned int)j <= 5U) {
        #line 2130 
        mac[(int)j] = *((u8 *)(& lio->linfo.hw_addr) + ((unsigned long)j + (unsigned long)2U));
        #line 2129 
        j = (u8)((int)j + 1);
      }
      #line 2133 
      ether_addr_copy(netdev->dev_addr,(u8 *)(& mac));
      #line 2135 
      if (liquidio_setup_io_queues(octeon_dev,(int)i,
                                 (unsigned int)lio->linfo.num_txpciq,
                                 (unsigned int)lio->linfo.num_rxpciq) != 0) {
        #line 2138 
        _dev_err(& (octeon_dev->pci_dev)->dev,(char *)"I/O queues creation failed\n");
        #line 2139 
        goto setup_nic_dev_free;
      }
      #line 2142 
      ifstate_set(lio,1);
      #line 2147 
      (*(octeon_dev->fn_list.enable_interrupt))(octeon_dev,(unsigned char)255);
      #line 2153 
      lio->txq = (int)lio->linfo.txpciq[0].s.q_no;
      #line 2154 
      lio->rxq = (int)lio->linfo.rxpciq[0].s.q_no;
      #line 2156 
      lio->tx_qsize = (unsigned int)octeon_get_tx_qsize(octeon_dev,(unsigned int)lio->txq);
      #line 2157 
      lio->rx_qsize = (unsigned int)octeon_get_rx_qsize(octeon_dev,(unsigned int)lio->rxq);
      #line 2159 
      if (lio_setup_glists(octeon_dev,lio,num_iqueues) != 0) {
        #line 2160 
        _dev_err(& (octeon_dev->pci_dev)->dev,(char *)"Gather list allocation failed\n");
        #line 2162 
        goto setup_nic_dev_free;
      }
      #line 2166 
      liquidio_set_ethtool_ops(netdev);
      #line 2167 
      if ((unsigned int)(lio->oct_dev)->chip_id == 38674U) 
                                                           #line 2168 
                                                           octeon_dev->priv_flags = 0U; else 
                                                                    #line 2170 
                                                                    octeon_dev->priv_flags = 0U;
      #line 2172 
      if ((netdev->features & 32768ULL) != 0ULL) 
                                                 #line 2173 
                                                 liquidio_set_feature(netdev,11,(unsigned short)3);
      #line 2176 
      if (setup_link_status_change_wq(netdev) != 0) 
                                                    #line 2177 
                                                    goto setup_nic_dev_free;
      #line 2179 
      if (setup_rx_oom_poll_fn(netdev) != 0) 
                                             #line 2180 
                                             goto setup_nic_dev_free;
      #line 2183 
      if (cif_register_netdev(netdev) != 0) {
        #line 2184 
        _dev_err(& (octeon_dev->pci_dev)->dev,(char *)"Device registration failed\n");
        #line 2185 
        goto setup_nic_dev_free;
      }
      {
        #line 2188 
        bool branch_1;
        #line 2188 
        struct _ddebug __UNIQUE_ID_ddebug565 = {.modname = (char *)"liquidio_vf", .function = (char *)"setup_nic_devices", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c", .format = (char *)"Setup NIC ifidx:%d mac:%02x%02x%02x%02x%02x%02x\n", .lineno = (unsigned int)2188U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2188 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug565.key.dd_key_false.key,(_Bool)0);
        #line 2188 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 2188 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug565,& (octeon_dev->pci_dev)->dev,(char *)"Setup NIC ifidx:%d mac:%02x%02x%02x%02x%02x%02x\n",(int)i,(int)mac[0],(int)mac[1],(int)mac[2],(int)mac[3],(int)mac[4],(int)mac[5]);
      }
      #line 2191 
      netif_carrier_off(netdev);
      #line 2192 
      (lio->link_changes) ++;
      #line 2194 
      ifstate_set(lio,2);
      #line 2200 
      liquidio_set_rxcsum_command(netdev,16,(unsigned char)0);
      #line 2202 
      liquidio_set_feature(netdev,17,(unsigned short)0);
      {
        #line 2205 
        bool branch_2;
        #line 2205 
        struct _ddebug __UNIQUE_ID_ddebug566 = {.modname = (char *)"liquidio_vf", .function = (char *)"setup_nic_devices", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c", .format = (char *)"NIC ifidx:%d Setup successful\n", .lineno = (unsigned int)2205U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2205 
        branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug566.key.dd_key_false.key,(_Bool)0);
        #line 2205 
        if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                      #line 2205 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug566,& (octeon_dev->pci_dev)->dev,(char *)"NIC ifidx:%d Setup successful\n",(int)i);
      }
      #line 2208 
      octeon_dev->no_speed_setting = (unsigned char)1U;
    }
    #line 1956 
    i = (u8)((int)i + 1);
  }
  #line 2211 
  return 0;
  #line 2213 
  setup_nic_dev_free: 
                      #line 2213 
  ;
  #line 2215 
  while (1) {
    #line 2215 
    u8 tmp_13;
    #line 2215 
    tmp_13 = i;
    #line 2215 
    i = (u8)((int)i - 1);
    #line 2215 
    ;
    #line 2215 
    if (! ((unsigned int)tmp_13 != 0U)) 
                                        #line 2215 
                                        break;
    #line 2216 
    _dev_err(& (octeon_dev->pci_dev)->dev,(char *)"NIC ifidx:%d Setup failed\n",(int)i);
    #line 2218 
    liquidio_destroy_nic_device(octeon_dev,(int)i);
  }
  #line 2221 
  setup_nic_dev_done: 
                      #line 2221 
  ;
  #line 2223 
  return -19;
}

#line 2233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int liquidio_init_nic_module(struct octeon_device *oct)
{
  #line 2236 
  int i;
  #line 2235 
  int num_nic_ports = 1;
  #line 2236 
  int retval = 0;
  {
    #line 2238 
    bool branch;
    #line 2238 
    struct _ddebug __UNIQUE_ID_ddebug567 = {.modname = (char *)"liquidio_vf", .function = (char *)"liquidio_init_nic_module", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c", .format = (char *)"Initializing network interfaces\n", .lineno = (unsigned int)2238U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2238 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug567.key.dd_key_false.key,(_Bool)0);
    #line 2238 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2238 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug567,& (oct->pci_dev)->dev,(char *)"Initializing network interfaces\n");
  }
  #line 2243 
  oct->ifcount = (unsigned int)num_nic_ports;
  #line 2244 
  memset((void *)(& oct->props),0,(unsigned long)num_nic_ports * 32UL);
  #line 2247 
  i = 0;
  #line 2247 
  while (i <= 127) {
    #line 2248 
    oct->props[i].gmxport = -1;
    #line 2247 
    i ++;
  }
  #line 2250 
  retval = setup_nic_devices(oct);
  #line 2251 
  if (retval != 0) {
    #line 2252 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Setup NIC devices failed\n");
    #line 2253 
    goto octnet_init_failure;
  }
  {
    #line 2256 
    bool branch_0;
    #line 2256 
    struct _ddebug __UNIQUE_ID_ddebug568 = {.modname = (char *)"liquidio_vf", .function = (char *)"liquidio_init_nic_module", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c", .format = (char *)"Network interfaces ready\n", .lineno = (unsigned int)2256U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2256 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug568.key.dd_key_false.key,(_Bool)0);
    #line 2256 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 2256 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug568,& (oct->pci_dev)->dev,(char *)"Network interfaces ready\n");
  }
  #line 2258 
  return retval;
  #line 2260 
  octnet_init_failure: 
                       #line 2260 
  ;
  #line 2262 
  oct->ifcount = 0U;
  #line 2264 
  return retval;
}

#line 2271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int octeon_device_init(struct octeon_device *oct)
{
  #line 2273 
  u32 rev_id;
  #line 2274 
  int j;
  #line 2276 
  atomic_set(& oct->status,0);
  #line 2281 
  if (octeon_pci_os_setup(oct) != 0) 
                                     #line 2282 
                                     return 1;
  #line 2283 
  atomic_set(& oct->status,1);
  #line 2285 
  oct->chip_id = (unsigned short)38674U;
  #line 2286 
  pci_read_config_dword(oct->pci_dev,8,& rev_id);
  #line 2287 
  oct->rev_id = (unsigned short)((unsigned int)((unsigned short)rev_id) & 255U);
  #line 2289 
  if (cn23xx_setup_octeon_vf_device(oct) != 0) 
                                               #line 2290 
                                               return 1;
  #line 2292 
  atomic_set(& oct->status,2);
  #line 2294 
  oct->app_mode = 1U;
  #line 2299 
  if (octeon_init_dispatch_list(oct) != 0) 
                                           #line 2300 
                                           return 1;
  #line 2302 
  atomic_set(& oct->status,3);
  #line 2304 
  if (octeon_set_io_queues_off(oct) != 0) {
    #line 2305 
    _dev_err(& (oct->pci_dev)->dev,(char *)"setting io queues off failed\n");
    #line 2306 
    return 1;
  }
  #line 2309 
  if ((*(oct->fn_list.setup_device_regs))(oct) != 0) {
    #line 2310 
    _dev_err(& (oct->pci_dev)->dev,(char *)"device registers configuration failed\n");
    #line 2311 
    return 1;
  }
  #line 2315 
  if (octeon_setup_sc_buffer_pool(oct) != 0) {
    #line 2316 
    _dev_err(& (oct->pci_dev)->dev,(char *)"sc buffer pool allocation failed\n");
    #line 2317 
    return 1;
  }
  #line 2319 
  atomic_set(& oct->status,5);
  #line 2322 
  if (octeon_setup_instr_queues(oct) != 0) {
    #line 2323 
    _dev_err(& (oct->pci_dev)->dev,(char *)"instruction queue initialization failed\n");
    #line 2324 
    return 1;
  }
  #line 2326 
  atomic_set(& oct->status,4);
  #line 2331 
  if (octeon_setup_response_list(oct) != 0) {
    #line 2332 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Response list allocation failed\n");
    #line 2333 
    return 1;
  }
  #line 2335 
  atomic_set(& oct->status,6);
  #line 2337 
  if (octeon_setup_output_queues(oct) != 0) {
    #line 2338 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Output queue initialization failed\n");
    #line 2339 
    return 1;
  }
  #line 2341 
  atomic_set(& oct->status,7);
  #line 2343 
  if ((*(oct->fn_list.setup_mbox))(oct) != 0) {
    #line 2344 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Mailbox setup failed\n");
    #line 2345 
    return 1;
  }
  #line 2347 
  atomic_set(& oct->status,8);
  #line 2349 
  if (octeon_allocate_ioq_vector(oct,oct->sriov_info.rings_per_vf) != 0) {
    #line 2350 
    _dev_err(& (oct->pci_dev)->dev,(char *)"ioq vector allocation failed\n");
    #line 2351 
    return 1;
  }
  #line 2353 
  atomic_set(& oct->status,9);
  #line 2355 
  _dev_info(& (oct->pci_dev)->dev,(char *)"OCTEON_CN23XX VF Version: %s, %d ioqs\n",(char *)"",oct->sriov_info.rings_per_vf);
  #line 2359 
  if (octeon_setup_interrupt(oct,oct->sriov_info.rings_per_vf) != 0) 
    #line 2360 
    return 1;
  #line 2362 
  atomic_set(& oct->status,10);
  #line 2372 
  (*(oct->fn_list.enable_interrupt))(oct,(unsigned char)255);
  #line 2374 
  if (cn23xx_octeon_pfvf_handshake(oct) != 0) 
                                              #line 2375 
                                              return 1;
  #line 2382 
  (*(oct->fn_list.enable_interrupt))(oct,(unsigned char)255);
  #line 2386 
  if ((*(oct->fn_list.enable_io_queues))(oct) != 0) {
    #line 2387 
    _dev_err(& (oct->pci_dev)->dev,(char *)"enabling io queues failed\n");
    #line 2388 
    return 1;
  }
  #line 2391 
  atomic_set(& oct->status,11);
  #line 2393 
  atomic_set(& oct->status,13);
  #line 2398 
  j = 0;
  #line 2398 
  while (oct->num_oqs > (unsigned int)j) {
    #line 2399 
    writel((oct->droq[j])->max_count,(oct->droq[j])->pkts_credit_reg);
    #line 2398 
    j ++;
  }
  #line 2403 
  atomic_set(& oct->status,14);
  #line 2405 
  atomic_set(& oct->status,15);
  #line 2407 
  if (liquidio_init_nic_module(oct) != 0) 
                                          #line 2408 
                                          return 1;
  #line 2410 
  return 0;
}

#line 2413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static int liquidio_vf_init(void)
{
  #line 2415 
  octeon_init_device_list(0);
  #line 2416 
  return cif___pci_register_driver(& liquidio_vf_pci_driver,& __this_module,
                                (char *)"liquidio_vf");
}

#line 2419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c"
static void liquidio_vf_exit(void)
{
  #line 2421 
  cif_pci_unregister_driver(& liquidio_vf_pci_driver);
  #line 2423 
  printk((char *)"\001");
  #line 2424 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
struct pci_driver *emg_alias_liquidio_vf_pci_driver = & liquidio_vf_pci_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
struct pci_device_id (*emg_alias_liquidio_vf_pci_tbl)[2U] = & liquidio_vf_pci_tbl;
#line 97 
#line 97 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 98 
#line 98 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 99 
#line 99 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 100 
#line 100 
void emg_free_netdev(struct net_device *arg0);
#line 101 
#line 101 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 102 
#line 102 
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2);
#line 104 
#line 104 
int emg_register_netdev(struct net_device *arg0);
#line 106 
#line 106 
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1);
#line 107 
#line 107 
void emg_tasklet_schedule(struct tasklet_struct *arg0);
#line 108 
#line 108 
void emg_unregister_netdev(struct net_device *arg0);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
void emg_wrapper_liquidio_add_vxlan_port(struct net_device *arg0, struct udp_tunnel_info *arg1)
{
  #line 113 
  liquidio_add_vxlan_port(arg0,arg1);
  #line 114 
  return;
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
void emg_wrapper_liquidio_del_vxlan_port(struct net_device *arg0, struct udp_tunnel_info *arg1)
{
  #line 118 
  liquidio_del_vxlan_port(arg0,arg1);
  #line 119 
  return;
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
unsigned long long emg_wrapper_liquidio_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 123 
  return liquidio_fix_features(arg0,arg1);
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
void emg_wrapper_liquidio_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 128 
  liquidio_get_stats64(arg0,arg1);
  #line 129 
  return;
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
int emg_wrapper_liquidio_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 133 
  return liquidio_ioctl(arg0,arg1,arg2);
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
int emg_wrapper_liquidio_open(struct net_device *arg0)
{
  #line 138 
  return liquidio_open(arg0);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
int emg_wrapper_liquidio_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 143 
  return liquidio_set_features(arg0,arg1);
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
int emg_wrapper_liquidio_set_mac(struct net_device *arg0, void *arg1)
{
  #line 148 
  return liquidio_set_mac(arg0,arg1);
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
void emg_wrapper_liquidio_set_mcast_list(struct net_device *arg0)
{
  #line 153 
  liquidio_set_mcast_list(arg0);
  #line 154 
  return;
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
int emg_wrapper_liquidio_stop(struct net_device *arg0)
{
  #line 158 
  return liquidio_stop(arg0);
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
void emg_wrapper_liquidio_tx_timeout(struct net_device *arg0)
{
  #line 163 
  liquidio_tx_timeout(arg0);
  #line 164 
  return;
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
int emg_wrapper_liquidio_vf_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 168 
  return liquidio_vf_probe(arg0,arg1);
}

#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
void emg_wrapper_liquidio_vf_remove(struct pci_dev *arg0)
{
  #line 173 
  liquidio_vf_remove(arg0);
  #line 174 
  return;
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
int emg_wrapper_liquidio_vlan_rx_add_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 178 
  return liquidio_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),
                               (unsigned short)((int)arg2));
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
int emg_wrapper_liquidio_vlan_rx_kill_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 183 
  return liquidio_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),
                                (unsigned short)((int)arg2));
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
enum netdev_tx emg_wrapper_liquidio_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 188 
  return liquidio_xmit(arg0,arg1);
}

#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
void emg_liquidio_vf_exit(void)
{
  #line 193 
  liquidio_vf_exit();
  #line 194 
  return;
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
int emg_liquidio_vf_init(void)
{
  #line 197 
  return liquidio_vf_init();
}

#line 215  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 218 
  ldv_set_bit(nr,addr);
  #line 219 
  return;
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 225 
  ldv_clear_bit(nr,addr);
  #line 226 
  return;
}

#line 229  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 232 
  ldv_init_list_head(list);
  #line 233 
  return;
}

#line 278  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 281 
  ldv_atomic_inc(v);
  #line 282 
  return;
}

#line 285  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void atomic_dec(atomic_t *v)
{
  #line 288 
  ldv_atomic_dec(v);
  #line 289 
  return;
}

#line 407  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 411 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 909  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t)
{
  #line 913 
  emg_tasklet_schedule(t);
  #line 914 
  return;
}

#line 917  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_spin_lock_bh_lock_of_octeon_instr_queue(spinlock_t *lock)
{
  #line 920 
  ldv_spin_model_lock((char *)"lock_of_octeon_instr_queue");
  #line 922 
  spin_lock_bh(lock);
  #line 923 
  return;
}

#line 926  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_spin_unlock_bh_lock_of_octeon_instr_queue(spinlock_t *lock)
{
  #line 929 
  ldv_spin_model_unlock((char *)"lock_of_octeon_instr_queue");
  #line 931 
  spin_unlock_bh(lock);
  #line 932 
  return;
}

#line 935  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 939 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 943  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 947 
  emg_unregister_netdev(dev);
  #line 948 
  return;
}

#line 951  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 955 
  emg_free_netdev(dev);
  #line 956 
  return;
}

#line 959  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_spin_lock_bh_cmd_resp_wqlock_of_octeon_device(spinlock_t *lock)
{
  #line 962 
  ldv_spin_model_lock((char *)"cmd_resp_wqlock_of_octeon_device");
  #line 964 
  spin_lock_bh(lock);
  #line 965 
  return;
}

#line 968  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_spin_unlock_bh_cmd_resp_wqlock_of_octeon_device(spinlock_t *lock)
{
  #line 971 
  ldv_spin_model_unlock((char *)"cmd_resp_wqlock_of_octeon_device");
  #line 973 
  spin_unlock_bh(lock);
  #line 974 
  return;
}

#line 977  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_spin_lock_NOT_ARG_SIGN(spinlock_t *lock)
{
  #line 980 
  ldv_spin_model_lock((char *)"NOT_ARG_SIGN");
  #line 982 
  spin_lock(lock);
  #line 983 
  return;
}

#line 986  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_spin_unlock_NOT_ARG_SIGN(spinlock_t *lock)
{
  #line 989 
  ldv_spin_model_unlock((char *)"NOT_ARG_SIGN");
  #line 991 
  spin_unlock(lock);
  #line 992 
  return;
}

#line 995  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay)
{
  #line 999 
  return emg_schedule_delayed_work(dwork,delay);
}

#line 1003  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 1007 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 1011  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1015 
  return emg_register_netdev(dev);
}

#line 1019  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1023 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1027  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_vf_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1031 
  emg_pci_unregister_driver(dev);
  #line 1032 
  return;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w)
{
  #line 72 
  unsigned long tmp_0;
  #line 72 
  if (0 != 0) 
              #line 72 
              tmp_0 = (unsigned long)((((unsigned int)((((((((((unsigned long long)w & 1ULL) != 0ULL) + (((unsigned long long)w & 2ULL) != 0ULL)) + (((unsigned long long)w & 4ULL) != 0ULL)) + (((unsigned long long)w & 8ULL) != 0ULL)) + (((unsigned long long)w & 16ULL) != 0ULL)) + (((unsigned long long)w & 32ULL) != 0ULL)) + (((unsigned long long)w & 64ULL) != 0ULL)) + (((unsigned long long)w & 128ULL) != 0ULL)) + (unsigned int)(((((((((w & 256UL) != 0UL) + ((w & 512UL) != 0UL)) + ((w & 1024UL) != 0UL)) + ((w & 2048UL) != 0UL)) + ((w & 4096UL) != 0UL)) + ((w & 8192UL) != 0UL)) + ((w & 16384UL) != 0UL)) + ((w & 32768UL) != 0UL))) + ((unsigned int)(((((((((w & 65536UL) != 0UL) + ((w & 131072UL) != 0UL)) + ((w & 262144UL) != 0UL)) + ((w & 524288UL) != 0UL)) + ((w & 1048576UL) != 0UL)) + ((w & 2097152UL) != 0UL)) + ((w & 4194304UL) != 0UL)) + ((w & 8388608UL) != 0UL)) + (unsigned int)(((((((((w & 16777216UL) != 0UL) + ((w & 33554432UL) != 0UL)) + ((w & 67108864UL) != 0UL)) + ((w & 134217728UL) != 0UL)) + ((w & 268435456UL) != 0UL)) + ((w & 536870912UL) != 0UL)) + ((w & 1073741824UL) != 0UL)) + ((w & 2147483648UL) != 0UL)))) + (((unsigned int)(((((((((w & 4294967296UL) != 0UL) + ((w & 8589934592UL) != 0UL)) + ((w & 17179869184UL) != 0UL)) + ((w & 34359738368UL) != 0UL)) + ((w & 68719476736UL) != 0UL)) + ((w & 137438953472UL) != 0UL)) + ((w & 274877906944UL) != 0UL)) + ((w & 549755813888UL) != 0UL)) + (unsigned int)(((((((((w & 1099511627776UL) != 0UL) + ((w & 2199023255552UL) != 0UL)) + ((w & 4398046511104UL) != 0UL)) + ((w & 8796093022208UL) != 0UL)) + ((w & 17592186044416UL) != 0UL)) + ((w & 35184372088832UL) != 0UL)) + ((w & 70368744177664UL) != 0UL)) + ((w & 140737488355328UL) != 0UL))) + ((unsigned int)(((((((((w & 281474976710656UL) != 0UL) + ((w & 562949953421312UL) != 0UL)) + ((w & 1125899906842624UL) != 0UL)) + ((w & 2251799813685248UL) != 0UL)) + ((w & 4503599627370496UL) != 0UL)) + ((w & 9007199254740992UL) != 0UL)) + ((w & 18014398509481984UL) != 0UL)) + ((w & 36028797018963968UL) != 0UL)) + (unsigned int)(((((((((w & 72057594037927936UL) != 0UL) + ((w & 144115188075855872UL) != 0UL)) + ((w & 288230376151711744UL) != 0UL)) + ((w & 576460752303423488UL) != 0UL)) + ((w & 1152921504606846976UL) != 0UL)) + ((w & 2305843009213693952UL) != 0UL)) + ((w & 4611686018427387904UL) != 0UL)) + ((w & 9223372036854775808UL) != 0UL))))); else 
                                                                    #line 72 
                                                                    tmp_0 = __arch_hweight64((unsigned long long)w);
  #line 72 
  return tmp_0;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_vf_device.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 151 
int __bitmap_weight(unsigned long *, unsigned int);
#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long *src, unsigned int nbits)
{
  #line 390 
  if (0 != 0 && nbits + 4294967295U <= 63U) {
    #line 391 
    return (int)hweight_long(*src & (18446744073709551615UL >> (- nbits & 63U)));
  }
  #line 392 
  return __bitmap_weight(src,nbits);
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_1853 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set_0(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_1855 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set_0(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set_0(v,i);
  #line 46 
  return;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 92 
#line 92 
extern struct cpumask __cpu_present_mask;
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask *srcp)
{
  #line 556 
  return (unsigned int)bitmap_weight((unsigned long *)(& srcp->bits),nr_cpu_ids);
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 21 
void *ldv_vmalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 680  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_vf_device.i.aux"
static bool cif_schedule_delayed_work_0(struct delayed_work *dwork, unsigned long delay);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 206 
#line 206 
void *ioremap(resource_size_t, unsigned long);
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_vf_device.i.aux"
static void *cif_vmalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_vf_device.i.aux"
static void cif_vfree(void *addr);
#line 1284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1284 
int pci_request_region(struct pci_dev *, int, char *);
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
#line 892 
void *oct_get_config_info(struct octeon_device *oct, u16 card_type);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.h"
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
u32 cn23xx_vf_get_oq_ticks(struct octeon_device *oct, u32 time_intr_in_us);
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
__inline static void octeon_unmap_pci_barx_0(struct octeon_device *oct, int baridx)
{
  {
    #line 94 
    bool branch;
    #line 94 
    struct _ddebug __UNIQUE_ID_ddebug438 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_unmap_pci_barx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h", .format = (char *)"Freeing PCI mapped regions for Bar%d\n", .lineno = (unsigned int)94U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 94 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug438.key.dd_key_false.key,(_Bool)0);
    #line 94 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 94 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug438,& (oct->pci_dev)->dev,(char *)"Freeing PCI mapped regions for Bar%d\n",baridx);
  }
  #line 97 
  if (oct->mmio[baridx].done != 0U) 
                                    #line 98 
                                    iounmap((void *)oct->mmio[baridx].hw_addr);
  #line 100 
  if (oct->mmio[baridx].start != 0ULL) 
                                       #line 101 
                                       pci_release_region(oct->pci_dev,baridx * 2);
  #line 102 
  return;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
__inline static int octeon_map_pci_barx(struct octeon_device *oct, int baridx, int max_map_len)
{
  #line 113 
  u32 mapped_len = 0U;
  #line 115 
  if (pci_request_region(oct->pci_dev,baridx * 2,(char *)"LiquidIO") != 0) {
    #line 116 
    _dev_err(& (oct->pci_dev)->dev,(char *)"pci_request_region failed for bar %d\n",baridx);
    #line 118 
    return 1;
  }
  #line 121 
  oct->mmio[baridx].start = (oct->pci_dev)->resource[baridx * 2].start;
  #line 122 
  if ((oct->pci_dev)->resource[baridx * 2].start != 0ULL || (oct->pci_dev)->resource[baridx * 2].end != (oct->pci_dev)->resource[baridx * 2].start) 
    #line 122 
    oct->mmio[baridx].len = ((unsigned int)(oct->pci_dev)->resource[baridx * 2].end - (unsigned int)(oct->pci_dev)->resource[baridx * 2].start) + 1U; else 
                                                                    #line 122 
                                                                    oct->mmio[baridx].len = 0U;
  #line 124 
  mapped_len = oct->mmio[baridx].len;
  #line 125 
  if (mapped_len == 0U) 
                        #line 126 
                        goto err_release_region;
  #line 128 
  if (max_map_len != 0 && mapped_len > (unsigned int)max_map_len) 
                                                                  #line 129 
                                                                  mapped_len = (unsigned int)max_map_len;
  #line 132 
  oct->mmio[baridx].hw_addr = (u8 *)ioremap(oct->mmio[baridx].start,(unsigned long)mapped_len);
  #line 133 
  oct->mmio[baridx].mapped_len = mapped_len;
  {
    #line 135 
    bool branch;
    #line 135 
    struct _ddebug __UNIQUE_ID_ddebug439 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_map_pci_barx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h", .format = (char *)"BAR%d start: 0x%llx mapped %u of %u bytes\n", .lineno = (unsigned int)135U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 135 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug439.key.dd_key_false.key,(_Bool)0);
    #line 135 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 135 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug439,& (oct->pci_dev)->dev,(char *)"BAR%d start: 0x%llx mapped %u of %u bytes\n",baridx,oct->mmio[baridx].start,mapped_len,oct->mmio[baridx].len);
  }
  #line 139 
  if (oct->mmio[baridx].hw_addr == (u8 *)0U) {
    #line 140 
    _dev_err(& (oct->pci_dev)->dev,(char *)"error ioremap for bar %d\n",baridx);
    #line 142 
    goto err_release_region;
  }
  #line 144 
  oct->mmio[baridx].done = 1U;
  #line 146 
  return 0;
  #line 148 
  err_release_region: 
                      #line 148 
  ;
  #line 149 
  pci_release_region(oct->pci_dev,baridx * 2);
  #line 150 
  return 1;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.h"
#line 116 
int octeon_mbox_read(struct octeon_mbox *mbox);
#line 117 
#line 117 
int octeon_mbox_write(struct octeon_device *oct, struct octeon_mbox_cmd *mbox_cmd);
#line 119 
#line 119 
int octeon_mbox_process_message(struct octeon_mbox *mbox);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
u32 cn23xx_vf_get_oq_ticks(struct octeon_device *oct, u32 time_intr_in_us)
{
  #line 33 
  u32 oqticks_per_us = (unsigned int)oct->pfvf_hsword.coproc_tics_per_us;
  #line 36 
  oqticks_per_us *= 1000U;
  #line 39 
  oqticks_per_us /= 1024U;
  #line 44 
  oqticks_per_us *= time_intr_in_us;
  #line 45 
  oqticks_per_us /= 1000U;
  #line 47 
  return oqticks_per_us;
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static int cn23xx_vf_reset_io_queues(struct octeon_device *oct, u32 num_queues)
{
  #line 54 
  u32 q_no;
  #line 55 
  u64 d64;
  #line 52 
  u32 loop = 10000U;
  #line 53 
  int ret_val = 0;
  #line 57 
  q_no = 0U;
  #line 57 
  while (q_no < num_queues) {
    #line 59 
    d64 = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
    #line 61 
    d64 |= 8388608ULL;
    #line 62 
    writeq(d64,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
    #line 57 
    q_no ++;
  }
  #line 67 
  q_no = 0U;
  #line 67 
  while (q_no < num_queues) {
    {
      #line 86 
      union __anonunion___u_2510 __u_4;
      #line 91 
      union __anonunion___u_2514 __u_6;
      #line 68 
      u64 reg_val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
      #line 70 
      while (1) {
        #line 71 
        union __anonunion___u_2502 __u_0;
        #line 70 
        __read_once_size((void *)(& reg_val),(void *)(& __u_0.__c),8);
        #line 70 
        if (((__u_0.__val) & 8388608ULL) != 0ULL) {
          #line 72 
          union __anonunion___u_2504 __u_1;
          #line 71 
          __read_once_size((void *)(& reg_val),(void *)(& __u_1.__c),8);
          #line 70 
          if (((__u_1.__val) & 268435456ULL) == 0ULL) {
            #line 71 
            if (! (loop != 0U)) 
                                #line 70 
                                break;
          }
          else 
               #line 70 
               break;
        }
        else 
             #line 70 
             break;
        {
          #line 74 
          union __anonunion___u_2500 __u = {.__val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)))};
          #line 73 
          __write_once_size((void *)(& reg_val),(void *)(& __u.__c),8);
          #line 73 
          u64 tmp_2 = __u.__val;
        }
        #line 75 
        loop --;
      }
      #line 77 
      if (loop == 0U) {
        #line 78 
        _dev_err(& (oct->pci_dev)->dev,(char *)"clearing the reset reg failed or setting the quiet reg failed for qno: %u\n",q_no);
        #line 81 
        return -1;
      }
      {
        #line 84 
        union __anonunion___u_2508 __u_3;
        #line 83 
        __read_once_size((void *)(& reg_val),(void *)(& __u_3.__c),8);
        #line 84 
        union __anonunion___u_2506 __u_2 = {.__val = (__u_3.__val) & 18446744073701163007ULL};
        #line 83 
        __write_once_size((void *)(& reg_val),(void *)(& __u_2.__c),8);
        #line 83 
        u64 tmp_4 = __u_2.__val;
      }
      #line 85 
      ;
      #line 85 
      __read_once_size((void *)(& reg_val),(void *)(& __u_4.__c),8);
      #line 85 
      writeq((__u_4.__val),(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
      {
        #line 89 
        union __anonunion___u_2512 __u_5 = {.__val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)))};
        #line 88 
        __write_once_size((void *)(& reg_val),(void *)(& __u_5.__c),8);
        #line 88 
        u64 tmp_6 = __u_5.__val;
      }
      #line 90 
      __read_once_size((void *)(& reg_val),(void *)(& __u_6.__c),8);
      #line 90 
      if (((__u_6.__val) & 8388608ULL) != 0ULL) {
        #line 91 
        _dev_err(& (oct->pci_dev)->dev,(char *)"clearing the reset failed for qno: %u\n",q_no);
        #line 94 
        ret_val = -1;
      }
    }
    #line 67 
    q_no ++;
  }
  #line 98 
  return ret_val;
}

#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static int cn23xx_vf_setup_global_input_regs(struct octeon_device *oct)
{
  #line 104 
  struct octeon_instr_queue *iq;
  #line 105 
  u64 q_no;
  #line 105 
  u64 intr_threshold;
  #line 106 
  u64 d64;
  #line 103 
  struct octeon_cn23xx_vf *cn23xx = (struct octeon_cn23xx_vf *)oct->chip;
  #line 108 
  if (cn23xx_vf_reset_io_queues(oct,oct->sriov_info.rings_per_vf) != 0) 
    #line 109 
    return -1;
  #line 111 
  q_no = 0ULL;
  #line 111 
  while ((unsigned long long)oct->sriov_info.rings_per_vf > q_no) {
    {
      #line 112 
      void *inst_cnt_reg;
      #line 114 
      writeq(4294967295ULL,(void *)(oct->mmio[0].hw_addr + (q_no * 131072ULL + 65568ULL)));
      #line 116 
      iq = oct->instr_queue[q_no];
      #line 118 
      if (iq != (struct octeon_instr_queue *)0) 
                                                #line 119 
                                                inst_cnt_reg = iq->inst_cnt_reg; else 
                                                                    #line 121 
                                                                    inst_cnt_reg = (void *)(oct->mmio[0].hw_addr + (q_no * 131072ULL + 65600ULL));
      #line 124 
      d64 = readq((void *)(oct->mmio[0].hw_addr + (q_no * 131072ULL + 65600ULL)));
      #line 127 
      d64 &= 17293822569102704639ULL;
      #line 129 
      writeq(d64,(void *)(oct->mmio[0].hw_addr + (q_no * 131072ULL + 65600ULL)));
      #line 135 
      writeq(100663376ULL,(void *)(oct->mmio[0].hw_addr + (q_no * 131072ULL + 65536ULL)));
      #line 139 
      intr_threshold = (unsigned long long)(cn23xx->conf)->iq.iq_intr_pkt;
      #line 142 
      ;
      #line 142 
      ;
      #line 142 
      writeq((readq(inst_cnt_reg) & 18446462603027808255ULL) | (intr_threshold << 32),inst_cnt_reg);
    }
    #line 111 
    q_no ++;
  }
  #line 148 
  return 0;
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static void cn23xx_vf_setup_global_output_regs(struct octeon_device *oct)
{
  #line 153 
  u32 reg_val;
  #line 154 
  u32 q_no;
  #line 156 
  q_no = 0U;
  #line 156 
  while (oct->sriov_info.rings_per_vf > q_no) {
    #line 157 
    writel(4294967295U,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65664U)));
    #line 160 
    reg_val = readl((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65712U)));
    #line 163 
    reg_val = reg_val;
    #line 165 
    reg_val = readl((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65616U)));
    #line 169 
    reg_val &= 4294965247U;
    #line 172 
    reg_val |= 64U;
    #line 175 
    reg_val &= 4294967263U;
    #line 180 
    reg_val &= 4294967293U;
    #line 181 
    reg_val &= 4294967291U;
    #line 184 
    reg_val &= 4294967287U;
    #line 191 
    reg_val &= 4294967167U;
    #line 192 
    reg_val &= 4294967039U;
    #line 194 
    reg_val |= 512U;
    #line 197 
    writel(reg_val,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65616U)));
    #line 156 
    q_no ++;
  }
  #line 199 
  return;
}

#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static int cn23xx_setup_vf_device_regs(struct octeon_device *oct)
{
  #line 204 
  if (cn23xx_vf_setup_global_input_regs(oct) != 0) 
                                                   #line 205 
                                                   return -1;
  #line 207 
  cn23xx_vf_setup_global_output_regs(oct);
  #line 209 
  return 0;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static void cn23xx_setup_vf_iq_regs(struct octeon_device *oct, u32 iq_no)
{
  #line 215 
  u64 pkt_in_done;
  #line 214 
  struct octeon_instr_queue *iq = oct->instr_queue[iq_no];
  #line 218 
  writeq(iq->base_addr_dma,(void *)(oct->mmio[0].hw_addr + (unsigned long)(iq_no * 131072U + 65552U)));
  #line 220 
  writel(iq->max_count,(void *)(oct->mmio[0].hw_addr + (unsigned long)(iq_no * 131072U + 65584U)));
  #line 225 
  iq->doorbell_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)(iq_no * 131072U + 65568U));
  #line 227 
  iq->inst_cnt_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)(iq_no * 131072U + 65600U));
  {
    #line 229 
    bool branch;
    #line 229 
    struct _ddebug __UNIQUE_ID_ddebug440 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_setup_vf_iq_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c", .format = (char *)"InstQ[%d]:dbell reg @ 0x%p instcnt_reg @ 0x%p\n", .lineno = (unsigned int)229U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 229 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug440.key.dd_key_false.key,(_Bool)0);
    #line 229 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 229 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug440,& (oct->pci_dev)->dev,(char *)"InstQ[%d]:dbell reg @ 0x%p instcnt_reg @ 0x%p\n",iq_no,iq->doorbell_reg,iq->inst_cnt_reg);
  }
  #line 235 
  pkt_in_done = readq(iq->inst_cnt_reg);
  #line 237 
  if (oct->msix_on != 0) 
                         #line 239 
                         writeq(pkt_in_done | 281474976710656ULL,iq->inst_cnt_reg);
  #line 242 
  iq->reset_instr_cnt = 0U;
  #line 243 
  return;
}

#line 245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static void cn23xx_setup_vf_oq_regs(struct octeon_device *oct, u32 oq_no)
{
  #line 247 
  struct octeon_droq *droq = oct->droq[oq_no];
  #line 249 
  writeq((unsigned long long)droq->desc_ring_dma,(void *)(oct->mmio[0].hw_addr + (unsigned long)(oq_no * 131072U + 65648U)));
  #line 251 
  writel(droq->max_count,(void *)(oct->mmio[0].hw_addr + (unsigned long)(oq_no * 131072U + 65680U)));
  #line 253 
  writel(droq->buffer_size,(void *)(oct->mmio[0].hw_addr + (unsigned long)(oq_no * 131072U + 65632U)));
  #line 257 
  droq->pkts_sent_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)(oq_no * 131072U + 65712U));
  #line 259 
  droq->pkts_credit_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)(oq_no * 131072U + 65664U));
  #line 261 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static void cn23xx_vf_mbox_thread(struct work_struct *work)
{
  #line 265 
  struct cavium_wk *wk = (struct cavium_wk *)work;
  #line 266 
  struct octeon_mbox *mbox = (struct octeon_mbox *)wk->ctxptr;
  #line 268 
  octeon_mbox_process_message(mbox);
  #line 269 
  return;
}

#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static int cn23xx_free_vf_mbox(struct octeon_device *oct)
{
  #line 273 
  cancel_delayed_work_sync(& (oct->mbox[0])->mbox_poll_wk.work);
  #line 274 
  cif_vfree((void *)oct->mbox[0]);
  #line 275 
  return 0;
}

#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static int cn23xx_setup_vf_mbox(struct octeon_device *oct)
{
  #line 280 
  struct octeon_mbox *mbox = (struct octeon_mbox *)0;
  #line 282 
  mbox = (struct octeon_mbox *)cif_vmalloc(904UL);
  #line 283 
  if (mbox == (struct octeon_mbox *)0) 
                                       #line 284 
                                       return 1;
  #line 286 
  memset((void *)mbox,0,904UL);
  #line 288 
  spinlock_check(& mbox->lock);
  {
    #line 288 
    struct lock_class_key __key;
    #line 288 
    __raw_spin_lock_init(& mbox->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&mbox->lock)->rlock",& __key);
  }
  #line 290 
  mbox->oct_dev = oct;
  #line 292 
  mbox->q_no = 0U;
  #line 294 
  mbox->state = OCTEON_MBOX_STATE_IDLE;
  #line 297 
  mbox->mbox_int_reg = (void *)(oct->mmio[0].hw_addr + 66064U);
  #line 300 
  mbox->mbox_read_reg = (void *)(oct->mmio[0].hw_addr + 66048U);
  #line 303 
  mbox->mbox_write_reg = (void *)(oct->mmio[0].hw_addr + 66056U);
  {
    #line 306 
    struct lock_class_key __key_0;
    #line 306 
    __init_work(& mbox->mbox_poll_wk.work.work,0);
    #line 306 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 306 
    mbox->mbox_poll_wk.work.work.data = __constr_expr_34;
    #line 306 
    lockdep_init_map(& mbox->mbox_poll_wk.work.work.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 306 
    INIT_LIST_HEAD_0(& mbox->mbox_poll_wk.work.work.entry);
    #line 306 
    mbox->mbox_poll_wk.work.work.func = & cn23xx_vf_mbox_thread;
  }
  {
    #line 306 
    struct lock_class_key __key_1;
    #line 306 
    init_timer_key(& mbox->mbox_poll_wk.work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&mbox->mbox_poll_wk.work)->timer",& __key_1);
  }
  #line 309 
  mbox->mbox_poll_wk.ctxptr = (void *)mbox;
  #line 311 
  oct->mbox[0] = mbox;
  #line 313 
  writeq(1234605616436508552ULL,mbox->mbox_read_reg);
  #line 315 
  return 0;
}

#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static int cn23xx_enable_vf_io_queues(struct octeon_device *oct)
{
  #line 320 
  u32 q_no;
  #line 322 
  q_no = 0U;
  #line 322 
  while (oct->num_iqs > q_no) {
    {
      #line 323 
      u64 reg_val;
      #line 326 
      if (((oct->io_qmask.iq64B >> q_no) & 1ULL) != 0ULL) {
        #line 327 
        reg_val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
        #line 329 
        reg_val |= 16777216ULL;
        #line 330 
        writeq(reg_val,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
      }
      #line 335 
      if (((oct->io_qmask.iq >> q_no) & 1ULL) != 0ULL) {
        #line 336 
        reg_val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
        #line 338 
        reg_val |= 4194304ULL;
        #line 339 
        writeq(reg_val,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
      }
    }
    #line 322 
    q_no ++;
  }
  #line 343 
  q_no = 0U;
  #line 343 
  while (oct->num_oqs > q_no) {
    {
      #line 344 
      u32 reg_val_0;
      #line 347 
      if (((oct->io_qmask.oq >> q_no) & 1ULL) != 0ULL) {
        #line 348 
        reg_val_0 = readl((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65616U)));
        #line 350 
        reg_val_0 |= 1U;
        #line 351 
        writel(reg_val_0,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65616U)));
      }
    }
    #line 343 
    q_no ++;
  }
  #line 356 
  return 0;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static void cn23xx_disable_vf_io_queues(struct octeon_device *oct)
{
  #line 361 
  u32 num_queues = oct->num_iqs;
  #line 366 
  if (oct->num_oqs > num_queues) 
                                 #line 367 
                                 num_queues = oct->num_oqs;
  #line 369 
  cn23xx_vf_reset_io_queues(oct,num_queues);
  #line 370 
  return;
}

#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
void cn23xx_vf_ask_pf_to_do_flr(struct octeon_device *oct)
{
  #line 374 
  struct octeon_mbox_cmd mbox_cmd;
  #line 376 
  mbox_cmd.msg.u64 = 0ULL;
  #line 377 
  mbox_cmd.msg.s.type = (unsigned short)0U;
  #line 378 
  mbox_cmd.msg.s.resp_needed = (unsigned short)0U;
  #line 379 
  mbox_cmd.msg.s.cmd = (unsigned short)2U;
  #line 380 
  mbox_cmd.msg.s.len = (unsigned short)1U;
  #line 381 
  mbox_cmd.q_no = 0U;
  #line 382 
  mbox_cmd.recv_len = 0U;
  #line 383 
  mbox_cmd.recv_status = 0U;
  #line 384 
  mbox_cmd.fn = (void (*)(void *, void *, void *))0;
  #line 385 
  mbox_cmd.fn_arg = (void *)0;
  #line 387 
  octeon_mbox_write(oct,& mbox_cmd);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static void octeon_pfvf_hs_callback(struct octeon_device *oct, struct octeon_mbox_cmd *cmd, void *arg)
{
  #line 394 
  u32 major = 0U;
  #line 396 
  memcpy((void *)(& oct->pfvf_hsword),(void *)(& cmd->msg.s.params),6UL);
  #line 398 
  if (cmd->recv_len > 1U) {
    #line 399 
    major = (unsigned int)((struct lio_version *)(& cmd->data))->major;
    #line 400 
    major <<= 16;
  }
  #line 403 
  atomic_set_0((atomic_t *)arg,(int)(major | 1U));
  #line 404 
  return;
}

#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
int cn23xx_octeon_pfvf_handshake(struct octeon_device *oct)
{
  #line 408 
  struct octeon_mbox_cmd mbox_cmd;
  #line 409 
  u32 q_no;
  #line 410 
  atomic_t status;
  #line 411 
  u32 pfmajor;
  #line 412 
  u32 vfmajor;
  #line 413 
  u32 ret;
  #line 409 
  u32 count = 0U;
  {
    #line 416 
    bool branch;
    #line 416 
    struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_octeon_pfvf_handshake", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c", .format = (char *)"requesting info from pf\n", .lineno = (unsigned int)416U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 416 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
    #line 416 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 416 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug441,& (oct->pci_dev)->dev,(char *)"requesting info from pf\n");
  }
  #line 418 
  mbox_cmd.msg.u64 = 0ULL;
  #line 419 
  mbox_cmd.msg.s.type = (unsigned short)0U;
  #line 420 
  mbox_cmd.msg.s.resp_needed = (unsigned short)1U;
  #line 421 
  mbox_cmd.msg.s.cmd = (unsigned short)1U;
  #line 422 
  mbox_cmd.msg.s.len = (unsigned short)2U;
  #line 423 
  mbox_cmd.data[0] = 0ULL;
  #line 424 
  ((struct lio_version *)(& mbox_cmd.data[0]))->major = (unsigned short)1U;
  #line 426 
  ((struct lio_version *)(& mbox_cmd.data[0]))->minor = (unsigned short)7U;
  #line 428 
  ((struct lio_version *)(& mbox_cmd.data[0]))->micro = (unsigned short)2U;
  #line 430 
  mbox_cmd.q_no = 0U;
  #line 431 
  mbox_cmd.recv_len = 0U;
  #line 432 
  mbox_cmd.recv_status = 0U;
  #line 433 
  mbox_cmd.fn = (void (*)(void *, void *, void *))(& octeon_pfvf_hs_callback);
  #line 434 
  mbox_cmd.fn_arg = (void *)(& status);
  #line 436 
  octeon_mbox_write(oct,& mbox_cmd);
  #line 438 
  atomic_set_0(& status,0);
  #line 440 
  while (1) {
    #line 441 
    schedule_timeout_uninterruptible(1L);
    #line 441 
    if (atomic_read_0(& status) == 0) {
      #line 442 
      u32 tmp_1;
      #line 442 
      tmp_1 = count;
      #line 442 
      count ++;
      #line 442 
      ;
      #line 442 
      if (! (tmp_1 <= 99999U)) 
                               #line 440 
                               break;
    }
    else 
         #line 440 
         break;
  }
  #line 444 
  ret = (unsigned int)atomic_read_0(& status);
  #line 445 
  if (ret == 0U) {
    #line 446 
    _dev_err(& (oct->pci_dev)->dev,(char *)"octeon_pfvf_handshake timeout\n");
    #line 447 
    return 1;
  }
  #line 450 
  q_no = 0U;
  #line 450 
  while (oct->num_iqs > q_no) {
    #line 451 
    (oct->instr_queue[q_no])->txpciq.s.pkind = (unsigned long long)oct->pfvf_hsword.pkind;
    #line 450 
    q_no ++;
  }
  #line 453 
  vfmajor = 1U;
  #line 454 
  pfmajor = ret >> 16;
  #line 455 
  if (pfmajor != vfmajor) {
    #line 456 
    _dev_err(& (oct->pci_dev)->dev,(char *)"VF Liquidio driver (major version %d) is not compatible with Liquidio PF driver (major version %d)\n",vfmajor,pfmajor);
    #line 459 
    return 1;
  }
  {
    #line 462 
    bool branch_0;
    #line 462 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_octeon_pfvf_handshake", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c", .format = (char *)"VF Liquidio driver (major version %d), Liquidio PF driver (major version %d)\n", .lineno = (unsigned int)462U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 462 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 462 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 462 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug442,& (oct->pci_dev)->dev,(char *)"VF Liquidio driver (major version %d), Liquidio PF driver (major version %d)\n",vfmajor,pfmajor);
  }
  {
    #line 466 
    bool branch_1;
    #line 466 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_octeon_pfvf_handshake", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c", .format = (char *)"got data from pf pkind is %d\n", .lineno = (unsigned int)466U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 466 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 466 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 466 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug443,& (oct->pci_dev)->dev,(char *)"got data from pf pkind is %d\n",(int)oct->pfvf_hsword.pkind);
  }
  #line 469 
  return 0;
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static void cn23xx_handle_vf_mbox_intr(struct octeon_ioq_vector *ioq_vector)
{
  #line 475 
  u64 mbox_int_val;
  #line 474 
  struct octeon_device *oct = ioq_vector->oct_dev;
  #line 477 
  if (ioq_vector->droq_index == 0) {
    #line 479 
    mbox_int_val = readq((oct->mbox[0])->mbox_int_reg);
    #line 480 
    writeq(mbox_int_val,(oct->mbox[0])->mbox_int_reg);
    #line 481 
    if (octeon_mbox_read(oct->mbox[0]) != 0) {
      #line 482 
      ;
      #line 482 
      cif_schedule_delayed_work_0(& (oct->mbox[0])->mbox_poll_wk.work,msecs_to_jiffies(0U));
    }
  }
  #line 485 
  return;
}

#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static u64 cn23xx_vf_msix_interrupt_handler(void *dev)
{
  #line 492 
  u64 pkts_sent;
  #line 489 
  struct octeon_ioq_vector *ioq_vector = (struct octeon_ioq_vector *)dev;
  #line 490 
  struct octeon_device *oct = ioq_vector->oct_dev;
  #line 491 
  struct octeon_droq *droq = oct->droq[ioq_vector->droq_index];
  #line 493 
  u64 ret = 0ULL;
  {
    #line 495 
    bool branch;
    #line 495 
    struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_vf_msix_interrupt_handler", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c", .format = (char *)"In %s octeon_dev @ %p\n", .lineno = (unsigned int)495U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 495 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
    #line 495 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 495 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug444,& (oct->pci_dev)->dev,(char *)"In %s octeon_dev @ %p\n",(char *)"cn23xx_vf_msix_interrupt_handler",oct);
  }
  #line 496 
  pkts_sent = readq(droq->pkts_sent_reg);
  #line 502 
  if (pkts_sent + 18446744073709551615ULL > 18446744073709551613ULL) 
    #line 503 
    return ret;
  #line 506 
  if ((pkts_sent & 9223372036854775808ULL) != 0ULL || (pkts_sent & 4611686018427387904ULL) != 0ULL) 
    #line 508 
    if ((pkts_sent & 9223372036854775808ULL) != 0ULL) 
                                                      #line 509 
                                                      ret |= 1ULL;
  #line 512 
  if ((pkts_sent & 4611686018427387904ULL) != 0ULL) 
                                                    #line 514 
                                                    ret |= 2ULL;
  #line 516 
  if ((pkts_sent & 2305843009213693952ULL) != 0ULL) {
    #line 517 
    cn23xx_handle_vf_mbox_intr(ioq_vector);
    #line 518 
    ret |= 4ULL;
  }
  #line 521 
  return ret;
}

#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static u32 cn23xx_update_read_index(struct octeon_instr_queue *iq)
{
  #line 527 
  u32 last_done;
  #line 528 
  u32 new_idx;
  #line 526 
  u32 pkt_in_done = readl(iq->inst_cnt_reg);
  #line 530 
  last_done = pkt_in_done - iq->pkt_in_done;
  #line 531 
  iq->pkt_in_done = pkt_in_done;
  #line 537 
  new_idx = (iq->octeon_read_index + last_done) % iq->max_count;
  #line 541 
  return new_idx;
}

#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static void cn23xx_enable_vf_interrupt(struct octeon_device *oct, u8 intr_flag)
{
  #line 547 
  u32 q_no;
  #line 547 
  u32 time_threshold;
  #line 546 
  struct octeon_cn23xx_vf *cn23xx = (struct octeon_cn23xx_vf *)oct->chip;
  #line 549 
  if (((int)intr_flag & 2) != 0) {
    #line 550 
    q_no = 0U;
    #line 550 
    while (oct->num_oqs > q_no) {
      #line 554 
      time_threshold = cn23xx_vf_get_oq_ticks(oct,(unsigned int)(cn23xx->conf)->oq.oq_intr_time);
      #line 557 
      writeq((unsigned long long)(cn23xx->conf)->oq.oq_intr_pkt | ((unsigned long long)time_threshold << 32),(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65696U)));
      #line 550 
      q_no ++;
    }
  }
  #line 564 
  if (((int)intr_flag & 1) != 0) {
    #line 565 
    q_no = 0U;
    #line 565 
    while (oct->num_oqs > q_no) {
      #line 567 
      ;
      #line 567 
      writeq((readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65600U))) & 18446462594437873664ULL) | 281474976710656ULL,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65600U)));
      #line 565 
      q_no ++;
    }
  }
  #line 577 
  if (((int)intr_flag & 4) != 0) {
    #line 578 
    ;
    #line 578 
    writeq(readq((void *)(oct->mmio[0].hw_addr + 66064U)) | 1ULL,(void *)(oct->mmio[0].hw_addr + 66064U));
  }
  #line 579 
  return;
}

#line 585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
static void cn23xx_disable_vf_interrupt(struct octeon_device *oct, u8 intr_flag)
{
  #line 587 
  u32 q_no;
  #line 589 
  if (((int)intr_flag & 2) != 0) {
    #line 590 
    q_no = 0U;
    #line 590 
    while (oct->num_oqs > q_no) {
      #line 592 
      writeq(18014398509481983ULL,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65696U)));
      #line 590 
      q_no ++;
    }
  }
  #line 597 
  if (((int)intr_flag & 1) != 0) {
    #line 598 
    q_no = 0U;
    #line 598 
    while (oct->num_oqs > q_no) {
      #line 599 
      ;
      #line 599 
      writeq(readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65600U))) & 18446462594437873664ULL,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65600U)));
      #line 598 
      q_no ++;
    }
  }
  #line 608 
  if (((int)intr_flag & 4) != 0) {
    #line 609 
    ;
    #line 609 
    writeq(readq((void *)(oct->mmio[0].hw_addr + 66064U)) & 18446744073709551614ULL,(void *)(oct->mmio[0].hw_addr + 66064U));
  }
  #line 610 
  return;
}

#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c"
int cn23xx_setup_octeon_vf_device(struct octeon_device *oct)
{
  #line 619 
  u32 rings_per_vf;
  #line 620 
  u64 reg_val;
  #line 618 
  struct octeon_cn23xx_vf *cn23xx = (struct octeon_cn23xx_vf *)oct->chip;
  #line 622 
  if (octeon_map_pci_barx(oct,0,0) != 0) 
                                         #line 623 
                                         return 1;
  #line 626 
  reg_val = readq((void *)(oct->mmio[0].hw_addr + 65536U));
  #line 628 
  oct->pf_num = (unsigned short)((unsigned int)((unsigned short)(reg_val >> 45)) & 7U);
  #line 630 
  oct->vf_num = (unsigned short)((unsigned int)((unsigned short)(reg_val >> 32)) & 8191U);
  #line 633 
  reg_val >>= 48;
  #line 635 
  rings_per_vf = (unsigned int)reg_val & 63U;
  #line 637 
  cn23xx->conf = (struct octeon_config *)oct_get_config_info(oct,(unsigned short)3);
  #line 638 
  if (cn23xx->conf == (struct octeon_config *)0) {
    #line 639 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s No Config found for CN23XX\n",(char *)"cn23xx_setup_octeon_vf_device");
    #line 641 
    octeon_unmap_pci_barx_0(oct,0);
    #line 642 
    return 1;
  }
  #line 645 
  if (oct->sriov_info.rings_per_vf > rings_per_vf) {
    #line 646 
    _dev_warn(& (oct->pci_dev)->dev,(char *)"num_queues:%d greater than PF configured rings_per_vf:%d. Reducing to %d.\n",oct->sriov_info.rings_per_vf,rings_per_vf,rings_per_vf);
    #line 650 
    oct->sriov_info.rings_per_vf = rings_per_vf;
  }
  else {
    #line 652 
    ;
    #line 652 
    if (cpumask_weight(& __cpu_present_mask) < rings_per_vf) {
      #line 653 
      ;
      #line 653 
      ;
      #line 653 
      _dev_warn(& (oct->pci_dev)->dev,(char *)"PF configured rings_per_vf:%d greater than num_cpu:%d. Using rings_per_vf:%d equal to num cpus\n",rings_per_vf,cpumask_weight(& __cpu_present_mask),cpumask_weight(& __cpu_present_mask));
      #line 658 
      oct->sriov_info.rings_per_vf = cpumask_weight(& __cpu_present_mask);
    }
    else 
         #line 661 
         oct->sriov_info.rings_per_vf = rings_per_vf;
  }
  #line 665 
  oct->fn_list.setup_iq_regs = & cn23xx_setup_vf_iq_regs;
  #line 666 
  oct->fn_list.setup_oq_regs = & cn23xx_setup_vf_oq_regs;
  #line 667 
  oct->fn_list.setup_mbox = & cn23xx_setup_vf_mbox;
  #line 668 
  oct->fn_list.free_mbox = & cn23xx_free_vf_mbox;
  #line 670 
  oct->fn_list.msix_interrupt_handler = & cn23xx_vf_msix_interrupt_handler;
  #line 672 
  oct->fn_list.setup_device_regs = & cn23xx_setup_vf_device_regs;
  #line 673 
  oct->fn_list.update_iq_read_idx = & cn23xx_update_read_index;
  #line 675 
  oct->fn_list.enable_interrupt = & cn23xx_enable_vf_interrupt;
  #line 676 
  oct->fn_list.disable_interrupt = & cn23xx_disable_vf_interrupt;
  #line 678 
  oct->fn_list.enable_io_queues = & cn23xx_enable_vf_io_queues;
  #line 679 
  oct->fn_list.disable_io_queues = & cn23xx_disable_vf_io_queues;
  #line 681 
  return 0;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_vf_device.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 137 
  ldv_init_list_head(list);
  #line 138 
  return;
}

#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_vf_device.i.aux"
static void cif_vfree(void *addr)
{
  #line 669 
  ldv_vfree(addr);
  #line 670 
  return;
}

#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_vf_device.i.aux"
static void *cif_vmalloc(unsigned long size)
{
  #line 676 
  return ldv_vmalloc(size);
}

#line 680  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_vf_device.i.aux"
static bool cif_schedule_delayed_work_0(struct delayed_work *dwork, unsigned long delay)
{
  #line 684 
  return emg_schedule_delayed_work(dwork,delay);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/response_manager.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_2527 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_0(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_0(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_2529 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_2531 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_1(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_2581 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set_1(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_2583 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_1(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_1(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set_1(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set_1(v,i);
  #line 46 
  return;
}

#line 237 
#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/response_manager.i.aux"
static void atomic_inc_0(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/response_manager.i.aux"
static void atomic_dec_0(atomic_t *v);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/response_manager.i.aux"
static void cif_spin_lock_bh_lock_of_octeon_response_list(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 675  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/response_manager.i.aux"
static void cif_spin_unlock_bh_lock_of_octeon_response_list(spinlock_t *lock);
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
#line 118 
void complete(struct completion *);
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 312  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/response_manager.i.aux"
static bool cif_queue_delayed_work_0(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/response_manager.c"
#line 223 
static void oct_poll_req_completion(struct work_struct *work);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/response_manager.c"
int octeon_setup_response_list(struct octeon_device *oct)
{
  #line 32 
  int i;
  #line 33 
  struct cavium_wq *cwq;
  #line 32 
  int ret = 0;
  #line 35 
  i = 0;
  #line 35 
  while (i <= 5) {
    #line 36 
    INIT_LIST_HEAD_1(& oct->response_list[i].head);
    #line 37 
    spinlock_check(& oct->response_list[i].lock);
    {
      #line 37 
      struct lock_class_key __key;
      #line 37 
      __raw_spin_lock_init(& oct->response_list[i].lock.__anonCompField_spinlock_25.rlock,(char *)"&(&oct->response_list[i].lock)->rlock",& __key);
    }
    #line 38 
    atomic_set_1(& oct->response_list[i].pending_req_count,0);
    #line 35 
    i ++;
  }
  #line 40 
  spinlock_check(& oct->cmd_resp_wqlock);
  {
    #line 40 
    struct lock_class_key __key_0;
    #line 40 
    __raw_spin_lock_init(& oct->cmd_resp_wqlock.__anonCompField_spinlock_25.rlock,(char *)"&(&oct->cmd_resp_wqlock)->rlock",& __key_0);
  }
  #line 42 
  oct->dma_comp_wq.wq = alloc_workqueue((char *)"dma-comp",8U,0);
  #line 43 
  if (oct->dma_comp_wq.wq == (struct workqueue_struct *)0) {
    #line 44 
    _dev_err(& (oct->pci_dev)->dev,(char *)"failed to create wq thread\n");
    #line 45 
    return -12;
  }
  #line 48 
  cwq = & oct->dma_comp_wq;
  {
    #line 49 
    struct lock_class_key __key_1;
    #line 49 
    __init_work(& cwq->wk.work.work,0);
    #line 49 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 49 
    cwq->wk.work.work.data = __constr_expr_34;
    #line 49 
    lockdep_init_map(& cwq->wk.work.work.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 49 
    INIT_LIST_HEAD_1(& cwq->wk.work.work.entry);
    #line 49 
    cwq->wk.work.work.func = & oct_poll_req_completion;
  }
  {
    #line 49 
    struct lock_class_key __key_2;
    #line 49 
    init_timer_key(& cwq->wk.work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&cwq->wk.work)->timer",& __key_2);
  }
  #line 50 
  cwq->wk.ctxptr = (void *)oct;
  #line 51 
  oct->cmd_resp_state = 1U;
  #line 53 
  return ret;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/response_manager.c"
void octeon_delete_response_list(struct octeon_device *oct)
{
  #line 58 
  cancel_delayed_work_sync(& oct->dma_comp_wq.wk.work);
  #line 59 
  destroy_workqueue(oct->dma_comp_wq.wq);
  #line 60 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/response_manager.c"
int lio_process_ordered_list(struct octeon_device *octeon_dev, u32 force_quit)
{
  #line 65 
  struct octeon_response_list *ordered_sc_list;
  #line 66 
  struct octeon_soft_command *sc;
  #line 69 
  u32 status;
  #line 70 
  u64 status64;
  #line 67 
  int request_complete = 0;
  #line 68 
  int resp_to_process = 4096;
  #line 72 
  octeon_free_sc_done_list(octeon_dev);
  #line 74 
  ordered_sc_list = & octeon_dev->response_list[3];
  #line 76 
  while (1) {
    {
      #line 84 
      void *__mptr;
      #line 77 
      cif_spin_lock_bh_lock_of_octeon_response_list(& ordered_sc_list->lock);
      #line 79 
      if (list_empty(& ordered_sc_list->head) != 0) {
        #line 80 
        cif_spin_unlock_bh_lock_of_octeon_response_list(& ordered_sc_list->lock);
        #line 81 
        return 1;
      }
      #line 84 
      __mptr = (void *)ordered_sc_list->head.next;
      #line 84 
      sc = ((struct octeon_soft_command *)__mptr);
      #line 87 
      status = 1U;
      #line 92 
      status64 = *(sc->status_word);
      #line 94 
      if (status64 != 18446744073709551615ULL) {
        #line 102 
        if ((status64 & 255ULL) != 255ULL) {
          #line 103 
          octeon_swap_8B_data(& status64,1U);
          #line 104 
          if ((status64 & 255ULL) != 255ULL) {
            #line 106 
            status = (unsigned int)status64 & 65535U;
            #line 107 
            if (status != 0U) 
                              #line 108 
                              status |= 65536U; else 
                                                     #line 112 
                                                     status = 0U;
          }
        }
      }
      else 
        #line 116 
        if ((long)(force_quit != 0U) != 0L) 
                                            #line 116 
                                            goto _LOR;
        else {
          {
            #line 117 
            unsigned long __dummy;
            #line 117 
            unsigned long __dummy2;
            }
          #line 116 
          if (1 != 0) {
            {
              #line 117 
              unsigned long __dummy_0;
              #line 117 
              unsigned long __dummy2_0;
              }
            #line 117 
            if (1 != 0) 
              #line 117 
              if ((long)(sc->expiry_time - jiffies) < 0L) 
                #line 116 
                if (sc->expiry_time != 0UL) {
                  #line 116 
                  _LOR: {
                          #line 118 
                          struct octeon_instr_irh *irh = (struct octeon_instr_irh *)(& sc->cmd.cmd3.irh);
                          #line 121 
                          _dev_err(& (octeon_dev->pci_dev)->dev,(char *)"%s: ",(char *)"lio_process_ordered_list");
                          #line 122 
                          _dev_err(& (octeon_dev->pci_dev)->dev,(char *)"cmd %x/%x/%llx/%llx failed, ",(int)irh->opcode,(int)irh->subcode,sc->cmd.cmd3.ossp[0],sc->cmd.cmd3.ossp[1]);
                          #line 126 
                          _dev_err(& (octeon_dev->pci_dev)->dev,(char *)"timeout (%ld, %ld)\n",(long)jiffies,(long)sc->expiry_time);
                          #line 129 
                          status = 3U;
                        }
                }
          }
        }
      #line 132 
      if (status != 1U) {
        #line 133 
        sc->sc_status = status;
        #line 137 
        list_del_0(& sc->node);
        #line 138 
        atomic_dec_0(& octeon_dev->response_list[3].pending_req_count);
        #line 142 
        if (sc->callback == (void (*)(struct octeon_device *, u32 , void *))0) {
          #line 151 
          union __anonunion___u_3227 __u;
          #line 143 
          atomic_inc_0(& octeon_dev->response_list[4].pending_req_count);
          #line 146 
          list_add_tail_0(& sc->node,& octeon_dev->response_list[4].head);
          #line 150 
          __read_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
          #line 150 
          if ((long)((__u.__val) != 0) != 0L) {
            #line 154 
            if (status != 0U) {
              #line 155 
              struct octeon_instr_irh *irh_0;
              #line 157 
              irh_0 = (struct octeon_instr_irh *)(& sc->cmd.cmd3.irh);
              {
                #line 160 
                bool branch;
                #line 160 
                struct _ddebug __UNIQUE_ID_ddebug440 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"lio_process_ordered_list", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/response_manager.c", .format = (char *)"%s: sc failed: opcode=%x, ", .lineno = (unsigned int)160U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                #line 160 
                branch = arch_static_branch(& __UNIQUE_ID_ddebug440.key.dd_key_false.key,(_Bool)0);
                #line 160 
                if ((long)((long)((int)branch != 0)) != 0L) 
                                                            #line 160 
                                                            __dynamic_dev_dbg(& __UNIQUE_ID_ddebug440,& (octeon_dev->pci_dev)->dev,(char *)"%s: sc failed: opcode=%x, ",(char *)"lio_process_ordered_list",(int)irh_0->opcode);
              }
              {
                #line 164 
                bool branch_0;
                #line 164 
                struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"lio_process_ordered_list", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/response_manager.c", .format = (char *)"subcode=%x, ossp[0]=%llx, ", .lineno = (unsigned int)164U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                #line 164 
                branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
                #line 164 
                if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                              #line 164 
                                                              __dynamic_dev_dbg(& __UNIQUE_ID_ddebug441,& (octeon_dev->pci_dev)->dev,(char *)"subcode=%x, ossp[0]=%llx, ",(int)irh_0->subcode,sc->cmd.cmd3.ossp[0]);
              }
              {
                #line 169 
                bool branch_1;
                #line 169 
                struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"lio_process_ordered_list", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/response_manager.c", .format = (char *)"ossp[1]=%llx, status=%d\n", .lineno = (unsigned int)169U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                #line 169 
                branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
                #line 169 
                if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                              #line 169 
                                                              __dynamic_dev_dbg(& __UNIQUE_ID_ddebug442,& (octeon_dev->pci_dev)->dev,(char *)"ossp[1]=%llx, status=%d\n",sc->cmd.cmd3.ossp[1],status);
              }
            }
          }
          else 
               #line 176 
               complete(& sc->complete);
          #line 179 
          cif_spin_unlock_bh_lock_of_octeon_response_list(& ordered_sc_list->lock);
        }
        else {
          #line 182 
          if (status == 3U) {
            #line 183 
            atomic_inc_0(& octeon_dev->response_list[5].pending_req_count);
            #line 186 
            list_add_tail_0(& sc->node,& octeon_dev->response_list[5].head);
          }
          #line 192 
          cif_spin_unlock_bh_lock_of_octeon_response_list(& ordered_sc_list->lock);
          #line 194 
          (*(sc->callback))(octeon_dev,status,sc->callback_arg);
        }
        #line 199 
        request_complete ++;
      }
      else {
        #line 203 
        request_complete = 0;
        #line 204 
        cif_spin_unlock_bh_lock_of_octeon_response_list(& ordered_sc_list->lock);
      }
      #line 216 
      if (request_complete >= resp_to_process) 
                                               #line 217 
                                               break;
    }
    #line 218 
    if (! (request_complete != 0)) 
                                   #line 76 
                                   break;
  }
  #line 220 
  return 0;
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/response_manager.c"
static void oct_poll_req_completion(struct work_struct *work)
{
  #line 225 
  struct cavium_wk *wk = (struct cavium_wk *)work;
  #line 226 
  struct octeon_device *oct = (struct octeon_device *)wk->ctxptr;
  #line 227 
  struct cavium_wq *cwq = & oct->dma_comp_wq;
  #line 229 
  lio_process_ordered_list(oct,0U);
  #line 231 
  if (atomic_read_1(& oct->response_list[3].pending_req_count) != 0) {
    #line 233 
    ;
    #line 233 
    ;
    #line 233 
    cif_queue_delayed_work_0(cwq->wq,& cwq->wk.work,msecs_to_jiffies(1U));
  }
  #line 234 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/response_manager.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list)
{
  #line 137 
  ldv_init_list_head(list);
  #line 138 
  return;
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/response_manager.i.aux"
static void atomic_inc_0(atomic_t *v)
{
  #line 186 
  ldv_atomic_inc(v);
  #line 187 
  return;
}

#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/response_manager.i.aux"
static void atomic_dec_0(atomic_t *v)
{
  #line 193 
  ldv_atomic_dec(v);
  #line 194 
  return;
}

#line 312  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/response_manager.i.aux"
static bool cif_queue_delayed_work_0(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 316 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/response_manager.i.aux"
static void cif_spin_lock_bh_lock_of_octeon_response_list(spinlock_t *lock)
{
  #line 669 
  ldv_spin_model_lock((char *)"lock_of_octeon_response_list");
  #line 671 
  spin_lock_bh_0(lock);
  #line 672 
  return;
}

#line 675  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/response_manager.i.aux"
static void cif_spin_unlock_bh_lock_of_octeon_response_list(spinlock_t *lock)
{
  #line 678 
  ldv_spin_model_unlock((char *)"lock_of_octeon_response_list");
  #line 680 
  spin_unlock_bh_0(lock);
  #line 681 
  return;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 162 
  bool c;
  #line 163 
  ldv_inline_asm();
  #line 162 
  return c;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 83 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 84 
  return arch_test_and_clear_bit(nr,addr);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static void INIT_LIST_HEAD_2(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_1(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_3240 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_1(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_1(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_1(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_3242 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_1(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_1(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_1(struct list_head *entry)
{
  #line 139 
  __list_del_entry_1(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_2(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_3294 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_2(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_2(v);
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 25 
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 454 
void flush_workqueue(struct workqueue_struct *);
#line 511 
#line 320  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static bool cif_queue_delayed_work_1(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 698  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static bool cif_schedule_delayed_work_1(struct delayed_work *dwork, unsigned long delay);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head_0(struct page *page)
{
  #line 175 
  union __anonunion___u_3377 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_44.__anonCompField___anonunion_186_39.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
#line 60 
int smp_call_function_single_async(int, call_single_data_t *);
#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static int dev_to_node(struct device *dev)
{
  #line 1385 
  return dev->numa_node;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 682  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 690  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 674  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static void cif_tasklet_schedule_0(struct tasklet_struct *t);
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 320 
extern struct kmem_cache *kmalloc_caches[3U][14U];
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
__inline static enum kmalloc_cache_type kmalloc_type(gfp_t flags)
{
  #line 336 
  int tmp;
  #line 329 
  if ((long)((flags & 17U) == 0U) != 0L) 
                                         #line 330 
                                         return KMALLOC_NORMAL;
  #line 336 
  if ((flags & 1U) != 0U) 
                          #line 336 
                          tmp = KMALLOC_DMA; else 
                                                  #line 336 
                                                  tmp = KMALLOC_RECLAIM;
  #line 336 
  return (enum kmalloc_cache_type)tmp;
}

#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
__inline static unsigned int kmalloc_index(size_t size)
{
  #line 352 
  if (size == 0UL) 
                   #line 353 
                   return 0U;
  #line 355 
  if (size <= 8UL) 
                   #line 356 
                   return 3U;
  #line 358 
  if (size + 18446744073709551551UL <= 31UL) 
                                             #line 359 
                                             return 1U;
  #line 360 
  if (size + 18446744073709551487UL <= 63UL) 
                                             #line 361 
                                             return 2U;
  #line 362 
  if (size <= 8UL) 
                   #line 362 
                   return 3U;
  #line 363 
  if (size <= 16UL) 
                    #line 363 
                    return 4U;
  #line 364 
  if (size <= 32UL) 
                    #line 364 
                    return 5U;
  #line 365 
  if (size <= 64UL) 
                    #line 365 
                    return 6U;
  #line 366 
  if (size <= 128UL) 
                     #line 366 
                     return 7U;
  #line 367 
  if (size <= 256UL) 
                     #line 367 
                     return 8U;
  #line 368 
  if (size <= 512UL) 
                     #line 368 
                     return 9U;
  #line 369 
  if (size <= 1024UL) 
                      #line 369 
                      return 10U;
  #line 370 
  if (size <= 2048UL) 
                      #line 370 
                      return 11U;
  #line 371 
  if (size <= 4096UL) 
                      #line 371 
                      return 12U;
  #line 372 
  if (size <= 8192UL) 
                      #line 372 
                      return 13U;
  #line 373 
  if (size <= 16384UL) 
                       #line 373 
                       return 14U;
  #line 374 
  if (size <= 32768UL) 
                       #line 374 
                       return 15U;
  #line 375 
  if (size <= 65536UL) 
                       #line 375 
                       return 16U;
  #line 376 
  if (size <= 131072UL) 
                        #line 376 
                        return 17U;
  #line 377 
  if (size <= 262144UL) 
                        #line 377 
                        return 18U;
  #line 378 
  if (size <= 524288UL) 
                        #line 378 
                        return 19U;
  #line 379 
  if (size <= 1048576UL) 
                         #line 379 
                         return 20U;
  #line 380 
  if (size <= 2097152UL) 
                         #line 380 
                         return 21U;
  #line 381 
  if (size <= 4194304UL) 
                         #line 381 
                         return 22U;
  #line 382 
  if (size <= 8388608UL) 
                         #line 382 
                         return 23U;
  #line 383 
  if (size <= 16777216UL) 
                          #line 383 
                          return 24U;
  #line 384 
  if (size <= 33554432UL) 
                          #line 384 
                          return 25U;
  #line 385 
  if (size <= 67108864UL) 
                          #line 385 
                          return 26U;
  #line 387 
  ldv_inline_asm();
  #line 388 
  ldv_inline_asm();
  #line 389 
  ldv_inline_asm();
  #line 386 
  ;
  #line 389 
  return 4294967295U;
}

#line 417 
#line 417 
void *__kmalloc_node(size_t, gfp_t, int);
#line 435 
#line 435 
void *kmem_cache_alloc_node_trace(struct kmem_cache *, gfp_t, int, size_t);
#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
__inline static void *kmalloc_node(size_t size, gfp_t flags, int node)
{
  #line 567 
  if (0 != 0 && size <= 8192UL) {
    #line 569 
    unsigned int i = kmalloc_index(size);
    #line 571 
    if (i == 0U) 
                 #line 572 
                 return (void *)16;
    #line 574 
    ;
    #line 574 
    ;
    #line 574 
    ;
    #line 574 
    ;
    #line 574 
    return kmem_cache_alloc_node_trace(kmalloc_caches[(unsigned int)kmalloc_type(flags)][i],
                                    flags,node,size);
  }
  #line 579 
  return __kmalloc_node(size,flags,node);
}

#line 607 
#line 480  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 501  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
__inline static void *kzalloc_node(size_t size, gfp_t flags, int node)
{
  #line 681 
  return kmalloc_node(size,flags | 256U,node);
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count_0(struct page *page)
{
  #line 67 
  return atomic_read_2(& page->_refcount);
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int put_page_testzero_0(struct page *page)
{
  #line 592 
  if ((long)(page_ref_count_0(page) == 0) != 0L) {
    #line 592 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 593 
    ldv_inline_asm();
    #line 594 
    ldv_inline_asm();
    #line 595 
    ldv_inline_asm();
    #line 592 
    ;
  }
  #line 593 
  return page_ref_dec_and_test(page);
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void put_page_0(struct page *page)
{
  #line 1023 
  page = compound_head_0(page);
  #line 1031 
  if ((int)put_devmap_managed_page(page) != 0) 
                                               #line 1032 
                                               return;
  #line 1034 
  if (put_page_testzero_0(page) != 0) 
                                      #line 1035 
                                      __put_page(page);
  #line 1036 
  return;
}

#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1431 
void pci_disable_msi(struct pci_dev *);
#line 1436 
#line 1436 
int pci_enable_msi(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_3672 __u;
  #line 93 
  union __anonunion___u_3674 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
  #line 1407 
  return & ((struct skb_shared_info *)skb_end_pointer(skb))->hwtstamps;
}

#line 2142 
#line 2142 
void skb_add_rx_frag(struct sk_buff *, int, struct page *, int, int, unsigned int);
#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 3615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb, void *from, unsigned int len)
{
  #line 3619 
  memcpy((void *)skb->data,from,(unsigned long)len);
  #line 3620 
  return;
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 424 
#line 424 
void __napi_schedule_irqoff(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule_irqoff(struct napi_struct *n)
{
  #line 454 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 455 
                                       __napi_schedule_irqoff(n);
  #line 456 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2579 
#line 2579 
int call_netdevice_notifiers(unsigned long, struct net_device *);
#line 3094 
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit_0(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit_0(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_clear_bit(1L,& dev_queue->state) != 0) 
                                                           #line 3321 
                                                           netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3462 
#line 3462 
int netif_set_xps_queue(struct net_device *, struct cpumask *, u16);
#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.h"
#line 364 
int octeon_register_droq_ops(struct octeon_device *oct, u32 q_no, struct octeon_droq_ops *ops);
#line 402 
#line 402 
int octeon_create_droq(struct octeon_device *oct, u32 q_no, u32 num_descs, u32 desc_size, void *app_ctx);
#line 409 
#line 409 
int octeon_droq_process_poll_pkts(struct octeon_device *oct, struct octeon_droq *droq, u32 budget);
#line 412 
#line 412 
int octeon_enable_irq(struct octeon_device *oct, u32 q_no);
#line 414 
#line 414 
int octeon_retry_droq_refill(struct octeon_droq *droq);
#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_iq.h"
#line 393 
int octeon_setup_iq(struct octeon_device *oct, int ifidx, int q_index, union oct_txpciq txpciq, u32 num_descs, void *app_ctx);
#line 397 
#line 397 
int octeon_flush_iq(struct octeon_device *oct, struct octeon_instr_queue *iq, u32 napi_budget);
#line 884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
#line 884 
void octeon_set_droq_pkt_op(struct octeon_device *oct, u32 q_no, u32 enable);
#line 897 
#line 897 
struct octeon_config *octeon_get_conf(struct octeon_device *oct);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.h"
__inline static int octnet_iq_is_full_0(struct octeon_device *oct, u32 q_no)
{
  #line 114 
  ;
  #line 115 
  return (unsigned int)atomic_read_2(& (oct->instr_queue[q_no])->instr_pending) >= (oct->instr_queue[q_no])->max_count + 4294967294U;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int octeon_report_sent_bytes_to_bql(void *buf, int reqtype);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
void octeon_update_tx_completion_counters(void *buf, int reqtype, unsigned int *pkts_compl, unsigned int *bytes_compl);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
void octeon_report_tx_completion_to_bql(void *txq, unsigned int pkts_compl, unsigned int bytes_compl);
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
void octeon_pf_changed_vf_macaddr(struct octeon_device *oct, u8 *mac);
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
void octeon_schedule_rxq_oom_work(struct octeon_device *oct, struct octeon_droq *droq);
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
__inline static int wait_for_sc_completion_timeout_0(struct octeon_device *oct_dev, struct octeon_soft_command *sc, unsigned long timeout)
{
  #line 189 
  long timeout_jiff;
  #line 188 
  int errno = 0;
  #line 191 
  if (timeout != 0UL) {
    #line 192 
    timeout_jiff = (long)msecs_to_jiffies((unsigned int)timeout);
  }
  else 
       #line 194 
       timeout_jiff = 9223372036854775807L;
  #line 196 
  timeout_jiff = wait_for_completion_interruptible_timeout(& sc->complete,(unsigned long)timeout_jiff);
  #line 199 
  if (timeout_jiff == 0L) {
    #line 200 
    _dev_err(& (oct_dev->pci_dev)->dev,(char *)"%s: sc is timeout\n",(char *)"wait_for_sc_completion_timeout");
    {
      #line 203 
      union __anonunion___u_3946 __u = {.__val = 1};
      #line 202 
      __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
      #line 202 
      int tmp_2 = __u.__val;
    }
    #line 203 
    errno = -62;
  }
  else 
    #line 204 
    if (timeout_jiff == -512L) {
      #line 205 
      _dev_err(& (oct_dev->pci_dev)->dev,(char *)"%s: sc is interrupted\n",(char *)"wait_for_sc_completion_timeout");
      {
        #line 208 
        union __anonunion___u_3948 __u_0 = {.__val = 1};
        #line 207 
        __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_0.__c),4);
        #line 207 
        int tmp_4 = __u_0.__val;
      }
      #line 208 
      errno = -4;
    }
    else 
      #line 209 
      if (sc->sc_status == 3U) {
        #line 210 
        _dev_err(& (oct_dev->pci_dev)->dev,(char *)"%s: sc has fatal timeout\n",(char *)"wait_for_sc_completion_timeout");
        {
          #line 213 
          union __anonunion___u_3950 __u_1 = {.__val = 1};
          #line 212 
          __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_1.__c),4);
          #line 212 
          int tmp_6 = __u_1.__val;
        }
        #line 213 
        errno = -16;
      }
  #line 216 
  return errno;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
#line 931  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
irqreturn_t liquidio_msix_intr_handler(int irq, void *dev);
#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
#line 1591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int liquidio_get_speed(struct lio *lio);
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int liquidio_set_speed(struct lio *lio, int speed);
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
#line 1753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int liquidio_get_fec(struct lio *lio);
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
#line 1664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int liquidio_set_fec(struct lio *lio, int on_off);
#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void recv_buffer_free_0(void *buffer)
{
  #line 407 
  struct octeon_skb_page_info *pg_info;
  #line 406 
  struct sk_buff *skb = (struct sk_buff *)buffer;
  #line 409 
  pg_info = (struct octeon_skb_page_info *)(& skb->cb);
  #line 411 
  if (pg_info->page != (struct page *)0) {
    #line 412 
    put_page_0(pg_info->page);
    #line 413 
    pg_info->dma = 0ULL;
    #line 414 
    pg_info->page = (struct page *)0;
    #line 415 
    pg_info->page_offset = 0U;
  }
  #line 418 
  dev_kfree_skb_any((struct sk_buff *)buffer);
  #line 419 
  return;
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static int ifstate_check_0(struct lio *lio, int state_flag)
{
  #line 506 
  ;
  #line 506 
  return atomic_read_2(& lio->ifstate) & state_flag;
}

#line 611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static struct list_head *lio_list_delete_head_0(struct list_head *root)
{
  #line 613 
  struct list_head *node;
  #line 615 
  if (root->prev == root && root->next == root) 
                                                #line 616 
                                                node = (struct list_head *)0; else 
                                                                    #line 618 
                                                                    node = root->next;
  #line 620 
  if (node != (struct list_head *)0) 
                                     #line 621 
                                     list_del_1(node);
  #line 623 
  return node;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
void lio_delete_glists(struct lio *lio)
{
  #line 40 
  struct octnic_gather *g;
  #line 41 
  int i;
  #line 43 
  kfree((void *)lio->glist_lock);
  #line 44 
  lio->glist_lock = (spinlock_t *)0;
  #line 46 
  if (lio->glist == (struct list_head *)0) 
                                           #line 47 
                                           return;
  #line 49 
  i = 0;
  #line 49 
  while ((lio->oct_dev)->num_iqs > (unsigned int)i) {
    #line 50 
    while (1) {
      #line 51 
      g = (struct octnic_gather *)lio_list_delete_head_0(lio->glist + (unsigned long)i);
      #line 53 
      kfree((void *)g);
      #line 54 
      if (! (g != (struct octnic_gather *)0)) 
                                              #line 50 
                                              break;
    }
    #line 56 
    if (((lio->glists_virt_base != (void **)0 && *(lio->glists_virt_base + (unsigned long)i) != (void *)0) && lio->glists_dma_base != (dma_addr_t *)0ULL) && *(lio->glists_dma_base + (unsigned long)i) != 0ULL) 
      #line 58 
      dma_free_coherent(& ((lio->oct_dev)->pci_dev)->dev,(unsigned long)(lio->glist_entry_size * lio->tx_qsize),*(lio->glists_virt_base + (unsigned long)i),*(lio->glists_dma_base + (unsigned long)i));
    #line 49 
    i ++;
  }
  #line 65 
  kfree((void *)lio->glists_virt_base);
  #line 66 
  lio->glists_virt_base = (void **)0;
  #line 68 
  kfree((void *)lio->glists_dma_base);
  #line 69 
  lio->glists_dma_base = (dma_addr_t *)0ULL;
  #line 71 
  kfree((void *)lio->glist);
  #line 72 
  lio->glist = (struct list_head *)0;
  #line 73 
  return;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int lio_setup_glists(struct octeon_device *oct, struct lio *lio, int num_iqs)
{
  #line 81 
  struct octnic_gather *g;
  #line 82 
  int i;
  #line 82 
  int j;
  #line 85 
  lio->glist_lock = (spinlock_t *)kcalloc((unsigned long)num_iqs,72UL,3264U);
  #line 86 
  if (lio->glist_lock == (spinlock_t *)0) 
                                          #line 87 
                                          return -12;
  #line 90 
  lio->glist = (struct list_head *)kcalloc((unsigned long)num_iqs,16UL,3264U);
  #line 91 
  if (lio->glist == (struct list_head *)0) {
    #line 92 
    kfree((void *)lio->glist_lock);
    #line 93 
    lio->glist_lock = (spinlock_t *)0;
    #line 94 
    return -12;
  }
  #line 97 
  lio->glist_entry_size = 200U;
  #line 103 
  lio->glists_virt_base = (void **)kcalloc((unsigned long)num_iqs,8UL,3264U);
  #line 105 
  lio->glists_dma_base = (dma_addr_t *)kcalloc((unsigned long)num_iqs,8UL,3264U);
  #line 108 
  if (lio->glists_virt_base == (void **)0 || lio->glists_dma_base == (dma_addr_t *)0ULL) {
    #line 109 
    lio_delete_glists(lio);
    #line 110 
    return -12;
  }
  #line 113 
  i = 0;
  #line 113 
  while (i < num_iqs) {
    {
      #line 114 
      int numa_node = dev_to_node(& (oct->pci_dev)->dev);
      #line 116 
      spinlock_check(lio->glist_lock + (unsigned long)i);
      {
        #line 116 
        struct lock_class_key __key;
        #line 116 
        __raw_spin_lock_init(& (lio->glist_lock + (unsigned long)i)->__anonCompField_spinlock_25.rlock,(char *)"&(&lio->glist_lock[i])->rlock",& __key);
      }
      #line 118 
      INIT_LIST_HEAD_2(lio->glist + (unsigned long)i);
      #line 120 
      *(lio->glists_virt_base + (unsigned long)i) = dma_alloc_coherent(& (oct->pci_dev)->dev,(unsigned long)(lio->glist_entry_size * lio->tx_qsize),lio->glists_dma_base + (unsigned long)i,3264U);
      #line 125 
      if (*(lio->glists_virt_base + (unsigned long)i) == (void *)0) {
        #line 126 
        lio_delete_glists(lio);
        #line 127 
        return -12;
      }
      #line 130 
      j = 0;
      #line 130 
      while (lio->tx_qsize > (unsigned int)j) {
        #line 131 
        g = (struct octnic_gather *)kzalloc_node(40UL,3264U,numa_node);
        #line 133 
        if (g == (struct octnic_gather *)0) 
                                            #line 134 
                                            g = (struct octnic_gather *)kzalloc(40UL,3264U);
        #line 135 
        if (g == (struct octnic_gather *)0) 
                                            #line 136 
                                            break;
        #line 138 
        g->sg = (struct octeon_sg_entry *)(*(lio->glists_virt_base + (unsigned long)i) + (unsigned long)(lio->glist_entry_size * (unsigned int)j));
        #line 141 
        g->sg_dma_ptr = *(lio->glists_dma_base + (unsigned long)i) + (unsigned long long)(lio->glist_entry_size * (unsigned int)j);
        #line 144 
        list_add_tail_1(& g->list,lio->glist + (unsigned long)i);
        #line 130 
        j ++;
      }
      #line 147 
      if (lio->tx_qsize != (unsigned int)j) {
        #line 148 
        lio_delete_glists(lio);
        #line 149 
        return -12;
      }
    }
    #line 113 
    i ++;
  }
  #line 153 
  return 0;
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int liquidio_set_feature(struct net_device *netdev, int cmd, u16 param1)
{
  #line 160 
  struct octnic_ctrl_pkt nctrl;
  #line 158 
  struct lio *lio = netdev_priv(netdev);
  #line 159 
  struct octeon_device *oct = lio->oct_dev;
  #line 161 
  int ret = 0;
  #line 163 
  memset((void *)(& nctrl),0,328UL);
  #line 165 
  nctrl.ncmd.u64 = 0ULL;
  #line 166 
  nctrl.ncmd.s.cmd = (unsigned long long)cmd;
  #line 167 
  nctrl.ncmd.s.param1 = (unsigned long long)param1;
  #line 168 
  nctrl.iq_no = (unsigned long long)lio->linfo.txpciq[0].s.q_no;
  #line 169 
  nctrl.netpndev = (unsigned long long)netdev;
  #line 170 
  nctrl.cb_fn = & liquidio_link_ctrl_cmd_completion;
  #line 172 
  ret = octnet_send_nic_ctrl_pkt(lio->oct_dev,& nctrl);
  #line 173 
  if (ret != 0) {
    #line 174 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Feature change failed in core (ret: 0x%x)\n",ret);
    #line 176 
    if (ret > 0) 
                 #line 177 
                 ret = -5;
  }
  #line 179 
  return ret;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
void octeon_report_tx_completion_to_bql(void *txq, unsigned int pkts_compl, unsigned int bytes_compl)
{
  #line 185 
  struct netdev_queue *netdev_queue = (struct netdev_queue *)txq;
  #line 187 
  netdev_tx_completed_queue(netdev_queue,pkts_compl,bytes_compl);
  #line 188 
  return;
}

#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
void octeon_update_tx_completion_counters(void *buf, int reqtype, unsigned int *pkts_compl, unsigned int *bytes_compl)
{
  #line 194 
  struct octnet_buf_free_info *finfo;
  #line 196 
  struct octeon_soft_command *sc;
  #line 195 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 198 
  switch (reqtype) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 200 
    case 2: 
            #line 200 
    ;
    #line 201 
    finfo = (struct octnet_buf_free_info *)buf;
    #line 202 
    skb = finfo->skb;
    #line 203 
    break;
    #line 205 
    case 4: 
            #line 205 
    ;
    #line 206 
    case 3: 
            #line 206 
    ;
    #line 207 
    sc = (struct octeon_soft_command *)buf;
    #line 208 
    skb = (struct sk_buff *)sc->callback_arg;
    #line 209 
    break;
    #line 211 
    default: 
             #line 211 
    ;
    #line 212 
    return;
  }
  #line 215 
  (*pkts_compl) ++;
  #line 216 
  *bytes_compl += skb->len;
  #line 217 
  return;
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int octeon_report_sent_bytes_to_bql(void *buf, int reqtype)
{
  #line 221 
  struct octnet_buf_free_info *finfo;
  #line 222 
  struct sk_buff *skb;
  #line 223 
  struct octeon_soft_command *sc;
  #line 224 
  struct netdev_queue *txq;
  #line 226 
  switch (reqtype) {
    #line 227 
    case 1: 
            #line 227 
    ;
    #line 228 
    case 2: 
            #line 228 
    ;
    #line 229 
    finfo = (struct octnet_buf_free_info *)buf;
    #line 230 
    skb = finfo->skb;
    #line 231 
    break;
    #line 233 
    case 4: 
            #line 233 
    ;
    #line 234 
    case 3: 
            #line 234 
    ;
    #line 235 
    sc = (struct octeon_soft_command *)buf;
    #line 236 
    skb = (struct sk_buff *)sc->callback_arg;
    #line 237 
    break;
    #line 239 
    default: 
             #line 239 
    ;
    #line 240 
    return 0;
  }
  #line 243 
  ;
  #line 243 
  txq = netdev_get_tx_queue(skb->__anonCompField_sk_buff_88.__anonCompField___anonunion_519_87.__anonCompField___anonstruct_520_86.dev,(unsigned int)skb_get_queue_mapping(skb));
  #line 244 
  netdev_tx_sent_queue(txq,skb->len);
  #line 246 
  return (int)netif_xmit_stopped(txq);
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
void liquidio_link_ctrl_cmd_completion(void *nctrl_ptr)
{
  #line 255 
  u8 *mac;
  #line 251 
  struct octnic_ctrl_pkt *nctrl = (struct octnic_ctrl_pkt *)nctrl_ptr;
  #line 252 
  struct net_device *netdev = (struct net_device *)nctrl->netpndev;
  #line 253 
  struct lio *lio = netdev_priv(netdev);
  #line 254 
  struct octeon_device *oct = lio->oct_dev;
  #line 257 
  if (nctrl->sc_status != 0U) 
                              #line 258 
                              return;
  #line 260 
  switch ((int)nctrl->ncmd.s.cmd) {
    #line 261 
    case 3: 
            #line 261 
    ;
    #line 262 
    case 5: 
            #line 262 
    ;
    #line 263 
    case 27: 
             #line 263 
    ;
    #line 264 
    break;
    #line 266 
    case 2: 
            #line 266 
    ;
    #line 267 
    mac = (u8 *)(& nctrl->udd[0]) + 2U;
    #line 268 
    if ((unsigned int)nctrl->ncmd.s.param1 != 0U) {
      #line 270 
      int vfidx = (int)nctrl->ncmd.s.param1 + -1;
      #line 271 
      bool mac_is_admin_assigned = (_Bool)((unsigned int)nctrl->ncmd.s.param2 != 0U);
      #line 273 
      if ((int)mac_is_admin_assigned != 0) 
        #line 274 
        if ((lio->msg_enable & 2U) != 0U) 
                                          #line 274 
                                          netdev_info(lio->netdev,(char *)"MAC Address %pM is configured for VF %d\n",mac,vfidx);
    }
    else 
      #line 278 
      if ((lio->msg_enable & 2U) != 0U) 
                                        #line 278 
                                        netdev_info(lio->netdev,(char *)" MACAddr changed to %pM\n",mac);
    #line 282 
    break;
    #line 284 
    case 10: 
             #line 284 
    ;
    #line 285 
    if ((lio->msg_enable & 2U) != 0U) 
                                      #line 285 
                                      netdev_info(lio->netdev,(char *)"LED Flashing visual identification\n");
    #line 287 
    break;
    #line 289 
    case 26: 
             #line 289 
    ;
    #line 290 
    if ((lio->msg_enable & 2U) != 0U) 
                                      #line 290 
                                      netdev_info(lio->netdev,(char *)"LED Flashing visual identification\n");
    #line 292 
    break;
    #line 294 
    case 11: 
             #line 294 
    ;
    #line 295 
    _dev_info(& (oct->pci_dev)->dev,(char *)"%s LRO Enabled\n",(char *)(& netdev->name));
    #line 296 
    break;
    #line 298 
    case 12: 
             #line 298 
    ;
    #line 299 
    _dev_info(& (oct->pci_dev)->dev,(char *)"%s LRO Disabled\n",(char *)(& netdev->name));
    #line 301 
    break;
    #line 303 
    case 20: 
             #line 303 
    ;
    #line 304 
    _dev_info(& (oct->pci_dev)->dev,(char *)"%s Firmware debug enabled\n",(char *)(& netdev->name));
    #line 306 
    break;
    #line 308 
    case 21: 
             #line 308 
    ;
    #line 309 
    _dev_info(& (oct->pci_dev)->dev,(char *)"%s Firmware debug disabled\n",(char *)(& netdev->name));
    #line 311 
    break;
    #line 313 
    case 22: 
             #line 313 
    ;
    #line 314 
    if ((unsigned int)nctrl->ncmd.s.param1 != 0U) 
                                                  #line 315 
                                                  _dev_info(& (oct->pci_dev)->dev,(char *)"%s VLAN filter enabled\n",(char *)(& netdev->name)); else 
                                                                    #line 318 
                                                                    _dev_info(& (oct->pci_dev)->dev,(char *)"%s VLAN filter disabled\n",(char *)(& netdev->name));
    #line 320 
    break;
    #line 322 
    case 23: 
             #line 322 
    ;
    #line 323 
    _dev_info(& (oct->pci_dev)->dev,(char *)"%s VLAN filter %d added\n",(char *)(& netdev->name),(int)nctrl->ncmd.s.param1);
    #line 325 
    break;
    #line 327 
    case 24: 
             #line 327 
    ;
    #line 328 
    _dev_info(& (oct->pci_dev)->dev,(char *)"%s VLAN filter %d removed\n",(char *)(& netdev->name),(int)nctrl->ncmd.s.param1);
    #line 330 
    break;
    #line 332 
    case 7: 
            #line 332 
    ;
    #line 333 
    _dev_info(& (oct->pci_dev)->dev,(char *)"%s settings changed\n",(char *)(& netdev->name));
    #line 336 
    break;
    #line 341 
    case 16: 
             #line 341 
    ;
    #line 342 
    if ((unsigned int)nctrl->ncmd.s.param1 == 0U) {
      #line 343 
      if ((lio->msg_enable & 2U) != 0U) 
                                        #line 343 
                                        netdev_info(lio->netdev,(char *)"RX Checksum Offload Enabled\n");
    }
    else 
      #line 345 
      if ((unsigned int)nctrl->ncmd.s.param1 == 1U) 
        #line 347 
        if ((lio->msg_enable & 2U) != 0U) 
                                          #line 347 
                                          netdev_info(lio->netdev,(char *)"RX Checksum Offload Disabled\n");
    #line 350 
    break;
    #line 355 
    case 17: 
             #line 355 
    ;
    #line 356 
    if ((unsigned int)nctrl->ncmd.s.param1 == 0U) {
      #line 357 
      if ((lio->msg_enable & 2U) != 0U) 
                                        #line 357 
                                        netdev_info(lio->netdev,(char *)"TX Checksum Offload Enabled\n");
    }
    else 
      #line 359 
      if ((unsigned int)nctrl->ncmd.s.param1 == 1U) 
        #line 361 
        if ((lio->msg_enable & 2U) != 0U) 
                                          #line 361 
                                          netdev_info(lio->netdev,(char *)"TX Checksum Offload Disabled\n");
    #line 364 
    break;
    #line 369 
    case 25: 
             #line 369 
    ;
    #line 370 
    if ((unsigned int)nctrl->ncmd.s.more == 0U) {
      #line 371 
      if ((lio->msg_enable & 2U) != 0U) 
                                        #line 371 
                                        netdev_info(lio->netdev,(char *)"VxLAN Destination UDP PORT:%d ADDED\n",(int)nctrl->ncmd.s.param1);
    }
    else 
      #line 374 
      if ((unsigned int)nctrl->ncmd.s.more == 1U) 
        #line 376 
        if ((lio->msg_enable & 2U) != 0U) 
                                          #line 376 
                                          netdev_info(lio->netdev,(char *)"VxLAN Destination UDP PORT:%d DELETED\n",(int)nctrl->ncmd.s.param1);
    #line 380 
    break;
    #line 382 
    case 8: 
            #line 382 
    ;
    #line 383 
    if ((lio->msg_enable & 2U) != 0U) 
                                      #line 383 
                                      netdev_info(lio->netdev,(char *)"Set RX/TX flow control parameters\n");
    #line 384 
    break;
    #line 386 
    case 31: 
             #line 386 
    ;
    #line 387 
    if ((lio->msg_enable & 2U) != 0U) 
                                      #line 387 
                                      netdev_info(lio->netdev,(char *)"Queue count updated to %d\n",(int)nctrl->ncmd.s.param1);
    #line 389 
    break;
    #line 391 
    default: 
             #line 391 
    ;
    #line 392 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s Unknown cmd %d\n",(char *)"liquidio_link_ctrl_cmd_completion",(int)nctrl->ncmd.s.cmd);
  }
  #line 394 
  return;
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
void octeon_pf_changed_vf_macaddr(struct octeon_device *oct, u8 *mac)
{
  #line 400 
  struct net_device *netdev;
  #line 401 
  struct lio *lio;
  #line 399 
  bool macaddr_changed = (_Bool)0;
  #line 403 
  rtnl_lock();
  #line 405 
  netdev = oct->props[0].netdev;
  #line 406 
  lio = (struct lio *)netdev_priv(netdev);
  #line 408 
  lio->linfo.macaddr_is_admin_asgnd = (unsigned long long)1U;
  #line 410 
  if (! ether_addr_equal(netdev->dev_addr,mac)) {
    #line 411 
    macaddr_changed = (_Bool)1;
    #line 412 
    ether_addr_copy(netdev->dev_addr,mac);
    #line 413 
    ether_addr_copy((u8 *)(& lio->linfo.hw_addr) + 2U,mac);
    #line 414 
    call_netdevice_notifiers(8UL,netdev);
  }
  #line 417 
  rtnl_unlock();
  #line 419 
  if ((int)macaddr_changed != 0) 
                                 #line 420 
                                 _dev_info(& (oct->pci_dev)->dev,(char *)"PF changed VF\'s MAC address to %pM\n",mac);
  #line 421 
  return;
}

#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
void octeon_schedule_rxq_oom_work(struct octeon_device *oct, struct octeon_droq *droq)
{
  #line 431 
  struct net_device *netdev = oct->props[0].netdev;
  #line 432 
  struct lio *lio = netdev_priv(netdev);
  #line 433 
  struct cavium_wq *wq = & lio->rxq_status_wq[droq->q_no];
  #line 435 
  ;
  #line 435 
  ;
  #line 435 
  cif_queue_delayed_work_1(wq->wq,& wq->wk.work,msecs_to_jiffies(250U));
  #line 437 
  return;
}

#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
static void octnet_poll_check_rxq_oom_status(struct work_struct *work)
{
  #line 441 
  struct cavium_wk *wk = (struct cavium_wk *)work;
  #line 442 
  struct lio *lio = (struct lio *)wk->ctxptr;
  #line 443 
  struct octeon_device *oct = lio->oct_dev;
  #line 444 
  int q_no = (int)wk->ctxul;
  #line 445 
  struct octeon_droq *droq = oct->droq[q_no];
  #line 447 
  if (ifstate_check_0(lio,4) == 0) 
                                   #line 448 
                                   return;
  else 
    #line 447 
    if (droq == (struct octeon_droq *)0) 
                                         #line 448 
                                         return;
  #line 450 
  if (octeon_retry_droq_refill(droq) != 0) 
                                           #line 451 
                                           octeon_schedule_rxq_oom_work(oct,droq);
  #line 452 
  return;
}

#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int setup_rx_oom_poll_fn(struct net_device *netdev)
{
  #line 458 
  struct cavium_wq *wq;
  #line 459 
  int q;
  #line 459 
  int q_no;
  #line 456 
  struct lio *lio = netdev_priv(netdev);
  #line 457 
  struct octeon_device *oct = lio->oct_dev;
  #line 461 
  q = 0;
  #line 461 
  while (oct->num_oqs > (unsigned int)q) {
    #line 462 
    q_no = (int)lio->linfo.rxpciq[q].s.q_no;
    #line 463 
    wq = & lio->rxq_status_wq[q_no];
    #line 464 
    wq->wq = alloc_workqueue((char *)"rxq-oom-status",8U,0);
    #line 466 
    if (wq->wq == (struct workqueue_struct *)0) {
      #line 467 
      _dev_err(& (oct->pci_dev)->dev,(char *)"unable to create cavium rxq oom status wq\n");
      #line 468 
      return -12;
    }
    {
      #line 471 
      struct lock_class_key __key;
      #line 471 
      __init_work(& wq->wk.work.work,0);
      #line 471 
      atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
      #line 471 
      wq->wk.work.work.data = __constr_expr_34;
      #line 471 
      lockdep_init_map(& wq->wk.work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
      #line 471 
      INIT_LIST_HEAD_2(& wq->wk.work.work.entry);
      #line 471 
      wq->wk.work.work.func = & octnet_poll_check_rxq_oom_status;
    }
    {
      #line 471 
      struct lock_class_key __key_0;
      #line 471 
      init_timer_key(& wq->wk.work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&wq->wk.work)->timer",& __key_0);
    }
    #line 473 
    wq->wk.ctxptr = (void *)lio;
    #line 474 
    wq->wk.ctxul = (unsigned long long)q_no;
    #line 461 
    q ++;
  }
  #line 477 
  return 0;
}

#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
void cleanup_rx_oom_poll_fn(struct net_device *netdev)
{
  #line 484 
  struct cavium_wq *wq;
  #line 485 
  int q_no;
  #line 482 
  struct lio *lio = netdev_priv(netdev);
  #line 483 
  struct octeon_device *oct = lio->oct_dev;
  #line 487 
  q_no = 0;
  #line 487 
  while (oct->num_oqs > (unsigned int)q_no) {
    #line 488 
    wq = & lio->rxq_status_wq[q_no];
    #line 489 
    if (wq->wq != (struct workqueue_struct *)0) {
      #line 490 
      cancel_delayed_work_sync(& wq->wk.work);
      #line 491 
      flush_workqueue(wq->wq);
      #line 492 
      destroy_workqueue(wq->wq);
      #line 493 
      wq->wq = (struct workqueue_struct *)0;
    }
    #line 487 
    q_no ++;
  }
  #line 496 
  return;
}

#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
static void lio_update_txq_status(struct octeon_device *oct, int iq_num)
{
  #line 502 
  struct net_device *netdev;
  #line 503 
  struct lio *lio;
  #line 501 
  struct octeon_instr_queue *iq = oct->instr_queue[iq_num];
  #line 505 
  netdev = oct->props[iq->ifidx].netdev;
  #line 510 
  if (netdev == (struct net_device *)0) 
                                        #line 511 
                                        return;
  #line 513 
  lio = (struct lio *)netdev_priv(netdev);
  #line 514 
  if ((int)__netif_subqueue_stopped(netdev,
                                 (unsigned short)((int)((unsigned short)iq->q_index))) != 0) 
    #line 514 
    if ((unsigned int)lio->linfo.link.s.link_up != 0U) {
      #line 515 
      if (octnet_iq_is_full_0(oct,(unsigned int)iq_num) == 0) {
        #line 517 
        netif_wake_subqueue(netdev,(unsigned short)((int)((unsigned short)iq->q_index)));
        #line 518 
        (((lio->oct_dev)->instr_queue[iq_num])->stats.tx_restart) ++;
      }
    }
  #line 520 
  return;
}

#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
static int octeon_setup_droq(struct octeon_device *oct, int q_no, int num_descs, int desc_size, void *app_ctx)
{
  #line 534 
  int ret_val;
  {
    #line 536 
    bool branch;
    #line 536 
    struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_setup_droq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c", .format = (char *)"Creating Droq: %d\n", .lineno = (unsigned int)536U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 536 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
    #line 536 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 536 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug447,& (oct->pci_dev)->dev,(char *)"Creating Droq: %d\n",q_no);
  }
  #line 538 
  ret_val = octeon_create_droq(oct,(unsigned int)q_no,(unsigned int)num_descs,(unsigned int)desc_size,app_ctx);
  #line 539 
  if (ret_val < 0) 
                   #line 540 
                   return ret_val;
  #line 542 
  if (ret_val == 1) {
    {
      #line 543 
      bool branch_0;
      #line 543 
      struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_setup_droq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c", .format = (char *)"Using default droq %d\n", .lineno = (unsigned int)543U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 543 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
      #line 543 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 543 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug448,& (oct->pci_dev)->dev,(char *)"Using default droq %d\n",q_no);
    }
    #line 544 
    return 0;
  }
  #line 548 
  octeon_set_droq_pkt_op(oct,(unsigned int)q_no,1U);
  #line 553 
  writel((oct->droq[q_no])->max_count,(oct->droq[q_no])->pkts_credit_reg);
  #line 555 
  return ret_val;
}

#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
static void liquidio_push_packet(u32 octeon_id, void *skbuff, u32 len, union octeon_rh *rh, void *param, void *arg)
{
  #line 576 
  void *__mptr;
  #line 578 
  struct skb_shared_hwtstamps *shhwtstamps;
  #line 581 
  u32 r_dh_off;
  #line 582 
  u64 ns;
  #line 574 
  struct net_device *netdev = (struct net_device *)arg;
  #line 576 
  __mptr = param;
  #line 575 
  struct octeon_droq *droq = ((struct octeon_droq *)(__mptr + 18446744073709551376U));
  #line 577 
  struct sk_buff *skb = (struct sk_buff *)skbuff;
  #line 579 
  struct napi_struct *napi = (struct napi_struct *)param;
  #line 580 
  u16 vtag = (unsigned short)0U;
  #line 584 
  if (netdev != (struct net_device *)0) {
    #line 585 
    struct lio *lio = netdev_priv(netdev);
    #line 586 
    struct octeon_device *oct = lio->oct_dev;
    #line 589 
    if (ifstate_check_0(lio,4) == 0) {
      #line 590 
      recv_buffer_free_0((void *)skb);
      #line 591 
      (droq->stats.rx_dropped) ++;
      #line 592 
      return;
    }
    #line 595 
    skb->__anonCompField_sk_buff_88.__anonCompField___anonunion_519_87.__anonCompField___anonstruct_520_86.dev = netdev;
    #line 597 
    skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)droq->q_no)));
    #line 598 
    if ((long)(len > 256U) != 0L) {
      #line 599 
      struct octeon_skb_page_info *pg_info;
      #line 600 
      unsigned char *va;
      #line 602 
      pg_info = (struct octeon_skb_page_info *)(& skb->cb);
      #line 603 
      if (pg_info->page != (struct page *)0) {
        #line 605 
        va = (unsigned char *)(lowmem_page_address(pg_info->page) + (unsigned long)pg_info->page_offset);
        #line 607 
        memcpy((void *)skb->data,(void *)va,256UL);
        #line 608 
        skb_put(skb,256U);
        #line 609 
        ;
        #line 609 
        ;
        #line 609 
        ;
        #line 609 
        ;
        #line 609 
        skb_add_rx_frag(skb,(int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags,pg_info->page,(int)(pg_info->page_offset + 256U),(int)(len + 4294967040U),2048U);
      }
    }
    else {
      #line 617 
      struct octeon_skb_page_info *pg_info_0 = (struct octeon_skb_page_info *)(& skb->cb);
      #line 619 
      ;
      #line 619 
      ;
      #line 619 
      ;
      #line 619 
      skb_copy_to_linear_data(skb,lowmem_page_address(pg_info_0->page) + (unsigned long)pg_info_0->page_offset,len);
      #line 621 
      skb_put(skb,len);
      #line 622 
      put_page_0(pg_info_0->page);
    }
    #line 625 
    r_dh_off = (unsigned int)(((int)rh->r_dh.len + -1) * 8);
    #line 627 
    if ((int)oct->ptp_enable != 0) 
      #line 628 
      if ((unsigned int)rh->r_dh.has_hwtstamp != 0U) {
        #line 632 
        if (ifstate_check_0(lio,8) != 0) {
          #line 638 
          memcpy((void *)(& ns),(void *)(skb->data + (unsigned long)r_dh_off),8UL);
          #line 640 
          r_dh_off += 4294967288U;
          #line 641 
          shhwtstamps = skb_hwtstamps(skb);
          #line 642 
          shhwtstamps->hwtstamp = ns_to_ktime((unsigned long long)lio->ptp_adjust + ns);
        }
      }
    #line 649 
    if ((unsigned int)rh->r_dh.has_hash != 0U) {
      #line 650 
      __be32 *hash_be = (__be32 *)(skb->data + (unsigned long)r_dh_off);
      #line 651 
      u32 hash = __builtin_bswap32(*hash_be);
      #line 653 
      skb_set_hash(skb,hash,(enum pkt_hash_types)PKT_HASH_TYPE_L4);
      #line 654 
      r_dh_off += 4294967288U;
    }
    #line 657 
    skb_pull(skb,(unsigned int)((int)rh->r_dh.len * 8));
    #line 658 
    skb->protocol = eth_type_trans(skb,skb->__anonCompField_sk_buff_88.__anonCompField___anonunion_519_87.__anonCompField___anonstruct_520_86.dev);
    #line 660 
    if ((netdev->features & 549755813888ULL) != 0ULL && ((unsigned int)rh->r_dh.encap_on != 0U && ((int)rh->r_dh.csum_verified & 4) != 0 || (unsigned int)rh->r_dh.encap_on == 0U && ((int)rh->r_dh.csum_verified & 3) == 3)) 
      #line 667 
      skb->ip_summed = (unsigned char)1U; else 
                                               #line 669 
                                               skb->ip_summed = (unsigned char)0U;
    #line 674 
    if ((unsigned int)rh->r_dh.encap_on != 0U) {
      #line 675 
      skb->encapsulation = (unsigned char)1U;
      #line 676 
      skb->csum_level = (unsigned char)1U;
      #line 677 
      (droq->stats.rx_vxlan) ++;
    }
    #line 681 
    if ((netdev->features & 256ULL) != 0ULL && (unsigned int)rh->r_dh.vlan != 0U) {
      #line 683 
      u16 priority = (unsigned short)rh->r_dh.priority;
      #line 684 
      u16 vid = (unsigned short)rh->r_dh.vlan;
      #line 686 
      vtag = (unsigned short)(((int)priority << 13) | (int)vid);
      #line 687 
      __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vtag));
    }
    #line 690 
    napi_gro_receive(napi,skb);
    #line 692 
    droq->stats.rx_bytes_received += (unsigned long long)(len - (unsigned int)((int)rh->r_dh.len * 8));
    #line 694 
    (droq->stats.rx_pkts_received) ++;
  }
  else 
       #line 696 
       recv_buffer_free_0((void *)skb);
  #line 697 
  return;
}

#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
static void napi_schedule_wrapper(void *param)
{
  #line 708 
  struct napi_struct *napi = (struct napi_struct *)param;
  #line 710 
  napi_schedule(napi);
  #line 711 
  return;
}

#line 717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
static void liquidio_napi_drv_callback(void *arg)
{
  #line 721 
  int pscr_ret__;
  #line 719 
  struct octeon_device *oct;
  #line 720 
  struct octeon_droq *droq = (struct octeon_droq *)arg;
  #line 721 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 721 
    void *__vpp_verify = (void *)0;
    #line 721 
    void *tmp = __vpp_verify;
  }
  #line 721 
  switch (4UL) {
    #line 721 
    int pfo_ret__;
    #line 721 
    int pfo_ret___0;
    #line 721 
    int pfo_ret___1;
    #line 721 
    int pfo_ret___2;
    #line 721 
    case (unsigned long)1: 
                           #line 721 
    ;
    #line 721 
    switch (4UL) {
      #line 721 
      case (unsigned long)1: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      case (unsigned long)2: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      case (unsigned long)4: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      case (unsigned long)8: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      default: 
               #line 721 
      ;
      #line 721 
      __bad_percpu_size();
    }
    #line 721 
    pscr_ret__ = pfo_ret__;
    #line 721 
    break;
    #line 721 
    case (unsigned long)2: 
                           #line 721 
    ;
    #line 721 
    switch (4UL) {
      #line 721 
      case (unsigned long)1: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      case (unsigned long)2: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      case (unsigned long)4: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      case (unsigned long)8: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      default: 
               #line 721 
      ;
      #line 721 
      __bad_percpu_size();
    }
    #line 721 
    pscr_ret__ = pfo_ret___0;
    #line 721 
    break;
    #line 721 
    case (unsigned long)4: 
                           #line 721 
    ;
    #line 721 
    switch (4UL) {
      #line 721 
      case (unsigned long)1: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      case (unsigned long)2: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      case (unsigned long)4: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      case (unsigned long)8: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      default: 
               #line 721 
      ;
      #line 721 
      __bad_percpu_size();
    }
    #line 721 
    pscr_ret__ = pfo_ret___1;
    #line 721 
    break;
    #line 721 
    case (unsigned long)8: 
                           #line 721 
    ;
    #line 721 
    switch (4UL) {
      #line 721 
      case (unsigned long)1: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      case (unsigned long)2: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      case (unsigned long)4: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      case (unsigned long)8: 
                             #line 721 
      ;
      #line 722 
      ldv_inline_asm();
      #line 721 
      break;
      #line 721 
      default: 
               #line 721 
      ;
      #line 721 
      __bad_percpu_size();
    }
    #line 721 
    pscr_ret__ = pfo_ret___2;
    #line 721 
    break;
    #line 721 
    default: 
             #line 721 
    ;
    #line 721 
    __bad_size_call_parameter();
    #line 721 
    break;
  }
  #line 721 
  int this_cpu = pscr_ret__;
  #line 723 
  oct = droq->oct_dev;
  #line 725 
  if (((unsigned int)oct->chip_id == 38658U || (unsigned int)oct->chip_id == 38674U) || droq->cpu_id == (unsigned int)this_cpu) 
    #line 727 
    napi_schedule_irqoff(& droq->napi);
  else {
    #line 729 
    call_single_data_t *csd = & droq->csd;
    #line 731 
    csd->func = & napi_schedule_wrapper;
    #line 732 
    csd->info = (void *)(& droq->napi);
    #line 733 
    csd->flags = 0U;
    #line 735 
    smp_call_function_single_async((int)droq->cpu_id,csd);
  }
  #line 737 
  return;
}

#line 744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
static int liquidio_napi_poll(struct napi_struct *napi, int budget)
{
  #line 752 
  void *__mptr;
  #line 746 
  struct octeon_instr_queue *iq;
  #line 747 
  struct octeon_device *oct;
  #line 748 
  struct octeon_droq *droq;
  #line 749 
  int iq_no;
  #line 750 
  int work_done;
  #line 792 
  int tmp_1;
  #line 749 
  int tx_done = 0;
  #line 752 
  __mptr = (void *)napi;
  #line 752 
  droq = ((struct octeon_droq *)(__mptr + 18446744073709551376U));
  #line 753 
  oct = droq->oct_dev;
  #line 754 
  iq_no = (int)droq->q_no;
  #line 757 
  work_done = octeon_droq_process_poll_pkts(oct,droq,(unsigned int)budget);
  #line 760 
  iq = oct->instr_queue[iq_no];
  #line 761 
  if (iq != (struct octeon_instr_queue *)0) {
    #line 765 
    if (atomic_read_2(& iq->instr_pending) != 0) 
                                                 #line 767 
                                                 tx_done = octeon_flush_iq(oct,iq,(unsigned int)budget); else 
                                                                    #line 769 
                                                                    tx_done = 1;
    #line 774 
    lio_update_txq_status(oct,iq_no);
  }
  else 
       #line 776 
       _dev_err(& (oct->pci_dev)->dev,(char *)"%s:  iq (%d) num invalid\n",(char *)"liquidio_napi_poll",iq_no);
  #line 782 
  if ((work_done < budget && tx_done != 0 || iq != (struct octeon_instr_queue *)0 && iq->pkt_in_done > 1999999U) || droq->pkt_count > 1999999U) {
    #line 785 
    tx_done = 1;
    #line 786 
    napi_complete_done(napi,work_done);
    #line 788 
    octeon_enable_irq(droq->oct_dev,droq->q_no);
    #line 789 
    return 0;
  }
  #line 792 
  if (tx_done == 0) 
                    #line 792 
                    tmp_1 = budget; else 
                                         #line 792 
                                         tmp_1 = work_done;
  #line 792 
  return tmp_1;
}

#line 804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int liquidio_setup_io_queues(struct octeon_device *octeon_dev, int ifidx, u32 num_iqs, u32 num_oqs)
{
  #line 807 
  struct octeon_droq_ops droq_ops;
  #line 808 
  struct net_device *netdev;
  #line 809 
  struct octeon_droq *droq;
  #line 810 
  struct napi_struct *napi;
  #line 811 
  int cpu_id_modulus;
  #line 812 
  int num_tx_descs;
  #line 813 
  struct lio *lio;
  #line 815 
  int q;
  #line 815 
  int q_no;
  #line 816 
  int cpu_id;
  #line 814 
  int retval = 0;
  #line 818 
  netdev = octeon_dev->props[ifidx].netdev;
  #line 820 
  lio = (struct lio *)netdev_priv(netdev);
  #line 822 
  memset((void *)(& droq_ops),0,32UL);
  #line 824 
  droq_ops.fptr = & liquidio_push_packet;
  #line 825 
  droq_ops.farg = (void *)netdev;
  #line 827 
  droq_ops.poll_mode = 1U;
  #line 828 
  droq_ops.napi_fn = & liquidio_napi_drv_callback;
  #line 829 
  cpu_id = 0;
  #line 830 
  cpu_id_modulus = (int)cpumask_weight(& __cpu_present_mask);
  #line 833 
  q = 0;
  #line 833 
  while ((unsigned int)q < num_oqs) {
    {
      #line 834 
      q_no = (int)lio->linfo.rxpciq[q].s.q_no;
      {
        #line 835 
        bool branch;
        #line 835 
        struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"liquidio_setup_io_queues", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c", .format = (char *)"%s index:%d linfo.rxpciq.s.q_no:%d\n", .lineno = (unsigned int)835U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 835 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
        #line 835 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 835 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug449,& (octeon_dev->pci_dev)->dev,(char *)"%s index:%d linfo.rxpciq.s.q_no:%d\n",(char *)"liquidio_setup_io_queues",q,q_no);
      }
      #line 838 
      ;
      #line 838 
      ;
      #line 838 
      retval = octeon_setup_droq(octeon_dev,q_no,(int)octeon_get_conf(octeon_dev)->nic_if_cfg[lio->ifidx].num_rx_descs,(int)octeon_get_conf(octeon_dev)->nic_if_cfg[lio->ifidx].rx_buf_size,(void *)0);
      #line 845 
      if (retval != 0) {
        #line 846 
        _dev_err(& (octeon_dev->pci_dev)->dev,(char *)"%s : Runtime DROQ(RxQ) creation failed.\n",(char *)"liquidio_setup_io_queues");
        #line 849 
        return 1;
      }
      #line 852 
      droq = octeon_dev->droq[q_no];
      #line 853 
      napi = & droq->napi;
      {
        #line 854 
        bool branch_0;
        #line 854 
        struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"liquidio_setup_io_queues", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c", .format = (char *)"netif_napi_add netdev:%llx oct:%llx\n", .lineno = (unsigned int)854U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 854 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
        #line 854 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 854 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug450,& (octeon_dev->pci_dev)->dev,(char *)"netif_napi_add netdev:%llx oct:%llx\n",(unsigned long long)netdev,(unsigned long long)octeon_dev);
      }
      #line 856 
      netif_napi_add(netdev,napi,& liquidio_napi_poll,64);
      #line 859 
      droq->cpu_id = (unsigned int)cpu_id;
      #line 860 
      cpu_id ++;
      #line 861 
      if (cpu_id >= cpu_id_modulus) 
                                    #line 862 
                                    cpu_id = 0;
      #line 864 
      octeon_register_droq_ops(octeon_dev,(unsigned int)q_no,& droq_ops);
    }
    #line 833 
    q ++;
  }
  #line 867 
  if ((unsigned int)octeon_dev->chip_id == 38658U || (unsigned int)octeon_dev->chip_id == 38674U) 
    #line 873 
    (octeon_dev->droq[0])->ops.poll_mode = 0U;
  #line 877 
  q = 0;
  #line 877 
  while ((unsigned int)q < num_iqs) {
    {
      #line 878 
      num_tx_descs = (int)octeon_get_conf(octeon_dev)->nic_if_cfg[lio->ifidx].num_tx_descs;
      #line 880 
      ;
      #line 880 
      ;
      #line 880 
      ;
      #line 880 
      ;
      #line 880 
      ;
      #line 880 
      retval = octeon_setup_iq(octeon_dev,ifidx,q,lio->linfo.txpciq[q],(unsigned int)num_tx_descs,(void *)netdev_get_tx_queue(netdev,(unsigned int)q));
      #line 883 
      if (retval != 0) {
        #line 884 
        _dev_err(& (octeon_dev->pci_dev)->dev,(char *)" %s : Runtime IQ(TxQ) creation failed.\n",(char *)"liquidio_setup_io_queues");
        #line 887 
        return 1;
      }
      #line 891 
      if (((unsigned int)octeon_dev->chip_id != 38674U && octeon_dev->msix_on != 0) && octeon_dev->ioq_vector != (struct octeon_ioq_vector *)0) {
        #line 893 
        struct octeon_ioq_vector *ioq_vector;
        #line 895 
        ioq_vector = octeon_dev->ioq_vector + (unsigned long)q;
        #line 896 
        netif_set_xps_queue(netdev,& ioq_vector->affinity_mask,(unsigned short)((int)((unsigned short)ioq_vector->iq_index)));
      }
    }
    #line 877 
    q ++;
  }
  #line 902 
  return 0;
}

#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
static int liquidio_schedule_msix_droq_pkt_handler(struct octeon_droq *droq, u64 ret)
{
  #line 908 
  struct octeon_device *oct = droq->oct_dev;
  #line 909 
  struct octeon_device_priv *oct_priv = (struct octeon_device_priv *)oct->priv;
  #line 912 
  if (droq->ops.poll_mode != 0U) 
                                 #line 913 
                                 (*(droq->ops.napi_fn))((void *)droq);
  else {
    #line 915 
    if ((ret & 1ULL) != 0ULL) {
      #line 916 
      if ((unsigned int)oct->chip_id == 38674U) 
                                                #line 917 
                                                _dev_err(& (oct->pci_dev)->dev,(char *)"should not come here should not get rx when poll mode = 0 for vf\n");
      #line 919 
      cif_tasklet_schedule_0(& oct_priv->droq_tasklet);
      #line 920 
      return 1;
    }
    #line 923 
    if ((ret & 2ULL) != 0ULL) 
                              #line 924 
                              return 0;
  }
  #line 927 
  return 0;
}

#line 931  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
irqreturn_t liquidio_msix_intr_handler(int irq, void *dev)
{
  #line 936 
  u64 ret;
  #line 933 
  struct octeon_ioq_vector *ioq_vector = (struct octeon_ioq_vector *)dev;
  #line 934 
  struct octeon_device *oct = ioq_vector->oct_dev;
  #line 935 
  struct octeon_droq *droq = oct->droq[ioq_vector->droq_index];
  #line 938 
  ret = (*(oct->fn_list.msix_interrupt_handler))((void *)ioq_vector);
  #line 940 
  if ((ret & 1ULL) != 0ULL || (ret & 2ULL) != 0ULL) 
                                                    #line 941 
                                                    liquidio_schedule_msix_droq_pkt_handler(droq,ret);
  #line 943 
  return IRQ_HANDLED;
}

#line 950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
static void liquidio_schedule_droq_pkt_handlers(struct octeon_device *oct)
{
  #line 954 
  struct octeon_droq *droq;
  #line 955 
  u64 oq_no;
  #line 952 
  struct octeon_device_priv *oct_priv = (struct octeon_device_priv *)oct->priv;
  #line 957 
  if ((oct->int_status & 4U) != 0U) {
    #line 958 
    oq_no = 0ULL;
    #line 958 
    while (1) {
      #line 958 
      unsigned long long tmp;
      #line 958 
      if ((unsigned int)oct->chip_id == 38658U) 
                                                #line 958 
                                                tmp = 64ULL; else 
                                                                  #line 958 
                                                                  tmp = 32ULL;
      #line 958 
      ;
      #line 958 
      if (! (tmp > oq_no)) 
                           #line 958 
                           break;
      #line 960 
      if (((oct->droq_intr >> oq_no) & 1ULL) == 0ULL) 
                                                      #line 961 
                                                      goto __Cont;
      #line 963 
      droq = oct->droq[oq_no];
      #line 965 
      if (droq->ops.poll_mode != 0U) {
        #line 966 
        (*(droq->ops.napi_fn))((void *)droq);
        #line 967 
        oct_priv->napi_mask = (unsigned long)((unsigned long long)oct_priv->napi_mask | (1ULL << oq_no));
      }
      else 
           #line 969 
           cif_tasklet_schedule_0(& oct_priv->droq_tasklet);
      #line 958 
      __Cont: 
              #line 958 
      oq_no ++;
    }
  }
  #line 972 
  return;
}

#line 981  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
static irqreturn_t liquidio_legacy_intr_handler(int irq, void *dev)
{
  #line 985 
  irqreturn_t ret;
  #line 984 
  struct octeon_device *oct = (struct octeon_device *)dev;
  #line 988 
  (*(oct->fn_list.disable_interrupt))(oct,(unsigned char)255);
  #line 990 
  ret = (*(oct->fn_list.process_interrupt_regs))((void *)oct);
  #line 992 
  if (ret == (unsigned int)IRQ_HANDLED) 
                                        #line 993 
                                        liquidio_schedule_droq_pkt_handlers(oct);
  #line 996 
  if (atomic_read_2(& oct->status) != 16) 
                                          #line 997 
                                          (*(oct->fn_list.enable_interrupt))(oct,(unsigned char)255);
  #line 999 
  return ret;
}

#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int octeon_setup_interrupt(struct octeon_device *oct, u32 num_ioqs)
{
  #line 1010 
  struct msix_entry *msix_entries;
  #line 1012 
  int i;
  #line 1013 
  int num_alloc_ioq_vectors;
  #line 1015 
  int num_ioq_vectors;
  #line 1016 
  int irqret;
  #line 1016 
  int err;
  #line 1011 
  char *queue_irq_names = (char *)0;
  #line 1012 
  int num_interrupts = 0;
  #line 1014 
  char *aux_irq_name = (char *)0;
  #line 1018 
  if (oct->msix_on != 0) {
    #line 1019 
    oct->num_msix_irqs = (int)num_ioqs;
    #line 1020 
    if ((unsigned int)oct->chip_id == 38658U) {
      #line 1021 
      num_interrupts = 129;
      #line 1026 
      (oct->num_msix_irqs) ++;
    }
    else 
      #line 1027 
      if ((unsigned int)oct->chip_id == 38674U) 
                                                #line 1028 
                                                num_interrupts = 16;
    #line 1032 
    oct->irq_name_storage = kcalloc((unsigned long)num_interrupts,32UL,3264U);
    #line 1034 
    if (oct->irq_name_storage == (void *)0) {
      #line 1035 
      _dev_err(& (oct->pci_dev)->dev,(char *)"Irq name storage alloc failed...\n");
      #line 1036 
      return -12;
    }
    #line 1039 
    queue_irq_names = (char *)oct->irq_name_storage;
    #line 1041 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 1042 
                                              aux_irq_name = queue_irq_names + 4096U;
    #line 1045 
    oct->msix_entries = kcalloc((unsigned long)oct->num_msix_irqs,8UL,3264U);
    #line 1048 
    if (oct->msix_entries == (void *)0) {
      #line 1049 
      _dev_err(& (oct->pci_dev)->dev,(char *)"Memory Alloc failed...\n");
      #line 1050 
      kfree(oct->irq_name_storage);
      #line 1051 
      oct->irq_name_storage = (void *)0;
      #line 1052 
      return -12;
    }
    #line 1055 
    msix_entries = (struct msix_entry *)oct->msix_entries;
    #line 1060 
    if ((unsigned int)oct->chip_id == 38658U) {
      #line 1061 
      i = 0;
      #line 1061 
      while (oct->num_msix_irqs + -1 > i) {
        #line 1062 
        (msix_entries + (unsigned long)i)->entry = (unsigned short)((int)((unsigned short)oct->sriov_info.pf_srn) + (int)((unsigned short)i));
        #line 1061 
        i ++;
      }
      #line 1065 
      (msix_entries + ((unsigned long)oct->num_msix_irqs + 18446744073709551615U))->entry = (unsigned short)oct->sriov_info.trs;
    }
    else 
      #line 1067 
      if ((unsigned int)oct->chip_id == 38674U) {
        #line 1068 
        i = 0;
        #line 1068 
        while (oct->num_msix_irqs > i) {
          #line 1069 
          (msix_entries + (unsigned long)i)->entry = (unsigned short)i;
          #line 1068 
          i ++;
        }
      }
    #line 1071 
    num_alloc_ioq_vectors = pci_enable_msix_range(oct->pci_dev,msix_entries,oct->num_msix_irqs,oct->num_msix_irqs);
    #line 1075 
    if (num_alloc_ioq_vectors < 0) {
      #line 1076 
      _dev_err(& (oct->pci_dev)->dev,(char *)"unable to Allocate MSI-X interrupts\n");
      #line 1077 
      kfree(oct->msix_entries);
      #line 1078 
      oct->msix_entries = (void *)0;
      #line 1079 
      kfree(oct->irq_name_storage);
      #line 1080 
      oct->irq_name_storage = (void *)0;
      #line 1081 
      return num_alloc_ioq_vectors;
    }
    {
      #line 1084 
      bool branch;
      #line 1084 
      struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_setup_interrupt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c", .format = (char *)"OCTEON: Enough MSI-X interrupts are allocated...\n", .lineno = (unsigned int)1084U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1084 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
      #line 1084 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1084 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug451,& (oct->pci_dev)->dev,(char *)"OCTEON: Enough MSI-X interrupts are allocated...\n");
    }
    #line 1086 
    num_ioq_vectors = oct->num_msix_irqs;
    #line 1088 
    if ((unsigned int)oct->chip_id == 38658U) {
      #line 1089 
      num_ioq_vectors += -1;
      #line 1091 
      snprintf(aux_irq_name,32UL,(char *)"LiquidIO%u-pf%u-aux",oct->octeon_id,(int)oct->pf_num);
      #line 1094 
      irqret = cif_request_irq((msix_entries + (unsigned long)num_ioq_vectors)->vector,& liquidio_legacy_intr_handler,0UL,aux_irq_name,(void *)oct);
      #line 1098 
      if (irqret != 0) {
        #line 1099 
        _dev_err(& (oct->pci_dev)->dev,(char *)"Request_irq failed for MSIX interrupt Error: %d\n",irqret);
        #line 1102 
        pci_disable_msix(oct->pci_dev);
        #line 1103 
        kfree(oct->msix_entries);
        #line 1104 
        kfree(oct->irq_name_storage);
        #line 1105 
        oct->irq_name_storage = (void *)0;
        #line 1106 
        oct->msix_entries = (void *)0;
        #line 1107 
        return irqret;
      }
    }
    #line 1110 
    i = 0;
    #line 1110 
    while (i < num_ioq_vectors) {
      #line 1111 
      if ((unsigned int)oct->chip_id == 38658U) 
                                                #line 1112 
                                                snprintf(queue_irq_names + (unsigned long)(i * 32),32UL,(char *)"LiquidIO%u-pf%u-rxtx-%u",oct->octeon_id,(int)oct->pf_num,i);
      #line 1116 
      if ((unsigned int)oct->chip_id == 38674U) 
                                                #line 1117 
                                                snprintf(queue_irq_names + (unsigned long)(i * 32),32UL,(char *)"LiquidIO%u-vf%u-rxtx-%u",oct->octeon_id,(int)oct->vf_num,i);
      #line 1121 
      irqret = cif_request_irq((msix_entries + (unsigned long)i)->vector,& liquidio_msix_intr_handler,0UL,queue_irq_names + (unsigned long)(i * 32),(void *)(oct->ioq_vector + (unsigned long)i));
      #line 1126 
      if (irqret != 0) {
        #line 1127 
        _dev_err(& (oct->pci_dev)->dev,(char *)"Request_irq failed for MSIX interrupt Error: %d\n",irqret);
        #line 1131 
        cif_free_irq_0((msix_entries + (unsigned long)num_ioq_vectors)->vector,(void *)oct);
        #line 1134 
        while (i != 0) {
          #line 1135 
          i --;
          #line 1137 
          irq_set_affinity_hint((msix_entries + (unsigned long)i)->vector,(struct cpumask *)0);
          #line 1140 
          cif_free_irq_0((msix_entries + (unsigned long)i)->vector,(void *)(oct->ioq_vector + (unsigned long)i));
        }
        #line 1143 
        pci_disable_msix(oct->pci_dev);
        #line 1144 
        kfree(oct->msix_entries);
        #line 1145 
        kfree(oct->irq_name_storage);
        #line 1146 
        oct->irq_name_storage = (void *)0;
        #line 1147 
        oct->msix_entries = (void *)0;
        #line 1148 
        return irqret;
      }
      #line 1150 
      (oct->ioq_vector + (unsigned long)i)->vector = (int)(msix_entries + (unsigned long)i)->vector;
      #line 1152 
      irq_set_affinity_hint((msix_entries + (unsigned long)i)->vector,& (oct->ioq_vector + (unsigned long)i)->affinity_mask);
      #line 1110 
      i ++;
    }
    {
      #line 1156 
      bool branch_0;
      #line 1156 
      struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_setup_interrupt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c", .format = (char *)"OCTEON[%d]: MSI-X enabled\n", .lineno = (unsigned int)1156U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1156 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
      #line 1156 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1156 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug452,& (oct->pci_dev)->dev,(char *)"OCTEON[%d]: MSI-X enabled\n",oct->octeon_id);
    }
  }
  else {
    #line 1159 
    err = pci_enable_msi(oct->pci_dev);
    #line 1160 
    if (err != 0) 
                  #line 1161 
                  _dev_warn(& (oct->pci_dev)->dev,(char *)"Reverting to legacy interrupts. Error: %d\n",err); else 
                                                                    #line 1164 
                                                                    oct->flags = (unsigned short)((unsigned int)oct->flags | 2U);
    #line 1167 
    oct->irq_name_storage = kcalloc(1UL,32UL,3264U);
    #line 1168 
    if (oct->irq_name_storage == (void *)0) 
                                            #line 1169 
                                            return -12;
    #line 1171 
    queue_irq_names = (char *)oct->irq_name_storage;
    #line 1173 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 1174 
                                              snprintf(queue_irq_names,32UL,(char *)"LiquidIO%u-pf%u-rxtx-%u",oct->octeon_id,(int)oct->pf_num,0);
    #line 1178 
    if ((unsigned int)oct->chip_id == 38674U) 
                                              #line 1179 
                                              snprintf(queue_irq_names,32UL,(char *)"LiquidIO%u-vf%u-rxtx-%u",oct->octeon_id,(int)oct->vf_num,0);
    #line 1183 
    irqret = cif_request_irq((oct->pci_dev)->irq,& liquidio_legacy_intr_handler,128UL,queue_irq_names,(void *)oct);
    #line 1187 
    if (irqret != 0) {
      #line 1188 
      if (((unsigned int)oct->flags & 2U) != 0U) 
                                                 #line 1189 
                                                 pci_disable_msi(oct->pci_dev);
      #line 1190 
      _dev_err(& (oct->pci_dev)->dev,(char *)"Request IRQ failed with code: %d\n",irqret);
      #line 1192 
      kfree(oct->irq_name_storage);
      #line 1193 
      oct->irq_name_storage = (void *)0;
      #line 1194 
      return irqret;
    }
  }
  #line 1197 
  return 0;
}

#line 1204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int liquidio_change_mtu(struct net_device *netdev, int new_mtu)
{
  #line 1208 
  struct octeon_soft_command *sc;
  #line 1209 
  union octnet_cmd *ncmd;
  #line 1206 
  struct lio *lio = netdev_priv(netdev);
  #line 1207 
  struct octeon_device *oct = lio->oct_dev;
  #line 1210 
  int ret = 0;
  #line 1212 
  sc = octeon_alloc_soft_command(oct,8U,16U,0U);
  #line 1214 
  if (sc == (struct octeon_soft_command *)0) {
    #line 1215 
    if ((lio->msg_enable & 64U) != 0U) 
                                       #line 1215 
                                       netdev_info(lio->netdev,(char *)"Failed to allocate soft command\n");
    #line 1217 
    return -12;
  }
  #line 1220 
  ncmd = (union octnet_cmd *)sc->virtdptr;
  #line 1222 
  __init_completion(& sc->complete);
  #line 1223 
  sc->sc_status = 1U;
  #line 1225 
  ncmd->u64 = 0ULL;
  #line 1226 
  ncmd->s.cmd = (unsigned long long)1U;
  #line 1227 
  ncmd->s.param1 = (unsigned long long)((unsigned short)new_mtu);
  #line 1229 
  octeon_swap_8B_data((u64 *)ncmd,1U);
  #line 1231 
  sc->iq_no = (unsigned int)lio->linfo.txpciq[0].s.q_no;
  #line 1233 
  octeon_prepare_soft_command(oct,sc,(unsigned char)1,(unsigned char)3,0U,0ULL,0ULL);
  #line 1236 
  ret = octeon_send_soft_command(oct,sc);
  #line 1237 
  if (ret == -1) {
    #line 1238 
    if ((lio->msg_enable & 64U) != 0U) 
                                       #line 1238 
                                       netdev_info(lio->netdev,(char *)"Failed to change MTU\n");
    #line 1239 
    octeon_free_soft_command(oct,sc);
    #line 1240 
    return -22;
  }
  #line 1245 
  ret = wait_for_sc_completion_timeout_0(oct,sc,0UL);
  #line 1246 
  if (ret != 0) 
                #line 1247 
                return ret;
  #line 1249 
  if (sc->sc_status != 0U) {
    {
      #line 1251 
      union __anonunion___u_3955 __u = {.__val = 1};
      #line 1250 
      __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
      #line 1250 
      int tmp_2 = __u.__val;
    }
    #line 1251 
    return -22;
  }
  #line 1254 
  netdev->mtu = (unsigned int)new_mtu;
  #line 1255 
  lio->mtu = (unsigned int)new_mtu;
  {
    #line 1258 
    union __anonunion___u_3957 __u_0 = {.__val = 1};
    #line 1257 
    __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_0.__c),4);
    #line 1257 
    int tmp_4 = __u_0.__val;
  }
  #line 1258 
  return 0;
}

#line 1261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int lio_wait_for_clean_oq(struct octeon_device *oct)
{
  #line 1264 
  int idx;
  #line 1263 
  int retry = 100;
  #line 1263 
  int pending_pkts = 0;
  #line 1266 
  while (1) {
    #line 1278 
    int tmp_1;
    #line 1267 
    pending_pkts = 0;
    #line 1269 
    idx = 0;
    #line 1269 
    while (1) {
      #line 1269 
      int tmp_0;
      #line 1269 
      if ((unsigned int)oct->chip_id == 38658U) 
                                                #line 1269 
                                                tmp_0 = 64; else 
                                                                 #line 1269 
                                                                 tmp_0 = 32;
      #line 1269 
      ;
      #line 1269 
      if (! (tmp_0 > idx)) 
                           #line 1269 
                           break;
      {
        #line 1270 
        if (((oct->io_qmask.oq >> idx) & 1ULL) == 0ULL) 
                                                        #line 1271 
                                                        goto __Cont;
        #line 1273 
        pending_pkts = atomic_read_2(& (oct->droq[idx])->pkts_pending) + pending_pkts;
      }
      #line 1269 
      __Cont: 
              #line 1269 
      idx ++;
    }
    #line 1276 
    if (pending_pkts > 0) 
                          #line 1277 
                          schedule_timeout_uninterruptible(1L);
    #line 1278 
    tmp_1 = retry;
    #line 1278 
    retry --;
    #line 1278 
    ;
    #line 1278 
    if (tmp_1 != 0) {
      #line 1279 
      if (! (pending_pkts != 0)) 
                                 #line 1266 
                                 break;
    }
    else 
         #line 1266 
         break;
  }
  #line 1281 
  return pending_pkts;
}

#line 1285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
static void octnet_nic_stats_callback(struct octeon_device *oct_dev, u32 status, void *ptr)
{
  #line 1288 
  struct octeon_soft_command *sc = (struct octeon_soft_command *)ptr;
  #line 1289 
  struct oct_nic_stats_resp *resp = (struct oct_nic_stats_resp *)sc->virtrptr;
  #line 1291 
  struct nic_rx_stats *rsp_rstats = & resp->stats.fromwire;
  #line 1292 
  struct nic_tx_stats *rsp_tstats = & resp->stats.fromhost;
  #line 1293 
  struct nic_rx_stats *rstats = & oct_dev->link_stats.fromwire;
  #line 1294 
  struct nic_tx_stats *tstats = & oct_dev->link_stats.fromhost;
  #line 1296 
  if (status != 3U && resp->status == 0ULL) {
    #line 1297 
    octeon_swap_8B_data((u64 *)(& resp->stats),57U);
    #line 1301 
    rstats->total_rcvd = rsp_rstats->total_rcvd;
    #line 1302 
    rstats->bytes_rcvd = rsp_rstats->bytes_rcvd;
    #line 1303 
    rstats->total_bcst = rsp_rstats->total_bcst;
    #line 1304 
    rstats->total_mcst = rsp_rstats->total_mcst;
    #line 1305 
    rstats->runts = rsp_rstats->runts;
    #line 1306 
    rstats->ctl_rcvd = rsp_rstats->ctl_rcvd;
    #line 1308 
    rstats->fifo_err = rsp_rstats->fifo_err;
    #line 1309 
    rstats->dmac_drop = rsp_rstats->dmac_drop;
    #line 1310 
    rstats->fcs_err = rsp_rstats->fcs_err;
    #line 1311 
    rstats->jabber_err = rsp_rstats->jabber_err;
    #line 1312 
    rstats->l2_err = rsp_rstats->l2_err;
    #line 1313 
    rstats->frame_err = rsp_rstats->frame_err;
    #line 1314 
    rstats->red_drops = rsp_rstats->red_drops;
    #line 1317 
    rstats->fw_total_rcvd = rsp_rstats->fw_total_rcvd;
    #line 1318 
    rstats->fw_total_fwd = rsp_rstats->fw_total_fwd;
    #line 1319 
    rstats->fw_total_mcast = rsp_rstats->fw_total_mcast;
    #line 1320 
    rstats->fw_total_bcast = rsp_rstats->fw_total_bcast;
    #line 1321 
    rstats->fw_err_pko = rsp_rstats->fw_err_pko;
    #line 1322 
    rstats->fw_err_link = rsp_rstats->fw_err_link;
    #line 1323 
    rstats->fw_err_drop = rsp_rstats->fw_err_drop;
    #line 1324 
    rstats->fw_rx_vxlan = rsp_rstats->fw_rx_vxlan;
    #line 1325 
    rstats->fw_rx_vxlan_err = rsp_rstats->fw_rx_vxlan_err;
    #line 1328 
    rstats->fw_lro_pkts = rsp_rstats->fw_lro_pkts;
    #line 1330 
    rstats->fw_lro_octs = rsp_rstats->fw_lro_octs;
    #line 1332 
    rstats->fw_total_lro = rsp_rstats->fw_total_lro;
    #line 1334 
    rstats->fw_lro_aborts = rsp_rstats->fw_lro_aborts;
    #line 1335 
    rstats->fw_lro_aborts_port = rsp_rstats->fw_lro_aborts_port;
    #line 1336 
    rstats->fw_lro_aborts_seq = rsp_rstats->fw_lro_aborts_seq;
    #line 1337 
    rstats->fw_lro_aborts_tsval = rsp_rstats->fw_lro_aborts_tsval;
    #line 1338 
    rstats->fw_lro_aborts_timer = rsp_rstats->fw_lro_aborts_timer;
    #line 1340 
    rstats->fwd_rate = rsp_rstats->fwd_rate;
    #line 1343 
    tstats->total_pkts_sent = rsp_tstats->total_pkts_sent;
    #line 1344 
    tstats->total_bytes_sent = rsp_tstats->total_bytes_sent;
    #line 1345 
    tstats->mcast_pkts_sent = rsp_tstats->mcast_pkts_sent;
    #line 1346 
    tstats->bcast_pkts_sent = rsp_tstats->bcast_pkts_sent;
    #line 1347 
    tstats->ctl_sent = rsp_tstats->ctl_sent;
    #line 1349 
    tstats->one_collision_sent = rsp_tstats->one_collision_sent;
    #line 1351 
    tstats->multi_collision_sent = rsp_tstats->multi_collision_sent;
    #line 1353 
    tstats->max_collision_fail = rsp_tstats->max_collision_fail;
    #line 1355 
    tstats->max_deferral_fail = rsp_tstats->max_deferral_fail;
    #line 1357 
    tstats->fifo_err = rsp_tstats->fifo_err;
    #line 1358 
    tstats->runts = rsp_tstats->runts;
    #line 1360 
    tstats->total_collisions = rsp_tstats->total_collisions;
    #line 1363 
    tstats->fw_total_sent = rsp_tstats->fw_total_sent;
    #line 1364 
    tstats->fw_total_fwd = rsp_tstats->fw_total_fwd;
    #line 1365 
    tstats->fw_total_mcast_sent = rsp_tstats->fw_total_mcast_sent;
    #line 1366 
    tstats->fw_total_bcast_sent = rsp_tstats->fw_total_bcast_sent;
    #line 1367 
    tstats->fw_err_pko = rsp_tstats->fw_err_pko;
    #line 1368 
    tstats->fw_err_pki = rsp_tstats->fw_err_pki;
    #line 1369 
    tstats->fw_err_link = rsp_tstats->fw_err_link;
    #line 1370 
    tstats->fw_err_drop = rsp_tstats->fw_err_drop;
    #line 1371 
    tstats->fw_tso = rsp_tstats->fw_tso;
    #line 1372 
    tstats->fw_tso_fwd = rsp_tstats->fw_tso_fwd;
    #line 1373 
    tstats->fw_err_tso = rsp_tstats->fw_err_tso;
    #line 1374 
    tstats->fw_tx_vxlan = rsp_tstats->fw_tx_vxlan;
    #line 1376 
    resp->status = 1ULL;
  }
  else {
    #line 1378 
    _dev_err(& (oct_dev->pci_dev)->dev,(char *)"sc OPCODE_NIC_PORT_STATS command failed\n");
    #line 1379 
    resp->status = 18446744073709551615ULL;
  }
  #line 1381 
  return;
}

#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
static int lio_fetch_vf_stats(struct lio *lio)
{
  #line 1386 
  struct octeon_soft_command *sc;
  #line 1387 
  struct oct_nic_vf_stats_resp *resp;
  #line 1389 
  int retval;
  #line 1385 
  struct octeon_device *oct_dev = lio->oct_dev;
  #line 1392 
  sc = octeon_alloc_soft_command(oct_dev,0U,24U,0U);
  #line 1398 
  if (sc == (struct octeon_soft_command *)0) {
    #line 1399 
    _dev_err(& (oct_dev->pci_dev)->dev,(char *)"Soft command allocation failed\n");
    #line 1400 
    retval = -12;
    #line 1401 
    goto lio_fetch_vf_stats_exit;
  }
  #line 1404 
  resp = (struct oct_nic_vf_stats_resp *)sc->virtrptr;
  #line 1405 
  memset((void *)resp,0,24UL);
  #line 1407 
  __init_completion(& sc->complete);
  #line 1408 
  sc->sc_status = 1U;
  #line 1410 
  sc->iq_no = (unsigned int)lio->linfo.txpciq[0].s.q_no;
  #line 1412 
  octeon_prepare_soft_command(oct_dev,sc,(unsigned char)1,(unsigned char)34,0U,0ULL,0ULL);
  #line 1415 
  retval = octeon_send_soft_command(oct_dev,sc);
  #line 1416 
  if (retval == -1) {
    #line 1417 
    octeon_free_soft_command(oct_dev,sc);
    #line 1418 
    goto lio_fetch_vf_stats_exit;
  }
  #line 1421 
  retval = wait_for_sc_completion_timeout_0(oct_dev,sc,120000UL);
  #line 1424 
  if (retval != 0) {
    #line 1425 
    _dev_err(& (oct_dev->pci_dev)->dev,(char *)"sc OPCODE_NIC_VF_PORT_STATS command failed\n");
    #line 1427 
    goto lio_fetch_vf_stats_exit;
  }
  #line 1430 
  if (sc->sc_status != 3U && resp->status == 0ULL) {
    #line 1431 
    octeon_swap_8B_data(& resp->spoofmac_cnt,1U);
    #line 1434 
    if (resp->spoofmac_cnt != 0ULL) 
                                    #line 1435 
                                    _dev_warn(& (oct_dev->pci_dev)->dev,(char *)"%llu Spoofed packets detected\n",resp->spoofmac_cnt);
  }
  {
    #line 1441 
    union __anonunion___u_3959 __u = {.__val = 1};
    #line 1440 
    __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
    #line 1440 
    int tmp = __u.__val;
  }
  #line 1442 
  lio_fetch_vf_stats_exit: 
                           #line 1442 
  ;
  #line 1443 
  return retval;
}

#line 1446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
void lio_fetch_stats(struct work_struct *work)
{
  #line 1451 
  struct octeon_soft_command *sc;
  #line 1452 
  struct oct_nic_stats_resp *resp;
  #line 1453 
  unsigned long time_in_jiffies;
  #line 1454 
  int retval;
  #line 1448 
  struct cavium_wk *wk = (struct cavium_wk *)work;
  #line 1449 
  struct lio *lio = (struct lio *)wk->ctxptr;
  #line 1450 
  struct octeon_device *oct_dev = lio->oct_dev;
  #line 1456 
  if ((unsigned int)oct_dev->chip_id == 38658U) {
    #line 1458 
    if ((oct_dev->vfstats_poll % 10U == 0U && (oct_dev->fw_info.app_cap_flags & 4ULL) != 0ULL) && oct_dev->sriov_info.num_vfs_alloced != 0U) 
      #line 1461 
      lio_fetch_vf_stats(lio);
    #line 1464 
    (oct_dev->vfstats_poll) ++;
  }
  #line 1468 
  sc = octeon_alloc_soft_command(oct_dev,0U,472U,0U);
  #line 1474 
  if (sc == (struct octeon_soft_command *)0) {
    #line 1475 
    _dev_err(& (oct_dev->pci_dev)->dev,(char *)"Soft command allocation failed\n");
    #line 1476 
    goto lio_fetch_stats_exit;
  }
  #line 1479 
  resp = (struct oct_nic_stats_resp *)sc->virtrptr;
  #line 1480 
  memset((void *)resp,0,472UL);
  #line 1482 
  __init_completion(& sc->complete);
  #line 1483 
  sc->sc_status = 1U;
  #line 1485 
  sc->iq_no = (unsigned int)lio->linfo.txpciq[0].s.q_no;
  #line 1487 
  octeon_prepare_soft_command(oct_dev,sc,(unsigned char)1,(unsigned char)5,0U,0ULL,0ULL);
  #line 1490 
  retval = octeon_send_soft_command(oct_dev,sc);
  #line 1491 
  if (retval == -1) {
    #line 1492 
    octeon_free_soft_command(oct_dev,sc);
    #line 1493 
    goto lio_fetch_stats_exit;
  }
  #line 1496 
  retval = wait_for_sc_completion_timeout_0(oct_dev,sc,120000UL);
  #line 1498 
  if (retval != 0) {
    #line 1499 
    _dev_err(& (oct_dev->pci_dev)->dev,(char *)"sc OPCODE_NIC_PORT_STATS command failed\n");
    #line 1500 
    goto lio_fetch_stats_exit;
  }
  #line 1503 
  octnet_nic_stats_callback(oct_dev,sc->sc_status,(void *)sc);
  {
    #line 1505 
    union __anonunion___u_3961 __u = {.__val = 1};
    #line 1504 
    __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
    #line 1504 
    int tmp = __u.__val;
  }
  #line 1506 
  lio_fetch_stats_exit: 
                        #line 1506 
  ;
  #line 1507 
  time_in_jiffies = msecs_to_jiffies(200U);
  #line 1508 
  if (ifstate_check_0(lio,4) != 0) 
                                   #line 1509 
                                   cif_schedule_delayed_work_1(& lio->stats_wk.work,time_in_jiffies);
  #line 1511 
  return;
}

#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int liquidio_set_speed(struct lio *lio, int speed)
{
  #line 1517 
  struct oct_nic_seapi_resp *resp;
  #line 1518 
  struct octeon_soft_command *sc;
  #line 1519 
  union octnet_cmd *ncmd;
  #line 1520 
  int retval;
  #line 1521 
  u32 var;
  #line 1516 
  struct octeon_device *oct = lio->oct_dev;
  #line 1523 
  if ((int)oct->speed_setting == speed) 
                                        #line 1524 
                                        return 0;
  #line 1526 
  if ((unsigned int)oct->chip_id != 38658U) {
    #line 1527 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: SET SPEED only for PF\n",(char *)"liquidio_set_speed");
    #line 1529 
    return -95;
  }
  #line 1532 
  sc = octeon_alloc_soft_command(oct,8U,24U,0U);
  #line 1535 
  if (sc == (struct octeon_soft_command *)0) 
                                             #line 1536 
                                             return -12;
  #line 1538 
  ncmd = (union octnet_cmd *)sc->virtdptr;
  #line 1539 
  resp = (struct oct_nic_seapi_resp *)sc->virtrptr;
  #line 1540 
  memset((void *)resp,0,24UL);
  #line 1542 
  __init_completion(& sc->complete);
  #line 1543 
  sc->sc_status = 1U;
  #line 1545 
  ncmd->u64 = 0ULL;
  #line 1546 
  ncmd->s.cmd = (unsigned long long)2U;
  #line 1547 
  ncmd->s.param1 = (unsigned long long)((unsigned short)speed);
  #line 1549 
  octeon_swap_8B_data((u64 *)ncmd,1U);
  #line 1551 
  sc->iq_no = (unsigned int)lio->linfo.txpciq[0].s.q_no;
  #line 1553 
  octeon_prepare_soft_command(oct,sc,(unsigned char)1,(unsigned char)23,0U,0ULL,0ULL);
  #line 1556 
  retval = octeon_send_soft_command(oct,sc);
  #line 1557 
  if (retval == -1) {
    #line 1558 
    _dev_info(& (oct->pci_dev)->dev,(char *)"Failed to send soft command\n");
    #line 1559 
    octeon_free_soft_command(oct,sc);
    #line 1560 
    retval = -16;
  }
  else {
    #line 1563 
    retval = wait_for_sc_completion_timeout_0(oct,sc,0UL);
    #line 1564 
    if (retval != 0) 
                     #line 1565 
                     return retval;
    #line 1567 
    retval = (int)resp->status;
    #line 1569 
    if (retval != 0) {
      #line 1570 
      _dev_err(& (oct->pci_dev)->dev,(char *)"%s failed, retval=%d\n",(char *)"liquidio_set_speed",retval);
      {
        #line 1573 
        union __anonunion___u_3963 __u = {.__val = 1};
        #line 1572 
        __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
        #line 1572 
        int tmp = __u.__val;
      }
      #line 1574 
      return -5;
    }
    #line 1577 
    var = __builtin_bswap32(resp->__anonCompField_oct_nic_seapi_resp_166.speed);
    #line 1578 
    if (var != (unsigned int)speed) 
                                    #line 1579 
                                    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: setting failed speed= %x, expect %x\n",(char *)"liquidio_set_speed",var,speed);
    #line 1584 
    oct->speed_setting = (unsigned char)var;
    {
      #line 1586 
      union __anonunion___u_3965 __u_0 = {.__val = 1};
      #line 1585 
      __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_0.__c),4);
      #line 1585 
      int tmp_3 = __u_0.__val;
    }
  }
  #line 1588 
  return retval;
}

#line 1591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int liquidio_get_speed(struct lio *lio)
{
  #line 1594 
  struct oct_nic_seapi_resp *resp;
  #line 1595 
  struct octeon_soft_command *sc;
  #line 1596 
  union octnet_cmd *ncmd;
  #line 1597 
  int retval;
  #line 1593 
  struct octeon_device *oct = lio->oct_dev;
  #line 1599 
  sc = octeon_alloc_soft_command(oct,8U,24U,0U);
  #line 1602 
  if (sc == (struct octeon_soft_command *)0) 
                                             #line 1603 
                                             return -12;
  #line 1605 
  ncmd = (union octnet_cmd *)sc->virtdptr;
  #line 1606 
  resp = (struct oct_nic_seapi_resp *)sc->virtrptr;
  #line 1607 
  memset((void *)resp,0,24UL);
  #line 1609 
  __init_completion(& sc->complete);
  #line 1610 
  sc->sc_status = 1U;
  #line 1612 
  ncmd->u64 = 0ULL;
  #line 1613 
  ncmd->s.cmd = (unsigned long long)3U;
  #line 1615 
  octeon_swap_8B_data((u64 *)ncmd,1U);
  #line 1617 
  sc->iq_no = (unsigned int)lio->linfo.txpciq[0].s.q_no;
  #line 1619 
  octeon_prepare_soft_command(oct,sc,(unsigned char)1,(unsigned char)23,0U,0ULL,0ULL);
  #line 1622 
  retval = octeon_send_soft_command(oct,sc);
  #line 1623 
  if (retval == -1) {
    #line 1624 
    _dev_info(& (oct->pci_dev)->dev,(char *)"Failed to send soft command\n");
    #line 1625 
    octeon_free_soft_command(oct,sc);
    #line 1626 
    retval = -5;
  }
  else {
    #line 1628 
    retval = wait_for_sc_completion_timeout_0(oct,sc,0UL);
    #line 1629 
    if (retval != 0) 
                     #line 1630 
                     return retval;
    #line 1632 
    retval = (int)resp->status;
    #line 1633 
    if (retval != 0) {
      #line 1634 
      _dev_err(& (oct->pci_dev)->dev,(char *)"%s failed retval=%d\n",(char *)"liquidio_get_speed",retval);
      #line 1636 
      retval = -5;
    }
    else {
      #line 1638 
      u32 var;
      #line 1640 
      var = __builtin_bswap32(resp->__anonCompField_oct_nic_seapi_resp_166.speed);
      #line 1641 
      oct->speed_setting = (unsigned char)var;
      #line 1642 
      if (var == 65535U) 
        #line 1646 
        if (oct->subsystem_id == 464765U || oct->subsystem_id == 399229U) {
          #line 1650 
          oct->no_speed_setting = (unsigned char)1U;
          #line 1651 
          oct->speed_setting = (unsigned char)25U;
        }
        else 
             #line 1653 
             oct->speed_setting = (unsigned char)10U;
    }
    {
      #line 1659 
      union __anonunion___u_3967 __u = {.__val = 1};
      #line 1658 
      __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
      #line 1658 
      int tmp = __u.__val;
    }
  }
  #line 1661 
  return retval;
}

#line 1664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int liquidio_set_fec(struct lio *lio, int on_off)
{
  #line 1666 
  struct oct_nic_seapi_resp *resp;
  #line 1667 
  struct octeon_soft_command *sc;
  #line 1668 
  struct octeon_device *oct;
  #line 1669 
  union octnet_cmd *ncmd;
  #line 1670 
  int retval;
  #line 1671 
  u32 var;
  #line 1673 
  oct = lio->oct_dev;
  #line 1675 
  if (oct->props[lio->ifidx].fec == on_off) 
                                            #line 1676 
                                            return 0;
  #line 1678 
  if ((unsigned int)oct->chip_id != 38658U) {
    #line 1679 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: SET FEC only for PF\n",(char *)"liquidio_set_fec");
    #line 1681 
    return -1;
  }
  #line 1684 
  if ((unsigned int)oct->speed_boot != 25U) {
    #line 1685 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Set FEC only when link speed is 25G during insmod\n");
    #line 1687 
    return -1;
  }
  #line 1690 
  sc = octeon_alloc_soft_command(oct,8U,24U,0U);
  #line 1692 
  if (sc == (struct octeon_soft_command *)0) {
    #line 1693 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Failed to allocate soft command\n");
    #line 1695 
    return -12;
  }
  #line 1698 
  ncmd = (union octnet_cmd *)sc->virtdptr;
  #line 1699 
  resp = (struct oct_nic_seapi_resp *)sc->virtrptr;
  #line 1700 
  memset((void *)resp,0,24UL);
  #line 1702 
  __init_completion(& sc->complete);
  #line 1703 
  sc->sc_status = 1U;
  #line 1705 
  ncmd->u64 = 0ULL;
  #line 1706 
  ncmd->s.cmd = (unsigned long long)0U;
  #line 1707 
  ncmd->s.param1 = (unsigned long long)((unsigned short)on_off);
  #line 1710 
  octeon_swap_8B_data((u64 *)ncmd,1U);
  #line 1712 
  sc->iq_no = (unsigned int)lio->linfo.txpciq[0].s.q_no;
  #line 1714 
  octeon_prepare_soft_command(oct,sc,(unsigned char)1,(unsigned char)23,0U,0ULL,0ULL);
  #line 1717 
  retval = octeon_send_soft_command(oct,sc);
  #line 1718 
  if (retval == -1) {
    #line 1719 
    _dev_info(& (oct->pci_dev)->dev,(char *)"Failed to send soft command\n");
    #line 1720 
    octeon_free_soft_command(oct,sc);
    #line 1721 
    return -5;
  }
  #line 1724 
  retval = wait_for_sc_completion_timeout_0(oct,sc,0UL);
  #line 1725 
  if (retval != 0) 
                   #line 1726 
                   return -5;
  #line 1728 
  var = __builtin_bswap32(resp->__anonCompField_oct_nic_seapi_resp_166.fec_setting);
  #line 1729 
  resp->__anonCompField_oct_nic_seapi_resp_166.fec_setting = var;
  #line 1730 
  if (var != (unsigned int)on_off) {
    #line 1731 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Setting failed fec= %x, expect %x\n",var,on_off);
    #line 1734 
    oct->props[lio->ifidx].fec = (int)var;
    #line 1735 
    if (resp->__anonCompField_oct_nic_seapi_resp_166.fec_setting == 1U) 
      #line 1736 
      oct->props[lio->ifidx].fec = 1; else 
                                           #line 1738 
                                           oct->props[lio->ifidx].fec = 0;
  }
  {
    #line 1742 
    union __anonunion___u_3969 __u = {.__val = 1};
    #line 1741 
    __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
    #line 1741 
    int tmp = __u.__val;
  }
  #line 1743 
  if (oct->props[lio->ifidx].fec != oct->props[lio->ifidx].fec_boot) {
    #line 1745 
    bool branch;
    #line 1745 
    struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"liquidio_set_fec", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c", .format = (char *)"Reload driver to change fec to %s\n", .lineno = (unsigned int)1745U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1745 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
    #line 1745 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1745 
      char *tmp_0;
      #line 1745 
      if (oct->props[lio->ifidx].fec != 0) 
                                           #line 1745 
                                           tmp_0 = (char *)"on"; else 
                                                                   #line 1745 
                                                                   tmp_0 = (char *)"off";
      #line 1745 
      ;
      #line 1745 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug453,& (oct->pci_dev)->dev,(char *)"Reload driver to change fec to %s\n",tmp_0);
    }
  }
  #line 1750 
  return retval;
}

#line 1753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c"
int liquidio_get_fec(struct lio *lio)
{
  #line 1755 
  struct oct_nic_seapi_resp *resp;
  #line 1756 
  struct octeon_soft_command *sc;
  #line 1757 
  struct octeon_device *oct;
  #line 1758 
  union octnet_cmd *ncmd;
  #line 1759 
  int retval;
  #line 1760 
  u32 var;
  #line 1762 
  oct = lio->oct_dev;
  #line 1764 
  sc = octeon_alloc_soft_command(oct,8U,24U,0U);
  #line 1766 
  if (sc == (struct octeon_soft_command *)0) 
                                             #line 1767 
                                             return -12;
  #line 1769 
  ncmd = (union octnet_cmd *)sc->virtdptr;
  #line 1770 
  resp = (struct oct_nic_seapi_resp *)sc->virtrptr;
  #line 1771 
  memset((void *)resp,0,24UL);
  #line 1773 
  __init_completion(& sc->complete);
  #line 1774 
  sc->sc_status = 1U;
  #line 1776 
  ncmd->u64 = 0ULL;
  #line 1777 
  ncmd->s.cmd = (unsigned long long)1U;
  #line 1779 
  octeon_swap_8B_data((u64 *)ncmd,1U);
  #line 1781 
  sc->iq_no = (unsigned int)lio->linfo.txpciq[0].s.q_no;
  #line 1783 
  octeon_prepare_soft_command(oct,sc,(unsigned char)1,(unsigned char)23,0U,0ULL,0ULL);
  #line 1786 
  retval = octeon_send_soft_command(oct,sc);
  #line 1787 
  if (retval == -1) {
    #line 1788 
    _dev_info(& (oct->pci_dev)->dev,(char *)"%s: Failed to send soft command\n",(char *)"liquidio_get_fec");
    #line 1790 
    octeon_free_soft_command(oct,sc);
    #line 1791 
    return -5;
  }
  #line 1794 
  retval = wait_for_sc_completion_timeout_0(oct,sc,0UL);
  #line 1795 
  if (retval != 0) 
                   #line 1796 
                   return retval;
  #line 1798 
  var = __builtin_bswap32(resp->__anonCompField_oct_nic_seapi_resp_166.fec_setting);
  #line 1799 
  resp->__anonCompField_oct_nic_seapi_resp_166.fec_setting = var;
  #line 1800 
  if (resp->__anonCompField_oct_nic_seapi_resp_166.fec_setting == 1U) 
    #line 1801 
    oct->props[lio->ifidx].fec = 1; else 
                                         #line 1803 
                                         oct->props[lio->ifidx].fec = 0;
  {
    #line 1806 
    union __anonunion___u_3971 __u = {.__val = 1};
    #line 1805 
    __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
    #line 1805 
    int tmp = __u.__val;
  }
  #line 1807 
  if (oct->props[lio->ifidx].fec != oct->props[lio->ifidx].fec_boot) {
    #line 1809 
    bool branch;
    #line 1809 
    struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"liquidio_get_fec", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_core.c", .format = (char *)"Reload driver to change fec to %s\n", .lineno = (unsigned int)1809U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1809 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
    #line 1809 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1809 
      char *tmp_0;
      #line 1809 
      if (oct->props[lio->ifidx].fec != 0) 
                                           #line 1809 
                                           tmp_0 = (char *)"on"; else 
                                                                   #line 1809 
                                                                   tmp_0 = (char *)"off";
      #line 1809 
      ;
      #line 1809 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug454,& (oct->pci_dev)->dev,(char *)"Reload driver to change fec to %s\n",tmp_0);
    }
  }
  #line 1814 
  return retval;
}

#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
#line 101 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
enum irqreturn emg_wrapper_liquidio_legacy_intr_handler(int arg0, void *arg1)
{
  #line 109 
  return liquidio_legacy_intr_handler(arg0,arg1);
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 131 
  ldv_set_bit(nr,addr);
  #line 132 
  return;
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 138 
  ldv_clear_bit(nr,addr);
  #line 139 
  return;
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static void INIT_LIST_HEAD_2(struct list_head *list)
{
  #line 145 
  ldv_init_list_head(list);
  #line 146 
  return;
}

#line 320  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static bool cif_queue_delayed_work_1(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 324 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 480  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 483 
  return ldv_kcalloc(n,size,flags);
}

#line 501  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 504 
  return ldv_kzalloc(size,flags);
}

#line 674  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static void cif_tasklet_schedule_0(struct tasklet_struct *t)
{
  #line 678 
  emg_tasklet_schedule(t);
  #line 679 
  return;
}

#line 682  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 686 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 690  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 694 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 698  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_core.i.aux"
static bool cif_schedule_delayed_work_1(struct delayed_work *dwork, unsigned long delay)
{
  #line 702 
  return emg_schedule_delayed_work(dwork,delay);
}

#line 4  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
#line 4 
void ldv_atomic_add(int i, atomic_t *v);
#line 5 
#line 5 
void ldv_atomic_sub(int i, atomic_t *v);
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 487 
void print_hex_dump(char *, char *, int, int, int, void *, size_t, bool);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void INIT_LIST_HEAD_3(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_2(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_3984 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_2(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_2(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_2(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_3986 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_2(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_2(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_2(struct list_head *entry)
{
  #line 139 
  __list_del_entry_2(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_3(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_4038 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set_2(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_4040 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_3(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_3(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set_2(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set_2(v,i);
  #line 46 
  return;
}

#line 60 
#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void atomic_add(int i, atomic_t *v);
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void atomic_sub(int i, atomic_t *v);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void atomic_inc_1(atomic_t *v);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_1(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void cif_spin_lock_bh_lock_of_octeon_dispatch_list(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_1(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 675  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void cif_spin_unlock_bh_lock_of_octeon_dispatch_list(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 714  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void cif_spin_unlock_irqrestore_lock_for_droq_int_enb_reg_of_octeon_cn6xxx(spinlock_t *lock, unsigned long flags);
#line 35 
#line 705 
static void cif___ldv_spin_lock_lock_for_droq_int_enb_reg_of_octeon_cn6xxx(spinlock_t *lock);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 22 
void *ldv_vzalloc(unsigned long size);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head_1(struct page *page)
{
  #line 175 
  union __anonunion___u_4121 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_44.__anonCompField___anonunion_186_39.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static int PagePoisoned(struct page *page)
{
  #line 194 
  return page->flags == 18446744073709551615UL;
}

#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t array_size(size_t a, size_t b)
{
  #line 257 
  size_t __a;
  #line 257 
  size_t __b;
  #line 257 
  size_t *__d;
  #line 255 
  size_t bytes;
  {
    #line 257 
    __a = a;
    #line 257 
    __b = b;
    #line 257 
    __d = & bytes;
    #line 257 
    int tmp = & __a == __d;
    }
  #line 257 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 258 
                                                return 18446744073709551615UL;
  #line 260 
  return bytes;
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 730  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void *cif_vmalloc_0(unsigned long size);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 698  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void *cif_vzalloc(unsigned long size);
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 723  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void *cif_vmalloc_node(unsigned long size, int node);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 691  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void *cif_vzalloc_node(unsigned long size, int node);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 684  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void cif_vfree_0(void *addr);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  #line 88 
  int pscr_ret__;
  {
    #line 88 
    void *__vpp_verify = (void *)0;
    #line 88 
    void *tmp = __vpp_verify;
  }
  #line 88 
  switch (4UL) {
    #line 88 
    int pfo_ret__;
    #line 88 
    int pfo_ret___0;
    #line 88 
    int pfo_ret___1;
    #line 88 
    int pfo_ret___2;
    #line 88 
    case (unsigned long)1: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret__;
    #line 88 
    break;
    #line 88 
    case (unsigned long)2: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___0;
    #line 88 
    break;
    #line 88 
    case (unsigned long)4: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___1;
    #line 88 
    break;
    #line 88 
    case (unsigned long)8: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___2;
    #line 88 
    break;
    #line 88 
    default: 
             #line 88 
    ;
    #line 88 
    __bad_size_call_parameter();
    #line 88 
    break;
  }
  #line 88 
  return pscr_ret__;
}

#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 527 
struct page *alloc_pages_current(gfp_t, unsigned int);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 532 
  return alloc_pages_current(gfp_mask,order);
}

#line 566 
#line 566 
void __free_pages(struct page *, unsigned int);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 458  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count_1(struct page *page)
{
  #line 67 
  return atomic_read_3(& page->_refcount);
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_count(struct page *page)
{
  #line 72 
  return atomic_read_3(& compound_head_1(page)->_refcount);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_inc(struct page *page)
{
  #line 107 
  atomic_inc_1(& page->_refcount);
  #line 108 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 109 
                                                                   __page_ref_mod(page,1);
  #line 110 
  return;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int put_page_testzero_1(struct page *page)
{
  #line 592 
  if ((long)(page_ref_count_1(page) == 0) != 0L) {
    #line 592 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 593 
    ldv_inline_asm();
    #line 594 
    ldv_inline_asm();
    #line 595 
    ldv_inline_asm();
    #line 592 
    ;
  }
  #line 593 
  return page_ref_dec_and_test(page);
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void put_page_1(struct page *page)
{
  #line 1023 
  page = compound_head_1(page);
  #line 1031 
  if ((int)put_devmap_managed_page(page) != 0) 
                                               #line 1032 
                                               return;
  #line 1034 
  if (put_page_testzero_1(page) != 0) 
                                      #line 1035 
                                      __put_page(page);
  #line 1036 
  return;
}

#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int page_to_nid(struct page *page)
{
  #line 1085 
  struct page *p = page;
  {
    #line 1087 
    if ((long)(PagePoisoned(p) != 0) != 0L) {
      #line 1087 
      dump_page(p,(char *)"VM_BUG_ON_PAGE(");
      #line 1088 
      ldv_inline_asm();
      #line 1089 
      ldv_inline_asm();
      #line 1090 
      ldv_inline_asm();
      #line 1087 
      ;
    }
  }
  #line 1087 
  ;
  #line 1087 
  return (int)(p->flags >> 54UL) & 1023;
}

#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_put_data(struct sk_buff *skb, void *data, unsigned int len)
{
  #line 2233 
  void *tmp = skb_put(skb,len);
  #line 2235 
  memcpy(tmp,data,(unsigned long)len);
  #line 2237 
  return tmp;
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 2792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *dev_alloc_skb(unsigned int length)
{
  #line 2794 
  return netdev_alloc_skb((struct net_device *)0,length);
}

#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
__inline static u32 incr_index(u32 index, u32 count, u32 max)
{
  #line 128 
  if (index + count >= max) 
                            #line 129 
                            index = (index + count) - max; else 
                                                                #line 131 
                                                                index += count;
  #line 133 
  return index;
}

#line 910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/liquidio_common.h"
__inline static int opcode_slow_path(union octeon_rh *rh)
{
  #line 912 
  u16 subcode1;
  #line 912 
  u16 subcode2;
  #line 914 
  subcode1 = (unsigned short)((((int)rh->r.opcode << 8) & 3840) | ((int)rh->r.subcode & 127));
  #line 915 
  subcode2 = (unsigned short)258U;
  #line 917 
  return (int)subcode2 != (int)subcode1;
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.h"
__inline static struct octeon_recv_info *octeon_alloc_recv_info(int extra_bytes)
{
  #line 189 
  struct octeon_recv_info *recv_info;
  #line 190 
  u8 *buf;
  #line 192 
  buf = (u8 *)kmalloc((unsigned long)extra_bytes + 800UL,2592U);
  #line 194 
  if (buf == (u8 *)0U) 
                       #line 195 
                       return (struct octeon_recv_info *)0;
  #line 197 
  recv_info = (struct octeon_recv_info *)buf;
  #line 198 
  recv_info->recv_pkt = (struct octeon_recv_pkt *)(buf + 16UL);
  #line 200 
  recv_info->rsvd = (void *)0;
  #line 201 
  if (extra_bytes != 0) 
                        #line 202 
                        recv_info->rsvd = (void *)(buf + 800UL);
  #line 204 
  return recv_info;
}

#line 337 
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
int octeon_init_droq(struct octeon_device *oct, u32 q_no, u32 num_descs, u32 desc_size, void *app_ctx);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.h"
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
void *octeon_get_dispatch_arg(struct octeon_device *octeon_dev, u16 opcode, u16 subcode);
#line 405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.h"
#line 744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
int octeon_droq_process_packets(struct octeon_device *oct, struct octeon_droq *droq, u32 budget);
#line 698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
#line 698 
octeon_dispatch_fn_t octeon_get_dispatch(struct octeon_device *octeon_dev, u16 opcode, u16 subcode);
#line 901 
#line 901 
void lio_enable_irq(struct octeon_droq *droq, struct octeon_instr_queue *iq);
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void *recv_buffer_alloc(struct octeon_device *oct, struct octeon_skb_page_info *pg_info)
{
  #line 263 
  struct page *page;
  #line 264 
  struct sk_buff *skb;
  #line 265 
  struct octeon_skb_page_info *skb_pg_info;
  #line 267 
  page = alloc_pages(2592U,0U);
  #line 268 
  if ((long)(page == (struct page *)0) != 0L) 
                                              #line 269 
                                              return (void *)0;
  #line 271 
  skb = dev_alloc_skb(320U);
  #line 272 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    #line 273 
    __free_pages(page,0U);
    #line 274 
    pg_info->page = (struct page *)0;
    #line 275 
    return (void *)0;
  }
  #line 278 
  if (((unsigned long)skb->data & 63UL) != 0UL) {
    #line 279 
    u32 r = 64U - ((unsigned int)((long)skb->data) & 63U);
    #line 281 
    skb_reserve(skb,(int)r);
  }
  #line 284 
  skb_pg_info = (struct octeon_skb_page_info *)(& skb->cb);
  #line 286 
  pg_info->dma = dma_map_page_attrs(& (oct->pci_dev)->dev,page,0UL,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 290 
  if (dma_mapping_error(& (oct->pci_dev)->dev,pg_info->dma) != 0) {
    #line 291 
    __free_pages(page,0U);
    #line 292 
    dev_kfree_skb_any(skb);
    #line 293 
    pg_info->page = (struct page *)0;
    #line 294 
    return (void *)0;
  }
  #line 297 
  pg_info->page = page;
  #line 298 
  pg_info->page_offset = 0U;
  #line 299 
  skb_pg_info->page = page;
  #line 300 
  skb_pg_info->page_offset = 0U;
  #line 301 
  skb_pg_info->dma = pg_info->dma;
  #line 303 
  return (void *)skb;
}

#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void *recv_buffer_fast_alloc(u32 size)
{
  #line 309 
  struct sk_buff *skb;
  #line 310 
  struct octeon_skb_page_info *skb_pg_info;
  #line 312 
  skb = dev_alloc_skb(size + 64U);
  #line 313 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 314 
                                                return (void *)0;
  #line 316 
  if (((unsigned long)skb->data & 63UL) != 0UL) {
    #line 317 
    u32 r = 64U - ((unsigned int)((long)skb->data) & 63U);
    #line 319 
    skb_reserve(skb,(int)r);
  }
  #line 322 
  skb_pg_info = (struct octeon_skb_page_info *)(& skb->cb);
  #line 323 
  skb_pg_info->page = (struct page *)0;
  #line 324 
  skb_pg_info->page_offset = 0U;
  #line 325 
  skb_pg_info->dma = 0ULL;
  #line 327 
  return (void *)skb;
}

#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static int recv_buffer_recycle(struct octeon_device *oct, void *buf)
{
  #line 333 
  struct octeon_skb_page_info *pg_info = (struct octeon_skb_page_info *)buf;
  #line 335 
  if (pg_info->page == (struct page *)0) {
    #line 336 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: pg_info->page NULL\n",(char *)"recv_buffer_recycle");
    #line 338 
    return -12;
  }
  #line 341 
  if ((long)(page_count(pg_info->page) != 1) != 0L) 
                                                    #line 341 
                                                    goto _LOR;
  else {
    #line 341 
    if ((long)(page_to_nid(pg_info->page) != numa_node_id()) != 0L) {
      #line 341 
      _LOR: {
              #line 343 
              dma_unmap_page_attrs(& (oct->pci_dev)->dev,pg_info->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
              #line 346 
              pg_info->dma = 0ULL;
              #line 347 
              pg_info->page = (struct page *)0;
              #line 348 
              pg_info->page_offset = 0U;
              #line 349 
              return -12;
            }
    }
  }
  #line 353 
  if (pg_info->page_offset == 0U) 
                                  #line 354 
                                  pg_info->page_offset = 2048U; else 
                                                                  #line 356 
                                                                  pg_info->page_offset = 0U;
  #line 357 
  page_ref_inc(pg_info->page);
  #line 359 
  return 0;
}

#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void *recv_buffer_reuse(struct octeon_device *oct, void *buf)
{
  #line 365 
  struct octeon_skb_page_info *skb_pg_info;
  #line 366 
  struct sk_buff *skb;
  #line 365 
  struct octeon_skb_page_info *pg_info = (struct octeon_skb_page_info *)buf;
  #line 368 
  skb = dev_alloc_skb(320U);
  #line 369 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    #line 370 
    dma_unmap_page_attrs(& (oct->pci_dev)->dev,pg_info->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
    #line 373 
    return (void *)0;
  }
  #line 376 
  if (((unsigned long)skb->data & 63UL) != 0UL) {
    #line 377 
    u32 r = 64U - ((unsigned int)((long)skb->data) & 63U);
    #line 379 
    skb_reserve(skb,(int)r);
  }
  #line 382 
  skb_pg_info = (struct octeon_skb_page_info *)(& skb->cb);
  #line 383 
  skb_pg_info->page = pg_info->page;
  #line 384 
  skb_pg_info->page_offset = pg_info->page_offset;
  #line 385 
  skb_pg_info->dma = pg_info->dma;
  #line 387 
  return (void *)skb;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void recv_buffer_destroy(void *buffer, struct octeon_skb_page_info *pg_info)
{
  #line 393 
  struct sk_buff *skb = (struct sk_buff *)buffer;
  #line 395 
  put_page_1(pg_info->page);
  #line 396 
  pg_info->dma = 0ULL;
  #line 397 
  pg_info->page = (struct page *)0;
  #line 398 
  pg_info->page_offset = 0U;
  #line 400 
  if (skb != (struct sk_buff *)0) 
                                  #line 401 
                                  dev_kfree_skb_any(skb);
  #line 402 
  return;
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void recv_buffer_free_1(void *buffer)
{
  #line 407 
  struct octeon_skb_page_info *pg_info;
  #line 406 
  struct sk_buff *skb = (struct sk_buff *)buffer;
  #line 409 
  pg_info = (struct octeon_skb_page_info *)(& skb->cb);
  #line 411 
  if (pg_info->page != (struct page *)0) {
    #line 412 
    put_page_1(pg_info->page);
    #line 413 
    pg_info->dma = 0ULL;
    #line 414 
    pg_info->page = (struct page *)0;
    #line 415 
    pg_info->page_offset = 0U;
  }
  #line 418 
  dev_kfree_skb_any((struct sk_buff *)buffer);
  #line 419 
  return;
}

#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static u64 lio_map_ring(void *buf)
{
  #line 452 
  dma_addr_t dma_addr;
  #line 455 
  struct octeon_skb_page_info *pg_info;
  #line 454 
  struct sk_buff *skb = (struct sk_buff *)buf;
  #line 457 
  pg_info = (struct octeon_skb_page_info *)(& skb->cb);
  #line 458 
  if (pg_info->page == (struct page *)0) {
    #line 459 
    printk((char *)"\001",(char *)"lio_map_ring");
    {
      #line 460 
      int __ret_warn_on = 1;
      #line 460 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 461 
        ldv_inline_asm();
        #line 462 
        ldv_inline_asm();
      }
      #line 460 
      long tmp = (long)(__ret_warn_on != 0);
    }
  }
  #line 464 
  dma_addr = pg_info->dma;
  #line 465 
  if (pg_info->dma == 0ULL) {
    #line 466 
    printk((char *)"\001",(char *)"lio_map_ring");
    {
      #line 468 
      int __ret_warn_on_0 = 1;
      #line 468 
      if ((long)(__ret_warn_on_0 != 0) != 0L) {
        #line 469 
        ldv_inline_asm();
        #line 470 
        ldv_inline_asm();
      }
      #line 468 
      long tmp_3 = (long)(__ret_warn_on_0 != 0);
    }
  }
  #line 470 
  dma_addr = (unsigned long long)pg_info->page_offset + dma_addr;
  #line 472 
  return dma_addr;
}

#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void lio_unmap_ring(struct pci_dev *pci_dev, u64 buf_ptr)
{
  #line 480 
  dma_unmap_page_attrs(& pci_dev->dev,buf_ptr,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 481 
  return;
}

#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void *octeon_fast_packet_alloc(u32 size)
{
  #line 487 
  return recv_buffer_fast_alloc(size);
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void octeon_fast_packet_next(struct octeon_droq *droq, struct sk_buff *nicbuf, int copy_len, int idx)
{
  #line 495 
  ;
  #line 495 
  ;
  #line 495 
  skb_put_data(nicbuf,get_rbd((struct sk_buff *)(droq->recv_buf_list + (unsigned long)idx)->buffer),(unsigned int)copy_len);
  #line 496 
  return;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
void *octeon_get_dispatch_arg(struct octeon_device *octeon_dev, u16 opcode, u16 subcode)
{
  #line 58 
  int idx;
  #line 59 
  struct list_head *dispatch;
  #line 60 
  void *fn_arg = (void *)0;
  #line 61 
  u16 combined_opcode = (unsigned short)((((int)opcode << 8) & 3840) | ((int)subcode & 127));
  #line 63 
  idx = (int)combined_opcode & 63;
  #line 65 
  cif_spin_lock_bh_lock_of_octeon_dispatch_list(& octeon_dev->dispatch.lock);
  #line 67 
  if (octeon_dev->dispatch.count == 0U) {
    #line 68 
    cif_spin_unlock_bh_lock_of_octeon_dispatch_list(& octeon_dev->dispatch.lock);
    #line 69 
    return (void *)0;
  }
  #line 72 
  if ((int)(octeon_dev->dispatch.dlist + (unsigned long)idx)->opcode == (int)combined_opcode) 
    #line 73 
    fn_arg = (octeon_dev->dispatch.dlist + (unsigned long)idx)->arg;
  else {
    #line 75 
    dispatch = (octeon_dev->dispatch.dlist + (unsigned long)idx)->list.next;
    #line 75 
    while (& (octeon_dev->dispatch.dlist + (unsigned long)idx)->list != dispatch) {
      #line 77 
      if ((int)((struct octeon_dispatch *)dispatch)->opcode == (int)combined_opcode) {
        #line 79 
        fn_arg = ((struct octeon_dispatch *)dispatch)->arg;
        #line 81 
        break;
      }
      #line 75 
      dispatch = dispatch->next;
    }
  }
  #line 86 
  cif_spin_unlock_bh_lock_of_octeon_dispatch_list(& octeon_dev->dispatch.lock);
  #line 87 
  return fn_arg;
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
u32 octeon_droq_check_hw_for_pkts(struct octeon_droq *droq)
{
  #line 97 
  u32 last_count;
  #line 96 
  u32 pkt_count = 0U;
  #line 99 
  pkt_count = readl(droq->pkts_sent_reg);
  #line 101 
  last_count = pkt_count - droq->pkt_count;
  #line 102 
  droq->pkt_count = pkt_count;
  #line 105 
  if (last_count != 0U) 
                        #line 106 
                        atomic_add((int)last_count,& droq->pkts_pending);
  #line 108 
  return last_count;
}

#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
static void octeon_droq_compute_max_packet_bufs(struct octeon_droq *droq)
{
  #line 113 
  u32 count = 0U;
  #line 120 
  droq->max_empty_descs = 0U;
  #line 122 
  while (1) {
    #line 123 
    (droq->max_empty_descs) ++;
    #line 124 
    count = droq->buffer_size + count;
    #line 125 
    if (! (count <= 65535U)) 
                             #line 122 
                             break;
  }
  #line 127 
  droq->max_empty_descs = droq->max_count - droq->max_empty_descs;
  #line 128 
  return;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
static void octeon_droq_reset_indices(struct octeon_droq *droq)
{
  #line 132 
  droq->read_idx = 0U;
  #line 133 
  droq->write_idx = 0U;
  #line 134 
  droq->refill_idx = 0U;
  #line 135 
  droq->refill_count = 0U;
  #line 136 
  atomic_set_2(& droq->pkts_pending,0);
  #line 137 
  return;
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
static void octeon_droq_destroy_ring_buffers(struct octeon_device *oct, struct octeon_droq *droq)
{
  #line 143 
  u32 i;
  #line 144 
  struct octeon_skb_page_info *pg_info;
  #line 146 
  i = 0U;
  #line 146 
  while (droq->max_count > i) {
    #line 147 
    pg_info = & (droq->recv_buf_list + (unsigned long)i)->pg_info;
    #line 148 
    if (pg_info == (struct octeon_skb_page_info *)0) 
                                                     #line 149 
                                                     goto __Cont;
    #line 151 
    if (pg_info->dma != 0ULL) 
                              #line 152 
                              lio_unmap_ring(oct->pci_dev,pg_info->dma);
    #line 154 
    pg_info->dma = 0ULL;
    #line 156 
    if (pg_info->page != (struct page *)0) 
                                           #line 157 
                                           recv_buffer_destroy((droq->recv_buf_list + (unsigned long)i)->buffer,pg_info);
    #line 160 
    (droq->recv_buf_list + (unsigned long)i)->buffer = (void *)0;
    #line 146 
    __Cont: 
            #line 146 
    i ++;
  }
  #line 163 
  octeon_droq_reset_indices(droq);
  #line 164 
  return;
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
static int octeon_droq_setup_ring_buffers(struct octeon_device *oct, struct octeon_droq *droq)
{
  #line 170 
  u32 i;
  #line 171 
  void *buf;
  #line 172 
  struct octeon_droq_desc *desc_ring = droq->desc_ring;
  #line 174 
  i = 0U;
  #line 174 
  while (droq->max_count > i) {
    #line 175 
    buf = recv_buffer_alloc(oct,& (droq->recv_buf_list + (unsigned long)i)->pg_info);
    #line 177 
    if (buf == (void *)0) {
      #line 178 
      _dev_err(& (oct->pci_dev)->dev,(char *)"%s buffer alloc failed\n",(char *)"octeon_droq_setup_ring_buffers");
      #line 180 
      (droq->stats.rx_alloc_failure) ++;
      #line 181 
      return -12;
    }
    #line 184 
    (droq->recv_buf_list + (unsigned long)i)->buffer = buf;
    #line 185 
    (droq->recv_buf_list + (unsigned long)i)->data = (u8 *)get_rbd((struct sk_buff *)buf);
    #line 186 
    (desc_ring + (unsigned long)i)->info_ptr = 0ULL;
    #line 187 
    (desc_ring + (unsigned long)i)->buffer_ptr = lio_map_ring((droq->recv_buf_list + (unsigned long)i)->buffer);
    #line 174 
    i ++;
  }
  #line 191 
  octeon_droq_reset_indices(droq);
  #line 193 
  octeon_droq_compute_max_packet_bufs(droq);
  #line 195 
  return 0;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
int octeon_delete_droq(struct octeon_device *oct, u32 q_no)
{
  #line 200 
  struct octeon_droq *droq = oct->droq[q_no];
  {
    #line 202 
    bool branch;
    #line 202 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_delete_droq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c", .format = (char *)"%s[%d]\n", .lineno = (unsigned int)202U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 202 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 202 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 202 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug442,& (oct->pci_dev)->dev,(char *)"%s[%d]\n",(char *)"octeon_delete_droq",q_no);
  }
  #line 204 
  octeon_droq_destroy_ring_buffers(oct,droq);
  #line 205 
  cif_vfree_0((void *)droq->recv_buf_list);
  #line 207 
  if (droq->desc_ring != (struct octeon_droq_desc *)0) 
                                                       #line 208 
                                                       dma_free_coherent(& (oct->pci_dev)->dev,(unsigned long)droq->max_count * 16UL,(void *)droq->desc_ring,(unsigned long long)droq->desc_ring_dma);
  #line 211 
  memset((void *)droq,0,672UL);
  #line 212 
  oct->io_qmask.oq &= ~ (1ULL << q_no);
  #line 213 
  cif_vfree_0((void *)oct->droq[q_no]);
  #line 214 
  oct->droq[q_no] = (struct octeon_droq *)0;
  #line 215 
  (oct->num_oqs) --;
  #line 217 
  return 0;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
int octeon_init_droq(struct octeon_device *oct, u32 q_no, u32 num_descs, u32 desc_size, void *app_ctx)
{
  #line 245 
  struct octeon_device *_oct;
  #line 226 
  struct octeon_droq *droq;
  #line 227 
  u32 desc_ring_size = 0U;
  #line 227 
  u32 c_num_descs = 0U;
  #line 227 
  u32 c_buf_size = 0U;
  #line 228 
  u32 c_pkts_per_intr = 0U;
  #line 228 
  u32 c_refill_threshold = 0U;
  #line 229 
  int numa_node = dev_to_node(& (oct->pci_dev)->dev);
  {
    #line 231 
    bool branch;
    #line 231 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_init_droq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c", .format = (char *)"%s[%d]\n", .lineno = (unsigned int)231U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 231 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 231 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 231 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug443,& (oct->pci_dev)->dev,(char *)"%s[%d]\n",(char *)"octeon_init_droq",q_no);
  }
  #line 233 
  droq = oct->droq[q_no];
  #line 234 
  memset((void *)droq,0,672UL);
  #line 236 
  droq->oct_dev = oct;
  #line 237 
  droq->q_no = q_no;
  #line 238 
  if (app_ctx != (void *)0) 
                            #line 239 
                            droq->app_ctx = app_ctx; else 
                                                          #line 241 
                                                          droq->app_ctx = (void *)((unsigned long)q_no);
  #line 243 
  c_num_descs = num_descs;
  #line 244 
  c_buf_size = desc_size;
  #line 245 
  _oct = oct;
  #line 245 
  if (((unsigned int)_oct->chip_id + 65391U <= 1U) != 0) {
    #line 246 
    struct octeon_config *conf6x = ((struct octeon_cn6xxx *)oct->chip)->conf;
    #line 248 
    c_pkts_per_intr = (unsigned int)conf6x->oq.pkts_per_intr;
    #line 249 
    c_refill_threshold = (unsigned int)conf6x->oq.refill_threshold;
  }
  else 
    #line 251 
    if ((unsigned int)oct->chip_id == 38658U) {
      #line 252 
      struct octeon_config *conf23 = ((struct octeon_cn23xx_pf *)oct->chip)->conf;
      #line 254 
      c_pkts_per_intr = (unsigned int)conf23->oq.pkts_per_intr;
      #line 255 
      c_refill_threshold = (unsigned int)conf23->oq.refill_threshold;
    }
    else 
      #line 256 
      if ((unsigned int)oct->chip_id == 38674U) {
        #line 257 
        struct octeon_config *conf23_0 = ((struct octeon_cn23xx_vf *)oct->chip)->conf;
        #line 259 
        c_pkts_per_intr = (unsigned int)conf23_0->oq.pkts_per_intr;
        #line 260 
        c_refill_threshold = (unsigned int)conf23_0->oq.refill_threshold;
      }
      else 
           #line 262 
           return 1;
  #line 265 
  droq->max_count = c_num_descs;
  #line 266 
  droq->buffer_size = c_buf_size;
  #line 268 
  desc_ring_size = droq->max_count * 16U;
  #line 269 
  droq->desc_ring = (struct octeon_droq_desc *)dma_alloc_coherent(& (oct->pci_dev)->dev,(unsigned long)desc_ring_size,(dma_addr_t *)(& droq->desc_ring_dma),3264U);
  #line 272 
  if (droq->desc_ring == (struct octeon_droq_desc *)0) {
    #line 273 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Output queue %d ring alloc failed\n",q_no);
    #line 275 
    return 1;
  }
  {
    #line 278 
    bool branch_0;
    #line 278 
    struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_init_droq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c", .format = (char *)"droq[%d]: desc_ring: virt: 0x%p, dma: %lx\n", .lineno = (unsigned int)278U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 278 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
    #line 278 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 278 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug444,& (oct->pci_dev)->dev,(char *)"droq[%d]: desc_ring: virt: 0x%p, dma: %lx\n",q_no,droq->desc_ring,droq->desc_ring_dma);
  }
  {
    #line 280 
    bool branch_1;
    #line 280 
    struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_init_droq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c", .format = (char *)"droq[%d]: num_desc: %d\n", .lineno = (unsigned int)280U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 280 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
    #line 280 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 280 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug445,& (oct->pci_dev)->dev,(char *)"droq[%d]: num_desc: %d\n",q_no,droq->max_count);
  }
  #line 283 
  ;
  #line 283 
  droq->recv_buf_list = (struct octeon_recv_buffer *)cif_vzalloc_node(array_size((unsigned long)droq->max_count,40UL),
                         numa_node);
  #line 286 
  if (droq->recv_buf_list == (struct octeon_recv_buffer *)0) {
    #line 287 
    droq->recv_buf_list = (struct octeon_recv_buffer *)cif_vzalloc(array_size((unsigned long)droq->max_count,40UL));
  }
  #line 290 
  if (droq->recv_buf_list == (struct octeon_recv_buffer *)0) {
    #line 291 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Output queue recv buf list alloc failed\n");
    #line 292 
    goto init_droq_fail;
  }
  #line 295 
  if (octeon_droq_setup_ring_buffers(oct,droq) != 0) 
                                                     #line 296 
                                                     goto init_droq_fail;
  #line 298 
  droq->pkts_per_intr = c_pkts_per_intr;
  #line 299 
  droq->refill_threshold = c_refill_threshold;
  {
    #line 301 
    bool branch_2;
    #line 301 
    struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_init_droq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c", .format = (char *)"DROQ INIT: max_empty_descs: %d\n", .lineno = (unsigned int)301U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 301 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
    #line 301 
    if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                  #line 301 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug446,& (oct->pci_dev)->dev,(char *)"DROQ INIT: max_empty_descs: %d\n",droq->max_empty_descs);
  }
  #line 304 
  INIT_LIST_HEAD_3(& droq->dispatch_list);
  #line 307 
  (*(oct->fn_list.setup_oq_regs))(oct,q_no);
  #line 309 
  oct->io_qmask.oq |= 1ULL << q_no;
  #line 311 
  return 0;
  #line 313 
  init_droq_fail: 
                  #line 313 
  ;
  #line 314 
  octeon_delete_droq(oct,q_no);
  #line 315 
  return 1;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
__inline static struct octeon_recv_info *octeon_create_recv_info(struct octeon_device *octeon_dev, struct octeon_droq *droq, u32 buf_cnt, u32 idx)
{
  #line 341 
  struct octeon_droq_info *info;
  #line 342 
  struct octeon_recv_pkt *recv_pkt;
  #line 343 
  struct octeon_recv_info *recv_info;
  #line 344 
  u32 i;
  #line 344 
  u32 bytes_left;
  #line 345 
  struct octeon_skb_page_info *pg_info;
  #line 347 
  info = (struct octeon_droq_info *)(droq->recv_buf_list + (unsigned long)idx)->data;
  #line 349 
  recv_info = octeon_alloc_recv_info(32);
  #line 350 
  if (recv_info == (struct octeon_recv_info *)0) 
                                                 #line 351 
                                                 return (struct octeon_recv_info *)0;
  #line 353 
  recv_pkt = recv_info->recv_pkt;
  #line 354 
  recv_pkt->rh = info->rh;
  #line 355 
  recv_pkt->length = (unsigned int)info->length;
  #line 356 
  recv_pkt->buffer_count = (unsigned short)buf_cnt;
  #line 357 
  recv_pkt->octeon_id = (unsigned short)octeon_dev->octeon_id;
  #line 359 
  i = 0U;
  #line 360 
  bytes_left = (unsigned int)info->length;
  #line 362 
  while (buf_cnt != 0U) {
    #line 364 
    pg_info = & (droq->recv_buf_list + (unsigned long)idx)->pg_info;
    #line 366 
    lio_unmap_ring(octeon_dev->pci_dev,pg_info->dma);
    #line 368 
    pg_info->page = (struct page *)0;
    #line 369 
    pg_info->dma = 0ULL;
    #line 372 
    if (bytes_left < droq->buffer_size) 
                                        #line 372 
                                        recv_pkt->buffer_size[i] = bytes_left; else 
                                                                    #line 372 
                                                                    recv_pkt->buffer_size[i] = droq->buffer_size;
    #line 376 
    recv_pkt->buffer_ptr[i] = (droq->recv_buf_list + (unsigned long)idx)->buffer;
    #line 377 
    (droq->recv_buf_list + (unsigned long)idx)->buffer = (void *)0;
    #line 379 
    idx = incr_index(idx,1U,droq->max_count);
    #line 380 
    bytes_left -= droq->buffer_size;
    #line 381 
    i ++;
    #line 382 
    buf_cnt --;
  }
  #line 385 
  return recv_info;
}

#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
__inline static u32 octeon_droq_refill_pullup_descs(struct octeon_droq *droq, struct octeon_droq_desc *desc_ring)
{
  #line 395 
  u32 desc_refilled = 0U;
  #line 397 
  u32 refill_index = droq->refill_idx;
  #line 399 
  while (droq->read_idx != refill_index) {
    #line 400 
    if ((droq->recv_buf_list + (unsigned long)refill_index)->buffer != (void *)0) {
      #line 401 
      (droq->recv_buf_list + (unsigned long)droq->refill_idx)->buffer = (droq->recv_buf_list + (unsigned long)refill_index)->buffer;
      #line 403 
      (droq->recv_buf_list + (unsigned long)droq->refill_idx)->data = (droq->recv_buf_list + (unsigned long)refill_index)->data;
      #line 405 
      (desc_ring + (unsigned long)droq->refill_idx)->buffer_ptr = (desc_ring + (unsigned long)refill_index)->buffer_ptr;
      #line 407 
      (droq->recv_buf_list + (unsigned long)refill_index)->buffer = (void *)0;
      #line 408 
      (desc_ring + (unsigned long)refill_index)->buffer_ptr = 0ULL;
      #line 409 
      while (1) {
        #line 410 
        droq->refill_idx = incr_index(droq->refill_idx,1U,droq->max_count);
        #line 413 
        desc_refilled ++;
        #line 414 
        (droq->refill_count) --;
        #line 415 
        if (! ((droq->recv_buf_list + (unsigned long)droq->refill_idx)->buffer != (void *)0)) 
          #line 409 
          break;
      }
    }
    #line 417 
    refill_index = incr_index(refill_index,1U,droq->max_count);
  }
  #line 419 
  return desc_refilled;
}

#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
static u32 octeon_droq_refill(struct octeon_device *octeon_dev, struct octeon_droq *droq)
{
  #line 436 
  struct octeon_droq_desc *desc_ring;
  #line 438 
  u8 *data;
  #line 440 
  struct octeon_skb_page_info *pg_info;
  #line 437 
  void *buf = (void *)0;
  #line 439 
  u32 desc_refilled = 0U;
  #line 442 
  desc_ring = droq->desc_ring;
  #line 444 
  while (droq->refill_count != 0U && droq->max_count > desc_refilled) {
    #line 448 
    if ((droq->recv_buf_list + (unsigned long)droq->refill_idx)->buffer == (void *)0) {
      #line 449 
      pg_info = & (droq->recv_buf_list + (unsigned long)droq->refill_idx)->pg_info;
      #line 454 
      if (pg_info->page != (struct page *)0) 
                                             #line 455 
                                             buf = recv_buffer_reuse(octeon_dev,(void *)pg_info); else 
                                                                    #line 457 
                                                                    buf = recv_buffer_alloc(octeon_dev,pg_info);
      #line 461 
      if (buf == (void *)0) {
        #line 462 
        (droq->stats.rx_alloc_failure) ++;
        #line 463 
        break;
      }
      #line 465 
      (droq->recv_buf_list + (unsigned long)droq->refill_idx)->buffer = buf;
      #line 467 
      data = (u8 *)get_rbd((struct sk_buff *)buf);
    }
    else 
         #line 469 
         data = (u8 *)get_rbd((struct sk_buff *)(droq->recv_buf_list + (unsigned long)droq->refill_idx)->buffer);
    #line 473 
    (droq->recv_buf_list + (unsigned long)droq->refill_idx)->data = data;
    #line 475 
    (desc_ring + (unsigned long)droq->refill_idx)->buffer_ptr = lio_map_ring((droq->recv_buf_list + (unsigned long)droq->refill_idx)->buffer);
    #line 479 
    droq->refill_idx = incr_index(droq->refill_idx,1U,droq->max_count);
    #line 481 
    desc_refilled ++;
    #line 482 
    (droq->refill_count) --;
  }
  #line 485 
  if (droq->refill_count != 0U) {
    #line 487 
    desc_refilled = octeon_droq_refill_pullup_descs(droq,desc_ring) + desc_refilled;
  }
  #line 494 
  return desc_refilled;
}

#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
int octeon_retry_droq_refill(struct octeon_droq *droq)
{
  #line 504 
  int desc_refilled;
  #line 505 
  u32 pkts_credit;
  #line 503 
  struct octeon_device *oct = droq->oct_dev;
  #line 504 
  int reschedule = 1;
  #line 507 
  pkts_credit = readl(droq->pkts_credit_reg);
  #line 508 
  desc_refilled = (int)octeon_droq_refill(oct,droq);
  #line 509 
  if (desc_refilled != 0) {
    #line 511 
    ldv_inline_asm();
    #line 515 
    writel((unsigned int)desc_refilled,droq->pkts_credit_reg);
    #line 517 
    if (pkts_credit + (unsigned int)desc_refilled > 63U) 
                                                         #line 518 
                                                         reschedule = 0;
  }
  #line 521 
  return reschedule;
}

#line 525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
__inline static u32 octeon_droq_get_bufcount(u32 buf_size, u32 total_len)
{
  #line 527 
  return ((total_len + buf_size) + 4294967295U) / buf_size;
}

#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
static int octeon_droq_dispatch_pkt(struct octeon_device *oct, struct octeon_droq *droq, union octeon_rh *rh, struct octeon_droq_info *info)
{
  #line 536 
  u32 cnt;
  #line 537 
  int (*disp_fn)(struct octeon_recv_info *, void *);
  #line 538 
  struct octeon_recv_info *rinfo;
  #line 540 
  cnt = octeon_droq_get_bufcount(droq->buffer_size,(unsigned int)info->length);
  #line 542 
  disp_fn = octeon_get_dispatch(oct,(unsigned short)((int)rh->r.opcode),(unsigned short)((int)rh->r.subcode));
  #line 544 
  if (disp_fn != (int (*)(struct octeon_recv_info *, void *))0) {
    #line 545 
    rinfo = octeon_create_recv_info(oct,droq,cnt,droq->read_idx);
    #line 546 
    if (rinfo != (struct octeon_recv_info *)0) {
      #line 547 
      struct __dispatch *rdisp = (struct __dispatch *)rinfo->rsvd;
      #line 549 
      rdisp->rinfo = rinfo;
      #line 550 
      rdisp->disp_fn = disp_fn;
      #line 551 
      (rinfo->recv_pkt)->rh = *rh;
      #line 552 
      list_add_tail_2(& rdisp->list,& droq->dispatch_list);
    }
    else 
         #line 555 
         (droq->stats.dropped_nomem) ++;
  }
  else {
    #line 558 
    _dev_err(& (oct->pci_dev)->dev,(char *)"DROQ: No dispatch function (opcode %u/%u)\n",(unsigned int)rh->r.opcode,(unsigned int)rh->r.subcode);
    #line 561 
    (droq->stats.dropped_nodispatch) ++;
  }
  #line 564 
  return (int)cnt;
}

#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
__inline static void octeon_droq_drop_packets(struct octeon_device *oct, struct octeon_droq *droq, u32 cnt)
{
  #line 571 
  u32 buf_cnt;
  #line 572 
  struct octeon_droq_info *info;
  #line 571 
  u32 i = 0U;
  #line 574 
  i = 0U;
  #line 574 
  while (i < cnt) {
    #line 575 
    info = (struct octeon_droq_info *)(droq->recv_buf_list + (unsigned long)droq->read_idx)->data;
    #line 577 
    octeon_swap_8B_data((u64 *)info,2U);
    #line 579 
    if (info->length != 0ULL) {
      #line 580 
      info->length += 8ULL;
      #line 581 
      droq->stats.bytes_received += info->length;
      #line 582 
      buf_cnt = octeon_droq_get_bufcount(droq->buffer_size,(unsigned int)info->length);
    }
    else {
      #line 585 
      _dev_err(& (oct->pci_dev)->dev,(char *)"DROQ: In drop: pkt with len 0\n");
      #line 586 
      buf_cnt = 1U;
    }
    #line 589 
    droq->read_idx = incr_index(droq->read_idx,buf_cnt,droq->max_count);
    #line 591 
    droq->refill_count += buf_cnt;
    #line 574 
    i ++;
  }
  #line 593 
  return;
}

#line 596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
static u32 octeon_droq_fast_process_packets(struct octeon_device *oct, struct octeon_droq *droq, u32 pkts_to_process)
{
  #line 600 
  u32 pkt;
  #line 600 
  u32 pkt_count;
  #line 600 
  u32 retval;
  #line 601 
  struct octeon_droq_info *info;
  #line 602 
  union octeon_rh *rh;
  #line 600 
  u32 total_len = 0U;
  #line 604 
  pkt_count = pkts_to_process;
  #line 606 
  pkt = 0U;
  #line 606 
  while (pkt < pkt_count) {
    {
      #line 609 
      struct octeon_skb_page_info *pg_info;
      #line 610 
      void *buf;
      #line 607 
      u32 pkt_len = 0U;
      #line 608 
      struct sk_buff *nicbuf = (struct sk_buff *)0;
      #line 612 
      info = (struct octeon_droq_info *)(droq->recv_buf_list + (unsigned long)droq->read_idx)->data;
      #line 614 
      octeon_swap_8B_data((u64 *)info,2U);
      #line 616 
      if (info->length == 0ULL) {
        #line 617 
        _dev_err(& (oct->pci_dev)->dev,(char *)"DROQ[%d] idx: %d len:0, pkt_cnt: %d\n",droq->q_no,droq->read_idx,pkt_count);
        {
          #line 620 
          bool branch;
          #line 620 
          struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_droq_fast_process_packets", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c", .format = (char *)"", .lineno = (unsigned int)620U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 620 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
          #line 620 
          if ((long)((long)((int)branch != 0)) != 0L) 
                                                      #line 620 
                                                      print_hex_dump((char *)"\001",(char *)"",1,16,1,(void *)info,16UL,(_Bool)1);
        }
        #line 623 
        break;
      }
      #line 627 
      rh = & info->rh;
      #line 629 
      info->length += 8ULL;
      #line 630 
      rh->r_dh.len = (unsigned long long)((unsigned int)((unsigned char)rh->r_dh.len) + 2U);
      #line 631 
      total_len = (unsigned int)info->length + total_len;
      #line 632 
      if (opcode_slow_path(rh) != 0) {
        #line 633 
        u32 buf_cnt;
        #line 635 
        buf_cnt = (unsigned int)octeon_droq_dispatch_pkt(oct,droq,rh,info);
        #line 636 
        droq->read_idx = incr_index(droq->read_idx,buf_cnt,droq->max_count);
        #line 638 
        droq->refill_count += buf_cnt;
      }
      else {
        #line 640 
        if (info->length <= (unsigned long long)droq->buffer_size) {
          #line 641 
          pkt_len = (unsigned int)info->length;
          #line 642 
          nicbuf = (struct sk_buff *)(droq->recv_buf_list + (unsigned long)droq->read_idx)->buffer;
          #line 644 
          pg_info = & (droq->recv_buf_list + (unsigned long)droq->read_idx)->pg_info;
          #line 646 
          if (recv_buffer_recycle(oct,(void *)pg_info) != 0) 
                                                             #line 647 
                                                             pg_info->page = (struct page *)0;
          #line 648 
          (droq->recv_buf_list + (unsigned long)droq->read_idx)->buffer = (void *)0;
          #line 651 
          droq->read_idx = incr_index(droq->read_idx,1U,droq->max_count);
          #line 653 
          (droq->refill_count) ++;
        }
        else {
          #line 655 
          nicbuf = (struct sk_buff *)octeon_fast_packet_alloc((unsigned int)info->length);
          #line 657 
          pkt_len = 0U;
          #line 661 
          while ((unsigned long long)pkt_len < info->length) {
            #line 662 
            int cpy_len;
            #line 662 
            int idx = (int)droq->read_idx;
            #line 664 
            if ((unsigned long long)(droq->buffer_size + pkt_len) > info->length) 
              #line 664 
              cpy_len = (int)((unsigned int)info->length - pkt_len); else 
                                                                    #line 664 
                                                                    cpy_len = (int)droq->buffer_size;
            #line 669 
            if (nicbuf != (struct sk_buff *)0) {
              #line 670 
              octeon_fast_packet_next(droq,nicbuf,cpy_len,idx);
              #line 674 
              buf = (droq->recv_buf_list + (unsigned long)idx)->buffer;
              #line 676 
              tx_buffer_free(buf);
              #line 678 
              (droq->recv_buf_list + (unsigned long)idx)->buffer = (void *)0;
            }
            else 
                 #line 680 
                 (droq->stats.rx_alloc_failure) ++;
            #line 683 
            pkt_len += (unsigned int)cpy_len;
            #line 684 
            droq->read_idx = incr_index(droq->read_idx,1U,droq->max_count);
            #line 687 
            (droq->refill_count) ++;
          }
        }
        #line 691 
        if (nicbuf != (struct sk_buff *)0) 
          #line 692 
          if (droq->ops.fptr != (void (*)(u32 , void *, u32 , union octeon_rh *, void *, void *))0) 
            #line 693 
            (*(droq->ops.fptr))(oct->octeon_id,(void *)nicbuf,pkt_len,rh,(void *)(& droq->napi),droq->ops.farg); else 
                                                                    #line 698 
                                                                    recv_buffer_free_1((void *)nicbuf);
      }
      #line 703 
      if (droq->refill_count >= droq->refill_threshold) {
        #line 704 
        int desc_refilled = (int)octeon_droq_refill(oct,droq);
        #line 706 
        if (desc_refilled != 0) {
          #line 708 
          ldv_inline_asm();
          #line 712 
          writel((unsigned int)desc_refilled,droq->pkts_credit_reg);
        }
      }
    }
    #line 606 
    pkt ++;
  }
  #line 718 
  droq->stats.pkts_received += (unsigned long long)pkt;
  #line 719 
  droq->stats.bytes_received += (unsigned long long)total_len;
  #line 721 
  retval = pkt;
  #line 722 
  if (droq->ops.drop_on_max != 0U && pkts_to_process != pkt) {
    #line 723 
    octeon_droq_drop_packets(oct,droq,pkts_to_process - pkt);
    #line 725 
    droq->stats.dropped_toomany += (unsigned long long)(pkts_to_process - pkt);
    #line 726 
    retval = pkts_to_process;
  }
  #line 729 
  atomic_sub((int)retval,& droq->pkts_pending);
  #line 731 
  if (droq->refill_count >= droq->refill_threshold) {
    #line 731 
    if (readl(droq->pkts_credit_reg) <= 63U) {
      #line 733 
      octeon_droq_check_hw_for_pkts(droq);
      #line 736 
      if (atomic_read_3(& droq->pkts_pending) == 0) 
                                                    #line 737 
                                                    octeon_schedule_rxq_oom_work(oct,droq);
    }
  }
  #line 740 
  return retval;
}

#line 744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
int octeon_droq_process_packets(struct octeon_device *oct, struct octeon_droq *droq, u32 budget)
{
  #line 749 
  struct list_head *tmp;
  #line 749 
  struct list_head *tmp2;
  #line 748 
  u32 pkt_count = 0U;
  #line 751 
  octeon_droq_check_hw_for_pkts(droq);
  #line 752 
  pkt_count = (unsigned int)atomic_read_3(& droq->pkts_pending);
  #line 754 
  if (pkt_count == 0U) 
                       #line 755 
                       return 0;
  #line 757 
  if (pkt_count > budget) 
                          #line 758 
                          pkt_count = budget;
  #line 760 
  octeon_droq_fast_process_packets(oct,droq,pkt_count);
  #line 762 
  tmp = droq->dispatch_list.next;
  #line 762 
  tmp2 = tmp->next;
  #line 762 
  while (& droq->dispatch_list != tmp) {
    {
      #line 763 
      struct __dispatch *rdisp = (struct __dispatch *)tmp;
      #line 765 
      list_del_2(tmp);
      #line 766 
      ;
      #line 766 
      (*(rdisp->disp_fn))(rdisp->rinfo,octeon_get_dispatch_arg(oct,
                                (unsigned short)((int)((rdisp->rinfo)->recv_pkt)->rh.r.opcode),
                                (unsigned short)((int)((rdisp->rinfo)->recv_pkt)->rh.r.subcode)));
    }
    #line 762 
    tmp = tmp2;
    #line 762 
    tmp2 = tmp->next;
  }
  #line 774 
  if (atomic_read_3(& droq->pkts_pending) != 0) 
                                                #line 775 
                                                return 1;
  #line 777 
  return 0;
}

#line 786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
int octeon_droq_process_poll_pkts(struct octeon_device *oct, struct octeon_droq *droq, u32 budget)
{
  #line 789 
  struct list_head *tmp;
  #line 789 
  struct list_head *tmp2;
  #line 790 
  u32 pkts_available = 0U;
  #line 790 
  u32 pkts_processed = 0U;
  #line 791 
  u32 total_pkts_processed = 0U;
  #line 793 
  if (droq->max_count < budget) 
                                #line 794 
                                budget = droq->max_count;
  #line 796 
  while (total_pkts_processed < budget) {
    #line 799 
    u32 __UNIQUE_ID___x448;
    #line 799 
    u32 tmp_1;
    #line 797 
    octeon_droq_check_hw_for_pkts(droq);
    {
      #line 799 
      __UNIQUE_ID___x448 = budget - total_pkts_processed;
      #line 799 
      unsigned int __UNIQUE_ID___y449 = (unsigned int)atomic_read_3(& droq->pkts_pending);
      #line 799 
      if (__UNIQUE_ID___x448 < __UNIQUE_ID___y449) 
                                                   #line 799 
                                                   tmp_1 = __UNIQUE_ID___x448; else 
                                                                    #line 799 
                                                                    tmp_1 = __UNIQUE_ID___y449;
      }
    #line 799 
    pkts_available = tmp_1;
    #line 802 
    if (pkts_available == 0U) 
                              #line 803 
                              break;
    #line 805 
    pkts_processed = octeon_droq_fast_process_packets(oct,droq,pkts_available);
    #line 809 
    total_pkts_processed += pkts_processed;
  }
  #line 812 
  tmp = droq->dispatch_list.next;
  #line 812 
  tmp2 = tmp->next;
  #line 812 
  while (& droq->dispatch_list != tmp) {
    {
      #line 813 
      struct __dispatch *rdisp = (struct __dispatch *)tmp;
      #line 815 
      list_del_2(tmp);
      #line 816 
      ;
      #line 816 
      (*(rdisp->disp_fn))(rdisp->rinfo,octeon_get_dispatch_arg(oct,
                                (unsigned short)((int)((rdisp->rinfo)->recv_pkt)->rh.r.opcode),
                                (unsigned short)((int)((rdisp->rinfo)->recv_pkt)->rh.r.subcode)));
    }
    #line 812 
    tmp = tmp2;
    #line 812 
    tmp2 = tmp->next;
  }
  #line 823 
  return (int)total_pkts_processed;
}

#line 828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
int octeon_enable_irq(struct octeon_device *oct, u32 q_no)
{
  #line 830 
  switch ((int)oct->chip_id) {
    #line 831 
    case 146: 
              #line 831 
    ;
    #line 832 
    case 145: 
              #line 832 
    ;
    {
      #line 835 
      unsigned long flags;
      #line 836 
      u32 value;
      #line 833 
      struct octeon_cn6xxx *cn6xxx = (struct octeon_cn6xxx *)oct->chip;
      #line 838 
      cif___ldv_spin_lock_lock_for_droq_int_enb_reg_of_octeon_cn6xxx(& cn6xxx->lock_for_droq_int_enb_reg);
      #line 840 
      value = readl((void *)(oct->mmio[0].hw_addr + 4448U));
      #line 841 
      value = (unsigned int)(1 << q_no) | value;
      #line 842 
      writel(value,(void *)(oct->mmio[0].hw_addr + 4448U));
      #line 843 
      value = readl((void *)(oct->mmio[0].hw_addr + 4432U));
      #line 844 
      value = (unsigned int)(1 << q_no) | value;
      #line 845 
      writel(value,(void *)(oct->mmio[0].hw_addr + 4432U));
      #line 849 
      cif_spin_unlock_irqrestore_lock_for_droq_int_enb_reg_of_octeon_cn6xxx(& cn6xxx->lock_for_droq_int_enb_reg,flags);
    }
    #line 852 
    break;
    #line 853 
    case 38658: 
                #line 853 
    ;
    #line 854 
    lio_enable_irq(oct->droq[q_no],oct->instr_queue[q_no]);
    #line 855 
    break;
    #line 857 
    case 38674: 
                #line 857 
    ;
    #line 858 
    lio_enable_irq(oct->droq[q_no],oct->instr_queue[q_no]);
    #line 859 
    break;
    #line 860 
    default: 
             #line 860 
    ;
    #line 861 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s Unknown Chip\n",(char *)"octeon_enable_irq");
    #line 862 
    return 1;
  }
  #line 865 
  return 0;
}

#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
int octeon_register_droq_ops(struct octeon_device *oct, u32 q_no, struct octeon_droq_ops *ops)
{
  #line 872 
  struct octeon_droq *droq;
  #line 871 
  struct octeon_config *oct_cfg = (struct octeon_config *)0;
  #line 874 
  oct_cfg = octeon_get_conf(oct);
  #line 876 
  if (oct_cfg == (struct octeon_config *)0) 
                                            #line 877 
                                            return -22;
  #line 879 
  if (ops == (struct octeon_droq_ops *)0) {
    #line 880 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: droq_ops pointer is NULL\n",(char *)"octeon_register_droq_ops");
    #line 882 
    return -22;
  }
  #line 885 
  if ((unsigned int)oct_cfg->oq.max_oqs <= q_no) {
    #line 886 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: droq id (%d) exceeds MAX (%d)\n",(char *)"octeon_register_droq_ops",q_no,oct->num_oqs + 4294967295U);
    #line 888 
    return -22;
  }
  #line 891 
  droq = oct->droq[q_no];
  #line 892 
  memcpy((void *)(& droq->ops),(void *)ops,32UL);
  #line 894 
  return 0;
}

#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
int octeon_unregister_droq_ops(struct octeon_device *oct, u32 q_no)
{
  #line 900 
  struct octeon_droq *droq;
  #line 899 
  struct octeon_config *oct_cfg = (struct octeon_config *)0;
  #line 902 
  oct_cfg = octeon_get_conf(oct);
  #line 904 
  if (oct_cfg == (struct octeon_config *)0) 
                                            #line 905 
                                            return -22;
  #line 907 
  if ((unsigned int)oct_cfg->oq.max_oqs <= q_no) {
    #line 908 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: droq id (%d) exceeds MAX (%d)\n",(char *)"octeon_unregister_droq_ops",q_no,oct->num_oqs + 4294967295U);
    #line 910 
    return -22;
  }
  #line 913 
  droq = oct->droq[q_no];
  #line 915 
  if (droq == (struct octeon_droq *)0) {
    #line 916 
    _dev_info(& (oct->pci_dev)->dev,(char *)"Droq id (%d) not available.\n",q_no);
    #line 918 
    return 0;
  }
  #line 921 
  droq->ops.fptr = (void (*)(u32 , void *, u32 , union octeon_rh *, void *, void *))0;
  #line 922 
  droq->ops.farg = (void *)0;
  #line 923 
  droq->ops.drop_on_max = 0U;
  #line 925 
  return 0;
}

#line 928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c"
int octeon_create_droq(struct octeon_device *oct, u32 q_no, u32 num_descs, u32 desc_size, void *app_ctx)
{
  #line 932 
  struct octeon_droq *droq;
  #line 933 
  int numa_node = dev_to_node(& (oct->pci_dev)->dev);
  #line 935 
  if (oct->droq[q_no] != (struct octeon_droq *)0) {
    {
      #line 936 
      bool branch;
      #line 936 
      struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_create_droq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c", .format = (char *)"Droq already in use. Cannot create droq %d again\n", .lineno = (unsigned int)936U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 936 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
      #line 936 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 936 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug450,& (oct->pci_dev)->dev,(char *)"Droq already in use. Cannot create droq %d again\n",q_no);
    }
    #line 938 
    return 1;
  }
  #line 942 
  droq = (struct octeon_droq *)cif_vmalloc_node(672UL,numa_node);
  #line 943 
  if (droq == (struct octeon_droq *)0) 
                                       #line 944 
                                       droq = (struct octeon_droq *)cif_vmalloc_0(672UL);
  #line 945 
  if (droq == (struct octeon_droq *)0) 
                                       #line 946 
                                       return -1;
  #line 948 
  memset((void *)droq,0,672UL);
  #line 951 
  octeon_set_droq_pkt_op(oct,q_no,0U);
  #line 952 
  oct->droq[q_no] = droq;
  #line 955 
  if (octeon_init_droq(oct,q_no,num_descs,desc_size,app_ctx) != 0) {
    #line 956 
    cif_vfree_0((void *)oct->droq[q_no]);
    #line 957 
    oct->droq[q_no] = (struct octeon_droq *)0;
    #line 958 
    return -1;
  }
  #line 961 
  (oct->num_oqs) ++;
  {
    #line 963 
    bool branch_0;
    #line 963 
    struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_create_droq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_droq.c", .format = (char *)"%s: Total number of OQ: %d\n", .lineno = (unsigned int)963U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 963 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
    #line 963 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 963 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug451,& (oct->pci_dev)->dev,(char *)"%s: Total number of OQ: %d\n",(char *)"octeon_create_droq",oct->num_oqs);
  }
  #line 971 
  return 0;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void INIT_LIST_HEAD_3(struct list_head *list)
{
  #line 137 
  ldv_init_list_head(list);
  #line 138 
  return;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void atomic_add(int i, atomic_t *v)
{
  #line 165 
  ldv_atomic_add(i,v);
  #line 166 
  return;
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void atomic_sub(int i, atomic_t *v)
{
  #line 179 
  ldv_atomic_sub(i,v);
  #line 180 
  return;
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void atomic_inc_1(atomic_t *v)
{
  #line 186 
  ldv_atomic_inc(v);
  #line 187 
  return;
}

#line 458  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 461 
  return ldv_kmalloc(size,flags);
}

#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void cif_spin_lock_bh_lock_of_octeon_dispatch_list(spinlock_t *lock)
{
  #line 669 
  ldv_spin_model_lock((char *)"lock_of_octeon_dispatch_list");
  #line 671 
  spin_lock_bh_1(lock);
  #line 672 
  return;
}

#line 675  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void cif_spin_unlock_bh_lock_of_octeon_dispatch_list(spinlock_t *lock)
{
  #line 678 
  ldv_spin_model_unlock((char *)"lock_of_octeon_dispatch_list");
  #line 680 
  spin_unlock_bh_1(lock);
  #line 681 
  return;
}

#line 684  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void cif_vfree_0(void *addr)
{
  #line 687 
  ldv_vfree(addr);
  #line 688 
  return;
}

#line 691  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void *cif_vzalloc_node(unsigned long size, int node)
{
  #line 694 
  return ldv_vzalloc(size);
}

#line 698  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void *cif_vzalloc(unsigned long size)
{
  #line 701 
  return ldv_vzalloc(size);
}

#line 705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void cif___ldv_spin_lock_lock_for_droq_int_enb_reg_of_octeon_cn6xxx(spinlock_t *lock)
{
  #line 708 
  ldv_spin_model_lock((char *)"lock_for_droq_int_enb_reg_of_octeon_cn6xxx");
  #line 710 
  __ldv_spin_lock(lock);
  #line 711 
  return;
}

#line 714  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void cif_spin_unlock_irqrestore_lock_for_droq_int_enb_reg_of_octeon_cn6xxx(spinlock_t *lock, unsigned long flags)
{
  #line 717 
  ldv_spin_model_unlock((char *)"lock_for_droq_int_enb_reg_of_octeon_cn6xxx");
  #line 719 
  spin_unlock_irqrestore_0(lock,flags);
  #line 720 
  return;
}

#line 723  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void *cif_vmalloc_node(unsigned long size, int node)
{
  #line 726 
  return ldv_vmalloc(size);
}

#line 730  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_droq.i.aux"
static void *cif_vmalloc_0(unsigned long size)
{
  #line 733 
  return ldv_vmalloc(size);
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_2(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_nic.i.aux"
static void cif_spin_lock_bh_cmd_resp_wqlock_of_octeon_device_0(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_2(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 675  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_nic.i.aux"
static void cif_spin_unlock_bh_cmd_resp_wqlock_of_octeon_device_0(spinlock_t *lock);
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
__inline static int wait_for_sc_completion_timeout_1(struct octeon_device *oct_dev, struct octeon_soft_command *sc, unsigned long timeout)
{
  #line 189 
  long timeout_jiff;
  #line 188 
  int errno = 0;
  #line 191 
  if (timeout != 0UL) {
    #line 192 
    timeout_jiff = (long)msecs_to_jiffies((unsigned int)timeout);
  }
  else 
       #line 194 
       timeout_jiff = 9223372036854775807L;
  #line 196 
  timeout_jiff = wait_for_completion_interruptible_timeout(& sc->complete,(unsigned long)timeout_jiff);
  #line 199 
  if (timeout_jiff == 0L) {
    #line 200 
    _dev_err(& (oct_dev->pci_dev)->dev,(char *)"%s: sc is timeout\n",(char *)"wait_for_sc_completion_timeout");
    {
      #line 203 
      union __anonunion___u_5394 __u = {.__val = 1};
      #line 202 
      __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
      #line 202 
      int tmp_2 = __u.__val;
    }
    #line 203 
    errno = -62;
  }
  else 
    #line 204 
    if (timeout_jiff == -512L) {
      #line 205 
      _dev_err(& (oct_dev->pci_dev)->dev,(char *)"%s: sc is interrupted\n",(char *)"wait_for_sc_completion_timeout");
      {
        #line 208 
        union __anonunion___u_5396 __u_0 = {.__val = 1};
        #line 207 
        __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_0.__c),4);
        #line 207 
        int tmp_4 = __u_0.__val;
      }
      #line 208 
      errno = -4;
    }
    else 
      #line 209 
      if (sc->sc_status == 3U) {
        #line 210 
        _dev_err(& (oct_dev->pci_dev)->dev,(char *)"%s: sc has fatal timeout\n",(char *)"wait_for_sc_completion_timeout");
        {
          #line 213 
          union __anonunion___u_5398 __u_1 = {.__val = 1};
          #line 212 
          __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_1.__c),4);
          #line 212 
          int tmp_6 = __u_1.__val;
        }
        #line 213 
        errno = -16;
      }
  #line 216 
  return errno;
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.c"
void *octeon_alloc_soft_command_resp(struct octeon_device *oct, union octeon_instr_64B *cmd, u32 rdatasize)
{
  #line 34 
  struct octeon_soft_command *sc;
  #line 35 
  struct octeon_instr_ih3 *ih3;
  #line 36 
  struct octeon_instr_ih2 *ih2;
  #line 37 
  struct octeon_instr_irh *irh;
  #line 38 
  struct octeon_instr_rdp *rdp;
  #line 40 
  sc = octeon_alloc_soft_command(oct,0U,rdatasize,0U);
  #line 43 
  if (sc == (struct octeon_soft_command *)0) 
                                             #line 44 
                                             return (void *)0;
  #line 47 
  memcpy((void *)(& sc->cmd),(void *)cmd,64UL);
  #line 52 
  if ((unsigned int)oct->chip_id == 38658U || (unsigned int)oct->chip_id == 38674U) {
    #line 53 
    ih3 = (struct octeon_instr_ih3 *)(& sc->cmd.cmd3.ih3);
    #line 54 
    rdp = (struct octeon_instr_rdp *)(& sc->cmd.cmd3.rdp);
    #line 55 
    irh = (struct octeon_instr_irh *)(& sc->cmd.cmd3.irh);
    #line 57 
    ih3->fsz = (unsigned long long)48U;
  }
  else {
    #line 59 
    ih2 = (struct octeon_instr_ih2 *)(& sc->cmd.cmd2.ih2);
    #line 60 
    rdp = (struct octeon_instr_rdp *)(& sc->cmd.cmd2.rdp);
    #line 61 
    irh = (struct octeon_instr_irh *)(& sc->cmd.cmd2.irh);
    #line 63 
    ih2->fsz = (unsigned long long)40U;
  }
  #line 66 
  irh->rflag = (unsigned long long)1U;
  #line 68 
  rdp->pcie_port = (unsigned long long)oct->pcie_port;
  #line 69 
  rdp->rlen = (unsigned long long)rdatasize;
  #line 71 
  *(sc->status_word) = 18446744073709551615ULL;
  #line 73 
  if ((unsigned int)oct->chip_id == 38658U || (unsigned int)oct->chip_id == 38674U) 
    #line 74 
    sc->cmd.cmd3.rptr = sc->dmarptr; else 
                                          #line 76 
                                          sc->cmd.cmd2.rptr = sc->dmarptr;
  #line 78 
  sc->expiry_time = msecs_to_jiffies(60000U) + jiffies;
  #line 80 
  return (void *)sc;
}

#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.c"
int octnet_send_nic_data_pkt(struct octeon_device *oct, struct octnic_data_pkt *ndata, int xmit_more)
{
  #line 87 
  int ring_doorbell_0 = xmit_more == 0;
  #line 89 
  return octeon_send_command(oct,ndata->q_no,(unsigned int)ring_doorbell_0,
                          (void *)(& ndata->cmd),ndata->buf,ndata->datasize,
                          ndata->reqtype);
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.c"
__inline static struct octeon_soft_command *octnic_alloc_ctrl_pkt_sc(struct octeon_device *oct, struct octnic_ctrl_pkt *nctrl)
{
  #line 99 
  u8 *data;
  #line 100 
  u32 rdatasize;
  #line 98 
  struct octeon_soft_command *sc = (struct octeon_soft_command *)0;
  #line 101 
  u32 uddsize = 0U;
  #line 101 
  u32 datasize = 0U;
  #line 103 
  uddsize = (unsigned int)((int)nctrl->ncmd.s.more * 8);
  #line 105 
  datasize = uddsize + 8U;
  #line 106 
  rdatasize = 16U;
  #line 108 
  sc = octeon_alloc_soft_command(oct,datasize,rdatasize,0U);
  #line 111 
  if (sc == (struct octeon_soft_command *)0) 
                                             #line 112 
                                             return (struct octeon_soft_command *)0;
  #line 114 
  data = (u8 *)sc->virtdptr;
  #line 116 
  memcpy((void *)data,(void *)(& nctrl->ncmd),8UL);
  #line 118 
  octeon_swap_8B_data((u64 *)data,1U);
  #line 120 
  if (uddsize != 0U) 
                     #line 122 
                     memcpy((void *)(data + 8UL),(void *)(& nctrl->udd),(unsigned long)uddsize);
  #line 125 
  sc->iq_no = (unsigned int)nctrl->iq_no;
  #line 127 
  octeon_prepare_soft_command(oct,sc,(unsigned char)1,(unsigned char)3,0U,0ULL,0ULL);
  #line 130 
  __init_completion(& sc->complete);
  #line 131 
  sc->sc_status = 1U;
  #line 133 
  return sc;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_nic.c"
int octnet_send_nic_ctrl_pkt(struct octeon_device *oct, struct octnic_ctrl_pkt *nctrl)
{
  #line 140 
  int retval;
  #line 141 
  struct octeon_soft_command *sc = (struct octeon_soft_command *)0;
  #line 143 
  cif_spin_lock_bh_cmd_resp_wqlock_of_octeon_device_0(& oct->cmd_resp_wqlock);
  #line 147 
  if (oct->cmd_resp_state == 2U && (unsigned int)nctrl->ncmd.s.cmd != 4U) {
    #line 149 
    cif_spin_unlock_bh_cmd_resp_wqlock_of_octeon_device_0(& oct->cmd_resp_wqlock);
    #line 150 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s cmd:%d not processed since driver offline\n",(char *)"octnet_send_nic_ctrl_pkt",(int)nctrl->ncmd.s.cmd);
    #line 153 
    return -1;
  }
  #line 156 
  sc = octnic_alloc_ctrl_pkt_sc(oct,nctrl);
  #line 157 
  if (sc == (struct octeon_soft_command *)0) {
    #line 158 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s soft command alloc failed\n",(char *)"octnet_send_nic_ctrl_pkt");
    #line 160 
    cif_spin_unlock_bh_cmd_resp_wqlock_of_octeon_device_0(& oct->cmd_resp_wqlock);
    #line 161 
    return -1;
  }
  #line 164 
  retval = octeon_send_soft_command(oct,sc);
  #line 165 
  if (retval == -1) {
    #line 166 
    octeon_free_soft_command(oct,sc);
    #line 167 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s pf_num:%d soft command:%d send failed status: %x\n",(char *)"octnet_send_nic_ctrl_pkt",(int)oct->pf_num,(int)nctrl->ncmd.s.cmd,retval);
    #line 169 
    cif_spin_unlock_bh_cmd_resp_wqlock_of_octeon_device_0(& oct->cmd_resp_wqlock);
    #line 170 
    return -1;
  }
  #line 173 
  cif_spin_unlock_bh_cmd_resp_wqlock_of_octeon_device_0(& oct->cmd_resp_wqlock);
  #line 175 
  if ((unsigned int)nctrl->ncmd.s.cmdgroup == 0U) 
    #line 176 
    switch ((int)nctrl->ncmd.s.cmd) {
      #line 178 
      case 3: 
              #line 178 
      ;
      #line 179 
      case 5: 
              #line 179 
      ;
      #line 180 
      case 27: 
               #line 180 
      ;
      {
        #line 182 
        union __anonunion___u_5400 __u = {.__val = 1};
        #line 181 
        __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
        #line 181 
        int tmp = __u.__val;
      }
      #line 182 
      return retval;
    }
  #line 186 
  retval = wait_for_sc_completion_timeout_1(oct,sc,0UL);
  #line 187 
  if (retval != 0) 
                   #line 188 
                   return retval;
  #line 190 
  nctrl->sc_status = sc->sc_status;
  #line 191 
  retval = (int)nctrl->sc_status;
  #line 192 
  if (nctrl->cb_fn != (void (*)(void *))0) 
                                           #line 193 
                                           (*(nctrl->cb_fn))((void *)nctrl);
  {
    #line 196 
    union __anonunion___u_5402 __u_0 = {.__val = 1};
    #line 195 
    __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_0.__c),4);
    #line 195 
    int tmp_3 = __u_0.__val;
  }
  #line 197 
  return retval;
}

#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_nic.i.aux"
static void cif_spin_lock_bh_cmd_resp_wqlock_of_octeon_device_0(spinlock_t *lock)
{
  #line 669 
  ldv_spin_model_lock((char *)"cmd_resp_wqlock_of_octeon_device");
  #line 671 
  spin_lock_bh_2(lock);
  #line 672 
  return;
}

#line 675  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_nic.i.aux"
static void cif_spin_unlock_bh_cmd_resp_wqlock_of_octeon_device_0(spinlock_t *lock)
{
  #line 678 
  ldv_spin_model_unlock((char *)"cmd_resp_wqlock_of_octeon_device");
  #line 680 
  spin_unlock_bh_2(lock);
  #line 681 
  return;
}

#line 737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
#line 737 
u64 lio_pci_readq(struct octeon_device *oct, u64 addr);
#line 749 
#line 749 
void lio_pci_writeq(struct octeon_device *oct, u64 val, u64 addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.h"
#line 68 
int lio_cn6xxx_soft_reset(struct octeon_device *oct);
#line 69 
#line 69 
void lio_cn6xxx_enable_error_reporting(struct octeon_device *oct);
#line 70 
#line 70 
void lio_cn6xxx_setup_pcie_mps(struct octeon_device *oct, enum octeon_pcie_mps mps);
#line 72 
#line 72 
void lio_cn6xxx_setup_pcie_mrrs(struct octeon_device *oct, enum octeon_pcie_mrrs mrrs);
#line 74 
#line 74 
void lio_cn6xxx_setup_global_input_regs(struct octeon_device *oct);
#line 75 
#line 75 
void lio_cn6xxx_setup_global_output_regs(struct octeon_device *oct);
#line 76 
#line 76 
void lio_cn6xxx_setup_iq_regs(struct octeon_device *oct, u32 iq_no);
#line 77 
#line 77 
void lio_cn6xxx_setup_oq_regs(struct octeon_device *oct, u32 oq_no);
#line 78 
#line 78 
int lio_cn6xxx_enable_io_queues(struct octeon_device *oct);
#line 79 
#line 79 
void lio_cn6xxx_disable_io_queues(struct octeon_device *oct);
#line 80 
#line 80 
irqreturn_t lio_cn6xxx_process_interrupt_regs(void *dev);
#line 81 
#line 81 
void lio_cn6xxx_bar1_idx_setup(struct octeon_device *oct, u64 core_addr, u32 idx, int valid);
#line 83 
#line 83 
void lio_cn6xxx_bar1_idx_write(struct octeon_device *oct, u32 idx, u32 mask);
#line 84 
#line 84 
u32 lio_cn6xxx_bar1_idx_read(struct octeon_device *oct, u32 idx);
#line 86 
#line 86 
u32 lio_cn6xxx_update_read_index(struct octeon_instr_queue *iq);
#line 87 
#line 87 
void lio_cn6xxx_enable_interrupt(struct octeon_device *oct, u8 unused);
#line 88 
#line 88 
void lio_cn6xxx_disable_interrupt(struct octeon_device *oct, u8 unused);
#line 90 
#line 90 
void lio_cn6xxx_setup_reg_address(struct octeon_device *oct, void *chip, struct octeon_reg_list *reg_list);
#line 92 
#line 92 
u32 lio_cn6xxx_coprocessor_clock(struct octeon_device *oct);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn68xx_device.c"
static void lio_cn68xx_set_dpi_regs(struct octeon_device *oct)
{
  #line 32 
  u32 i;
  #line 33 
  u32 fifo_sizes[6U] = {3U, 3U, 1U, 1U, 1U, 8U};
  #line 35 
  lio_pci_writeq(oct,504403158265544704ULL,526666069704776ULL);
  {
    #line 36 
    bool branch;
    #line 36 
    struct _ddebug __UNIQUE_ID_ddebug440 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"lio_cn68xx_set_dpi_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn68xx_device.c", .format = (char *)"DPI_DMA_CONTROL: 0x%016llx\n", .lineno = (unsigned int)36U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 36 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug440.key.dd_key_false.key,(_Bool)0);
    #line 36 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 36 
      ;
      #line 36 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug440,& (oct->pci_dev)->dev,(char *)"DPI_DMA_CONTROL: 0x%016llx\n",lio_pci_readq(oct,526666069704776ULL));
    }
  }
  #line 39 
  i = 0U;
  #line 39 
  while (i <= 5U) {
    #line 44 
    lio_pci_writeq(oct,0ULL,(unsigned long long)(i * 8U) + 526666069704832ULL);
    #line 45 
    lio_pci_writeq(oct,(unsigned long long)fifo_sizes[i],(unsigned long long)(i * 8U) + 526666069706880ULL);
    {
      #line 46 
      bool branch_0;
      #line 46 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"lio_cn68xx_set_dpi_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn68xx_device.c", .format = (char *)"DPI_ENG_BUF%d: 0x%016llx\n", .lineno = (unsigned int)46U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 46 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 46 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 46 
        ;
        #line 46 
        ;
        #line 46 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug441,& (oct->pci_dev)->dev,(char *)"DPI_ENG_BUF%d: 0x%016llx\n",i,lio_pci_readq(oct,(unsigned long long)(i * 8U) + 526666069706880ULL));
      }
    }
    #line 39 
    i ++;
  }
  #line 54 
  lio_pci_writeq(oct,1ULL,526666069704768ULL);
  {
    #line 55 
    bool branch_1;
    #line 55 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"lio_cn68xx_set_dpi_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn68xx_device.c", .format = (char *)"DPI_CTL: 0x%016llx\n", .lineno = (unsigned int)55U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 55 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 55 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 55 
      ;
      #line 55 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug442,& (oct->pci_dev)->dev,(char *)"DPI_CTL: 0x%016llx\n",lio_pci_readq(oct,526666069704768ULL));
    }
  }
  #line 57 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn68xx_device.c"
static int lio_cn68xx_soft_reset(struct octeon_device *oct)
{
  #line 61 
  lio_cn6xxx_soft_reset(oct);
  #line 62 
  lio_cn68xx_set_dpi_regs(oct);
  #line 64 
  return 0;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn68xx_device.c"
static void lio_cn68xx_setup_pkt_ctl_regs(struct octeon_device *oct)
{
  #line 70 
  u64 pktctl;
  #line 70 
  u64 tx_pipe;
  #line 70 
  u64 max_oqs;
  #line 69 
  struct octeon_cn6xxx *cn68xx = (struct octeon_cn6xxx *)oct->chip;
  #line 72 
  pktctl = readq((void *)(oct->mmio[0].hw_addr + 4640U));
  #line 75 
  max_oqs = (unsigned long long)(((struct octeon_cn6xxx *)oct->chip)->conf)->oq.max_oqs;
  #line 76 
  tx_pipe = readq((void *)(oct->mmio[0].hw_addr + 4656U));
  #line 77 
  tx_pipe &= 18446744073692839935ULL;
  #line 78 
  tx_pipe = (max_oqs << 16) | tx_pipe;
  #line 79 
  writeq(tx_pipe,(void *)(oct->mmio[0].hw_addr + 4656U));
  #line 81 
  if ((unsigned int)(cn68xx->conf)->misc.enable_sli_oq_bp != 0U) 
                                                                 #line 82 
                                                                 pktctl |= 15ULL; else 
                                                                    #line 85 
                                                                    pktctl &= 18446744073709551600ULL;
  #line 86 
  writeq(pktctl,(void *)(oct->mmio[0].hw_addr + 4640U));
  #line 87 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn68xx_device.c"
static int lio_cn68xx_setup_device_regs(struct octeon_device *oct)
{
  #line 91 
  lio_cn6xxx_setup_pcie_mps(oct,(enum octeon_pcie_mps)PCIE_MPS_DEFAULT);
  #line 92 
  lio_cn6xxx_setup_pcie_mrrs(oct,(enum octeon_pcie_mrrs)PCIE_MRRS_256B);
  #line 93 
  lio_cn6xxx_enable_error_reporting(oct);
  #line 95 
  lio_cn6xxx_setup_global_input_regs(oct);
  #line 96 
  lio_cn68xx_setup_pkt_ctl_regs(oct);
  #line 97 
  lio_cn6xxx_setup_global_output_regs(oct);
  #line 102 
  writeq(2097152ULL,(void *)(oct->mmio[0].hw_addr + 736U));
  #line 104 
  return 0;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn68xx_device.c"
__inline static void lio_cn68xx_vendor_message_fix(struct octeon_device *oct)
{
  #line 109 
  u32 val = 0U;
  #line 112 
  pci_read_config_dword(oct->pci_dev,1824,& val);
  #line 113 
  val |= 3U;
  #line 114 
  pci_write_config_dword(oct->pci_dev,1824,val);
  #line 115 
  return;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn68xx_device.c"
static int lio_is_210nv(struct octeon_device *oct)
{
  #line 119 
  u64 mio_qlm4_cfg = lio_pci_readq(oct,307863255782832ULL);
  #line 121 
  return (mio_qlm4_cfg & 7ULL) == 0ULL;
}

#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn68xx_device.c"
int lio_setup_cn68xx_octeon_device(struct octeon_device *oct)
{
  #line 126 
  struct octeon_cn6xxx *cn68xx = (struct octeon_cn6xxx *)oct->chip;
  #line 127 
  u16 card_type = (unsigned short)2U;
  #line 129 
  if (octeon_map_pci_barx(oct,0,0) != 0) 
                                         #line 130 
                                         return 1;
  #line 132 
  if (octeon_map_pci_barx(oct,1,67108864) != 0) {
    #line 133 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s CN68XX BAR1 map failed\n",(char *)"lio_setup_cn68xx_octeon_device");
    #line 135 
    octeon_unmap_pci_barx_0(oct,0);
    #line 136 
    return 1;
  }
  #line 139 
  spinlock_check(& cn68xx->lock_for_droq_int_enb_reg);
  {
    #line 139 
    struct lock_class_key __key;
    #line 139 
    __raw_spin_lock_init(& cn68xx->lock_for_droq_int_enb_reg.__anonCompField_spinlock_25.rlock,(char *)"&(&cn68xx->lock_for_droq_int_enb_reg)->rlock",& __key);
  }
  #line 141 
  oct->fn_list.setup_iq_regs = & lio_cn6xxx_setup_iq_regs;
  #line 142 
  oct->fn_list.setup_oq_regs = & lio_cn6xxx_setup_oq_regs;
  #line 144 
  oct->fn_list.process_interrupt_regs = & lio_cn6xxx_process_interrupt_regs;
  #line 145 
  oct->fn_list.soft_reset = & lio_cn68xx_soft_reset;
  #line 146 
  oct->fn_list.setup_device_regs = & lio_cn68xx_setup_device_regs;
  #line 147 
  oct->fn_list.update_iq_read_idx = & lio_cn6xxx_update_read_index;
  #line 149 
  oct->fn_list.bar1_idx_setup = & lio_cn6xxx_bar1_idx_setup;
  #line 150 
  oct->fn_list.bar1_idx_write = & lio_cn6xxx_bar1_idx_write;
  #line 151 
  oct->fn_list.bar1_idx_read = & lio_cn6xxx_bar1_idx_read;
  #line 153 
  oct->fn_list.enable_interrupt = & lio_cn6xxx_enable_interrupt;
  #line 154 
  oct->fn_list.disable_interrupt = & lio_cn6xxx_disable_interrupt;
  #line 156 
  oct->fn_list.enable_io_queues = & lio_cn6xxx_enable_io_queues;
  #line 157 
  oct->fn_list.disable_io_queues = & lio_cn6xxx_disable_io_queues;
  #line 159 
  lio_cn6xxx_setup_reg_address(oct,oct->chip,& oct->reg_list);
  #line 162 
  if (lio_is_210nv(oct) != 0) 
                              #line 163 
                              card_type = (unsigned short)1U;
  #line 165 
  cn68xx->conf = (struct octeon_config *)oct_get_config_info(oct,(unsigned short)((int)card_type));
  #line 167 
  if (cn68xx->conf == (struct octeon_config *)0) {
    #line 168 
    char *tmp_3;
    #line 168 
    if ((unsigned int)card_type == 2U) 
                                       #line 168 
                                       tmp_3 = (char *)"410nv"; else 
                                                                  #line 168 
                                                                  tmp_3 = (char *)"210nv";
    #line 168 
    ;
    #line 168 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s No Config found for CN68XX %s\n",(char *)"lio_setup_cn68xx_octeon_device",tmp_3);
    #line 172 
    octeon_unmap_pci_barx_0(oct,0);
    #line 173 
    octeon_unmap_pci_barx_0(oct,1);
    #line 174 
    return 1;
  }
  #line 177 
  oct->coproc_clock_rate = (unsigned long long)lio_cn6xxx_coprocessor_clock(oct) * 1000000ULL;
  #line 179 
  lio_cn68xx_vendor_message_fix(oct);
  #line 181 
  return 0;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 63 
char *strcpy(char *, char *);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 49 
#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
static int cif_strcmp(char *cs, char *ct);
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 354  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_4(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_6180 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set_3(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_6182 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_4(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_4(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set_3(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set_3(v,i);
  #line 46 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27 
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 26 
int ldv_strcmp(char *cs, char *ct);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 823  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
static void *cif_free_irq_1(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
__inline static void lio_set_priv_flag(struct octeon_device *octdev, u32 flag, u32 val)
{
  #line 918 
  if (val != 0U) 
                 #line 919 
                 octdev->priv_flags |= (unsigned int)(1 << flag); else 
                                                                    #line 921 
                                                                    octdev->priv_flags &= (unsigned int)(~ (1 << flag));
  #line 922 
  return;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_main.h"
__inline static int wait_for_sc_completion_timeout_2(struct octeon_device *oct_dev, struct octeon_soft_command *sc, unsigned long timeout)
{
  #line 189 
  long timeout_jiff;
  #line 188 
  int errno = 0;
  #line 191 
  if (timeout != 0UL) {
    #line 192 
    timeout_jiff = (long)msecs_to_jiffies((unsigned int)timeout);
  }
  else 
       #line 194 
       timeout_jiff = 9223372036854775807L;
  #line 196 
  timeout_jiff = wait_for_completion_interruptible_timeout(& sc->complete,(unsigned long)timeout_jiff);
  #line 199 
  if (timeout_jiff == 0L) {
    #line 200 
    _dev_err(& (oct_dev->pci_dev)->dev,(char *)"%s: sc is timeout\n",(char *)"wait_for_sc_completion_timeout");
    {
      #line 203 
      union __anonunion___u_6822 __u = {.__val = 1};
      #line 202 
      __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
      #line 202 
      int tmp_2 = __u.__val;
    }
    #line 203 
    errno = -62;
  }
  else 
    #line 204 
    if (timeout_jiff == -512L) {
      #line 205 
      _dev_err(& (oct_dev->pci_dev)->dev,(char *)"%s: sc is interrupted\n",(char *)"wait_for_sc_completion_timeout");
      {
        #line 208 
        union __anonunion___u_6824 __u_0 = {.__val = 1};
        #line 207 
        __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_0.__c),4);
        #line 207 
        int tmp_4 = __u_0.__val;
      }
      #line 208 
      errno = -4;
    }
    else 
      #line 209 
      if (sc->sc_status == 3U) {
        #line 210 
        _dev_err(& (oct_dev->pci_dev)->dev,(char *)"%s: sc has fatal timeout\n",(char *)"wait_for_sc_completion_timeout");
        {
          #line 213 
          union __anonunion___u_6826 __u_1 = {.__val = 1};
          #line 212 
          __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_1.__c),4);
          #line 212 
          int tmp_6 = __u_1.__val;
        }
        #line 213 
        errno = -16;
      }
  #line 216 
  return errno;
}

#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
#line 213 
int ptp_clock_index(struct ptp_clock *);
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static int ifstate_check_1(struct lio *lio, int state_flag)
{
  #line 506 
  ;
  #line 506 
  return atomic_read_4(& lio->ifstate) & state_flag;
}

#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void ifstate_set_0(struct lio *lio, int state_flag)
{
  #line 516 
  ;
  #line 516 
  ;
  #line 516 
  atomic_set_3(& lio->ifstate,atomic_read_4(& lio->ifstate) | state_flag);
  #line 517 
  return;
}

#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void ifstate_reset_0(struct lio *lio, int state_flag)
{
  #line 526 
  ;
  #line 526 
  ;
  #line 526 
  atomic_set_3(& lio->ifstate,atomic_read_4(& lio->ifstate) & ~ state_flag);
  #line 527 
  return;
}

#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static int wait_for_pending_requests_0(struct octeon_device *oct)
{
  #line 537 
  int i;
  #line 537 
  int pcount = 0;
  #line 539 
  i = 0;
  #line 539 
  while (i <= 99) {
    #line 540 
    pcount = atomic_read_4(& oct->response_list[3].pending_req_count);
    #line 543 
    if (pcount != 0) 
                     #line 544 
                     schedule_timeout_uninterruptible(25L); else 
                                                                 #line 546 
                                                                 break;
    #line 539 
    i ++;
  }
  #line 549 
  if (pcount != 0) 
                   #line 550 
                   return 1;
  #line 552 
  return 0;
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.h"
#line 93 
u32 lio_cn6xxx_get_oq_ticks(struct octeon_device *oct, u32 time_intr_in_us);
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.h"
#line 60 
u32 cn23xx_pf_get_oq_ticks(struct octeon_device *oct, u32 time_intr_in_us);
#line 64 
#line 64 
int cn23xx_sriov_config(struct octeon_device *oct);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
#line 1082 
static int lio_reset_queues(struct net_device *netdev, uint32_t num_qs);
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static char oct_stats_strings[63U][32U] = {{(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, {(char)'t', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'s', (char)'e', (char)'n', (char)'t'}, {(char)'t', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'f', (char)'w', (char)'d'}, {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'p', (char)'k', (char)'o'}, {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'p', (char)'k', (char)'i'}, {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'l', (char)'i', (char)'n', (char)'k'}, {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p'}, {(char)'t', (char)'x', (char)'_', (char)'t', (char)'s', (char)'o'}, {(char)'t', (char)'x', (char)'_', (char)'t', (char)'s', (char)'o', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, {(char)'t', (char)'x', (char)'_', (char)'t', (char)'s', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'t', (char)'x', (char)'_', (char)'v', (char)'x', (char)'l', (char)'a', (char)'n'}, {(char)'t', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t'}, {(char)'t', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'c', (char)'t', (char)'l', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'o', (char)'n', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'a', (char)'l', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'r', (char)'u', (char)'n', (char)'t', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'r', (char)'c', (char)'v', (char)'d'}, {(char)'r', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'f', (char)'w', (char)'d'}, {(char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t'}, {(char)'r', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t'}, {(char)'r', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'r', (char)'x', (char)'_', (char)'l', (char)'2', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'p', (char)'k', (char)'o'}, {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'l', (char)'i', (char)'n', (char)'k'}, {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p'}, {(char)'r', (char)'x', (char)'_', (char)'v', (char)'x', (char)'l', (char)'a', (char)'n'}, {(char)'r', (char)'x', (char)'_', (char)'v', (char)'x', (char)'l', (char)'a', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'r', (char)'x', (char)'_', (char)'l', (char)'r', (char)'o', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'l', (char)'r', (char)'o', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'l', (char)'r', (char)'o'}, {(char)'r', (char)'x', (char)'_', (char)'l', (char)'r', (char)'o', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'l', (char)'r', (char)'o', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'s', (char)'_', (char)'p', (char)'o', (char)'r', (char)'t'}, {(char)'r', (char)'x', (char)'_', (char)'l', (char)'r', (char)'o', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'s', (char)'_', (char)'s', (char)'e', (char)'q'}, {(char)'r', (char)'x', (char)'_', (char)'l', (char)'r', (char)'o', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'s', (char)'_', (char)'t', (char)'s', (char)'v', (char)'a', (char)'l'}, {(char)'r', (char)'x', (char)'_', (char)'l', (char)'r', (char)'o', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'s', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'r'}, {(char)'r', (char)'x', (char)'_', (char)'f', (char)'w', (char)'d', (char)'_', (char)'r', (char)'a', (char)'t', (char)'e'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'r', (char)'c', (char)'v', (char)'d'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'b', (char)'c', (char)'s', (char)'t'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'_', (char)'m', (char)'c', (char)'s', (char)'t'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'r', (char)'u', (char)'n', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'c', (char)'t', (char)'l', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'d', (char)'m', (char)'a', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'c', (char)'s', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'h', (char)'a', (char)'n', (char)'g', (char)'e', (char)'s'}};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static char oct_vf_stats_strings[13U][32U] = {{(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, {(char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t'}, {(char)'t', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t'}, {(char)'r', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t'}, {(char)'t', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t'}, {(char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'h', (char)'a', (char)'n', (char)'g', (char)'e', (char)'s'}};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static char oct_iq_stats_strings[12U][32U] = {{(char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, {(char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, {(char)'i', (char)'q', (char)'_', (char)'b', (char)'u', (char)'s', (char)'y'}, {(char)'s', (char)'g', (char)'e', (char)'n', (char)'t', (char)'r', (char)'y', (char)'_', (char)'s', (char)'e', (char)'n', (char)'t'}, {(char)'f', (char)'w', (char)'_', (char)'i', (char)'n', (char)'s', (char)'t', (char)'r', (char)'_', (char)'p', (char)'o', (char)'s', (char)'t', (char)'e', (char)'d'}, {(char)'f', (char)'w', (char)'_', (char)'i', (char)'n', (char)'s', (char)'t', (char)'r', (char)'_', (char)'p', (char)'r', (char)'o', (char)'c', (char)'e', (char)'s', (char)'s', (char)'e', (char)'d'}, {(char)'f', (char)'w', (char)'_', (char)'i', (char)'n', (char)'s', (char)'t', (char)'r', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, {(char)'f', (char)'w', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'s', (char)'e', (char)'n', (char)'t'}, {(char)'t', (char)'s', (char)'o'}, {(char)'v', (char)'x', (char)'l', (char)'a', (char)'n'}, {(char)'t', (char)'x', (char)'q', (char)'_', (char)'r', (char)'e', (char)'s', (char)'t', (char)'a', (char)'r', (char)'t'}};
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static char oct_droq_stats_strings[11U][32U] = {{(char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}, {(char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, {(char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'n', (char)'o', (char)'m', (char)'e', (char)'m'}, {(char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'t', (char)'o', (char)'o', (char)'m', (char)'a', (char)'n', (char)'y'}, {(char)'f', (char)'w', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}, {(char)'f', (char)'w', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d'}, {(char)'f', (char)'w', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d'}, {(char)'f', (char)'w', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'n', (char)'o', (char)'d', (char)'i', (char)'s', (char)'p', (char)'a', (char)'t', (char)'c', (char)'h'}, {(char)'v', (char)'x', (char)'l', (char)'a', (char)'n'}, {(char)'b', (char)'u', (char)'f', (char)'f', (char)'e', (char)'r', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'u', (char)'r', (char)'e'}};
#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static char oct_priv_flags_strings[0][32U] = {};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_get_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *ecmd)
{
  #line 219 
  struct oct_link_info *linfo;
  #line 217 
  struct lio *lio = netdev_priv(netdev);
  #line 218 
  struct octeon_device *oct = lio->oct_dev;
  #line 221 
  linfo = & lio->linfo;
  #line 223 
  cif_bitmap_zero((unsigned long *)(& ecmd->link_modes.supported),74U);
  #line 224 
  cif_bitmap_zero((unsigned long *)(& ecmd->link_modes.advertising),74U);
  #line 226 
  switch ((int)linfo->link.s.phy_type) {
    #line 227 
    case 0: 
            #line 227 
    ;
    #line 228 
    ecmd->base.port = (unsigned char)0U;
    #line 229 
    ecmd->base.autoneg = (unsigned char)0U;
    #line 230 
    __set_bit(7L,(unsigned long *)(& ecmd->link_modes.supported));
    #line 231 
    __set_bit(13L,(unsigned long *)(& ecmd->link_modes.supported));
    #line 232 
    __set_bit(12L,(unsigned long *)(& ecmd->link_modes.supported));
    #line 235 
    __set_bit(13L,(unsigned long *)(& ecmd->link_modes.advertising));
    #line 236 
    __set_bit(12L,(unsigned long *)(& ecmd->link_modes.advertising));
    #line 239 
    break;
    #line 241 
    case 1: 
            #line 241 
    ;
    #line 242 
    if ((((unsigned int)linfo->link.s.if_mode == 5U || (unsigned int)linfo->link.s.if_mode == 12U) || (unsigned int)linfo->link.s.if_mode == 15U) || (unsigned int)linfo->link.s.if_mode == 16U) {
      {
        #line 246 
        bool branch;
        #line 246 
        struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"lio_get_link_ksettings", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c", .format = (char *)"ecmd->base.transceiver is XCVR_EXTERNAL\n", .lineno = (unsigned int)246U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 246 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
        #line 246 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 246 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug442,& (oct->pci_dev)->dev,(char *)"ecmd->base.transceiver is XCVR_EXTERNAL\n");
      }
      #line 247 
      ecmd->base.transceiver = (unsigned char)1U;
    }
    else 
         #line 249 
         _dev_err(& (oct->pci_dev)->dev,(char *)"Unknown link interface mode: %d\n",(int)linfo->link.s.if_mode);
    #line 253 
    ecmd->base.port = (unsigned char)3U;
    #line 254 
    ecmd->base.autoneg = (unsigned char)0U;
    #line 255 
    __set_bit(10L,(unsigned long *)(& ecmd->link_modes.supported));
    #line 257 
    __set_bit(13L,(unsigned long *)(& ecmd->link_modes.supported));
    #line 258 
    __set_bit(13L,(unsigned long *)(& ecmd->link_modes.advertising));
    #line 259 
    if (oct->subsystem_id == 464765U || oct->subsystem_id == 399229U) 
      #line 261 
      if ((unsigned int)oct->chip_id == 38658U) {
        #line 262 
        __set_bit(33L,(unsigned long *)(& ecmd->link_modes.supported));
        #line 264 
        __set_bit(32L,(unsigned long *)(& ecmd->link_modes.supported));
        #line 266 
        __set_bit(31L,(unsigned long *)(& ecmd->link_modes.supported));
        #line 269 
        if ((unsigned int)oct->no_speed_setting == 0U) {
          #line 270 
          __set_bit(43L,(unsigned long *)(& ecmd->link_modes.supported));
          #line 273 
          __set_bit(19L,(unsigned long *)(& ecmd->link_modes.supported));
          #line 276 
          __set_bit(42L,(unsigned long *)(& ecmd->link_modes.supported));
        }
        #line 281 
        if ((unsigned int)oct->no_speed_setting == 0U) {
          #line 282 
          liquidio_get_speed(lio);
          #line 283 
          liquidio_get_fec(lio);
        }
        else 
             #line 285 
             oct->speed_setting = (unsigned char)25U;
        #line 288 
        if ((unsigned int)oct->speed_setting == 10U) {
          #line 289 
          __set_bit(43L,(unsigned long *)(& ecmd->link_modes.advertising));
          #line 292 
          __set_bit(19L,(unsigned long *)(& ecmd->link_modes.advertising));
          #line 295 
          __set_bit(42L,(unsigned long *)(& ecmd->link_modes.advertising));
        }
        #line 299 
        if ((unsigned int)oct->speed_setting == 25U) {
          #line 300 
          __set_bit(33L,(unsigned long *)(& ecmd->link_modes.advertising));
          #line 303 
          __set_bit(32L,(unsigned long *)(& ecmd->link_modes.advertising));
          #line 306 
          __set_bit(31L,(unsigned long *)(& ecmd->link_modes.advertising));
        }
        #line 311 
        if ((unsigned int)oct->no_speed_setting != 0U) 
                                                       #line 312 
                                                       break;
        #line 314 
        __set_bit(50L,(unsigned long *)(& ecmd->link_modes.supported));
        #line 316 
        __set_bit(49L,(unsigned long *)(& ecmd->link_modes.supported));
        #line 319 
        if (oct->props[lio->ifidx].fec == 1) 
                                             #line 321 
                                             __set_bit(50L,(unsigned long *)(& ecmd->link_modes.advertising)); else 
                                                                    #line 325 
                                                                    __set_bit(49L,(unsigned long *)(& ecmd->link_modes.advertising));
      }
      else {
        #line 329 
        if ((unsigned int)linfo->link.s.speed == 10000U) {
          #line 330 
          __set_bit(43L,(unsigned long *)(& ecmd->link_modes.supported));
          #line 333 
          __set_bit(19L,(unsigned long *)(& ecmd->link_modes.supported));
          #line 336 
          __set_bit(42L,(unsigned long *)(& ecmd->link_modes.supported));
          #line 340 
          __set_bit(43L,(unsigned long *)(& ecmd->link_modes.advertising));
          #line 343 
          __set_bit(19L,(unsigned long *)(& ecmd->link_modes.advertising));
          #line 346 
          __set_bit(42L,(unsigned long *)(& ecmd->link_modes.advertising));
        }
        #line 351 
        if ((unsigned int)linfo->link.s.speed == 25000U) {
          #line 352 
          __set_bit(33L,(unsigned long *)(& ecmd->link_modes.supported));
          #line 355 
          __set_bit(32L,(unsigned long *)(& ecmd->link_modes.supported));
          #line 358 
          __set_bit(31L,(unsigned long *)(& ecmd->link_modes.supported));
          #line 362 
          __set_bit(33L,(unsigned long *)(& ecmd->link_modes.advertising));
          #line 365 
          __set_bit(32L,(unsigned long *)(& ecmd->link_modes.advertising));
          #line 368 
          __set_bit(31L,(unsigned long *)(& ecmd->link_modes.advertising));
        }
      }
    else {
      #line 374 
      __set_bit(12L,(unsigned long *)(& ecmd->link_modes.supported));
      #line 376 
      __set_bit(12L,(unsigned long *)(& ecmd->link_modes.advertising));
    }
    #line 379 
    break;
  }
  #line 382 
  if ((unsigned int)linfo->link.s.link_up != 0U) {
    #line 383 
    ecmd->base.speed = (unsigned int)linfo->link.s.speed;
    #line 384 
    ecmd->base.duplex = (unsigned char)linfo->link.s.duplex;
  }
  else {
    #line 386 
    ecmd->base.speed = 4294967295U;
    #line 387 
    ecmd->base.duplex = (unsigned char)255U;
  }
  #line 390 
  return 0;
}

#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_set_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *ecmd)
{
  #line 398 
  struct oct_link_info *linfo;
  #line 399 
  struct octeon_device *oct;
  #line 396 
  int speed = (int)ecmd->base.speed;
  #line 397 
  struct lio *lio = netdev_priv(netdev);
  #line 401 
  oct = lio->oct_dev;
  #line 403 
  linfo = & lio->linfo;
  #line 405 
  if (oct->subsystem_id != 464765U && oct->subsystem_id != 399229U) 
                                                                    #line 407 
                                                                    return -95;
  #line 409 
  if ((unsigned int)oct->no_speed_setting != 0U) {
    #line 410 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: Changing speed is not supported\n",(char *)"lio_set_link_ksettings");
    #line 412 
    return -95;
  }
  #line 415 
  if (((unsigned int)ecmd->base.duplex != 255U && (int)ecmd->base.duplex != (int)linfo->link.s.duplex || (unsigned int)ecmd->base.autoneg != 0U) || (ecmd->base.speed != 10000U && ecmd->base.speed != 25000U) && ecmd->base.speed != 4294967295U) 
    #line 420 
    return -95;
  #line 422 
  if ((int)oct->speed_boot == speed / 1000 && (int)oct->speed_boot == (int)oct->speed_setting) 
    #line 424 
    return 0;
  #line 426 
  liquidio_set_speed(lio,speed / 1000);
  {
    #line 428 
    bool branch;
    #line 428 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"lio_set_link_ksettings", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c", .format = (char *)"Port speed is set to %dG\n", .lineno = (unsigned int)428U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 428 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 428 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 428 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug443,& (oct->pci_dev)->dev,(char *)"Port speed is set to %dG\n",(int)oct->speed_setting);
  }
  #line 431 
  return 0;
}

#line 435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static void lio_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  #line 437 
  struct lio *lio;
  #line 438 
  struct octeon_device *oct;
  #line 440 
  lio = (struct lio *)netdev_priv(netdev);
  #line 441 
  oct = lio->oct_dev;
  #line 443 
  memset((void *)drvinfo,0,196UL);
  #line 444 
  strcpy((char *)(& drvinfo->driver),(char *)"liquidio");
  #line 445 
  strcpy((char *)(& drvinfo->version),(char *)"");
  #line 446 
  strncpy((char *)(& drvinfo->fw_version),(char *)(& oct->fw_info.liquidio_firmware_version),32UL);
  #line 448 
  ;
  #line 448 
  strncpy((char *)(& drvinfo->bus_info),pci_name(oct->pci_dev),32UL);
  #line 449 
  return;
}

#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static void lio_get_vf_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  #line 454 
  struct octeon_device *oct;
  #line 455 
  struct lio *lio;
  #line 457 
  lio = (struct lio *)netdev_priv(netdev);
  #line 458 
  oct = lio->oct_dev;
  #line 460 
  memset((void *)drvinfo,0,196UL);
  #line 461 
  strcpy((char *)(& drvinfo->driver),(char *)"liquidio_vf");
  #line 462 
  strcpy((char *)(& drvinfo->version),(char *)"");
  #line 463 
  strncpy((char *)(& drvinfo->fw_version),(char *)(& oct->fw_info.liquidio_firmware_version),32UL);
  #line 465 
  ;
  #line 465 
  strncpy((char *)(& drvinfo->bus_info),pci_name(oct->pci_dev),32UL);
  #line 466 
  return;
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_send_queue_count_update(struct net_device *netdev, uint32_t num_queues)
{
  #line 473 
  struct octnic_ctrl_pkt nctrl;
  #line 471 
  struct lio *lio = netdev_priv(netdev);
  #line 472 
  struct octeon_device *oct = lio->oct_dev;
  #line 474 
  int ret = 0;
  #line 476 
  memset((void *)(& nctrl),0,328UL);
  #line 478 
  nctrl.ncmd.u64 = 0ULL;
  #line 479 
  nctrl.ncmd.s.cmd = (unsigned long long)31U;
  #line 480 
  nctrl.ncmd.s.param1 = (unsigned long long)((unsigned short)num_queues);
  #line 481 
  nctrl.ncmd.s.param2 = (unsigned long long)((unsigned char)num_queues);
  #line 482 
  nctrl.iq_no = (unsigned long long)lio->linfo.txpciq[0].s.q_no;
  #line 483 
  nctrl.netpndev = (unsigned long long)netdev;
  #line 484 
  nctrl.cb_fn = & liquidio_link_ctrl_cmd_completion;
  #line 486 
  ret = octnet_send_nic_ctrl_pkt(lio->oct_dev,& nctrl);
  #line 487 
  if (ret != 0) {
    #line 488 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Failed to send Queue reset command (ret: 0x%x)\n",ret);
    #line 490 
    return -1;
  }
  #line 493 
  return 0;
}

#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static void lio_ethtool_get_channels(struct net_device *dev, struct ethtool_channels *channel)
{
  #line 505 
  struct octeon_device *_oct;
  #line 500 
  struct lio *lio = netdev_priv(dev);
  #line 501 
  struct octeon_device *oct = lio->oct_dev;
  #line 502 
  u32 max_rx = 0U;
  #line 502 
  u32 max_tx = 0U;
  #line 502 
  u32 tx_count = 0U;
  #line 502 
  u32 rx_count = 0U;
  #line 503 
  u32 combined_count = 0U;
  #line 503 
  u32 max_combined = 0U;
  #line 505 
  _oct = oct;
  #line 505 
  if (((unsigned int)_oct->chip_id + 65391U <= 1U) != 0) {
    #line 506 
    struct octeon_config *conf6x = ((struct octeon_cn6xxx *)oct->chip)->conf;
    #line 508 
    max_rx = (unsigned int)conf6x->oq.max_oqs;
    #line 509 
    max_tx = (unsigned int)conf6x->iq.max_iqs;
    #line 510 
    rx_count = (unsigned int)conf6x->nic_if_cfg[lio->ifidx].num_rxqs;
    #line 511 
    tx_count = (unsigned int)conf6x->nic_if_cfg[lio->ifidx].num_txqs;
  }
  else 
    #line 512 
    if ((unsigned int)oct->chip_id == 38658U) {
      #line 513 
      if (oct->sriov_info.sriov_enabled != 0U) 
                                               #line 514 
                                               max_combined = (unsigned int)lio->linfo.num_txpciq;
      else {
        #line 516 
        struct octeon_config *conf23_pf = ((struct octeon_cn23xx_pf *)oct->chip)->conf;
        #line 519 
        max_combined = (unsigned int)conf23_pf->iq.max_iqs;
      }
      #line 521 
      combined_count = oct->num_iqs;
    }
    else 
      #line 522 
      if ((unsigned int)oct->chip_id == 38674U) {
        #line 523 
        u64 reg_val = 0ULL;
        #line 524 
        u64 ctrl = 65536ULL;
        #line 526 
        reg_val = readq((void *)(oct->mmio[0].hw_addr + ctrl));
        #line 527 
        reg_val >>= 48;
        #line 528 
        max_combined = (unsigned int)reg_val & 63U;
        #line 529 
        combined_count = oct->num_iqs;
      }
  #line 532 
  channel->max_rx = max_rx;
  #line 533 
  channel->max_tx = max_tx;
  #line 534 
  channel->max_combined = max_combined;
  #line 535 
  channel->rx_count = rx_count;
  #line 536 
  channel->tx_count = tx_count;
  #line 537 
  channel->combined_count = combined_count;
  #line 538 
  return;
}

#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_irq_reallocate_irqs(struct octeon_device *oct, uint32_t num_ioqs)
{
  #line 543 
  struct msix_entry *msix_entries;
  #line 545 
  int i;
  #line 544 
  int num_msix_irqs = 0;
  #line 547 
  if (oct->msix_on == 0) 
                         #line 548 
                         return 0;
  #line 553 
  (*(oct->fn_list.disable_interrupt))(oct,(unsigned char)255);
  #line 555 
  if (oct->msix_on != 0) {
    #line 556 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 557 
                                              num_msix_irqs = oct->num_msix_irqs + -1;
    else 
      #line 558 
      if ((unsigned int)oct->chip_id == 38674U) 
                                                #line 559 
                                                num_msix_irqs = oct->num_msix_irqs;
    #line 561 
    msix_entries = (struct msix_entry *)oct->msix_entries;
    #line 562 
    i = 0;
    #line 562 
    while (i < num_msix_irqs) {
      #line 563 
      if ((oct->ioq_vector + (unsigned long)i)->vector != 0) {
        #line 565 
        irq_set_affinity_hint((msix_entries + (unsigned long)i)->vector,(struct cpumask *)0);
        #line 567 
        cif_free_irq_1((msix_entries + (unsigned long)i)->vector,(void *)(oct->ioq_vector + (unsigned long)i));
        #line 569 
        (oct->ioq_vector + (unsigned long)i)->vector = 0;
      }
      #line 562 
      i ++;
    }
    #line 574 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 575 
                                              cif_free_irq_1((msix_entries + (unsigned long)i)->vector,(void *)oct);
    #line 577 
    pci_disable_msix(oct->pci_dev);
    #line 578 
    kfree(oct->msix_entries);
    #line 579 
    oct->msix_entries = (void *)0;
  }
  #line 582 
  kfree(oct->irq_name_storage);
  #line 583 
  oct->irq_name_storage = (void *)0;
  #line 585 
  if (octeon_allocate_ioq_vector(oct,num_ioqs) != 0) {
    #line 586 
    _dev_err(& (oct->pci_dev)->dev,(char *)"OCTEON: ioq vector allocation failed\n");
    #line 587 
    return -1;
  }
  #line 590 
  if (octeon_setup_interrupt(oct,num_ioqs) != 0) {
    #line 591 
    _dev_info(& (oct->pci_dev)->dev,(char *)"Setup interrupt failed\n");
    #line 592 
    return -1;
  }
  #line 596 
  (*(oct->fn_list.enable_interrupt))(oct,(unsigned char)255);
  #line 598 
  return 0;
}

#line 602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_ethtool_set_channels(struct net_device *dev, struct ethtool_channels *channel)
{
  #line 605 
  u32 combined_count;
  #line 605 
  u32 max_combined;
  #line 606 
  struct lio *lio = netdev_priv(dev);
  #line 607 
  struct octeon_device *oct = lio->oct_dev;
  #line 608 
  int stopped = 0;
  #line 610 
  if (cif_strcmp((char *)(& oct->fw_info.liquidio_firmware_version),
                   (char *)"1.6.1") < 0) {
    #line 611 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Minimum firmware version required is 1.6.1\n");
    #line 612 
    return -22;
  }
  #line 615 
  if (((channel->combined_count == 0U || channel->other_count != 0U) || channel->rx_count != 0U) || channel->tx_count != 0U) 
    #line 617 
    return -22;
  #line 619 
  combined_count = channel->combined_count;
  #line 621 
  if ((unsigned int)oct->chip_id == 38658U) 
    #line 622 
    if (oct->sriov_info.sriov_enabled != 0U) 
                                             #line 623 
                                             max_combined = (unsigned int)lio->linfo.num_txpciq;
    else {
      #line 625 
      struct octeon_config *conf23_pf = ((struct octeon_cn23xx_pf *)oct->chip)->conf;
      #line 629 
      max_combined = (unsigned int)conf23_pf->iq.max_iqs;
    }
  else 
    #line 632 
    if ((unsigned int)oct->chip_id == 38674U) {
      #line 633 
      u64 reg_val = 0ULL;
      #line 634 
      u64 ctrl = 65536ULL;
      #line 636 
      reg_val = readq((void *)(oct->mmio[0].hw_addr + ctrl));
      #line 637 
      reg_val >>= 48;
      #line 638 
      max_combined = (unsigned int)reg_val & 63U;
    }
    else 
         #line 640 
         return -22;
  #line 643 
  if (combined_count > max_combined || combined_count == 0U) 
                                                             #line 644 
                                                             return -22;
  #line 646 
  if (oct->num_iqs == combined_count) 
                                      #line 647 
                                      return 0;
  #line 649 
  ifstate_set_0(lio,16);
  #line 651 
  if ((int)netif_running(dev) != 0) {
    #line 652 
    (*((dev->netdev_ops)->ndo_stop))(dev);
    #line 653 
    stopped = 1;
  }
  #line 656 
  if (lio_reset_queues(dev,combined_count) != 0) 
                                                 #line 657 
                                                 return -22;
  #line 659 
  if (stopped != 0) 
                    #line 660 
                    (*((dev->netdev_ops)->ndo_open))(dev);
  #line 662 
  ifstate_reset_0(lio,16);
  #line 664 
  return 0;
}

#line 667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_get_eeprom_len(struct net_device *netdev)
{
  #line 669 
  u8 buf[192U];
  #line 672 
  struct octeon_board_info *board_info;
  #line 673 
  int len;
  #line 670 
  struct lio *lio = netdev_priv(netdev);
  #line 671 
  struct octeon_device *oct_dev = lio->oct_dev;
  #line 675 
  board_info = & oct_dev->boardinfo;
  #line 676 
  len = sprintf((char *)(& buf),(char *)"boardname:%s serialnum:%s maj:%lld min:%lld\n",(char *)(& board_info->name),(char *)(& board_info->serial_number),board_info->major,board_info->minor);
  #line 680 
  return len;
}

#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_get_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 689 
  struct octeon_board_info *board_info;
  #line 687 
  struct lio *lio = netdev_priv(netdev);
  #line 688 
  struct octeon_device *oct_dev = lio->oct_dev;
  #line 691 
  if (eeprom->offset != 0U) 
                            #line 692 
                            return -22;
  #line 694 
  eeprom->magic = (unsigned int)(oct_dev->pci_dev)->vendor;
  #line 695 
  board_info = & oct_dev->boardinfo;
  #line 696 
  sprintf((char *)bytes,(char *)"boardname:%s serialnum:%s maj:%lld min:%lld\n",(char *)(& board_info->name),(char *)(& board_info->serial_number),board_info->major,board_info->minor);
  #line 701 
  return 0;
}

#line 704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int octnet_gpio_access(struct net_device *netdev, int addr, int val)
{
  #line 708 
  struct octnic_ctrl_pkt nctrl;
  #line 706 
  struct lio *lio = netdev_priv(netdev);
  #line 707 
  struct octeon_device *oct = lio->oct_dev;
  #line 709 
  int ret = 0;
  #line 711 
  memset((void *)(& nctrl),0,328UL);
  #line 713 
  nctrl.ncmd.u64 = 0ULL;
  #line 714 
  nctrl.ncmd.s.cmd = (unsigned long long)10U;
  #line 715 
  nctrl.ncmd.s.param1 = (unsigned long long)((unsigned short)addr);
  #line 716 
  nctrl.ncmd.s.param2 = (unsigned long long)((unsigned char)val);
  #line 717 
  nctrl.iq_no = (unsigned long long)lio->linfo.txpciq[0].s.q_no;
  #line 718 
  nctrl.netpndev = (unsigned long long)netdev;
  #line 719 
  nctrl.cb_fn = & liquidio_link_ctrl_cmd_completion;
  #line 721 
  ret = octnet_send_nic_ctrl_pkt(lio->oct_dev,& nctrl);
  #line 722 
  if (ret != 0) {
    #line 723 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Failed to configure gpio value, ret=%d\n",ret);
    #line 725 
    return -22;
  }
  #line 728 
  return 0;
}

#line 731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int octnet_id_active(struct net_device *netdev, int val)
{
  #line 735 
  struct octnic_ctrl_pkt nctrl;
  #line 733 
  struct lio *lio = netdev_priv(netdev);
  #line 734 
  struct octeon_device *oct = lio->oct_dev;
  #line 736 
  int ret = 0;
  #line 738 
  memset((void *)(& nctrl),0,328UL);
  #line 740 
  nctrl.ncmd.u64 = 0ULL;
  #line 741 
  nctrl.ncmd.s.cmd = (unsigned long long)26U;
  #line 742 
  nctrl.ncmd.s.param1 = (unsigned long long)((unsigned short)val);
  #line 743 
  nctrl.iq_no = (unsigned long long)lio->linfo.txpciq[0].s.q_no;
  #line 744 
  nctrl.netpndev = (unsigned long long)netdev;
  #line 745 
  nctrl.cb_fn = & liquidio_link_ctrl_cmd_completion;
  #line 747 
  ret = octnet_send_nic_ctrl_pkt(lio->oct_dev,& nctrl);
  #line 748 
  if (ret != 0) {
    #line 749 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Failed to configure gpio value, ret=%d\n",ret);
    #line 751 
    return -22;
  }
  #line 754 
  return 0;
}

#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int octnet_mdio45_access(struct lio *lio, int op, int loc, int *value)
{
  #line 764 
  struct octeon_soft_command *sc;
  #line 765 
  struct oct_mdio_cmd_resp *mdio_cmd_rsp;
  #line 766 
  struct oct_mdio_cmd *mdio_cmd;
  #line 763 
  struct octeon_device *oct_dev = lio->oct_dev;
  #line 767 
  int retval = 0;
  #line 769 
  sc = octeon_alloc_soft_command(oct_dev,40U,56U,0U);
  #line 774 
  if (sc == (struct octeon_soft_command *)0) 
                                             #line 775 
                                             return -12;
  #line 777 
  mdio_cmd_rsp = (struct oct_mdio_cmd_resp *)sc->virtrptr;
  #line 778 
  mdio_cmd = (struct oct_mdio_cmd *)sc->virtdptr;
  #line 780 
  mdio_cmd->op = (unsigned long long)op;
  #line 781 
  mdio_cmd->mdio_addr = (unsigned long long)loc;
  #line 782 
  if (op != 0) 
               #line 783 
               mdio_cmd->value1 = (unsigned long long)*value;
  #line 784 
  octeon_swap_8B_data((u64 *)mdio_cmd,5U);
  #line 786 
  sc->iq_no = (unsigned int)lio->linfo.txpciq[0].s.q_no;
  #line 788 
  octeon_prepare_soft_command(oct_dev,sc,(unsigned char)1,(unsigned char)6,0U,0ULL,0ULL);
  #line 791 
  __init_completion(& sc->complete);
  #line 792 
  sc->sc_status = 1U;
  #line 794 
  retval = octeon_send_soft_command(oct_dev,sc);
  #line 795 
  if (retval == -1) {
    #line 796 
    _dev_err(& (oct_dev->pci_dev)->dev,(char *)"octnet_mdio45_access instruction failed status: %x\n",retval);
    #line 799 
    octeon_free_soft_command(oct_dev,sc);
    #line 800 
    return -16;
  }
  else {
    #line 805 
    retval = wait_for_sc_completion_timeout_2(oct_dev,sc,0UL);
    #line 806 
    if (retval != 0) 
                     #line 807 
                     return retval;
    #line 809 
    retval = (int)mdio_cmd_rsp->status;
    #line 810 
    if (retval != 0) {
      #line 811 
      _dev_err(& (oct_dev->pci_dev)->dev,(char *)"octnet mdio45 access failed: %x\n",retval);
      {
        #line 814 
        union __anonunion___u_6831 __u = {.__val = 1};
        #line 813 
        __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
        #line 813 
        int tmp = __u.__val;
      }
      #line 814 
      return -16;
    }
    #line 817 
    octeon_swap_8B_data((u64 *)(& mdio_cmd_rsp->resp),5U);
    #line 820 
    if (op == 0) 
                 #line 821 
                 *value = (int)mdio_cmd_rsp->resp.value1;
    {
      #line 824 
      union __anonunion___u_6833 __u_0 = {.__val = 1};
      #line 823 
      __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_0.__c),4);
      #line 823 
      int tmp_3 = __u_0.__val;
    }
  }
  #line 826 
  return retval;
}

#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_set_phys_id(struct net_device *netdev, enum ethtool_phys_id_state state)
{
  #line 834 
  struct oct_link_info *linfo;
  #line 835 
  int value;
  #line 835 
  int ret;
  #line 836 
  u32 cur_ver;
  #line 832 
  struct lio *lio = netdev_priv(netdev);
  #line 833 
  struct octeon_device *oct = lio->oct_dev;
  #line 838 
  linfo = & lio->linfo;
  #line 839 
  cur_ver = (((unsigned int)oct->fw_info.ver.maj << 16) | ((unsigned int)oct->fw_info.ver.min << 8)) | (unsigned int)oct->fw_info.ver.rev;
  #line 843 
  switch ((unsigned int)state) {
    #line 844 
    case (unsigned int)1: 
                          #line 844 
    ;
    #line 845 
    if ((unsigned int)oct->chip_id == 146U) {
      #line 846 
      octnet_gpio_access(netdev,8,1);
      #line 848 
      return 2;
    }
    else 
      #line 850 
      if ((unsigned int)oct->chip_id == 145U) {
        #line 852 
        ret = octnet_mdio45_access(lio,0,13576,(int *)(& lio->phy_beacon_val));
        #line 855 
        if (ret != 0) 
                      #line 856 
                      return ret;
        #line 858 
        ret = octnet_mdio45_access(lio,0,13569,(int *)(& lio->led_ctrl_val));
        #line 861 
        if (ret != 0) 
                      #line 862 
                      return ret;
        #line 865 
        value = 18429;
        #line 866 
        ret = octnet_mdio45_access(lio,1,13576,& value);
        #line 869 
        if (ret != 0) 
                      #line 870 
                      return ret;
        #line 872 
        value = 31;
        #line 873 
        ret = octnet_mdio45_access(lio,1,13569,& value);
        #line 876 
        if (ret != 0) 
                      #line 877 
                      return ret;
      }
      else 
        #line 878 
        if ((unsigned int)oct->chip_id == 38658U) {
          #line 879 
          octnet_id_active(netdev,1);
          #line 880 
          if ((unsigned int)linfo->link.s.phy_type == 0U && cur_ver > 67330U) 
            #line 882 
            return 2; else 
                           #line 884 
                           return 0;
        }
        else 
             #line 886 
             return -22;
    #line 888 
    break;
    #line 890 
    case (unsigned int)2: 
                          #line 890 
    ;
    #line 891 
    if (((unsigned int)oct->chip_id == 38658U && (unsigned int)linfo->link.s.phy_type == 0U) && cur_ver > 67330U) 
      #line 894 
      octnet_id_active(netdev,1);
    else 
      #line 895 
      if ((unsigned int)oct->chip_id == 146U) 
                                              #line 896 
                                              octnet_gpio_access(netdev,8,2); else 
                                                                    #line 899 
                                                                    return -22;
    #line 901 
    break;
    #line 903 
    case (unsigned int)3: 
                          #line 903 
    ;
    #line 904 
    if (((unsigned int)oct->chip_id == 38658U && (unsigned int)linfo->link.s.phy_type == 0U) && cur_ver > 67330U) 
      #line 907 
      octnet_id_active(netdev,0);
    else 
      #line 908 
      if ((unsigned int)oct->chip_id == 146U) 
                                              #line 909 
                                              octnet_gpio_access(netdev,8,3); else 
                                                                    #line 912 
                                                                    return -22;
    #line 914 
    break;
    #line 916 
    case (unsigned int)0: 
                          #line 916 
    ;
    #line 917 
    if ((unsigned int)oct->chip_id == 146U) 
                                            #line 918 
                                            octnet_gpio_access(netdev,8,4);
    else 
      #line 920 
      if ((unsigned int)oct->chip_id == 145U) {
        #line 922 
        ret = octnet_mdio45_access(lio,1,13569,(int *)(& lio->led_ctrl_val));
        #line 925 
        if (ret != 0) 
                      #line 926 
                      return ret;
        #line 928 
        ret = octnet_mdio45_access(lio,1,13576,(int *)(& lio->phy_beacon_val));
        #line 931 
        if (ret != 0) 
                      #line 932 
                      return ret;
      }
      else 
        #line 933 
        if ((unsigned int)oct->chip_id == 38658U) {
          #line 934 
          octnet_id_active(netdev,0);
          #line 936 
          return 0;
        }
        else 
             #line 938 
             return -22;
    #line 940 
    break;
    #line 942 
    default: 
             #line 942 
    ;
    #line 943 
    return -22;
  }
  #line 946 
  return 0;
}

#line 950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static void lio_ethtool_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ering)
{
  #line 961 
  struct octeon_device *_oct;
  #line 953 
  struct lio *lio = netdev_priv(netdev);
  #line 954 
  struct octeon_device *oct = lio->oct_dev;
  #line 955 
  u32 tx_max_pending = 0U;
  #line 955 
  u32 rx_max_pending = 0U;
  #line 955 
  u32 tx_pending = 0U;
  #line 956 
  u32 rx_pending = 0U;
  #line 958 
  if (ifstate_check_1(lio,16) != 0) 
                                    #line 959 
                                    return;
  #line 961 
  _oct = oct;
  #line 961 
  if (((unsigned int)_oct->chip_id + 65391U <= 1U) != 0) {
    #line 962 
    struct octeon_config *conf6x = ((struct octeon_cn6xxx *)oct->chip)->conf;
    #line 964 
    tx_max_pending = 2048U;
    #line 965 
    rx_max_pending = 2048U;
    #line 966 
    rx_pending = (unsigned int)conf6x->nic_if_cfg[lio->ifidx].num_rx_descs;
    #line 967 
    tx_pending = (unsigned int)conf6x->nic_if_cfg[lio->ifidx].num_tx_descs;
  }
  else 
    #line 968 
    if ((unsigned int)oct->chip_id == 38658U || (unsigned int)oct->chip_id == 38674U) {
      #line 969 
      tx_max_pending = 2048U;
      #line 970 
      rx_max_pending = 2048U;
      #line 971 
      rx_pending = (oct->droq[0])->max_count;
      #line 972 
      tx_pending = (oct->instr_queue[0])->max_count;
    }
  #line 975 
  ering->tx_pending = tx_pending;
  #line 976 
  ering->tx_max_pending = tx_max_pending;
  #line 977 
  ering->rx_pending = rx_pending;
  #line 978 
  ering->rx_max_pending = rx_max_pending;
  #line 979 
  ering->rx_mini_pending = 0U;
  #line 980 
  ering->rx_jumbo_pending = 0U;
  #line 981 
  ering->rx_mini_max_pending = 0U;
  #line 982 
  ering->rx_jumbo_max_pending = 0U;
  #line 983 
  return;
}

#line 985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_23xx_reconfigure_queue_count(struct lio *lio)
{
  #line 988 
  u32 resp_size;
  #line 988 
  u32 data_size;
  #line 989 
  struct liquidio_if_cfg_resp *resp;
  #line 990 
  struct octeon_soft_command *sc;
  #line 991 
  union oct_nic_if_cfg if_cfg;
  #line 992 
  struct lio_version *vdata;
  #line 993 
  u32 ifidx_or_pfnum;
  #line 994 
  int retval;
  #line 995 
  int j;
  #line 987 
  struct octeon_device *oct = lio->oct_dev;
  #line 997 
  resp_size = 1112U;
  #line 998 
  data_size = 8U;
  #line 999 
  sc = octeon_alloc_soft_command(oct,data_size,resp_size,0U);
  #line 1002 
  if (sc == (struct octeon_soft_command *)0) {
    #line 1003 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: Failed to allocate soft command\n",(char *)"lio_23xx_reconfigure_queue_count");
    #line 1005 
    return -1;
  }
  #line 1008 
  resp = (struct liquidio_if_cfg_resp *)sc->virtrptr;
  #line 1009 
  vdata = (struct lio_version *)sc->virtdptr;
  #line 1011 
  vdata->major = (unsigned short)256U;
  #line 1012 
  vdata->minor = (unsigned short)1792U;
  #line 1013 
  vdata->micro = (unsigned short)512U;
  #line 1015 
  ifidx_or_pfnum = (unsigned int)oct->pf_num;
  #line 1017 
  if_cfg.u64 = 0ULL;
  #line 1018 
  if_cfg.s.num_iqueues = (unsigned long long)((unsigned short)oct->sriov_info.num_pf_rings);
  #line 1019 
  if_cfg.s.num_oqueues = (unsigned long long)((unsigned short)oct->sriov_info.num_pf_rings);
  #line 1020 
  if_cfg.s.base_queue = (unsigned long long)((unsigned short)oct->sriov_info.pf_srn);
  #line 1021 
  if_cfg.s.gmx_port_id = (unsigned long long)((unsigned char)oct->pf_num);
  #line 1023 
  sc->iq_no = 0U;
  #line 1024 
  octeon_prepare_soft_command(oct,sc,(unsigned char)1,(unsigned char)18,0U,if_cfg.u64,0ULL);
  #line 1028 
  __init_completion(& sc->complete);
  #line 1029 
  sc->sc_status = 1U;
  #line 1031 
  retval = octeon_send_soft_command(oct,sc);
  #line 1032 
  if (retval == -1) {
    #line 1033 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Sending iq/oq config failed status: %x\n",retval);
    #line 1036 
    octeon_free_soft_command(oct,sc);
    #line 1037 
    return -5;
  }
  #line 1040 
  retval = wait_for_sc_completion_timeout_2(oct,sc,0UL);
  #line 1041 
  if (retval != 0) 
                   #line 1042 
                   return retval;
  #line 1044 
  retval = (int)resp->status;
  #line 1045 
  if (retval != 0) {
    #line 1046 
    _dev_err(& (oct->pci_dev)->dev,(char *)"iq/oq config failed: %x\n",retval);
    {
      #line 1049 
      union __anonunion___u_6835 __u = {.__val = 1};
      #line 1048 
      __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
      #line 1048 
      int tmp = __u.__val;
    }
    #line 1049 
    return -1;
  }
  #line 1052 
  octeon_swap_8B_data((u64 *)(& resp->cfg_info),137U);
  #line 1055 
  lio->ifidx = (int)ifidx_or_pfnum;
  #line 1056 
  if (0 != 0) 
              #line 1056 
              lio->linfo.num_rxpciq = (unsigned long long)((((((((((((resp->cfg_info.iqmask & 1ULL) != 0ULL) + ((resp->cfg_info.iqmask & 2ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 8ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 16ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 32ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 64ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 128ULL) != 0ULL)) + (((((((((resp->cfg_info.iqmask & 256ULL) != 0ULL) + ((resp->cfg_info.iqmask & 512ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 1024ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 2048ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4096ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 8192ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 16384ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 32768ULL) != 0ULL))) + ((((((((((resp->cfg_info.iqmask & 65536ULL) != 0ULL) + ((resp->cfg_info.iqmask & 131072ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 262144ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 524288ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 1048576ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 2097152ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4194304ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 8388608ULL) != 0ULL)) + (((((((((resp->cfg_info.iqmask & 16777216ULL) != 0ULL) + ((resp->cfg_info.iqmask & 33554432ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 67108864ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 134217728ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 268435456ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 536870912ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 1073741824ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 2147483648ULL) != 0ULL)))) + (((((((((((resp->cfg_info.iqmask & 4294967296ULL) != 0ULL) + ((resp->cfg_info.iqmask & 8589934592ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 17179869184ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 34359738368ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 68719476736ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 137438953472ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 274877906944ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 549755813888ULL) != 0ULL)) + (((((((((resp->cfg_info.iqmask & 1099511627776ULL) != 0ULL) + ((resp->cfg_info.iqmask & 2199023255552ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4398046511104ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 8796093022208ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 17592186044416ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 35184372088832ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 70368744177664ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 140737488355328ULL) != 0ULL))) + ((((((((((resp->cfg_info.iqmask & 281474976710656ULL) != 0ULL) + ((resp->cfg_info.iqmask & 562949953421312ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 1125899906842624ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 2251799813685248ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4503599627370496ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 9007199254740992ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 18014398509481984ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 36028797018963968ULL) != 0ULL)) + (((((((((resp->cfg_info.iqmask & 72057594037927936ULL) != 0ULL) + ((resp->cfg_info.iqmask & 144115188075855872ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 288230376151711744ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 576460752303423488ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 1152921504606846976ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 2305843009213693952ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4611686018427387904ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 9223372036854775808ULL) != 0ULL)))));
  else {
    #line 1056 
    lio->linfo.num_rxpciq = (unsigned long long)((unsigned char)__arch_hweight64(resp->cfg_info.iqmask));
  }
  #line 1057 
  if (0 != 0) 
              #line 1057 
              lio->linfo.num_txpciq = (unsigned long long)((((((((((((resp->cfg_info.iqmask & 1ULL) != 0ULL) + ((resp->cfg_info.iqmask & 2ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 8ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 16ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 32ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 64ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 128ULL) != 0ULL)) + (((((((((resp->cfg_info.iqmask & 256ULL) != 0ULL) + ((resp->cfg_info.iqmask & 512ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 1024ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 2048ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4096ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 8192ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 16384ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 32768ULL) != 0ULL))) + ((((((((((resp->cfg_info.iqmask & 65536ULL) != 0ULL) + ((resp->cfg_info.iqmask & 131072ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 262144ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 524288ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 1048576ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 2097152ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4194304ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 8388608ULL) != 0ULL)) + (((((((((resp->cfg_info.iqmask & 16777216ULL) != 0ULL) + ((resp->cfg_info.iqmask & 33554432ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 67108864ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 134217728ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 268435456ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 536870912ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 1073741824ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 2147483648ULL) != 0ULL)))) + (((((((((((resp->cfg_info.iqmask & 4294967296ULL) != 0ULL) + ((resp->cfg_info.iqmask & 8589934592ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 17179869184ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 34359738368ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 68719476736ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 137438953472ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 274877906944ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 549755813888ULL) != 0ULL)) + (((((((((resp->cfg_info.iqmask & 1099511627776ULL) != 0ULL) + ((resp->cfg_info.iqmask & 2199023255552ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4398046511104ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 8796093022208ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 17592186044416ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 35184372088832ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 70368744177664ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 140737488355328ULL) != 0ULL))) + ((((((((((resp->cfg_info.iqmask & 281474976710656ULL) != 0ULL) + ((resp->cfg_info.iqmask & 562949953421312ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 1125899906842624ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 2251799813685248ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4503599627370496ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 9007199254740992ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 18014398509481984ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 36028797018963968ULL) != 0ULL)) + (((((((((resp->cfg_info.iqmask & 72057594037927936ULL) != 0ULL) + ((resp->cfg_info.iqmask & 144115188075855872ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 288230376151711744ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 576460752303423488ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 1152921504606846976ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 2305843009213693952ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 4611686018427387904ULL) != 0ULL)) + ((resp->cfg_info.iqmask & 9223372036854775808ULL) != 0ULL)))));
  else {
    #line 1057 
    lio->linfo.num_txpciq = (unsigned long long)((unsigned char)__arch_hweight64(resp->cfg_info.iqmask));
  }
  #line 1058 
  j = 0;
  #line 1058 
  while ((int)lio->linfo.num_rxpciq > j) {
    #line 1059 
    lio->linfo.rxpciq[j].u64 = resp->cfg_info.linfo.rxpciq[j].u64;
    #line 1058 
    j ++;
  }
  #line 1063 
  j = 0;
  #line 1063 
  while ((int)lio->linfo.num_txpciq > j) {
    #line 1064 
    lio->linfo.txpciq[j].u64 = resp->cfg_info.linfo.txpciq[j].u64;
    #line 1063 
    j ++;
  }
  #line 1068 
  lio->linfo.hw_addr = resp->cfg_info.linfo.hw_addr;
  #line 1069 
  lio->linfo.gmxport = resp->cfg_info.linfo.gmxport;
  #line 1070 
  lio->linfo.link.u64 = resp->cfg_info.linfo.link.u64;
  #line 1071 
  lio->txq = (int)lio->linfo.txpciq[0].s.q_no;
  #line 1072 
  lio->rxq = (int)lio->linfo.rxpciq[0].s.q_no;
  #line 1074 
  _dev_info(& (oct->pci_dev)->dev,(char *)"Queue count updated to %d\n",(int)lio->linfo.num_rxpciq);
  {
    #line 1078 
    union __anonunion___u_6837 __u_0 = {.__val = 1};
    #line 1077 
    __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_0.__c),4);
    #line 1077 
    int tmp_3 = __u_0.__val;
  }
  #line 1079 
  return 0;
}

#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_reset_queues(struct net_device *netdev, uint32_t num_qs)
{
  #line 1108 
  void *__mptr;
  #line 1108 
  void *__mptr_0;
  #line 1086 
  int i;
  #line 1087 
  struct napi_struct *napi;
  #line 1087 
  struct napi_struct *n;
  #line 1088 
  int ret;
  #line 1084 
  struct lio *lio = netdev_priv(netdev);
  #line 1085 
  struct octeon_device *oct = lio->oct_dev;
  #line 1086 
  int queue_count_update = 0;
  #line 1090 
  schedule_timeout_uninterruptible((long)msecs_to_jiffies(100U));
  #line 1092 
  if (wait_for_pending_requests_0(oct) != 0) 
                                             #line 1093 
                                             _dev_err(& (oct->pci_dev)->dev,(char *)"There were pending requests\n");
  #line 1095 
  if (lio_wait_for_instr_fetch(oct) != 0) 
                                          #line 1096 
                                          _dev_err(& (oct->pci_dev)->dev,(char *)"IQ had pending instructions\n");
  #line 1098 
  if (octeon_set_io_queues_off(oct) != 0) {
    #line 1099 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Setting io queues off failed\n");
    #line 1100 
    return -1;
  }
  #line 1106 
  (*(oct->fn_list.disable_io_queues))(oct);
  #line 1108 
  __mptr = (void *)netdev->napi_list.next;
  #line 1108 
  napi = ((struct napi_struct *)(__mptr + 18446744073709551264U));
  #line 1108 
  __mptr_0 = (void *)napi->dev_list.next;
  #line 1109 
  n = ((struct napi_struct *)(__mptr_0 + 18446744073709551264U));
  #line 1108 
  while (& napi->dev_list != & netdev->napi_list) {
    #line 1108 
    void *__mptr_1;
    #line 1109 
    netif_napi_del(napi);
    #line 1108 
    napi = n;
    #line 1108 
    __mptr_1 = (void *)n->dev_list.next;
    #line 1108 
    n = ((struct napi_struct *)(__mptr_1 + 18446744073709551264U));
  }
  #line 1111 
  if (oct->num_iqs != num_qs) {
    #line 1112 
    ret = netif_set_real_num_rx_queues(netdev,num_qs);
    #line 1113 
    if (ret != 0) {
      #line 1114 
      _dev_err(& (oct->pci_dev)->dev,(char *)"Setting real number rx failed\n");
      #line 1116 
      return ret;
    }
    #line 1119 
    ret = netif_set_real_num_tx_queues(netdev,num_qs);
    #line 1120 
    if (ret != 0) {
      #line 1121 
      _dev_err(& (oct->pci_dev)->dev,(char *)"Setting real number tx failed\n");
      #line 1123 
      return ret;
    }
    #line 1130 
    queue_count_update = 1;
  }
  #line 1138 
  if (queue_count_update != 0) {
    #line 1139 
    cleanup_rx_oom_poll_fn(netdev);
    #line 1141 
    lio_delete_glists(lio);
    #line 1146 
    if ((unsigned int)oct->chip_id == 38658U && oct->sriov_info.sriov_enabled == 0U) 
      #line 1147 
      (*(oct->fn_list.free_mbox))(oct);
  }
  #line 1150 
  i = 0;
  #line 1150 
  while (1) {
    #line 1150 
    int tmp_7;
    #line 1150 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 1150 
                                              tmp_7 = 64; else 
                                                               #line 1150 
                                                               tmp_7 = 32;
    #line 1150 
    ;
    #line 1150 
    if (! (tmp_7 > i)) 
                       #line 1150 
                       break;
    #line 1151 
    if (((oct->io_qmask.oq >> i) & 1ULL) == 0ULL) 
                                                  #line 1152 
                                                  goto __Cont;
    #line 1153 
    octeon_delete_droq(oct,(unsigned int)i);
    #line 1150 
    __Cont: 
            #line 1150 
    i ++;
  }
  #line 1156 
  i = 0;
  #line 1156 
  while (1) {
    #line 1156 
    int tmp_8;
    #line 1156 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 1156 
                                              tmp_8 = 64; else 
                                                               #line 1156 
                                                               tmp_8 = 32;
    #line 1156 
    ;
    #line 1156 
    if (! (tmp_8 > i)) 
                       #line 1156 
                       break;
    #line 1157 
    if (((oct->io_qmask.iq >> i) & 1ULL) == 0ULL) 
                                                  #line 1158 
                                                  goto __Cont_0;
    #line 1159 
    octeon_delete_instr_queue(oct,(unsigned int)i);
    #line 1156 
    __Cont_0: 
              #line 1156 
    i ++;
  }
  #line 1162 
  if (queue_count_update != 0) 
    #line 1164 
    if ((unsigned int)oct->chip_id == 38658U && oct->sriov_info.sriov_enabled == 0U) {
      #line 1166 
      oct->sriov_info.num_pf_rings = num_qs;
      #line 1167 
      if (cn23xx_sriov_config(oct) != 0) {
        #line 1168 
        _dev_err(& (oct->pci_dev)->dev,(char *)"Queue reset aborted: SRIOV config failed\n");
        #line 1170 
        return -1;
      }
      #line 1173 
      num_qs = oct->sriov_info.num_pf_rings;
    }
  #line 1177 
  if ((*(oct->fn_list.setup_device_regs))(oct) != 0) {
    #line 1178 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Failed to configure device registers\n");
    #line 1179 
    return -1;
  }
  #line 1185 
  if (queue_count_update != 0) {
    #line 1186 
    if (octeon_setup_instr_queues(oct) != 0) 
                                             #line 1187 
                                             return -1;
    #line 1189 
    if (octeon_setup_output_queues(oct) != 0) 
                                              #line 1190 
                                              return -1;
    #line 1193 
    if ((unsigned int)oct->chip_id == 38658U && oct->sriov_info.sriov_enabled == 0U) {
      #line 1194 
      if ((*(oct->fn_list.setup_mbox))(oct) != 0) {
        #line 1195 
        _dev_err(& (oct->pci_dev)->dev,(char *)"Mailbox setup failed\n");
        #line 1196 
        return -1;
      }
    }
    #line 1203 
    if (lio_irq_reallocate_irqs(oct,num_qs) != 0) {
      #line 1204 
      _dev_err(& (oct->pci_dev)->dev,(char *)"IRQs could not be allocated\n");
      #line 1205 
      return -1;
    }
    #line 1209 
    if ((*(oct->fn_list.enable_io_queues))(oct) != 0) {
      #line 1210 
      _dev_err(& (oct->pci_dev)->dev,(char *)"Failed to enable input/output queues\n");
      #line 1211 
      return -1;
    }
    #line 1214 
    i = 0;
    #line 1214 
    while (oct->num_oqs > (unsigned int)i) {
      #line 1215 
      writel((oct->droq[i])->max_count,(oct->droq[i])->pkts_credit_reg);
      #line 1214 
      i ++;
    }
    #line 1222 
    if ((unsigned int)oct->chip_id == 38658U && oct->sriov_info.sriov_enabled == 0U) {
      #line 1223 
      if (lio_23xx_reconfigure_queue_count(lio) != 0) 
                                                      #line 1224 
                                                      return -1;
    }
  }
  #line 1229 
  if (liquidio_setup_io_queues(oct,0,num_qs,num_qs) != 0) {
    #line 1230 
    _dev_err(& (oct->pci_dev)->dev,(char *)"I/O queues creation failed\n");
    #line 1231 
    return -1;
  }
  #line 1234 
  if (queue_count_update != 0) {
    #line 1235 
    if (lio_setup_glists(oct,lio,(int)num_qs) != 0) {
      #line 1236 
      _dev_err(& (oct->pci_dev)->dev,(char *)"Gather list allocation failed\n");
      #line 1237 
      return -1;
    }
    #line 1240 
    if (setup_rx_oom_poll_fn(netdev) != 0) {
      #line 1241 
      _dev_err(& (oct->pci_dev)->dev,(char *)"lio_setup_rx_oom_poll_fn failed\n");
      #line 1242 
      return 1;
    }
    #line 1248 
    if (oct->sriov_info.sriov_enabled != 0U || (unsigned int)oct->chip_id == 38674U) {
      #line 1249 
      if (lio_send_queue_count_update(netdev,num_qs) != 0) 
                                                           #line 1250 
                                                           return -1;
    }
  }
  #line 1253 
  return 0;
}

#line 1256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_ethtool_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ering)
{
  #line 1270 
  unsigned int tmp_2;
  #line 1272 
  unsigned int __UNIQUE_ID___x450;
  #line 1272 
  unsigned int tmp_6;
  #line 1270 
  unsigned int __UNIQUE_ID___x446;
  #line 1259 
  u32 rx_count;
  #line 1259 
  u32 tx_count;
  #line 1259 
  u32 rx_count_old;
  #line 1259 
  u32 tx_count_old;
  #line 1260 
  struct lio *lio = netdev_priv(netdev);
  #line 1261 
  struct octeon_device *oct = lio->oct_dev;
  #line 1262 
  int stopped = 0;
  #line 1264 
  if ((unsigned int)oct->chip_id != 38658U && (unsigned int)oct->chip_id != 38674U) 
    #line 1265 
    return -22;
  #line 1267 
  if (ering->rx_mini_pending != 0U || ering->rx_jumbo_pending != 0U) 
    #line 1268 
    return -22;
  {
    #line 1270 
    unsigned int tmp_0;
    #line 1270 
    unsigned int __UNIQUE_ID___x444;
    {
      #line 1270 
      __UNIQUE_ID___x444 = ering->rx_pending;
      #line 1270 
      unsigned int __UNIQUE_ID___y445 = 128U;
      #line 1270 
      if (__UNIQUE_ID___x444 > __UNIQUE_ID___y445) 
                                                   #line 1270 
                                                   tmp_0 = __UNIQUE_ID___x444; else 
                                                                    #line 1270 
                                                                    tmp_0 = __UNIQUE_ID___y445;
      }
    #line 1270 
    __UNIQUE_ID___x446 = tmp_0;
    #line 1270 
    unsigned int __UNIQUE_ID___y447 = 2048U;
    #line 1270 
    if (__UNIQUE_ID___x446 < __UNIQUE_ID___y447) 
                                                 #line 1270 
                                                 tmp_2 = __UNIQUE_ID___x446; else 
                                                                    #line 1270 
                                                                    tmp_2 = __UNIQUE_ID___y447;
    }
  #line 1270 
  rx_count = tmp_2;
  {
    #line 1272 
    unsigned int __UNIQUE_ID___x448;
    #line 1272 
    unsigned int tmp_4;
    {
      #line 1272 
      __UNIQUE_ID___x448 = ering->tx_pending;
      #line 1272 
      unsigned int __UNIQUE_ID___y449 = 128U;
      #line 1272 
      if (__UNIQUE_ID___x448 > __UNIQUE_ID___y449) 
                                                   #line 1272 
                                                   tmp_4 = __UNIQUE_ID___x448; else 
                                                                    #line 1272 
                                                                    tmp_4 = __UNIQUE_ID___y449;
      }
    #line 1272 
    __UNIQUE_ID___x450 = tmp_4;
    #line 1272 
    unsigned int __UNIQUE_ID___y451 = 2048U;
    #line 1272 
    if (__UNIQUE_ID___x450 < __UNIQUE_ID___y451) 
                                                 #line 1272 
                                                 tmp_6 = __UNIQUE_ID___x450; else 
                                                                    #line 1272 
                                                                    tmp_6 = __UNIQUE_ID___y451;
    }
  #line 1272 
  tx_count = tmp_6;
  #line 1275 
  rx_count_old = (oct->droq[0])->max_count;
  #line 1276 
  tx_count_old = (oct->instr_queue[0])->max_count;
  #line 1278 
  if (rx_count == rx_count_old && tx_count == tx_count_old) 
                                                            #line 1279 
                                                            return 0;
  #line 1281 
  ifstate_set_0(lio,16);
  #line 1283 
  if ((int)netif_running(netdev) != 0) {
    #line 1284 
    (*((netdev->netdev_ops)->ndo_stop))(netdev);
    #line 1285 
    stopped = 1;
  }
  #line 1289 
  if (tx_count != tx_count_old) {
    #line 1290 
    octeon_get_conf(oct)->nic_if_cfg[lio->ifidx].num_tx_descs = (unsigned long long)((unsigned short)tx_count);
  }
  #line 1292 
  if (rx_count != rx_count_old) {
    #line 1293 
    octeon_get_conf(oct)->nic_if_cfg[lio->ifidx].num_rx_descs = (unsigned long long)((unsigned short)rx_count);
  }
  #line 1296 
  if (lio_reset_queues(netdev,oct->num_iqs) != 0) 
                                                  #line 1297 
                                                  goto err_lio_reset_queues;
  #line 1299 
  if (stopped != 0) 
                    #line 1300 
                    (*((netdev->netdev_ops)->ndo_open))(netdev);
  #line 1302 
  ifstate_reset_0(lio,16);
  #line 1304 
  return 0;
  #line 1306 
  err_lio_reset_queues: 
                        #line 1306 
  ;
  #line 1307 
  if (tx_count != tx_count_old) {
    #line 1308 
    octeon_get_conf(oct)->nic_if_cfg[lio->ifidx].num_tx_descs = (unsigned long long)((unsigned short)tx_count_old);
  }
  #line 1310 
  if (rx_count != rx_count_old) {
    #line 1311 
    octeon_get_conf(oct)->nic_if_cfg[lio->ifidx].num_rx_descs = (unsigned long long)((unsigned short)rx_count_old);
  }
  #line 1313 
  return -22;
}

#line 1316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static u32 lio_get_msglevel(struct net_device *netdev)
{
  #line 1318 
  struct lio *lio = netdev_priv(netdev);
  #line 1320 
  return lio->msg_enable;
}

#line 1323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static void lio_set_msglevel(struct net_device *netdev, u32 msglvl)
{
  #line 1325 
  struct lio *lio = netdev_priv(netdev);
  #line 1327 
  if (((lio->msg_enable ^ msglvl) & 8192U) != 0U) 
    #line 1328 
    if ((msglvl & 8192U) != 0U) 
                                #line 1329 
                                liquidio_set_feature(netdev,20,(unsigned short)0); else 
                                                                    #line 1332 
                                                                    liquidio_set_feature(netdev,21,(unsigned short)0);
  #line 1336 
  lio->msg_enable = msglvl;
  #line 1337 
  return;
}

#line 1339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static void lio_vf_set_msglevel(struct net_device *netdev, u32 msglvl)
{
  #line 1341 
  struct lio *lio = netdev_priv(netdev);
  #line 1343 
  lio->msg_enable = msglvl;
  #line 1344 
  return;
}

#line 1347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static void lio_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 1352 
  struct lio *lio = netdev_priv(netdev);
  #line 1353 
  struct octeon_device *oct = lio->oct_dev;
  #line 1355 
  pause->autoneg = 0U;
  #line 1357 
  pause->tx_pause = (unsigned int)oct->tx_pause;
  #line 1358 
  pause->rx_pause = (unsigned int)oct->rx_pause;
  #line 1359 
  return;
}

#line 1362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  #line 1369 
  struct octnic_ctrl_pkt nctrl;
  #line 1367 
  struct lio *lio = netdev_priv(netdev);
  #line 1368 
  struct octeon_device *oct = lio->oct_dev;
  #line 1370 
  struct oct_link_info *linfo = & lio->linfo;
  #line 1372 
  int ret = 0;
  #line 1374 
  if ((unsigned int)oct->chip_id != 38658U) 
                                            #line 1375 
                                            return -22;
  #line 1377 
  if ((unsigned int)linfo->link.s.duplex == 0U) 
    #line 1379 
    if (pause->rx_pause != 0U || pause->tx_pause != 0U) 
                                                        #line 1380 
                                                        return -22;
  #line 1384 
  if (pause->autoneg == 1U) 
                            #line 1385 
                            return -22;
  #line 1387 
  memset((void *)(& nctrl),0,328UL);
  #line 1389 
  nctrl.ncmd.u64 = 0ULL;
  #line 1390 
  nctrl.ncmd.s.cmd = (unsigned long long)8U;
  #line 1391 
  nctrl.iq_no = (unsigned long long)lio->linfo.txpciq[0].s.q_no;
  #line 1392 
  nctrl.netpndev = (unsigned long long)netdev;
  #line 1393 
  nctrl.cb_fn = & liquidio_link_ctrl_cmd_completion;
  #line 1395 
  if (pause->rx_pause != 0U) 
                             #line 1397 
                             nctrl.ncmd.s.param1 = (unsigned long long)1U; else 
                                                                    #line 1400 
                                                                    nctrl.ncmd.s.param1 = (unsigned long long)0U;
  #line 1403 
  if (pause->tx_pause != 0U) 
                             #line 1405 
                             nctrl.ncmd.s.param2 = (unsigned long long)1U; else 
                                                                    #line 1408 
                                                                    nctrl.ncmd.s.param2 = (unsigned long long)0U;
  #line 1411 
  ret = octnet_send_nic_ctrl_pkt(lio->oct_dev,& nctrl);
  #line 1412 
  if (ret != 0) {
    #line 1413 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Failed to set pause parameter, ret=%d\n",ret);
    #line 1415 
    return -22;
  }
  #line 1418 
  oct->rx_pause = (int)pause->rx_pause;
  #line 1419 
  oct->tx_pause = (int)pause->tx_pause;
  #line 1421 
  return 0;
}

#line 1425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static void lio_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  #line 1431 
  struct rtnl_link_stats64 lstats;
  #line 1432 
  int j;
  #line 1439 
  int tmp_1;
  #line 1441 
  int tmp_2;
  #line 1443 
  int tmp_3;
  #line 1445 
  int tmp_4;
  #line 1446 
  int tmp_5;
  #line 1451 
  int tmp_6;
  #line 1457 
  int tmp_7;
  #line 1465 
  int tmp_8;
  #line 1478 
  int tmp_9;
  #line 1480 
  int tmp_10;
  #line 1482 
  int tmp_11;
  #line 1484 
  int tmp_12;
  #line 1486 
  int tmp_13;
  #line 1490 
  int tmp_14;
  #line 1493 
  int tmp_15;
  #line 1497 
  int tmp_16;
  #line 1501 
  int tmp_17;
  #line 1505 
  int tmp_18;
  #line 1508 
  int tmp_19;
  #line 1509 
  int tmp_20;
  #line 1513 
  int tmp_21;
  #line 1515 
  int tmp_22;
  #line 1517 
  int tmp_23;
  #line 1519 
  int tmp_24;
  #line 1521 
  int tmp_25;
  #line 1523 
  int tmp_26;
  #line 1525 
  int tmp_27;
  #line 1527 
  int tmp_28;
  #line 1530 
  int tmp_29;
  #line 1532 
  int tmp_30;
  #line 1534 
  int tmp_31;
  #line 1536 
  int tmp_32;
  #line 1542 
  int tmp_33;
  #line 1546 
  int tmp_34;
  #line 1548 
  int tmp_35;
  #line 1549 
  int tmp_36;
  #line 1551 
  int tmp_37;
  #line 1553 
  int tmp_38;
  #line 1555 
  int tmp_39;
  #line 1559 
  int tmp_40;
  #line 1561 
  int tmp_41;
  #line 1565 
  int tmp_42;
  #line 1570 
  int tmp_43;
  #line 1574 
  int tmp_44;
  #line 1580 
  int tmp_45;
  #line 1584 
  int tmp_46;
  #line 1586 
  int tmp_47;
  #line 1588 
  int tmp_48;
  #line 1592 
  int tmp_49;
  #line 1596 
  int tmp_50;
  #line 1600 
  int tmp_51;
  #line 1606 
  int tmp_52;
  #line 1609 
  int tmp_53;
  #line 1613 
  int tmp_54;
  #line 1615 
  int tmp_55;
  #line 1617 
  int tmp_56;
  #line 1619 
  int tmp_57;
  #line 1621 
  int tmp_58;
  #line 1623 
  int tmp_59;
  #line 1625 
  int tmp_60;
  #line 1627 
  int tmp_61;
  #line 1629 
  int tmp_62;
  #line 1631 
  int tmp_63;
  #line 1429 
  struct lio *lio = netdev_priv(netdev);
  #line 1430 
  struct octeon_device *oct_dev = lio->oct_dev;
  #line 1432 
  int i = 0;
  #line 1434 
  if (ifstate_check_1(lio,16) != 0) 
                                    #line 1435 
                                    return;
  #line 1437 
  (*((netdev->netdev_ops)->ndo_get_stats64))(netdev,& lstats);
  #line 1439 
  tmp_1 = i;
  #line 1439 
  i ++;
  #line 1439 
  *(data + (unsigned long)tmp_1) = lstats.rx_packets;
  #line 1441 
  tmp_2 = i;
  #line 1441 
  i ++;
  #line 1441 
  *(data + (unsigned long)tmp_2) = lstats.tx_packets;
  #line 1443 
  tmp_3 = i;
  #line 1443 
  i ++;
  #line 1443 
  *(data + (unsigned long)tmp_3) = lstats.rx_bytes;
  #line 1445 
  tmp_4 = i;
  #line 1445 
  i ++;
  #line 1445 
  *(data + (unsigned long)tmp_4) = lstats.tx_bytes;
  #line 1446 
  tmp_5 = i;
  #line 1446 
  i ++;
  #line 1446 
  *(data + (unsigned long)tmp_5) = (((lstats.rx_errors + oct_dev->link_stats.fromwire.fcs_err) + oct_dev->link_stats.fromwire.jabber_err) + oct_dev->link_stats.fromwire.l2_err) + oct_dev->link_stats.fromwire.frame_err;
  #line 1451 
  tmp_6 = i;
  #line 1451 
  i ++;
  #line 1451 
  *(data + (unsigned long)tmp_6) = lstats.tx_errors;
  #line 1457 
  tmp_7 = i;
  #line 1457 
  i ++;
  #line 1457 
  *(data + (unsigned long)tmp_7) = (((((lstats.rx_dropped + oct_dev->link_stats.fromwire.fifo_err) + oct_dev->link_stats.fromwire.dmac_drop) + oct_dev->link_stats.fromwire.red_drops) + oct_dev->link_stats.fromwire.fw_err_pko) + oct_dev->link_stats.fromwire.fw_err_link) + oct_dev->link_stats.fromwire.fw_err_drop;
  #line 1465 
  tmp_8 = i;
  #line 1465 
  i ++;
  #line 1465 
  *(data + (unsigned long)tmp_8) = ((((((lstats.tx_dropped + oct_dev->link_stats.fromhost.max_collision_fail) + oct_dev->link_stats.fromhost.max_deferral_fail) + oct_dev->link_stats.fromhost.total_collisions) + oct_dev->link_stats.fromhost.fw_err_pko) + oct_dev->link_stats.fromhost.fw_err_link) + oct_dev->link_stats.fromhost.fw_err_drop) + oct_dev->link_stats.fromhost.fw_err_pki;
  #line 1478 
  tmp_9 = i;
  #line 1478 
  i ++;
  #line 1478 
  *(data + (unsigned long)tmp_9) = oct_dev->link_stats.fromhost.fw_total_sent;
  #line 1480 
  tmp_10 = i;
  #line 1480 
  i ++;
  #line 1480 
  *(data + (unsigned long)tmp_10) = oct_dev->link_stats.fromhost.fw_total_fwd;
  #line 1482 
  tmp_11 = i;
  #line 1482 
  i ++;
  #line 1482 
  *(data + (unsigned long)tmp_11) = oct_dev->link_stats.fromhost.fw_err_pko;
  #line 1484 
  tmp_12 = i;
  #line 1484 
  i ++;
  #line 1484 
  *(data + (unsigned long)tmp_12) = oct_dev->link_stats.fromhost.fw_err_pki;
  #line 1486 
  tmp_13 = i;
  #line 1486 
  i ++;
  #line 1486 
  *(data + (unsigned long)tmp_13) = oct_dev->link_stats.fromhost.fw_err_link;
  #line 1490 
  tmp_14 = i;
  #line 1490 
  i ++;
  #line 1490 
  *(data + (unsigned long)tmp_14) = oct_dev->link_stats.fromhost.fw_err_drop;
  #line 1493 
  tmp_15 = i;
  #line 1493 
  i ++;
  #line 1493 
  *(data + (unsigned long)tmp_15) = oct_dev->link_stats.fromhost.fw_tso;
  #line 1497 
  tmp_16 = i;
  #line 1497 
  i ++;
  #line 1497 
  *(data + (unsigned long)tmp_16) = oct_dev->link_stats.fromhost.fw_tso_fwd;
  #line 1501 
  tmp_17 = i;
  #line 1501 
  i ++;
  #line 1501 
  *(data + (unsigned long)tmp_17) = oct_dev->link_stats.fromhost.fw_err_tso;
  #line 1505 
  tmp_18 = i;
  #line 1505 
  i ++;
  #line 1505 
  *(data + (unsigned long)tmp_18) = oct_dev->link_stats.fromhost.fw_tx_vxlan;
  #line 1508 
  tmp_19 = i;
  #line 1508 
  i ++;
  #line 1508 
  *(data + (unsigned long)tmp_19) = oct_dev->link_stats.fromhost.fw_total_mcast_sent;
  #line 1509 
  tmp_20 = i;
  #line 1509 
  i ++;
  #line 1509 
  *(data + (unsigned long)tmp_20) = oct_dev->link_stats.fromhost.fw_total_bcast_sent;
  #line 1513 
  tmp_21 = i;
  #line 1513 
  i ++;
  #line 1513 
  *(data + (unsigned long)tmp_21) = oct_dev->link_stats.fromhost.total_pkts_sent;
  #line 1515 
  tmp_22 = i;
  #line 1515 
  i ++;
  #line 1515 
  *(data + (unsigned long)tmp_22) = oct_dev->link_stats.fromhost.total_bytes_sent;
  #line 1517 
  tmp_23 = i;
  #line 1517 
  i ++;
  #line 1517 
  *(data + (unsigned long)tmp_23) = oct_dev->link_stats.fromhost.mcast_pkts_sent;
  #line 1519 
  tmp_24 = i;
  #line 1519 
  i ++;
  #line 1519 
  *(data + (unsigned long)tmp_24) = oct_dev->link_stats.fromhost.bcast_pkts_sent;
  #line 1521 
  tmp_25 = i;
  #line 1521 
  i ++;
  #line 1521 
  *(data + (unsigned long)tmp_25) = oct_dev->link_stats.fromhost.ctl_sent;
  #line 1523 
  tmp_26 = i;
  #line 1523 
  i ++;
  #line 1523 
  *(data + (unsigned long)tmp_26) = oct_dev->link_stats.fromhost.total_collisions;
  #line 1525 
  tmp_27 = i;
  #line 1525 
  i ++;
  #line 1525 
  *(data + (unsigned long)tmp_27) = oct_dev->link_stats.fromhost.one_collision_sent;
  #line 1527 
  tmp_28 = i;
  #line 1527 
  i ++;
  #line 1527 
  *(data + (unsigned long)tmp_28) = oct_dev->link_stats.fromhost.multi_collision_sent;
  #line 1530 
  tmp_29 = i;
  #line 1530 
  i ++;
  #line 1530 
  *(data + (unsigned long)tmp_29) = oct_dev->link_stats.fromhost.max_collision_fail;
  #line 1532 
  tmp_30 = i;
  #line 1532 
  i ++;
  #line 1532 
  *(data + (unsigned long)tmp_30) = oct_dev->link_stats.fromhost.max_deferral_fail;
  #line 1534 
  tmp_31 = i;
  #line 1534 
  i ++;
  #line 1534 
  *(data + (unsigned long)tmp_31) = oct_dev->link_stats.fromhost.fifo_err;
  #line 1536 
  tmp_32 = i;
  #line 1536 
  i ++;
  #line 1536 
  *(data + (unsigned long)tmp_32) = oct_dev->link_stats.fromhost.runts;
  #line 1542 
  tmp_33 = i;
  #line 1542 
  i ++;
  #line 1542 
  *(data + (unsigned long)tmp_33) = oct_dev->link_stats.fromwire.fw_total_rcvd;
  #line 1546 
  tmp_34 = i;
  #line 1546 
  i ++;
  #line 1546 
  *(data + (unsigned long)tmp_34) = oct_dev->link_stats.fromwire.fw_total_fwd;
  #line 1548 
  tmp_35 = i;
  #line 1548 
  i ++;
  #line 1548 
  *(data + (unsigned long)tmp_35) = oct_dev->link_stats.fromwire.fw_total_mcast;
  #line 1549 
  tmp_36 = i;
  #line 1549 
  i ++;
  #line 1549 
  *(data + (unsigned long)tmp_36) = oct_dev->link_stats.fromwire.fw_total_bcast;
  #line 1551 
  tmp_37 = i;
  #line 1551 
  i ++;
  #line 1551 
  *(data + (unsigned long)tmp_37) = oct_dev->link_stats.fromwire.jabber_err;
  #line 1553 
  tmp_38 = i;
  #line 1553 
  i ++;
  #line 1553 
  *(data + (unsigned long)tmp_38) = oct_dev->link_stats.fromwire.l2_err;
  #line 1555 
  tmp_39 = i;
  #line 1555 
  i ++;
  #line 1555 
  *(data + (unsigned long)tmp_39) = oct_dev->link_stats.fromwire.frame_err;
  #line 1559 
  tmp_40 = i;
  #line 1559 
  i ++;
  #line 1559 
  *(data + (unsigned long)tmp_40) = oct_dev->link_stats.fromwire.fw_err_pko;
  #line 1561 
  tmp_41 = i;
  #line 1561 
  i ++;
  #line 1561 
  *(data + (unsigned long)tmp_41) = oct_dev->link_stats.fromwire.fw_err_link;
  #line 1565 
  tmp_42 = i;
  #line 1565 
  i ++;
  #line 1565 
  *(data + (unsigned long)tmp_42) = oct_dev->link_stats.fromwire.fw_err_drop;
  #line 1570 
  tmp_43 = i;
  #line 1570 
  i ++;
  #line 1570 
  *(data + (unsigned long)tmp_43) = oct_dev->link_stats.fromwire.fw_rx_vxlan;
  #line 1574 
  tmp_44 = i;
  #line 1574 
  i ++;
  #line 1574 
  *(data + (unsigned long)tmp_44) = oct_dev->link_stats.fromwire.fw_rx_vxlan_err;
  #line 1580 
  tmp_45 = i;
  #line 1580 
  i ++;
  #line 1580 
  *(data + (unsigned long)tmp_45) = oct_dev->link_stats.fromwire.fw_lro_pkts;
  #line 1584 
  tmp_46 = i;
  #line 1584 
  i ++;
  #line 1584 
  *(data + (unsigned long)tmp_46) = oct_dev->link_stats.fromwire.fw_lro_octs;
  #line 1586 
  tmp_47 = i;
  #line 1586 
  i ++;
  #line 1586 
  *(data + (unsigned long)tmp_47) = oct_dev->link_stats.fromwire.fw_total_lro;
  #line 1588 
  tmp_48 = i;
  #line 1588 
  i ++;
  #line 1588 
  *(data + (unsigned long)tmp_48) = oct_dev->link_stats.fromwire.fw_lro_aborts;
  #line 1592 
  tmp_49 = i;
  #line 1592 
  i ++;
  #line 1592 
  *(data + (unsigned long)tmp_49) = oct_dev->link_stats.fromwire.fw_lro_aborts_port;
  #line 1596 
  tmp_50 = i;
  #line 1596 
  i ++;
  #line 1596 
  *(data + (unsigned long)tmp_50) = oct_dev->link_stats.fromwire.fw_lro_aborts_seq;
  #line 1600 
  tmp_51 = i;
  #line 1600 
  i ++;
  #line 1600 
  *(data + (unsigned long)tmp_51) = oct_dev->link_stats.fromwire.fw_lro_aborts_tsval;
  #line 1606 
  tmp_52 = i;
  #line 1606 
  i ++;
  #line 1606 
  *(data + (unsigned long)tmp_52) = oct_dev->link_stats.fromwire.fw_lro_aborts_timer;
  #line 1609 
  tmp_53 = i;
  #line 1609 
  i ++;
  #line 1609 
  *(data + (unsigned long)tmp_53) = oct_dev->link_stats.fromwire.fwd_rate;
  #line 1613 
  tmp_54 = i;
  #line 1613 
  i ++;
  #line 1613 
  *(data + (unsigned long)tmp_54) = oct_dev->link_stats.fromwire.total_rcvd;
  #line 1615 
  tmp_55 = i;
  #line 1615 
  i ++;
  #line 1615 
  *(data + (unsigned long)tmp_55) = oct_dev->link_stats.fromwire.bytes_rcvd;
  #line 1617 
  tmp_56 = i;
  #line 1617 
  i ++;
  #line 1617 
  *(data + (unsigned long)tmp_56) = oct_dev->link_stats.fromwire.total_bcst;
  #line 1619 
  tmp_57 = i;
  #line 1619 
  i ++;
  #line 1619 
  *(data + (unsigned long)tmp_57) = oct_dev->link_stats.fromwire.total_mcst;
  #line 1621 
  tmp_58 = i;
  #line 1621 
  i ++;
  #line 1621 
  *(data + (unsigned long)tmp_58) = oct_dev->link_stats.fromwire.runts;
  #line 1623 
  tmp_59 = i;
  #line 1623 
  i ++;
  #line 1623 
  *(data + (unsigned long)tmp_59) = oct_dev->link_stats.fromwire.ctl_rcvd;
  #line 1625 
  tmp_60 = i;
  #line 1625 
  i ++;
  #line 1625 
  *(data + (unsigned long)tmp_60) = oct_dev->link_stats.fromwire.fifo_err;
  #line 1627 
  tmp_61 = i;
  #line 1627 
  i ++;
  #line 1627 
  *(data + (unsigned long)tmp_61) = oct_dev->link_stats.fromwire.dmac_drop;
  #line 1629 
  tmp_62 = i;
  #line 1629 
  i ++;
  #line 1629 
  *(data + (unsigned long)tmp_62) = oct_dev->link_stats.fromwire.fcs_err;
  #line 1631 
  tmp_63 = i;
  #line 1631 
  i ++;
  #line 1631 
  *(data + (unsigned long)tmp_63) = lio->link_changes;
  #line 1633 
  j = 0;
  #line 1633 
  while (1) {
    #line 1633 
    int tmp_76;
    #line 1633 
    if ((unsigned int)oct_dev->chip_id == 38658U) 
                                                  #line 1633 
                                                  tmp_76 = 64; else 
                                                                    #line 1633 
                                                                    tmp_76 = 32;
    #line 1633 
    ;
    #line 1633 
    if (! (tmp_76 > j)) 
                        #line 1633 
                        break;
    {
      #line 1638 
      int tmp_64;
      #line 1640 
      int tmp_65;
      #line 1643 
      int tmp_66;
      #line 1646 
      int tmp_67;
      #line 1649 
      int tmp_68;
      #line 1654 
      int tmp_69;
      #line 1657 
      int tmp_70;
      #line 1660 
      int tmp_71;
      #line 1663 
      int tmp_72;
      #line 1667 
      int tmp_73;
      #line 1669 
      int tmp_74;
      #line 1671 
      int tmp_75;
      #line 1634 
      if (((oct_dev->io_qmask.iq >> j) & 1ULL) == 0ULL) 
                                                        #line 1635 
                                                        goto __Cont;
      #line 1638 
      tmp_64 = i;
      #line 1638 
      i ++;
      #line 1638 
      *(data + (unsigned long)tmp_64) = (oct_dev->instr_queue[j])->stats.tx_done;
      #line 1640 
      tmp_65 = i;
      #line 1640 
      i ++;
      #line 1640 
      *(data + (unsigned long)tmp_65) = (oct_dev->instr_queue[j])->stats.tx_tot_bytes;
      #line 1643 
      tmp_66 = i;
      #line 1643 
      i ++;
      #line 1643 
      *(data + (unsigned long)tmp_66) = (oct_dev->instr_queue[j])->stats.tx_dropped;
      #line 1646 
      tmp_67 = i;
      #line 1646 
      i ++;
      #line 1646 
      *(data + (unsigned long)tmp_67) = (oct_dev->instr_queue[j])->stats.tx_iq_busy;
      #line 1649 
      tmp_68 = i;
      #line 1649 
      i ++;
      #line 1649 
      *(data + (unsigned long)tmp_68) = (oct_dev->instr_queue[j])->stats.sgentry_sent;
      #line 1654 
      tmp_69 = i;
      #line 1654 
      i ++;
      #line 1654 
      *(data + (unsigned long)tmp_69) = (oct_dev->instr_queue[j])->stats.instr_posted;
      #line 1657 
      tmp_70 = i;
      #line 1657 
      i ++;
      #line 1657 
      *(data + (unsigned long)tmp_70) = (oct_dev->instr_queue[j])->stats.instr_processed;
      #line 1660 
      tmp_71 = i;
      #line 1660 
      i ++;
      #line 1660 
      *(data + (unsigned long)tmp_71) = (oct_dev->instr_queue[j])->stats.instr_dropped;
      #line 1663 
      tmp_72 = i;
      #line 1663 
      i ++;
      #line 1663 
      *(data + (unsigned long)tmp_72) = (oct_dev->instr_queue[j])->stats.bytes_sent;
      #line 1667 
      tmp_73 = i;
      #line 1667 
      i ++;
      #line 1667 
      *(data + (unsigned long)tmp_73) = (oct_dev->instr_queue[j])->stats.tx_gso;
      #line 1669 
      tmp_74 = i;
      #line 1669 
      i ++;
      #line 1669 
      *(data + (unsigned long)tmp_74) = (oct_dev->instr_queue[j])->stats.tx_vxlan;
      #line 1671 
      tmp_75 = i;
      #line 1671 
      i ++;
      #line 1671 
      *(data + (unsigned long)tmp_75) = (oct_dev->instr_queue[j])->stats.tx_restart;
    }
    #line 1633 
    __Cont: 
            #line 1633 
    j ++;
  }
  #line 1676 
  j = 0;
  #line 1676 
  while (1) {
    #line 1676 
    int tmp_88;
    #line 1676 
    if ((unsigned int)oct_dev->chip_id == 38658U) 
                                                  #line 1676 
                                                  tmp_88 = 64; else 
                                                                    #line 1676 
                                                                    tmp_88 = 32;
    #line 1676 
    ;
    #line 1676 
    if (! (tmp_88 > j)) 
                        #line 1676 
                        break;
    {
      #line 1682 
      int tmp_77;
      #line 1685 
      int tmp_78;
      #line 1688 
      int tmp_79;
      #line 1691 
      int tmp_80;
      #line 1693 
      int tmp_81;
      #line 1695 
      int tmp_82;
      #line 1699 
      int tmp_83;
      #line 1701 
      int tmp_84;
      #line 1703 
      int tmp_85;
      #line 1706 
      int tmp_86;
      #line 1708 
      int tmp_87;
      #line 1677 
      if (((oct_dev->io_qmask.oq >> j) & 1ULL) == 0ULL) 
                                                        #line 1678 
                                                        goto __Cont_0;
      #line 1682 
      tmp_77 = i;
      #line 1682 
      i ++;
      #line 1682 
      *(data + (unsigned long)tmp_77) = (oct_dev->droq[j])->stats.rx_pkts_received;
      #line 1685 
      tmp_78 = i;
      #line 1685 
      i ++;
      #line 1685 
      *(data + (unsigned long)tmp_78) = (oct_dev->droq[j])->stats.rx_bytes_received;
      #line 1688 
      tmp_79 = i;
      #line 1688 
      i ++;
      #line 1688 
      *(data + (unsigned long)tmp_79) = ((oct_dev->droq[j])->stats.dropped_nomem + (oct_dev->droq[j])->stats.dropped_toomany) + (oct_dev->droq[j])->stats.rx_dropped;
      #line 1691 
      tmp_80 = i;
      #line 1691 
      i ++;
      #line 1691 
      *(data + (unsigned long)tmp_80) = (oct_dev->droq[j])->stats.dropped_nomem;
      #line 1693 
      tmp_81 = i;
      #line 1693 
      i ++;
      #line 1693 
      *(data + (unsigned long)tmp_81) = (oct_dev->droq[j])->stats.dropped_toomany;
      #line 1695 
      tmp_82 = i;
      #line 1695 
      i ++;
      #line 1695 
      *(data + (unsigned long)tmp_82) = (oct_dev->droq[j])->stats.rx_dropped;
      #line 1699 
      tmp_83 = i;
      #line 1699 
      i ++;
      #line 1699 
      *(data + (unsigned long)tmp_83) = (oct_dev->droq[j])->stats.pkts_received;
      #line 1701 
      tmp_84 = i;
      #line 1701 
      i ++;
      #line 1701 
      *(data + (unsigned long)tmp_84) = (oct_dev->droq[j])->stats.bytes_received;
      #line 1703 
      tmp_85 = i;
      #line 1703 
      i ++;
      #line 1703 
      *(data + (unsigned long)tmp_85) = (oct_dev->droq[j])->stats.dropped_nodispatch;
      #line 1706 
      tmp_86 = i;
      #line 1706 
      i ++;
      #line 1706 
      *(data + (unsigned long)tmp_86) = (oct_dev->droq[j])->stats.rx_vxlan;
      #line 1708 
      tmp_87 = i;
      #line 1708 
      i ++;
      #line 1708 
      *(data + (unsigned long)tmp_87) = (oct_dev->droq[j])->stats.rx_alloc_failure;
    }
    #line 1676 
    __Cont_0: 
              #line 1676 
    j ++;
  }
  #line 1711 
  return;
}

#line 1713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static void lio_vf_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  #line 1718 
  struct rtnl_link_stats64 lstats;
  #line 1721 
  int j;
  #line 1721 
  int vj;
  #line 1728 
  int tmp_1;
  #line 1730 
  int tmp_2;
  #line 1732 
  int tmp_3;
  #line 1734 
  int tmp_4;
  #line 1735 
  int tmp_5;
  #line 1736 
  int tmp_6;
  #line 1742 
  int tmp_7;
  #line 1744 
  int tmp_8;
  #line 1747 
  int tmp_9;
  #line 1748 
  int tmp_10;
  #line 1749 
  int tmp_11;
  #line 1750 
  int tmp_12;
  #line 1753 
  int tmp_13;
  #line 1719 
  struct lio *lio = netdev_priv(netdev);
  #line 1720 
  struct octeon_device *oct_dev = lio->oct_dev;
  #line 1721 
  int i = 0;
  #line 1723 
  if (ifstate_check_1(lio,16) != 0) 
                                    #line 1724 
                                    return;
  #line 1726 
  (*((netdev->netdev_ops)->ndo_get_stats64))(netdev,& lstats);
  #line 1728 
  tmp_1 = i;
  #line 1728 
  i ++;
  #line 1728 
  *(data + (unsigned long)tmp_1) = lstats.rx_packets;
  #line 1730 
  tmp_2 = i;
  #line 1730 
  i ++;
  #line 1730 
  *(data + (unsigned long)tmp_2) = lstats.tx_packets;
  #line 1732 
  tmp_3 = i;
  #line 1732 
  i ++;
  #line 1732 
  *(data + (unsigned long)tmp_3) = lstats.rx_bytes;
  #line 1734 
  tmp_4 = i;
  #line 1734 
  i ++;
  #line 1734 
  *(data + (unsigned long)tmp_4) = lstats.tx_bytes;
  #line 1735 
  tmp_5 = i;
  #line 1735 
  i ++;
  #line 1735 
  *(data + (unsigned long)tmp_5) = lstats.rx_errors;
  #line 1736 
  tmp_6 = i;
  #line 1736 
  i ++;
  #line 1736 
  *(data + (unsigned long)tmp_6) = lstats.tx_errors;
  #line 1742 
  tmp_7 = i;
  #line 1742 
  i ++;
  #line 1742 
  *(data + (unsigned long)tmp_7) = lstats.rx_dropped;
  #line 1744 
  tmp_8 = i;
  #line 1744 
  i ++;
  #line 1744 
  *(data + (unsigned long)tmp_8) = lstats.tx_dropped + oct_dev->link_stats.fromhost.fw_err_drop;
  #line 1747 
  tmp_9 = i;
  #line 1747 
  i ++;
  #line 1747 
  *(data + (unsigned long)tmp_9) = oct_dev->link_stats.fromwire.fw_total_mcast;
  #line 1748 
  tmp_10 = i;
  #line 1748 
  i ++;
  #line 1748 
  *(data + (unsigned long)tmp_10) = oct_dev->link_stats.fromhost.fw_total_mcast_sent;
  #line 1749 
  tmp_11 = i;
  #line 1749 
  i ++;
  #line 1749 
  *(data + (unsigned long)tmp_11) = oct_dev->link_stats.fromwire.fw_total_bcast;
  #line 1750 
  tmp_12 = i;
  #line 1750 
  i ++;
  #line 1750 
  *(data + (unsigned long)tmp_12) = oct_dev->link_stats.fromhost.fw_total_bcast_sent;
  #line 1753 
  tmp_13 = i;
  #line 1753 
  i ++;
  #line 1753 
  *(data + (unsigned long)tmp_13) = lio->link_changes;
  #line 1755 
  vj = 0;
  #line 1755 
  while (oct_dev->num_iqs > (unsigned int)vj) {
    {
      #line 1760 
      int tmp_14;
      #line 1762 
      int tmp_15;
      #line 1765 
      int tmp_16;
      #line 1768 
      int tmp_17;
      #line 1771 
      int tmp_18;
      #line 1776 
      int tmp_19;
      #line 1779 
      int tmp_20;
      #line 1782 
      int tmp_21;
      #line 1785 
      int tmp_22;
      #line 1788 
      int tmp_23;
      #line 1790 
      int tmp_24;
      #line 1792 
      int tmp_25;
      #line 1756 
      j = (int)lio->linfo.txpciq[vj].s.q_no;
      #line 1760 
      tmp_14 = i;
      #line 1760 
      i ++;
      #line 1760 
      *(data + (unsigned long)tmp_14) = (oct_dev->instr_queue[j])->stats.tx_done;
      #line 1762 
      tmp_15 = i;
      #line 1762 
      i ++;
      #line 1762 
      *(data + (unsigned long)tmp_15) = (oct_dev->instr_queue[j])->stats.tx_tot_bytes;
      #line 1765 
      tmp_16 = i;
      #line 1765 
      i ++;
      #line 1765 
      *(data + (unsigned long)tmp_16) = (oct_dev->instr_queue[j])->stats.tx_dropped;
      #line 1768 
      tmp_17 = i;
      #line 1768 
      i ++;
      #line 1768 
      *(data + (unsigned long)tmp_17) = (oct_dev->instr_queue[j])->stats.tx_iq_busy;
      #line 1771 
      tmp_18 = i;
      #line 1771 
      i ++;
      #line 1771 
      *(data + (unsigned long)tmp_18) = (oct_dev->instr_queue[j])->stats.sgentry_sent;
      #line 1776 
      tmp_19 = i;
      #line 1776 
      i ++;
      #line 1776 
      *(data + (unsigned long)tmp_19) = (oct_dev->instr_queue[j])->stats.instr_posted;
      #line 1779 
      tmp_20 = i;
      #line 1779 
      i ++;
      #line 1779 
      *(data + (unsigned long)tmp_20) = (oct_dev->instr_queue[j])->stats.instr_processed;
      #line 1782 
      tmp_21 = i;
      #line 1782 
      i ++;
      #line 1782 
      *(data + (unsigned long)tmp_21) = (oct_dev->instr_queue[j])->stats.instr_dropped;
      #line 1785 
      tmp_22 = i;
      #line 1785 
      i ++;
      #line 1785 
      *(data + (unsigned long)tmp_22) = (oct_dev->instr_queue[j])->stats.bytes_sent;
      #line 1788 
      tmp_23 = i;
      #line 1788 
      i ++;
      #line 1788 
      *(data + (unsigned long)tmp_23) = (oct_dev->instr_queue[j])->stats.tx_gso;
      #line 1790 
      tmp_24 = i;
      #line 1790 
      i ++;
      #line 1790 
      *(data + (unsigned long)tmp_24) = (oct_dev->instr_queue[j])->stats.tx_vxlan;
      #line 1792 
      tmp_25 = i;
      #line 1792 
      i ++;
      #line 1792 
      *(data + (unsigned long)tmp_25) = (oct_dev->instr_queue[j])->stats.tx_restart;
    }
    #line 1755 
    vj ++;
  }
  #line 1797 
  vj = 0;
  #line 1797 
  while (oct_dev->num_oqs > (unsigned int)vj) {
    {
      #line 1802 
      int tmp_26;
      #line 1805 
      int tmp_27;
      #line 1807 
      int tmp_28;
      #line 1810 
      int tmp_29;
      #line 1811 
      int tmp_30;
      #line 1812 
      int tmp_31;
      #line 1815 
      int tmp_32;
      #line 1816 
      int tmp_33;
      #line 1817 
      int tmp_34;
      #line 1820 
      int tmp_35;
      #line 1821 
      int tmp_36;
      #line 1798 
      j = (int)lio->linfo.rxpciq[vj].s.q_no;
      #line 1802 
      tmp_26 = i;
      #line 1802 
      i ++;
      #line 1802 
      *(data + (unsigned long)tmp_26) = (oct_dev->droq[j])->stats.rx_pkts_received;
      #line 1805 
      tmp_27 = i;
      #line 1805 
      i ++;
      #line 1805 
      *(data + (unsigned long)tmp_27) = (oct_dev->droq[j])->stats.rx_bytes_received;
      #line 1807 
      tmp_28 = i;
      #line 1807 
      i ++;
      #line 1807 
      *(data + (unsigned long)tmp_28) = ((oct_dev->droq[j])->stats.dropped_nomem + (oct_dev->droq[j])->stats.dropped_toomany) + (oct_dev->droq[j])->stats.rx_dropped;
      #line 1810 
      tmp_29 = i;
      #line 1810 
      i ++;
      #line 1810 
      *(data + (unsigned long)tmp_29) = (oct_dev->droq[j])->stats.dropped_nomem;
      #line 1811 
      tmp_30 = i;
      #line 1811 
      i ++;
      #line 1811 
      *(data + (unsigned long)tmp_30) = (oct_dev->droq[j])->stats.dropped_toomany;
      #line 1812 
      tmp_31 = i;
      #line 1812 
      i ++;
      #line 1812 
      *(data + (unsigned long)tmp_31) = (oct_dev->droq[j])->stats.rx_dropped;
      #line 1815 
      tmp_32 = i;
      #line 1815 
      i ++;
      #line 1815 
      *(data + (unsigned long)tmp_32) = (oct_dev->droq[j])->stats.pkts_received;
      #line 1816 
      tmp_33 = i;
      #line 1816 
      i ++;
      #line 1816 
      *(data + (unsigned long)tmp_33) = (oct_dev->droq[j])->stats.bytes_received;
      #line 1817 
      tmp_34 = i;
      #line 1817 
      i ++;
      #line 1817 
      *(data + (unsigned long)tmp_34) = (oct_dev->droq[j])->stats.dropped_nodispatch;
      #line 1820 
      tmp_35 = i;
      #line 1820 
      i ++;
      #line 1820 
      *(data + (unsigned long)tmp_35) = (oct_dev->droq[j])->stats.rx_vxlan;
      #line 1821 
      tmp_36 = i;
      #line 1821 
      i ++;
      #line 1821 
      *(data + (unsigned long)tmp_36) = (oct_dev->droq[j])->stats.rx_alloc_failure;
    }
    #line 1797 
    vj ++;
  }
  #line 1824 
  return;
}

#line 1826  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static void lio_get_priv_flags_strings(struct lio *lio, u8 *data)
{
  #line 1829 
  int i;
  #line 1828 
  struct octeon_device *oct_dev = lio->oct_dev;
  #line 1831 
  switch ((int)oct_dev->chip_id) {
    #line 1832 
    case 38658: 
                #line 1832 
    ;
    #line 1833 
    case 38674: 
                #line 1833 
    ;
    #line 1834 
    i = 0;
    #line 1834 
    while (1) {
      #line 1834 
      break;
      #line 1835 
      sprintf((char *)data,(char *)"%s",(char *)(& oct_priv_flags_strings[i]));
      #line 1836 
      data += 32U;
      #line 1834 
      i ++;
    }
    #line 1838 
    break;
    #line 1839 
    case 145: 
              #line 1839 
    ;
    #line 1840 
    case 146: 
              #line 1840 
    ;
    #line 1841 
    break;
    #line 1842 
    default: 
             #line 1842 
    ;
    #line 1843 
    if ((lio->msg_enable & 1U) != 0U) 
                                      #line 1843 
                                      netdev_info(lio->netdev,(char *)"Unknown Chip !!\n");
    #line 1844 
    break;
  }
  #line 1846 
  return;
}

#line 1848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static void lio_get_strings(struct net_device *netdev, u32 stringset, u8 *data)
{
  #line 1852 
  int num_iq_stats;
  #line 1852 
  int num_oq_stats;
  #line 1852 
  int i;
  #line 1852 
  int j;
  #line 1853 
  int num_stats;
  #line 1850 
  struct lio *lio = netdev_priv(netdev);
  #line 1851 
  struct octeon_device *oct_dev = lio->oct_dev;
  #line 1855 
  switch (stringset) {
    #line 1856 
    case (u32)1: 
                 #line 1856 
    ;
    #line 1857 
    num_stats = 63;
    #line 1858 
    j = 0;
    #line 1858 
    while (j < num_stats) {
      #line 1859 
      sprintf((char *)data,(char *)"%s",(char *)(& oct_stats_strings[j]));
      #line 1860 
      data += 32U;
      #line 1858 
      j ++;
    }
    #line 1863 
    num_iq_stats = 12;
    #line 1864 
    i = 0;
    #line 1864 
    while (1) {
      #line 1864 
      int tmp_0;
      #line 1864 
      if ((unsigned int)oct_dev->chip_id == 38658U) 
                                                    #line 1864 
                                                    tmp_0 = 64; else 
                                                                  #line 1864 
                                                                  tmp_0 = 32;
      #line 1864 
      ;
      #line 1864 
      if (! (tmp_0 > i)) 
                         #line 1864 
                         break;
      #line 1865 
      if (((oct_dev->io_qmask.iq >> i) & 1ULL) == 0ULL) 
                                                        #line 1866 
                                                        goto __Cont;
      #line 1867 
      j = 0;
      #line 1867 
      while (j < num_iq_stats) {
        #line 1868 
        sprintf((char *)data,(char *)"tx-%d-%s",i,(char *)(& oct_iq_stats_strings[j]));
        #line 1870 
        data += 32U;
        #line 1867 
        j ++;
      }
      #line 1864 
      __Cont: 
              #line 1864 
      i ++;
    }
    #line 1874 
    num_oq_stats = 11;
    #line 1875 
    i = 0;
    #line 1875 
    while (1) {
      #line 1875 
      int tmp_1;
      #line 1875 
      if ((unsigned int)oct_dev->chip_id == 38658U) 
                                                    #line 1875 
                                                    tmp_1 = 64; else 
                                                                  #line 1875 
                                                                  tmp_1 = 32;
      #line 1875 
      ;
      #line 1875 
      if (! (tmp_1 > i)) 
                         #line 1875 
                         break;
      #line 1876 
      if (((oct_dev->io_qmask.oq >> i) & 1ULL) == 0ULL) 
                                                        #line 1877 
                                                        goto __Cont_0;
      #line 1878 
      j = 0;
      #line 1878 
      while (j < num_oq_stats) {
        #line 1879 
        sprintf((char *)data,(char *)"rx-%d-%s",i,(char *)(& oct_droq_stats_strings[j]));
        #line 1881 
        data += 32U;
        #line 1878 
        j ++;
      }
      #line 1875 
      __Cont_0: 
                #line 1875 
      i ++;
    }
    #line 1884 
    break;
    #line 1886 
    case (u32)2: 
                 #line 1886 
    ;
    #line 1887 
    lio_get_priv_flags_strings(lio,data);
    #line 1888 
    break;
    #line 1889 
    default: 
             #line 1889 
    ;
    #line 1890 
    if ((lio->msg_enable & 1U) != 0U) 
                                      #line 1890 
                                      netdev_info(lio->netdev,(char *)"Unknown Stringset !!\n");
    #line 1891 
    break;
  }
  #line 1893 
  return;
}

#line 1895  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static void lio_vf_get_strings(struct net_device *netdev, u32 stringset, u8 *data)
{
  #line 1898 
  int num_iq_stats;
  #line 1898 
  int num_oq_stats;
  #line 1898 
  int i;
  #line 1898 
  int j;
  #line 1901 
  int num_stats;
  #line 1899 
  struct lio *lio = netdev_priv(netdev);
  #line 1900 
  struct octeon_device *oct_dev = lio->oct_dev;
  #line 1903 
  switch (stringset) {
    #line 1904 
    case (u32)1: 
                 #line 1904 
    ;
    #line 1905 
    num_stats = 13;
    #line 1906 
    j = 0;
    #line 1906 
    while (j < num_stats) {
      #line 1907 
      sprintf((char *)data,(char *)"%s",(char *)(& oct_vf_stats_strings[j]));
      #line 1908 
      data += 32U;
      #line 1906 
      j ++;
    }
    #line 1911 
    num_iq_stats = 12;
    #line 1912 
    i = 0;
    #line 1912 
    while (1) {
      #line 1912 
      int tmp_0;
      #line 1912 
      if ((unsigned int)oct_dev->chip_id == 38658U) 
                                                    #line 1912 
                                                    tmp_0 = 64; else 
                                                                  #line 1912 
                                                                  tmp_0 = 32;
      #line 1912 
      ;
      #line 1912 
      if (! (tmp_0 > i)) 
                         #line 1912 
                         break;
      #line 1913 
      if (((oct_dev->io_qmask.iq >> i) & 1ULL) == 0ULL) 
                                                        #line 1914 
                                                        goto __Cont;
      #line 1915 
      j = 0;
      #line 1915 
      while (j < num_iq_stats) {
        #line 1916 
        sprintf((char *)data,(char *)"tx-%d-%s",i,(char *)(& oct_iq_stats_strings[j]));
        #line 1918 
        data += 32U;
        #line 1915 
        j ++;
      }
      #line 1912 
      __Cont: 
              #line 1912 
      i ++;
    }
    #line 1922 
    num_oq_stats = 11;
    #line 1923 
    i = 0;
    #line 1923 
    while (1) {
      #line 1923 
      int tmp_1;
      #line 1923 
      if ((unsigned int)oct_dev->chip_id == 38658U) 
                                                    #line 1923 
                                                    tmp_1 = 64; else 
                                                                  #line 1923 
                                                                  tmp_1 = 32;
      #line 1923 
      ;
      #line 1923 
      if (! (tmp_1 > i)) 
                         #line 1923 
                         break;
      #line 1924 
      if (((oct_dev->io_qmask.oq >> i) & 1ULL) == 0ULL) 
                                                        #line 1925 
                                                        goto __Cont_0;
      #line 1926 
      j = 0;
      #line 1926 
      while (j < num_oq_stats) {
        #line 1927 
        sprintf((char *)data,(char *)"rx-%d-%s",i,(char *)(& oct_droq_stats_strings[j]));
        #line 1929 
        data += 32U;
        #line 1926 
        j ++;
      }
      #line 1923 
      __Cont_0: 
                #line 1923 
      i ++;
    }
    #line 1932 
    break;
    #line 1934 
    case (u32)2: 
                 #line 1934 
    ;
    #line 1935 
    lio_get_priv_flags_strings(lio,data);
    #line 1936 
    break;
    #line 1937 
    default: 
             #line 1937 
    ;
    #line 1938 
    if ((lio->msg_enable & 1U) != 0U) 
                                      #line 1938 
                                      netdev_info(lio->netdev,(char *)"Unknown Stringset !!\n");
    #line 1939 
    break;
  }
  #line 1941 
  return;
}

#line 1943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_get_priv_flags_ss_count(struct lio *lio)
{
  #line 1945 
  struct octeon_device *oct_dev = lio->oct_dev;
  #line 1947 
  switch ((int)oct_dev->chip_id) {
    #line 1948 
    case 38658: 
                #line 1948 
    ;
    #line 1949 
    case 38674: 
                #line 1949 
    ;
    #line 1950 
    return 0;
    #line 1951 
    case 145: 
              #line 1951 
    ;
    #line 1952 
    case 146: 
              #line 1952 
    ;
    #line 1953 
    return -95;
    #line 1954 
    default: 
             #line 1954 
    ;
    #line 1955 
    if ((lio->msg_enable & 1U) != 0U) 
                                      #line 1955 
                                      netdev_info(lio->netdev,(char *)"Unknown Chip !!\n");
    #line 1956 
    return -95;
  }
}

#line 1960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_get_sset_count(struct net_device *netdev, int sset)
{
  #line 1962 
  struct lio *lio = netdev_priv(netdev);
  #line 1963 
  struct octeon_device *oct_dev = lio->oct_dev;
  #line 1965 
  switch (sset) {
    #line 1966 
    case 1: 
            #line 1966 
    ;
    #line 1968 
    return (int)((oct_dev->num_iqs * 12U + oct_dev->num_oqs * 11U) + 63U);
    #line 1970 
    case 2: 
            #line 1970 
    ;
    #line 1971 
    return lio_get_priv_flags_ss_count(lio);
    #line 1972 
    default: 
             #line 1972 
    ;
    #line 1973 
    return -95;
  }
}

#line 1977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_vf_get_sset_count(struct net_device *netdev, int sset)
{
  #line 1979 
  struct lio *lio = netdev_priv(netdev);
  #line 1980 
  struct octeon_device *oct_dev = lio->oct_dev;
  #line 1982 
  switch (sset) {
    #line 1983 
    case 1: 
            #line 1983 
    ;
    #line 1985 
    return (int)((oct_dev->num_iqs * 12U + oct_dev->num_oqs * 11U) + 13U);
    #line 1987 
    case 2: 
            #line 1987 
    ;
    #line 1988 
    return lio_get_priv_flags_ss_count(lio);
    #line 1989 
    default: 
             #line 1989 
    ;
    #line 1990 
    return -95;
  }
}

#line 1995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int octnet_get_intrmod_cfg(struct lio *lio, struct oct_intrmod_cfg *intr_cfg)
{
  #line 1998 
  struct octeon_soft_command *sc;
  #line 1999 
  struct oct_intrmod_resp *resp;
  #line 2000 
  int retval;
  #line 2001 
  struct octeon_device *oct_dev = lio->oct_dev;
  #line 2004 
  sc = octeon_alloc_soft_command(oct_dev,0U,128U,0U);
  #line 2009 
  if (sc == (struct octeon_soft_command *)0) 
                                             #line 2010 
                                             return -12;
  #line 2012 
  resp = (struct oct_intrmod_resp *)sc->virtrptr;
  #line 2013 
  memset((void *)resp,0,128UL);
  #line 2015 
  sc->iq_no = (unsigned int)lio->linfo.txpciq[0].s.q_no;
  #line 2017 
  octeon_prepare_soft_command(oct_dev,sc,(unsigned char)1,(unsigned char)11,0U,0ULL,0ULL);
  #line 2020 
  __init_completion(& sc->complete);
  #line 2021 
  sc->sc_status = 1U;
  #line 2023 
  retval = octeon_send_soft_command(oct_dev,sc);
  #line 2024 
  if (retval == -1) {
    #line 2025 
    octeon_free_soft_command(oct_dev,sc);
    #line 2026 
    return -22;
  }
  #line 2032 
  retval = wait_for_sc_completion_timeout_2(oct_dev,sc,0UL);
  #line 2033 
  if (retval != 0) 
                   #line 2034 
                   return -19;
  #line 2036 
  if (resp->status != 0ULL) {
    #line 2037 
    _dev_err(& (oct_dev->pci_dev)->dev,(char *)"Get interrupt moderation parameters failed\n");
    {
      #line 2040 
      union __anonunion___u_6853 __u = {.__val = 1};
      #line 2039 
      __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
      #line 2039 
      int tmp = __u.__val;
    }
    #line 2040 
    return -19;
  }
  #line 2043 
  octeon_swap_8B_data((u64 *)(& resp->intrmod),14U);
  #line 2045 
  memcpy((void *)intr_cfg,(void *)(& resp->intrmod),112UL);
  {
    #line 2047 
    union __anonunion___u_6855 __u_0 = {.__val = 1};
    #line 2046 
    __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_0.__c),4);
    #line 2046 
    int tmp_3 = __u_0.__val;
  }
  #line 2048 
  return 0;
}

#line 2052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int octnet_set_intrmod_cfg(struct lio *lio, struct oct_intrmod_cfg *intr_cfg)
{
  #line 2055 
  struct octeon_soft_command *sc;
  #line 2056 
  struct oct_intrmod_cfg *cfg;
  #line 2057 
  int retval;
  #line 2058 
  struct octeon_device *oct_dev = lio->oct_dev;
  #line 2061 
  sc = octeon_alloc_soft_command(oct_dev,112U,16U,0U);
  #line 2066 
  if (sc == (struct octeon_soft_command *)0) 
                                             #line 2067 
                                             return -12;
  #line 2069 
  cfg = (struct oct_intrmod_cfg *)sc->virtdptr;
  #line 2071 
  memcpy((void *)cfg,(void *)intr_cfg,112UL);
  #line 2072 
  octeon_swap_8B_data((u64 *)cfg,14U);
  #line 2074 
  sc->iq_no = (unsigned int)lio->linfo.txpciq[0].s.q_no;
  #line 2076 
  octeon_prepare_soft_command(oct_dev,sc,(unsigned char)1,(unsigned char)8,0U,0ULL,0ULL);
  #line 2079 
  __init_completion(& sc->complete);
  #line 2080 
  sc->sc_status = 1U;
  #line 2082 
  retval = octeon_send_soft_command(oct_dev,sc);
  #line 2083 
  if (retval == -1) {
    #line 2084 
    octeon_free_soft_command(oct_dev,sc);
    #line 2085 
    return -22;
  }
  #line 2091 
  retval = wait_for_sc_completion_timeout_2(oct_dev,sc,0UL);
  #line 2092 
  if (retval != 0) 
                   #line 2093 
                   return retval;
  #line 2095 
  retval = (int)sc->sc_status;
  #line 2096 
  if (retval == 0) {
    #line 2097 
    char *tmp;
    #line 2097 
    if (intr_cfg->rx_enable != 0ULL) 
                                     #line 2097 
                                     tmp = (char *)"enabled"; else 
                                                                   #line 2097 
                                                                   tmp = (char *)"disabled";
    #line 2097 
    ;
    #line 2097 
    _dev_info(& (oct_dev->pci_dev)->dev,(char *)"Rx-Adaptive Interrupt moderation %s\n",tmp);
    {
      #line 2102 
      union __anonunion___u_6857 __u = {.__val = 1};
      #line 2101 
      __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
      #line 2101 
      int tmp_2 = __u.__val;
    }
    #line 2102 
    return 0;
  }
  #line 2105 
  _dev_err(& (oct_dev->pci_dev)->dev,(char *)"intrmod config failed. Status: %x\n",retval);
  {
    #line 2108 
    union __anonunion___u_6859 __u_0 = {.__val = 1};
    #line 2107 
    __write_once_size((void *)(& sc->caller_is_done),(void *)(& __u_0.__c),4);
    #line 2107 
    int tmp_4 = __u_0.__val;
  }
  #line 2108 
  return -19;
}

#line 2111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_get_intr_coalesce(struct net_device *netdev, struct ethtool_coalesce *intr_coal)
{
  #line 2116 
  struct octeon_instr_queue *iq;
  #line 2117 
  struct oct_intrmod_cfg intrmod_cfg;
  #line 2114 
  struct lio *lio = netdev_priv(netdev);
  #line 2115 
  struct octeon_device *oct = lio->oct_dev;
  #line 2119 
  if (octnet_get_intrmod_cfg(lio,& intrmod_cfg) != 0) 
                                                      #line 2120 
                                                      return -19;
  #line 2122 
  switch ((int)oct->chip_id) {
    #line 2123 
    case 38658: 
                #line 2123 
    ;
    #line 2124 
    case 38674: 
                #line 2124 
    ;
    #line 2125 
    if (intrmod_cfg.rx_enable == 0ULL) {
      #line 2126 
      intr_coal->rx_coalesce_usecs = oct->rx_coalesce_usecs;
      #line 2127 
      intr_coal->rx_max_coalesced_frames = oct->rx_max_coalesced_frames;
    }
    #line 2130 
    if (intrmod_cfg.tx_enable == 0ULL) 
                                       #line 2131 
                                       intr_coal->tx_max_coalesced_frames = oct->tx_max_coalesced_frames;
    #line 2133 
    break;
    #line 2135 
    case 145: 
              #line 2135 
    ;
    #line 2136 
    case 146: 
              #line 2136 
    ;
    {
      #line 2137 
      struct octeon_cn6xxx *cn6xxx = (struct octeon_cn6xxx *)oct->chip;
      #line 2140 
      if (intrmod_cfg.rx_enable == 0ULL) {
        #line 2141 
        intr_coal->rx_coalesce_usecs = (unsigned int)(cn6xxx->conf)->oq.oq_intr_time;
        #line 2143 
        intr_coal->rx_max_coalesced_frames = (unsigned int)(cn6xxx->conf)->oq.oq_intr_pkt;
      }
      #line 2146 
      iq = oct->instr_queue[(int)lio->linfo.txpciq[0].s.q_no];
      #line 2147 
      intr_coal->tx_max_coalesced_frames = iq->fill_threshold;
      #line 2148 
      break;
    }
    #line 2150 
    default: 
             #line 2150 
    ;
    #line 2151 
    if ((lio->msg_enable & 1U) != 0U) 
                                      #line 2151 
                                      netdev_info(lio->netdev,(char *)"Unknown Chip !!\n");
    #line 2152 
    return -22;
  }
  #line 2154 
  if (intrmod_cfg.rx_enable != 0ULL) {
    #line 2155 
    intr_coal->use_adaptive_rx_coalesce = (unsigned int)intrmod_cfg.rx_enable;
    #line 2157 
    intr_coal->rate_sample_interval = (unsigned int)intrmod_cfg.check_intrvl;
    #line 2159 
    intr_coal->pkt_rate_high = (unsigned int)intrmod_cfg.maxpkt_ratethr;
    #line 2161 
    intr_coal->pkt_rate_low = (unsigned int)intrmod_cfg.minpkt_ratethr;
    #line 2163 
    intr_coal->rx_max_coalesced_frames_high = (unsigned int)intrmod_cfg.rx_maxcnt_trigger;
    #line 2165 
    intr_coal->rx_coalesce_usecs_high = (unsigned int)intrmod_cfg.rx_maxtmr_trigger;
    #line 2167 
    intr_coal->rx_coalesce_usecs_low = (unsigned int)intrmod_cfg.rx_mintmr_trigger;
    #line 2169 
    intr_coal->rx_max_coalesced_frames_low = (unsigned int)intrmod_cfg.rx_mincnt_trigger;
  }
  #line 2172 
  if (((unsigned int)oct->chip_id == 38658U || (unsigned int)oct->chip_id == 38674U) && intrmod_cfg.tx_enable != 0ULL) {
    #line 2174 
    intr_coal->use_adaptive_tx_coalesce = (unsigned int)intrmod_cfg.tx_enable;
    #line 2176 
    intr_coal->tx_max_coalesced_frames_high = (unsigned int)intrmod_cfg.tx_maxcnt_trigger;
    #line 2178 
    intr_coal->tx_max_coalesced_frames_low = (unsigned int)intrmod_cfg.tx_mincnt_trigger;
  }
  #line 2181 
  return 0;
}

#line 2185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int oct_cfg_adaptive_intr(struct lio *lio, struct oct_intrmod_cfg *intrmod_cfg, struct ethtool_coalesce *intr_coal)
{
  #line 2189 
  int ret = 0;
  #line 2191 
  if (intrmod_cfg->rx_enable != 0ULL || intrmod_cfg->tx_enable != 0ULL) {
    #line 2192 
    intrmod_cfg->check_intrvl = (unsigned long long)intr_coal->rate_sample_interval;
    #line 2193 
    intrmod_cfg->maxpkt_ratethr = (unsigned long long)intr_coal->pkt_rate_high;
    #line 2194 
    intrmod_cfg->minpkt_ratethr = (unsigned long long)intr_coal->pkt_rate_low;
  }
  #line 2196 
  if (intrmod_cfg->rx_enable != 0ULL) {
    #line 2197 
    intrmod_cfg->rx_maxcnt_trigger = (unsigned long long)intr_coal->rx_max_coalesced_frames_high;
    #line 2199 
    intrmod_cfg->rx_maxtmr_trigger = (unsigned long long)intr_coal->rx_coalesce_usecs_high;
    #line 2201 
    intrmod_cfg->rx_mintmr_trigger = (unsigned long long)intr_coal->rx_coalesce_usecs_low;
    #line 2203 
    intrmod_cfg->rx_mincnt_trigger = (unsigned long long)intr_coal->rx_max_coalesced_frames_low;
  }
  #line 2206 
  if (intrmod_cfg->tx_enable != 0ULL) {
    #line 2207 
    intrmod_cfg->tx_maxcnt_trigger = (unsigned long long)intr_coal->tx_max_coalesced_frames_high;
    #line 2209 
    intrmod_cfg->tx_mincnt_trigger = (unsigned long long)intr_coal->tx_max_coalesced_frames_low;
  }
  #line 2213 
  ret = octnet_set_intrmod_cfg(lio,intrmod_cfg);
  #line 2215 
  return ret;
}

#line 2219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int oct_cfg_rx_intrcnt(struct lio *lio, struct oct_intrmod_cfg *intrmod, struct ethtool_coalesce *intr_coal)
{
  #line 2224 
  u32 rx_max_coalesced_frames;
  #line 2223 
  struct octeon_device *oct = lio->oct_dev;
  #line 2227 
  switch ((int)oct->chip_id) {
    #line 2228 
    case 145: 
              #line 2228 
    ;
    #line 2229 
    case 146: 
              #line 2229 
    ;
    {
      #line 2230 
      struct octeon_cn6xxx *cn6xxx = (struct octeon_cn6xxx *)oct->chip;
      #line 2233 
      if (intr_coal->rx_max_coalesced_frames == 0U) 
                                                    #line 2234 
                                                    rx_max_coalesced_frames = 64U; else 
                                                                    #line 2236 
                                                                    rx_max_coalesced_frames = intr_coal->rx_max_coalesced_frames;
      #line 2238 
      writel(rx_max_coalesced_frames,(void *)(oct->mmio[0].hw_addr + 4384U));
      #line 2240 
      (cn6xxx->conf)->oq.oq_intr_pkt = (unsigned long long)((unsigned short)rx_max_coalesced_frames);
      #line 2241 
      break;
    }
    #line 2243 
    case 38658: 
                #line 2243 
    ;
    {
      #line 2244 
      int q_no;
      #line 2246 
      if (intr_coal->rx_max_coalesced_frames == 0U) 
                                                    #line 2247 
                                                    rx_max_coalesced_frames = (unsigned int)intrmod->rx_frames; else 
                                                                    #line 2249 
                                                                    rx_max_coalesced_frames = intr_coal->rx_max_coalesced_frames;
      #line 2251 
      q_no = 0;
      #line 2251 
      while (oct->num_oqs > (unsigned int)q_no) {
        {
          #line 2252 
          q_no = (int)(oct->sriov_info.pf_srn + (unsigned int)q_no);
          #line 2253 
          ;
          #line 2253 
          ;
          #line 2253 
          writeq((readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072 + 65696))) & 18014394214514688ULL) | (unsigned long long)(rx_max_coalesced_frames + 4294967295U),(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072 + 65696)));
        }
        #line 2251 
        q_no ++;
      }
      #line 2261 
      intrmod->rx_frames = (unsigned long long)rx_max_coalesced_frames;
      #line 2262 
      oct->rx_max_coalesced_frames = rx_max_coalesced_frames;
      #line 2263 
      break;
    }
    #line 2265 
    case 38674: 
                #line 2265 
    ;
    {
      #line 2266 
      int q_no_0;
      #line 2268 
      if (intr_coal->rx_max_coalesced_frames == 0U) 
                                                    #line 2269 
                                                    rx_max_coalesced_frames = (unsigned int)intrmod->rx_frames; else 
                                                                    #line 2271 
                                                                    rx_max_coalesced_frames = intr_coal->rx_max_coalesced_frames;
      #line 2273 
      q_no_0 = 0;
      #line 2273 
      while (oct->num_oqs > (unsigned int)q_no_0) {
        #line 2274 
        ;
        #line 2274 
        ;
        #line 2274 
        writeq((readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no_0 * 131072 + 65696))) & 18014394214514688ULL) | (unsigned long long)(rx_max_coalesced_frames + 4294967295U),(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no_0 * 131072 + 65696)));
        #line 2273 
        q_no_0 ++;
      }
      #line 2282 
      intrmod->rx_frames = (unsigned long long)rx_max_coalesced_frames;
      #line 2283 
      oct->rx_max_coalesced_frames = rx_max_coalesced_frames;
      #line 2284 
      break;
    }
    #line 2286 
    default: 
             #line 2286 
    ;
    #line 2287 
    return -22;
  }
  #line 2289 
  return 0;
}

#line 2292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int oct_cfg_rx_intrtime(struct lio *lio, struct oct_intrmod_cfg *intrmod, struct ethtool_coalesce *intr_coal)
{
  #line 2297 
  u32 time_threshold;
  #line 2297 
  u32 rx_coalesce_usecs;
  #line 2296 
  struct octeon_device *oct = lio->oct_dev;
  #line 2300 
  switch ((int)oct->chip_id) {
    #line 2301 
    case 145: 
              #line 2301 
    ;
    #line 2302 
    case 146: 
              #line 2302 
    ;
    {
      #line 2303 
      struct octeon_cn6xxx *cn6xxx = (struct octeon_cn6xxx *)oct->chip;
      #line 2305 
      if (intr_coal->rx_coalesce_usecs == 0U) 
                                              #line 2306 
                                              rx_coalesce_usecs = 100U; else 
                                                                    #line 2308 
                                                                    rx_coalesce_usecs = intr_coal->rx_coalesce_usecs;
      #line 2310 
      time_threshold = lio_cn6xxx_get_oq_ticks(oct,rx_coalesce_usecs);
      #line 2312 
      writel(time_threshold,(void *)(oct->mmio[0].hw_addr + 4388U));
      #line 2316 
      (cn6xxx->conf)->oq.oq_intr_time = (unsigned long long)((unsigned short)rx_coalesce_usecs);
      #line 2317 
      break;
    }
    #line 2319 
    case 38658: 
                #line 2319 
    ;
    {
      #line 2320 
      u64 time_threshold_0;
      #line 2321 
      int q_no;
      #line 2323 
      if (intr_coal->rx_coalesce_usecs == 0U) 
                                              #line 2324 
                                              rx_coalesce_usecs = (unsigned int)intrmod->rx_usecs; else 
                                                                    #line 2326 
                                                                    rx_coalesce_usecs = intr_coal->rx_coalesce_usecs;
      #line 2327 
      time_threshold_0 = (unsigned long long)cn23xx_pf_get_oq_ticks(oct,rx_coalesce_usecs);
      #line 2329 
      q_no = 0;
      #line 2329 
      while (oct->num_oqs > (unsigned int)q_no) {
        #line 2330 
        q_no = (int)(oct->sriov_info.pf_srn + (unsigned int)q_no);
        #line 2331 
        writeq(intrmod->rx_frames | (time_threshold_0 << 32),(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072 + 65696)));
        #line 2329 
        q_no ++;
      }
      #line 2337 
      intrmod->rx_usecs = (unsigned long long)rx_coalesce_usecs;
      #line 2338 
      oct->rx_coalesce_usecs = rx_coalesce_usecs;
      #line 2339 
      break;
    }
    #line 2341 
    case 38674: 
                #line 2341 
    ;
    {
      #line 2342 
      u64 time_threshold_1;
      #line 2343 
      int q_no_0;
      #line 2345 
      if (intr_coal->rx_coalesce_usecs == 0U) 
                                              #line 2346 
                                              rx_coalesce_usecs = (unsigned int)intrmod->rx_usecs; else 
                                                                    #line 2348 
                                                                    rx_coalesce_usecs = intr_coal->rx_coalesce_usecs;
      #line 2350 
      time_threshold_1 = (unsigned long long)cn23xx_vf_get_oq_ticks(oct,rx_coalesce_usecs);
      #line 2352 
      q_no_0 = 0;
      #line 2352 
      while (oct->num_oqs > (unsigned int)q_no_0) {
        #line 2353 
        writeq(intrmod->rx_frames | (time_threshold_1 << 32),(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no_0 * 131072 + 65696)));
        #line 2352 
        q_no_0 ++;
      }
      #line 2359 
      intrmod->rx_usecs = (unsigned long long)rx_coalesce_usecs;
      #line 2360 
      oct->rx_coalesce_usecs = rx_coalesce_usecs;
      #line 2361 
      break;
    }
    #line 2363 
    default: 
             #line 2363 
    ;
    #line 2364 
    return -22;
  }
  #line 2367 
  return 0;
}

#line 2371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int oct_cfg_tx_intrcnt(struct lio *lio, struct oct_intrmod_cfg *intrmod, struct ethtool_coalesce *intr_coal)
{
  #line 2376 
  u32 iq_intr_pkt;
  #line 2377 
  void *inst_cnt_reg;
  #line 2378 
  u64 val;
  #line 2375 
  struct octeon_device *oct = lio->oct_dev;
  #line 2381 
  switch ((int)oct->chip_id) {
    #line 2382 
    case 145: 
              #line 2382 
    ;
    #line 2383 
    case 146: 
              #line 2383 
    ;
    #line 2384 
    break;
    #line 2385 
    case 38674: 
                #line 2385 
    ;
    #line 2386 
    case 38658: 
                #line 2386 
    ;
    {
      #line 2387 
      int q_no;
      #line 2389 
      if (intr_coal->tx_max_coalesced_frames == 0U) 
                                                    #line 2390 
                                                    iq_intr_pkt = 32U; else 
                                                                    #line 2393 
                                                                    iq_intr_pkt = intr_coal->tx_max_coalesced_frames & 65535U;
      #line 2395 
      q_no = 0;
      #line 2395 
      while (oct->num_iqs > (unsigned int)q_no) {
        #line 2396 
        inst_cnt_reg = (oct->instr_queue[q_no])->inst_cnt_reg;
        #line 2397 
        val = readq(inst_cnt_reg);
        #line 2399 
        val = (val & 18446462598732840960ULL) | ((unsigned long long)(iq_intr_pkt + 4294967295U) << 32);
        #line 2402 
        writeq(val,inst_cnt_reg);
        #line 2395 
        q_no ++;
      }
      #line 2405 
      intrmod->tx_frames = (unsigned long long)iq_intr_pkt;
      #line 2406 
      oct->tx_max_coalesced_frames = iq_intr_pkt;
      #line 2407 
      break;
    }
    #line 2409 
    default: 
             #line 2409 
    ;
    #line 2410 
    return -22;
  }
  #line 2412 
  return 0;
}

#line 2415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_set_intr_coalesce(struct net_device *netdev, struct ethtool_coalesce *intr_coal)
{
  #line 2419 
  int ret;
  #line 2422 
  u32 j;
  #line 2422 
  u32 q_no;
  #line 2423 
  int db_max;
  #line 2423 
  int db_min;
  #line 2418 
  struct lio *lio = netdev_priv(netdev);
  #line 2420 
  struct octeon_device *oct = lio->oct_dev;
  #line 2421 
  struct oct_intrmod_cfg intrmod = {.rx_enable = 0ULL, .tx_enable = 0ULL, .check_intrvl = 0ULL, .maxpkt_ratethr = 0ULL, .minpkt_ratethr = 0ULL, .rx_maxcnt_trigger = 0ULL, .rx_mincnt_trigger = 0ULL, .rx_maxtmr_trigger = 0ULL, .rx_mintmr_trigger = 0ULL, .tx_mincnt_trigger = 0ULL, .tx_maxcnt_trigger = 0ULL, .rx_frames = 0ULL, .tx_frames = 0ULL, .rx_usecs = 0ULL};
  #line 2425 
  switch ((int)oct->chip_id) {
    #line 2426 
    case 145: 
              #line 2426 
    ;
    #line 2427 
    case 146: 
              #line 2427 
    ;
    #line 2428 
    db_min = 1;
    #line 2429 
    db_max = 8;
    #line 2430 
    if (intr_coal->tx_max_coalesced_frames >= (unsigned int)db_min && intr_coal->tx_max_coalesced_frames <= (unsigned int)db_max) {
      #line 2432 
      j = 0U;
      #line 2432 
      while ((unsigned int)lio->linfo.num_txpciq > j) {
        #line 2433 
        q_no = (unsigned int)lio->linfo.txpciq[j].s.q_no;
        #line 2434 
        (oct->instr_queue[q_no])->fill_threshold = intr_coal->tx_max_coalesced_frames;
        #line 2432 
        j ++;
      }
    }
    else {
      #line 2438 
      _dev_err(& (oct->pci_dev)->dev,(char *)"LIQUIDIO: Invalid tx-frames:%d. Range is min:%d max:%d\n",intr_coal->tx_max_coalesced_frames,db_min,db_max);
      #line 2442 
      return -22;
    }
    #line 2444 
    break;
    #line 2445 
    case 38658: 
                #line 2445 
    ;
    #line 2446 
    case 38674: 
                #line 2446 
    ;
    #line 2447 
    break;
    #line 2448 
    default: 
             #line 2448 
    ;
    #line 2449 
    return -22;
  }
  #line 2452 
  intrmod.rx_enable = (unsigned long long)(intr_coal->use_adaptive_rx_coalesce != 0U);
  #line 2453 
  intrmod.tx_enable = (unsigned long long)(intr_coal->use_adaptive_tx_coalesce != 0U);
  #line 2454 
  intrmod.rx_frames = (unsigned long long)octeon_get_conf(oct)->oq.oq_intr_pkt;
  #line 2455 
  intrmod.rx_usecs = (unsigned long long)octeon_get_conf(oct)->oq.oq_intr_time;
  #line 2456 
  intrmod.tx_frames = (unsigned long long)octeon_get_conf(oct)->iq.iq_intr_pkt;
  #line 2458 
  ret = oct_cfg_adaptive_intr(lio,& intrmod,intr_coal);
  #line 2460 
  if (intr_coal->use_adaptive_rx_coalesce == 0U) {
    #line 2461 
    ret = oct_cfg_rx_intrtime(lio,& intrmod,intr_coal);
    #line 2462 
    if (ret != 0) 
                  #line 2463 
                  goto ret_intrmod;
    #line 2465 
    ret = oct_cfg_rx_intrcnt(lio,& intrmod,intr_coal);
    #line 2466 
    if (ret != 0) 
                  #line 2467 
                  goto ret_intrmod;
  }
  else {
    #line 2469 
    oct->rx_coalesce_usecs = (unsigned int)octeon_get_conf(oct)->oq.oq_intr_time;
    #line 2471 
    oct->rx_max_coalesced_frames = (unsigned int)octeon_get_conf(oct)->oq.oq_intr_pkt;
  }
  #line 2475 
  if (intr_coal->use_adaptive_tx_coalesce == 0U) {
    #line 2476 
    ret = oct_cfg_tx_intrcnt(lio,& intrmod,intr_coal);
    #line 2477 
    if (ret != 0) 
                  #line 2478 
                  goto ret_intrmod;
  }
  else {
    #line 2480 
    oct->tx_max_coalesced_frames = (unsigned int)octeon_get_conf(oct)->iq.iq_intr_pkt;
  }
  #line 2484 
  return 0;
  #line 2485 
  ret_intrmod: 
               #line 2485 
  ;
  #line 2486 
  return ret;
}

#line 2489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_get_ts_info(struct net_device *netdev, struct ethtool_ts_info *info)
{
  #line 2492 
  struct lio *lio = netdev_priv(netdev);
  #line 2494 
  info->so_timestamping = 24U;
  #line 2504 
  if (lio->ptp_clock != (struct ptp_clock *)0) 
                                               #line 2505 
                                               info->phc_index = ptp_clock_index(lio->ptp_clock); else 
                                                                    #line 2507 
                                                                    info->phc_index = -1;
  #line 2518 
  return 0;
}

#line 2522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_get_regs_len(struct net_device *dev)
{
  #line 2524 
  struct lio *lio = netdev_priv(dev);
  #line 2525 
  struct octeon_device *oct = lio->oct_dev;
  #line 2527 
  switch ((int)oct->chip_id) {
    #line 2528 
    case 38658: 
                #line 2528 
    ;
    #line 2529 
    return 45056;
    #line 2530 
    case 38674: 
                #line 2530 
    ;
    #line 2531 
    return 8192;
    #line 2532 
    default: 
             #line 2532 
    ;
    #line 2533 
    return 4096;
  }
}

#line 2537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int cn23xx_read_csr_reg(char *s, struct octeon_device *oct)
{
  #line 2539 
  u32 reg;
  #line 2542 
  int i;
  #line 2540 
  u8 pf_num = (unsigned char)oct->pf_num;
  #line 2541 
  int len = 0;
  #line 2546 
  len = sprintf(s + (unsigned long)len,(char *)"\n\t Octeon CSR Registers\n\n") + len;
  #line 2549 
  reg = (unsigned int)(((int)oct->pcie_port * 32 + 167984) + (int)oct->pf_num * 16);
  #line 2550 
  ;
  #line 2550 
  ;
  #line 2550 
  ;
  #line 2550 
  ;
  #line 2553 
  len = sprintf(s + (unsigned long)len,
                (char *)"\n[%08x] (SLI_PKT_MAC%d_PF%d_RINFO): %016llx\n",reg,
                (int)oct->pcie_port,(int)oct->pf_num,
                readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2556 
  reg = (unsigned int)((((int)oct->pcie_port + 4996) * 2 + (int)oct->pf_num) * 16);
  #line 2557 
  ;
  #line 2557 
  ;
  #line 2557 
  ;
  #line 2557 
  ;
  #line 2560 
  len = sprintf(s + (unsigned long)len,
                (char *)"\n[%08x] (SLI_MAC%d_PF%d_INT_ENB): %016llx\n",reg,
                (int)oct->pcie_port,(int)oct->pf_num,
                readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2563 
  reg = (unsigned int)((((int)oct->pcie_port + 4992) * 2 + (int)oct->pf_num) * 16);
  #line 2564 
  ;
  #line 2564 
  ;
  #line 2564 
  ;
  #line 2564 
  ;
  #line 2567 
  len = sprintf(s + (unsigned long)len,
                (char *)"\n[%08x] (SLI_MAC%d_PF%d_INT_SUM): %016llx\n",reg,
                (int)oct->pcie_port,(int)oct->pf_num,
                readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2570 
  reg = 168224U;
  #line 2571 
  ;
  #line 2571 
  ;
  #line 2572 
  len = sprintf(s + (unsigned long)len,
                (char *)"\n[%08x] (SLI_PKT_MEM_CTL): %016llx\n",reg,
                readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2575 
  reg = (unsigned int)((((int)oct->pcie_port + 5016) * 2 + (int)oct->pf_num) * 16);
  #line 2577 
  ;
  #line 2577 
  ;
  #line 2577 
  ;
  #line 2577 
  ;
  #line 2579 
  len = sprintf(s + (unsigned long)len,
                (char *)"\n[%08x] (SLI_MAC%d_PF%d_PKT_VF_INT): %016llx\n",
                reg,(int)oct->pcie_port,(int)oct->pf_num,
                readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2582 
  reg = (unsigned int)((((int)oct->pcie_port + 5008) * 2 + (int)oct->pf_num) * 16);
  #line 2584 
  ;
  #line 2584 
  ;
  #line 2584 
  ;
  #line 2584 
  ;
  #line 2587 
  len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_MAC%d_PF%d_PP_VF_INT): %016llx\n",
                 reg,(int)oct->pcie_port,(int)oct->pf_num,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2590 
  reg = 168240U;
  #line 2591 
  ;
  #line 2591 
  ;
  #line 2592 
  len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT_CNT_INT): %016llx\n",reg,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2595 
  reg = 168256U;
  #line 2596 
  ;
  #line 2596 
  ;
  #line 2597 
  len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT_TIME_INT): %016llx\n",reg,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2600 
  reg = 168288U;
  #line 2601 
  ;
  #line 2601 
  ;
  #line 2602 
  len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT_INT): %016llx\n",reg,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2605 
  reg = 168320U;
  #line 2606 
  ;
  #line 2606 
  ;
  #line 2607 
  len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT_OUTPUT_WMARK): %016llx\n",reg,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2610 
  reg = 168416U;
  #line 2611 
  ;
  #line 2611 
  ;
  #line 2612 
  len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT_RING_RST): %016llx\n",reg,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2615 
  reg = 168464U;
  #line 2616 
  ;
  #line 2616 
  ;
  #line 2618 
  len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT_GBL_CONTROL): %016llx\n",reg,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2621 
  reg = 168480U;
  #line 2622 
  ;
  #line 2622 
  ;
  #line 2623 
  len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT_BIST_STATUS): %016llx\n",reg,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2626 
  if ((unsigned int)pf_num == 0U) {
    #line 2628 
    reg = 168544U;
    #line 2629 
    ;
    #line 2629 
    ;
    #line 2631 
    len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT_OUT_BP_EN_W1S):  %016llx\n",reg,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  }
  else 
    #line 2632 
    if ((unsigned int)pf_num == 1U) {
      #line 2634 
      reg = 168560U;
      #line 2635 
      ;
      #line 2635 
      ;
      #line 2637 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT_OUT_BP_EN2_W1S): %016llx\n",reg,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
  #line 2640 
  i = 0;
  #line 2640 
  while (i <= 63) {
    {
      #line 2641 
      reg = (unsigned int)(i * 131072 + 65632);
      #line 2642 
      ;
      #line 2642 
      ;
      #line 2642 
      ;
      #line 2644 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_OUT_SIZE): %016llx\n",reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2640 
    i ++;
  }
  #line 2648 
  i = 0;
  #line 2648 
  while (i <= 63) {
    {
      #line 2649 
      reg = (unsigned int)(i * 131072 + 65600);
      #line 2650 
      ;
      #line 2650 
      ;
      #line 2650 
      ;
      #line 2652 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT_IN_DONE%d_CNTS): %016llx\n",reg,
                 i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2648 
    i ++;
  }
  #line 2656 
  i = 0;
  #line 2656 
  while (i <= 63) {
    {
      #line 2657 
      reg = (unsigned int)(i * 131072 + 65664);
      #line 2658 
      ;
      #line 2658 
      ;
      #line 2658 
      ;
      #line 2660 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_SLIST_BAOFF_DBELL): %016llx\n",
                 reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2656 
    i ++;
  }
  #line 2664 
  i = 0;
  #line 2664 
  while (i <= 63) {
    {
      #line 2665 
      reg = (unsigned int)(i * 131072 + 65680);
      #line 2666 
      ;
      #line 2666 
      ;
      #line 2666 
      ;
      #line 2668 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_SLIST_FIFO_RSIZE): %016llx\n",
                 reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2664 
    i ++;
  }
  #line 2672 
  i = 0;
  #line 2672 
  while (i <= 63) {
    {
      #line 2673 
      reg = (unsigned int)(i * 131072 + 65616);
      #line 2674 
      ;
      #line 2674 
      ;
      #line 2674 
      ;
      #line 2677 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d__OUTPUT_CONTROL): %016llx\n",
                 reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2672 
    i ++;
  }
  #line 2681 
  i = 0;
  #line 2681 
  while (i <= 63) {
    {
      #line 2682 
      reg = (unsigned int)(i * 131072 + 65648);
      #line 2683 
      ;
      #line 2683 
      ;
      #line 2683 
      ;
      #line 2685 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_SLIST_BADDR): %016llx\n",reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2681 
    i ++;
  }
  #line 2689 
  i = 0;
  #line 2689 
  while (i <= 63) {
    {
      #line 2690 
      reg = (unsigned int)(i * 131072 + 65696);
      #line 2691 
      ;
      #line 2691 
      ;
      #line 2691 
      ;
      #line 2693 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_INT_LEVELS): %016llx\n",reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2689 
    i ++;
  }
  #line 2697 
  i = 0;
  #line 2697 
  while (i <= 63) {
    {
      #line 2698 
      reg = (unsigned int)(i * 131072 + 65712);
      #line 2699 
      ;
      #line 2699 
      ;
      #line 2699 
      ;
      #line 2700 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_CNTS): %016llx\n",reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2697 
    i ++;
  }
  #line 2704 
  i = 0;
  #line 2704 
  while (i <= 63) {
    {
      #line 2705 
      reg = (unsigned int)(i * 131072 + 65728);
      #line 2706 
      ;
      #line 2706 
      ;
      #line 2706 
      ;
      #line 2708 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_ERROR_INFO): %016llx\n",reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
      #line 2711 
      i = 0;
      #line 2711 
      while (i <= 63) {
        {
          #line 2712 
          reg = (unsigned int)(i * 131072 + 65536);
          #line 2713 
          ;
          #line 2713 
          ;
          #line 2713 
          ;
          #line 2716 
          len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_INPUT_CONTROL): %016llx\n",reg,
                 i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
        }
        #line 2711 
        i ++;
      }
      #line 2720 
      i = 0;
      #line 2720 
      while (i <= 63) {
        {
          #line 2721 
          reg = (unsigned int)(i * 131072 + 65552);
          #line 2722 
          ;
          #line 2722 
          ;
          #line 2722 
          ;
          #line 2725 
          len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_INSTR_BADDR): %016llx\n",reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
        }
        #line 2720 
        i ++;
      }
      #line 2729 
      i = 0;
      #line 2729 
      while (i <= 63) {
        {
          #line 2730 
          reg = (unsigned int)(i * 131072 + 65568);
          #line 2731 
          ;
          #line 2731 
          ;
          #line 2731 
          ;
          #line 2734 
          len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_INSTR_BAOFF_DBELL): %016llx\n",
                 reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
        }
        #line 2729 
        i ++;
      }
      #line 2738 
      i = 0;
      #line 2738 
      while (i <= 63) {
        {
          #line 2739 
          reg = (unsigned int)(i * 131072 + 65584);
          #line 2740 
          ;
          #line 2740 
          ;
          #line 2740 
          ;
          #line 2743 
          len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_INSTR_FIFO_RSIZE): %016llx\n",
                 reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
        }
        #line 2738 
        i ++;
      }
      #line 2747 
      i = 0;
      #line 2747 
      while (i <= 63) {
        #line 2748 
        reg = (unsigned int)(i * 131072 + 65600);
        #line 2747 
        i ++;
      }
      #line 2749 
      ;
      #line 2749 
      ;
      #line 2749 
      ;
      #line 2751 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT_IN_DONE%d_CNTS): %016llx\n",reg,
                 i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2704 
    i ++;
  }
  #line 2754 
  return len;
}

#line 2757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int cn23xx_vf_read_csr_reg(char *s, struct octeon_device *oct)
{
  #line 2760 
  u32 reg;
  #line 2761 
  int i;
  #line 2759 
  int len = 0;
  #line 2765 
  len = sprintf(s + (unsigned long)len,(char *)"\n\t Octeon CSR Registers\n\n") + len;
  #line 2767 
  i = 0;
  #line 2767 
  while (oct->sriov_info.rings_per_vf > (unsigned int)i) {
    {
      #line 2768 
      reg = (unsigned int)(i * 131072 + 65632);
      #line 2769 
      ;
      #line 2769 
      ;
      #line 2769 
      ;
      #line 2771 
      len = sprintf(s + (unsigned long)len,
                (char *)"\n[%08x] (SLI_PKT%d_OUT_SIZE): %016llx\n",reg,i,
                readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2767 
    i ++;
  }
  #line 2774 
  i = 0;
  #line 2774 
  while (oct->sriov_info.rings_per_vf > (unsigned int)i) {
    {
      #line 2775 
      reg = (unsigned int)(i * 131072 + 65600);
      #line 2776 
      ;
      #line 2776 
      ;
      #line 2776 
      ;
      #line 2778 
      len = sprintf(s + (unsigned long)len,
                (char *)"\n[%08x] (SLI_PKT_IN_DONE%d_CNTS): %016llx\n",reg,i,
                readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2774 
    i ++;
  }
  #line 2781 
  i = 0;
  #line 2781 
  while (oct->sriov_info.rings_per_vf > (unsigned int)i) {
    {
      #line 2782 
      reg = (unsigned int)(i * 131072 + 65664);
      #line 2783 
      ;
      #line 2783 
      ;
      #line 2783 
      ;
      #line 2785 
      len = sprintf(s + (unsigned long)len,
                (char *)"\n[%08x] (SLI_PKT%d_SLIST_BAOFF_DBELL): %016llx\n",
                reg,i,
                readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2781 
    i ++;
  }
  #line 2788 
  i = 0;
  #line 2788 
  while (oct->sriov_info.rings_per_vf > (unsigned int)i) {
    {
      #line 2789 
      reg = (unsigned int)(i * 131072 + 65680);
      #line 2790 
      ;
      #line 2790 
      ;
      #line 2790 
      ;
      #line 2792 
      len = sprintf(s + (unsigned long)len,
                (char *)"\n[%08x] (SLI_PKT%d_SLIST_FIFO_RSIZE): %016llx\n",
                reg,i,
                readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2788 
    i ++;
  }
  #line 2795 
  i = 0;
  #line 2795 
  while (oct->sriov_info.rings_per_vf > (unsigned int)i) {
    {
      #line 2796 
      reg = (unsigned int)(i * 131072 + 65616);
      #line 2797 
      ;
      #line 2797 
      ;
      #line 2797 
      ;
      #line 2799 
      len = sprintf(s + (unsigned long)len,
                (char *)"\n[%08x] (SLI_PKT%d__OUTPUT_CONTROL): %016llx\n",
                reg,i,
                readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2795 
    i ++;
  }
  #line 2802 
  i = 0;
  #line 2802 
  while (oct->sriov_info.rings_per_vf > (unsigned int)i) {
    {
      #line 2803 
      reg = (unsigned int)(i * 131072 + 65648);
      #line 2804 
      ;
      #line 2804 
      ;
      #line 2804 
      ;
      #line 2806 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_SLIST_BADDR): %016llx\n",reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2802 
    i ++;
  }
  #line 2809 
  i = 0;
  #line 2809 
  while (oct->sriov_info.rings_per_vf > (unsigned int)i) {
    {
      #line 2810 
      reg = (unsigned int)(i * 131072 + 65696);
      #line 2811 
      ;
      #line 2811 
      ;
      #line 2811 
      ;
      #line 2813 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_INT_LEVELS): %016llx\n",reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2809 
    i ++;
  }
  #line 2816 
  i = 0;
  #line 2816 
  while (oct->sriov_info.rings_per_vf > (unsigned int)i) {
    {
      #line 2817 
      reg = (unsigned int)(i * 131072 + 65712);
      #line 2818 
      ;
      #line 2818 
      ;
      #line 2818 
      ;
      #line 2819 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_CNTS): %016llx\n",reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2816 
    i ++;
  }
  #line 2822 
  i = 0;
  #line 2822 
  while (oct->sriov_info.rings_per_vf > (unsigned int)i) {
    {
      #line 2823 
      reg = (unsigned int)(i * 131072 + 65728);
      #line 2824 
      ;
      #line 2824 
      ;
      #line 2824 
      ;
      #line 2826 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_ERROR_INFO): %016llx\n",reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2822 
    i ++;
  }
  #line 2829 
  i = 0;
  #line 2829 
  while (oct->sriov_info.rings_per_vf > (unsigned int)i) {
    {
      #line 2830 
      reg = (unsigned int)(i * 131072 + 65744);
      #line 2831 
      ;
      #line 2831 
      ;
      #line 2831 
      ;
      #line 2833 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_VF_INT_SUM): %016llx\n",reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2829 
    i ++;
  }
  #line 2836 
  i = 0;
  #line 2836 
  while (oct->sriov_info.rings_per_vf > (unsigned int)i) {
    {
      #line 2837 
      reg = (unsigned int)(i * 131072 + 65536);
      #line 2838 
      ;
      #line 2838 
      ;
      #line 2838 
      ;
      #line 2840 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_INPUT_CONTROL): %016llx\n",reg,
                 i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2836 
    i ++;
  }
  #line 2843 
  i = 0;
  #line 2843 
  while (oct->sriov_info.rings_per_vf > (unsigned int)i) {
    {
      #line 2844 
      reg = (unsigned int)(i * 131072 + 65552);
      #line 2845 
      ;
      #line 2845 
      ;
      #line 2845 
      ;
      #line 2847 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_INSTR_BADDR): %016llx\n",reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2843 
    i ++;
  }
  #line 2850 
  i = 0;
  #line 2850 
  while (oct->sriov_info.rings_per_vf > (unsigned int)i) {
    {
      #line 2851 
      reg = (unsigned int)(i * 131072 + 65568);
      #line 2852 
      ;
      #line 2852 
      ;
      #line 2852 
      ;
      #line 2854 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_INSTR_BAOFF_DBELL): %016llx\n",
                 reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2850 
    i ++;
  }
  #line 2857 
  i = 0;
  #line 2857 
  while (oct->sriov_info.rings_per_vf > (unsigned int)i) {
    {
      #line 2858 
      reg = (unsigned int)(i * 131072 + 65584);
      #line 2859 
      ;
      #line 2859 
      ;
      #line 2859 
      ;
      #line 2861 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT%d_INSTR_FIFO_RSIZE): %016llx\n",
                 reg,i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2857 
    i ++;
  }
  #line 2864 
  i = 0;
  #line 2864 
  while (oct->sriov_info.rings_per_vf > (unsigned int)i) {
    {
      #line 2865 
      reg = (unsigned int)(i * 131072 + 65600);
      #line 2866 
      ;
      #line 2866 
      ;
      #line 2866 
      ;
      #line 2868 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%08x] (SLI_PKT_IN_DONE%d_CNTS): %016llx\n",reg,
                 i,
                 readq((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2864 
    i ++;
  }
  #line 2871 
  return len;
}

#line 2874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int cn6xxx_read_csr_reg(char *s, struct octeon_device *oct)
{
  #line 2876 
  u32 reg;
  #line 2877 
  int i;
  #line 2877 
  int len = 0;
  #line 2881 
  len = sprintf(s + (unsigned long)len,(char *)"\n\t Octeon CSR Registers\n\n") + len;
  #line 2882 
  reg = 0U;
  #line 2883 
  ;
  #line 2884 
  len = sprintf(s + (unsigned long)len,
                (char *)"\n[%02x] (WIN_WR_ADDR_LO): %08x\n",0,
                readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2885 
  reg = 4U;
  #line 2886 
  ;
  #line 2887 
  len = sprintf(s + (unsigned long)len,
                (char *)"[%02x] (WIN_WR_ADDR_HI): %08x\n",4,
                readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2888 
  reg = 16U;
  #line 2889 
  ;
  #line 2890 
  len = sprintf(s + (unsigned long)len,
                (char *)"[%02x] (WIN_RD_ADDR_LO): %08x\n",16,
                readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2891 
  reg = 20U;
  #line 2892 
  ;
  #line 2893 
  len = sprintf(s + (unsigned long)len,
                (char *)"[%02x] (WIN_RD_ADDR_HI): %08x\n",20,
                readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2894 
  reg = 32U;
  #line 2895 
  ;
  #line 2896 
  len = sprintf(s + (unsigned long)len,
                (char *)"[%02x] (WIN_WR_DATA_LO): %08x\n",32,
                readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2897 
  reg = 36U;
  #line 2898 
  ;
  #line 2899 
  len = sprintf(s + (unsigned long)len,
                 (char *)"[%02x] (WIN_WR_DATA_HI): %08x\n",36,
                 readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2900 
  ;
  #line 2902 
  len = sprintf(s + (unsigned long)len,
                 (char *)"[%02x] (WIN_WR_MASK_REG): %08x\n",48,
                 readl((void *)(oct->mmio[0].hw_addr + 48U))) + len;
  #line 2905 
  ;
  #line 2907 
  len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%x] (INT_ENABLE PORT 0): %08x\n",832,
                 readl((void *)(oct->mmio[0].hw_addr + 832U))) + len;
  #line 2908 
  ;
  #line 2910 
  len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%x] (INT_ENABLE PORT 1): %08x\n",848,
                 readl((void *)(oct->mmio[0].hw_addr + 848U))) + len;
  #line 2911 
  ;
  #line 2912 
  len = sprintf(s + (unsigned long)len,(char *)"[%x] (INT_SUM): %08x\n",816,
                 readl((void *)(oct->mmio[0].hw_addr + 816U))) + len;
  #line 2915 
  i = 0;
  #line 2915 
  while (oct->num_oqs > (unsigned int)i) {
    {
      #line 2916 
      reg = (unsigned int)((i + 576) * 16);
      #line 2917 
      ;
      #line 2917 
      ;
      #line 2917 
      ;
      #line 2918 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%x] (PKTS_SENT_%d): %08x\n",reg,i,
                 readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
      #line 2919 
      reg = (unsigned int)((i + 384) * 16);
      #line 2920 
      ;
      #line 2920 
      ;
      #line 2920 
      ;
      #line 2921 
      len = sprintf(s + (unsigned long)len,
                 (char *)"[%x] (PKT_CREDITS_%d): %08x\n",reg,i,
                 readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
    }
    #line 2915 
    i ++;
  }
  #line 2923 
  reg = 4384U;
  #line 2924 
  ;
  #line 2924 
  ;
  #line 2925 
  len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%x] (PKTS_SENT_INT_LEVEL): %08x\n",reg,
                 readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2926 
  reg = 4388U;
  #line 2927 
  ;
  #line 2927 
  ;
  #line 2928 
  len = sprintf(s + (unsigned long)len,
                 (char *)"[%x] (PKTS_SENT_TIME): %08x\n",reg,
                 readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2931 
  i = 0;
  #line 2931 
  while (i <= 3) {
    {
      #line 2932 
      u32 reg_0;
      #line 2934 
      reg_0 = (unsigned int)((i + 704) * 16);
      #line 2935 
      ;
      #line 2935 
      ;
      #line 2935 
      ;
      #line 2936 
      len = sprintf(s + (unsigned long)len,
                 (char *)"\n[%x] (INSTR_DOORBELL_%d): %08x\n",reg_0,i,
                 readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg_0))) + len;
      #line 2937 
      reg_0 = (unsigned int)((i + 512) * 16);
      #line 2938 
      ;
      #line 2938 
      ;
      #line 2938 
      ;
      #line 2939 
      len = sprintf(s + (unsigned long)len,
                 (char *)"[%x] (INSTR_COUNT_%d): %08x\n",reg_0,i,
                 readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg_0))) + len;
    }
    #line 2931 
    i ++;
  }
  #line 2944 
  ;
  #line 2946 
  len = sprintf(s + (unsigned long)len,(char *)"\n[%x] (DMA_CNT_0): %08x\n",
                 1024,readl((void *)(oct->mmio[0].hw_addr + 1024U))) + len;
  #line 2947 
  reg = 992U;
  #line 2948 
  ;
  #line 2949 
  len = sprintf(s + (unsigned long)len,
                 (char *)"[%x] (DMA_INT_LEV_0): %08x\n",992,
                 readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2950 
  reg = 996U;
  #line 2951 
  ;
  #line 2953 
  len = sprintf(s + (unsigned long)len,(char *)"[%x] (DMA_TIME_0): %08x\n",
                 996,
                 readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2955 
  ;
  #line 2957 
  len = sprintf(s + (unsigned long)len,(char *)"\n[%x] (DMA_CNT_1): %08x\n",
                 1040,readl((void *)(oct->mmio[0].hw_addr + 1040U))) + len;
  #line 2958 
  reg = 1008U;
  #line 2959 
  ;
  #line 2961 
  len = sprintf(s + (unsigned long)len,
                 (char *)"[%x] (DMA_INT_LEV_1): %08x\n",1008,
                 readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2962 
  reg = 1008U;
  #line 2963 
  ;
  #line 2965 
  len = sprintf(s + (unsigned long)len,(char *)"[%x] (DMA_TIME_1): %08x\n",
                 1012,
                 readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg))) + len;
  #line 2969 
  len = sprintf(s + (unsigned long)len,(char *)"\n") + len;
  #line 2971 
  i = 0;
  #line 2971 
  while (i <= 15) {
    {
      #line 2972 
      reg = (unsigned int)lio_pci_readq(oct,
                       ((unsigned long long)oct->pcie_port * 16777216ULL + (unsigned long long)(
                        i * 8)) + 307866477002920ULL);
      #line 2974 
      len = sprintf(s + (unsigned long)len,
                 (char *)"[%llx] (BAR1_INDEX_%02d): %08x\n",
                 ((unsigned long long)oct->pcie_port * 16777216ULL + (unsigned long long)(
                  i * 8)) + 307866477002920ULL,i,reg) + len;
    }
    #line 2971 
    i ++;
  }
  #line 2977 
  return len;
}

#line 2980  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int cn6xxx_read_config_reg(char *s, struct octeon_device *oct)
{
  #line 2982 
  u32 val;
  #line 2983 
  int i;
  #line 2983 
  int len = 0;
  #line 2988 
  len = sprintf(s + (unsigned long)len,
              (char *)"\n\t Octeon Config space Registers\n\n") + len;
  #line 2990 
  i = 0;
  #line 2990 
  while (i <= 13) {
    {
      #line 2991 
      pci_read_config_dword(oct->pci_dev,i * 4,& val);
      #line 2993 
      len = sprintf(s + (unsigned long)len,
                (char *)"[0x%x] (Config[%d]): 0x%08x\n",i * 4,i,val) + len;
    }
    #line 2990 
    i ++;
  }
  #line 2996 
  i = 30;
  #line 2996 
  while (i <= 34) {
    {
      #line 2997 
      pci_read_config_dword(oct->pci_dev,i * 4,& val);
      #line 2999 
      len = sprintf(s + (unsigned long)len,
                (char *)"[0x%x] (Config[%d]): 0x%08x\n",i * 4,i,val) + len;
    }
    #line 2996 
    i ++;
  }
  #line 3002 
  return len;
}

#line 3006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static void lio_get_regs(struct net_device *dev, struct ethtool_regs *regs, void *regbuf)
{
  #line 3009 
  struct lio *lio = netdev_priv(dev);
  #line 3010 
  int len = 0;
  #line 3011 
  struct octeon_device *oct = lio->oct_dev;
  #line 3013 
  regs->version = 1U;
  #line 3015 
  switch ((int)oct->chip_id) {
    #line 3016 
    case 38658: 
                #line 3016 
    ;
    #line 3017 
    memset(regbuf,0,45056UL);
    #line 3018 
    len = cn23xx_read_csr_reg((char *)(regbuf + (unsigned long)len),oct) + len;
    #line 3019 
    break;
    #line 3020 
    case 38674: 
                #line 3020 
    ;
    #line 3021 
    memset(regbuf,0,8192UL);
    #line 3022 
    len = cn23xx_vf_read_csr_reg((char *)(regbuf + (unsigned long)len),oct) + len;
    #line 3023 
    break;
    #line 3024 
    case 145: 
              #line 3024 
    ;
    #line 3025 
    case 146: 
              #line 3025 
    ;
    #line 3026 
    memset(regbuf,0,4096UL);
    #line 3027 
    len = cn6xxx_read_csr_reg((char *)(regbuf + (unsigned long)len),oct) + len;
    #line 3028 
    len = cn6xxx_read_config_reg((char *)(regbuf + (unsigned long)len),oct) + len;
    #line 3029 
    break;
    #line 3030 
    default: 
             #line 3030 
    ;
    #line 3031 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s Unknown chipid: %d\n",(char *)"lio_get_regs",(int)oct->chip_id);
  }
  #line 3033 
  return;
}

#line 3036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static u32 lio_get_priv_flags(struct net_device *netdev)
{
  #line 3038 
  struct lio *lio = netdev_priv(netdev);
  #line 3040 
  return (lio->oct_dev)->priv_flags;
}

#line 3043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_set_priv_flags(struct net_device *netdev, u32 flags)
{
  #line 3045 
  struct lio *lio = netdev_priv(netdev);
  #line 3046 
  bool intr_by_tx_bytes = (_Bool)((flags & 1U) != 0U);
  #line 3048 
  lio_set_priv_flag(lio->oct_dev,0U,(unsigned int)intr_by_tx_bytes);
  #line 3050 
  return 0;
}

#line 3053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_get_fecparam(struct net_device *netdev, struct ethtool_fecparam *fec)
{
  #line 3056 
  struct lio *lio = netdev_priv(netdev);
  #line 3057 
  struct octeon_device *oct = lio->oct_dev;
  #line 3059 
  fec->active_fec = 1U;
  #line 3060 
  fec->fec = 1U;
  #line 3062 
  if (oct->subsystem_id == 464765U || oct->subsystem_id == 399229U) {
    #line 3064 
    if ((unsigned int)oct->no_speed_setting == 1U) 
                                                   #line 3065 
                                                   return 0;
    #line 3067 
    liquidio_get_fec(lio);
    #line 3068 
    fec->fec = 12U;
    #line 3069 
    if (oct->props[lio->ifidx].fec == 1) 
                                         #line 3070 
                                         fec->active_fec = 8U; else 
                                                                    #line 3072 
                                                                    fec->active_fec = 4U;
  }
  #line 3075 
  return 0;
}

#line 3078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static int lio_set_fecparam(struct net_device *netdev, struct ethtool_fecparam *fec)
{
  #line 3081 
  struct lio *lio = netdev_priv(netdev);
  #line 3082 
  struct octeon_device *oct = lio->oct_dev;
  #line 3084 
  if (oct->subsystem_id == 464765U || oct->subsystem_id == 399229U) {
    #line 3086 
    if ((unsigned int)oct->no_speed_setting == 1U) 
                                                   #line 3087 
                                                   return -95;
    #line 3089 
    if ((fec->fec & 4U) != 0U) 
                               #line 3090 
                               liquidio_set_fec(lio,0);
    else 
      #line 3091 
      if ((fec->fec & 8U) != 0U) 
                                 #line 3092 
                                 liquidio_set_fec(lio,1); else 
                                                               #line 3094 
                                                               return -95;
  }
  else 
       #line 3096 
       return -95;
  #line 3099 
  return 0;
}

#line 3102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static struct ethtool_ops lio_ethtool_ops = {.get_drvinfo = & lio_get_drvinfo, .get_regs_len = & lio_get_regs_len, .get_regs = & lio_get_regs, .get_msglevel = & lio_get_msglevel, .set_msglevel = & lio_set_msglevel, .get_link = & ethtool_op_get_link, .get_eeprom_len = & lio_get_eeprom_len, .get_eeprom = & lio_get_eeprom, .get_coalesce = & lio_get_intr_coalesce, .set_coalesce = & lio_set_intr_coalesce, .get_ringparam = & lio_ethtool_get_ringparam, .set_ringparam = & lio_ethtool_set_ringparam, .get_pauseparam = & lio_get_pauseparam, .set_pauseparam = & lio_set_pauseparam, .get_strings = & lio_get_strings, .set_phys_id = & lio_set_phys_id, .get_ethtool_stats = & lio_get_ethtool_stats, .get_priv_flags = & lio_get_priv_flags, .set_priv_flags = & lio_set_priv_flags, .get_sset_count = & lio_get_sset_count, .get_channels = & lio_ethtool_get_channels, .set_channels = & lio_ethtool_set_channels, .get_ts_info = & lio_get_ts_info, .get_link_ksettings = & lio_get_link_ksettings, .set_link_ksettings = & lio_set_link_ksettings, .get_fecparam = & lio_get_fecparam, .set_fecparam = & lio_set_fecparam};
#line 3132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
static struct ethtool_ops lio_vf_ethtool_ops = {.get_drvinfo = & lio_get_vf_drvinfo, .get_regs_len = & lio_get_regs_len, .get_regs = & lio_get_regs, .get_msglevel = & lio_get_msglevel, .set_msglevel = & lio_vf_set_msglevel, .get_link = & ethtool_op_get_link, .get_coalesce = & lio_get_intr_coalesce, .set_coalesce = & lio_set_intr_coalesce, .get_ringparam = & lio_ethtool_get_ringparam, .set_ringparam = & lio_ethtool_set_ringparam, .get_strings = & lio_vf_get_strings, .get_ethtool_stats = & lio_vf_get_ethtool_stats, .get_priv_flags = & lio_get_priv_flags, .set_priv_flags = & lio_set_priv_flags, .get_sset_count = & lio_vf_get_sset_count, .get_channels = & lio_ethtool_get_channels, .set_channels = & lio_ethtool_set_channels, .get_ts_info = & lio_get_ts_info, .get_link_ksettings = & lio_get_link_ksettings};
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/lio_ethtool.c"
void liquidio_set_ethtool_ops(struct net_device *netdev)
{
  #line 3156 
  struct lio *lio = netdev_priv(netdev);
  #line 3157 
  struct octeon_device *oct = lio->oct_dev;
  #line 3159 
  if ((unsigned int)oct->chip_id == 38674U) 
                                            #line 3160 
                                            netdev->ethtool_ops = & lio_vf_ethtool_ops; else 
                                                                    #line 3162 
                                                                    netdev->ethtool_ops = & lio_ethtool_ops;
  #line 3163 
  return;
}

#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
void emg_wrapper_lio_ethtool_get_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 108 
  lio_ethtool_get_channels(arg0,arg1);
  #line 109 
  return;
}

#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
void emg_wrapper_lio_ethtool_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 113 
  lio_ethtool_get_ringparam(arg0,arg1);
  #line 114 
  return;
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_ethtool_set_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 118 
  return lio_ethtool_set_channels(arg0,arg1);
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_ethtool_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 123 
  return lio_ethtool_set_ringparam(arg0,arg1);
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
void emg_wrapper_lio_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 128 
  lio_get_drvinfo(arg0,arg1);
  #line 129 
  return;
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 133 
  return lio_get_eeprom(arg0,arg1,arg2);
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_get_eeprom_len(struct net_device *arg0)
{
  #line 138 
  return lio_get_eeprom_len(arg0);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
void emg_wrapper_lio_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 143 
  lio_get_ethtool_stats(arg0,arg1,arg2);
  #line 144 
  return;
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_get_fecparam(struct net_device *arg0, struct ethtool_fecparam *arg1)
{
  #line 148 
  return lio_get_fecparam(arg0,arg1);
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_get_intr_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 153 
  return lio_get_intr_coalesce(arg0,arg1);
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 158 
  return lio_get_link_ksettings(arg0,arg1);
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
unsigned int emg_wrapper_lio_get_msglevel(struct net_device *arg0)
{
  #line 163 
  return lio_get_msglevel(arg0);
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
void emg_wrapper_lio_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 168 
  lio_get_pauseparam(arg0,arg1);
  #line 169 
  return;
}

#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
unsigned int emg_wrapper_lio_get_priv_flags(struct net_device *arg0)
{
  #line 173 
  return lio_get_priv_flags(arg0);
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
void emg_wrapper_lio_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 178 
  lio_get_regs(arg0,arg1,arg2);
  #line 179 
  return;
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_get_regs_len(struct net_device *arg0)
{
  #line 183 
  return lio_get_regs_len(arg0);
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 188 
  return lio_get_sset_count(arg0,arg1);
}

#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
void emg_wrapper_lio_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 193 
  lio_get_strings(arg0,arg1,arg2);
  #line 194 
  return;
}

#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_get_ts_info(struct net_device *arg0, struct ethtool_ts_info *arg1)
{
  #line 198 
  return lio_get_ts_info(arg0,arg1);
}

#line 202  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
void emg_wrapper_lio_get_vf_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 203 
  lio_get_vf_drvinfo(arg0,arg1);
  #line 204 
  return;
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_set_fecparam(struct net_device *arg0, struct ethtool_fecparam *arg1)
{
  #line 208 
  return lio_set_fecparam(arg0,arg1);
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_set_intr_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 213 
  return lio_set_intr_coalesce(arg0,arg1);
}

#line 217  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 218 
  return lio_set_link_ksettings(arg0,arg1);
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
void emg_wrapper_lio_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 223 
  lio_set_msglevel(arg0,arg1);
  #line 224 
  return;
}

#line 227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 228 
  return lio_set_pauseparam(arg0,arg1);
}

#line 232  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_set_phys_id(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 233 
  return lio_set_phys_id(arg0,arg1);
}

#line 237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_set_priv_flags(struct net_device *arg0, unsigned int arg1)
{
  #line 238 
  return lio_set_priv_flags(arg0,arg1);
}

#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
void emg_wrapper_lio_vf_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 243 
  lio_vf_get_ethtool_stats(arg0,arg1,arg2);
  #line 244 
  return;
}

#line 247  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
int emg_wrapper_lio_vf_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 248 
  return lio_vf_get_sset_count(arg0,arg1);
}

#line 252  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
void emg_wrapper_lio_vf_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 253 
  lio_vf_get_strings(arg0,arg1,arg2);
  #line 254 
  return;
}

#line 257  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
void emg_wrapper_lio_vf_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 258 
  lio_vf_set_msglevel(arg0,arg1);
  #line 259 
  return;
}

#line 354  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 357 
  ldv_bitmap_zero(dst,nbits);
  #line 358 
  return;
}

#line 823  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
static void *cif_free_irq_1(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 827 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/lio_ethtool.i.aux"
static int cif_strcmp(char *cs, char *ct)
{
  #line 834 
  return ldv_strcmp(cs,ct);
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_mailbox.i.aux"
static void cif_spin_lock_lock_of_octeon_mbox(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 675  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_mailbox.i.aux"
static void cif_spin_unlock_lock_of_octeon_mbox(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_1(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 693  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_mailbox.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_octeon_mbox(spinlock_t *lock, unsigned long flags);
#line 35 
#line 684 
static void cif___ldv_spin_lock_lock_of_octeon_mbox(spinlock_t *lock);
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.h"
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.c"
int octeon_mbox_cancel(struct octeon_device *oct, int q_no);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.c"
int octeon_mbox_read(struct octeon_mbox *mbox)
{
  #line 38 
  union octeon_mbox_message msg;
  #line 39 
  int ret = 0;
  #line 41 
  cif_spin_lock_lock_of_octeon_mbox(& mbox->lock);
  #line 43 
  msg.u64 = readq(mbox->mbox_read_reg);
  #line 45 
  if (msg.u64 == 18446744073709551615ULL || msg.u64 == 1234605616436508552ULL) {
    #line 46 
    cif_spin_unlock_lock_of_octeon_mbox(& mbox->lock);
    #line 47 
    return 0;
  }
  #line 50 
  if (((unsigned int)mbox->state & 2U) != 0U) {
    #line 51 
    mbox->mbox_req.data[mbox->mbox_req.recv_len + 4294967295U] = msg.u64;
    #line 52 
    (mbox->mbox_req.recv_len) ++;
  }
  else 
    #line 54 
    if (((unsigned int)mbox->state & 16U) != 0U) {
      #line 55 
      mbox->mbox_resp.data[mbox->mbox_resp.recv_len + 4294967295U] = msg.u64;
      #line 57 
      (mbox->mbox_resp.recv_len) ++;
    }
    else 
      #line 59 
      if (((unsigned int)mbox->state & 1U) != 0U && (unsigned int)msg.s.type == 0U) {
        #line 61 
        mbox->state = (enum octeon_mbox_state)((unsigned int)mbox->state & 4294967294U);
        #line 62 
        mbox->state = (enum octeon_mbox_state)((unsigned int)mbox->state | 2U);
        #line 64 
        mbox->mbox_req.msg.u64 = msg.u64;
        #line 65 
        mbox->mbox_req.q_no = mbox->q_no;
        #line 66 
        mbox->mbox_req.recv_len = 1U;
      }
      else 
        #line 68 
        if (((unsigned int)mbox->state & 8U) != 0U && (unsigned int)msg.s.type == 1U) {
          #line 71 
          mbox->state = (enum octeon_mbox_state)((unsigned int)mbox->state & 4294967287U);
          #line 73 
          mbox->state = (enum octeon_mbox_state)((unsigned int)mbox->state | 16U);
          #line 76 
          mbox->mbox_resp.msg.u64 = msg.u64;
          #line 77 
          mbox->mbox_resp.q_no = mbox->q_no;
          #line 78 
          mbox->mbox_resp.recv_len = 1U;
        }
        else {
          #line 80 
          writeq(16045725885737590445ULL,mbox->mbox_read_reg);
          #line 82 
          mbox->state = (enum octeon_mbox_state)((unsigned int)mbox->state | 64U);
          #line 83 
          cif_spin_unlock_lock_of_octeon_mbox(& mbox->lock);
          #line 84 
          return 1;
        }
  #line 90 
  if (((unsigned int)mbox->state & 2U) != 0U) 
    #line 91 
    if (mbox->mbox_req.recv_len < (unsigned int)mbox->mbox_req.msg.s.len) 
      #line 92 
      ret = 0;
    else {
      #line 94 
      mbox->state = (enum octeon_mbox_state)((unsigned int)mbox->state & 4294967293U);
      #line 95 
      mbox->state = (enum octeon_mbox_state)((unsigned int)mbox->state | 4U);
      #line 96 
      ret = 1;
    }
  else 
    #line 99 
    if (((unsigned int)mbox->state & 16U) != 0U) 
      #line 100 
      if (mbox->mbox_resp.recv_len < (unsigned int)mbox->mbox_resp.msg.s.len) 
        #line 102 
        ret = 0;
      else {
        #line 104 
        mbox->state = (enum octeon_mbox_state)((unsigned int)mbox->state & 4294967279U);
        #line 106 
        mbox->state = (enum octeon_mbox_state)((unsigned int)mbox->state | 32U);
        #line 108 
        ret = 1;
      }
    else {
      #line 111 
      int __ret_warn_on = 1;
      #line 111 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 112 
        ldv_inline_asm();
        #line 113 
        ldv_inline_asm();
      }
      #line 111 
      long tmp = (long)(__ret_warn_on != 0);
    }
  #line 115 
  writeq(18446744073709551615ULL,mbox->mbox_read_reg);
  #line 117 
  cif_spin_unlock_lock_of_octeon_mbox(& mbox->lock);
  #line 119 
  return ret;
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.c"
int octeon_mbox_write(struct octeon_device *oct, struct octeon_mbox_cmd *mbox_cmd)
{
  #line 135 
  u32 count;
  #line 135 
  u32 i;
  #line 137 
  unsigned long flags;
  #line 134 
  struct octeon_mbox *mbox = oct->mbox[mbox_cmd->q_no];
  #line 135 
  u32 ret = 0U;
  #line 136 
  long timeout = (long)msecs_to_jiffies(1U);
  #line 139 
  cif___ldv_spin_lock_lock_of_octeon_mbox(& mbox->lock);
  #line 141 
  if ((unsigned int)mbox_cmd->msg.s.type == 1U && ((unsigned int)mbox->state & 4U) == 0U) {
    #line 143 
    cif_spin_unlock_irqrestore_lock_of_octeon_mbox(& mbox->lock,flags);
    #line 144 
    return 1;
  }
  #line 147 
  if ((unsigned int)mbox_cmd->msg.s.type == 0U && ((unsigned int)mbox->state & 1U) == 0U) {
    #line 149 
    cif_spin_unlock_irqrestore_lock_of_octeon_mbox(& mbox->lock,flags);
    #line 150 
    return 2;
  }
  #line 153 
  if ((unsigned int)mbox_cmd->msg.s.type == 0U) {
    #line 154 
    memcpy((void *)(& mbox->mbox_resp),(void *)mbox_cmd,296UL);
    #line 156 
    mbox->state = OCTEON_MBOX_STATE_RESPONSE_PENDING;
  }
  #line 159 
  cif_spin_unlock_irqrestore_lock_of_octeon_mbox(& mbox->lock,flags);
  #line 161 
  count = 0U;
  #line 163 
  while (1) {
    #line 163 
    if (! (readq(mbox->mbox_write_reg) != 1234605616436508552ULL)) 
                                                                   #line 163 
                                                                   break;
    {
      #line 165 
      u32 tmp_0;
      #line 164 
      schedule_timeout_uninterruptible(timeout);
      #line 165 
      tmp_0 = count;
      #line 165 
      count ++;
      #line 165 
      ;
      #line 165 
      if (tmp_0 == 1000U) {
        #line 166 
        ret = 1U;
        #line 167 
        break;
      }
    }
  }
  #line 171 
  if (ret == 0U) {
    #line 172 
    writeq(mbox_cmd->msg.u64,mbox->mbox_write_reg);
    #line 173 
    i = 0U;
    #line 173 
    while ((unsigned int)((int)mbox_cmd->msg.s.len + -1) > i) {
      #line 174 
      count = 0U;
      #line 175 
      while (1) {
        #line 175 
        if (! (readq(mbox->mbox_write_reg) != 18446744073709551615ULL)) 
          #line 175 
          break;
        {
          #line 178 
          u32 tmp_2;
          #line 177 
          schedule_timeout_uninterruptible(timeout);
          #line 178 
          tmp_2 = count;
          #line 178 
          count ++;
          #line 178 
          ;
          #line 178 
          if (tmp_2 == 1000U) {
            #line 179 
            ret = 1U;
            #line 180 
            break;
          }
        }
      }
      #line 183 
      if (ret == 0U) 
                     #line 184 
                     writeq(mbox_cmd->data[i],mbox->mbox_write_reg); else 
                                                                    #line 186 
                                                                    break;
      #line 173 
      i ++;
    }
  }
  #line 190 
  cif___ldv_spin_lock_lock_of_octeon_mbox(& mbox->lock);
  #line 191 
  if ((unsigned int)mbox_cmd->msg.s.type == 1U) {
    #line 192 
    mbox->state = OCTEON_MBOX_STATE_IDLE;
    #line 193 
    writeq(1234605616436508552ULL,mbox->mbox_read_reg);
  }
  else 
    #line 195 
    if ((unsigned int)mbox_cmd->msg.s.resp_needed == 0U || ret == 1U) {
      #line 197 
      mbox->state = (enum octeon_mbox_state)((unsigned int)mbox->state & 4294967287U);
      #line 198 
      if (((unsigned int)mbox->state & 6U) == 0U) 
                                                  #line 201 
                                                  mbox->state = OCTEON_MBOX_STATE_IDLE;
    }
  #line 204 
  cif_spin_unlock_irqrestore_lock_of_octeon_mbox(& mbox->lock,flags);
  #line 206 
  return (int)ret;
}

#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.c"
static void get_vf_stats(struct octeon_device *oct, struct oct_vf_stats *stats)
{
  #line 212 
  int i;
  #line 214 
  i = 0;
  #line 214 
  while (oct->num_iqs > (unsigned int)i) {
    #line 215 
    if (oct->instr_queue[i] == (struct octeon_instr_queue *)0) 
                                                               #line 216 
                                                               goto __Cont;
    #line 217 
    stats->tx_packets += (oct->instr_queue[i])->stats.tx_done;
    #line 218 
    stats->tx_bytes += (oct->instr_queue[i])->stats.tx_tot_bytes;
    #line 214 
    __Cont: 
            #line 214 
    i ++;
  }
  #line 221 
  i = 0;
  #line 221 
  while (oct->num_oqs > (unsigned int)i) {
    #line 222 
    if (oct->droq[i] == (struct octeon_droq *)0) 
                                                 #line 223 
                                                 goto __Cont_0;
    #line 224 
    stats->rx_packets += (oct->droq[i])->stats.rx_pkts_received;
    #line 225 
    stats->rx_bytes += (oct->droq[i])->stats.rx_bytes_received;
    #line 221 
    __Cont_0: 
              #line 221 
    i ++;
  }
  #line 227 
  return;
}

#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.c"
static int octeon_mbox_process_cmd(struct octeon_mbox *mbox, struct octeon_mbox_cmd *mbox_cmd)
{
  #line 239 
  struct octeon_device *oct = mbox->oct_dev;
  #line 241 
  switch ((int)mbox_cmd->msg.s.cmd) {
    #line 242 
    case 1: 
            #line 242 
    ;
    {
      #line 243 
      bool branch;
      #line 243 
      struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_mbox_process_cmd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.c", .format = (char *)"got vfactive sending data back\n", .lineno = (unsigned int)243U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 243 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
      #line 243 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 243 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug441,& (oct->pci_dev)->dev,(char *)"got vfactive sending data back\n");
    }
    #line 244 
    mbox_cmd->msg.s.type = (unsigned short)1U;
    #line 245 
    mbox_cmd->msg.s.resp_needed = (unsigned short)1U;
    #line 246 
    mbox_cmd->msg.s.len = (unsigned short)2U;
    #line 247 
    mbox_cmd->data[0] = 0ULL;
    #line 248 
    ((struct lio_version *)(& mbox_cmd->data[0]))->major = (unsigned short)1U;
    #line 250 
    ((struct lio_version *)(& mbox_cmd->data[0]))->minor = (unsigned short)7U;
    #line 252 
    ((struct lio_version *)(& mbox_cmd->data[0]))->micro = (unsigned short)2U;
    #line 254 
    memcpy((void *)(& mbox_cmd->msg.s.params),(void *)(& oct->pfvf_hsword),6UL);
    #line 256 
    octeon_mbox_write(oct,mbox_cmd);
    #line 257 
    break;
    #line 259 
    case 2: 
            #line 259 
    ;
    #line 260 
    _dev_info(& (oct->pci_dev)->dev,(char *)"got a request for FLR from VF that owns DPI ring %u\n",mbox->q_no);
    #line 263 
    pcie_flr(oct->sriov_info.dpiring_to_vfpcidev_lut[mbox->q_no]);
    #line 264 
    break;
    #line 266 
    case 4: 
            #line 266 
    ;
    #line 267 
    if ((unsigned int)oct->chip_id == 38674U) 
                                              #line 268 
                                              octeon_pf_changed_vf_macaddr(oct,(u8 *)(& mbox_cmd->msg.s.params));
    #line 270 
    break;
    #line 272 
    case 8: 
            #line 272 
    ;
    {
      #line 273 
      bool branch_0;
      #line 273 
      struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_mbox_process_cmd", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.c", .format = (char *)"Got VF stats request. Sending data back\n", .lineno = (unsigned int)273U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 273 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
      #line 273 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 273 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug442,& (oct->pci_dev)->dev,(char *)"Got VF stats request. Sending data back\n");
    }
    #line 274 
    mbox_cmd->msg.s.type = (unsigned short)1U;
    #line 275 
    mbox_cmd->msg.s.resp_needed = (unsigned short)1U;
    #line 276 
    mbox_cmd->msg.s.len = (unsigned short)7U;
    #line 278 
    get_vf_stats(oct,(struct oct_vf_stats *)(& mbox_cmd->data));
    #line 279 
    octeon_mbox_write(oct,mbox_cmd);
    #line 280 
    break;
    #line 281 
    default: 
             #line 281 
    ;
    #line 282 
    break;
  }
  #line 284 
  return 0;
}

#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.c"
int octeon_mbox_process_message(struct octeon_mbox *mbox)
{
  #line 294 
  struct octeon_mbox_cmd mbox_cmd;
  #line 295 
  unsigned long flags;
  #line 297 
  cif___ldv_spin_lock_lock_of_octeon_mbox(& mbox->lock);
  #line 299 
  if (((unsigned int)mbox->state & 64U) != 0U) {
    #line 300 
    if (((unsigned int)mbox->state & 24U) != 0U) {
      #line 302 
      memcpy((void *)(& mbox_cmd),(void *)(& mbox->mbox_resp),296UL);
      #line 304 
      mbox->state = OCTEON_MBOX_STATE_IDLE;
      #line 305 
      writeq(1234605616436508552ULL,mbox->mbox_read_reg);
      #line 306 
      cif_spin_unlock_irqrestore_lock_of_octeon_mbox(& mbox->lock,flags);
      #line 307 
      mbox_cmd.recv_status = 1U;
      #line 308 
      if (mbox_cmd.fn != (void (*)(void *, void *, void *))0) 
                                                              #line 309 
                                                              (*(mbox_cmd.fn))((void *)mbox->oct_dev,(void *)(& mbox_cmd),mbox_cmd.fn_arg);
      #line 311 
      return 0;
    }
    #line 314 
    mbox->state = OCTEON_MBOX_STATE_IDLE;
    #line 315 
    writeq(1234605616436508552ULL,mbox->mbox_read_reg);
    #line 316 
    cif_spin_unlock_irqrestore_lock_of_octeon_mbox(& mbox->lock,flags);
    #line 317 
    return 0;
  }
  #line 320 
  if (((unsigned int)mbox->state & 32U) != 0U) {
    #line 321 
    memcpy((void *)(& mbox_cmd),(void *)(& mbox->mbox_resp),296UL);
    #line 323 
    mbox->state = OCTEON_MBOX_STATE_IDLE;
    #line 324 
    writeq(1234605616436508552ULL,mbox->mbox_read_reg);
    #line 325 
    cif_spin_unlock_irqrestore_lock_of_octeon_mbox(& mbox->lock,flags);
    #line 326 
    mbox_cmd.recv_status = 0U;
    #line 327 
    if (mbox_cmd.fn != (void (*)(void *, void *, void *))0) 
                                                            #line 328 
                                                            (*(mbox_cmd.fn))((void *)mbox->oct_dev,(void *)(& mbox_cmd),mbox_cmd.fn_arg);
    #line 329 
    return 0;
  }
  #line 332 
  if (((unsigned int)mbox->state & 4U) != 0U) {
    #line 333 
    memcpy((void *)(& mbox_cmd),(void *)(& mbox->mbox_req),296UL);
    #line 335 
    if ((unsigned int)mbox_cmd.msg.s.resp_needed == 0U) {
      #line 336 
      mbox->state = (enum octeon_mbox_state)((unsigned int)mbox->state & 4294967291U);
      #line 337 
      if (((unsigned int)mbox->state & 8U) == 0U) 
                                                  #line 339 
                                                  mbox->state = OCTEON_MBOX_STATE_IDLE;
      #line 340 
      writeq(1234605616436508552ULL,mbox->mbox_read_reg);
    }
    #line 343 
    cif_spin_unlock_irqrestore_lock_of_octeon_mbox(& mbox->lock,flags);
    #line 344 
    octeon_mbox_process_cmd(mbox,& mbox_cmd);
    #line 345 
    return 0;
  }
  #line 348 
  cif_spin_unlock_irqrestore_lock_of_octeon_mbox(& mbox->lock,flags);
  {
    #line 349 
    int __ret_warn_on = 1;
    #line 349 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 350 
      ldv_inline_asm();
      #line 351 
      ldv_inline_asm();
    }
    #line 349 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 351 
  return 0;
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_mailbox.c"
int octeon_mbox_cancel(struct octeon_device *oct, int q_no)
{
  #line 357 
  struct octeon_mbox_cmd *mbox_cmd;
  #line 356 
  struct octeon_mbox *mbox = oct->mbox[q_no];
  #line 358 
  unsigned long flags = 0UL;
  #line 360 
  cif___ldv_spin_lock_lock_of_octeon_mbox(& mbox->lock);
  #line 361 
  mbox_cmd = & mbox->mbox_resp;
  #line 363 
  if (((unsigned int)mbox->state & 8U) == 0U) {
    #line 364 
    cif_spin_unlock_irqrestore_lock_of_octeon_mbox(& mbox->lock,flags);
    #line 365 
    return 1;
  }
  #line 368 
  mbox->state = OCTEON_MBOX_STATE_IDLE;
  #line 369 
  memset((void *)mbox_cmd,0,296UL);
  #line 370 
  writeq(1234605616436508552ULL,mbox->mbox_read_reg);
  #line 371 
  cif_spin_unlock_irqrestore_lock_of_octeon_mbox(& mbox->lock,flags);
  #line 373 
  return 0;
}

#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_mailbox.i.aux"
static void cif_spin_lock_lock_of_octeon_mbox(spinlock_t *lock)
{
  #line 669 
  ldv_spin_model_lock((char *)"lock_of_octeon_mbox");
  #line 671 
  spin_lock_0(lock);
  #line 672 
  return;
}

#line 675  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_mailbox.i.aux"
static void cif_spin_unlock_lock_of_octeon_mbox(spinlock_t *lock)
{
  #line 678 
  ldv_spin_model_unlock((char *)"lock_of_octeon_mbox");
  #line 680 
  spin_unlock_0(lock);
  #line 681 
  return;
}

#line 684  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_mailbox.i.aux"
static void cif___ldv_spin_lock_lock_of_octeon_mbox(spinlock_t *lock)
{
  #line 687 
  ldv_spin_model_lock((char *)"lock_of_octeon_mbox");
  #line 689 
  __ldv_spin_lock(lock);
  #line 690 
  return;
}

#line 693  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_mailbox.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_octeon_mbox(spinlock_t *lock, unsigned long flags)
{
  #line 696 
  ldv_spin_model_unlock((char *)"lock_of_octeon_mbox");
  #line 698 
  spin_unlock_irqrestore_1(lock,flags);
  #line 699 
  return;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_1(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn66xx_device.i.aux"
static void cif_spin_lock_lock_for_droq_int_enb_reg_of_octeon_cn6xxx(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_1(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 675  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn66xx_device.i.aux"
static void cif_spin_unlock_lock_for_droq_int_enb_reg_of_octeon_cn6xxx(spinlock_t *lock);
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.h"
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
int lio_setup_cn66xx_octeon_device(struct octeon_device *oct);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.h"
#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
int lio_validate_cn6xxx_config_info(struct octeon_device *oct, struct octeon_config *conf6xxx);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
int lio_cn6xxx_soft_reset(struct octeon_device *oct)
{
  #line 31 
  writeq(255ULL,(void *)(oct->mmio[0].hw_addr + 48U));
  {
    #line 33 
    bool branch;
    #line 33 
    struct _ddebug __UNIQUE_ID_ddebug440 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"lio_cn6xxx_soft_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c", .format = (char *)"BIST enabled for soft reset\n", .lineno = (unsigned int)33U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 33 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug440.key.dd_key_false.key,(_Bool)0);
    #line 33 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 33 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug440,& (oct->pci_dev)->dev,(char *)"BIST enabled for soft reset\n");
  }
  #line 35 
  lio_pci_writeq(oct,1ULL,289171558106936ULL);
  #line 36 
  writeq(4660ULL,(void *)(oct->mmio[0].hw_addr + 960U));
  #line 38 
  lio_pci_readq(oct,289171558106944ULL);
  #line 39 
  lio_pci_writeq(oct,1ULL,289171558106944ULL);
  {
    #line 42 
    unsigned long __ms = 100UL;
    #line 42 
    while (1) {
      #line 42 
      unsigned long tmp_0;
      #line 42 
      tmp_0 = __ms;
      #line 42 
      __ms --;
      #line 42 
      ;
      #line 42 
      if (! (tmp_0 != 0UL)) 
                            #line 42 
                            break;
      #line 42 
      __const_udelay(4295000UL);
    }
  }
  #line 44 
  if (readq((void *)(oct->mmio[0].hw_addr + 960U)) != 0ULL) {
    #line 45 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Soft reset failed\n");
    #line 46 
    return 1;
  }
  {
    #line 49 
    bool branch_0;
    #line 49 
    struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"lio_cn6xxx_soft_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c", .format = (char *)"Reset completed\n", .lineno = (unsigned int)49U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 49 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
    #line 49 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 49 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug441,& (oct->pci_dev)->dev,(char *)"Reset completed\n");
  }
  #line 50 
  writeq(255ULL,(void *)(oct->mmio[0].hw_addr + 48U));
  #line 52 
  return 0;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
void lio_cn6xxx_enable_error_reporting(struct octeon_device *oct)
{
  #line 57 
  u32 val;
  #line 59 
  pci_read_config_dword(oct->pci_dev,120,& val);
  #line 60 
  if ((val & 786432U) != 0U) 
                             #line 61 
                             _dev_err(& (oct->pci_dev)->dev,(char *)"PCI-E Link error detected: 0x%08x\n",val & 786432U);
  #line 65 
  val |= 15U;
  {
    #line 67 
    bool branch;
    #line 67 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"lio_cn6xxx_enable_error_reporting", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c", .format = (char *)"Enabling PCI-E error reporting..\n", .lineno = (unsigned int)67U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 67 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 67 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 67 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug442,& (oct->pci_dev)->dev,(char *)"Enabling PCI-E error reporting..\n");
  }
  #line 68 
  pci_write_config_dword(oct->pci_dev,120,val);
  #line 69 
  return;
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
void lio_cn6xxx_setup_pcie_mps(struct octeon_device *oct, enum octeon_pcie_mps mps)
{
  #line 74 
  u32 val;
  #line 75 
  u64 r64;
  #line 78 
  pci_read_config_dword(oct->pci_dev,120,& val);
  #line 80 
  if (mps == PCIE_MPS_DEFAULT) 
                               #line 81 
                               mps = (enum octeon_pcie_mps)((val >> 5) & 7U);
  else {
    #line 83 
    val &= 4294967071U;
    #line 84 
    val = (unsigned int)((int)mps << 5) | val;
    #line 85 
    pci_write_config_dword(oct->pci_dev,120,val);
  }
  #line 89 
  r64 = lio_pci_readq(oct,(unsigned long long)((int)oct->pcie_port * 16) + 526666069707008ULL);
  #line 90 
  r64 = (unsigned long long)((int)mps << 4) | r64;
  #line 91 
  lio_pci_writeq(oct,r64,(unsigned long long)((int)oct->pcie_port * 16) + 526666069707008ULL);
  #line 92 
  return;
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
void lio_cn6xxx_setup_pcie_mrrs(struct octeon_device *oct, enum octeon_pcie_mrrs mrrs)
{
  #line 97 
  u32 val;
  #line 98 
  u64 r64;
  #line 101 
  pci_read_config_dword(oct->pci_dev,120,& val);
  #line 103 
  if (mrrs == PCIE_MRRS_DEFAULT) 
                                 #line 104 
                                 mrrs = (enum octeon_pcie_mrrs)((val >> 12) & 7U);
  else {
    #line 106 
    val &= 4294938623U;
    #line 107 
    val = (unsigned int)((int)mrrs << 12) | val;
    #line 108 
    pci_write_config_dword(oct->pci_dev,120,val);
  }
  #line 112 
  r64 = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(((int)oct->pcie_port + 984) * 16)));
  #line 113 
  r64 = (unsigned long long)mrrs | r64;
  #line 114 
  writeq(r64,(void *)(oct->mmio[0].hw_addr + (unsigned long)(((int)oct->pcie_port + 984) * 16)));
  #line 117 
  r64 = lio_pci_readq(oct,(unsigned long long)((int)oct->pcie_port * 16) + 526666069707008ULL);
  #line 118 
  r64 = (unsigned long long)mrrs | r64;
  #line 119 
  lio_pci_writeq(oct,r64,(unsigned long long)((int)oct->pcie_port * 16) + 526666069707008ULL);
  #line 120 
  return;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
u32 lio_cn6xxx_coprocessor_clock(struct octeon_device *oct)
{
  #line 127 
  return ((unsigned int)(lio_pci_readq(oct,307863255782912ULL) >> 24) & 63U) * 50U;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
u32 lio_cn6xxx_get_oq_ticks(struct octeon_device *oct, u32 time_intr_in_us)
{
  #line 134 
  u32 oqticks_per_us = lio_cn6xxx_coprocessor_clock(oct);
  #line 141 
  oqticks_per_us *= 1000U;
  #line 144 
  oqticks_per_us /= 1024U;
  #line 149 
  oqticks_per_us *= time_intr_in_us;
  #line 150 
  oqticks_per_us /= 1000U;
  #line 152 
  return oqticks_per_us;
}

#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
void lio_cn6xxx_setup_global_input_regs(struct octeon_device *oct)
{
  #line 158 
  writel(80U,(void *)(oct->mmio[0].hw_addr + 4464U));
  #line 162 
  writeq(18446744073709551615ULL,(void *)(oct->mmio[0].hw_addr + 4512U));
  #line 166 
  writeq((unsigned long long)oct->pcie_port * 6148914691236517205ULL,(void *)(oct->mmio[0].hw_addr + 4528U));
  #line 167 
  return;
}

#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
static void lio_cn66xx_setup_pkt_ctl_regs(struct octeon_device *oct)
{
  #line 172 
  u64 pktctl;
  #line 174 
  struct octeon_cn6xxx *cn6xxx = (struct octeon_cn6xxx *)oct->chip;
  #line 176 
  pktctl = readq((void *)(oct->mmio[0].hw_addr + 4640U));
  #line 179 
  if ((unsigned int)(cn6xxx->conf)->oq.max_oqs <= 4U) 
                                                      #line 181 
                                                      pktctl &= 18446744073709551599ULL; else 
                                                                    #line 183 
                                                                    pktctl |= 16ULL;
  #line 185 
  if ((unsigned int)(cn6xxx->conf)->misc.enable_sli_oq_bp != 0U) 
                                                                 #line 186 
                                                                 pktctl |= 15ULL; else 
                                                                    #line 189 
                                                                    pktctl &= 18446744073709551600ULL;
  #line 190 
  writeq(pktctl,(void *)(oct->mmio[0].hw_addr + 4640U));
  #line 191 
  return;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
void lio_cn6xxx_setup_global_output_regs(struct octeon_device *oct)
{
  #line 195 
  u32 time_threshold;
  #line 196 
  struct octeon_cn6xxx *cn6xxx = (struct octeon_cn6xxx *)oct->chip;
  #line 199 
  writeq((unsigned long long)oct->pcie_port * 6148914691236517205ULL,(void *)(oct->mmio[0].hw_addr + 4320U));
  #line 202 
  if ((unsigned int)(cn6xxx->conf)->misc.enable_sli_oq_bp != 0U) 
                                                                 #line 203 
                                                                 writeq(32ULL,(void *)(oct->mmio[0].hw_addr + 4480U)); else 
                                                                    #line 206 
                                                                    writeq(0ULL,(void *)(oct->mmio[0].hw_addr + 4480U));
  #line 210 
  writel(0U,(void *)(oct->mmio[0].hw_addr + 4304U));
  #line 215 
  writel(4294967295U,(void *)(oct->mmio[0].hw_addr + 4224U));
  #line 220 
  writel(0U,(void *)(oct->mmio[0].hw_addr + 4144U));
  #line 221 
  writel(0U,(void *)(oct->mmio[0].hw_addr + 4160U));
  #line 228 
  writeq(0ULL,(void *)(oct->mmio[0].hw_addr + 4176U));
  #line 232 
  writel(0U,(void *)(oct->mmio[0].hw_addr + 4240U));
  #line 233 
  writel(0U,(void *)(oct->mmio[0].hw_addr + 4256U));
  #line 234 
  writeq(6148914691236517205ULL,(void *)(oct->mmio[0].hw_addr + 4272U));
  #line 238 
  writel((unsigned int)(cn6xxx->conf)->oq.oq_intr_pkt,(void *)(oct->mmio[0].hw_addr + 4384U));
  #line 240 
  time_threshold = lio_cn6xxx_get_oq_ticks(oct,(unsigned int)(cn6xxx->conf)->oq.oq_intr_time);
  #line 244 
  writel(time_threshold,(void *)(oct->mmio[0].hw_addr + 4388U));
  #line 245 
  return;
}

#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
static int lio_cn6xxx_setup_device_regs(struct octeon_device *oct)
{
  #line 249 
  lio_cn6xxx_setup_pcie_mps(oct,(enum octeon_pcie_mps)PCIE_MPS_DEFAULT);
  #line 250 
  lio_cn6xxx_setup_pcie_mrrs(oct,(enum octeon_pcie_mrrs)PCIE_MRRS_512B);
  #line 251 
  lio_cn6xxx_enable_error_reporting(oct);
  #line 253 
  lio_cn6xxx_setup_global_input_regs(oct);
  #line 254 
  lio_cn66xx_setup_pkt_ctl_regs(oct);
  #line 255 
  lio_cn6xxx_setup_global_output_regs(oct);
  #line 260 
  writeq(2097152ULL,(void *)(oct->mmio[0].hw_addr + 736U));
  #line 261 
  return 0;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
void lio_cn6xxx_setup_iq_regs(struct octeon_device *oct, u32 iq_no)
{
  #line 266 
  struct octeon_instr_queue *iq = oct->instr_queue[iq_no];
  #line 268 
  writeq(0ULL,(void *)(oct->mmio[0].hw_addr + (unsigned long)((iq_no + 832U) * 16U)));
  #line 271 
  writeq(iq->base_addr_dma,(void *)(oct->mmio[0].hw_addr + (unsigned long)((iq_no + 640U) * 16U)));
  #line 273 
  writel(iq->max_count,(void *)(oct->mmio[0].hw_addr + (unsigned long)((iq_no + 768U) * 16U)));
  #line 278 
  iq->doorbell_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)((iq_no + 704U) * 16U));
  #line 279 
  iq->inst_cnt_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)((iq_no + 512U) * 16U));
  {
    #line 281 
    bool branch;
    #line 281 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"lio_cn6xxx_setup_iq_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c", .format = (char *)"InstQ[%d]:dbell reg @ 0x%p instcnt_reg @ 0x%p\n", .lineno = (unsigned int)281U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 281 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 281 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 281 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug443,& (oct->pci_dev)->dev,(char *)"InstQ[%d]:dbell reg @ 0x%p instcnt_reg @ 0x%p\n",iq_no,iq->doorbell_reg,iq->inst_cnt_reg);
  }
  #line 287 
  iq->reset_instr_cnt = readl(iq->inst_cnt_reg);
  #line 288 
  return;
}

#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
static void lio_cn66xx_setup_iq_regs(struct octeon_device *oct, u32 iq_no)
{
  #line 292 
  lio_cn6xxx_setup_iq_regs(oct,iq_no);
  #line 297 
  writeq(18446744069414584320ULL,(void *)(oct->mmio[0].hw_addr + (unsigned long)((iq_no + 896U) * 16U)));
  #line 298 
  return;
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
void lio_cn6xxx_setup_oq_regs(struct octeon_device *oct, u32 oq_no)
{
  #line 303 
  u32 intr;
  #line 304 
  struct octeon_droq *droq = oct->droq[oq_no];
  #line 306 
  writeq((unsigned long long)droq->desc_ring_dma,(void *)(oct->mmio[0].hw_addr + (unsigned long)((oq_no + 320U) * 16U)));
  #line 308 
  writel(droq->max_count,(void *)(oct->mmio[0].hw_addr + (unsigned long)((oq_no + 448U) * 16U)));
  #line 310 
  writel(droq->buffer_size,(void *)(oct->mmio[0].hw_addr + (unsigned long)((oq_no + 192U) * 16U)));
  #line 314 
  droq->pkts_sent_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)((oq_no + 576U) * 16U));
  #line 316 
  droq->pkts_credit_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)((oq_no + 384U) * 16U));
  #line 320 
  intr = readl((void *)(oct->mmio[0].hw_addr + 4448U));
  #line 321 
  intr = (unsigned int)(1 << oq_no) | intr;
  #line 322 
  writel(intr,(void *)(oct->mmio[0].hw_addr + 4448U));
  #line 325 
  intr = readl((void *)(oct->mmio[0].hw_addr + 4432U));
  #line 326 
  intr = (unsigned int)(1 << oq_no) | intr;
  #line 327 
  writel(intr,(void *)(oct->mmio[0].hw_addr + 4432U));
  #line 328 
  return;
}

#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
int lio_cn6xxx_enable_io_queues(struct octeon_device *oct)
{
  #line 332 
  u32 mask;
  #line 334 
  mask = readl((void *)(oct->mmio[0].hw_addr + 4128U));
  #line 335 
  mask = (unsigned int)oct->io_qmask.iq64B | mask;
  #line 336 
  writel(mask,(void *)(oct->mmio[0].hw_addr + 4128U));
  #line 338 
  mask = readl((void *)(oct->mmio[0].hw_addr + 4096U));
  #line 339 
  mask = (unsigned int)oct->io_qmask.iq | mask;
  #line 340 
  writel(mask,(void *)(oct->mmio[0].hw_addr + 4096U));
  #line 342 
  mask = readl((void *)(oct->mmio[0].hw_addr + 4112U));
  #line 343 
  mask = (unsigned int)oct->io_qmask.oq | mask;
  #line 344 
  writel(mask,(void *)(oct->mmio[0].hw_addr + 4112U));
  #line 346 
  return 0;
}

#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
void lio_cn6xxx_disable_io_queues(struct octeon_device *oct)
{
  #line 351 
  int i;
  #line 352 
  u32 mask;
  #line 353 
  u32 d32;
  #line 352 
  u32 loop = 250U;
  #line 356 
  mask = readl((void *)(oct->mmio[0].hw_addr + 4096U));
  #line 357 
  mask = (unsigned int)oct->io_qmask.iq ^ mask;
  #line 358 
  writel(mask,(void *)(oct->mmio[0].hw_addr + 4096U));
  #line 361 
  mask = (unsigned int)oct->io_qmask.iq;
  #line 362 
  d32 = readl((void *)(oct->mmio[0].hw_addr + 4596U));
  #line 363 
  while (1) {
    #line 363 
    if ((d32 & mask) != mask) {
      #line 363 
      u32 tmp;
      #line 363 
      tmp = loop;
      #line 363 
      loop --;
      #line 363 
      ;
      #line 363 
      if (! (tmp != 0U)) 
                         #line 363 
                         break;
    }
    else 
         #line 363 
         break;
    #line 364 
    d32 = readl((void *)(oct->mmio[0].hw_addr + 4596U));
    #line 365 
    schedule_timeout_uninterruptible(1L);
  }
  #line 369 
  i = 0;
  #line 369 
  while (1) {
    #line 369 
    int tmp_0;
    #line 369 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 369 
                                              tmp_0 = 64; else 
                                                               #line 369 
                                                               tmp_0 = 32;
    #line 369 
    ;
    #line 369 
    if (! (tmp_0 > i)) 
                       #line 369 
                       break;
    #line 370 
    if (((oct->io_qmask.iq >> i) & 1ULL) == 0ULL) 
                                                  #line 371 
                                                  goto __Cont;
    #line 372 
    writel(4294967295U,(void *)(oct->mmio[0].hw_addr + (unsigned long)((i + 704) * 16)));
    #line 373 
    d32 = readl((void *)(oct->mmio[0].hw_addr + (unsigned long)((i + 704) * 16)));
    #line 369 
    __Cont: 
            #line 369 
    i ++;
  }
  #line 377 
  mask = readl((void *)(oct->mmio[0].hw_addr + 4112U));
  #line 378 
  mask = (unsigned int)oct->io_qmask.oq ^ mask;
  #line 379 
  writel(mask,(void *)(oct->mmio[0].hw_addr + 4112U));
  #line 382 
  loop = 250U;
  #line 383 
  mask = (unsigned int)oct->io_qmask.oq;
  #line 384 
  d32 = readl((void *)(oct->mmio[0].hw_addr + 4592U));
  #line 385 
  while (1) {
    #line 385 
    if ((d32 & mask) != mask) {
      #line 385 
      u32 tmp_1;
      #line 385 
      tmp_1 = loop;
      #line 385 
      loop --;
      #line 385 
      ;
      #line 385 
      if (! (tmp_1 != 0U)) 
                           #line 385 
                           break;
    }
    else 
         #line 385 
         break;
    #line 386 
    d32 = readl((void *)(oct->mmio[0].hw_addr + 4592U));
    #line 387 
    schedule_timeout_uninterruptible(1L);
  }
  #line 392 
  i = 0;
  #line 392 
  while (1) {
    #line 392 
    int tmp_2;
    #line 392 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 392 
                                              tmp_2 = 64; else 
                                                               #line 392 
                                                               tmp_2 = 32;
    #line 392 
    ;
    #line 392 
    if (! (tmp_2 > i)) 
                       #line 392 
                       break;
    #line 393 
    if (((oct->io_qmask.oq >> i) & 1ULL) == 0ULL) 
                                                  #line 394 
                                                  goto __Cont_0;
    #line 395 
    writel(4294967295U,(void *)(oct->mmio[0].hw_addr + (unsigned long)((i + 384) * 16)));
    #line 396 
    d32 = readl((void *)(oct->mmio[0].hw_addr + (unsigned long)((i + 384) * 16)));
    #line 398 
    d32 = readl((void *)(oct->mmio[0].hw_addr + (unsigned long)((i + 576) * 16)));
    #line 399 
    writel(d32,(void *)(oct->mmio[0].hw_addr + (unsigned long)((i + 576) * 16)));
    #line 392 
    __Cont_0: 
              #line 392 
    i ++;
  }
  #line 402 
  d32 = readl((void *)(oct->mmio[0].hw_addr + 4400U));
  #line 403 
  if (d32 != 0U) 
                 #line 404 
                 writel(d32,(void *)(oct->mmio[0].hw_addr + 4400U));
  #line 406 
  d32 = readl((void *)(oct->mmio[0].hw_addr + 4416U));
  #line 407 
  if (d32 != 0U) 
                 #line 408 
                 writel(d32,(void *)(oct->mmio[0].hw_addr + 4416U));
  #line 409 
  return;
}

#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
void lio_cn6xxx_bar1_idx_setup(struct octeon_device *oct, u64 core_addr, u32 idx, int valid)
{
  #line 417 
  u64 bar1;
  #line 419 
  if (valid == 0) {
    #line 420 
    bar1 = lio_pci_readq(oct,((unsigned long long)oct->pcie_port * 16777216ULL + (unsigned long long)(idx * 8U)) + 307866477002920ULL);
    #line 421 
    lio_pci_writeq(oct,bar1 & 4294967294ULL,((unsigned long long)oct->pcie_port * 16777216ULL + (unsigned long long)(idx * 8U)) + 307866477002920ULL);
    #line 423 
    bar1 = lio_pci_readq(oct,((unsigned long long)oct->pcie_port * 16777216ULL + (unsigned long long)(idx * 8U)) + 307866477002920ULL);
    #line 424 
    return;
  }
  #line 430 
  lio_pci_writeq(oct,((core_addr >> 22) << 4) | 11ULL,((unsigned long long)oct->pcie_port * 16777216ULL + (unsigned long long)(idx * 8U)) + 307866477002920ULL);
  #line 433 
  bar1 = lio_pci_readq(oct,((unsigned long long)oct->pcie_port * 16777216ULL + (unsigned long long)(idx * 8U)) + 307866477002920ULL);
  #line 434 
  return;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
void lio_cn6xxx_bar1_idx_write(struct octeon_device *oct, u32 idx, u32 mask)
{
  #line 440 
  lio_pci_writeq(oct,(unsigned long long)mask,((unsigned long long)oct->pcie_port * 16777216ULL + (unsigned long long)(idx * 8U)) + 307866477002920ULL);
  #line 441 
  return;
}

#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
u32 lio_cn6xxx_bar1_idx_read(struct octeon_device *oct, u32 idx)
{
  #line 445 
  return (unsigned int)lio_pci_readq(oct,
                    ((unsigned long long)oct->pcie_port * 16777216ULL + (unsigned long long)(
                     idx * 8U)) + 307866477002920ULL);
}

#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
u32 lio_cn6xxx_update_read_index(struct octeon_instr_queue *iq)
{
  #line 451 
  u32 new_idx = readl(iq->inst_cnt_reg);
  #line 457 
  if (iq->reset_instr_cnt < new_idx) 
                                     #line 458 
                                     new_idx -= iq->reset_instr_cnt; else 
                                                                    #line 460 
                                                                    new_idx -= iq->reset_instr_cnt;
  #line 465 
  new_idx %= iq->max_count;
  #line 467 
  return new_idx;
}

#line 470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
void lio_cn6xxx_enable_interrupt(struct octeon_device *oct, u8 unused)
{
  #line 473 
  struct octeon_cn6xxx *cn6xxx = (struct octeon_cn6xxx *)oct->chip;
  #line 474 
  u64 mask = cn6xxx->intr_mask64 | 4294967296ULL;
  #line 477 
  writeq(mask,(void *)cn6xxx->intr_enb_reg64);
  #line 478 
  return;
}

#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
void lio_cn6xxx_disable_interrupt(struct octeon_device *oct, u8 unused)
{
  #line 483 
  struct octeon_cn6xxx *cn6xxx = (struct octeon_cn6xxx *)oct->chip;
  #line 486 
  writeq(0ULL,(void *)cn6xxx->intr_enb_reg64);
  #line 487 
  return;
}

#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
static void lio_cn6xxx_get_pcie_qlmport(struct octeon_device *oct)
{
  #line 494 
  oct->pcie_port = (unsigned short)((unsigned int)((unsigned short)readl((void *)(oct->mmio[0].hw_addr + 15872U))) & 255U);
  {
    #line 496 
    bool branch;
    #line 496 
    struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"lio_cn6xxx_get_pcie_qlmport", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c", .format = (char *)"Using PCIE Port %d\n", .lineno = (unsigned int)496U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 496 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
    #line 496 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 496 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug444,& (oct->pci_dev)->dev,(char *)"Using PCIE Port %d\n",(int)oct->pcie_port);
  }
  #line 498 
  return;
}

#line 500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
static void lio_cn6xxx_process_pcie_error_intr(struct octeon_device *oct, u64 intr64)
{
  #line 502 
  _dev_err(& (oct->pci_dev)->dev,(char *)"Error Intr: 0x%016llx\n",(long long)intr64);
  #line 503 
  return;
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
static int lio_cn6xxx_process_droq_intr_regs(struct octeon_device *oct)
{
  #line 508 
  struct octeon_droq *droq;
  #line 509 
  int oq_no;
  #line 510 
  u32 pkt_count;
  #line 510 
  u32 droq_time_mask;
  #line 510 
  u32 droq_mask;
  #line 510 
  u32 droq_int_enb;
  #line 511 
  u32 droq_cnt_enb;
  #line 511 
  u32 droq_cnt_mask;
  #line 513 
  droq_cnt_enb = readl((void *)(oct->mmio[0].hw_addr + 4432U));
  #line 514 
  droq_cnt_mask = readl((void *)(oct->mmio[0].hw_addr + 4400U));
  #line 515 
  droq_mask = droq_cnt_mask & droq_cnt_enb;
  #line 517 
  droq_time_mask = readl((void *)(oct->mmio[0].hw_addr + 4416U));
  #line 518 
  droq_int_enb = readl((void *)(oct->mmio[0].hw_addr + 4448U));
  #line 519 
  droq_mask = (droq_time_mask & droq_int_enb) | droq_mask;
  #line 521 
  droq_mask = (unsigned int)oct->io_qmask.oq & droq_mask;
  #line 523 
  oct->droq_intr = 0ULL;
  #line 525 
  oq_no = 0;
  #line 525 
  while (1) {
    #line 525 
    int tmp;
    #line 525 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 525 
                                              tmp = 64; else 
                                                             #line 525 
                                                             tmp = 32;
    #line 525 
    ;
    #line 525 
    if (! (tmp > oq_no)) 
                         #line 525 
                         break;
    #line 526 
    if ((((unsigned long long)droq_mask >> oq_no) & 1ULL) == 0ULL) 
                                                                   #line 527 
                                                                   goto __Cont;
    #line 529 
    droq = oct->droq[oq_no];
    #line 530 
    pkt_count = octeon_droq_check_hw_for_pkts(droq);
    #line 531 
    if (pkt_count != 0U) {
      #line 532 
      oct->droq_intr |= 1ULL << oq_no;
      #line 533 
      if (droq->ops.poll_mode != 0U) {
        #line 534 
        u32 value;
        #line 535 
        u32 reg;
        #line 537 
        struct octeon_cn6xxx *cn6xxx = (struct octeon_cn6xxx *)oct->chip;
        #line 541 
        cif_spin_lock_lock_for_droq_int_enb_reg_of_octeon_cn6xxx(& cn6xxx->lock_for_droq_int_enb_reg);
        #line 543 
        reg = 4448U;
        #line 544 
        value = readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg));
        #line 545 
        value = (unsigned int)(~ (1 << oq_no)) & value;
        #line 546 
        writel(value,(void *)(oct->mmio[0].hw_addr + (unsigned long)reg));
        #line 547 
        reg = 4432U;
        #line 548 
        value = readl((void *)(oct->mmio[0].hw_addr + (unsigned long)reg));
        #line 549 
        value = (unsigned int)(~ (1 << oq_no)) & value;
        #line 550 
        writel(value,(void *)(oct->mmio[0].hw_addr + (unsigned long)reg));
        #line 552 
        cif_spin_unlock_lock_for_droq_int_enb_reg_of_octeon_cn6xxx(& cn6xxx->lock_for_droq_int_enb_reg);
      }
    }
    #line 525 
    __Cont: 
            #line 525 
    oq_no ++;
  }
  #line 557 
  droq_time_mask = (unsigned int)oct->io_qmask.oq & droq_time_mask;
  #line 558 
  droq_cnt_mask = (unsigned int)oct->io_qmask.oq & droq_cnt_mask;
  #line 561 
  if (droq_time_mask != 0U) 
                            #line 562 
                            writel(droq_time_mask,(void *)(oct->mmio[0].hw_addr + 4416U));
  #line 564 
  if (droq_cnt_mask != 0U) 
                           #line 565 
                           writel(droq_cnt_mask,(void *)(oct->mmio[0].hw_addr + 4400U));
  #line 567 
  return 0;
}

#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
irqreturn_t lio_cn6xxx_process_interrupt_regs(void *dev)
{
  #line 574 
  u64 intr64;
  #line 572 
  struct octeon_device *oct = (struct octeon_device *)dev;
  #line 573 
  struct octeon_cn6xxx *cn6xxx = (struct octeon_cn6xxx *)oct->chip;
  #line 576 
  intr64 = readq((void *)cn6xxx->intr_sum_reg64);
  #line 582 
  if (intr64 + 18446744073709551615ULL > 18446744073709551613ULL) 
                                                                  #line 583 
                                                                  return IRQ_NONE;
  #line 585 
  oct->int_status = 0U;
  #line 587 
  if ((intr64 & 1440870405781896972ULL) != 0ULL) 
                                                 #line 588 
                                                 lio_cn6xxx_process_pcie_error_intr(oct,intr64);
  #line 590 
  if ((intr64 & 48ULL) != 0ULL) {
    #line 591 
    lio_cn6xxx_process_droq_intr_regs(oct);
    #line 592 
    oct->int_status |= 4U;
  }
  #line 595 
  if ((intr64 & 4294967296ULL) != 0ULL) 
                                        #line 596 
                                        oct->int_status |= 1U;
  #line 598 
  if ((intr64 & 8589934592ULL) != 0ULL) 
                                        #line 599 
                                        oct->int_status |= 2U;
  #line 602 
  writeq(intr64,(void *)cn6xxx->intr_sum_reg64);
  #line 604 
  return IRQ_HANDLED;
}

#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
void lio_cn6xxx_setup_reg_address(struct octeon_device *oct, void *chip, struct octeon_reg_list *reg_list)
{
  #line 611 
  u8 *bar0_pciaddr = oct->mmio[0].hw_addr;
  #line 612 
  struct octeon_cn6xxx *cn6xxx = (struct octeon_cn6xxx *)chip;
  #line 614 
  reg_list->pci_win_wr_addr_hi = (u32 *)(bar0_pciaddr + 4U);
  #line 616 
  reg_list->pci_win_wr_addr_lo = (u32 *)bar0_pciaddr;
  #line 618 
  reg_list->pci_win_wr_addr = (u64 *)bar0_pciaddr;
  #line 621 
  reg_list->pci_win_rd_addr_hi = (u32 *)(bar0_pciaddr + 20U);
  #line 623 
  reg_list->pci_win_rd_addr_lo = (u32 *)(bar0_pciaddr + 16U);
  #line 625 
  reg_list->pci_win_rd_addr = (u64 *)(bar0_pciaddr + 16U);
  #line 628 
  reg_list->pci_win_wr_data_hi = (u32 *)(bar0_pciaddr + 36U);
  #line 630 
  reg_list->pci_win_wr_data_lo = (u32 *)(bar0_pciaddr + 32U);
  #line 632 
  reg_list->pci_win_wr_data = (u64 *)(bar0_pciaddr + 32U);
  #line 635 
  reg_list->pci_win_rd_data_hi = (u32 *)(bar0_pciaddr + 68U);
  #line 637 
  reg_list->pci_win_rd_data_lo = (u32 *)(bar0_pciaddr + 64U);
  #line 639 
  reg_list->pci_win_rd_data = (u64 *)(bar0_pciaddr + 64U);
  #line 642 
  lio_cn6xxx_get_pcie_qlmport(oct);
  #line 644 
  cn6xxx->intr_sum_reg64 = bar0_pciaddr + 816U;
  #line 645 
  cn6xxx->intr_mask64 = 1440870624826212156ULL;
  #line 646 
  cn6xxx->intr_enb_reg64 = bar0_pciaddr + (unsigned long)(((int)oct->pcie_port + 52) * 16);
  #line 648 
  return;
}

#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
int lio_setup_cn66xx_octeon_device(struct octeon_device *oct)
{
  #line 652 
  struct octeon_cn6xxx *cn6xxx = (struct octeon_cn6xxx *)oct->chip;
  #line 654 
  if (octeon_map_pci_barx(oct,0,0) != 0) 
                                         #line 655 
                                         return 1;
  #line 657 
  if (octeon_map_pci_barx(oct,1,67108864) != 0) {
    #line 658 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s CN66XX BAR1 map failed\n",(char *)"lio_setup_cn66xx_octeon_device");
    #line 660 
    octeon_unmap_pci_barx_0(oct,0);
    #line 661 
    return 1;
  }
  #line 664 
  spinlock_check(& cn6xxx->lock_for_droq_int_enb_reg);
  {
    #line 664 
    struct lock_class_key __key;
    #line 664 
    __raw_spin_lock_init(& cn6xxx->lock_for_droq_int_enb_reg.__anonCompField_spinlock_25.rlock,(char *)"&(&cn6xxx->lock_for_droq_int_enb_reg)->rlock",& __key);
  }
  #line 666 
  oct->fn_list.setup_iq_regs = & lio_cn66xx_setup_iq_regs;
  #line 667 
  oct->fn_list.setup_oq_regs = & lio_cn6xxx_setup_oq_regs;
  #line 669 
  oct->fn_list.soft_reset = & lio_cn6xxx_soft_reset;
  #line 670 
  oct->fn_list.setup_device_regs = & lio_cn6xxx_setup_device_regs;
  #line 671 
  oct->fn_list.update_iq_read_idx = & lio_cn6xxx_update_read_index;
  #line 673 
  oct->fn_list.bar1_idx_setup = & lio_cn6xxx_bar1_idx_setup;
  #line 674 
  oct->fn_list.bar1_idx_write = & lio_cn6xxx_bar1_idx_write;
  #line 675 
  oct->fn_list.bar1_idx_read = & lio_cn6xxx_bar1_idx_read;
  #line 677 
  oct->fn_list.process_interrupt_regs = & lio_cn6xxx_process_interrupt_regs;
  #line 678 
  oct->fn_list.enable_interrupt = & lio_cn6xxx_enable_interrupt;
  #line 679 
  oct->fn_list.disable_interrupt = & lio_cn6xxx_disable_interrupt;
  #line 681 
  oct->fn_list.enable_io_queues = & lio_cn6xxx_enable_io_queues;
  #line 682 
  oct->fn_list.disable_io_queues = & lio_cn6xxx_disable_io_queues;
  #line 684 
  lio_cn6xxx_setup_reg_address(oct,oct->chip,& oct->reg_list);
  #line 686 
  cn6xxx->conf = (struct octeon_config *)oct_get_config_info(oct,(unsigned short)0);
  #line 688 
  if (cn6xxx->conf == (struct octeon_config *)0) {
    #line 689 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s No Config found for CN66XX\n",(char *)"lio_setup_cn66xx_octeon_device");
    #line 691 
    octeon_unmap_pci_barx_0(oct,0);
    #line 692 
    octeon_unmap_pci_barx_0(oct,1);
    #line 693 
    return 1;
  }
  #line 696 
  oct->coproc_clock_rate = (unsigned long long)lio_cn6xxx_coprocessor_clock(oct) * 1000000ULL;
  #line 698 
  return 0;
}

#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn66xx_device.c"
int lio_validate_cn6xxx_config_info(struct octeon_device *oct, struct octeon_config *conf6xxx)
{
  #line 704 
  if ((unsigned int)conf6xxx->iq.max_iqs > 32U) {
    #line 705 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: Num IQ (%d) exceeds Max (%d)\n",(char *)"lio_validate_cn6xxx_config_info",(int)conf6xxx->iq.max_iqs,32);
    #line 708 
    return 1;
  }
  #line 711 
  if ((unsigned int)conf6xxx->oq.max_oqs > 32U) {
    #line 712 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: Num OQ (%d) exceeds Max (%d)\n",(char *)"lio_validate_cn6xxx_config_info",(int)conf6xxx->oq.max_oqs,32);
    #line 715 
    return 1;
  }
  #line 718 
  if ((unsigned int)conf6xxx->iq.instr_type != 32U && (unsigned int)conf6xxx->iq.instr_type != 64U) {
    #line 720 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: Invalid instr type for IQ\n",(char *)"lio_validate_cn6xxx_config_info");
    #line 722 
    return 1;
  }
  #line 724 
  if ((unsigned int)conf6xxx->oq.refill_threshold == 0U) {
    #line 725 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: Invalid parameter for OQ\n",(char *)"lio_validate_cn6xxx_config_info");
    #line 727 
    return 1;
  }
  #line 730 
  if ((unsigned int)conf6xxx->oq.oq_intr_time == 0U) {
    #line 731 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: No Time Interrupt for OQ\n",(char *)"lio_validate_cn6xxx_config_info");
    #line 733 
    return 1;
  }
  #line 736 
  return 0;
}

#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn66xx_device.i.aux"
static void cif_spin_lock_lock_for_droq_int_enb_reg_of_octeon_cn6xxx(spinlock_t *lock)
{
  #line 669 
  ldv_spin_model_lock((char *)"lock_for_droq_int_enb_reg_of_octeon_cn6xxx");
  #line 671 
  spin_lock_1(lock);
  #line 672 
  return;
}

#line 675  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn66xx_device.i.aux"
static void cif_spin_unlock_lock_for_droq_int_enb_reg_of_octeon_cn6xxx(spinlock_t *lock)
{
  #line 678 
  ldv_spin_model_unlock((char *)"lock_for_droq_int_enb_reg_of_octeon_cn6xxx");
  #line 680 
  spin_unlock_1(lock);
  #line 681 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void INIT_LIST_HEAD_4(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_3(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_8295 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add_3(new,head,head->next);
  #line 80 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_3(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_3(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_3(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_8297 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_3(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_3(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_3(struct list_head *entry)
{
  #line 139 
  __list_del_entry_3(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_move_tail(struct list_head *list, struct list_head *head)
{
  #line 213 
  __list_del_entry_3(list);
  #line 214 
  list_add_tail_3(list,head);
  #line 215 
  return;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_5(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_8349 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set_4(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_8351 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_5(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_5(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set_4(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set_4(v,i);
  #line 46 
  return;
}

#line 237 
#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void atomic_inc_2(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void atomic_dec_1(atomic_t *v);
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read_5(& __num_online_cpus);
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
  #line 327 
  ;
  #line 327 
  cif_set_bit_1((long)cpumask_check(cpu),(unsigned long *)(& dstp->bits));
  #line 328 
  return;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_2(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 680  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_spin_lock_octeon_devices_lock(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_3(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_spin_lock_bh_lock_of_octeon_dispatch_list_0(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 748  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_spin_lock_bh_lock_of_octeon_instr_queue_0(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_2(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 689  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_spin_unlock_octeon_devices_lock(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_3(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 714  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_spin_unlock_bh_lock_of_octeon_dispatch_list_0(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 757  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_spin_unlock_bh_lock_of_octeon_instr_queue_0(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_2(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 739  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_spin_unlock_irqrestore_pci_win_lock_of_octeon_device(spinlock_t *lock, unsigned long flags);
#line 35 
#line 730 
static void cif___ldv_spin_lock_pci_win_lock_of_octeon_device(spinlock_t *lock);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head_2(struct page *page)
{
  #line 175 
  union __anonunion___u_8432 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_44.__anonCompField___anonunion_186_39.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 723  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void *cif_vmalloc_1(unsigned long size);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void *cif_vzalloc_0(unsigned long size);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 698  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void *cif_vzalloc_node_0(unsigned long size, int node);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_vfree_1(void *addr);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count_2(struct page *page)
{
  #line 67 
  return atomic_read_5(& page->_refcount);
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int put_page_testzero_2(struct page *page)
{
  #line 592 
  if ((long)(page_ref_count_2(page) == 0) != 0L) {
    #line 592 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 593 
    ldv_inline_asm();
    #line 594 
    ldv_inline_asm();
    #line 595 
    ldv_inline_asm();
    #line 592 
    ;
  }
  #line 593 
  return page_ref_dec_and_test(page);
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void put_page_2(struct page *page)
{
  #line 1023 
  page = compound_head_2(page);
  #line 1031 
  if ((int)put_devmap_managed_page(page) != 0) 
                                               #line 1032 
                                               return;
  #line 1034 
  if (put_page_testzero_2(page) != 0) 
                                      #line 1035 
                                      __put_page(page);
  #line 1036 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_iq.h"
#line 348 
int octeon_init_instr_queue(struct octeon_device *oct, union oct_txpciq txpciq, u32 num_descs);
#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
#line 760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_register_device(struct octeon_device *oct, int bus, int dev, int func, int is_pf);
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
#line 813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_deregister_device(struct octeon_device *oct);
#line 681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
#line 1188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_core_drv_init(struct octeon_recv_info *recv_info, void *buf);
#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
#line 1318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
struct octeon_device *lio_get_device(u32 octeon_id);
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int lio_get_device_id(void *dev);
#line 770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
#line 1378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_mem_access_ok(struct octeon_device *oct);
#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.h"
#line 1397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_wait_for_ddr_init(struct octeon_device *oct, u32 *timeout);
#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_network.h"
__inline static void recv_buffer_free_2(void *buffer)
{
  #line 407 
  struct octeon_skb_page_info *pg_info;
  #line 406 
  struct sk_buff *skb = (struct sk_buff *)buffer;
  #line 409 
  pg_info = (struct octeon_skb_page_info *)(& skb->cb);
  #line 411 
  if (pg_info->page != (struct page *)0) {
    #line 412 
    put_page_2(pg_info->page);
    #line 413 
    pg_info->dma = 0ULL;
    #line 414 
    pg_info->page = (struct page *)0;
    #line 415 
    pg_info->page_offset = 0U;
  }
  #line 418 
  dev_kfree_skb_any((struct sk_buff *)buffer);
  #line 419 
  return;
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static struct octeon_config default_cn66xx_conf = {.card_name = (char *)"210sv", .iq = {.max_iqs = (unsigned long long)32U, .pending_list_size = (unsigned long long)65536U, .instr_type = (unsigned long long)64U, .db_min = (unsigned long long)1U, .db_timeout = (unsigned long long)1U}, .oq = {.max_oqs = (unsigned long long)32U, .refill_threshold = (unsigned long long)128U, .oq_intr_pkt = (unsigned long long)64U, .oq_intr_time = (unsigned long long)100U, .pkts_per_intr = (unsigned long long)128U}, .nic_if_cfg = {{.max_txqs = (unsigned long long)8U, .num_txqs = (unsigned long long)4U, .max_rxqs = (unsigned long long)8U, .num_rxqs = (unsigned long long)4U, .num_rx_descs = (unsigned long long)2048U, .num_tx_descs = (unsigned long long)2048U, .rx_buf_size = (unsigned long long)1664U, .base_queue = (unsigned long long)65535U}, {.max_txqs = (unsigned long long)8U, .num_txqs = (unsigned long long)4U, .max_rxqs = (unsigned long long)8U, .num_rxqs = (unsigned long long)4U, .num_rx_descs = (unsigned long long)2048U, .num_tx_descs = (unsigned long long)2048U, .rx_buf_size = (unsigned long long)1664U, .gmx_port_id = (unsigned long long)1U, .base_queue = (unsigned long long)65535U}}, .misc = {.ctrlq_grp = (unsigned long long)1U, .oct_link_query_interval = (unsigned long long)100U, .host_link_query_interval = (unsigned long long)500U}, .num_nic_ports = 2, .num_def_tx_descs = 2048, .num_def_rx_descs = 2048, .def_rx_buf_size = 1664};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static struct octeon_config default_cn68xx_conf = {.card_type = (unsigned short)2U, .card_name = (char *)"410nv", .iq = {.max_iqs = (unsigned long long)32U, .pending_list_size = (unsigned long long)65536U, .instr_type = (unsigned long long)64U, .db_min = (unsigned long long)1U, .db_timeout = (unsigned long long)1U}, .oq = {.max_oqs = (unsigned long long)32U, .refill_threshold = (unsigned long long)128U, .oq_intr_pkt = (unsigned long long)64U, .oq_intr_time = (unsigned long long)100U, .pkts_per_intr = (unsigned long long)128U}, .nic_if_cfg = {{.max_txqs = (unsigned long long)8U, .num_txqs = (unsigned long long)4U, .max_rxqs = (unsigned long long)8U, .num_rxqs = (unsigned long long)4U, .num_rx_descs = (unsigned long long)2048U, .num_tx_descs = (unsigned long long)2048U, .rx_buf_size = (unsigned long long)1664U, .base_queue = (unsigned long long)65535U}, {.max_txqs = (unsigned long long)8U, .num_txqs = (unsigned long long)4U, .max_rxqs = (unsigned long long)8U, .num_rxqs = (unsigned long long)4U, .num_rx_descs = (unsigned long long)2048U, .num_tx_descs = (unsigned long long)2048U, .rx_buf_size = (unsigned long long)1664U, .gmx_port_id = (unsigned long long)1U, .base_queue = (unsigned long long)65535U}, {.max_txqs = (unsigned long long)8U, .num_txqs = (unsigned long long)4U, .max_rxqs = (unsigned long long)8U, .num_rxqs = (unsigned long long)4U, .num_rx_descs = (unsigned long long)2048U, .num_tx_descs = (unsigned long long)2048U, .rx_buf_size = (unsigned long long)1664U, .gmx_port_id = (unsigned long long)2U, .base_queue = (unsigned long long)65535U}, {.max_txqs = (unsigned long long)8U, .num_txqs = (unsigned long long)4U, .max_rxqs = (unsigned long long)8U, .num_rxqs = (unsigned long long)4U, .num_rx_descs = (unsigned long long)2048U, .num_tx_descs = (unsigned long long)2048U, .rx_buf_size = (unsigned long long)1664U, .gmx_port_id = (unsigned long long)3U, .base_queue = (unsigned long long)65535U}}, .misc = {.ctrlq_grp = (unsigned long long)1U, .oct_link_query_interval = (unsigned long long)100U, .host_link_query_interval = (unsigned long long)500U}, .num_nic_ports = 4, .num_def_tx_descs = 2048, .num_def_rx_descs = 2048, .def_rx_buf_size = 1664};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static struct octeon_config default_cn68xx_210nv_conf = {.card_type = (unsigned short)1U, .card_name = (char *)"210nv", .iq = {.max_iqs = (unsigned long long)32U, .pending_list_size = (unsigned long long)65536U, .instr_type = (unsigned long long)64U, .db_min = (unsigned long long)1U, .db_timeout = (unsigned long long)1U}, .oq = {.max_oqs = (unsigned long long)32U, .refill_threshold = (unsigned long long)128U, .oq_intr_pkt = (unsigned long long)64U, .oq_intr_time = (unsigned long long)100U, .pkts_per_intr = (unsigned long long)128U}, .nic_if_cfg = {{.max_txqs = (unsigned long long)8U, .num_txqs = (unsigned long long)4U, .max_rxqs = (unsigned long long)8U, .num_rxqs = (unsigned long long)4U, .num_rx_descs = (unsigned long long)2048U, .num_tx_descs = (unsigned long long)2048U, .rx_buf_size = (unsigned long long)1664U, .base_queue = (unsigned long long)65535U}, {.max_txqs = (unsigned long long)8U, .num_txqs = (unsigned long long)4U, .max_rxqs = (unsigned long long)8U, .num_rxqs = (unsigned long long)4U, .num_rx_descs = (unsigned long long)2048U, .num_tx_descs = (unsigned long long)2048U, .rx_buf_size = (unsigned long long)1664U, .gmx_port_id = (unsigned long long)1U, .base_queue = (unsigned long long)65535U}}, .misc = {.ctrlq_grp = (unsigned long long)1U, .oct_link_query_interval = (unsigned long long)100U, .host_link_query_interval = (unsigned long long)500U}, .num_nic_ports = 2, .num_def_tx_descs = 2048, .num_def_rx_descs = 2048, .def_rx_buf_size = 1664};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static struct octeon_config default_cn23xx_conf = {.card_type = (unsigned short)3U, .card_name = (char *)"23xx", .iq = {.max_iqs = (unsigned long long)64U, .pending_list_size = (unsigned long long)32768U, .instr_type = (unsigned long long)64U, .db_min = (unsigned long long)1U, .db_timeout = (unsigned long long)1U, .iq_intr_pkt = (unsigned long long)32U}, .oq = {.max_oqs = (unsigned long long)64U, .refill_threshold = (unsigned long long)16U, .oq_intr_pkt = (unsigned long long)64U, .oq_intr_time = (unsigned long long)100U, .pkts_per_intr = (unsigned long long)128U}, .nic_if_cfg = {{.max_txqs = (unsigned long long)8U, .num_txqs = (unsigned long long)4U, .max_rxqs = (unsigned long long)8U, .num_rxqs = (unsigned long long)4U, .num_rx_descs = (unsigned long long)512U, .num_tx_descs = (unsigned long long)512U, .rx_buf_size = (unsigned long long)1664U, .base_queue = (unsigned long long)65535U}, {.max_txqs = (unsigned long long)8U, .num_txqs = (unsigned long long)4U, .max_rxqs = (unsigned long long)8U, .num_rxqs = (unsigned long long)4U, .num_rx_descs = (unsigned long long)512U, .num_tx_descs = (unsigned long long)512U, .rx_buf_size = (unsigned long long)1664U, .gmx_port_id = (unsigned long long)1U, .base_queue = (unsigned long long)65535U}}, .misc = {.ctrlq_grp = (unsigned long long)1U, .oct_link_query_interval = (unsigned long long)100U, .host_link_query_interval = (unsigned long long)500U}, .num_nic_ports = 1, .num_def_tx_descs = 512, .num_def_rx_descs = 512, .def_rx_buf_size = 1664};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static struct octeon_config_ptr oct_conf_info[128U] = {{.conf_type = 0U}, {.conf_type = 0U}, {.conf_type = 0U}, {.conf_type = 0U}};
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static char oct_dev_state_str[18U][32U] = {{(char)'B', (char)'E', (char)'G', (char)'I', (char)'N'}, {(char)'P', (char)'C', (char)'I', (char)'-', (char)'E', (char)'N', (char)'A', (char)'B', (char)'L', (char)'E', (char)'-', (char)'D', (char)'O', (char)'N', (char)'E'}, {(char)'P', (char)'C', (char)'I', (char)'-', (char)'M', (char)'A', (char)'P', (char)'-', (char)'D', (char)'O', (char)'N', (char)'E'}, {(char)'D', (char)'I', (char)'S', (char)'P', (char)'A', (char)'T', (char)'C', (char)'H', (char)'-', (char)'I', (char)'N', (char)'I', (char)'T', (char)'-', (char)'D', (char)'O', (char)'N', (char)'E'}, {(char)'I', (char)'Q', (char)'-', (char)'I', (char)'N', (char)'I', (char)'T', (char)'-', (char)'D', (char)'O', (char)'N', (char)'E'}, {(char)'S', (char)'C', (char)'B', (char)'U', (char)'F', (char)'F', (char)'-', (char)'P', (char)'O', (char)'O', (char)'L', (char)'-', (char)'I', (char)'N', (char)'I', (char)'T', (char)'-', (char)'D', (char)'O', (char)'N', (char)'E'}, {(char)'R', (char)'E', (char)'S', (char)'P', (char)'L', (char)'I', (char)'S', (char)'T', (char)'-', (char)'I', (char)'N', (char)'I', (char)'T', (char)'-', (char)'D', (char)'O', (char)'N', (char)'E'}, {(char)'D', (char)'R', (char)'O', (char)'Q', (char)'-', (char)'I', (char)'N', (char)'I', (char)'T', (char)'-', (char)'D', (char)'O', (char)'N', (char)'E'}, {(char)'M', (char)'B', (char)'O', (char)'X', (char)'-', (char)'S', (char)'E', (char)'T', (char)'U', (char)'P', (char)'-', (char)'D', (char)'O', (char)'N', (char)'E'}, {(char)'M', (char)'S', (char)'I', (char)'X', (char)'-', (char)'A', (char)'L', (char)'L', (char)'O', (char)'C', (char)'-', (char)'V', (char)'E', (char)'C', (char)'T', (char)'O', (char)'R', (char)'-', (char)'D', (char)'O', (char)'N', (char)'E'}, {(char)'I', (char)'N', (char)'T', (char)'R', (char)'-', (char)'S', (char)'E', (char)'T', (char)'-', (char)'D', (char)'O', (char)'N', (char)'E'}, {(char)'I', (char)'O', (char)'-', (char)'Q', (char)'U', (char)'E', (char)'U', (char)'E', (char)'S', (char)'-', (char)'I', (char)'N', (char)'I', (char)'T', (char)'-', (char)'D', (char)'O', (char)'N', (char)'E'}, {(char)'C', (char)'O', (char)'N', (char)'S', (char)'O', (char)'L', (char)'E', (char)'-', (char)'I', (char)'N', (char)'I', (char)'T', (char)'-', (char)'D', (char)'O', (char)'N', (char)'E'}, {(char)'H', (char)'O', (char)'S', (char)'T', (char)'-', (char)'R', (char)'E', (char)'A', (char)'D', (char)'Y'}, {(char)'C', (char)'O', (char)'R', (char)'E', (char)'-', (char)'R', (char)'E', (char)'A', (char)'D', (char)'Y'}, {(char)'R', (char)'U', (char)'N', (char)'N', (char)'I', (char)'N', (char)'G'}, {(char)'I', (char)'N', (char)'-', (char)'R', (char)'E', (char)'S', (char)'E', (char)'T'}, {(char)'I', (char)'N', (char)'V', (char)'A', (char)'L', (char)'I', (char)'D'}};
#line 539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static char oct_dev_app_str[3U][32U] = {{(char)'B', (char)'A', (char)'S', (char)'E'}, {(char)'N', (char)'I', (char)'C'}, {(char)'U', (char)'N', (char)'K', (char)'N', (char)'O', (char)'W', (char)'N'}};
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static struct octeon_device *octeon_device[128U];
#line 543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static atomic_t adapter_refcounts[128U];
#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static atomic_t adapter_fw_states[128U];
#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static u32 octeon_device_count;
#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static spinlock_t octeon_devices_lock;
#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static struct octeon_core_setup core_setup[128U];
#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static void oct_set_config_info(int oct_id, int conf_type)
{
  #line 554 
  if (conf_type != 0) 
                      #line 555 
                      conf_type = 0;
  #line 556 
  oct_conf_info[oct_id].conf_type = (unsigned int)conf_type;
  #line 557 
  return;
}

#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
void octeon_init_device_list(int conf_type)
{
  #line 561 
  int i;
  #line 563 
  memset((void *)(& octeon_device),0,1024UL);
  #line 564 
  i = 0;
  #line 564 
  while (i <= 127) {
    #line 565 
    oct_set_config_info(i,conf_type);
    #line 564 
    i ++;
  }
  #line 566 
  spinlock_check(& octeon_devices_lock);
  {
    #line 566 
    struct lock_class_key __key;
    #line 566 
    __raw_spin_lock_init(& octeon_devices_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&octeon_devices_lock)->rlock",& __key);
  }
  #line 569 
  return;
}

#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static void *__retrieve_octeon_config_info(struct octeon_device *oct, u16 card_type)
{
  #line 572 
  u32 oct_id = oct->octeon_id;
  #line 573 
  void *ret = (void *)0;
  #line 575 
  switch (oct_conf_info[oct_id].conf_type) {
    #line 576 
    case (u32)0: 
                 #line 576 
    ;
    #line 577 
    if ((unsigned int)oct->chip_id == 146U) 
                                            #line 578 
                                            ret = (void *)(& default_cn66xx_conf);
    else 
      #line 579 
      if ((unsigned int)oct->chip_id == 145U && (unsigned int)card_type == 1U) 
        #line 581 
        ret = (void *)(& default_cn68xx_210nv_conf);
      else 
        #line 582 
        if ((unsigned int)oct->chip_id == 145U && (unsigned int)card_type == 2U) 
          #line 584 
          ret = (void *)(& default_cn68xx_conf);
        else 
          #line 585 
          if ((unsigned int)oct->chip_id == 38658U) 
                                                    #line 586 
                                                    ret = (void *)(& default_cn23xx_conf);
          else 
            #line 587 
            if ((unsigned int)oct->chip_id == 38674U) 
                                                      #line 588 
                                                      ret = (void *)(& default_cn23xx_conf);
    #line 590 
    break;
    #line 591 
    default: 
             #line 591 
    ;
    #line 592 
    break;
  }
  #line 594 
  return ret;
}

#line 597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static int __verify_octeon_config_info(struct octeon_device *oct, void *conf)
{
  #line 599 
  switch ((int)oct->chip_id) {
    #line 600 
    case 146: 
              #line 600 
    ;
    #line 601 
    case 145: 
              #line 601 
    ;
    #line 602 
    return lio_validate_cn6xxx_config_info(oct,(struct octeon_config *)conf);
    #line 603 
    case 38658: 
                #line 603 
    ;
    #line 604 
    case 38674: 
                #line 604 
    ;
    #line 605 
    return 0;
    #line 606 
    default: 
             #line 606 
    ;
    #line 607 
    break;
  }
  #line 610 
  return 1;
}

#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
void *oct_get_config_info(struct octeon_device *oct, u16 card_type)
{
  #line 615 
  void *conf = (void *)0;
  #line 617 
  conf = __retrieve_octeon_config_info(oct,(unsigned short)((int)card_type));
  #line 618 
  if (conf == (void *)0) 
                         #line 619 
                         return (void *)0;
  #line 621 
  if (__verify_octeon_config_info(oct,conf) != 0) {
    #line 622 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Configuration verification failed\n");
    #line 623 
    return (void *)0;
  }
  #line 626 
  return conf;
}

#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
char *lio_get_state_string(atomic_t *state_ptr)
{
  #line 631 
  s32 istate = atomic_read_5(state_ptr);
  #line 633 
  if ((unsigned int)istate > 17U) 
                                  #line 634 
                                  return (char *)(& oct_dev_state_str[17]);
  #line 635 
  return (char *)(& oct_dev_state_str[istate]);
}

#line 638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static char *get_oct_app_string(u32 app_mode)
{
  #line 640 
  if (app_mode <= 1U) 
                      #line 641 
                      return (char *)(& oct_dev_app_str[app_mode]);
  #line 642 
  return (char *)(& oct_dev_app_str[2]);
}

#line 645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
void octeon_free_device_mem(struct octeon_device *oct)
{
  #line 647 
  int i;
  #line 649 
  i = 0;
  #line 649 
  while (1) {
    #line 649 
    int tmp;
    #line 649 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 649 
                                              tmp = 64; else 
                                                             #line 649 
                                                             tmp = 32;
    #line 649 
    ;
    #line 649 
    if (! (tmp > i)) 
                     #line 649 
                     break;
    #line 650 
    if (((oct->io_qmask.oq >> i) & 1ULL) != 0ULL) 
                                                  #line 651 
                                                  cif_vfree_1((void *)oct->droq[i]);
    #line 649 
    i ++;
  }
  #line 654 
  i = 0;
  #line 654 
  while (1) {
    #line 654 
    int tmp_0;
    #line 654 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 654 
                                              tmp_0 = 64; else 
                                                               #line 654 
                                                               tmp_0 = 32;
    #line 654 
    ;
    #line 654 
    if (! (tmp_0 > i)) 
                       #line 654 
                       break;
    #line 655 
    if (((oct->io_qmask.iq >> i) & 1ULL) != 0ULL) 
                                                  #line 656 
                                                  cif_vfree_1((void *)oct->instr_queue[i]);
    #line 654 
    i ++;
  }
  #line 659 
  i = (int)oct->octeon_id;
  #line 660 
  cif_vfree_1((void *)oct);
  #line 662 
  octeon_device[i] = (struct octeon_device *)0;
  #line 663 
  octeon_device_count --;
  #line 664 
  return;
}

#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
static struct octeon_device *octeon_allocate_device_mem(u32 pci_id, u32 priv_size)
{
  #line 669 
  struct octeon_device *oct;
  #line 671 
  u32 size;
  #line 670 
  u8 *buf = (u8 *)0U;
  #line 671 
  u32 octdevsize = 0U;
  #line 671 
  u32 configsize = 0U;
  #line 673 
  switch (pci_id) {
    #line 674 
    case (u32)145: 
                   #line 674 
    ;
    #line 675 
    case (u32)146: 
                   #line 675 
    ;
    #line 676 
    configsize = 104U;
    #line 677 
    break;
    #line 679 
    case (u32)38658: 
                     #line 679 
    ;
    #line 680 
    configsize = 32U;
    #line 681 
    break;
    #line 682 
    case (u32)38674: 
                     #line 682 
    ;
    #line 683 
    configsize = 8U;
    #line 684 
    break;
    #line 685 
    default: 
             #line 685 
    ;
    #line 686 
    printk((char *)"\001",(char *)"octeon_allocate_device_mem",pci_id);
    #line 689 
    return (struct octeon_device *)0;
  }
  #line 692 
  if ((configsize & 7U) != 0U) 
                               #line 693 
                               configsize = (configsize & 4294967288U) + 8U;
  #line 695 
  octdevsize = 48152U;
  #line 696 
  if ((octdevsize & 7U) != 0U) 
                               #line 697 
                               octdevsize = (octdevsize & 4294967288U) + 8U;
  #line 699 
  if ((priv_size & 7U) != 0U) 
                              #line 700 
                              priv_size = (priv_size & 4294967288U) + 8U;
  #line 702 
  size = ((octdevsize + priv_size) + configsize) + 2560U;
  #line 705 
  buf = (u8 *)cif_vzalloc_0((unsigned long)size);
  #line 706 
  if (buf == (u8 *)0U) 
                       #line 707 
                       return (struct octeon_device *)0;
  #line 709 
  oct = (struct octeon_device *)buf;
  #line 710 
  oct->priv = (void *)(buf + (unsigned long)octdevsize);
  #line 711 
  oct->chip = (void *)(buf + ((unsigned long)octdevsize + (unsigned long)priv_size));
  #line 712 
  oct->dispatch.dlist = (struct octeon_dispatch *)(buf + (((unsigned long)octdevsize + (unsigned long)priv_size) + (unsigned long)configsize));
  #line 715 
  return oct;
}

#line 718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
struct octeon_device *octeon_allocate_device(u32 pci_id, u32 priv_size)
{
  #line 721 
  u32 oct_idx = 0U;
  #line 722 
  struct octeon_device *oct = (struct octeon_device *)0;
  #line 724 
  cif_spin_lock_octeon_devices_lock(& octeon_devices_lock);
  #line 726 
  oct_idx = 0U;
  #line 726 
  while (oct_idx <= 127U) {
    #line 727 
    if (octeon_device[oct_idx] == (struct octeon_device *)0) 
                                                             #line 728 
                                                             break;
    #line 726 
    oct_idx ++;
  }
  #line 730 
  if (oct_idx <= 127U) {
    #line 731 
    oct = octeon_allocate_device_mem(pci_id,priv_size);
    #line 732 
    if (oct != (struct octeon_device *)0) {
      #line 733 
      octeon_device_count ++;
      #line 734 
      octeon_device[oct_idx] = oct;
    }
  }
  #line 738 
  cif_spin_unlock_octeon_devices_lock(& octeon_devices_lock);
  #line 739 
  if (oct == (struct octeon_device *)0) 
                                        #line 740 
                                        return (struct octeon_device *)0;
  #line 742 
  spinlock_check(& oct->pci_win_lock);
  {
    #line 742 
    struct lock_class_key __key;
    #line 742 
    __raw_spin_lock_init(& oct->pci_win_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&oct->pci_win_lock)->rlock",& __key);
  }
  #line 743 
  spinlock_check(& oct->mem_access_lock);
  {
    #line 743 
    struct lock_class_key __key_0;
    #line 743 
    __raw_spin_lock_init(& oct->mem_access_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&oct->mem_access_lock)->rlock",& __key_0);
  }
  #line 745 
  oct->octeon_id = oct_idx;
  #line 746 
  snprintf((char *)(& oct->device_name),32UL,(char *)"LiquidIO%d",oct->octeon_id);
  #line 749 
  return oct;
}

#line 760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_register_device(struct octeon_device *oct, int bus, int dev, int func, int is_pf)
{
  #line 763 
  int idx;
  #line 763 
  int refcount;
  #line 765 
  oct->loc.bus = bus;
  #line 766 
  oct->loc.dev = dev;
  #line 767 
  oct->loc.func = func;
  #line 769 
  oct->adapter_refcount = & adapter_refcounts[oct->octeon_id];
  #line 770 
  atomic_set_4(oct->adapter_refcount,0);
  #line 773 
  oct->adapter_fw_state = & adapter_fw_states[oct->octeon_id];
  #line 774 
  atomic_set_4(oct->adapter_fw_state,1);
  #line 776 
  cif_spin_lock_octeon_devices_lock(& octeon_devices_lock);
  #line 777 
  idx = (int)oct->octeon_id + -1;
  #line 777 
  while (idx >= 0) {
    #line 778 
    if (octeon_device[idx] == (struct octeon_device *)0) {
      #line 779 
      _dev_err(& (oct->pci_dev)->dev,(char *)"%s: Internal driver error, missing dev",(char *)"octeon_register_device");
      #line 782 
      cif_spin_unlock_octeon_devices_lock(& octeon_devices_lock);
      #line 783 
      atomic_inc_2(oct->adapter_refcount);
      #line 784 
      return 1;
    }
    #line 789 
    if ((octeon_device[idx])->loc.bus == bus && (octeon_device[idx])->loc.dev == dev) {
      #line 791 
      oct->adapter_refcount = (octeon_device[idx])->adapter_refcount;
      #line 793 
      oct->adapter_fw_state = (octeon_device[idx])->adapter_fw_state;
      #line 795 
      break;
    }
    #line 777 
    idx --;
  }
  #line 798 
  cif_spin_unlock_octeon_devices_lock(& octeon_devices_lock);
  #line 800 
  atomic_inc_2(oct->adapter_refcount);
  #line 801 
  refcount = atomic_read_5(oct->adapter_refcount);
  {
    #line 803 
    bool branch;
    #line 803 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_register_device", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c", .format = (char *)"%s: %02x:%02x:%d refcount %u", .lineno = (unsigned int)803U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 803 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 803 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 803 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug442,& (oct->pci_dev)->dev,(char *)"%s: %02x:%02x:%d refcount %u",(char *)"octeon_register_device",oct->loc.bus,oct->loc.dev,oct->loc.func,refcount);
  }
  #line 806 
  return refcount;
}

#line 813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_deregister_device(struct octeon_device *oct)
{
  #line 815 
  int refcount;
  #line 817 
  atomic_dec_1(oct->adapter_refcount);
  #line 818 
  refcount = atomic_read_5(oct->adapter_refcount);
  {
    #line 820 
    bool branch;
    #line 820 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_deregister_device", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c", .format = (char *)"%s: %04d:%02d:%d refcount %u", .lineno = (unsigned int)820U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 820 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 820 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 820 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug443,& (oct->pci_dev)->dev,(char *)"%s: %04d:%02d:%d refcount %u",(char *)"octeon_deregister_device",oct->loc.bus,oct->loc.dev,oct->loc.func,refcount);
  }
  #line 823 
  return refcount;
}

#line 827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_allocate_ioq_vector(struct octeon_device *oct, u32 num_ioqs)
{
  #line 829 
  struct octeon_ioq_vector *ioq_vector;
  #line 830 
  int cpu_num;
  #line 831 
  int size;
  #line 832 
  int i;
  #line 834 
  size = (int)(num_ioqs * 1064U);
  #line 836 
  oct->ioq_vector = (struct octeon_ioq_vector *)cif_vzalloc_0((unsigned long)size);
  #line 837 
  if (oct->ioq_vector == (struct octeon_ioq_vector *)0) 
                                                        #line 838 
                                                        return -1;
  #line 839 
  i = 0;
  #line 839 
  while ((unsigned int)i < num_ioqs) {
    {
      #line 840 
      ioq_vector = oct->ioq_vector + (unsigned long)i;
      #line 841 
      ioq_vector->oct_dev = oct;
      #line 842 
      ioq_vector->iq_index = i;
      #line 843 
      ioq_vector->droq_index = i;
      #line 844 
      ioq_vector->mbox = oct->mbox[i];
      #line 846 
      cpu_num = (int)((unsigned int)i % num_online_cpus());
      #line 847 
      cpumask_set_cpu((unsigned int)cpu_num,& ioq_vector->affinity_mask);
      #line 849 
      if ((unsigned int)oct->chip_id == 38658U) 
                                                #line 850 
                                                ioq_vector->ioq_num = oct->sriov_info.pf_srn + (unsigned int)i; else 
                                                                    #line 852 
                                                                    ioq_vector->ioq_num = (unsigned int)i;
    }
    #line 839 
    i ++;
  }
  #line 855 
  return 0;
}

#line 859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
void octeon_free_ioq_vector(struct octeon_device *oct)
{
  #line 861 
  cif_vfree_1((void *)oct->ioq_vector);
  #line 862 
  return;
}

#line 865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_setup_instr_queues(struct octeon_device *oct)
{
  #line 872 
  struct octeon_device *_oct;
  #line 869 
  union oct_txpciq txpciq;
  #line 867 
  u32 num_descs = 0U;
  #line 868 
  u32 iq_no = 0U;
  #line 870 
  int numa_node = dev_to_node(& (oct->pci_dev)->dev);
  #line 872 
  _oct = oct;
  #line 872 
  if (((unsigned int)_oct->chip_id + 65391U <= 1U) != 0) 
                                                         #line 873 
                                                         num_descs = (unsigned int)(((struct octeon_cn6xxx *)oct->chip)->conf)->num_def_tx_descs;
  else 
    #line 875 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 876 
                                              num_descs = (unsigned int)(((struct octeon_cn23xx_pf *)oct->chip)->conf)->num_def_tx_descs;
    else 
      #line 877 
      if ((unsigned int)oct->chip_id == 38674U) 
                                                #line 878 
                                                num_descs = (unsigned int)(((struct octeon_cn23xx_vf *)oct->chip)->conf)->num_def_tx_descs;
  #line 880 
  oct->num_iqs = 0U;
  #line 882 
  oct->instr_queue[0] = (struct octeon_instr_queue *)cif_vzalloc_node_0(472UL,numa_node);
  #line 884 
  if (oct->instr_queue[0] == (struct octeon_instr_queue *)0) 
                                                             #line 886 
                                                             oct->instr_queue[0] = (struct octeon_instr_queue *)cif_vzalloc_0(472UL);
  #line 887 
  if (oct->instr_queue[0] == (struct octeon_instr_queue *)0) 
                                                             #line 888 
                                                             return 1;
  #line 889 
  memset((void *)oct->instr_queue[0],0,472UL);
  #line 890 
  (oct->instr_queue[0])->q_index = 0;
  #line 891 
  (oct->instr_queue[0])->app_ctx = (void *)0;
  #line 892 
  (oct->instr_queue[0])->ifidx = 0;
  #line 893 
  txpciq.u64 = 0ULL;
  #line 894 
  txpciq.s.q_no = (unsigned long long)((unsigned char)iq_no);
  #line 895 
  txpciq.s.pkind = (unsigned long long)oct->pfvf_hsword.pkind;
  #line 896 
  txpciq.s.use_qpg = (unsigned long long)0U;
  #line 897 
  txpciq.s.qpg = (unsigned long long)0U;
  #line 898 
  if (octeon_init_instr_queue(oct,txpciq,num_descs) != 0) {
    #line 900 
    cif_vfree_1((void *)oct->instr_queue[0]);
    #line 901 
    oct->instr_queue[0] = (struct octeon_instr_queue *)0;
    #line 902 
    return 1;
  }
  #line 905 
  (oct->num_iqs) ++;
  #line 906 
  return 0;
}

#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_setup_output_queues(struct octeon_device *oct)
{
  #line 916 
  struct octeon_device *_oct;
  #line 911 
  u32 num_descs = 0U;
  #line 912 
  u32 desc_size = 0U;
  #line 913 
  u32 oq_no = 0U;
  #line 914 
  int numa_node = dev_to_node(& (oct->pci_dev)->dev);
  #line 916 
  _oct = oct;
  #line 916 
  if (((unsigned int)_oct->chip_id + 65391U <= 1U) != 0) {
    #line 917 
    num_descs = (unsigned int)(((struct octeon_cn6xxx *)oct->chip)->conf)->num_def_rx_descs;
    #line 919 
    desc_size = (unsigned int)(((struct octeon_cn6xxx *)oct->chip)->conf)->def_rx_buf_size;
  }
  else 
    #line 921 
    if ((unsigned int)oct->chip_id == 38658U) {
      #line 922 
      num_descs = (unsigned int)(((struct octeon_cn23xx_pf *)oct->chip)->conf)->num_def_rx_descs;
      #line 923 
      desc_size = (unsigned int)(((struct octeon_cn23xx_pf *)oct->chip)->conf)->def_rx_buf_size;
    }
    else 
      #line 924 
      if ((unsigned int)oct->chip_id == 38674U) {
        #line 925 
        num_descs = (unsigned int)(((struct octeon_cn23xx_vf *)oct->chip)->conf)->num_def_rx_descs;
        #line 926 
        desc_size = (unsigned int)(((struct octeon_cn23xx_vf *)oct->chip)->conf)->def_rx_buf_size;
      }
  #line 928 
  oct->num_oqs = 0U;
  #line 929 
  oct->droq[0] = (struct octeon_droq *)cif_vzalloc_node_0(672UL,numa_node);
  #line 930 
  if (oct->droq[0] == (struct octeon_droq *)0) 
                                               #line 931 
                                               oct->droq[0] = (struct octeon_droq *)cif_vzalloc_0(672UL);
  #line 932 
  if (oct->droq[0] == (struct octeon_droq *)0) 
                                               #line 933 
                                               return 1;
  #line 935 
  if (octeon_init_droq(oct,oq_no,num_descs,desc_size,(void *)0) != 0) {
    #line 936 
    cif_vfree_1((void *)oct->droq[oq_no]);
    #line 937 
    oct->droq[oq_no] = (struct octeon_droq *)0;
    #line 938 
    return 1;
  }
  #line 940 
  (oct->num_oqs) ++;
  #line 942 
  return 0;
}

#line 945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_set_io_queues_off(struct octeon_device *oct)
{
  #line 949 
  struct octeon_device *_oct;
  #line 947 
  int loop = 10000;
  #line 949 
  _oct = oct;
  #line 949 
  if (((unsigned int)_oct->chip_id + 65391U <= 1U) != 0) {
    #line 950 
    writel(0U,(void *)(oct->mmio[0].hw_addr + 4096U));
    #line 951 
    writel(0U,(void *)(oct->mmio[0].hw_addr + 4112U));
  }
  else 
    #line 952 
    if ((unsigned int)oct->chip_id == 38674U) {
      #line 953 
      u32 q_no;
      #line 959 
      q_no = 0U;
      #line 959 
      while (oct->sriov_info.rings_per_vf > q_no) {
        {
          #line 960 
          u64 reg_val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
          #line 963 
          while (((reg_val & 8388608ULL) != 0ULL && (reg_val & 268435456ULL) == 0ULL) && loop != 0) {
            #line 966 
            reg_val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
            #line 968 
            loop --;
          }
          #line 970 
          if (loop == 0) {
            #line 971 
            _dev_err(& (oct->pci_dev)->dev,(char *)"clearing the reset reg failed or setting the quiet reg failed for qno: %u\n",q_no);
            #line 974 
            return -1;
          }
          #line 977 
          reg_val &= 18446744073701163007ULL;
          #line 978 
          writeq(reg_val,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
          #line 982 
          reg_val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
          #line 984 
          if ((reg_val & 8388608ULL) != 0ULL) {
            #line 985 
            _dev_err(& (oct->pci_dev)->dev,(char *)"unable to reset qno %u\n",q_no);
            #line 987 
            return -1;
          }
        }
        #line 959 
        q_no ++;
      }
    }
  #line 991 
  return 0;
}

#line 994  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
void octeon_set_droq_pkt_op(struct octeon_device *oct, u32 q_no, u32 enable)
{
  #line 1001 
  struct octeon_device *_oct;
  #line 998 
  u32 reg_val = 0U;
  #line 1001 
  _oct = oct;
  #line 1001 
  if (((unsigned int)_oct->chip_id + 65391U <= 1U) != 0) {
    #line 1002 
    reg_val = readl((void *)(oct->mmio[0].hw_addr + 4112U));
    #line 1004 
    if (enable != 0U) 
                      #line 1005 
                      reg_val = (unsigned int)(1 << q_no) | reg_val; else 
                                                                    #line 1007 
                                                                    reg_val = (unsigned int)(~ (1 << q_no)) & reg_val;
    #line 1009 
    writel(reg_val,(void *)(oct->mmio[0].hw_addr + 4112U));
  }
  #line 1011 
  return;
}

#line 1013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_init_dispatch_list(struct octeon_device *oct)
{
  #line 1015 
  u32 i;
  #line 1017 
  oct->dispatch.count = 0U;
  #line 1019 
  i = 0U;
  #line 1019 
  while (i <= 63U) {
    #line 1020 
    (oct->dispatch.dlist + (unsigned long)i)->opcode = (unsigned short)0U;
    #line 1021 
    INIT_LIST_HEAD_4(& (oct->dispatch.dlist + (unsigned long)i)->list);
    #line 1019 
    i ++;
  }
  #line 1024 
  i = 0U;
  #line 1024 
  while (i <= 5U) {
    #line 1025 
    octeon_register_reqtype_free_fn(oct,(int)i,(void (*)(void *))0);
    #line 1024 
    i ++;
  }
  #line 1027 
  spinlock_check(& oct->dispatch.lock);
  {
    #line 1027 
    struct lock_class_key __key;
    #line 1027 
    __raw_spin_lock_init(& oct->dispatch.lock.__anonCompField_spinlock_25.rlock,(char *)"&(&oct->dispatch.lock)->rlock",& __key);
  }
  #line 1029 
  return 0;
}

#line 1032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
void octeon_delete_dispatch_list(struct octeon_device *oct)
{
  #line 1034 
  u32 i;
  #line 1035 
  struct list_head freelist;
  #line 1035 
  struct list_head *temp;
  #line 1035 
  struct list_head *tmp2;
  #line 1037 
  INIT_LIST_HEAD_4(& freelist);
  #line 1039 
  cif_spin_lock_bh_lock_of_octeon_dispatch_list_0(& oct->dispatch.lock);
  #line 1041 
  i = 0U;
  #line 1041 
  while (i <= 63U) {
    {
      #line 1042 
      struct list_head *dispatch;
      #line 1044 
      dispatch = & (oct->dispatch.dlist + (unsigned long)i)->list;
      #line 1045 
      while (dispatch->next != dispatch) {
        #line 1046 
        temp = dispatch->next;
        #line 1047 
        list_move_tail(temp,& freelist);
      }
      #line 1050 
      (oct->dispatch.dlist + (unsigned long)i)->opcode = (unsigned short)0U;
    }
    #line 1041 
    i ++;
  }
  #line 1053 
  oct->dispatch.count = 0U;
  #line 1055 
  cif_spin_unlock_bh_lock_of_octeon_dispatch_list_0(& oct->dispatch.lock);
  #line 1057 
  temp = freelist.next;
  #line 1057 
  tmp2 = temp->next;
  #line 1057 
  while (& freelist != temp) {
    #line 1058 
    list_del_3(temp);
    #line 1059 
    cif_vfree_1((void *)temp);
    #line 1057 
    temp = tmp2;
    #line 1057 
    tmp2 = temp->next;
  }
  #line 1061 
  return;
}

#line 1064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
octeon_dispatch_fn_t octeon_get_dispatch(struct octeon_device *octeon_dev, u16 opcode, u16 subcode)
{
  #line 1067 
  u32 idx;
  #line 1068 
  struct list_head *dispatch;
  #line 1069 
  int (*fn)(struct octeon_recv_info *, void *) = (int (*)(struct octeon_recv_info *, void *))0;
  #line 1070 
  u16 combined_opcode = (unsigned short)((((int)opcode << 8) & 3840) | ((int)subcode & 127));
  #line 1072 
  idx = (unsigned int)combined_opcode & 63U;
  #line 1074 
  cif_spin_lock_bh_lock_of_octeon_dispatch_list_0(& octeon_dev->dispatch.lock);
  #line 1076 
  if (octeon_dev->dispatch.count == 0U) {
    #line 1077 
    cif_spin_unlock_bh_lock_of_octeon_dispatch_list_0(& octeon_dev->dispatch.lock);
    #line 1078 
    return (int (*)(struct octeon_recv_info *, void *))0;
  }
  #line 1081 
  if ((unsigned int)(octeon_dev->dispatch.dlist + (unsigned long)idx)->opcode == 0U) {
    #line 1082 
    cif_spin_unlock_bh_lock_of_octeon_dispatch_list_0(& octeon_dev->dispatch.lock);
    #line 1083 
    return (int (*)(struct octeon_recv_info *, void *))0;
  }
  #line 1086 
  if ((int)(octeon_dev->dispatch.dlist + (unsigned long)idx)->opcode == (int)combined_opcode) 
    #line 1087 
    fn = (octeon_dev->dispatch.dlist + (unsigned long)idx)->dispatch_fn;
  else {
    #line 1089 
    dispatch = (octeon_dev->dispatch.dlist + (unsigned long)idx)->list.next;
    #line 1089 
    while (& (octeon_dev->dispatch.dlist + (unsigned long)idx)->list != dispatch) {
      #line 1091 
      if ((int)((struct octeon_dispatch *)dispatch)->opcode == (int)combined_opcode) {
        #line 1093 
        fn = ((struct octeon_dispatch *)dispatch)->dispatch_fn;
        #line 1095 
        break;
      }
      #line 1089 
      dispatch = dispatch->next;
    }
  }
  #line 1100 
  cif_spin_unlock_bh_lock_of_octeon_dispatch_list_0(& octeon_dev->dispatch.lock);
  #line 1101 
  return fn;
}

#line 1122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_register_dispatch_fn(struct octeon_device *oct, u16 opcode, u16 subcode, int (*fn)(struct octeon_recv_info *, void *), void *fn_arg)
{
  #line 1127 
  u32 idx;
  #line 1128 
  int (*pfn)(struct octeon_recv_info *, void *);
  #line 1129 
  u16 combined_opcode = (unsigned short)((((int)opcode << 8) & 3840) | ((int)subcode & 127));
  #line 1131 
  idx = (unsigned int)combined_opcode & 63U;
  #line 1133 
  cif_spin_lock_bh_lock_of_octeon_dispatch_list_0(& oct->dispatch.lock);
  #line 1135 
  if ((unsigned int)(oct->dispatch.dlist + (unsigned long)idx)->opcode == 0U) {
    #line 1136 
    (oct->dispatch.dlist + (unsigned long)idx)->opcode = combined_opcode;
    #line 1137 
    (oct->dispatch.dlist + (unsigned long)idx)->dispatch_fn = fn;
    #line 1138 
    (oct->dispatch.dlist + (unsigned long)idx)->arg = fn_arg;
    #line 1139 
    (oct->dispatch.count) ++;
    #line 1140 
    cif_spin_unlock_bh_lock_of_octeon_dispatch_list_0(& oct->dispatch.lock);
    #line 1141 
    return 0;
  }
  #line 1144 
  cif_spin_unlock_bh_lock_of_octeon_dispatch_list_0(& oct->dispatch.lock);
  #line 1149 
  pfn = octeon_get_dispatch(oct,(unsigned short)((int)opcode),(unsigned short)((int)subcode));
  #line 1150 
  if (pfn == (int (*)(struct octeon_recv_info *, void *))0) {
    #line 1151 
    struct octeon_dispatch *dispatch;
    {
      #line 1153 
      bool branch;
      #line 1153 
      struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_register_dispatch_fn", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c", .format = (char *)"Adding opcode to dispatch list linked list\n", .lineno = (unsigned int)1153U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1153 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
      #line 1153 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1153 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug444,& (oct->pci_dev)->dev,(char *)"Adding opcode to dispatch list linked list\n");
    }
    #line 1155 
    dispatch = (struct octeon_dispatch *)cif_vmalloc_1(40UL);
    #line 1157 
    if (dispatch == (struct octeon_dispatch *)0) {
      #line 1158 
      _dev_err(& (oct->pci_dev)->dev,(char *)"No memory to add dispatch function\n");
      #line 1160 
      return 1;
    }
    #line 1162 
    dispatch->opcode = combined_opcode;
    #line 1163 
    dispatch->dispatch_fn = fn;
    #line 1164 
    dispatch->arg = fn_arg;
    #line 1169 
    cif_spin_lock_bh_lock_of_octeon_dispatch_list_0(& oct->dispatch.lock);
    #line 1170 
    list_add(& dispatch->list,& (oct->dispatch.dlist + (unsigned long)idx)->list);
    #line 1171 
    (oct->dispatch.count) ++;
    #line 1172 
    cif_spin_unlock_bh_lock_of_octeon_dispatch_list_0(& oct->dispatch.lock);
  }
  else {
    #line 1175 
    if (pfn == fn) {
      #line 1175 
      ;
      #line 1175 
      if (octeon_get_dispatch_arg(oct,(unsigned short)((int)opcode),
                                (unsigned short)((int)subcode)) == fn_arg) 
        #line 1177 
        return 0;
    }
    #line 1179 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Found previously registered dispatch fn for opcode/subcode: %x/%x\n",(int)opcode,(int)subcode);
    #line 1182 
    return 1;
  }
  #line 1185 
  return 0;
}

#line 1188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_core_drv_init(struct octeon_recv_info *recv_info, void *buf)
{
  #line 1197 
  struct octeon_device *_oct;
  #line 1190 
  u32 i;
  #line 1191 
  char app_name[16U];
  #line 1192 
  struct octeon_device *oct = (struct octeon_device *)buf;
  #line 1193 
  struct octeon_recv_pkt *recv_pkt = recv_info->recv_pkt;
  #line 1194 
  struct octeon_core_setup *cs = (struct octeon_core_setup *)0;
  #line 1195 
  u32 num_nic_ports = 0U;
  #line 1197 
  _oct = oct;
  #line 1197 
  if (((unsigned int)_oct->chip_id + 65391U <= 1U) != 0) 
                                                         #line 1198 
                                                         num_nic_ports = (unsigned int)(((struct octeon_cn6xxx *)oct->chip)->conf)->num_nic_ports;
  else 
    #line 1200 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 1201 
                                              num_nic_ports = (unsigned int)(((struct octeon_cn23xx_pf *)oct->chip)->conf)->num_nic_ports;
  #line 1204 
  if (atomic_read_5(& oct->status) > 14) {
    #line 1205 
    ;
    #line 1205 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Received CORE OK when device state is 0x%x\n",atomic_read_5(& oct->status));
    #line 1207 
    goto core_drv_init_err;
  }
  #line 1210 
  strncpy((char *)(& app_name),get_oct_app_string((unsigned int)recv_pkt->rh.r_core_drv_init.app_mode),15UL);
  #line 1214 
  oct->app_mode = (unsigned int)recv_pkt->rh.r_core_drv_init.app_mode;
  #line 1215 
  if ((unsigned int)recv_pkt->rh.r_core_drv_init.app_mode == 1U) {
    #line 1216 
    oct->fw_info.max_nic_ports = (unsigned int)recv_pkt->rh.r_core_drv_init.max_nic_ports;
    #line 1218 
    oct->fw_info.num_gmx_ports = (unsigned int)recv_pkt->rh.r_core_drv_init.num_gmx_ports;
  }
  #line 1222 
  if (oct->fw_info.max_nic_ports < num_nic_ports) {
    #line 1223 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Config has more ports than firmware allows (%d > %d).\n",num_nic_ports,oct->fw_info.max_nic_ports);
    #line 1226 
    goto core_drv_init_err;
  }
  #line 1228 
  oct->fw_info.app_cap_flags = (unsigned long long)recv_pkt->rh.r_core_drv_init.app_cap_flags;
  #line 1229 
  oct->fw_info.app_mode = (unsigned int)recv_pkt->rh.r_core_drv_init.app_mode;
  #line 1230 
  oct->pfvf_hsword.app_mode = recv_pkt->rh.r_core_drv_init.app_mode;
  #line 1232 
  oct->pfvf_hsword.pkind = recv_pkt->rh.r_core_drv_init.pkind;
  #line 1234 
  i = 0U;
  #line 1234 
  while (oct->num_iqs > i) {
    #line 1235 
    (oct->instr_queue[i])->txpciq.s.pkind = (unsigned long long)oct->pfvf_hsword.pkind;
    #line 1234 
    i ++;
  }
  #line 1237 
  atomic_set_4(& oct->status,14);
  #line 1239 
  cs = & core_setup[oct->octeon_id];
  #line 1241 
  if (recv_pkt->buffer_size[0] != 136U) {
    #line 1242 
    bool branch;
    #line 1242 
    struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_core_drv_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c", .format = (char *)"Core setup bytes expected %u found %d\n", .lineno = (unsigned int)1242U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1242 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
    #line 1242 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1242 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug445,& (oct->pci_dev)->dev,(char *)"Core setup bytes expected %u found %d\n",120U,recv_pkt->buffer_size[0]);
  }
  #line 1247 
  ;
  #line 1247 
  memcpy((void *)cs,get_rbd((struct sk_buff *)recv_pkt->buffer_ptr[0]) + 16UL,120UL);
  #line 1250 
  strncpy((char *)(& oct->boardinfo.name),(char *)(& cs->boardname),32UL);
  #line 1251 
  strncpy((char *)(& oct->boardinfo.serial_number),(char *)(& cs->board_serial_number),64UL);
  #line 1254 
  octeon_swap_8B_data((u64 *)cs,15U);
  #line 1256 
  oct->boardinfo.major = cs->board_rev_major;
  #line 1257 
  oct->boardinfo.minor = cs->board_rev_minor;
  #line 1259 
  _dev_info(& (oct->pci_dev)->dev,(char *)"Running %s (%llu Hz)\n",(char *)(& app_name),(long long)cs->corefreq);
  #line 1263 
  core_drv_init_err: 
                     #line 1263 
  ;
  #line 1264 
  i = 0U;
  #line 1264 
  while ((unsigned int)recv_pkt->buffer_count > i) {
    #line 1265 
    recv_buffer_free_2(recv_pkt->buffer_ptr[i]);
    #line 1264 
    i ++;
  }
  #line 1266 
  octeon_free_recv_info(recv_info);
  #line 1267 
  return 0;
}

#line 1270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_get_tx_qsize(struct octeon_device *oct, u32 q_no)
{
  #line 1273 
  if (oct != (struct octeon_device *)0) {
    #line 1273 
    unsigned int tmp;
    #line 1273 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 1273 
                                              tmp = 64U; else 
                                                              #line 1273 
                                                              tmp = 32U;
    #line 1273 
    ;
    #line 1273 
    if (tmp > q_no) 
      #line 1273 
      if (((oct->io_qmask.iq >> q_no) & 1ULL) != 0ULL) 
                                                       #line 1275 
                                                       return (int)(oct->instr_queue[q_no])->max_count;
  }
  #line 1277 
  return -1;
}

#line 1280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_get_rx_qsize(struct octeon_device *oct, u32 q_no)
{
  #line 1282 
  if (oct != (struct octeon_device *)0) {
    #line 1282 
    unsigned int tmp;
    #line 1282 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 1282 
                                              tmp = 64U; else 
                                                              #line 1282 
                                                              tmp = 32U;
    #line 1282 
    ;
    #line 1282 
    if (tmp > q_no) 
      #line 1282 
      if (((oct->io_qmask.oq >> q_no) & 1ULL) != 0ULL) 
                                                       #line 1284 
                                                       return (int)(oct->droq[q_no])->max_count;
  }
  #line 1285 
  return -1;
}

#line 1289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
struct octeon_config *octeon_get_conf(struct octeon_device *oct)
{
  #line 1297 
  struct octeon_device *_oct;
  #line 1291 
  struct octeon_config *default_oct_conf = (struct octeon_config *)0;
  #line 1297 
  _oct = oct;
  #line 1297 
  if (((unsigned int)_oct->chip_id + 65391U <= 1U) != 0) 
                                                         #line 1298 
                                                         default_oct_conf = ((struct octeon_cn6xxx *)oct->chip)->conf;
  else 
    #line 1300 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 1301 
                                              default_oct_conf = ((struct octeon_cn23xx_pf *)oct->chip)->conf;
    else 
      #line 1303 
      if ((unsigned int)oct->chip_id == 38674U) 
                                                #line 1304 
                                                default_oct_conf = ((struct octeon_cn23xx_vf *)oct->chip)->conf;
  #line 1307 
  return default_oct_conf;
}

#line 1318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
struct octeon_device *lio_get_device(u32 octeon_id)
{
  #line 1320 
  if (octeon_id > 127U) 
                        #line 1321 
                        return (struct octeon_device *)0; else 
                                                               #line 1323 
                                                               return octeon_device[octeon_id];
}

#line 1326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
u64 lio_pci_readq(struct octeon_device *oct, u64 addr)
{
  #line 1328 
  u64 val64;
  #line 1329 
  unsigned long flags;
  #line 1330 
  u32 val32;
  #line 1330 
  u32 addrhi;
  #line 1332 
  cif___ldv_spin_lock_pci_win_lock_of_octeon_device(& oct->pci_win_lock);
  #line 1337 
  addrhi = (unsigned int)(addr >> 32);
  #line 1338 
  if ((unsigned int)oct->chip_id + 65391U <= 1U || (unsigned int)oct->chip_id == 38658U) 
    #line 1341 
    addrhi |= 393216U;
  #line 1342 
  writel(addrhi,(void *)oct->reg_list.pci_win_rd_addr_hi);
  #line 1345 
  val32 = readl((void *)oct->reg_list.pci_win_rd_addr_hi);
  #line 1347 
  writel((unsigned int)addr,(void *)oct->reg_list.pci_win_rd_addr_lo);
  #line 1348 
  val32 = readl((void *)oct->reg_list.pci_win_rd_addr_lo);
  #line 1350 
  val64 = readq((void *)oct->reg_list.pci_win_rd_data);
  #line 1352 
  cif_spin_unlock_irqrestore_pci_win_lock_of_octeon_device(& oct->pci_win_lock,flags);
  #line 1354 
  return val64;
}

#line 1357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
void lio_pci_writeq(struct octeon_device *oct, u64 val, u64 addr)
{
  #line 1361 
  u32 val32;
  #line 1362 
  unsigned long flags;
  #line 1364 
  cif___ldv_spin_lock_pci_win_lock_of_octeon_device(& oct->pci_win_lock);
  #line 1366 
  writeq(addr,(void *)oct->reg_list.pci_win_wr_addr);
  #line 1369 
  writel((unsigned int)(val >> 32),(void *)oct->reg_list.pci_win_wr_data_hi);
  #line 1371 
  val32 = readl((void *)oct->reg_list.pci_win_wr_data_hi);
  #line 1373 
  writel((unsigned int)val,(void *)oct->reg_list.pci_win_wr_data_lo);
  #line 1375 
  cif_spin_unlock_irqrestore_pci_win_lock_of_octeon_device(& oct->pci_win_lock,flags);
  #line 1376 
  return;
}

#line 1378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_mem_access_ok(struct octeon_device *oct)
{
  #line 1381 
  u64 lmc0_reset_ctl;
  #line 1380 
  u64 access_okay = 0ULL;
  #line 1384 
  if ((unsigned int)oct->chip_id == 38658U) {
    #line 1385 
    lmc0_reset_ctl = lio_pci_readq(oct,307865537479040ULL);
    #line 1386 
    access_okay = lmc0_reset_ctl & 1ULL;
  }
  else {
    #line 1389 
    lmc0_reset_ctl = lio_pci_readq(oct,307865537479040ULL);
    #line 1390 
    access_okay = lmc0_reset_ctl & 1ULL;
  }
  #line 1394 
  return access_okay == 0ULL;
}

#line 1397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int octeon_wait_for_ddr_init(struct octeon_device *oct, u32 *timeout)
{
  #line 1400 
  u32 ms;
  #line 1399 
  int ret = 1;
  #line 1402 
  if (timeout == (u32 *)0U) 
                            #line 1403 
                            return ret;
  #line 1405 
  ms = 0U;
  #line 1405 
  while (ret != 0 && (*timeout == 0U || *timeout >= ms)) {
    #line 1407 
    ret = octeon_mem_access_ok(oct);
    #line 1410 
    if (ret != 0) 
                  #line 1411 
                  schedule_timeout_uninterruptible(25L);
    #line 1405 
    ms += 25U;
  }
  #line 1414 
  return ret;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
int lio_get_device_id(void *dev)
{
  #line 1425 
  u32 i;
  #line 1424 
  struct octeon_device *octeon_dev = (struct octeon_device *)dev;
  #line 1427 
  i = 0U;
  #line 1427 
  while (i <= 127U) {
    #line 1428 
    if (octeon_device[i] == octeon_dev) 
                                        #line 1429 
                                        return (int)octeon_dev->octeon_id;
    #line 1427 
    i ++;
  }
  #line 1430 
  return -1;
}

#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/octeon_device.c"
void lio_enable_irq(struct octeon_droq *droq, struct octeon_instr_queue *iq)
{
  #line 1435 
  u64 instr_cnt;
  #line 1436 
  u32 pkts_pend;
  #line 1437 
  struct octeon_device *oct = (struct octeon_device *)0;
  #line 1440 
  if (droq != (struct octeon_droq *)0) {
    #line 1441 
    pkts_pend = (unsigned int)atomic_read_5(& droq->pkts_pending);
    #line 1442 
    writel(droq->pkt_count - pkts_pend,droq->pkts_sent_reg);
    #line 1443 
    droq->pkt_count = pkts_pend;
    #line 1444 
    oct = droq->oct_dev;
  }
  #line 1446 
  if (iq != (struct octeon_instr_queue *)0) {
    #line 1447 
    cif_spin_lock_bh_lock_of_octeon_instr_queue_0(& iq->lock);
    #line 1448 
    writel(iq->pkts_processed,iq->inst_cnt_reg);
    #line 1449 
    iq->pkt_in_done -= iq->pkts_processed;
    #line 1450 
    iq->pkts_processed = 0U;
    #line 1452 
    cif_spin_unlock_bh_lock_of_octeon_instr_queue_0(& iq->lock);
    #line 1453 
    oct = iq->oct_dev;
  }
  #line 1458 
  if (oct != (struct octeon_device *)0 && ((unsigned int)oct->chip_id == 38658U || (unsigned int)oct->chip_id == 38674U)) 
    #line 1459 
    if (droq != (struct octeon_droq *)0) 
                                         #line 1460 
                                         writeq(1152921504606846976ULL,droq->pkts_sent_reg);
    else 
      #line 1462 
      if (iq != (struct octeon_instr_queue *)0) {
        #line 1463 
        instr_cnt = readq(iq->inst_cnt_reg);
        #line 1464 
        writeq((instr_cnt & 17293822564807737344ULL) | 1152921504606846976ULL,iq->inst_cnt_reg);
      }
  #line 1468 
  return;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr)
{
  #line 123 
  ldv_set_bit(nr,addr);
  #line 124 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void INIT_LIST_HEAD_4(struct list_head *list)
{
  #line 137 
  ldv_init_list_head(list);
  #line 138 
  return;
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void atomic_inc_2(atomic_t *v)
{
  #line 186 
  ldv_atomic_inc(v);
  #line 187 
  return;
}

#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void atomic_dec_1(atomic_t *v)
{
  #line 193 
  ldv_atomic_dec(v);
  #line 194 
  return;
}

#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_vfree_1(void *addr)
{
  #line 669 
  ldv_vfree(addr);
  #line 670 
  return;
}

#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void *cif_vzalloc_0(unsigned long size)
{
  #line 676 
  return ldv_vzalloc(size);
}

#line 680  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_spin_lock_octeon_devices_lock(spinlock_t *lock)
{
  #line 683 
  ldv_spin_model_lock((char *)"octeon_devices_lock");
  #line 685 
  spin_lock_2(lock);
  #line 686 
  return;
}

#line 689  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_spin_unlock_octeon_devices_lock(spinlock_t *lock)
{
  #line 692 
  ldv_spin_model_unlock((char *)"octeon_devices_lock");
  #line 694 
  spin_unlock_2(lock);
  #line 695 
  return;
}

#line 698  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void *cif_vzalloc_node_0(unsigned long size, int node)
{
  #line 701 
  return ldv_vzalloc(size);
}

#line 705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_spin_lock_bh_lock_of_octeon_dispatch_list_0(spinlock_t *lock)
{
  #line 708 
  ldv_spin_model_lock((char *)"lock_of_octeon_dispatch_list");
  #line 710 
  spin_lock_bh_3(lock);
  #line 711 
  return;
}

#line 714  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_spin_unlock_bh_lock_of_octeon_dispatch_list_0(spinlock_t *lock)
{
  #line 717 
  ldv_spin_model_unlock((char *)"lock_of_octeon_dispatch_list");
  #line 719 
  spin_unlock_bh_3(lock);
  #line 720 
  return;
}

#line 723  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void *cif_vmalloc_1(unsigned long size)
{
  #line 726 
  return ldv_vmalloc(size);
}

#line 730  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif___ldv_spin_lock_pci_win_lock_of_octeon_device(spinlock_t *lock)
{
  #line 733 
  ldv_spin_model_lock((char *)"pci_win_lock_of_octeon_device");
  #line 735 
  __ldv_spin_lock(lock);
  #line 736 
  return;
}

#line 739  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_spin_unlock_irqrestore_pci_win_lock_of_octeon_device(spinlock_t *lock, unsigned long flags)
{
  #line 742 
  ldv_spin_model_unlock((char *)"pci_win_lock_of_octeon_device");
  #line 744 
  spin_unlock_irqrestore_2(lock,flags);
  #line 745 
  return;
}

#line 748  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_spin_lock_bh_lock_of_octeon_instr_queue_0(spinlock_t *lock)
{
  #line 751 
  ldv_spin_model_lock((char *)"lock_of_octeon_instr_queue");
  #line 753 
  spin_lock_bh_3(lock);
  #line 754 
  return;
}

#line 757  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/octeon_device.i.aux"
static void cif_spin_unlock_bh_lock_of_octeon_instr_queue_0(spinlock_t *lock)
{
  #line 760 
  ldv_spin_model_unlock((char *)"lock_of_octeon_instr_queue");
  #line 762 
  spin_unlock_bh_3(lock);
  #line 763 
  return;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_pf_device.i.aux"
static void INIT_LIST_HEAD_5(struct list_head *list);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_6(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_9063 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set_5(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_9065 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_6(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_6(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set_5(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set_5(v,i);
  #line 46 
  return;
}

#line 612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 667  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_pf_device.i.aux"
static bool cif_schedule_delayed_work_2(struct delayed_work *dwork, unsigned long delay);
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 675  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_pf_device.i.aux"
static void *cif_vmalloc_2(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 682  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_pf_device.i.aux"
static void cif_vfree_2(void *addr);
#line 1716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1716 
void _dev_notice(struct device *, char * , ...);
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.h"
#line 1309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
int setup_cn23xx_octeon_pf_device(struct octeon_device *oct);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.h"
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
int validate_cn23xx_pf_config_info(struct octeon_device *oct, struct octeon_config *conf23xx);
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.h"
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
void cn23xx_dump_pf_initialized_regs(struct octeon_device *oct);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.h"
#line 1420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
int cn23xx_fw_loaded(struct octeon_device *oct);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.h"
#line 1439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
void cn23xx_tell_vf_its_macaddr_changed(struct octeon_device *oct, int vfidx, u8 *mac);
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.h"
#line 1470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
int cn23xx_get_vf_stats(struct octeon_device *oct, int vfidx, struct oct_vf_stats *stats);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
void cn23xx_dump_pf_initialized_regs(struct octeon_device *oct)
{
  #line 41 
  int i = 0;
  #line 42 
  u32 regval = 0U;
  #line 43 
  struct octeon_cn23xx_pf *cn23xx = (struct octeon_cn23xx_pf *)oct->chip;
  {
    #line 46 
    bool branch;
    #line 46 
    struct _ddebug __UNIQUE_ID_ddebug440 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s[%llx] : 0x%llx\n", .lineno = (unsigned int)46U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 46 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug440.key.dd_key_false.key,(_Bool)0);
    #line 46 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 46 
      ;
      #line 46 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug440,& (oct->pci_dev)->dev,(char *)"%s[%llx] : 0x%llx\n",(char *)"CN23XX_WIN_WR_MASK_REG",131120LL,(long long)readq((void *)(oct->mmio[0].hw_addr + 131120U)));
    }
  }
  {
    #line 49 
    bool branch_0;
    #line 49 
    struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s[%llx] : 0x%016llx\n", .lineno = (unsigned int)49U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 49 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
    #line 49 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 49 
      ;
      #line 49 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug441,& (oct->pci_dev)->dev,(char *)"%s[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_SCRATCH1",164800LL,(long long)readq((void *)(oct->mmio[0].hw_addr + 164800U)));
    }
  }
  {
    #line 52 
    bool branch_1;
    #line 52 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s[%llx] : 0x%016llx\n", .lineno = (unsigned int)52U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 52 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 52 
    if ((long)((long)((int)branch_1 != 0)) != 0L) {
      #line 52 
      ;
      #line 52 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug442,& (oct->pci_dev)->dev,(char *)"%s[%llx] : 0x%016llx\n",(char *)"CN23XX_RST_SOFT_RST",307863356446336ULL,lio_pci_readq(oct,307863356446336ULL));
    }
  }
  {
    #line 57 
    bool branch_2;
    #line 57 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s[%llx] : 0x%016llx\n", .lineno = (unsigned int)57U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 57 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 57 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 57 
      ;
      #line 57 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug443,& (oct->pci_dev)->dev,(char *)"%s[%llx] : 0x%016llx\n",(char *)"CN23XX_DPI_DMA_CONTROL",526666069704776ULL,lio_pci_readq(oct,526666069704776ULL));
    }
  }
  #line 61 
  i = 0;
  #line 61 
  while (i <= 5) {
    {
      #line 62 
      bool branch_3;
      #line 62 
      struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)62U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 62 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
      #line 62 
      if ((long)((long)((int)branch_3 != 0)) != 0L) {
        #line 62 
        ;
        #line 62 
        ;
        #line 62 
        ;
        #line 62 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug444,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_DPI_DMA_ENG_ENB",i,(unsigned long long)(i * 8) + 526666069704832ULL,lio_pci_readq(oct,(unsigned long long)(i * 8) + 526666069704832ULL));
      }
    }
    {
      #line 66 
      bool branch_4;
      #line 66 
      struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)66U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 66 
      branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
      #line 66 
      if ((long)((long)((int)branch_4 != 0)) != 0L) {
        #line 66 
        ;
        #line 66 
        ;
        #line 66 
        ;
        #line 66 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug445,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_DPI_DMA_ENG_BUF",i,(unsigned long long)(i * 8) + 526666069706880ULL,lio_pci_readq(oct,(unsigned long long)(i * 8) + 526666069706880ULL));
      }
    }
    #line 61 
    i ++;
  }
  {
    #line 72 
    bool branch_5;
    #line 72 
    struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s[%llx] : 0x%016llx\n", .lineno = (unsigned int)72U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 72 
    branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
    #line 72 
    if ((long)((long)((int)branch_5 != 0)) != 0L) {
      #line 72 
      ;
      #line 72 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug446,& (oct->pci_dev)->dev,(char *)"%s[%llx] : 0x%016llx\n",(char *)"CN23XX_DPI_CTL",526666069704768ULL,lio_pci_readq(oct,526666069704768ULL));
    }
  }
  #line 76 
  pci_read_config_dword(oct->pci_dev,120,& regval);
  {
    #line 77 
    bool branch_6;
    #line 77 
    struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s[%llx] : 0x%016llx\n", .lineno = (unsigned int)77U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 77 
    branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
    #line 77 
    if ((long)((long)((int)branch_6 != 0)) != 0L) 
                                                  #line 77 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug447,& (oct->pci_dev)->dev,(char *)"%s[%llx] : 0x%016llx\n",(char *)"CN23XX_CONFIG_PCIE_DEVCTL",120LL,(long long)regval);
  }
  {
    #line 81 
    bool branch_7;
    #line 81 
    struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)81U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 81 
    branch_7 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
    #line 81 
    if ((long)((long)((int)branch_7 != 0)) != 0L) {
      #line 81 
      ;
      #line 81 
      ;
      #line 81 
      ;
      #line 81 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug448,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_DPI_SLI_PRTX_CFG",(int)oct->pcie_port,(unsigned long long)((int)oct->pcie_port * 8) + 526666069707008ULL,lio_pci_readq(oct,
                       (unsigned long long)((int)oct->pcie_port * 8) + 526666069707008ULL));
    }
  }
  {
    #line 87 
    bool branch_8;
    #line 87 
    struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)87U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 87 
    branch_8 = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
    #line 87 
    if ((long)((long)((int)branch_8 != 0)) != 0L) {
      #line 87 
      ;
      #line 87 
      ;
      #line 87 
      ;
      #line 87 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug449,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_S2M_PORTX_CTL",(int)oct->pcie_port,(long long)(((int)oct->pcie_port + 9176) * 16),(long long)readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(((int)oct->pcie_port + 9176) * 16))));
    }
  }
  {
    #line 93 
    bool branch_9;
    #line 93 
    struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s[%llx] : 0x%016llx\n", .lineno = (unsigned int)93U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 93 
    branch_9 = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
    #line 93 
    if ((long)((long)((int)branch_9 != 0)) != 0L) {
      #line 93 
      ;
      #line 93 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug450,& (oct->pci_dev)->dev,(char *)"%s[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_RING_RST",168416LL,readq((void *)(oct->mmio[0].hw_addr + 168416U)));
    }
  }
  #line 98 
  i = 0;
  #line 98 
  while (i <= 3) {
    {
      #line 99 
      bool branch_10;
      #line 99 
      struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)99U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 99 
      branch_10 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
      #line 99 
      if ((long)((long)((int)branch_10 != 0)) != 0L) {
        #line 99 
        ;
        #line 99 
        ;
        #line 99 
        ;
        #line 99 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug451,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_PKT_MAC_RINFO64",i,(long long)((i * 32 + 167984) + (int)oct->pf_num * 16),(long long)readq((void *)(oct->mmio[0].hw_addr + (unsigned long)((i * 32 + 167984) + 
                                                               (int)oct->pf_num * 16))));
      }
    }
    #line 98 
    i ++;
  }
  #line 108 
  i = 0;
  #line 108 
  while (i <= 63) {
    {
      #line 109 
      bool branch_11;
      #line 109 
      struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)109U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 109 
      branch_11 = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
      #line 109 
      if ((long)((long)((int)branch_11 != 0)) != 0L) {
        #line 109 
        ;
        #line 109 
        ;
        #line 109 
        ;
        #line 109 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug452,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_IQ_PKT_CONTROL64",i,(long long)(i * 131072 + 65536),(long long)readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(i * 131072 + 65536))));
      }
    }
    #line 108 
    i ++;
  }
  {
    #line 117 
    bool branch_12;
    #line 117 
    struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s[%llx] : 0x%016llx\n", .lineno = (unsigned int)117U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 117 
    branch_12 = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
    #line 117 
    if ((long)((long)((int)branch_12 != 0)) != 0L) {
      #line 117 
      ;
      #line 117 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug453,& (oct->pci_dev)->dev,(char *)"%s[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_OQ_WMARK",168320LL,(long long)readq((void *)(oct->mmio[0].hw_addr + 168320U)));
    }
  }
  #line 121 
  i = 0;
  #line 121 
  while (i <= 63) {
    {
      #line 122 
      bool branch_13;
      #line 122 
      struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)122U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 122 
      branch_13 = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
      #line 122 
      if ((long)((long)((int)branch_13 != 0)) != 0L) {
        #line 122 
        ;
        #line 122 
        ;
        #line 122 
        ;
        #line 122 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug454,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_OQ_PKT_CONTROL",i,(long long)(i * 131072 + 65616),(long long)readl((void *)(oct->mmio[0].hw_addr + (unsigned long)(i * 131072 + 65616))));
      }
    }
    {
      #line 127 
      bool branch_14;
      #line 127 
      struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)127U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 127 
      branch_14 = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
      #line 127 
      if ((long)((long)((int)branch_14 != 0)) != 0L) {
        #line 127 
        ;
        #line 127 
        ;
        #line 127 
        ;
        #line 127 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug455,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_OQ_PKT_INT_LEVELS",i,(long long)(i * 131072 + 65696),(long long)readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(i * 131072 + 65696))));
      }
    }
    #line 121 
    i ++;
  }
  {
    #line 135 
    bool branch_15;
    #line 135 
    struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s[%llx] : 0x%016llx\n", .lineno = (unsigned int)135U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 135 
    branch_15 = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
    #line 135 
    if ((long)((long)((int)branch_15 != 0)) != 0L) {
      #line 135 
      ;
      #line 135 
      ;
      #line 135 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug456,& (oct->pci_dev)->dev,(char *)"%s[%llx] : 0x%016llx\n",(char *)"cn23xx->intr_enb_reg64",(long long)cn23xx->intr_enb_reg64,(long long)readq((void *)cn23xx->intr_enb_reg64));
    }
  }
  {
    #line 140 
    bool branch_16;
    #line 140 
    struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s[%llx] : 0x%016llx\n", .lineno = (unsigned int)140U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 140 
    branch_16 = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
    #line 140 
    if ((long)((long)((int)branch_16 != 0)) != 0L) {
      #line 140 
      ;
      #line 140 
      ;
      #line 140 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug457,& (oct->pci_dev)->dev,(char *)"%s[%llx] : 0x%016llx\n",(char *)"cn23xx->intr_sum_reg64",(long long)cn23xx->intr_sum_reg64,(long long)readq((void *)cn23xx->intr_sum_reg64));
    }
  }
  #line 146 
  i = 0;
  #line 146 
  while (i <= 63) {
    {
      #line 147 
      bool branch_17;
      #line 147 
      struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)147U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 147 
      branch_17 = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
      #line 147 
      if ((long)((long)((int)branch_17 != 0)) != 0L) {
        #line 147 
        ;
        #line 147 
        ;
        #line 147 
        ;
        #line 147 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug458,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_IQ_BASE_ADDR64",i,(long long)(i * 131072 + 65552),(long long)readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(i * 131072 + 65552))));
      }
    }
    {
      #line 152 
      bool branch_18;
      #line 152 
      struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)152U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 152 
      branch_18 = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
      #line 152 
      if ((long)((long)((int)branch_18 != 0)) != 0L) {
        #line 152 
        ;
        #line 152 
        ;
        #line 152 
        ;
        #line 152 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug459,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_IQ_SIZE",i,(long long)(i * 131072 + 65584),(long long)readl((void *)(oct->mmio[0].hw_addr + (unsigned long)(i * 131072 + 65584))));
      }
    }
    {
      #line 157 
      bool branch_19;
      #line 157 
      struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)157U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 157 
      branch_19 = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
      #line 157 
      if ((long)((long)((int)branch_19 != 0)) != 0L) {
        #line 157 
        ;
        #line 157 
        ;
        #line 157 
        ;
        #line 157 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug460,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_IQ_DOORBELL",i,(long long)(i * 131072 + 65568),(long long)readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(i * 131072 + 65568))));
      }
    }
    {
      #line 162 
      bool branch_20;
      #line 162 
      struct _ddebug __UNIQUE_ID_ddebug461 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)162U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 162 
      branch_20 = arch_static_branch(& __UNIQUE_ID_ddebug461.key.dd_key_false.key,(_Bool)0);
      #line 162 
      if ((long)((long)((int)branch_20 != 0)) != 0L) {
        #line 162 
        ;
        #line 162 
        ;
        #line 162 
        ;
        #line 162 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug461,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_IQ_INSTR_COUNT64",i,(long long)(i * 131072 + 65600),(long long)readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(i * 131072 + 65600))));
      }
    }
    #line 146 
    i ++;
  }
  #line 170 
  i = 0;
  #line 170 
  while (i <= 63) {
    {
      #line 171 
      bool branch_21;
      #line 171 
      struct _ddebug __UNIQUE_ID_ddebug462 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)171U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 171 
      branch_21 = arch_static_branch(& __UNIQUE_ID_ddebug462.key.dd_key_false.key,(_Bool)0);
      #line 171 
      if ((long)((long)((int)branch_21 != 0)) != 0L) {
        #line 171 
        ;
        #line 171 
        ;
        #line 171 
        ;
        #line 171 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug462,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_OQ_BASE_ADDR64",i,(long long)(i * 131072 + 65648),(long long)readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(i * 131072 + 65648))));
      }
    }
    {
      #line 176 
      bool branch_22;
      #line 176 
      struct _ddebug __UNIQUE_ID_ddebug463 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)176U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 176 
      branch_22 = arch_static_branch(& __UNIQUE_ID_ddebug463.key.dd_key_false.key,(_Bool)0);
      #line 176 
      if ((long)((long)((int)branch_22 != 0)) != 0L) {
        #line 176 
        ;
        #line 176 
        ;
        #line 176 
        ;
        #line 176 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug463,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_OQ_SIZE",i,(long long)(i * 131072 + 65680),(long long)readl((void *)(oct->mmio[0].hw_addr + (unsigned long)(i * 131072 + 65680))));
      }
    }
    {
      #line 181 
      bool branch_23;
      #line 181 
      struct _ddebug __UNIQUE_ID_ddebug464 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)181U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 181 
      branch_23 = arch_static_branch(& __UNIQUE_ID_ddebug464.key.dd_key_false.key,(_Bool)0);
      #line 181 
      if ((long)((long)((int)branch_23 != 0)) != 0L) {
        #line 181 
        ;
        #line 181 
        ;
        #line 181 
        ;
        #line 181 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug464,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_OQ_BUFF_INFO_SIZE",i,(long long)(i * 131072 + 65632),(long long)readl((void *)(oct->mmio[0].hw_addr + (unsigned long)(i * 131072 + 65632))));
      }
    }
    {
      #line 186 
      bool branch_24;
      #line 186 
      struct _ddebug __UNIQUE_ID_ddebug465 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)186U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 186 
      branch_24 = arch_static_branch(& __UNIQUE_ID_ddebug465.key.dd_key_false.key,(_Bool)0);
      #line 186 
      if ((long)((long)((int)branch_24 != 0)) != 0L) {
        #line 186 
        ;
        #line 186 
        ;
        #line 186 
        ;
        #line 186 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug465,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_OQ_PKTS_SENT",i,(long long)(i * 131072 + 65712),(long long)readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(i * 131072 + 65712))));
      }
    }
    {
      #line 191 
      bool branch_25;
      #line 191 
      struct _ddebug __UNIQUE_ID_ddebug466 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s(%d)[%llx] : 0x%016llx\n", .lineno = (unsigned int)191U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 191 
      branch_25 = arch_static_branch(& __UNIQUE_ID_ddebug466.key.dd_key_false.key,(_Bool)0);
      #line 191 
      if ((long)((long)((int)branch_25 != 0)) != 0L) {
        #line 191 
        ;
        #line 191 
        ;
        #line 191 
        ;
        #line 191 
        __dynamic_dev_dbg(& __UNIQUE_ID_ddebug466,& (oct->pci_dev)->dev,(char *)"%s(%d)[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_OQ_PKTS_CREDIT",i,(long long)(i * 131072 + 65664),(long long)readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(i * 131072 + 65664))));
      }
    }
    #line 170 
    i ++;
  }
  {
    #line 198 
    bool branch_26;
    #line 198 
    struct _ddebug __UNIQUE_ID_ddebug467 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s[%llx] : 0x%016llx\n", .lineno = (unsigned int)198U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 198 
    branch_26 = arch_static_branch(& __UNIQUE_ID_ddebug467.key.dd_key_false.key,(_Bool)0);
    #line 198 
    if ((long)((long)((int)branch_26 != 0)) != 0L) {
      #line 198 
      ;
      #line 198 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug467,& (oct->pci_dev)->dev,(char *)"%s[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_PKT_TIME_INT",168256LL,(long long)readq((void *)(oct->mmio[0].hw_addr + 168256U)));
    }
  }
  {
    #line 202 
    bool branch_27;
    #line 202 
    struct _ddebug __UNIQUE_ID_ddebug468 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_dump_pf_initialized_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s[%llx] : 0x%016llx\n", .lineno = (unsigned int)202U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 202 
    branch_27 = arch_static_branch(& __UNIQUE_ID_ddebug468.key.dd_key_false.key,(_Bool)0);
    #line 202 
    if ((long)((long)((int)branch_27 != 0)) != 0L) {
      #line 202 
      ;
      #line 202 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug468,& (oct->pci_dev)->dev,(char *)"%s[%llx] : 0x%016llx\n",(char *)"CN23XX_SLI_PKT_CNT_INT",168240LL,(long long)readq((void *)(oct->mmio[0].hw_addr + 168240U)));
    }
  }
  #line 204 
  return;
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static int cn23xx_pf_soft_reset(struct octeon_device *oct)
{
  #line 210 
  writeq(255ULL,(void *)(oct->mmio[0].hw_addr + 131120U));
  {
    #line 212 
    bool branch;
    #line 212 
    struct _ddebug __UNIQUE_ID_ddebug469 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_pf_soft_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"OCTEON[%d]: BIST enabled for CN23XX soft reset\n", .lineno = (unsigned int)212U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 212 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug469.key.dd_key_false.key,(_Bool)0);
    #line 212 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 212 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug469,& (oct->pci_dev)->dev,(char *)"OCTEON[%d]: BIST enabled for CN23XX soft reset\n",oct->octeon_id);
  }
  #line 215 
  writeq(4660ULL,(void *)(oct->mmio[0].hw_addr + 164800U));
  #line 218 
  lio_pci_readq(oct,307863356446336ULL);
  #line 219 
  lio_pci_writeq(oct,1ULL,307863356446336ULL);
  {
    #line 222 
    unsigned long __ms = 100UL;
    #line 222 
    while (1) {
      #line 222 
      unsigned long tmp_0;
      #line 222 
      tmp_0 = __ms;
      #line 222 
      __ms --;
      #line 222 
      ;
      #line 222 
      if (! (tmp_0 != 0UL)) 
                            #line 222 
                            break;
      #line 222 
      __const_udelay(4295000UL);
    }
  }
  #line 224 
  if (readq((void *)(oct->mmio[0].hw_addr + 164800U)) != 0ULL) {
    #line 225 
    _dev_err(& (oct->pci_dev)->dev,(char *)"OCTEON[%d]: Soft reset failed\n",oct->octeon_id);
    #line 227 
    return 1;
  }
  {
    #line 230 
    bool branch_0;
    #line 230 
    struct _ddebug __UNIQUE_ID_ddebug470 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_pf_soft_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"OCTEON[%d]: Reset completed\n", .lineno = (unsigned int)230U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 230 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug470.key.dd_key_false.key,(_Bool)0);
    #line 230 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 230 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug470,& (oct->pci_dev)->dev,(char *)"OCTEON[%d]: Reset completed\n",oct->octeon_id);
  }
  #line 234 
  writeq(255ULL,(void *)(oct->mmio[0].hw_addr + 131120U));
  #line 236 
  return 0;
}

#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static void cn23xx_enable_error_reporting(struct octeon_device *oct)
{
  #line 241 
  u32 regval;
  #line 242 
  u32 uncorrectable_err_mask;
  #line 242 
  u32 corrtable_err_status;
  #line 244 
  pci_read_config_dword(oct->pci_dev,120,& regval);
  #line 245 
  if ((regval & 262144U) != 0U) {
    #line 246 
    uncorrectable_err_mask = 0U;
    #line 247 
    corrtable_err_status = 0U;
    #line 248 
    pci_read_config_dword(oct->pci_dev,264,& uncorrectable_err_mask);
    #line 251 
    pci_read_config_dword(oct->pci_dev,272,& corrtable_err_status);
    #line 254 
    _dev_err(& (oct->pci_dev)->dev,(char *)"PCI-E Fatal error detected;\n",regval,uncorrectable_err_mask,corrtable_err_status);
  }
  #line 262 
  regval |= 15U;
  {
    #line 264 
    bool branch;
    #line 264 
    struct _ddebug __UNIQUE_ID_ddebug471 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_enable_error_reporting", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"OCTEON[%d]: Enabling PCI-E error reporting..\n", .lineno = (unsigned int)264U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 264 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug471.key.dd_key_false.key,(_Bool)0);
    #line 264 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 264 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug471,& (oct->pci_dev)->dev,(char *)"OCTEON[%d]: Enabling PCI-E error reporting..\n",oct->octeon_id);
  }
  #line 266 
  pci_write_config_dword(oct->pci_dev,120,regval);
  #line 267 
  return;
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static u32 cn23xx_coprocessor_clock(struct octeon_device *oct)
{
  #line 276 
  return ((unsigned int)(lio_pci_readq(oct,307863356446208ULL) >> 24) & 63U) * 50U;
}

#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
u32 cn23xx_pf_get_oq_ticks(struct octeon_device *oct, u32 time_intr_in_us)
{
  #line 282 
  u32 oqticks_per_us = cn23xx_coprocessor_clock(oct);
  #line 284 
  oct->pfvf_hsword.coproc_tics_per_us = (unsigned long long)((unsigned short)oqticks_per_us);
  #line 287 
  oqticks_per_us *= 1000U;
  #line 290 
  oqticks_per_us /= 1024U;
  #line 295 
  oqticks_per_us *= time_intr_in_us;
  #line 296 
  oqticks_per_us /= 1000U;
  #line 298 
  return oqticks_per_us;
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static void cn23xx_setup_global_mac_regs(struct octeon_device *oct)
{
  #line 305 
  u64 reg_val;
  #line 306 
  u64 temp;
  #line 303 
  u16 mac_no = oct->pcie_port;
  #line 304 
  u16 pf_num = oct->pf_num;
  {
    #line 310 
    bool branch;
    #line 310 
    struct _ddebug __UNIQUE_ID_ddebug472 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_setup_global_mac_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"%s:Using pcie port %d\n", .lineno = (unsigned int)310U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 310 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug472.key.dd_key_false.key,(_Bool)0);
    #line 310 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 310 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug472,& (oct->pci_dev)->dev,(char *)"%s:Using pcie port %d\n",(char *)"cn23xx_setup_global_mac_regs",(int)mac_no);
  }
  #line 314 
  reg_val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(((int)mac_no * 32 + 167984) + (int)pf_num * 16)));
  #line 317 
  if ((unsigned int)oct->rev_id == 1U) 
                                       #line 319 
                                       reg_val = (unsigned long long)((int)pf_num * 32); else 
                                                                    #line 322 
                                                                    reg_val = (unsigned long long)((int)pf_num * 64);
  #line 326 
  reg_val = (unsigned long long)(oct->sriov_info.trs << 16) | reg_val;
  #line 329 
  temp = (unsigned long long)oct->sriov_info.rings_per_vf & 255ULL;
  #line 330 
  reg_val = (temp << 32) | reg_val;
  #line 333 
  temp = (unsigned long long)oct->sriov_info.max_vfs & 255ULL;
  #line 334 
  reg_val = (temp << 48) | reg_val;
  #line 337 
  writeq(reg_val,(void *)(oct->mmio[0].hw_addr + (unsigned long)(((int)mac_no * 32 + 167984) + (int)pf_num * 16)));
  {
    #line 340 
    bool branch_0;
    #line 340 
    struct _ddebug __UNIQUE_ID_ddebug473 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_setup_global_mac_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"SLI_PKT_MAC(%d)_PF(%d)_RINFO : 0x%016llx\n", .lineno = (unsigned int)340U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 340 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug473.key.dd_key_false.key,(_Bool)0);
    #line 340 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 340 
      ;
      #line 340 
      ;
      #line 340 
      ;
      #line 340 
      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug473,& (oct->pci_dev)->dev,(char *)"SLI_PKT_MAC(%d)_PF(%d)_RINFO : 0x%016llx\n",(int)mac_no,(int)pf_num,readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(((int)mac_no * 32 + 167984) + 
                                                              (int)pf_num * 16))));
    }
  }
  #line 342 
  return;
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static int cn23xx_reset_io_queues(struct octeon_device *oct)
{
  #line 348 
  u64 d64;
  #line 349 
  u32 q_no;
  #line 349 
  u32 srn;
  #line 349 
  u32 ern;
  #line 347 
  int ret_val = 0;
  #line 350 
  u32 loop = 1000U;
  #line 352 
  srn = oct->sriov_info.pf_srn;
  #line 353 
  ern = oct->sriov_info.num_pf_rings + srn;
  #line 359 
  q_no = srn;
  #line 359 
  while (q_no < ern) {
    #line 361 
    d64 = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
    #line 362 
    d64 |= 8388608ULL;
    #line 363 
    writeq(d64,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
    #line 359 
    q_no ++;
  }
  #line 367 
  q_no = srn;
  #line 367 
  while (q_no < ern) {
    {
      #line 390 
      union __anonunion___u_9728 __u_6;
      #line 385 
      union __anonunion___u_9724 __u_4;
      #line 368 
      u64 reg_val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
      #line 370 
      while (1) {
        #line 371 
        union __anonunion___u_9716 __u_0;
        #line 370 
        __read_once_size((void *)(& reg_val),(void *)(& __u_0.__c),8);
        #line 370 
        if (((__u_0.__val) & 8388608ULL) != 0ULL) {
          #line 372 
          union __anonunion___u_9718 __u_1;
          #line 371 
          __read_once_size((void *)(& reg_val),(void *)(& __u_1.__c),8);
          #line 370 
          if (((__u_1.__val) & 268435456ULL) == 0ULL) {
            #line 371 
            u32 tmp_3;
            #line 371 
            tmp_3 = loop;
            #line 371 
            loop --;
            #line 371 
            ;
            #line 371 
            if (! (tmp_3 != 0U)) 
                                 #line 370 
                                 break;
          }
          else 
               #line 370 
               break;
        }
        else 
             #line 370 
             break;
        {
          #line 374 
          union __anonunion___u_9714 __u = {.__val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)))};
          #line 373 
          __write_once_size((void *)(& reg_val),(void *)(& __u.__c),8);
          #line 373 
          u64 tmp_2 = __u.__val;
        }
      }
      #line 376 
      if (loop == 0U) {
        #line 377 
        _dev_err(& (oct->pci_dev)->dev,(char *)"clearing the reset reg failed or setting the quiet reg failed for qno: %u\n",q_no);
        #line 380 
        return -1;
      }
      {
        #line 383 
        union __anonunion___u_9722 __u_3;
        #line 382 
        __read_once_size((void *)(& reg_val),(void *)(& __u_3.__c),8);
        #line 383 
        union __anonunion___u_9720 __u_2 = {.__val = (__u_3.__val) & 18446744073701163007ULL};
        #line 382 
        __write_once_size((void *)(& reg_val),(void *)(& __u_2.__c),8);
        #line 382 
        u64 tmp_5 = __u_2.__val;
      }
      #line 384 
      ;
      #line 384 
      __read_once_size((void *)(& reg_val),(void *)(& __u_4.__c),8);
      #line 384 
      writeq((__u_4.__val),(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
      {
        #line 388 
        union __anonunion___u_9726 __u_5 = {.__val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)))};
        #line 387 
        __write_once_size((void *)(& reg_val),(void *)(& __u_5.__c),8);
        #line 387 
        u64 tmp_7 = __u_5.__val;
      }
      #line 389 
      __read_once_size((void *)(& reg_val),(void *)(& __u_6.__c),8);
      #line 389 
      if (((__u_6.__val) & 8388608ULL) != 0ULL) {
        #line 390 
        _dev_err(& (oct->pci_dev)->dev,(char *)"clearing the reset failed for qno: %u\n",q_no);
        #line 393 
        ret_val = -1;
      }
    }
    #line 367 
    q_no ++;
  }
  #line 397 
  return ret_val;
}

#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static int cn23xx_pf_setup_global_input_regs(struct octeon_device *oct)
{
  #line 403 
  struct octeon_instr_queue *iq;
  #line 404 
  u64 intr_threshold;
  #line 404 
  u64 reg_val;
  #line 405 
  u32 q_no;
  #line 405 
  u32 ern;
  #line 405 
  u32 srn;
  #line 406 
  u64 pf_num;
  #line 407 
  u64 vf_num;
  #line 402 
  struct octeon_cn23xx_pf *cn23xx = (struct octeon_cn23xx_pf *)oct->chip;
  #line 409 
  pf_num = (unsigned long long)oct->pf_num;
  #line 411 
  srn = oct->sriov_info.pf_srn;
  #line 412 
  ern = oct->sriov_info.num_pf_rings + srn;
  #line 414 
  if (cn23xx_reset_io_queues(oct) != 0) 
                                        #line 415 
                                        return -1;
  #line 422 
  q_no = 0U;
  #line 422 
  while (q_no < ern) {
    #line 423 
    reg_val = (unsigned long long)((int)oct->pcie_port << 29);
    #line 426 
    if (oct->sriov_info.pf_srn > q_no) {
      #line 427 
      vf_num = (unsigned long long)(q_no / oct->sriov_info.rings_per_vf);
      #line 428 
      vf_num ++;
    }
    else 
         #line 430 
         vf_num = 0ULL;
    #line 433 
    reg_val = (vf_num << 32) | reg_val;
    #line 434 
    reg_val = (pf_num << 45) | reg_val;
    #line 436 
    writeq(reg_val,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
    #line 422 
    q_no ++;
  }
  #line 443 
  q_no = srn;
  #line 443 
  while (q_no < ern) {
    {
      #line 444 
      void *inst_cnt_reg;
      #line 446 
      iq = oct->instr_queue[q_no];
      #line 447 
      if (iq != (struct octeon_instr_queue *)0) 
                                                #line 448 
                                                inst_cnt_reg = iq->inst_cnt_reg; else 
                                                                    #line 450 
                                                                    inst_cnt_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65600U));
      #line 453 
      reg_val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
      #line 456 
      reg_val |= 100663376ULL;
      #line 458 
      writeq(reg_val,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
      #line 463 
      intr_threshold = (unsigned long long)(cn23xx->conf)->iq.iq_intr_pkt;
      #line 466 
      ;
      #line 466 
      ;
      #line 466 
      writeq((readq(inst_cnt_reg) & 18446462603027808255ULL) | (intr_threshold << 32),inst_cnt_reg);
    }
    #line 443 
    q_no ++;
  }
  #line 472 
  return 0;
}

#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static void cn23xx_pf_setup_global_output_regs(struct octeon_device *oct)
{
  #line 477 
  u32 reg_val;
  #line 478 
  u32 q_no;
  #line 478 
  u32 ern;
  #line 478 
  u32 srn;
  #line 479 
  u64 time_threshold;
  #line 481 
  struct octeon_cn23xx_pf *cn23xx = (struct octeon_cn23xx_pf *)oct->chip;
  #line 483 
  srn = oct->sriov_info.pf_srn;
  #line 484 
  ern = oct->sriov_info.num_pf_rings + srn;
  #line 486 
  if ((unsigned int)(cn23xx->conf)->misc.enable_sli_oq_bp != 0U) 
                                                                 #line 487 
                                                                 writeq(32ULL,(void *)(oct->mmio[0].hw_addr + 168320U)); else 
                                                                    #line 490 
                                                                    writeq(0ULL,(void *)(oct->mmio[0].hw_addr + 168320U));
  #line 493 
  q_no = srn;
  #line 493 
  while (q_no < ern) {
    {
      #line 494 
      reg_val = readl((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65616U)));
      #line 497 
      reg_val &= 4294965247U;
      #line 500 
      reg_val |= 64U;
      #line 503 
      reg_val &= 4294967263U;
      #line 509 
      reg_val &= 4294967293U;
      #line 510 
      reg_val &= 4294967291U;
      #line 513 
      reg_val &= 4294967287U;
      #line 521 
      reg_val &= 4294967167U;
      #line 522 
      reg_val &= 4294967039U;
      #line 524 
      reg_val |= 512U;
      #line 527 
      writel(reg_val,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65616U)));
      #line 534 
      time_threshold = (unsigned long long)cn23xx_pf_get_oq_ticks(oct,
                             (unsigned int)(cn23xx->conf)->oq.oq_intr_time);
      #line 537 
      writeq((unsigned long long)(cn23xx->conf)->oq.oq_intr_pkt | (time_threshold << 32),(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65696U)));
    }
    #line 493 
    q_no ++;
  }
  #line 543 
  writeq(64ULL,(void *)(oct->mmio[0].hw_addr + 168320U));
  #line 549 
  if ((unsigned int)oct->rev_id <= 1U) {
    #line 551 
    ;
    #line 551 
    writeq(readq((void *)(oct->mmio[0].hw_addr + 168464U)) | 2ULL,(void *)(oct->mmio[0].hw_addr + 168464U));
  }
  #line 556 
  if ((unsigned int)oct->pf_num != 0U) 
                                       #line 557 
                                       writeq(18446744073709551615ULL,(void *)(oct->mmio[0].hw_addr + 168560U)); else 
                                                                    #line 560 
                                                                    writeq(18446744073709551615ULL,(void *)(oct->mmio[0].hw_addr + 168544U));
  #line 562 
  return;
}

#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static int cn23xx_setup_pf_device_regs(struct octeon_device *oct)
{
  #line 566 
  cn23xx_enable_error_reporting(oct);
  #line 569 
  cn23xx_setup_global_mac_regs(oct);
  #line 571 
  if (cn23xx_pf_setup_global_input_regs(oct) != 0) 
                                                   #line 572 
                                                   return -1;
  #line 574 
  cn23xx_pf_setup_global_output_regs(oct);
  #line 579 
  writeq(2097152ULL,(void *)(oct->mmio[0].hw_addr + 164576U));
  #line 583 
  writeq(64600ULL,(void *)(oct->mmio[0].hw_addr + 168304U));
  #line 584 
  return 0;
}

#line 587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static void cn23xx_setup_iq_regs(struct octeon_device *oct, u32 iq_no)
{
  #line 590 
  u64 pkt_in_done;
  #line 589 
  struct octeon_instr_queue *iq = oct->instr_queue[iq_no];
  #line 592 
  iq_no = oct->sriov_info.pf_srn + iq_no;
  #line 595 
  writeq(iq->base_addr_dma,(void *)(oct->mmio[0].hw_addr + (unsigned long)(iq_no * 131072U + 65552U)));
  #line 597 
  writel(iq->max_count,(void *)(oct->mmio[0].hw_addr + (unsigned long)(iq_no * 131072U + 65584U)));
  #line 602 
  iq->doorbell_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)(iq_no * 131072U + 65568U));
  #line 604 
  iq->inst_cnt_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)(iq_no * 131072U + 65600U));
  {
    #line 606 
    bool branch;
    #line 606 
    struct _ddebug __UNIQUE_ID_ddebug474 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_setup_iq_regs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"InstQ[%d]:dbell reg @ 0x%p instcnt_reg @ 0x%p\n", .lineno = (unsigned int)606U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 606 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug474.key.dd_key_false.key,(_Bool)0);
    #line 606 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 606 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug474,& (oct->pci_dev)->dev,(char *)"InstQ[%d]:dbell reg @ 0x%p instcnt_reg @ 0x%p\n",iq_no,iq->doorbell_reg,iq->inst_cnt_reg);
  }
  #line 612 
  pkt_in_done = readq(iq->inst_cnt_reg);
  #line 614 
  if (oct->msix_on != 0) 
                         #line 616 
                         writeq(pkt_in_done | 281474976710656ULL,iq->inst_cnt_reg); else 
                                                                    #line 622 
                                                                    writeq(pkt_in_done,iq->inst_cnt_reg);
  #line 625 
  iq->reset_instr_cnt = 0U;
  #line 626 
  return;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static void cn23xx_setup_oq_regs(struct octeon_device *oct, u32 oq_no)
{
  #line 630 
  u32 reg_val;
  #line 633 
  u64 time_threshold;
  #line 634 
  u64 cnt_threshold;
  #line 631 
  struct octeon_droq *droq = oct->droq[oq_no];
  #line 632 
  struct octeon_cn23xx_pf *cn23xx = (struct octeon_cn23xx_pf *)oct->chip;
  #line 636 
  oq_no = oct->sriov_info.pf_srn + oq_no;
  #line 638 
  writeq((unsigned long long)droq->desc_ring_dma,(void *)(oct->mmio[0].hw_addr + (unsigned long)(oq_no * 131072U + 65648U)));
  #line 640 
  writel(droq->max_count,(void *)(oct->mmio[0].hw_addr + (unsigned long)(oq_no * 131072U + 65680U)));
  #line 642 
  writel(droq->buffer_size,(void *)(oct->mmio[0].hw_addr + (unsigned long)(oq_no * 131072U + 65632U)));
  #line 646 
  droq->pkts_sent_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)(oq_no * 131072U + 65712U));
  #line 648 
  droq->pkts_credit_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)(oq_no * 131072U + 65664U));
  #line 651 
  if (oct->msix_on == 0) {
    #line 654 
    reg_val = readl((void *)(oct->mmio[0].hw_addr + (unsigned long)(oq_no * 131072U + 65616U)));
    #line 656 
    reg_val |= 8192U;
    #line 657 
    writel(reg_val,(void *)(oct->mmio[0].hw_addr + (unsigned long)(oq_no * 131072U + 65616U)));
    #line 662 
    reg_val = readl((void *)(oct->mmio[0].hw_addr + (unsigned long)(oq_no * 131072U + 65616U)));
    #line 664 
    reg_val |= 4096U;
    #line 665 
    writel(reg_val,(void *)(oct->mmio[0].hw_addr + (unsigned long)(oq_no * 131072U + 65616U)));
  }
  else {
    #line 668 
    time_threshold = (unsigned long long)cn23xx_pf_get_oq_ticks(oct,
                             (unsigned int)(cn23xx->conf)->oq.oq_intr_time);
    #line 670 
    cnt_threshold = (unsigned long long)(cn23xx->conf)->oq.oq_intr_pkt;
    #line 672 
    writeq((time_threshold << 32) | cnt_threshold,(void *)(oct->mmio[0].hw_addr + (unsigned long)(oq_no * 131072U + 65696U)));
  }
  #line 674 
  return;
}

#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static void cn23xx_pf_mbox_thread(struct work_struct *work)
{
  #line 683 
  u64 mbox_int_val;
  #line 683 
  u64 val64;
  #line 684 
  u32 q_no;
  #line 684 
  u32 i;
  #line 680 
  struct cavium_wk *wk = (struct cavium_wk *)work;
  #line 681 
  struct octeon_mbox *mbox = (struct octeon_mbox *)wk->ctxptr;
  #line 682 
  struct octeon_device *oct = mbox->oct_dev;
  #line 686 
  if ((unsigned int)oct->rev_id == 0U) {
    #line 688 
    mbox_int_val = readq(mbox->mbox_int_reg);
    #line 689 
    writeq(mbox_int_val,mbox->mbox_int_reg);
    #line 691 
    i = 0U;
    #line 691 
    while (oct->sriov_info.num_vfs_alloced > i) {
      #line 692 
      q_no = oct->sriov_info.rings_per_vf * i;
      #line 694 
      val64 = readq((oct->mbox[q_no])->mbox_write_reg);
      #line 696 
      if (val64 + 18446744073709551615ULL <= 18446744073709551613ULL) {
        #line 697 
        if (octeon_mbox_read(oct->mbox[q_no]) != 0) 
                                                    #line 698 
                                                    octeon_mbox_process_message(oct->mbox[q_no]);
      }
      #line 691 
      i ++;
    }
    #line 703 
    ;
    #line 703 
    cif_schedule_delayed_work_2(& wk->work,msecs_to_jiffies(10U));
  }
  else 
       #line 705 
       octeon_mbox_process_message(mbox);
  #line 706 
  return;
}

#line 709  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static int cn23xx_setup_pf_mbox(struct octeon_device *oct)
{
  #line 714 
  u32 q_no;
  #line 714 
  u32 i;
  #line 711 
  struct octeon_mbox *mbox = (struct octeon_mbox *)0;
  #line 712 
  u16 mac_no = oct->pcie_port;
  #line 713 
  u16 pf_num = oct->pf_num;
  #line 716 
  if (oct->sriov_info.max_vfs == 0U) 
                                     #line 717 
                                     return 0;
  #line 719 
  i = 0U;
  #line 719 
  while (oct->sriov_info.max_vfs > i) {
    #line 720 
    q_no = oct->sriov_info.rings_per_vf * i;
    #line 722 
    mbox = (struct octeon_mbox *)cif_vmalloc_2(904UL);
    #line 723 
    if (mbox == (struct octeon_mbox *)0) 
                                         #line 724 
                                         goto free_mbox;
    #line 726 
    memset((void *)mbox,0,904UL);
    #line 728 
    spinlock_check(& mbox->lock);
    {
      #line 728 
      struct lock_class_key __key;
      #line 728 
      __raw_spin_lock_init(& mbox->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&mbox->lock)->rlock",& __key);
    }
    #line 730 
    mbox->oct_dev = oct;
    #line 732 
    mbox->q_no = q_no;
    #line 734 
    mbox->state = OCTEON_MBOX_STATE_IDLE;
    #line 737 
    mbox->mbox_int_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)((((int)mac_no * 2 + (int)pf_num) + 10040) * 16));
    #line 741 
    mbox->mbox_write_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 66048U));
    #line 745 
    mbox->mbox_read_reg = (void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 66056U));
    {
      #line 749 
      struct lock_class_key __key_0;
      #line 749 
      __init_work(& mbox->mbox_poll_wk.work.work,0);
      #line 749 
      atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
      #line 749 
      mbox->mbox_poll_wk.work.work.data = __constr_expr_34;
      #line 749 
      lockdep_init_map(& mbox->mbox_poll_wk.work.work.lockdep_map,(char *)"(work_completion)",& __key_0,0);
      #line 749 
      INIT_LIST_HEAD_5(& mbox->mbox_poll_wk.work.work.entry);
      #line 749 
      mbox->mbox_poll_wk.work.work.func = & cn23xx_pf_mbox_thread;
    }
    {
      #line 749 
      struct lock_class_key __key_1;
      #line 749 
      init_timer_key(& mbox->mbox_poll_wk.work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&mbox->mbox_poll_wk.work)->timer",& __key_1);
    }
    #line 751 
    mbox->mbox_poll_wk.ctxptr = (void *)mbox;
    #line 753 
    oct->mbox[q_no] = mbox;
    #line 755 
    writeq(1234605616436508552ULL,mbox->mbox_read_reg);
    #line 719 
    i ++;
  }
  #line 758 
  if ((unsigned int)oct->rev_id == 0U) {
    #line 759 
    ;
    #line 759 
    cif_schedule_delayed_work_2(& (oct->mbox[0])->mbox_poll_wk.work,msecs_to_jiffies(0U));
  }
  #line 762 
  return 0;
  #line 764 
  free_mbox: 
             #line 764 
  ;
  #line 765 
  while (i != 0U) {
    #line 766 
    i --;
    #line 767 
    cif_vfree_2((void *)oct->mbox[i]);
  }
  #line 770 
  return 1;
}

#line 773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static int cn23xx_free_pf_mbox(struct octeon_device *oct)
{
  #line 775 
  u32 q_no;
  #line 775 
  u32 i;
  #line 777 
  if (oct->sriov_info.max_vfs == 0U) 
                                     #line 778 
                                     return 0;
  #line 780 
  i = 0U;
  #line 780 
  while (oct->sriov_info.max_vfs > i) {
    #line 781 
    q_no = oct->sriov_info.rings_per_vf * i;
    #line 782 
    cancel_delayed_work_sync(& (oct->mbox[q_no])->mbox_poll_wk.work);
    #line 784 
    cif_vfree_2((void *)oct->mbox[q_no]);
    #line 780 
    i ++;
  }
  #line 787 
  return 0;
}

#line 790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static int cn23xx_enable_io_queues(struct octeon_device *oct)
{
  #line 792 
  u64 reg_val;
  #line 793 
  u32 srn;
  #line 793 
  u32 ern;
  #line 793 
  u32 q_no;
  #line 794 
  u32 loop = 1000U;
  #line 796 
  srn = oct->sriov_info.pf_srn;
  #line 797 
  ern = oct->num_iqs + srn;
  #line 799 
  q_no = srn;
  #line 799 
  while (q_no < ern) {
    #line 801 
    if (((oct->io_qmask.iq64B >> (q_no - srn)) & 1ULL) != 0ULL) {
      #line 802 
      reg_val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
      #line 804 
      reg_val |= 16777216ULL;
      #line 805 
      writeq(reg_val,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
    }
    #line 810 
    if (((oct->io_qmask.iq >> (q_no - srn)) & 1ULL) != 0ULL) {
      #line 814 
      reg_val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
      #line 817 
      if ((reg_val & 8388608ULL) != 0ULL) {
        #line 818 
        while (1) {
          #line 818 
          if ((reg_val & 8388608ULL) != 0ULL && (reg_val & 268435456ULL) == 0ULL) {
            #line 821 
            loop --;
            #line 821 
            if (! (loop != 0U)) 
                                #line 818 
                                break;
          }
          else 
               #line 818 
               break;
          #line 822 
          reg_val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
        }
        #line 826 
        if (loop == 0U) {
          #line 827 
          _dev_err(& (oct->pci_dev)->dev,(char *)"clearing the reset reg failed or setting the quiet reg failed for qno: %u\n",q_no);
          #line 830 
          return -1;
        }
        #line 832 
        reg_val &= 18446744073701163007ULL;
        #line 833 
        writeq(reg_val,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
        #line 837 
        reg_val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
        #line 839 
        if ((reg_val & 8388608ULL) != 0ULL) {
          #line 840 
          _dev_err(& (oct->pci_dev)->dev,(char *)"clearing the reset failed for qno: %u\n",q_no);
          #line 843 
          return -1;
        }
      }
      #line 846 
      reg_val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
      #line 848 
      reg_val |= 4194304ULL;
      #line 849 
      writeq(reg_val,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65536U)));
    }
    #line 799 
    q_no ++;
  }
  #line 853 
  q_no = srn;
  #line 853 
  while (q_no < ern) {
    {
      #line 854 
      u32 reg_val_0;
      #line 856 
      if (((oct->io_qmask.oq >> (q_no - srn)) & 1ULL) != 0ULL) {
        #line 857 
        reg_val_0 = readl((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65616U)));
        #line 859 
        reg_val_0 |= 1U;
        #line 860 
        writel(reg_val_0,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072U + 65616U)));
      }
    }
    #line 853 
    q_no ++;
  }
  #line 864 
  return 0;
}

#line 867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static void cn23xx_disable_io_queues(struct octeon_device *oct)
{
  #line 869 
  int q_no;
  #line 869 
  int loop;
  #line 870 
  u64 d64;
  #line 871 
  u32 d32;
  #line 872 
  u32 srn;
  #line 872 
  u32 ern;
  #line 874 
  srn = oct->sriov_info.pf_srn;
  #line 875 
  ern = oct->num_iqs + srn;
  #line 878 
  q_no = (int)srn;
  #line 878 
  while ((unsigned int)q_no < ern) {
    {
      #line 888 
      union __anonunion___u_9740 __u_4;
      #line 879 
      loop = 250;
      {
        #line 883 
        union __anonunion___u_9730 __u = {.__val = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072 + 65536)))};
        #line 882 
        __write_once_size((void *)(& d64),(void *)(& __u.__c),8);
        #line 882 
        u64 tmp_2 = __u.__val;
      }
      {
        #line 885 
        union __anonunion___u_9734 __u_1;
        #line 884 
        __read_once_size((void *)(& d64),(void *)(& __u_1.__c),8);
        #line 885 
        union __anonunion___u_9732 __u_0 = {.__val = (__u_1.__val) & 18446744073705357311ULL};
        #line 884 
        __write_once_size((void *)(& d64),(void *)(& __u_0.__c),8);
        #line 884 
        u64 tmp_4 = __u_0.__val;
      }
      {
        #line 887 
        union __anonunion___u_9738 __u_3;
        #line 886 
        __read_once_size((void *)(& d64),(void *)(& __u_3.__c),8);
        #line 887 
        union __anonunion___u_9736 __u_2 = {.__val = (__u_3.__val) | 8388608ULL};
        #line 886 
        __write_once_size((void *)(& d64),(void *)(& __u_2.__c),8);
        #line 886 
        u64 tmp_6 = __u_2.__val;
      }
      #line 887 
      ;
      #line 887 
      __read_once_size((void *)(& d64),(void *)(& __u_4.__c),8);
      #line 887 
      writeq((__u_4.__val),(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072 + 65536)));
      {
        #line 894 
        union __anonunion___u_9742 __u_5 = {.__val = readq((void *)(oct->mmio[0].hw_addr + 168416U))};
        #line 893 
        __write_once_size((void *)(& d64),(void *)(& __u_5.__c),8);
        #line 893 
        u64 tmp_8 = __u_5.__val;
      }
      #line 895 
      while (1) {
        #line 896 
        union __anonunion___u_9746 __u_7;
        #line 895 
        __read_once_size((void *)(& d64),(void *)(& __u_7.__c),8);
        #line 895 
        ;
        #line 895 
        if ((((__u_7.__val) >> q_no) & 1ULL) == 0ULL) {
          #line 895 
          int tmp_6_1;
          #line 895 
          tmp_6_1 = loop;
          #line 895 
          loop --;
          #line 895 
          ;
          #line 895 
          if (! (tmp_6_1 != 0)) 
                                #line 895 
                                break;
        }
        else 
             #line 895 
             break;
        {
          #line 897 
          union __anonunion___u_9744 __u_6 = {.__val = readq((void *)(oct->mmio[0].hw_addr + 168416U))};
          #line 896 
          __write_once_size((void *)(& d64),(void *)(& __u_6.__c),8);
          #line 896 
          u64 tmp_10 = __u_6.__val;
        }
        #line 898 
        schedule_timeout_uninterruptible(1L);
      }
      #line 902 
      writel(4294967295U,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072 + 65568)));
      #line 903 
      while (1) {
        #line 903 
        if (readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072 + 65568))) != 0ULL) {
          #line 903 
          int tmp_8_0;
          #line 903 
          tmp_8_0 = loop;
          #line 903 
          loop --;
          #line 903 
          ;
          #line 903 
          if (! (tmp_8_0 != 0)) 
                                #line 903 
                                break;
        }
        else 
             #line 903 
             break;
        #line 905 
        schedule_timeout_uninterruptible(1L);
      }
    }
    #line 878 
    q_no ++;
  }
  #line 910 
  q_no = (int)srn;
  #line 910 
  while ((unsigned int)q_no < ern) {
    {
      #line 938 
      union __anonunion___u_9756 __u_12;
      #line 911 
      loop = 250;
      {
        #line 918 
        union __anonunion___u_9748 __u_8 = {.__val = readq((void *)(oct->mmio[0].hw_addr + 168416U))};
        #line 917 
        __write_once_size((void *)(& d64),(void *)(& __u_8.__c),8);
        #line 917 
        u64 tmp_12 = __u_8.__val;
      }
      #line 919 
      while (1) {
        #line 920 
        union __anonunion___u_9752 __u_10;
        #line 919 
        __read_once_size((void *)(& d64),(void *)(& __u_10.__c),8);
        #line 919 
        ;
        #line 919 
        if ((((__u_10.__val) >> q_no) & 1ULL) == 0ULL) {
          #line 919 
          int tmp_12_0;
          #line 919 
          tmp_12_0 = loop;
          #line 919 
          loop --;
          #line 919 
          ;
          #line 919 
          if (! (tmp_12_0 != 0)) 
                                 #line 919 
                                 break;
        }
        else 
             #line 919 
             break;
        {
          #line 921 
          union __anonunion___u_9750 __u_9 = {.__val = readq((void *)(oct->mmio[0].hw_addr + 168416U))};
          #line 920 
          __write_once_size((void *)(& d64),(void *)(& __u_9.__c),8);
          #line 920 
          u64 tmp_14 = __u_9.__val;
        }
        #line 922 
        schedule_timeout_uninterruptible(1L);
      }
      #line 926 
      writel(4294967295U,(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072 + 65664)));
      #line 928 
      while (1) {
        #line 928 
        if (readq((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072 + 65664))) != 0ULL) {
          #line 929 
          int tmp_14_0;
          #line 929 
          tmp_14_0 = loop;
          #line 929 
          loop --;
          #line 929 
          ;
          #line 929 
          if (! (tmp_14_0 != 0)) 
                                 #line 928 
                                 break;
        }
        else 
             #line 928 
             break;
        #line 931 
        schedule_timeout_uninterruptible(1L);
      }
      {
        #line 936 
        union __anonunion___u_9754 __u_11 = {.__val = readl((void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072 + 65712)))};
        #line 935 
        __write_once_size((void *)(& d32),(void *)(& __u_11.__c),4);
        #line 935 
        u32 tmp_16 = __u_11.__val;
      }
      #line 937 
      ;
      #line 937 
      __read_once_size((void *)(& d32),(void *)(& __u_12.__c),4);
      #line 937 
      writel((__u_12.__val),(void *)(oct->mmio[0].hw_addr + (unsigned long)(q_no * 131072 + 65712)));
    }
    #line 910 
    q_no ++;
  }
  #line 939 
  return;
}

#line 942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static u64 cn23xx_pf_msix_interrupt_handler(void *dev)
{
  #line 946 
  u64 pkts_sent;
  #line 944 
  struct octeon_ioq_vector *ioq_vector = (struct octeon_ioq_vector *)dev;
  #line 945 
  struct octeon_device *oct = ioq_vector->oct_dev;
  #line 947 
  u64 ret = 0ULL;
  #line 948 
  struct octeon_droq *droq = oct->droq[ioq_vector->droq_index];
  {
    #line 950 
    bool branch;
    #line 950 
    struct _ddebug __UNIQUE_ID_ddebug475 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_pf_msix_interrupt_handler", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"In %s octeon_dev @ %p\n", .lineno = (unsigned int)950U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 950 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug475.key.dd_key_false.key,(_Bool)0);
    #line 950 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 950 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug475,& (oct->pci_dev)->dev,(char *)"In %s octeon_dev @ %p\n",(char *)"cn23xx_pf_msix_interrupt_handler",oct);
  }
  #line 952 
  if (droq == (struct octeon_droq *)0) {
    #line 953 
    _dev_err(& (oct->pci_dev)->dev,(char *)"23XX bringup FIXME: oct pfnum:%d ioq_vector->ioq_num :%d droq is NULL\n",(int)oct->pf_num,ioq_vector->ioq_num);
    #line 955 
    return 0ULL;
  }
  #line 958 
  pkts_sent = readq(droq->pkts_sent_reg);
  #line 964 
  if (pkts_sent + 18446744073709551615ULL > 18446744073709551613ULL) 
    #line 965 
    return ret;
  #line 968 
  if ((pkts_sent & 9223372036854775808ULL) != 0ULL || (pkts_sent & 4611686018427387904ULL) != 0ULL) 
    #line 970 
    if ((pkts_sent & 9223372036854775808ULL) != 0ULL) 
                                                      #line 971 
                                                      ret |= 1ULL;
  #line 974 
  if ((pkts_sent & 4611686018427387904ULL) != 0ULL) 
                                                    #line 976 
                                                    ret |= 2ULL;
  #line 981 
  return ret;
}

#line 984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static void cn23xx_handle_pf_mbox_intr(struct octeon_device *oct)
{
  #line 986 
  struct delayed_work *work;
  #line 987 
  u64 mbox_int_val;
  #line 988 
  u32 i;
  #line 988 
  u32 q_no;
  #line 990 
  mbox_int_val = readq((oct->mbox[0])->mbox_int_reg);
  #line 992 
  i = 0U;
  #line 992 
  while (oct->sriov_info.num_vfs_alloced > i) {
    #line 993 
    q_no = oct->sriov_info.rings_per_vf * i;
    #line 995 
    if (((mbox_int_val >> q_no) & 1ULL) != 0ULL) {
      #line 996 
      writeq(1ULL << q_no,(oct->mbox[0])->mbox_int_reg);
      #line 998 
      if (octeon_mbox_read(oct->mbox[q_no]) != 0) {
        #line 999 
        work = & (oct->mbox[q_no])->mbox_poll_wk.work;
        #line 1000 
        ;
        #line 1000 
        cif_schedule_delayed_work_2(work,msecs_to_jiffies(0U));
      }
    }
    #line 992 
    i ++;
  }
  #line 1005 
  return;
}

#line 1007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static irqreturn_t cn23xx_interrupt_handler(void *dev)
{
  #line 1011 
  u64 intr64;
  #line 1009 
  struct octeon_device *oct = (struct octeon_device *)dev;
  #line 1010 
  struct octeon_cn23xx_pf *cn23xx = (struct octeon_cn23xx_pf *)oct->chip;
  {
    #line 1013 
    bool branch;
    #line 1013 
    struct _ddebug __UNIQUE_ID_ddebug476 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_interrupt_handler", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"In %s octeon_dev @ %p\n", .lineno = (unsigned int)1013U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1013 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug476.key.dd_key_false.key,(_Bool)0);
    #line 1013 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1013 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug476,& (oct->pci_dev)->dev,(char *)"In %s octeon_dev @ %p\n",(char *)"cn23xx_interrupt_handler",oct);
  }
  #line 1014 
  intr64 = readq((void *)cn23xx->intr_sum_reg64);
  #line 1016 
  oct->int_status = 0U;
  #line 1018 
  if ((intr64 & 17005592192950996736ULL) != 0ULL) 
                                                  #line 1019 
                                                  _dev_err(& (oct->pci_dev)->dev,(char *)"OCTEON[%d]: Error Intr: 0x%016llx\n",oct->octeon_id,(long long)intr64);
  #line 1023 
  if ((intr64 & 144115188075855872ULL) != 0ULL) 
                                                #line 1024 
                                                cn23xx_handle_pf_mbox_intr(oct);
  #line 1026 
  if (oct->msix_on != 1) 
    #line 1027 
    if ((intr64 & 32ULL) != 0ULL) 
                                  #line 1028 
                                  oct->int_status |= 4U;
  #line 1031 
  if ((intr64 & 4294967296ULL) != 0ULL) 
                                        #line 1032 
                                        oct->int_status |= 1U;
  #line 1033 
  if ((intr64 & 8589934592ULL) != 0ULL) 
                                        #line 1034 
                                        oct->int_status |= 2U;
  #line 1037 
  writeq(intr64,(void *)cn23xx->intr_sum_reg64);
  #line 1039 
  return IRQ_HANDLED;
}

#line 1042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static void cn23xx_bar1_idx_setup(struct octeon_device *oct, u64 core_addr, u32 idx, int valid)
{
  #line 1045 
  u64 bar1;
  #line 1046 
  u64 reg_adr;
  #line 1048 
  if (valid == 0) {
    #line 1053 
    union __anonunion___u_9760 __u_0;
    #line 1049 
    reg_adr = lio_pci_readq(oct,((unsigned long long)((int)oct->pcie_port << 24) + (unsigned long long)(idx << 3)) + 307866477003008ULL);
    {
      #line 1052 
      union __anonunion___u_9758 __u = {.__val = reg_adr};
      #line 1051 
      __write_once_size((void *)(& bar1),(void *)(& __u.__c),8);
      #line 1051 
      u64 tmp = __u.__val;
    }
    #line 1052 
    ;
    #line 1052 
    __read_once_size((void *)(& bar1),(void *)(& __u_0.__c),8);
    #line 1052 
    ;
    #line 1052 
    lio_pci_writeq(oct,(__u_0.__val) & 4294967294ULL,((unsigned long long)((int)oct->pcie_port << 24) + (unsigned long long)(idx << 3)) + 307866477003008ULL);
    #line 1054 
    reg_adr = lio_pci_readq(oct,((unsigned long long)((int)oct->pcie_port << 24) + (unsigned long long)(idx << 3)) + 307866477003008ULL);
    {
      #line 1057 
      union __anonunion___u_9762 __u_1 = {.__val = reg_adr};
      #line 1056 
      __write_once_size((void *)(& bar1),(void *)(& __u_1.__c),8);
      #line 1056 
      u64 tmp_3 = __u_1.__val;
    }
    #line 1057 
    return;
  }
  #line 1063 
  lio_pci_writeq(oct,((core_addr >> 22) << 4) | 11ULL,((unsigned long long)((int)oct->pcie_port << 24) + (unsigned long long)(idx << 3)) + 307866477003008ULL);
  {
    #line 1067 
    union __anonunion___u_9764 __u_2 = {.__val = lio_pci_readq(oct,
                        ((unsigned long long)((int)oct->pcie_port << 24) + (unsigned long long)(
                         idx << 3)) + 307866477003008ULL)};
    #line 1066 
    __write_once_size((void *)(& bar1),(void *)(& __u_2.__c),8);
    #line 1066 
    u64 tmp_5 = __u_2.__val;
  }
  #line 1068 
  return;
}

#line 1070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static void cn23xx_bar1_idx_write(struct octeon_device *oct, u32 idx, u32 mask)
{
  #line 1072 
  lio_pci_writeq(oct,(unsigned long long)mask,((unsigned long long)((int)oct->pcie_port << 24) + (unsigned long long)(idx << 3)) + 307866477003008ULL);
  #line 1074 
  return;
}

#line 1076  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static u32 cn23xx_bar1_idx_read(struct octeon_device *oct, u32 idx)
{
  #line 1078 
  return (unsigned int)lio_pci_readq(oct,
                    ((unsigned long long)((int)oct->pcie_port << 24) + (unsigned long long)(
                     idx << 3)) + 307866477003008ULL);
}

#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static u32 cn23xx_update_read_index_0(struct octeon_instr_queue *iq)
{
  #line 1085 
  u32 new_idx;
  #line 1086 
  u32 last_done;
  #line 1087 
  u32 pkt_in_done = readl(iq->inst_cnt_reg);
  #line 1089 
  last_done = pkt_in_done - iq->pkt_in_done;
  #line 1090 
  iq->pkt_in_done = pkt_in_done;
  #line 1096 
  new_idx = (iq->octeon_read_index + last_done) % iq->max_count;
  #line 1100 
  return new_idx;
}

#line 1103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static void cn23xx_enable_pf_interrupt(struct octeon_device *oct, u8 intr_flag)
{
  #line 1105 
  struct octeon_cn23xx_pf *cn23xx = (struct octeon_cn23xx_pf *)oct->chip;
  #line 1106 
  u64 intr_val = 0ULL;
  #line 1110 
  if ((unsigned int)intr_flag == 255U) 
                                       #line 1111 
                                       writeq(cn23xx->intr_mask64,(void *)cn23xx->intr_enb_reg64);
  else 
    #line 1112 
    if (((int)intr_flag & 2) != 0) {
      #line 1113 
      intr_val = readq((void *)cn23xx->intr_enb_reg64);
      #line 1114 
      intr_val |= 32ULL;
      #line 1115 
      writeq(intr_val,(void *)cn23xx->intr_enb_reg64);
    }
    else 
      #line 1116 
      if (((int)intr_flag & 4) != 0 && oct->sriov_info.max_vfs != 0U) 
        #line 1118 
        if ((unsigned int)oct->rev_id != 0U) {
          #line 1119 
          intr_val = readq((void *)cn23xx->intr_enb_reg64);
          #line 1120 
          intr_val |= 144115188075855872ULL;
          #line 1121 
          writeq(intr_val,(void *)cn23xx->intr_enb_reg64);
        }
  #line 1123 
  return;
}

#line 1126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static void cn23xx_disable_pf_interrupt(struct octeon_device *oct, u8 intr_flag)
{
  #line 1128 
  struct octeon_cn23xx_pf *cn23xx = (struct octeon_cn23xx_pf *)oct->chip;
  #line 1129 
  u64 intr_val = 0ULL;
  #line 1132 
  if ((unsigned int)intr_flag == 255U) 
                                       #line 1133 
                                       writeq(0ULL,(void *)cn23xx->intr_enb_reg64);
  else 
    #line 1134 
    if (((int)intr_flag & 2) != 0) {
      #line 1135 
      intr_val = readq((void *)cn23xx->intr_enb_reg64);
      #line 1136 
      intr_val &= 18446744073709551583ULL;
      #line 1137 
      writeq(intr_val,(void *)cn23xx->intr_enb_reg64);
    }
    else 
      #line 1138 
      if (((int)intr_flag & 4) != 0 && oct->sriov_info.max_vfs != 0U) 
        #line 1140 
        if ((unsigned int)oct->rev_id != 0U) {
          #line 1141 
          intr_val = readq((void *)cn23xx->intr_enb_reg64);
          #line 1142 
          intr_val &= 18302628885633695743ULL;
          #line 1143 
          writeq(intr_val,(void *)cn23xx->intr_enb_reg64);
        }
  #line 1145 
  return;
}

#line 1148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static void cn23xx_get_pcie_qlmport(struct octeon_device *oct)
{
  #line 1150 
  oct->pcie_port = (unsigned short)((unsigned int)((unsigned short)readl((void *)(oct->mmio[0].hw_addr + 131152U))) & 255U);
  {
    #line 1152 
    bool branch;
    #line 1152 
    struct _ddebug __UNIQUE_ID_ddebug477 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"cn23xx_get_pcie_qlmport", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c", .format = (char *)"OCTEON: CN23xx uses PCIE Port %d\n", .lineno = (unsigned int)1152U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1152 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug477.key.dd_key_false.key,(_Bool)0);
    #line 1152 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1152 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug477,& (oct->pci_dev)->dev,(char *)"OCTEON: CN23xx uses PCIE Port %d\n",(int)oct->pcie_port);
  }
  #line 1154 
  return;
}

#line 1156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static int cn23xx_get_pf_num(struct octeon_device *oct)
{
  #line 1159 
  u64 pkt0_in_ctl;
  #line 1159 
  u64 d64;
  #line 1160 
  int pfnum;
  #line 1160 
  int mac;
  #line 1160 
  int trs;
  #line 1160 
  int ret;
  #line 1158 
  u32 fdl_bit = 0U;
  #line 1162 
  ret = 0;
  #line 1165 
  if (pci_read_config_dword(oct->pci_dev,392,& fdl_bit) == 0) 
                                                              #line 1167 
                                                              oct->pf_num = (unsigned short)((unsigned int)((unsigned short)(fdl_bit >> 16)) & 255U);
  else {
    #line 1170 
    ret = 22;
    #line 1177 
    pkt0_in_ctl = readq((void *)(oct->mmio[0].hw_addr + 65536U));
    #line 1179 
    pfnum = (int)(pkt0_in_ctl >> 45) & 7;
    #line 1181 
    mac = (int)readl((void *)(oct->mmio[0].hw_addr + 131152U)) & 255;
    #line 1184 
    d64 = readq((void *)(oct->mmio[0].hw_addr + (unsigned long)((mac * 32 + 167984) + pfnum * 16)));
    #line 1186 
    trs = (int)(d64 >> 16) & 255;
    #line 1187 
    if (trs == 1) {
      #line 1188 
      _dev_err(& (oct->pci_dev)->dev,(char *)"OCTEON: error reading PCI cfg space pfnum, re-read %u\n",pfnum);
      #line 1191 
      oct->pf_num = (unsigned short)pfnum;
      #line 1192 
      ret = 0;
    }
    else 
         #line 1194 
         _dev_err(& (oct->pci_dev)->dev,(char *)"OCTEON: error reading PCI cfg space pfnum; could not ascertain PF number\n");
  }
  #line 1199 
  return ret;
}

#line 1202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static void cn23xx_setup_reg_address(struct octeon_device *oct)
{
  #line 1204 
  u8 *bar0_pciaddr = oct->mmio[0].hw_addr;
  #line 1205 
  struct octeon_cn23xx_pf *cn23xx = (struct octeon_cn23xx_pf *)oct->chip;
  #line 1207 
  oct->reg_list.pci_win_wr_addr_hi = (u32 *)(bar0_pciaddr + 131076U);
  #line 1209 
  oct->reg_list.pci_win_wr_addr_lo = (u32 *)(bar0_pciaddr + 131072U);
  #line 1211 
  oct->reg_list.pci_win_wr_addr = (u64 *)(bar0_pciaddr + 131072U);
  #line 1214 
  oct->reg_list.pci_win_rd_addr_hi = (u32 *)(bar0_pciaddr + 131092U);
  #line 1216 
  oct->reg_list.pci_win_rd_addr_lo = (u32 *)(bar0_pciaddr + 131088U);
  #line 1218 
  oct->reg_list.pci_win_rd_addr = (u64 *)(bar0_pciaddr + 131088U);
  #line 1221 
  oct->reg_list.pci_win_wr_data_hi = (u32 *)(bar0_pciaddr + 131108U);
  #line 1223 
  oct->reg_list.pci_win_wr_data_lo = (u32 *)(bar0_pciaddr + 131104U);
  #line 1225 
  oct->reg_list.pci_win_wr_data = (u64 *)(bar0_pciaddr + 131104U);
  #line 1228 
  oct->reg_list.pci_win_rd_data_hi = (u32 *)(bar0_pciaddr + 131140U);
  #line 1230 
  oct->reg_list.pci_win_rd_data_lo = (u32 *)(bar0_pciaddr + 131136U);
  #line 1232 
  oct->reg_list.pci_win_rd_data = (u64 *)(bar0_pciaddr + 131136U);
  #line 1235 
  cn23xx_get_pcie_qlmport(oct);
  #line 1237 
  cn23xx->intr_mask64 = 17005592411994328834ULL;
  #line 1238 
  if (oct->msix_on == 0) 
                         #line 1239 
                         cn23xx->intr_mask64 |= 32ULL;
  #line 1240 
  if ((unsigned int)oct->rev_id != 0U) 
                                       #line 1241 
                                       cn23xx->intr_mask64 |= 144115188075855872ULL;
  #line 1243 
  cn23xx->intr_sum_reg64 = bar0_pciaddr + (unsigned long)((((int)oct->pcie_port + 4992) * 2 + (int)oct->pf_num) * 16);
  #line 1246 
  cn23xx->intr_enb_reg64 = bar0_pciaddr + (unsigned long)((((int)oct->pcie_port + 4996) * 2 + (int)oct->pf_num) * 16);
  #line 1249 
  return;
}

#line 1251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
int cn23xx_sriov_config(struct octeon_device *oct)
{
  #line 1281 
  unsigned int __UNIQUE_ID___x478;
  #line 1281 
  unsigned int tmp_0;
  #line 1254 
  u32 max_rings;
  #line 1254 
  u32 total_rings;
  #line 1254 
  u32 max_vfs;
  #line 1254 
  u32 rings_per_vf;
  #line 1255 
  u32 pf_srn;
  #line 1255 
  u32 num_pf_rings;
  #line 1256 
  u32 max_possible_vfs;
  #line 1253 
  struct octeon_cn23xx_pf *cn23xx = (struct octeon_cn23xx_pf *)oct->chip;
  #line 1259 
  cn23xx->conf = (struct octeon_config *)oct_get_config_info(oct,(unsigned short)3);
  #line 1260 
  switch ((int)oct->rev_id) {
    #line 1261 
    case 0: 
            #line 1261 
    ;
    #line 1262 
    max_rings = 12U;
    #line 1263 
    max_possible_vfs = 8U;
    #line 1264 
    break;
    #line 1265 
    case 1: 
            #line 1265 
    ;
    #line 1266 
    max_rings = 32U;
    #line 1267 
    max_possible_vfs = 31U;
    #line 1268 
    break;
    #line 1269 
    default: 
             #line 1269 
    ;
    #line 1270 
    max_rings = 64U;
    #line 1271 
    max_possible_vfs = 63U;
    #line 1272 
    break;
  }
  #line 1275 
  if (oct->sriov_info.num_pf_rings != 0U) 
                                          #line 1276 
                                          num_pf_rings = oct->sriov_info.num_pf_rings; else 
                                                                    #line 1278 
                                                                    num_pf_rings = cpumask_weight(& __cpu_present_mask);
  {
    #line 1281 
    __UNIQUE_ID___x478 = max_rings - num_pf_rings;
    #line 1281 
    unsigned int __UNIQUE_ID___y479 = max_possible_vfs;
    #line 1281 
    if (__UNIQUE_ID___x478 < __UNIQUE_ID___y479) 
                                                 #line 1281 
                                                 tmp_0 = __UNIQUE_ID___x478; else 
                                                                    #line 1281 
                                                                    tmp_0 = __UNIQUE_ID___y479;
    }
  #line 1281 
  max_vfs = tmp_0;
  #line 1283 
  rings_per_vf = 1U;
  #line 1289 
  total_rings = num_pf_rings + max_vfs;
  #line 1292 
  pf_srn = total_rings - num_pf_rings;
  #line 1294 
  oct->sriov_info.trs = total_rings;
  #line 1295 
  oct->sriov_info.max_vfs = max_vfs;
  #line 1296 
  oct->sriov_info.rings_per_vf = rings_per_vf;
  #line 1297 
  oct->sriov_info.pf_srn = pf_srn;
  #line 1298 
  oct->sriov_info.num_pf_rings = num_pf_rings;
  #line 1299 
  _dev_notice(& (oct->pci_dev)->dev,(char *)"trs:%d max_vfs:%d rings_per_vf:%d pf_srn:%d num_pf_rings:%d\n",oct->sriov_info.trs,oct->sriov_info.max_vfs,oct->sriov_info.rings_per_vf,oct->sriov_info.pf_srn,oct->sriov_info.num_pf_rings);
  #line 1304 
  oct->sriov_info.sriov_enabled = 0U;
  #line 1306 
  return 0;
}

#line 1309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
int setup_cn23xx_octeon_pf_device(struct octeon_device *oct)
{
  #line 1311 
  u32 data32;
  #line 1312 
  u64 BAR0;
  #line 1312 
  u64 BAR1;
  #line 1314 
  pci_read_config_dword(oct->pci_dev,16,& data32);
  #line 1315 
  BAR0 = (unsigned long long)data32 & 4294967280ULL;
  #line 1316 
  pci_read_config_dword(oct->pci_dev,20,& data32);
  #line 1317 
  BAR0 = ((unsigned long long)data32 << 32) | BAR0;
  #line 1318 
  pci_read_config_dword(oct->pci_dev,24,& data32);
  #line 1319 
  BAR1 = (unsigned long long)data32 & 4294967280ULL;
  #line 1320 
  pci_read_config_dword(oct->pci_dev,28,& data32);
  #line 1321 
  BAR1 = ((unsigned long long)data32 << 32) | BAR1;
  #line 1323 
  if (BAR0 == 0ULL || BAR1 == 0ULL) {
    #line 1324 
    if (BAR0 == 0ULL) 
                      #line 1325 
                      _dev_err(& (oct->pci_dev)->dev,(char *)"device BAR0 unassigned\n");
    #line 1326 
    if (BAR1 == 0ULL) 
                      #line 1327 
                      _dev_err(& (oct->pci_dev)->dev,(char *)"device BAR1 unassigned\n");
    #line 1328 
    return 1;
  }
  #line 1331 
  if (octeon_map_pci_barx(oct,0,0) != 0) 
                                         #line 1332 
                                         return 1;
  #line 1334 
  if (octeon_map_pci_barx(oct,1,67108864) != 0) {
    #line 1335 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s CN23XX BAR1 map failed\n",(char *)"setup_cn23xx_octeon_pf_device");
    #line 1337 
    octeon_unmap_pci_barx_0(oct,0);
    #line 1338 
    return 1;
  }
  #line 1341 
  if (cn23xx_get_pf_num(oct) != 0) 
                                   #line 1342 
                                   return 1;
  #line 1344 
  if (cn23xx_sriov_config(oct) != 0) {
    #line 1345 
    octeon_unmap_pci_barx_0(oct,0);
    #line 1346 
    octeon_unmap_pci_barx_0(oct,1);
    #line 1347 
    return 1;
  }
  #line 1350 
  writeq(17873800615960704ULL,(void *)(oct->mmio[0].hw_addr + 146800U));
  #line 1352 
  oct->fn_list.setup_iq_regs = & cn23xx_setup_iq_regs;
  #line 1353 
  oct->fn_list.setup_oq_regs = & cn23xx_setup_oq_regs;
  #line 1354 
  oct->fn_list.setup_mbox = & cn23xx_setup_pf_mbox;
  #line 1355 
  oct->fn_list.free_mbox = & cn23xx_free_pf_mbox;
  #line 1357 
  oct->fn_list.process_interrupt_regs = & cn23xx_interrupt_handler;
  #line 1358 
  oct->fn_list.msix_interrupt_handler = & cn23xx_pf_msix_interrupt_handler;
  #line 1360 
  oct->fn_list.soft_reset = & cn23xx_pf_soft_reset;
  #line 1361 
  oct->fn_list.setup_device_regs = & cn23xx_setup_pf_device_regs;
  #line 1362 
  oct->fn_list.update_iq_read_idx = & cn23xx_update_read_index_0;
  #line 1364 
  oct->fn_list.bar1_idx_setup = & cn23xx_bar1_idx_setup;
  #line 1365 
  oct->fn_list.bar1_idx_write = & cn23xx_bar1_idx_write;
  #line 1366 
  oct->fn_list.bar1_idx_read = & cn23xx_bar1_idx_read;
  #line 1368 
  oct->fn_list.enable_interrupt = & cn23xx_enable_pf_interrupt;
  #line 1369 
  oct->fn_list.disable_interrupt = & cn23xx_disable_pf_interrupt;
  #line 1371 
  oct->fn_list.enable_io_queues = & cn23xx_enable_io_queues;
  #line 1372 
  oct->fn_list.disable_io_queues = & cn23xx_disable_io_queues;
  #line 1374 
  cn23xx_setup_reg_address(oct);
  #line 1376 
  oct->coproc_clock_rate = (unsigned long long)cn23xx_coprocessor_clock(oct) * 1000000ULL;
  #line 1378 
  return 0;
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
int validate_cn23xx_pf_config_info(struct octeon_device *oct, struct octeon_config *conf23xx)
{
  #line 1384 
  if ((unsigned int)conf23xx->iq.max_iqs > 64U) {
    #line 1385 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: Num IQ (%d) exceeds Max (%d)\n",(char *)"validate_cn23xx_pf_config_info",(int)conf23xx->iq.max_iqs,64);
    #line 1388 
    return 1;
  }
  #line 1391 
  if ((unsigned int)conf23xx->oq.max_oqs > 64U) {
    #line 1392 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: Num OQ (%d) exceeds Max (%d)\n",(char *)"validate_cn23xx_pf_config_info",(int)conf23xx->oq.max_oqs,64);
    #line 1395 
    return 1;
  }
  #line 1398 
  if ((unsigned int)conf23xx->iq.instr_type != 32U && (unsigned int)conf23xx->iq.instr_type != 64U) {
    #line 1400 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: Invalid instr type for IQ\n",(char *)"validate_cn23xx_pf_config_info");
    #line 1402 
    return 1;
  }
  #line 1405 
  if ((unsigned int)conf23xx->oq.refill_threshold == 0U) {
    #line 1406 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: Invalid parameter for OQ\n",(char *)"validate_cn23xx_pf_config_info");
    #line 1408 
    return 1;
  }
  #line 1411 
  if ((unsigned int)conf23xx->oq.oq_intr_time == 0U) {
    #line 1412 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: Invalid parameter for OQ\n",(char *)"validate_cn23xx_pf_config_info");
    #line 1414 
    return 1;
  }
  #line 1417 
  return 0;
}

#line 1420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
int cn23xx_fw_loaded(struct octeon_device *oct)
{
  #line 1422 
  u64 val;
  #line 1432 
  if (atomic_read_6(oct->adapter_refcount) > 1) 
                                                #line 1433 
                                                return 1;
  #line 1435 
  val = readq((void *)(oct->mmio[0].hw_addr + 164816U));
  #line 1436 
  return (int)(val >> 63);
}

#line 1439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
void cn23xx_tell_vf_its_macaddr_changed(struct octeon_device *oct, int vfidx, u8 *mac)
{
  #line 1442 
  if (((oct->sriov_info.vf_drv_loaded_mask >> vfidx) & 1ULL) != 0ULL) {
    #line 1443 
    struct octeon_mbox_cmd mbox_cmd;
    #line 1445 
    mbox_cmd.msg.u64 = 0ULL;
    #line 1446 
    mbox_cmd.msg.s.type = (unsigned short)0U;
    #line 1447 
    mbox_cmd.msg.s.resp_needed = (unsigned short)0U;
    #line 1448 
    mbox_cmd.msg.s.cmd = (unsigned short)4U;
    #line 1449 
    mbox_cmd.msg.s.len = (unsigned short)1U;
    #line 1450 
    mbox_cmd.recv_len = 0U;
    #line 1451 
    mbox_cmd.recv_status = 0U;
    #line 1452 
    mbox_cmd.fn = (void (*)(void *, void *, void *))0;
    #line 1453 
    mbox_cmd.fn_arg = (void *)0;
    #line 1454 
    ether_addr_copy((u8 *)(& mbox_cmd.msg.s.params),mac);
    #line 1455 
    mbox_cmd.q_no = oct->sriov_info.rings_per_vf * (unsigned int)vfidx;
    #line 1456 
    octeon_mbox_write(oct,& mbox_cmd);
  }
  #line 1458 
  return;
}

#line 1461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
static void cn23xx_get_vf_stats_callback(struct octeon_device *oct, struct octeon_mbox_cmd *cmd, void *arg)
{
  #line 1464 
  struct oct_vf_stats_ctx *ctx = (struct oct_vf_stats_ctx *)arg;
  #line 1466 
  memcpy((void *)ctx->stats,(void *)(& cmd->data),48UL);
  #line 1467 
  atomic_set_5(& ctx->status,1);
  #line 1468 
  return;
}

#line 1470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c"
int cn23xx_get_vf_stats(struct octeon_device *oct, int vfidx, struct oct_vf_stats *stats)
{
  #line 1474 
  struct octeon_mbox_cmd mbox_cmd;
  #line 1475 
  struct oct_vf_stats_ctx ctx;
  #line 1476 
  u32 ret;
  #line 1473 
  u32 timeout = 250U;
  #line 1476 
  u32 count = 0U;
  #line 1478 
  if (((oct->sriov_info.vf_drv_loaded_mask >> vfidx) & 1ULL) == 0ULL) 
    #line 1479 
    return -1;
  #line 1484 
  mbox_cmd.msg.u64 = 0ULL;
  #line 1485 
  mbox_cmd.msg.s.type = (unsigned short)0U;
  #line 1486 
  mbox_cmd.msg.s.resp_needed = (unsigned short)1U;
  #line 1487 
  mbox_cmd.msg.s.cmd = (unsigned short)8U;
  #line 1488 
  mbox_cmd.msg.s.len = (unsigned short)1U;
  #line 1489 
  mbox_cmd.q_no = oct->sriov_info.rings_per_vf * (unsigned int)vfidx;
  #line 1490 
  mbox_cmd.recv_len = 0U;
  #line 1491 
  mbox_cmd.recv_status = 0U;
  #line 1492 
  mbox_cmd.fn = (void (*)(void *, void *, void *))(& cn23xx_get_vf_stats_callback);
  #line 1493 
  ctx.stats = stats;
  #line 1494 
  atomic_set_5(& ctx.status,0);
  #line 1495 
  mbox_cmd.fn_arg = (void *)(& ctx);
  #line 1496 
  memset((void *)(& mbox_cmd.data),0,256UL);
  #line 1497 
  octeon_mbox_write(oct,& mbox_cmd);
  #line 1499 
  while (1) {
    #line 1500 
    schedule_timeout_uninterruptible(1L);
    #line 1500 
    if (atomic_read_6(& ctx.status) == 0) {
      #line 1501 
      u32 tmp_0;
      #line 1501 
      tmp_0 = count;
      #line 1501 
      count ++;
      #line 1501 
      ;
      #line 1501 
      if (! (tmp_0 < timeout)) 
                               #line 1499 
                               break;
    }
    else 
         #line 1499 
         break;
  }
  #line 1503 
  ret = (unsigned int)atomic_read_6(& ctx.status);
  #line 1504 
  if (ret == 0U) {
    #line 1505 
    octeon_mbox_cancel(oct,0);
    #line 1506 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Unable to get stats from VF-%d, timedout\n",vfidx);
    #line 1508 
    return -1;
  }
  #line 1511 
  return 0;
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_pf_device.i.aux"
static void INIT_LIST_HEAD_5(struct list_head *list)
{
  #line 138 
  ldv_init_list_head(list);
  #line 139 
  return;
}

#line 667  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_pf_device.i.aux"
static bool cif_schedule_delayed_work_2(struct delayed_work *dwork, unsigned long delay)
{
  #line 671 
  return emg_schedule_delayed_work(dwork,delay);
}

#line 675  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_pf_device.i.aux"
static void *cif_vmalloc_2(unsigned long size)
{
  #line 678 
  return ldv_vmalloc(size);
}

#line 682  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/cn23xx_pf_device.i.aux"
static void cif_vfree_2(void *addr)
{
  #line 685 
  ldv_vfree(addr);
  #line 686 
  return;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void INIT_LIST_HEAD_6(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_4(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_9777 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_4(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_4(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_4(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_9779 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_4(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_4(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_4(struct list_head *entry)
{
  #line 139 
  __list_del_entry_4(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_0(struct list_head *head)
{
  #line 269 
  union __anonunion___u_9781 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_7(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_9831 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set_6(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_9833 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_7(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_7(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set_6(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set_6(v,i);
  #line 46 
  return;
}

#line 148 
#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void atomic_sub_0(int i, atomic_t *v);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void atomic_inc_3(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void atomic_dec_2(atomic_t *v);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 37 
int _raw_spin_trylock(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_3(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 701  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_lock_post_lock_of_octeon_instr_queue(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_4(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 759  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_lock_bh_lock_of_octeon_instr_queue_1(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 786  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_lock_bh_post_lock_of_octeon_instr_queue(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 804  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_lock_bh_sc_lists_lock(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 822  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_lock_bh_lock_of_octeon_sc_buffer_pool(spinlock_t *lock);
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static int spin_trylock(spinlock_t *lock)
{
  #line 348 
  return _raw_spin_trylock(& lock->__anonCompField_spinlock_25.rlock);
}

#line 350 
#line 737  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static int cif_spin_trylock_iq_flush_running_lock_of_octeon_instr_queue(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_3(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 710  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_unlock_post_lock_of_octeon_instr_queue(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 777  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_unlock_iq_flush_running_lock_of_octeon_instr_queue(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_4(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 768  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_unlock_bh_lock_of_octeon_instr_queue_1(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 795  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_unlock_bh_post_lock_of_octeon_instr_queue(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 813  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_unlock_bh_sc_lists_lock(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_unlock_bh_lock_of_octeon_sc_buffer_pool(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_3(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 728  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_octeon_response_list(spinlock_t *lock, unsigned long flags);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
#line 719 
static void cif___ldv_spin_lock_lock_of_octeon_response_list(spinlock_t *lock);
#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 304  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 312  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static bool cif_queue_delayed_work_2(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void *cif_vmalloc_3(unsigned long size);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void *cif_vzalloc_1(unsigned long size);
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void *cif_vmalloc_node_0(unsigned long size, int node);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void *cif_vzalloc_node_1(unsigned long size, int node);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 680  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_vfree_3(void *addr);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
#line 531 
static void check_db_timeout(struct work_struct *work);
#line 39 
#line 501 
static void __check_db_timeout(struct octeon_device *oct, u64 iq_no);
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
static void (*reqtype_free_fn[128U][6U])(void *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
int octeon_init_instr_queue(struct octeon_device *oct, union oct_txpciq txpciq, u32 num_descs)
{
  #line 67 
  struct octeon_device *_oct;
  #line 60 
  struct octeon_instr_queue *iq;
  #line 63 
  u32 q_size;
  #line 64 
  struct cavium_wq *db_wq;
  #line 61 
  struct octeon_iq_config *conf = (struct octeon_iq_config *)0;
  #line 62 
  u32 iq_no = (unsigned int)txpciq.s.q_no;
  #line 65 
  int numa_node = dev_to_node(& (oct->pci_dev)->dev);
  #line 67 
  _oct = oct;
  #line 67 
  if (((unsigned int)_oct->chip_id + 65391U <= 1U) != 0) 
                                                         #line 68 
                                                         conf = & (((struct octeon_cn6xxx *)oct->chip)->conf)->iq;
  else 
    #line 69 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 70 
                                              conf = & (((struct octeon_cn23xx_pf *)oct->chip)->conf)->iq;
    else 
      #line 71 
      if ((unsigned int)oct->chip_id == 38674U) 
                                                #line 72 
                                                conf = & (((struct octeon_cn23xx_vf *)oct->chip)->conf)->iq;
  #line 74 
  if (conf == (struct octeon_iq_config *)0) {
    #line 75 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Unsupported Chip %x\n",(int)oct->chip_id);
    #line 77 
    return 1;
  }
  #line 80 
  q_size = (unsigned int)conf->instr_type * num_descs;
  #line 82 
  iq = oct->instr_queue[iq_no];
  #line 84 
  iq->oct_dev = oct;
  #line 86 
  iq->base_addr = (u8 *)dma_alloc_coherent(& (oct->pci_dev)->dev,(unsigned long)q_size,& iq->base_addr_dma,3264U);
  #line 87 
  if (iq->base_addr == (u8 *)0U) {
    #line 88 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Cannot allocate memory for instr queue %d\n",iq_no);
    #line 90 
    return 1;
  }
  #line 93 
  iq->max_count = num_descs;
  #line 98 
  iq->request_list = (struct octeon_request_list *)cif_vmalloc_node_0((unsigned long)num_descs * 16UL,numa_node);
  #line 100 
  if (iq->request_list == (struct octeon_request_list *)0) {
    #line 101 
    iq->request_list = (struct octeon_request_list *)cif_vmalloc_3(array_size((unsigned long)num_descs,16UL));
  }
  #line 104 
  if (iq->request_list == (struct octeon_request_list *)0) {
    #line 105 
    dma_free_coherent(& (oct->pci_dev)->dev,(unsigned long)q_size,(void *)iq->base_addr,iq->base_addr_dma);
    #line 106 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Alloc failed for IQ[%d] nr free list\n",iq_no);
    #line 108 
    return 1;
  }
  #line 111 
  memset((void *)iq->request_list,0,(unsigned long)num_descs * 16UL);
  {
    #line 113 
    bool branch;
    #line 113 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_init_instr_queue", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c", .format = (char *)"IQ[%d]: base: %p basedma: %pad count: %d\n", .lineno = (unsigned int)113U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 113 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 113 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 113 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug442,& (oct->pci_dev)->dev,(char *)"IQ[%d]: base: %p basedma: %pad count: %d\n",iq_no,iq->base_addr,& iq->base_addr_dma,iq->max_count);
  }
  #line 116 
  iq->txpciq.u64 = txpciq.u64;
  #line 117 
  iq->fill_threshold = (unsigned int)conf->db_min;
  #line 118 
  iq->fill_cnt = 0U;
  #line 119 
  iq->host_write_index = 0U;
  #line 120 
  iq->octeon_read_index = 0U;
  #line 121 
  iq->flush_index = 0U;
  #line 122 
  iq->last_db_time = 0ULL;
  #line 123 
  iq->do_auto_flush = (unsigned int)1U;
  #line 124 
  iq->db_timeout = (unsigned int)conf->db_timeout;
  #line 125 
  atomic_set_6(& iq->instr_pending,0);
  #line 126 
  iq->pkts_processed = 0U;
  #line 129 
  spinlock_check(& iq->lock);
  {
    #line 129 
    struct lock_class_key __key;
    #line 129 
    __raw_spin_lock_init(& iq->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&iq->lock)->rlock",& __key);
  }
  #line 130 
  if (iq_no == 0U) {
    #line 131 
    iq->allow_soft_cmds = (_Bool)1;
    #line 132 
    spinlock_check(& iq->post_lock);
    {
      #line 132 
      struct lock_class_key __key_0;
      #line 132 
      __raw_spin_lock_init(& iq->post_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&iq->post_lock)->rlock",& __key_0);
    }
  }
  else 
       #line 134 
       iq->allow_soft_cmds = (_Bool)0;
  #line 137 
  spinlock_check(& iq->iq_flush_running_lock);
  {
    #line 137 
    struct lock_class_key __key_1;
    #line 137 
    __raw_spin_lock_init(& iq->iq_flush_running_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&iq->iq_flush_running_lock)->rlock",& __key_1);
  }
  #line 139 
  oct->io_qmask.iq |= 1ULL << iq_no;
  #line 142 
  oct->io_qmask.iq64B |= (unsigned long long)(((unsigned int)conf->instr_type == 64U) << iq_no);
  #line 143 
  iq->iqcmd_64B = (unsigned int)((unsigned int)conf->instr_type == 64U);
  #line 145 
  (*(oct->fn_list.setup_iq_regs))(oct,iq_no);
  #line 147 
  oct->check_db_wq[iq_no].wq = alloc_workqueue((char *)"check_iq_db",8U,0);
  #line 150 
  if (oct->check_db_wq[iq_no].wq == (struct workqueue_struct *)0) {
    #line 151 
    cif_vfree_3((void *)iq->request_list);
    #line 152 
    iq->request_list = (struct octeon_request_list *)0;
    #line 153 
    dma_free_coherent(& (oct->pci_dev)->dev,(unsigned long)q_size,(void *)iq->base_addr,iq->base_addr_dma);
    #line 154 
    _dev_err(& (oct->pci_dev)->dev,(char *)"check db wq create failed for iq %d\n",iq_no);
    #line 156 
    return 1;
  }
  #line 159 
  db_wq = & oct->check_db_wq[iq_no];
  {
    #line 161 
    struct lock_class_key __key_2;
    #line 161 
    __init_work(& db_wq->wk.work.work,0);
    #line 161 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 161 
    db_wq->wk.work.work.data = __constr_expr_34;
    #line 161 
    lockdep_init_map(& db_wq->wk.work.work.lockdep_map,(char *)"(work_completion)",& __key_2,0);
    #line 161 
    INIT_LIST_HEAD_6(& db_wq->wk.work.work.entry);
    #line 161 
    db_wq->wk.work.work.func = & check_db_timeout;
  }
  {
    #line 161 
    struct lock_class_key __key_3;
    #line 161 
    init_timer_key(& db_wq->wk.work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&db_wq->wk.work)->timer",& __key_3);
  }
  #line 162 
  db_wq->wk.ctxptr = (void *)oct;
  #line 163 
  db_wq->wk.ctxul = (unsigned long long)iq_no;
  #line 164 
  ;
  #line 164 
  ;
  #line 164 
  cif_queue_delayed_work_2(db_wq->wq,& db_wq->wk.work,msecs_to_jiffies(1U));
  #line 166 
  return 0;
}

#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
int octeon_delete_instr_queue(struct octeon_device *oct, u32 iq_no)
{
  #line 177 
  struct octeon_device *_oct;
  #line 171 
  u64 q_size;
  #line 171 
  u64 desc_size = 0ULL;
  #line 172 
  struct octeon_instr_queue *iq = oct->instr_queue[iq_no];
  #line 174 
  cancel_delayed_work_sync(& oct->check_db_wq[iq_no].wk.work);
  #line 175 
  destroy_workqueue(oct->check_db_wq[iq_no].wq);
  #line 177 
  _oct = oct;
  #line 177 
  if (((unsigned int)_oct->chip_id + 65391U <= 1U) != 0) 
                                                         #line 178 
                                                         desc_size = (unsigned long long)(((struct octeon_cn6xxx *)oct->chip)->conf)->iq.instr_type;
  else 
    #line 180 
    if ((unsigned int)oct->chip_id == 38658U) 
                                              #line 181 
                                              desc_size = (unsigned long long)(((struct octeon_cn23xx_pf *)oct->chip)->conf)->iq.instr_type;
    else 
      #line 183 
      if ((unsigned int)oct->chip_id == 38674U) 
                                                #line 184 
                                                desc_size = (unsigned long long)(((struct octeon_cn23xx_vf *)oct->chip)->conf)->iq.instr_type;
  #line 187 
  cif_vfree_3((void *)iq->request_list);
  #line 189 
  if (iq->base_addr != (u8 *)0U) {
    #line 190 
    q_size = (unsigned long long)iq->max_count * desc_size;
    #line 191 
    dma_free_coherent(& (oct->pci_dev)->dev,(unsigned long)((unsigned int)q_size),(void *)iq->base_addr,iq->base_addr_dma);
    #line 193 
    oct->io_qmask.iq &= ~ (1ULL << iq_no);
    #line 194 
    cif_vfree_3((void *)oct->instr_queue[iq_no]);
    #line 195 
    oct->instr_queue[iq_no] = (struct octeon_instr_queue *)0;
    #line 196 
    (oct->num_iqs) --;
    #line 197 
    return 0;
  }
  #line 199 
  return 1;
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
int octeon_setup_iq(struct octeon_device *oct, int ifidx, int q_index, union oct_txpciq txpciq, u32 num_descs, void *app_ctx)
{
  #line 210 
  u32 iq_no = (unsigned int)txpciq.s.q_no;
  #line 211 
  int numa_node = dev_to_node(& (oct->pci_dev)->dev);
  #line 213 
  if (oct->instr_queue[iq_no] != (struct octeon_instr_queue *)0) {
    {
      #line 214 
      bool branch;
      #line 214 
      struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"liquidio:liquidio_vf", .function = (char *)"octeon_setup_iq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c", .format = (char *)"IQ is in use. Cannot create the IQ: %d again\n", .lineno = (unsigned int)214U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 214 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
      #line 214 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 214 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug443,& (oct->pci_dev)->dev,(char *)"IQ is in use. Cannot create the IQ: %d again\n",iq_no);
    }
    #line 216 
    (oct->instr_queue[iq_no])->txpciq.u64 = txpciq.u64;
    #line 217 
    (oct->instr_queue[iq_no])->app_ctx = app_ctx;
    #line 218 
    return 0;
  }
  #line 221 
  oct->instr_queue[iq_no] = (struct octeon_instr_queue *)cif_vzalloc_node_1(472UL,numa_node);
  #line 222 
  if (oct->instr_queue[iq_no] == (struct octeon_instr_queue *)0) 
                                                                 #line 224 
                                                                 oct->instr_queue[iq_no] = (struct octeon_instr_queue *)cif_vzalloc_1(472UL);
  #line 225 
  if (oct->instr_queue[iq_no] == (struct octeon_instr_queue *)0) 
                                                                 #line 226 
                                                                 return 1;
  #line 229 
  (oct->instr_queue[iq_no])->q_index = q_index;
  #line 230 
  (oct->instr_queue[iq_no])->app_ctx = app_ctx;
  #line 231 
  (oct->instr_queue[iq_no])->ifidx = ifidx;
  #line 233 
  if (octeon_init_instr_queue(oct,txpciq,num_descs) != 0) {
    #line 234 
    cif_vfree_3((void *)oct->instr_queue[iq_no]);
    #line 235 
    oct->instr_queue[iq_no] = (struct octeon_instr_queue *)0;
    #line 236 
    return 1;
  }
  #line 239 
  (oct->num_iqs) ++;
  #line 240 
  if ((*(oct->fn_list.enable_io_queues))(oct) != 0) {
    #line 241 
    octeon_delete_instr_queue(oct,iq_no);
    #line 242 
    return 1;
  }
  #line 245 
  return 0;
}

#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
int lio_wait_for_instr_fetch(struct octeon_device *oct)
{
  #line 250 
  int i;
  #line 250 
  int pending;
  #line 250 
  int retry = 1000;
  #line 250 
  int instr_cnt = 0;
  #line 252 
  while (1) {
    #line 269 
    int tmp_0;
    #line 253 
    instr_cnt = 0;
    #line 255 
    i = 0;
    #line 255 
    while (1) {
      #line 255 
      int tmp;
      #line 255 
      if ((unsigned int)oct->chip_id == 38658U) 
                                                #line 255 
                                                tmp = 64; else 
                                                               #line 255 
                                                               tmp = 32;
      #line 255 
      ;
      #line 255 
      if (! (tmp > i)) 
                       #line 255 
                       break;
      #line 256 
      if (((oct->io_qmask.iq >> i) & 1ULL) == 0ULL) 
                                                    #line 257 
                                                    goto __Cont;
      #line 258 
      pending = atomic_read_7(& (oct->instr_queue[i])->instr_pending);
      #line 260 
      if (pending != 0) 
                        #line 261 
                        __check_db_timeout(oct,(unsigned long long)i);
      #line 262 
      instr_cnt += pending;
      #line 255 
      __Cont: 
              #line 255 
      i ++;
    }
    #line 265 
    if (instr_cnt == 0) 
                        #line 266 
                        break;
    #line 268 
    schedule_timeout_uninterruptible(1L);
    #line 269 
    tmp_0 = retry;
    #line 269 
    retry --;
    #line 269 
    ;
    #line 269 
    if (tmp_0 != 0) {
      #line 270 
      if (! (instr_cnt != 0)) 
                              #line 252 
                              break;
    }
    else 
         #line 252 
         break;
  }
  #line 272 
  return instr_cnt;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
__inline static void ring_doorbell(struct octeon_device *oct, struct octeon_instr_queue *iq)
{
  #line 278 
  if (atomic_read_7(& oct->status) == 15) {
    #line 279 
    writel(iq->fill_cnt,iq->doorbell_reg);
    #line 281 
    iq->fill_cnt = 0U;
    #line 282 
    iq->last_db_time = (unsigned long long)jiffies;
    #line 283 
    return;
  }
  #line 285 
  return;
}

#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
void octeon_ring_doorbell_locked(struct octeon_device *oct, u32 iq_no)
{
  #line 290 
  struct octeon_instr_queue *iq;
  #line 292 
  iq = oct->instr_queue[iq_no];
  #line 293 
  cif_spin_lock_post_lock_of_octeon_instr_queue(& iq->post_lock);
  #line 294 
  if (iq->fill_cnt != 0U) 
                          #line 295 
                          ring_doorbell(oct,iq);
  #line 296 
  cif_spin_unlock_post_lock_of_octeon_instr_queue(& iq->post_lock);
  #line 297 
  return;
}

#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
__inline static void __copy_cmd_into_iq(struct octeon_instr_queue *iq, u8 *cmd)
{
  #line 302 
  u8 *iqptr;
  #line 302 
  u8 cmdsize;
  #line 304 
  if ((unsigned int)iq->iqcmd_64B != 0U) 
                                         #line 304 
                                         cmdsize = (unsigned char)64U; else 
                                                                    #line 304 
                                                                    cmdsize = (unsigned char)32U;
  #line 305 
  iqptr = iq->base_addr + (unsigned long)((unsigned int)cmdsize * iq->host_write_index);
  #line 307 
  memcpy((void *)iqptr,(void *)cmd,(unsigned long)cmdsize);
  #line 308 
  return;
}

#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
__inline static struct iq_post_status __post_command2(struct octeon_instr_queue *iq, u8 *cmd)
{
  #line 313 
  struct iq_post_status st;
  #line 315 
  st.status = 0;
  #line 320 
  ;
  #line 320 
  if (atomic_read_7(& iq->instr_pending) >= (int)(iq->max_count + 4294967295U)) {
    #line 321 
    st.status = -1;
    #line 322 
    st.index = -1;
    #line 323 
    return st;
  }
  #line 326 
  ;
  #line 326 
  if (atomic_read_7(& iq->instr_pending) >= (int)(iq->max_count + 4294967294U)) 
    #line 327 
    st.status = 1;
  #line 329 
  __copy_cmd_into_iq(iq,cmd);
  #line 332 
  st.index = (int)iq->host_write_index;
  #line 333 
  iq->host_write_index = incr_index(iq->host_write_index,1U,iq->max_count);
  #line 335 
  (iq->fill_cnt) ++;
  #line 336 
  ldv_inline_asm();
  #line 342 
  atomic_inc_3(& iq->instr_pending);
  #line 344 
  return st;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
int octeon_register_reqtype_free_fn(struct octeon_device *oct, int reqtype, void (*fn)(void *))
{
  #line 351 
  if (reqtype > 5) {
    #line 352 
    _dev_err(& (oct->pci_dev)->dev,(char *)"%s: Invalid reqtype: %d\n",(char *)"octeon_register_reqtype_free_fn",reqtype);
    #line 354 
    return -22;
  }
  #line 357 
  reqtype_free_fn[oct->octeon_id][reqtype] = fn;
  #line 359 
  return 0;
}

#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
__inline static void __add_to_request_list(struct octeon_instr_queue *iq, int idx, void *buf, int reqtype)
{
  #line 366 
  (iq->request_list + (unsigned long)idx)->buf = buf;
  #line 367 
  (iq->request_list + (unsigned long)idx)->reqtype = (unsigned int)reqtype;
  #line 368 
  return;
}

#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
int lio_process_iq_request_list(struct octeon_device *oct, struct octeon_instr_queue *iq, u32 napi_budget)
{
  #line 376 
  int reqtype;
  #line 377 
  void *buf;
  #line 381 
  struct octeon_soft_command *sc;
  #line 382 
  unsigned long flags;
  #line 375 
  struct cavium_wq *cwq = & oct->dma_comp_wq;
  #line 378 
  u32 old = iq->flush_index;
  #line 379 
  u32 inst_count = 0U;
  #line 380 
  unsigned int pkts_compl = 0U;
  #line 380 
  unsigned int bytes_compl = 0U;
  #line 384 
  while (iq->octeon_read_index != old) {
    #line 385 
    reqtype = (int)(iq->request_list + (unsigned long)old)->reqtype;
    #line 386 
    buf = (iq->request_list + (unsigned long)old)->buf;
    #line 388 
    if (reqtype == 0) 
                      #line 389 
                      goto skip_this;
    #line 391 
    octeon_update_tx_completion_counters(buf,reqtype,& pkts_compl,& bytes_compl);
    #line 394 
    switch (reqtype) {
      #line 395 
      case 1: 
              #line 395 
      ;
      #line 396 
      case 2: 
              #line 396 
      ;
      #line 397 
      case 4: 
              #line 397 
      ;
      #line 398 
      (*(reqtype_free_fn[oct->octeon_id][reqtype]))(buf);
      #line 399 
      break;
      #line 400 
      case 3: 
              #line 400 
      ;
      #line 401 
      case 5: 
              #line 401 
      ;
      #line 402 
      sc = (struct octeon_soft_command *)buf;
      #line 409 
      cif___ldv_spin_lock_lock_of_octeon_response_list(& oct->response_list[3].lock);
      #line 411 
      atomic_inc_3(& oct->response_list[3].pending_req_count);
      #line 413 
      list_add_tail_4(& sc->node,& oct->response_list[3].head);
      #line 415 
      cif_spin_unlock_irqrestore_lock_of_octeon_response_list(& oct->response_list[3].lock,flags);
      #line 418 
      break;
      #line 419 
      default: 
               #line 419 
      ;
      #line 420 
      _dev_err(& (oct->pci_dev)->dev,(char *)"%s Unknown reqtype: %d buf: %p at idx %d\n",(char *)"lio_process_iq_request_list",reqtype,buf,old);
    }
    #line 425 
    (iq->request_list + (unsigned long)old)->buf = (void *)0;
    #line 426 
    (iq->request_list + (unsigned long)old)->reqtype = 0U;
    #line 428 
    skip_this: 
               #line 428 
    ;
    #line 429 
    inst_count ++;
    #line 430 
    old = incr_index(old,1U,iq->max_count);
    #line 432 
    if (napi_budget != 0U && inst_count >= napi_budget) 
                                                        #line 433 
                                                        break;
  }
  #line 435 
  if (bytes_compl != 0U) 
                         #line 436 
                         octeon_report_tx_completion_to_bql(iq->app_ctx,pkts_compl,bytes_compl);
  #line 438 
  iq->flush_index = old;
  #line 440 
  if (atomic_read_7(& oct->response_list[3].pending_req_count) != 0) 
    #line 442 
    cif_queue_work(cwq->wq,& cwq->wk.work.work);
  #line 444 
  return (int)inst_count;
}

#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
int octeon_flush_iq(struct octeon_device *oct, struct octeon_instr_queue *iq, u32 napi_budget)
{
  #line 452 
  u32 inst_processed = 0U;
  #line 453 
  u32 tot_inst_processed = 0U;
  #line 454 
  int tx_done = 1;
  #line 456 
  if (cif_spin_trylock_iq_flush_running_lock_of_octeon_instr_queue(& iq->iq_flush_running_lock) == 0) 
    #line 457 
    return tx_done;
  #line 459 
  cif_spin_lock_bh_lock_of_octeon_instr_queue_1(& iq->lock);
  #line 461 
  iq->octeon_read_index = (*(oct->fn_list.update_iq_read_idx))(iq);
  #line 463 
  while (1) {
    #line 465 
    if (iq->flush_index == iq->octeon_read_index) 
                                                  #line 466 
                                                  break;
    #line 468 
    if (napi_budget != 0U) {
      #line 469 
      inst_processed = (unsigned int)lio_process_iq_request_list(oct,iq,napi_budget - tot_inst_processed);
    }
    else {
      #line 474 
      inst_processed = (unsigned int)lio_process_iq_request_list(oct,iq,0U);
    }
    #line 477 
    if (inst_processed != 0U) {
      #line 478 
      iq->pkts_processed += inst_processed;
      #line 479 
      atomic_sub_0((int)inst_processed,& iq->instr_pending);
      #line 480 
      iq->stats.instr_processed += (unsigned long long)inst_processed;
    }
    #line 483 
    tot_inst_processed += inst_processed;
    #line 484 
    if (! (tot_inst_processed < napi_budget)) 
                                              #line 463 
                                              break;
  }
  #line 486 
  if (napi_budget != 0U && tot_inst_processed >= napi_budget) 
                                                              #line 487 
                                                              tx_done = 0;
  #line 489 
  iq->last_db_time = (unsigned long long)jiffies;
  #line 491 
  cif_spin_unlock_bh_lock_of_octeon_instr_queue_1(& iq->lock);
  #line 493 
  cif_spin_unlock_iq_flush_running_lock_of_octeon_instr_queue(& iq->iq_flush_running_lock);
  #line 495 
  return tx_done;
}

#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
static void __check_db_timeout(struct octeon_device *oct, u64 iq_no)
{
  #line 503 
  struct octeon_instr_queue *iq;
  #line 504 
  u64 next_time;
  #line 506 
  if (oct == (struct octeon_device *)0) 
                                        #line 507 
                                        return;
  #line 509 
  iq = oct->instr_queue[iq_no];
  #line 510 
  if (iq == (struct octeon_instr_queue *)0) 
                                            #line 511 
                                            return;
  #line 514 
  if (atomic_read_7(& iq->instr_pending) == 0) 
                                               #line 515 
                                               return;
  #line 517 
  next_time = iq->last_db_time + (unsigned long long)iq->db_timeout;
  {
    #line 518 
    unsigned long __dummy;
    #line 518 
    unsigned long __dummy2;
    }
  #line 518 
  if (1 == 0) 
              #line 519 
              return;
  else {
    {
      #line 518 
      unsigned long __dummy_0;
      #line 518 
      unsigned long __dummy2_0;
      }
    #line 518 
    if (1 == 0) 
                #line 519 
                return;
    else 
      #line 518 
      if ((long)((unsigned long)next_time - jiffies) >= 0L) 
                                                            #line 519 
                                                            return;
  }
  #line 520 
  iq->last_db_time = (unsigned long long)jiffies;
  #line 523 
  octeon_flush_iq(oct,iq,0U);
  #line 525 
  lio_enable_irq((struct octeon_droq *)0,iq);
  #line 526 
  return;
}

#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
static void check_db_timeout(struct work_struct *work)
{
  #line 533 
  struct cavium_wk *wk = (struct cavium_wk *)work;
  #line 534 
  struct octeon_device *oct = (struct octeon_device *)wk->ctxptr;
  #line 535 
  u64 iq_no = wk->ctxul;
  #line 536 
  struct cavium_wq *db_wq = & oct->check_db_wq[iq_no];
  #line 537 
  u32 delay = 10U;
  #line 539 
  __check_db_timeout(oct,iq_no);
  #line 540 
  ;
  #line 540 
  ;
  #line 540 
  cif_queue_delayed_work_2(db_wq->wq,& db_wq->wk.work,msecs_to_jiffies(delay));
  #line 541 
  return;
}

#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
int octeon_send_command(struct octeon_device *oct, u32 iq_no, u32 force_db, void *cmd, void *buf, u32 datasize, u32 reqtype)
{
  #line 548 
  int xmit_stopped;
  #line 549 
  struct iq_post_status st;
  #line 550 
  struct octeon_instr_queue *iq = oct->instr_queue[iq_no];
  #line 555 
  if ((int)iq->allow_soft_cmds != 0) 
                                     #line 556 
                                     cif_spin_lock_bh_post_lock_of_octeon_instr_queue(& iq->post_lock);
  #line 558 
  st = __post_command2(iq,(u8 *)cmd);
  #line 560 
  if (st.status != -1) {
    #line 561 
    xmit_stopped = octeon_report_sent_bytes_to_bql(buf,(int)reqtype);
    #line 562 
    __add_to_request_list(iq,st.index,buf,(int)reqtype);
    #line 563 
    (oct->instr_queue[iq_no])->stats.bytes_sent += (unsigned long long)datasize;
    #line 564 
    ((oct->instr_queue[iq_no])->stats.instr_posted) ++;
    #line 566 
    if ((iq->fill_cnt > 7U || (force_db != 0U || xmit_stopped != 0)) || st.status == 1) 
      #line 568 
      ring_doorbell(oct,iq);
  }
  else 
       #line 570 
       ((oct->instr_queue[iq_no])->stats.instr_dropped) ++;
  #line 573 
  if ((int)iq->allow_soft_cmds != 0) 
                                     #line 574 
                                     cif_spin_unlock_bh_post_lock_of_octeon_instr_queue(& iq->post_lock);
  #line 580 
  return st.status;
}

#line 584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
void octeon_prepare_soft_command(struct octeon_device *oct, struct octeon_soft_command *sc, u8 opcode, u8 subcode, u32 irh_ossp, u64 ossp0, u64 ossp1)
{
  #line 592 
  struct octeon_config *oct_cfg;
  #line 593 
  struct octeon_instr_ih2 *ih2;
  #line 594 
  struct octeon_instr_ih3 *ih3;
  #line 595 
  struct octeon_instr_pki_ih3 *pki_ih3;
  #line 596 
  struct octeon_instr_irh *irh;
  #line 597 
  struct octeon_instr_rdp *rdp;
  {
    #line 599 
    int __ret_warn_on = (unsigned int)opcode > 15U;
    #line 599 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 600 
      ldv_inline_asm();
      #line 601 
      ldv_inline_asm();
    }
    #line 599 
    long tmp = (long)(__ret_warn_on != 0);
  }
  {
    #line 600 
    int __ret_warn_on_0 = (int)subcode < 0;
    #line 600 
    if ((long)(__ret_warn_on_0 != 0) != 0L) {
      #line 601 
      ldv_inline_asm();
      #line 602 
      ldv_inline_asm();
    }
    #line 600 
    long tmp_3 = (long)(__ret_warn_on_0 != 0);
  }
  #line 602 
  oct_cfg = octeon_get_conf(oct);
  #line 604 
  if ((unsigned int)oct->chip_id == 38658U || (unsigned int)oct->chip_id == 38674U) {
    #line 605 
    ih3 = (struct octeon_instr_ih3 *)(& sc->cmd.cmd3.ih3);
    #line 607 
    ih3->pkind = (oct->instr_queue[sc->iq_no])->txpciq.s.pkind;
    #line 609 
    pki_ih3 = (struct octeon_instr_pki_ih3 *)(& sc->cmd.cmd3.pki_ih3);
    #line 611 
    pki_ih3->w = (unsigned long long)1U;
    #line 612 
    pki_ih3->raw = (unsigned long long)1U;
    #line 613 
    pki_ih3->utag = (unsigned long long)1U;
    #line 614 
    pki_ih3->uqpg = (oct->instr_queue[sc->iq_no])->txpciq.s.use_qpg;
    #line 616 
    pki_ih3->utt = (unsigned long long)1U;
    #line 617 
    pki_ih3->tag = (unsigned long long)286331152U;
    #line 618 
    pki_ih3->tagtype = (unsigned long long)1U;
    #line 619 
    pki_ih3->qpg = (oct->instr_queue[sc->iq_no])->txpciq.s.ctrl_qpg;
    #line 622 
    pki_ih3->pm = (unsigned long long)7U;
    #line 623 
    pki_ih3->sl = (unsigned long long)8U;
    #line 625 
    if (sc->datasize != 0U) 
                            #line 626 
                            ih3->dlengsz = (unsigned long long)sc->datasize;
    #line 628 
    irh = (struct octeon_instr_irh *)(& sc->cmd.cmd3.irh);
    #line 629 
    irh->opcode = (unsigned long long)opcode;
    #line 630 
    irh->subcode = (unsigned long long)subcode;
    #line 633 
    irh->ossp = (unsigned long long)irh_ossp;
    #line 634 
    sc->cmd.cmd3.ossp[0] = ossp0;
    #line 635 
    sc->cmd.cmd3.ossp[1] = ossp1;
    #line 637 
    if (sc->rdatasize != 0U) {
      #line 638 
      rdp = (struct octeon_instr_rdp *)(& sc->cmd.cmd3.rdp);
      #line 639 
      rdp->pcie_port = (unsigned long long)oct->pcie_port;
      #line 640 
      rdp->rlen = (unsigned long long)sc->rdatasize;
      #line 642 
      irh->rflag = (unsigned long long)1U;
      #line 645 
      ih3->fsz = (unsigned long long)48U;
    }
    else {
      #line 647 
      irh->rflag = (unsigned long long)0U;
      #line 650 
      ih3->fsz = (unsigned long long)32U;
    }
  }
  else {
    #line 654 
    ih2 = (struct octeon_instr_ih2 *)(& sc->cmd.cmd2.ih2);
    #line 655 
    ih2->tagtype = (unsigned long long)1U;
    #line 656 
    ih2->tag = (unsigned long long)286331152U;
    #line 657 
    ih2->raw = (unsigned long long)1U;
    #line 658 
    ih2->grp = oct_cfg->misc.ctrlq_grp;
    #line 660 
    if (sc->datasize != 0U) {
      #line 661 
      ih2->dlengsz = (unsigned long long)sc->datasize;
      #line 662 
      ih2->rs = (unsigned long long)1U;
    }
    #line 665 
    irh = (struct octeon_instr_irh *)(& sc->cmd.cmd2.irh);
    #line 666 
    irh->opcode = (unsigned long long)opcode;
    #line 667 
    irh->subcode = (unsigned long long)subcode;
    #line 670 
    irh->ossp = (unsigned long long)irh_ossp;
    #line 671 
    sc->cmd.cmd2.ossp[0] = ossp0;
    #line 672 
    sc->cmd.cmd2.ossp[1] = ossp1;
    #line 674 
    if (sc->rdatasize != 0U) {
      #line 675 
      rdp = (struct octeon_instr_rdp *)(& sc->cmd.cmd2.rdp);
      #line 676 
      rdp->pcie_port = (unsigned long long)oct->pcie_port;
      #line 677 
      rdp->rlen = (unsigned long long)sc->rdatasize;
      #line 679 
      irh->rflag = (unsigned long long)1U;
      #line 681 
      ih2->fsz = (unsigned long long)40U;
    }
    else {
      #line 683 
      irh->rflag = (unsigned long long)0U;
      #line 685 
      ih2->fsz = (unsigned long long)24U;
    }
  }
  #line 688 
  return;
}

#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
int octeon_send_soft_command(struct octeon_device *oct, struct octeon_soft_command *sc)
{
  #line 693 
  struct octeon_instr_queue *iq;
  #line 694 
  struct octeon_instr_ih2 *ih2;
  #line 695 
  struct octeon_instr_ih3 *ih3;
  #line 696 
  struct octeon_instr_irh *irh;
  #line 697 
  u32 len;
  #line 699 
  iq = oct->instr_queue[sc->iq_no];
  #line 700 
  if (! iq->allow_soft_cmds) {
    #line 701 
    _dev_err(& (oct->pci_dev)->dev,(char *)"Soft commands are not allowed on Queue %d\n",sc->iq_no);
    #line 703 
    ((oct->instr_queue[sc->iq_no])->stats.instr_dropped) ++;
    #line 704 
    return -1;
  }
  #line 707 
  if ((unsigned int)oct->chip_id == 38658U || (unsigned int)oct->chip_id == 38674U) {
    #line 708 
    ih3 = (struct octeon_instr_ih3 *)(& sc->cmd.cmd3.ih3);
    #line 709 
    if ((unsigned int)ih3->dlengsz != 0U) {
      {
        #line 710 
        int __ret_warn_on = sc->dmadptr == 0ULL;
        #line 710 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 711 
          ldv_inline_asm();
          #line 712 
          ldv_inline_asm();
        }
        #line 710 
        long tmp = (long)(__ret_warn_on != 0);
      }
      #line 711 
      sc->cmd.cmd3.dptr = sc->dmadptr;
    }
    #line 713 
    irh = (struct octeon_instr_irh *)(& sc->cmd.cmd3.irh);
    #line 714 
    if ((unsigned int)irh->rflag != 0U) {
      {
        #line 715 
        int __ret_warn_on_0 = sc->dmarptr == 0ULL;
        #line 715 
        if ((long)(__ret_warn_on_0 != 0) != 0L) {
          #line 716 
          ldv_inline_asm();
          #line 717 
          ldv_inline_asm();
        }
        #line 715 
        long tmp_3 = (long)(__ret_warn_on_0 != 0);
      }
      {
        #line 716 
        int __ret_warn_on_1 = sc->status_word == (u64 *)0ULL;
        #line 716 
        if ((long)(__ret_warn_on_1 != 0) != 0L) {
          #line 717 
          ldv_inline_asm();
          #line 718 
          ldv_inline_asm();
        }
        #line 716 
        long tmp_5 = (long)(__ret_warn_on_1 != 0);
      }
      #line 717 
      *(sc->status_word) = 18446744073709551615ULL;
      #line 718 
      sc->cmd.cmd3.rptr = sc->dmarptr;
    }
    #line 720 
    len = (unsigned int)ih3->dlengsz;
  }
  else {
    #line 722 
    ih2 = (struct octeon_instr_ih2 *)(& sc->cmd.cmd2.ih2);
    #line 723 
    if ((unsigned int)ih2->dlengsz != 0U) {
      {
        #line 724 
        int __ret_warn_on_2 = sc->dmadptr == 0ULL;
        #line 724 
        if ((long)(__ret_warn_on_2 != 0) != 0L) {
          #line 725 
          ldv_inline_asm();
          #line 726 
          ldv_inline_asm();
        }
        #line 724 
        long tmp_7 = (long)(__ret_warn_on_2 != 0);
      }
      #line 725 
      sc->cmd.cmd2.dptr = sc->dmadptr;
    }
    #line 727 
    irh = (struct octeon_instr_irh *)(& sc->cmd.cmd2.irh);
    #line 728 
    if ((unsigned int)irh->rflag != 0U) {
      {
        #line 729 
        int __ret_warn_on_3 = sc->dmarptr == 0ULL;
        #line 729 
        if ((long)(__ret_warn_on_3 != 0) != 0L) {
          #line 730 
          ldv_inline_asm();
          #line 731 
          ldv_inline_asm();
        }
        #line 729 
        long tmp_9 = (long)(__ret_warn_on_3 != 0);
      }
      {
        #line 730 
        int __ret_warn_on_4 = sc->status_word == (u64 *)0ULL;
        #line 730 
        if ((long)(__ret_warn_on_4 != 0) != 0L) {
          #line 731 
          ldv_inline_asm();
          #line 732 
          ldv_inline_asm();
        }
        #line 730 
        long tmp_11 = (long)(__ret_warn_on_4 != 0);
      }
      #line 731 
      *(sc->status_word) = 18446744073709551615ULL;
      #line 732 
      sc->cmd.cmd2.rptr = sc->dmarptr;
    }
    #line 734 
    len = (unsigned int)ih2->dlengsz;
  }
  #line 737 
  sc->expiry_time = msecs_to_jiffies(60000U) + jiffies;
  #line 739 
  return octeon_send_command(oct,sc->iq_no,1U,(void *)(& sc->cmd),
                              (void *)sc,len,5U);
}

#line 743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
int octeon_setup_sc_buffer_pool(struct octeon_device *oct)
{
  #line 745 
  int i;
  #line 746 
  u64 dma_addr;
  #line 747 
  struct octeon_soft_command *sc;
  #line 749 
  INIT_LIST_HEAD_6(& oct->sc_buf_pool.head);
  #line 750 
  spinlock_check(& oct->sc_buf_pool.lock);
  {
    #line 750 
    struct lock_class_key __key;
    #line 750 
    __raw_spin_lock_init(& oct->sc_buf_pool.lock.__anonCompField_spinlock_25.rlock,(char *)"&(&oct->sc_buf_pool.lock)->rlock",& __key);
  }
  #line 751 
  atomic_set_6(& oct->sc_buf_pool.alloc_buf_count,0);
  #line 753 
  i = 0;
  #line 753 
  while (i <= 255) {
    #line 754 
    sc = (struct octeon_soft_command *)dma_alloc_coherent(& (oct->pci_dev)->dev,2048UL,& dma_addr,3264U);
    #line 758 
    if (sc == (struct octeon_soft_command *)0) {
      #line 759 
      octeon_free_sc_buffer_pool(oct);
      #line 760 
      return 1;
    }
    #line 763 
    sc->dma_addr = dma_addr;
    #line 764 
    sc->size = 2048U;
    #line 766 
    list_add_tail_4(& sc->node,& oct->sc_buf_pool.head);
    #line 753 
    i ++;
  }
  #line 769 
  return 0;
}

#line 772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
int octeon_free_sc_done_list(struct octeon_device *oct)
{
  #line 774 
  struct octeon_response_list *done_sc_list;
  #line 774 
  struct octeon_response_list *zombie_sc_list;
  #line 775 
  struct octeon_soft_command *sc;
  #line 776 
  struct list_head *tmp;
  #line 776 
  struct list_head *tmp2;
  #line 777 
  spinlock_t *sc_lists_lock;
  #line 779 
  done_sc_list = & oct->response_list[4];
  #line 780 
  zombie_sc_list = & oct->response_list[5];
  #line 782 
  if (atomic_read_7(& done_sc_list->pending_req_count) == 0) 
                                                             #line 783 
                                                             return 0;
  #line 785 
  sc_lists_lock = & oct->response_list[3].lock;
  #line 787 
  cif_spin_lock_bh_sc_lists_lock(sc_lists_lock);
  #line 789 
  tmp = done_sc_list->head.next;
  #line 789 
  tmp2 = tmp->next;
  #line 789 
  while (& done_sc_list->head != tmp) {
    {
      #line 793 
      union __anonunion___u_10480 __u;
      #line 790 
      void *__mptr;
      #line 790 
      __mptr = (void *)tmp;
      #line 790 
      sc = ((struct octeon_soft_command *)__mptr);
      #line 792 
      __read_once_size((void *)(& sc->caller_is_done),(void *)(& __u.__c),4);
      #line 792 
      if ((__u.__val) != 0) {
        #line 793 
        list_del_4(& sc->node);
        #line 794 
        atomic_dec_2(& done_sc_list->pending_req_count);
        #line 796 
        if (*(sc->status_word) == 18446744073709551615ULL) {
          #line 798 
          list_add_tail_4(& sc->node,& zombie_sc_list->head);
          #line 799 
          atomic_inc_3(& zombie_sc_list->pending_req_count);
        }
        else 
             #line 801 
             octeon_free_soft_command(oct,sc);
      }
    }
    #line 789 
    tmp = tmp2;
    #line 789 
    tmp2 = tmp->next;
  }
  #line 806 
  cif_spin_unlock_bh_sc_lists_lock(sc_lists_lock);
  #line 808 
  return 0;
}

#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
int octeon_free_sc_zombie_list(struct octeon_device *oct)
{
  #line 813 
  struct octeon_response_list *zombie_sc_list;
  #line 814 
  struct octeon_soft_command *sc;
  #line 815 
  struct list_head *tmp;
  #line 815 
  struct list_head *tmp2;
  #line 816 
  spinlock_t *sc_lists_lock;
  #line 818 
  zombie_sc_list = & oct->response_list[5];
  #line 819 
  sc_lists_lock = & oct->response_list[3].lock;
  #line 821 
  cif_spin_lock_bh_sc_lists_lock(sc_lists_lock);
  #line 823 
  tmp = zombie_sc_list->head.next;
  #line 823 
  tmp2 = tmp->next;
  #line 823 
  while (& zombie_sc_list->head != tmp) {
    {
      #line 826 
      void *__mptr;
      #line 824 
      list_del_4(tmp);
      #line 825 
      atomic_dec_2(& zombie_sc_list->pending_req_count);
      #line 826 
      __mptr = (void *)tmp;
      #line 826 
      sc = ((struct octeon_soft_command *)__mptr);
      #line 827 
      octeon_free_soft_command(oct,sc);
    }
    #line 823 
    tmp = tmp2;
    #line 823 
    tmp2 = tmp->next;
  }
  #line 830 
  cif_spin_unlock_bh_sc_lists_lock(sc_lists_lock);
  #line 832 
  return 0;
}

#line 835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
int octeon_free_sc_buffer_pool(struct octeon_device *oct)
{
  #line 837 
  struct list_head *tmp;
  #line 837 
  struct list_head *tmp2;
  #line 838 
  struct octeon_soft_command *sc;
  #line 840 
  octeon_free_sc_zombie_list(oct);
  #line 842 
  cif_spin_lock_bh_lock_of_octeon_sc_buffer_pool(& oct->sc_buf_pool.lock);
  #line 844 
  tmp = oct->sc_buf_pool.head.next;
  #line 844 
  tmp2 = tmp->next;
  #line 844 
  while (& oct->sc_buf_pool.head != tmp) {
    #line 845 
    list_del_4(tmp);
    #line 847 
    sc = (struct octeon_soft_command *)tmp;
    #line 849 
    dma_free_coherent(& (oct->pci_dev)->dev,(unsigned long)sc->size,(void *)sc,sc->dma_addr);
    #line 844 
    tmp = tmp2;
    #line 844 
    tmp2 = tmp->next;
  }
  #line 852 
  INIT_LIST_HEAD_6(& oct->sc_buf_pool.head);
  #line 854 
  cif_spin_unlock_bh_lock_of_octeon_sc_buffer_pool(& oct->sc_buf_pool.lock);
  #line 856 
  return 0;
}

#line 859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
struct octeon_soft_command *octeon_alloc_soft_command(struct octeon_device *oct, u32 datasize, u32 rdatasize, u32 ctxsize)
{
  #line 864 
  u64 dma_addr;
  #line 865 
  u32 size;
  #line 868 
  struct list_head *tmp;
  #line 866 
  u32 offset = 304U;
  #line 867 
  struct octeon_soft_command *sc = (struct octeon_soft_command *)0;
  #line 870 
  if (rdatasize == 0U) 
                       #line 871 
                       rdatasize = 16U;
  {
    #line 873 
    int __ret_warn_on = ((offset + datasize) + rdatasize) + ctxsize > 2048U;
    #line 873 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 874 
      ldv_inline_asm();
      #line 875 
      ldv_inline_asm();
    }
    #line 873 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 876 
  cif_spin_lock_bh_lock_of_octeon_sc_buffer_pool(& oct->sc_buf_pool.lock);
  #line 878 
  if (list_empty_0(& oct->sc_buf_pool.head) != 0) {
    #line 879 
    cif_spin_unlock_bh_lock_of_octeon_sc_buffer_pool(& oct->sc_buf_pool.lock);
    #line 880 
    return (struct octeon_soft_command *)0;
  }
  #line 883 
  tmp = oct->sc_buf_pool.head.next;
  #line 883 
  while (& oct->sc_buf_pool.head != tmp) {
    #line 884 
    break;
    #line 883 
    tmp = tmp->next;
  }
  #line 886 
  list_del_4(tmp);
  #line 888 
  atomic_inc_3(& oct->sc_buf_pool.alloc_buf_count);
  #line 890 
  cif_spin_unlock_bh_lock_of_octeon_sc_buffer_pool(& oct->sc_buf_pool.lock);
  #line 892 
  sc = (struct octeon_soft_command *)tmp;
  #line 894 
  dma_addr = sc->dma_addr;
  #line 895 
  size = sc->size;
  #line 897 
  memset((void *)sc,0,(unsigned long)sc->size);
  #line 899 
  sc->dma_addr = dma_addr;
  #line 900 
  sc->size = size;
  #line 902 
  if (ctxsize != 0U) {
    #line 903 
    sc->ctxptr = (void *)((u8 *)sc + (unsigned long)offset);
    #line 904 
    sc->ctxsize = ctxsize;
  }
  #line 908 
  offset = ((offset + ctxsize) + 127U) & 4294967168U;
  #line 910 
  if (datasize != 0U) {
    #line 911 
    sc->virtdptr = (void *)((u8 *)sc + (unsigned long)offset);
    #line 912 
    sc->dmadptr = (unsigned long long)offset + dma_addr;
    #line 913 
    sc->datasize = datasize;
  }
  #line 917 
  offset = ((offset + datasize) + 127U) & 4294967168U;
  #line 919 
  if (rdatasize != 0U) {
    {
      #line 920 
      int __ret_warn_on_0 = rdatasize <= 15U;
      #line 920 
      if ((long)(__ret_warn_on_0 != 0) != 0L) {
        #line 921 
        ldv_inline_asm();
        #line 922 
        ldv_inline_asm();
      }
      #line 920 
      long tmp_4 = (long)(__ret_warn_on_0 != 0);
    }
    #line 921 
    sc->virtrptr = (void *)((u8 *)sc + (unsigned long)offset);
    #line 922 
    sc->dmarptr = (unsigned long long)offset + dma_addr;
    #line 923 
    sc->rdatasize = rdatasize;
    #line 924 
    sc->status_word = (u64 *)((u8 *)sc->virtrptr + ((unsigned long)rdatasize + 18446744073709551608U));
  }
  #line 927 
  return sc;
}

#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/cavium/liquidio/request_manager.c"
void octeon_free_soft_command(struct octeon_device *oct, struct octeon_soft_command *sc)
{
  #line 933 
  cif_spin_lock_bh_lock_of_octeon_sc_buffer_pool(& oct->sc_buf_pool.lock);
  #line 935 
  list_add_tail_4(& sc->node,& oct->sc_buf_pool.head);
  #line 937 
  atomic_dec_2(& oct->sc_buf_pool.alloc_buf_count);
  #line 939 
  cif_spin_unlock_bh_lock_of_octeon_sc_buffer_pool(& oct->sc_buf_pool.lock);
  #line 940 
  return;
}

#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
#line 98 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void INIT_LIST_HEAD_6(struct list_head *list)
{
  #line 137 
  ldv_init_list_head(list);
  #line 138 
  return;
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void atomic_sub_0(int i, atomic_t *v)
{
  #line 179 
  ldv_atomic_sub(i,v);
  #line 180 
  return;
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void atomic_inc_3(atomic_t *v)
{
  #line 186 
  ldv_atomic_inc(v);
  #line 187 
  return;
}

#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void atomic_dec_2(atomic_t *v)
{
  #line 193 
  ldv_atomic_dec(v);
  #line 194 
  return;
}

#line 304  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 308 
  return emg_queue_work(wq,work);
}

#line 312  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static bool cif_queue_delayed_work_2(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 316 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void *cif_vmalloc_node_0(unsigned long size, int node)
{
  #line 669 
  return ldv_vmalloc(size);
}

#line 673  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void *cif_vmalloc_3(unsigned long size)
{
  #line 676 
  return ldv_vmalloc(size);
}

#line 680  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_vfree_3(void *addr)
{
  #line 683 
  ldv_vfree(addr);
  #line 684 
  return;
}

#line 687  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void *cif_vzalloc_node_1(unsigned long size, int node)
{
  #line 690 
  return ldv_vzalloc(size);
}

#line 694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void *cif_vzalloc_1(unsigned long size)
{
  #line 697 
  return ldv_vzalloc(size);
}

#line 701  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_lock_post_lock_of_octeon_instr_queue(spinlock_t *lock)
{
  #line 704 
  ldv_spin_model_lock((char *)"post_lock_of_octeon_instr_queue");
  #line 706 
  spin_lock_3(lock);
  #line 707 
  return;
}

#line 710  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_unlock_post_lock_of_octeon_instr_queue(spinlock_t *lock)
{
  #line 713 
  ldv_spin_model_unlock((char *)"post_lock_of_octeon_instr_queue");
  #line 715 
  spin_unlock_3(lock);
  #line 716 
  return;
}

#line 719  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif___ldv_spin_lock_lock_of_octeon_response_list(spinlock_t *lock)
{
  #line 722 
  ldv_spin_model_lock((char *)"lock_of_octeon_response_list");
  #line 724 
  __ldv_spin_lock(lock);
  #line 725 
  return;
}

#line 728  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_octeon_response_list(spinlock_t *lock, unsigned long flags)
{
  #line 731 
  ldv_spin_model_unlock((char *)"lock_of_octeon_response_list");
  #line 733 
  spin_unlock_irqrestore_3(lock,flags);
  #line 734 
  return;
}

#line 737  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static int cif_spin_trylock_iq_flush_running_lock_of_octeon_instr_queue(spinlock_t *lock)
{
  #line 741 
  ldv_func_ret_type ldv_func_res = spin_trylock(lock);
  #line 743 
  int is_spin_held_by_another_thread = ldv_undef_int();
  #line 745 
  if (is_spin_held_by_another_thread != 0) 
                                           #line 748 
                                           return 0;
  else {
    #line 750 
    ldv_spin_model_lock((char *)"iq_flush_running_lock_of_octeon_instr_queue");
    #line 752 
    return 1;
  }
  #line 755 
  return ldv_func_res;
}

#line 759  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_lock_bh_lock_of_octeon_instr_queue_1(spinlock_t *lock)
{
  #line 762 
  ldv_spin_model_lock((char *)"lock_of_octeon_instr_queue");
  #line 764 
  spin_lock_bh_4(lock);
  #line 765 
  return;
}

#line 768  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_unlock_bh_lock_of_octeon_instr_queue_1(spinlock_t *lock)
{
  #line 771 
  ldv_spin_model_unlock((char *)"lock_of_octeon_instr_queue");
  #line 773 
  spin_unlock_bh_4(lock);
  #line 774 
  return;
}

#line 777  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_unlock_iq_flush_running_lock_of_octeon_instr_queue(spinlock_t *lock)
{
  #line 780 
  ldv_spin_model_unlock((char *)"iq_flush_running_lock_of_octeon_instr_queue");
  #line 782 
  spin_unlock_3(lock);
  #line 783 
  return;
}

#line 786  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_lock_bh_post_lock_of_octeon_instr_queue(spinlock_t *lock)
{
  #line 789 
  ldv_spin_model_lock((char *)"post_lock_of_octeon_instr_queue");
  #line 791 
  spin_lock_bh_4(lock);
  #line 792 
  return;
}

#line 795  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_unlock_bh_post_lock_of_octeon_instr_queue(spinlock_t *lock)
{
  #line 798 
  ldv_spin_model_unlock((char *)"post_lock_of_octeon_instr_queue");
  #line 800 
  spin_unlock_bh_4(lock);
  #line 801 
  return;
}

#line 804  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_lock_bh_sc_lists_lock(spinlock_t *lock)
{
  #line 807 
  ldv_spin_model_lock((char *)"sc_lists_lock");
  #line 809 
  spin_lock_bh_4(lock);
  #line 810 
  return;
}

#line 813  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_unlock_bh_sc_lists_lock(spinlock_t *lock)
{
  #line 816 
  ldv_spin_model_unlock((char *)"sc_lists_lock");
  #line 818 
  spin_unlock_bh_4(lock);
  #line 819 
  return;
}

#line 822  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_lock_bh_lock_of_octeon_sc_buffer_pool(spinlock_t *lock)
{
  #line 825 
  ldv_spin_model_lock((char *)"lock_of_octeon_sc_buffer_pool");
  #line 827 
  spin_lock_bh_4(lock);
  #line 828 
  return;
}

#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/0/concurrency safety/weaver/request_manager.i.aux"
static void cif_spin_unlock_bh_lock_of_octeon_sc_buffer_pool(spinlock_t *lock)
{
  #line 834 
  ldv_spin_model_unlock((char *)"lock_of_octeon_sc_buffer_pool");
  #line 836 
  spin_unlock_bh_4(lock);
  #line 837 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
#line 202 
void emg_dispatch_deregister_13(struct net_device *arg0);
#line 99 
#line 156 
void emg_dispatch_deregister_6(struct pci_driver *arg0);
#line 100 
#line 140 
void emg_dispatch_irq_deregister_4(int arg0);
#line 101 
#line 176 
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 102 
#line 129 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 103 
#line 165 
void emg_dispatch_register_9(struct net_device *arg0);
#line 104 
#line 1618 
void *emg_entry_point_insmod(void *arg0);
#line 107 
#line 211 
void *emg_interrupt_interrupt_scenario_liquidio_legacy_intr_handler(void *arg0);
#line 108 
#line 274 
void *emg_interrupt_interrupt_scenario_liquidio_msix_intr_handler(void *arg0);
#line 109 
#line 337 
void *emg_net_random_allocationless_scenario_lio_get_sset_count(void *arg0);
#line 110 
#line 1106 
void *emg_pci_pci_scenario_liquidio_vf_pci_driver(void *arg0);
#line 119 
#line 1647 
int main(void);
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 130 
  int ret;
  #line 131 
  struct emg_struct_pci_scenario_liquidio_vf_pci_driver_17 *cf_arg_17;
  #line 132 
  cf_arg_17 = (struct emg_struct_pci_scenario_liquidio_vf_pci_driver_17 *)ldv_xmalloc(16UL);
  #line 133 
  cf_arg_17->arg0 = arg0;
  #line 134 
  ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_pci_pci_scenario_liquidio_vf_pci_driver,(void *)cf_arg_17);
  #line 135 
  __VERIFIER_assume(ret == 0);
  #line 136 
  return;
}

#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_4(int arg0)
{
  #line 141 
  int ret;
  #line 142 
  struct emg_struct_free_irq_4 *cf_arg_14;
  #line 143 
  struct emg_struct_free_irq_4 *cf_arg_15;
  #line 144 
  if (ldv_undef_int() != 0) {
    #line 145 
    ret = pthread_join(emg_thread_14,(void **)0);
    #line 146 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 149 
    ret = pthread_join(emg_thread_15,(void **)0);
    #line 150 
    __VERIFIER_assume(ret == 0);
  }
  #line 152 
  return;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_6(struct pci_driver *arg0)
{
  #line 157 
  int ret;
  #line 158 
  struct emg_struct_pci_scenario_liquidio_vf_pci_driver_17 *cf_arg_17;
  #line 159 
  ret = pthread_join(emg_thread_17,(void **)0);
  #line 160 
  __VERIFIER_assume(ret == 0);
  #line 161 
  return;
}

#line 165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_9(struct net_device *arg0)
{
  #line 166 
  int ret;
  #line 167 
  struct emg_struct_random_allocationless_scenario_lio_get_sset_count_16 *cf_arg_16;
  #line 168 
  cf_arg_16 = (struct emg_struct_random_allocationless_scenario_lio_get_sset_count_16 *)ldv_xmalloc(16UL);
  #line 169 
  cf_arg_16->arg0 = arg0;
  #line 170 
  ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_lio_get_sset_count,(void *)cf_arg_16);
  #line 171 
  __VERIFIER_assume(ret == 0);
  #line 172 
  return;
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 177 
  int ret;
  #line 178 
  struct emg_struct_interrupt_scenario_liquidio_legacy_intr_handler_14 *cf_arg_14;
  #line 179 
  struct emg_struct_interrupt_scenario_liquidio_legacy_intr_handler_14 *cf_arg_15;
  #line 180 
  if (ldv_undef_int() != 0) {
    #line 181 
    cf_arg_14 = (struct emg_struct_interrupt_scenario_liquidio_legacy_intr_handler_14 *)ldv_xmalloc(40UL);
    #line 182 
    cf_arg_14->arg0 = arg0;
    #line 183 
    cf_arg_14->arg1 = arg1;
    #line 184 
    cf_arg_14->arg2 = arg2;
    #line 185 
    cf_arg_14->arg3 = arg3;
    #line 186 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_liquidio_legacy_intr_handler,(void *)cf_arg_14);
    #line 187 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 190 
    cf_arg_15 = (struct emg_struct_interrupt_scenario_liquidio_legacy_intr_handler_14 *)ldv_xmalloc(40UL);
    #line 191 
    cf_arg_15->arg0 = arg0;
    #line 192 
    cf_arg_15->arg1 = arg1;
    #line 193 
    cf_arg_15->arg2 = arg2;
    #line 194 
    cf_arg_15->arg3 = arg3;
    #line 195 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_liquidio_msix_intr_handler,(void *)cf_arg_15);
    #line 196 
    __VERIFIER_assume(ret == 0);
  }
  #line 198 
  return;
}

#line 202  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_13(struct net_device *arg0)
{
  #line 203 
  int ret;
  #line 204 
  struct emg_struct_random_allocationless_scenario_lio_get_sset_count_16 *cf_arg_16;
  #line 205 
  ret = pthread_join(emg_thread_16,(void **)0);
  #line 206 
  __VERIFIER_assume(ret == 0);
  #line 207 
  return;
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_liquidio_legacy_intr_handler(void *arg0)
{
  #line 214 
  enum irqreturn (*emg_14_callback)(int , void *);
  #line 215 
  void *emg_14_data;
  #line 216 
  int emg_14_line;
  #line 217 
  enum irqreturn emg_14_ret_val;
  #line 218 
  enum irqreturn (*emg_14_thread)(int , void *);
  #line 220 
  struct emg_struct_interrupt_scenario_liquidio_legacy_intr_handler_14 *data = (struct emg_struct_interrupt_scenario_liquidio_legacy_intr_handler_14 *)arg0;
  #line 223 
  emg_14_callback = & emg_wrapper_liquidio_legacy_intr_handler;
  #line 226 
  if (data != (struct emg_struct_interrupt_scenario_liquidio_legacy_intr_handler_14 *)0) {
    #line 227 
    emg_14_line = data->arg0;
    #line 228 
    emg_14_callback = data->arg1;
    #line 229 
    emg_14_thread = data->arg2;
    #line 230 
    emg_14_data = data->arg3;
    #line 231 
    ldv_free((void *)data);
  }
  #line 237 
  ldv_switch_to_interrupt_context();
  #line 241 
  emg_14_ret_val = emg_wrapper_liquidio_legacy_intr_handler(emg_14_line,emg_14_data);
  #line 246 
  ldv_switch_to_process_context();
  #line 249 
  if (ldv_undef_int() != 0) {
    #line 251 
    __VERIFIER_assume(emg_14_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 255 
    if (emg_14_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 256 
                                                              (*emg_14_thread)(emg_14_line,emg_14_data);
  }
  else 
       #line 261 
       __VERIFIER_assume(emg_14_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 269 
  return (void *)0;
}

#line 274  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_liquidio_msix_intr_handler(void *arg0)
{
  #line 277 
  enum irqreturn (*emg_15_callback)(int , void *);
  #line 278 
  void *emg_15_data;
  #line 279 
  int emg_15_line;
  #line 280 
  enum irqreturn emg_15_ret_val;
  #line 281 
  enum irqreturn (*emg_15_thread)(int , void *);
  #line 283 
  struct emg_struct_interrupt_scenario_liquidio_legacy_intr_handler_14 *data = (struct emg_struct_interrupt_scenario_liquidio_legacy_intr_handler_14 *)arg0;
  #line 286 
  emg_15_callback = & liquidio_msix_intr_handler;
  #line 289 
  if (data != (struct emg_struct_interrupt_scenario_liquidio_legacy_intr_handler_14 *)0) {
    #line 290 
    emg_15_line = data->arg0;
    #line 291 
    emg_15_callback = data->arg1;
    #line 292 
    emg_15_thread = data->arg2;
    #line 293 
    emg_15_data = data->arg3;
    #line 294 
    ldv_free((void *)data);
  }
  #line 300 
  ldv_switch_to_interrupt_context();
  #line 304 
  emg_15_ret_val = liquidio_msix_intr_handler(emg_15_line,emg_15_data);
  #line 309 
  ldv_switch_to_process_context();
  #line 312 
  if (ldv_undef_int() != 0) {
    #line 314 
    __VERIFIER_assume(emg_15_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 318 
    if (emg_15_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 319 
                                                              (*emg_15_thread)(emg_15_line,emg_15_data);
  }
  else 
       #line 324 
       __VERIFIER_assume(emg_15_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 332 
  return (void *)0;
}

#line 337  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_lio_get_sset_count(void *arg0)
{
  #line 340 
  struct net_device *emg_16_container;
  #line 341 
  struct sk_buff *emg_16_emg_param_0_42;
  #line 342 
  int emg_16_emg_param_1_0;
  #line 343 
  unsigned int emg_16_emg_param_1_1;
  #line 344 
  struct ethtool_link_ksettings *emg_16_emg_param_1_10;
  #line 345 
  unsigned int emg_16_emg_param_1_11;
  #line 346 
  struct ethtool_regs *emg_16_emg_param_1_12;
  #line 347 
  struct ethtool_drvinfo *emg_16_emg_param_1_14;
  #line 348 
  struct ethtool_ts_info *emg_16_emg_param_1_15;
  #line 349 
  struct ethtool_channels *emg_16_emg_param_1_16;
  #line 350 
  struct ethtool_channels *emg_16_emg_param_1_17;
  #line 351 
  struct ethtool_channels *emg_16_emg_param_1_18;
  #line 352 
  struct ethtool_coalesce *emg_16_emg_param_1_19;
  #line 353 
  struct ethtool_stats *emg_16_emg_param_1_2;
  #line 354 
  struct ethtool_drvinfo *emg_16_emg_param_1_20;
  #line 355 
  struct ethtool_eeprom *emg_16_emg_param_1_21;
  #line 356 
  struct ethtool_stats *emg_16_emg_param_1_23;
  #line 357 
  struct ethtool_fecparam *emg_16_emg_param_1_25;
  #line 358 
  struct ethtool_link_ksettings *emg_16_emg_param_1_26;
  #line 359 
  struct ethtool_pauseparam *emg_16_emg_param_1_27;
  #line 360 
  struct ethtool_regs *emg_16_emg_param_1_28;
  #line 361 
  struct ethtool_ringparam *emg_16_emg_param_1_30;
  #line 362 
  int emg_16_emg_param_1_31;
  #line 363 
  unsigned int emg_16_emg_param_1_32;
  #line 364 
  struct ethtool_ts_info *emg_16_emg_param_1_34;
  #line 365 
  int emg_16_emg_param_1_35;
  #line 366 
  struct ifreq *emg_16_emg_param_1_36;
  #line 367 
  unsigned long long emg_16_emg_param_1_38;
  #line 368 
  struct rtnl_link_stats64 *emg_16_emg_param_1_39;
  #line 369 
  unsigned int emg_16_emg_param_1_4;
  #line 370 
  unsigned long long emg_16_emg_param_1_40;
  #line 371 
  void *emg_16_emg_param_1_41;
  #line 372 
  struct udp_tunnel_info *emg_16_emg_param_1_43;
  #line 373 
  struct udp_tunnel_info *emg_16_emg_param_1_44;
  #line 374 
  unsigned short emg_16_emg_param_1_45;
  #line 375 
  unsigned short emg_16_emg_param_1_47;
  #line 376 
  struct ethtool_channels *emg_16_emg_param_1_49;
  #line 377 
  struct ethtool_coalesce *emg_16_emg_param_1_50;
  #line 378 
  struct ethtool_fecparam *emg_16_emg_param_1_51;
  #line 379 
  struct ethtool_link_ksettings *emg_16_emg_param_1_52;
  #line 380 
  unsigned int emg_16_emg_param_1_53;
  #line 381 
  struct ethtool_pauseparam *emg_16_emg_param_1_54;
  #line 382 
  enum ethtool_phys_id_state *emg_16_emg_param_1_55;
  #line 383 
  unsigned int emg_16_emg_param_1_56;
  #line 384 
  struct ethtool_ringparam *emg_16_emg_param_1_57;
  #line 385 
  struct ethtool_ringparam *emg_16_emg_param_1_6;
  #line 386 
  struct ethtool_ringparam *emg_16_emg_param_1_7;
  #line 387 
  struct ethtool_coalesce *emg_16_emg_param_1_8;
  #line 388 
  struct ethtool_coalesce *emg_16_emg_param_1_9;
  #line 389 
  void *emg_16_emg_param_2_13;
  #line 390 
  unsigned char *emg_16_emg_param_2_22;
  #line 391 
  unsigned long long *emg_16_emg_param_2_24;
  #line 392 
  void *emg_16_emg_param_2_29;
  #line 393 
  unsigned long long *emg_16_emg_param_2_3;
  #line 394 
  unsigned char *emg_16_emg_param_2_33;
  #line 395 
  int emg_16_emg_param_2_37;
  #line 396 
  unsigned short emg_16_emg_param_2_46;
  #line 397 
  unsigned short emg_16_emg_param_2_48;
  #line 398 
  unsigned char *emg_16_emg_param_2_5;
  #line 399 
  int emg_repeat_cnt_call_16 = 1;
  #line 401 
  struct emg_struct_random_allocationless_scenario_lio_get_sset_count_16 *data = (struct emg_struct_random_allocationless_scenario_lio_get_sset_count_16 *)arg0;
  #line 406 
  if (data != (struct emg_struct_random_allocationless_scenario_lio_get_sset_count_16 *)0) {
    #line 407 
    emg_16_container = data->arg0;
    #line 408 
    ldv_free((void *)data);
  }
  #line 413 
  goto emg_call_16;
  #line 417 
  return (void *)0;
  #line 420 
  emg_call_16: 
               #line 420 
  ;
  #line 421 
  switch (ldv_undef_int()) {
    #line 422 
    case 0: 
            #line 422 
    ;
    #line 424 
    emg_16_emg_param_1_57 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 424 
    emg_16_emg_param_1_57 = emg_16_emg_param_1_57;
    #line 428 
    emg_wrapper_lio_ethtool_set_ringparam(emg_16_container,emg_16_emg_param_1_57);
    #line 432 
    ldv_free((void *)emg_16_emg_param_1_57);
    #line 434 
    break;
    #line 436 
    case 1: 
            #line 436 
    ;
    #line 438 
    emg_wrapper_lio_set_priv_flags(emg_16_container,emg_16_emg_param_1_56);
    #line 440 
    break;
    #line 442 
    case 2: 
            #line 442 
    ;
    #line 444 
    emg_16_emg_param_1_55 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 444 
    emg_16_emg_param_1_55 = emg_16_emg_param_1_55;
    #line 448 
    emg_wrapper_lio_set_phys_id(emg_16_container,*emg_16_emg_param_1_55);
    #line 452 
    ldv_free((void *)emg_16_emg_param_1_55);
    #line 454 
    break;
    #line 456 
    case 3: 
            #line 456 
    ;
    #line 458 
    emg_16_emg_param_1_54 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 458 
    emg_16_emg_param_1_54 = emg_16_emg_param_1_54;
    #line 462 
    emg_wrapper_lio_set_pauseparam(emg_16_container,emg_16_emg_param_1_54);
    #line 466 
    ldv_free((void *)emg_16_emg_param_1_54);
    #line 468 
    break;
    #line 470 
    case 4: 
            #line 470 
    ;
    #line 472 
    emg_wrapper_lio_vf_set_msglevel(emg_16_container,emg_16_emg_param_1_53);
    #line 474 
    break;
    #line 476 
    case 5: 
            #line 476 
    ;
    #line 478 
    emg_16_emg_param_1_52 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 478 
    emg_16_emg_param_1_52 = emg_16_emg_param_1_52;
    #line 482 
    emg_wrapper_lio_set_link_ksettings(emg_16_container,emg_16_emg_param_1_52);
    #line 486 
    ldv_free((void *)emg_16_emg_param_1_52);
    #line 488 
    break;
    #line 490 
    case 6: 
            #line 490 
    ;
    #line 492 
    emg_16_emg_param_1_51 = (struct ethtool_fecparam *)ldv_xmalloc_unknown_size(0UL);
    #line 492 
    emg_16_emg_param_1_51 = emg_16_emg_param_1_51;
    #line 496 
    emg_wrapper_lio_set_fecparam(emg_16_container,emg_16_emg_param_1_51);
    #line 500 
    ldv_free((void *)emg_16_emg_param_1_51);
    #line 502 
    break;
    #line 504 
    case 7: 
            #line 504 
    ;
    #line 506 
    emg_16_emg_param_1_50 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 506 
    emg_16_emg_param_1_50 = emg_16_emg_param_1_50;
    #line 510 
    emg_wrapper_lio_set_intr_coalesce(emg_16_container,emg_16_emg_param_1_50);
    #line 514 
    ldv_free((void *)emg_16_emg_param_1_50);
    #line 516 
    break;
    #line 518 
    case 8: 
            #line 518 
    ;
    #line 520 
    emg_16_emg_param_1_49 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 520 
    emg_16_emg_param_1_49 = emg_16_emg_param_1_49;
    #line 524 
    emg_wrapper_lio_ethtool_set_channels(emg_16_container,emg_16_emg_param_1_49);
    #line 528 
    ldv_free((void *)emg_16_emg_param_1_49);
    #line 530 
    break;
    #line 532 
    case 9: 
            #line 532 
    ;
    #line 534 
    emg_wrapper_liquidio_vlan_rx_kill_vid(emg_16_container,(unsigned short)((int)emg_16_emg_param_1_47),(unsigned short)((int)emg_16_emg_param_2_48));
    #line 536 
    break;
    #line 538 
    case 10: 
             #line 538 
    ;
    #line 540 
    emg_wrapper_liquidio_vlan_rx_add_vid(emg_16_container,(unsigned short)((int)emg_16_emg_param_1_45),(unsigned short)((int)emg_16_emg_param_2_46));
    #line 542 
    break;
    #line 544 
    case 11: 
             #line 544 
    ;
    #line 546 
    emg_16_emg_param_1_44 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 546 
    emg_16_emg_param_1_44 = emg_16_emg_param_1_44;
    #line 550 
    emg_wrapper_liquidio_del_vxlan_port(emg_16_container,emg_16_emg_param_1_44);
    #line 554 
    ldv_free((void *)emg_16_emg_param_1_44);
    #line 556 
    break;
    #line 558 
    case 12: 
             #line 558 
    ;
    #line 560 
    emg_16_emg_param_1_43 = (struct udp_tunnel_info *)ldv_xmalloc_unknown_size(0UL);
    #line 560 
    emg_16_emg_param_1_43 = emg_16_emg_param_1_43;
    #line 564 
    emg_wrapper_liquidio_add_vxlan_port(emg_16_container,emg_16_emg_param_1_43);
    #line 568 
    ldv_free((void *)emg_16_emg_param_1_43);
    #line 570 
    break;
    #line 572 
    case 13: 
             #line 572 
    ;
    #line 574 
    emg_wrapper_liquidio_tx_timeout(emg_16_container);
    #line 576 
    break;
    #line 578 
    case 14: 
             #line 578 
    ;
    #line 580 
    emg_16_emg_param_0_42 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 580 
    emg_16_emg_param_0_42 = emg_16_emg_param_0_42;
    #line 584 
    emg_wrapper_liquidio_xmit(emg_16_emg_param_0_42,emg_16_container);
    #line 588 
    ldv_free((void *)emg_16_emg_param_0_42);
    #line 590 
    break;
    #line 592 
    case 15: 
             #line 592 
    ;
    #line 594 
    emg_wrapper_liquidio_set_mcast_list(emg_16_container);
    #line 596 
    break;
    #line 598 
    case 16: 
             #line 598 
    ;
    #line 600 
    emg_16_emg_param_1_41 = ldv_xmalloc_unknown_size(0UL);
    #line 600 
    emg_16_emg_param_1_41 = emg_16_emg_param_1_41;
    #line 604 
    emg_wrapper_liquidio_set_mac(emg_16_container,emg_16_emg_param_1_41);
    #line 608 
    ldv_free(emg_16_emg_param_1_41);
    #line 610 
    break;
    #line 612 
    case 17: 
             #line 612 
    ;
    #line 614 
    emg_wrapper_liquidio_set_features(emg_16_container,emg_16_emg_param_1_40);
    #line 616 
    break;
    #line 618 
    case 18: 
             #line 618 
    ;
    #line 620 
    emg_16_emg_param_1_39 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 620 
    emg_16_emg_param_1_39 = emg_16_emg_param_1_39;
    #line 624 
    emg_wrapper_liquidio_get_stats64(emg_16_container,emg_16_emg_param_1_39);
    #line 628 
    ldv_free((void *)emg_16_emg_param_1_39);
    #line 630 
    break;
    #line 632 
    case 19: 
             #line 632 
    ;
    #line 634 
    emg_wrapper_liquidio_fix_features(emg_16_container,emg_16_emg_param_1_38);
    #line 636 
    break;
    #line 638 
    case 20: 
             #line 638 
    ;
    #line 640 
    emg_16_emg_param_1_36 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 640 
    emg_16_emg_param_1_36 = emg_16_emg_param_1_36;
    #line 644 
    emg_wrapper_liquidio_ioctl(emg_16_container,emg_16_emg_param_1_36,emg_16_emg_param_2_37);
    #line 648 
    ldv_free((void *)emg_16_emg_param_1_36);
    #line 650 
    break;
    #line 652 
    case 21: 
             #line 652 
    ;
    #line 654 
    liquidio_change_mtu(emg_16_container,emg_16_emg_param_1_35);
    #line 656 
    break;
    #line 658 
    case 22: 
             #line 658 
    ;
    #line 660 
    emg_16_emg_param_1_34 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 660 
    emg_16_emg_param_1_34 = emg_16_emg_param_1_34;
    #line 664 
    emg_wrapper_lio_get_ts_info(emg_16_container,emg_16_emg_param_1_34);
    #line 668 
    ldv_free((void *)emg_16_emg_param_1_34);
    #line 670 
    break;
    #line 672 
    case 23: 
             #line 672 
    ;
    #line 674 
    emg_16_emg_param_2_33 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 674 
    emg_16_emg_param_2_33 = emg_16_emg_param_2_33;
    #line 678 
    emg_wrapper_lio_vf_get_strings(emg_16_container,emg_16_emg_param_1_32,emg_16_emg_param_2_33);
    #line 682 
    ldv_free((void *)emg_16_emg_param_2_33);
    #line 684 
    break;
    #line 686 
    case 24: 
             #line 686 
    ;
    #line 688 
    emg_wrapper_lio_vf_get_sset_count(emg_16_container,emg_16_emg_param_1_31);
    #line 690 
    break;
    #line 692 
    case 25: 
             #line 692 
    ;
    #line 694 
    emg_16_emg_param_1_30 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 694 
    emg_16_emg_param_1_30 = emg_16_emg_param_1_30;
    #line 698 
    emg_wrapper_lio_ethtool_get_ringparam(emg_16_container,emg_16_emg_param_1_30);
    #line 702 
    ldv_free((void *)emg_16_emg_param_1_30);
    #line 704 
    break;
    #line 706 
    case 26: 
             #line 706 
    ;
    #line 708 
    emg_wrapper_lio_get_regs_len(emg_16_container);
    #line 710 
    break;
    #line 712 
    case 27: 
             #line 712 
    ;
    #line 714 
    emg_16_emg_param_1_28 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 714 
    emg_16_emg_param_1_28 = emg_16_emg_param_1_28;
    #line 715 
    emg_16_emg_param_2_29 = ldv_xmalloc_unknown_size(0UL);
    #line 715 
    emg_16_emg_param_2_29 = emg_16_emg_param_2_29;
    #line 719 
    emg_wrapper_lio_get_regs(emg_16_container,emg_16_emg_param_1_28,emg_16_emg_param_2_29);
    #line 723 
    ldv_free((void *)emg_16_emg_param_1_28);
    #line 724 
    ldv_free(emg_16_emg_param_2_29);
    #line 726 
    break;
    #line 728 
    case 28: 
             #line 728 
    ;
    #line 730 
    emg_wrapper_lio_get_priv_flags(emg_16_container);
    #line 732 
    break;
    #line 734 
    case 29: 
             #line 734 
    ;
    #line 736 
    emg_16_emg_param_1_27 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 736 
    emg_16_emg_param_1_27 = emg_16_emg_param_1_27;
    #line 740 
    emg_wrapper_lio_get_pauseparam(emg_16_container,emg_16_emg_param_1_27);
    #line 744 
    ldv_free((void *)emg_16_emg_param_1_27);
    #line 746 
    break;
    #line 748 
    case 30: 
             #line 748 
    ;
    #line 750 
    emg_wrapper_lio_get_msglevel(emg_16_container);
    #line 752 
    break;
    #line 754 
    case 31: 
             #line 754 
    ;
    #line 756 
    emg_16_emg_param_1_26 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 756 
    emg_16_emg_param_1_26 = emg_16_emg_param_1_26;
    #line 760 
    emg_wrapper_lio_get_link_ksettings(emg_16_container,emg_16_emg_param_1_26);
    #line 764 
    ldv_free((void *)emg_16_emg_param_1_26);
    #line 766 
    break;
    #line 768 
    case 32: 
             #line 768 
    ;
    #line 770 
    ethtool_op_get_link(emg_16_container);
    #line 772 
    break;
    #line 774 
    case 33: 
             #line 774 
    ;
    #line 776 
    emg_16_emg_param_1_25 = (struct ethtool_fecparam *)ldv_xmalloc_unknown_size(0UL);
    #line 776 
    emg_16_emg_param_1_25 = emg_16_emg_param_1_25;
    #line 780 
    emg_wrapper_lio_get_fecparam(emg_16_container,emg_16_emg_param_1_25);
    #line 784 
    ldv_free((void *)emg_16_emg_param_1_25);
    #line 786 
    break;
    #line 788 
    case 34: 
             #line 788 
    ;
    #line 790 
    emg_16_emg_param_1_23 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 790 
    emg_16_emg_param_1_23 = emg_16_emg_param_1_23;
    #line 791 
    emg_16_emg_param_2_24 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 791 
    emg_16_emg_param_2_24 = emg_16_emg_param_2_24;
    #line 795 
    emg_wrapper_lio_vf_get_ethtool_stats(emg_16_container,emg_16_emg_param_1_23,emg_16_emg_param_2_24);
    #line 799 
    ldv_free((void *)emg_16_emg_param_1_23);
    #line 800 
    ldv_free((void *)emg_16_emg_param_2_24);
    #line 802 
    break;
    #line 804 
    case 35: 
             #line 804 
    ;
    #line 806 
    emg_wrapper_lio_get_eeprom_len(emg_16_container);
    #line 808 
    break;
    #line 810 
    case 36: 
             #line 810 
    ;
    #line 812 
    emg_16_emg_param_1_21 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 812 
    emg_16_emg_param_1_21 = emg_16_emg_param_1_21;
    #line 813 
    emg_16_emg_param_2_22 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 813 
    emg_16_emg_param_2_22 = emg_16_emg_param_2_22;
    #line 817 
    emg_wrapper_lio_get_eeprom(emg_16_container,emg_16_emg_param_1_21,emg_16_emg_param_2_22);
    #line 821 
    ldv_free((void *)emg_16_emg_param_1_21);
    #line 822 
    ldv_free((void *)emg_16_emg_param_2_22);
    #line 824 
    break;
    #line 826 
    case 37: 
             #line 826 
    ;
    #line 828 
    emg_16_emg_param_1_20 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 828 
    emg_16_emg_param_1_20 = emg_16_emg_param_1_20;
    #line 832 
    emg_wrapper_lio_get_vf_drvinfo(emg_16_container,emg_16_emg_param_1_20);
    #line 836 
    ldv_free((void *)emg_16_emg_param_1_20);
    #line 838 
    break;
    #line 840 
    case 38: 
             #line 840 
    ;
    #line 842 
    emg_16_emg_param_1_19 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 842 
    emg_16_emg_param_1_19 = emg_16_emg_param_1_19;
    #line 846 
    emg_wrapper_lio_get_intr_coalesce(emg_16_container,emg_16_emg_param_1_19);
    #line 850 
    ldv_free((void *)emg_16_emg_param_1_19);
    #line 852 
    break;
    #line 854 
    case 39: 
             #line 854 
    ;
    #line 856 
    emg_16_emg_param_1_18 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 856 
    emg_16_emg_param_1_18 = emg_16_emg_param_1_18;
    #line 860 
    emg_wrapper_lio_ethtool_get_channels(emg_16_container,emg_16_emg_param_1_18);
    #line 864 
    ldv_free((void *)emg_16_emg_param_1_18);
    #line 866 
    break;
    #line 868 
    case 40: 
             #line 868 
    ;
    #line 870 
    emg_16_emg_param_1_17 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 870 
    emg_16_emg_param_1_17 = emg_16_emg_param_1_17;
    #line 874 
    emg_wrapper_lio_ethtool_get_channels(emg_16_container,emg_16_emg_param_1_17);
    #line 878 
    ldv_free((void *)emg_16_emg_param_1_17);
    #line 880 
    break;
    #line 882 
    case 41: 
             #line 882 
    ;
    #line 884 
    emg_16_emg_param_1_16 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 884 
    emg_16_emg_param_1_16 = emg_16_emg_param_1_16;
    #line 888 
    emg_wrapper_lio_ethtool_set_channels(emg_16_container,emg_16_emg_param_1_16);
    #line 892 
    ldv_free((void *)emg_16_emg_param_1_16);
    #line 894 
    break;
    #line 896 
    case 42: 
             #line 896 
    ;
    #line 898 
    emg_16_emg_param_1_15 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 898 
    emg_16_emg_param_1_15 = emg_16_emg_param_1_15;
    #line 902 
    emg_wrapper_lio_get_ts_info(emg_16_container,emg_16_emg_param_1_15);
    #line 906 
    ldv_free((void *)emg_16_emg_param_1_15);
    #line 908 
    break;
    #line 910 
    case 43: 
             #line 910 
    ;
    #line 912 
    emg_16_emg_param_1_14 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 912 
    emg_16_emg_param_1_14 = emg_16_emg_param_1_14;
    #line 916 
    emg_wrapper_lio_get_drvinfo(emg_16_container,emg_16_emg_param_1_14);
    #line 920 
    ldv_free((void *)emg_16_emg_param_1_14);
    #line 922 
    break;
    #line 924 
    case 44: 
             #line 924 
    ;
    #line 926 
    emg_wrapper_lio_get_regs_len(emg_16_container);
    #line 928 
    break;
    #line 930 
    case 45: 
             #line 930 
    ;
    #line 932 
    emg_16_emg_param_1_12 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 932 
    emg_16_emg_param_1_12 = emg_16_emg_param_1_12;
    #line 933 
    emg_16_emg_param_2_13 = ldv_xmalloc_unknown_size(0UL);
    #line 933 
    emg_16_emg_param_2_13 = emg_16_emg_param_2_13;
    #line 937 
    emg_wrapper_lio_get_regs(emg_16_container,emg_16_emg_param_1_12,emg_16_emg_param_2_13);
    #line 941 
    ldv_free((void *)emg_16_emg_param_1_12);
    #line 942 
    ldv_free(emg_16_emg_param_2_13);
    #line 944 
    break;
    #line 946 
    case 46: 
             #line 946 
    ;
    #line 948 
    emg_wrapper_lio_get_msglevel(emg_16_container);
    #line 950 
    break;
    #line 952 
    case 47: 
             #line 952 
    ;
    #line 954 
    emg_wrapper_lio_set_msglevel(emg_16_container,emg_16_emg_param_1_11);
    #line 956 
    break;
    #line 958 
    case 48: 
             #line 958 
    ;
    #line 960 
    emg_16_emg_param_1_10 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 960 
    emg_16_emg_param_1_10 = emg_16_emg_param_1_10;
    #line 964 
    emg_wrapper_lio_get_link_ksettings(emg_16_container,emg_16_emg_param_1_10);
    #line 968 
    ldv_free((void *)emg_16_emg_param_1_10);
    #line 970 
    break;
    #line 972 
    case 49: 
             #line 972 
    ;
    #line 974 
    ethtool_op_get_link(emg_16_container);
    #line 976 
    break;
    #line 978 
    case 50: 
             #line 978 
    ;
    #line 980 
    emg_16_emg_param_1_9 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 980 
    emg_16_emg_param_1_9 = emg_16_emg_param_1_9;
    #line 984 
    emg_wrapper_lio_get_intr_coalesce(emg_16_container,emg_16_emg_param_1_9);
    #line 988 
    ldv_free((void *)emg_16_emg_param_1_9);
    #line 990 
    break;
    #line 992 
    case 51: 
             #line 992 
    ;
    #line 994 
    emg_16_emg_param_1_8 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 994 
    emg_16_emg_param_1_8 = emg_16_emg_param_1_8;
    #line 998 
    emg_wrapper_lio_set_intr_coalesce(emg_16_container,emg_16_emg_param_1_8);
    #line 1002 
    ldv_free((void *)emg_16_emg_param_1_8);
    #line 1004 
    break;
    #line 1006 
    case 52: 
             #line 1006 
    ;
    #line 1008 
    emg_16_emg_param_1_7 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1008 
    emg_16_emg_param_1_7 = emg_16_emg_param_1_7;
    #line 1012 
    emg_wrapper_lio_ethtool_get_ringparam(emg_16_container,emg_16_emg_param_1_7);
    #line 1016 
    ldv_free((void *)emg_16_emg_param_1_7);
    #line 1018 
    break;
    #line 1020 
    case 53: 
             #line 1020 
    ;
    #line 1022 
    emg_16_emg_param_1_6 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1022 
    emg_16_emg_param_1_6 = emg_16_emg_param_1_6;
    #line 1026 
    emg_wrapper_lio_ethtool_set_ringparam(emg_16_container,emg_16_emg_param_1_6);
    #line 1030 
    ldv_free((void *)emg_16_emg_param_1_6);
    #line 1032 
    break;
    #line 1034 
    case 54: 
             #line 1034 
    ;
    #line 1036 
    emg_16_emg_param_2_5 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1036 
    emg_16_emg_param_2_5 = emg_16_emg_param_2_5;
    #line 1040 
    emg_wrapper_lio_get_strings(emg_16_container,emg_16_emg_param_1_4,emg_16_emg_param_2_5);
    #line 1044 
    ldv_free((void *)emg_16_emg_param_2_5);
    #line 1046 
    break;
    #line 1048 
    case 55: 
             #line 1048 
    ;
    #line 1050 
    emg_16_emg_param_1_2 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 1050 
    emg_16_emg_param_1_2 = emg_16_emg_param_1_2;
    #line 1051 
    emg_16_emg_param_2_3 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 1051 
    emg_16_emg_param_2_3 = emg_16_emg_param_2_3;
    #line 1055 
    emg_wrapper_lio_get_ethtool_stats(emg_16_container,emg_16_emg_param_1_2,emg_16_emg_param_2_3);
    #line 1059 
    ldv_free((void *)emg_16_emg_param_1_2);
    #line 1060 
    ldv_free((void *)emg_16_emg_param_2_3);
    #line 1062 
    break;
    #line 1064 
    case 56: 
             #line 1064 
    ;
    #line 1066 
    emg_wrapper_lio_get_priv_flags(emg_16_container);
    #line 1068 
    break;
    #line 1070 
    case 57: 
             #line 1070 
    ;
    #line 1072 
    emg_wrapper_lio_set_priv_flags(emg_16_container,emg_16_emg_param_1_1);
    #line 1074 
    break;
    #line 1076 
    case 58: 
             #line 1076 
    ;
    #line 1078 
    emg_wrapper_lio_get_sset_count(emg_16_container,emg_16_emg_param_1_0);
    #line 1081 
    if (emg_repeat_cnt_call_16 > 0) {
      #line 1082 
      emg_repeat_cnt_call_16 --;
      #line 1084 
      goto emg_call_16;
    }
    else 
         #line 1086 
         __VERIFIER_assume(0);
    #line 1090 
    break;
    #line 1092 
    case 59: 
             #line 1092 
    ;
    #line 1096 
    break;
    #line 1098 
    default: 
             #line 1098 
    ;
    #line 1098 
    __VERIFIER_assume(0);
  }
  #line 1101 
  return (void *)0;
}

#line 1106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_liquidio_vf_pci_driver(void *arg0)
{
  #line 1109 
  int emg_17_choice;
  #line 1110 
  struct pci_driver *emg_17_container;
  #line 1111 
  struct pci_device_id *emg_17_device_id;
  #line 1112 
  struct pci_dev *emg_17_resource_0;
  #line 1113 
  struct pm_message emg_17_resource_1;
  #line 1114 
  int emg_17_ret;
  #line 1115 
  int emg_repeat_cnt_main_17_0 = 1;
  #line 1116 
  int emg_repeat_cnt_main_17_1 = 1;
  #line 1117 
  int emg_repeat_cnt_call_17_0 = 1;
  #line 1118 
  int emg_repeat_cnt_call_17_1 = 1;
  #line 1120 
  struct emg_struct_pci_scenario_liquidio_vf_pci_driver_17 *data = (struct emg_struct_pci_scenario_liquidio_vf_pci_driver_17 *)arg0;
  #line 1124 
  emg_17_choice = 0;
  #line 1125 
  emg_17_ret = ldv_undef_int();
  #line 1126 
  emg_17_choice = 0;
  #line 1127 
  emg_17_container = emg_alias_liquidio_vf_pci_driver;
  #line 1128 
  emg_17_ret = ldv_undef_int();
  #line 1130 
  __VERIFIER_assume(data->arg0 == emg_alias_liquidio_vf_pci_driver);
  #line 1132 
  if (data != (struct emg_struct_pci_scenario_liquidio_vf_pci_driver_17 *)0) {
    #line 1133 
    emg_17_container = data->arg0;
    #line 1134 
    ldv_free((void *)data);
  }
  #line 1139 
  emg_17_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 1140 
  emg_17_choice = __ldv_undef_int_range(0,1);
  #line 1141 
  emg_17_device_id = emg_17_container->id_table + (unsigned long)emg_17_choice;
  #line 1145 
  goto emg_main_17;
  #line 1149 
  return (void *)0;
  #line 1152 
  emg_call_17: 
               #line 1152 
  ;
  #line 1153 
  switch (ldv_undef_int()) {
    #line 1154 
    case 0: 
            #line 1154 
    ;
    #line 1159 
    if (emg_repeat_cnt_call_17_1 > 0) {
      #line 1160 
      emg_repeat_cnt_call_17_1 --;
      #line 1162 
      goto emg_call_17;
    }
    else 
         #line 1164 
         __VERIFIER_assume(0);
    #line 1168 
    break;
    #line 1170 
    case 1: 
            #line 1170 
    ;
    #line 1172 
    if (emg_17_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 1173 
      emg_17_ret = (*(emg_17_container->suspend))(emg_17_resource_0,emg_17_resource_1); else 
                                                                    #line 1175 
                                                                    emg_17_ret = ldv_undef_int();
    #line 1181 
    emg_17_ret = ldv_filter_err_code(emg_17_ret);
    #line 1185 
    if (emg_17_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 1186 
                                                                  (*(emg_17_container->resume))(emg_17_resource_0);
    #line 1190 
    if (emg_repeat_cnt_call_17_0 > 0) {
      #line 1191 
      emg_repeat_cnt_call_17_0 --;
      #line 1193 
      goto emg_call_17;
    }
    else 
         #line 1195 
         __VERIFIER_assume(0);
    #line 1199 
    break;
    #line 1201 
    case 2: 
            #line 1201 
    ;
    #line 1203 
    if (emg_17_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 1204 
      (*(emg_17_container->shutdown))(emg_17_resource_0);
    #line 1209 
    emg_wrapper_liquidio_vf_remove(emg_17_resource_0);
    #line 1212 
    if (emg_repeat_cnt_main_17_1 > 0) {
      #line 1213 
      emg_repeat_cnt_main_17_1 --;
      #line 1215 
      goto emg_main_17;
    }
    else 
         #line 1217 
         __VERIFIER_assume(0);
    #line 1221 
    break;
    #line 1223 
    default: 
             #line 1223 
    ;
    #line 1223 
    __VERIFIER_assume(0);
  }
  #line 1226 
  return (void *)0;
  #line 1229 
  emg_main_17: 
               #line 1229 
  ;
  #line 1230 
  if (ldv_undef_int() != 0) {
    #line 1233 
    ldv_pre_probe();
    #line 1237 
    emg_17_ret = emg_wrapper_liquidio_vf_probe(emg_17_resource_0,emg_17_device_id);
    #line 1242 
    emg_17_ret = ldv_post_probe(emg_17_ret);
    #line 1245 
    if (ldv_undef_int() != 0) {
      #line 1247 
      __VERIFIER_assume(emg_17_ret == 0);
      #line 1251 
      goto emg_call_17;
    }
    else 
         #line 1256 
         __VERIFIER_assume(emg_17_ret != 0);
    #line 1260 
    if (emg_repeat_cnt_main_17_0 > 0) {
      #line 1261 
      emg_repeat_cnt_main_17_0 --;
      #line 1263 
      goto emg_main_17;
    }
    else 
         #line 1265 
         __VERIFIER_assume(0);
  }
  else 
       #line 1271 
       ldv_free((void *)emg_17_resource_0);
  #line 1279 
  return (void *)0;
}

#line 1284  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1287 
  struct pci_driver *emg_2_pci_driver;
  #line 1289 
  emg_2_pci_driver = emg_alias_liquidio_vf_pci_driver;
  #line 1290 
  if (ldv_undef_int() != 0) {
    #line 1292 
    emg_2_pci_driver = arg0;
    #line 1296 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1300 
    return 0;
  }
  else {
    #line 1304 
    return ldv_undef_int_negative();
  }
}

#line 1312  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 1315 
  struct net_device *emg_3_netdev;
  #line 1317 
  if (ldv_undef_int() != 0) {
    #line 1319 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 1323 
    return emg_3_netdev;
  }
  else 
       #line 1327 
       return (struct net_device *)0;
}

#line 1335  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1338 
  int emg_4_line;
  #line 1341 
  emg_4_line = (int)arg0;
  #line 1345 
  emg_dispatch_irq_deregister_4(emg_4_line);
  #line 1346 
  ;
  #line 1346 
  return (void *)0;
}

#line 1352  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 1355 
  struct net_device *emg_5_netdev;
  #line 1358 
  emg_5_netdev = arg0;
  #line 1359 
  ldv_free((void *)emg_5_netdev);
  #line 1362 
  return;
}

#line 1367  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1370 
  struct pci_driver *emg_6_pci_driver;
  #line 1372 
  emg_6_pci_driver = emg_alias_liquidio_vf_pci_driver;
  #line 1374 
  emg_6_pci_driver = arg0;
  #line 1378 
  emg_dispatch_deregister_6(emg_6_pci_driver);
  #line 1381 
  return;
}

#line 1386  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2)
{
  #line 1389 
  struct delayed_work *emg_7_delayed_work;
  #line 1390 
  struct work_struct *emg_7_emg_param_0_0;
  #line 1392 
  if (ldv_undef_int() != 0) {
    #line 1394 
    emg_7_delayed_work = arg1;
    #line 1398 
    emg_7_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 1398 
    emg_7_emg_param_0_0 = emg_7_emg_param_0_0;
    #line 1402 
    if (emg_7_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 1403 
      (*(emg_7_delayed_work->work.func))(emg_7_emg_param_0_0);
    #line 1408 
    ldv_free((void *)emg_7_emg_param_0_0);
    #line 1412 
    return (_Bool)1;
  }
  else 
       #line 1416 
       return (_Bool)0;
}

#line 1424  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 1427 
  struct work_struct *emg_8_work_struct;
  #line 1429 
  if (ldv_undef_int() != 0) {
    #line 1431 
    emg_8_work_struct = arg1;
    #line 1435 
    if (emg_8_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1436 
      (*(emg_8_work_struct->func))(emg_8_work_struct);
    #line 1441 
    return (_Bool)1;
  }
  else 
       #line 1445 
       return (_Bool)0;
}

#line 1453  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1456 
  struct net_device *emg_9_netdev;
  #line 1457 
  int emg_9_ret;
  #line 1460 
  emg_9_ret = ldv_undef_int();
  #line 1461 
  emg_9_ret = ldv_undef_int();
  #line 1462 
  if (ldv_undef_int() != 0) {
    #line 1464 
    emg_9_netdev = arg0;
    #line 1468 
    emg_9_ret = emg_wrapper_liquidio_open(emg_9_netdev);
    #line 1471 
    if (ldv_undef_int() != 0) {
      #line 1473 
      __VERIFIER_assume(emg_9_ret == 0);
      #line 1477 
      emg_dispatch_register_9(emg_9_netdev);
      #line 1481 
      return 0;
    }
    else {
      #line 1485 
      __VERIFIER_assume(emg_9_ret != 0);
      #line 1486 
      ldv_failed_register_netdev();
      #line 1487 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1492 
    ldv_failed_register_netdev();
    #line 1493 
    return ldv_undef_int_negative();
  }
}

#line 1501  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1504 
  enum irqreturn (*emg_10_callback)(int , void *);
  #line 1505 
  void *emg_10_data;
  #line 1506 
  int emg_10_line;
  #line 1507 
  enum irqreturn (*emg_10_thread)(int , void *);
  #line 1509 
  emg_10_callback = & emg_wrapper_liquidio_legacy_intr_handler;
  #line 1510 
  if (ldv_undef_int() != 0) {
    #line 1512 
    emg_10_line = (int)arg0;
    #line 1513 
    emg_10_callback = arg1;
    #line 1514 
    emg_10_thread = (enum irqreturn (*)(int , void *))0;
    #line 1515 
    emg_10_data = arg4;
    #line 1519 
    emg_dispatch_irq_register_10(emg_10_line,emg_10_callback,emg_10_thread,emg_10_data);
    #line 1523 
    return 0;
  }
  else {
    #line 1527 
    return ldv_undef_int_negative();
  }
}

#line 1535  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1)
{
  #line 1538 
  struct delayed_work *emg_11_delayed_work;
  #line 1539 
  struct work_struct *emg_11_emg_param_0_0;
  #line 1541 
  if (ldv_undef_int() != 0) {
    #line 1543 
    emg_11_delayed_work = arg0;
    #line 1547 
    emg_11_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 1547 
    emg_11_emg_param_0_0 = emg_11_emg_param_0_0;
    #line 1551 
    if (emg_11_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 1552 
      (*(emg_11_delayed_work->work.func))(emg_11_emg_param_0_0);
    #line 1557 
    ldv_free((void *)emg_11_emg_param_0_0);
    #line 1561 
    return (_Bool)1;
  }
  else 
       #line 1565 
       return (_Bool)0;
}

#line 1573  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_schedule(struct tasklet_struct *arg0)
{
  #line 1576 
  unsigned long emg_12_emg_param_0_0;
  #line 1577 
  struct tasklet_struct *emg_12_tasklet_struct;
  #line 1580 
  emg_12_tasklet_struct = arg0;
  #line 1584 
  if (emg_12_tasklet_struct->count.counter == 0) 
    #line 1585 
    if (emg_12_tasklet_struct->func != (void (*)(unsigned long ))0) 
                                                                    #line 1586 
                                                                    (*(emg_12_tasklet_struct->func))(emg_12_emg_param_0_0);
  #line 1591 
  return;
}

#line 1596  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1599 
  struct net_device *emg_13_netdev;
  #line 1602 
  emg_13_netdev = arg0;
  #line 1606 
  emg_wrapper_liquidio_stop(emg_13_netdev);
  #line 1610 
  emg_dispatch_deregister_13(emg_13_netdev);
  #line 1613 
  return;
}

#line 1618  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1621 
  int emg_1_ret;
  #line 1624 
  emg_1_ret = emg_liquidio_vf_init();
  #line 1625 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1628 
  if (ldv_undef_int() != 0) {
    #line 1630 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1634 
    emg_liquidio_vf_exit();
  }
  else 
       #line 1638 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1642 
  return (void *)0;
}

#line 1647  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/cavium/liquidio/liquidio_vf.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1649 
  ldv_initialize();
  #line 1651 
  emg_entry_point_insmod((void *)0);
  #line 1653 
  return 0;
}

