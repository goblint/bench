/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s8 int8_t;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s16 int16_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/rng.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
struct wait_queue_entry;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_entry {
   unsigned int flags ;
   void *private ;
   int (*func)(struct wait_queue_entry *, unsigned int , int , void *) ;
   struct list_head entry ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_142 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_142 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_143 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_143 kgid_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_152 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_152 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
struct __anonstruct_nodemask_t_205 {
   unsigned long bits[16U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
typedef struct __anonstruct_nodemask_t_205 nodemask_t;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 194 
struct ldt_struct;
#line 194 
struct vdso_image;
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct __anonstruct_mm_context_t_206 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
typedef struct __anonstruct_mm_context_t_206 mm_context_t;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
struct notifier_block;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 97 
struct inode;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_222 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_223 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_221 {
   struct __anonstruct_222 __anonCompField___anonunion_221_29 ;
   struct __anonstruct_223 __anonCompField___anonunion_221_30 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_221 __anonCompField_uprobe_task_31 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct address_space;
#line 141 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_225 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_226 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_229 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_228 {
   struct list_head slab_list ;
   struct __anonstruct_229 __anonCompField___anonunion_228_34 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_231 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_230 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_231 __anonCompField___anonunion_230_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_227 {
   union __anonunion_228 __anonCompField___anonstruct_227_35 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_230 __anonCompField___anonstruct_227_37 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_232 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_233 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_235 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_234 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_235 __anonCompField___anonstruct_234_41 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_236 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_224 {
   struct __anonstruct_225 __anonCompField___anonunion_224_32 ;
   struct __anonstruct_226 __anonCompField___anonunion_224_33 ;
   struct __anonstruct_227 __anonCompField___anonunion_224_38 ;
   struct __anonstruct_232 __anonCompField___anonunion_224_39 ;
   struct __anonstruct_233 __anonCompField___anonunion_224_40 ;
   struct __anonstruct_234 __anonCompField___anonunion_224_42 ;
   struct __anonstruct_236 __anonCompField___anonunion_224_43 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_237 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_224 __anonCompField_page_44 ;
   union __anonunion_237 __anonCompField_page_45 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278 
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_238 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_238 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_239 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_239 __anonCompField_mm_struct_46 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_252 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_252 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_253 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_254 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_255 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_256 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_259 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_260 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_258 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_259 _addr_bnd ;
   struct __anonstruct__addr_pkey_260 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_257 {
   void *_addr ;
   union __anonunion_258 __anonCompField___anonstruct__sigfault_257_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_261 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_262 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_253 _kill ;
   struct __anonstruct__timer_254 _timer ;
   struct __anonstruct__rt_255 _rt ;
   struct __anonstruct__sigchld_256 _sigchld ;
   struct __anonstruct__sigfault_257 _sigfault ;
   struct __anonstruct__sigpoll_261 _sigpoll ;
   struct __anonstruct__sigsys_262 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_267 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_267 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_272 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_272 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_274 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_274 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_387 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_386 {
   struct __anonstruct_387 __anonCompField___anonunion_386_53 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_386 __anonCompField_lockref_54 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_389 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_388 {
   struct __anonstruct_389 __anonCompField___anonunion_388_55 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_388 __anonCompField_qstr_56 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_390 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_391 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_390 __anonCompField_dentry_57 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_391 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_409 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_409 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_410 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_411 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_410 __anonCompField_io_cq_60 ;
   union __anonunion_411 __anonCompField_io_cq_61 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kobject;
#line 292 
struct poll_table_struct;
#line 293 
struct kstatfs;
#line 294 
struct swap_info_struct;
#line 295 
struct iov_iter;
#line 296 
struct fscrypt_info;
#line 297 
struct fscrypt_operations;
#line 298 
struct fsverity_info;
#line 299 
struct fsverity_operations;
#line 300 
struct fs_context;
#line 301 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_412 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_412 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_413 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_413 __anonCompField_kqid_62 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_415 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_414 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_415 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_414 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_418 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_419 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_420 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_421 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_418 __anonCompField_inode_63 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_419 __anonCompField_inode_64 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_420 __anonCompField_inode_65 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_421 __anonCompField_inode_66 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_422 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_422 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_424 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_423 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_424 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_423 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_438 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_440 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_439 {
   unsigned long nr_segs ;
   struct __anonstruct_440 __anonCompField___anonunion_439_68 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_438 __anonCompField_iov_iter_67 ;
   union __anonunion_439 __anonCompField_iov_iter_69 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_8949 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_8949 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_463 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_463 __anonCompField_kernfs_node_72 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_478 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_479 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_480 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_481 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_478 ports ;
   struct __anonstruct_icmpt_479 icmpt ;
   struct __anonstruct_dnports_480 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_481 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_482 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_482 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_528 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_528 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_529 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_530 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_530 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_531 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_531 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_532 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_532 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_533 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_533 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_534 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_534 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_535 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_535 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_536 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_537 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_536 ifr_ifrn ;
   union __anonunion_ifr_ifru_537 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_647 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_646 {
   struct __anonstruct_647 __anonCompField___anonunion_646_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_646 __anonCompField_sock_cgroup_data_152 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   int reg_state : 8 ;
   bool dismantle ;
   int rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
struct led_pattern;
#line 535 
enum led_brightness {
    LED_OFF = 0,
    LED_ON = 1,
    LED_HALF = 127,
    LED_FULL = 255
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/leds.h"
struct led_trigger;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/leds.h"
struct led_classdev {
   char *name ;
   enum led_brightness brightness ;
   enum led_brightness max_brightness ;
   int flags ;
   unsigned long work_flags ;
   void (*brightness_set)(struct led_classdev *, enum led_brightness ) ;
   int (*brightness_set_blocking)(struct led_classdev *, enum led_brightness ) ;
   enum led_brightness (*brightness_get)(struct led_classdev *) ;
   int (*blink_set)(struct led_classdev *, unsigned long *, unsigned long *) ;
   int (*pattern_set)(struct led_classdev *, struct led_pattern *, u32 , int ) ;
   int (*pattern_clear)(struct led_classdev *) ;
   struct device *dev ;
   struct attribute_group **groups ;
   struct list_head node ;
   char *default_trigger ;
   unsigned long blink_delay_on ;
   unsigned long blink_delay_off ;
   struct timer_list blink_timer ;
   int blink_brightness ;
   int new_blink_brightness ;
   void (*flash_resume)(struct led_classdev *) ;
   struct work_struct set_brightness_work ;
   int delayed_set_value ;
   struct rw_semaphore trigger_lock ;
   struct led_trigger *trigger ;
   struct list_head trig_list ;
   void *trigger_data ;
   bool activated ;
   int brightness_hw_changed ;
   struct kernfs_node *brightness_hw_changed_kn ;
   struct mutex led_access ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/leds.h"
struct led_trigger {
   char *name ;
   int (*activate)(struct led_classdev *) ;
   void (*deactivate)(struct led_classdev *) ;
   rwlock_t leddev_list_lock ;
   struct list_head led_cdevs ;
   struct list_head next_trig ;
   struct attribute_group **groups ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/leds.h"
struct led_pattern {
   u32 delta_t ;
   int brightness ;
};
#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_desc {
   u8 count ;
   __le32 duration ;
   __le32 interval ;
   __le32 start_time ;
} __attribute__((__packed__));
#line 1234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_attr {
   u8 index ;
   u8 oppps_ctwindow ;
   struct ieee80211_p2p_noa_desc desc[4U] ;
} __attribute__((__packed__));
#line 1276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_mcs_info {
   u8 rx_mask[10U] ;
   __le16 rx_highest ;
   u8 tx_params ;
   u8 reserved[3U] ;
} __attribute__((__packed__));
#line 1310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_ht_cap {
   __le16 cap_info ;
   u8 ampdu_params_info ;
   struct ieee80211_mcs_info mcs ;
   __le16 extended_ht_cap_info ;
   __le32 tx_BF_cap_info ;
   u8 antenna_selection_info ;
} __attribute__((__packed__));
#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_mcs_info {
   __le16 rx_mcs_map ;
   __le16 rx_highest ;
   __le16 tx_mcs_map ;
   __le16 tx_highest ;
} __attribute__((__packed__));
#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_cap {
   __le32 vht_cap_info ;
   struct ieee80211_vht_mcs_info supp_mcs ;
} __attribute__((__packed__));
#line 1569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_cap_elem {
   u8 mac_cap_info[6U] ;
   u8 phy_cap_info[11U] ;
} __attribute__((__packed__));
#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mcs_nss_supp {
   __le16 rx_mcs_80 ;
   __le16 tx_mcs_80 ;
   __le16 rx_mcs_160 ;
   __le16 tx_mcs_160 ;
   __le16 rx_mcs_80p80 ;
   __le16 tx_mcs_80p80 ;
} __attribute__((__packed__));
#line 1631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_operation {
   __le32 he_oper_params ;
   __le16 he_mcs_nss_set ;
   u8 optional[0U] ;
} __attribute__((__packed__));
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
enum nl80211_iftype {
    NL80211_IFTYPE_UNSPECIFIED = 0,
    NL80211_IFTYPE_ADHOC = 1,
    NL80211_IFTYPE_STATION = 2,
    NL80211_IFTYPE_AP = 3,
    NL80211_IFTYPE_AP_VLAN = 4,
    NL80211_IFTYPE_WDS = 5,
    NL80211_IFTYPE_MONITOR = 6,
    NL80211_IFTYPE_MESH_POINT = 7,
    NL80211_IFTYPE_P2P_CLIENT = 8,
    NL80211_IFTYPE_P2P_GO = 9,
    NL80211_IFTYPE_P2P_DEVICE = 10,
    NL80211_IFTYPE_OCB = 11,
    NL80211_IFTYPE_NAN = 12,
    NUM_NL80211_IFTYPES = 13,
    NL80211_IFTYPE_MAX = 12
};
#line 3263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
enum nl80211_reg_initiator {
    NL80211_REGDOM_SET_BY_CORE = 0,
    NL80211_REGDOM_SET_BY_USER = 1,
    NL80211_REGDOM_SET_BY_DRIVER = 2,
    NL80211_REGDOM_SET_BY_COUNTRY_IE = 3
};
#line 3320 
enum nl80211_dfs_regions {
    NL80211_DFS_UNSET = 0,
    NL80211_DFS_FCC = 1,
    NL80211_DFS_ETSI = 2,
    NL80211_DFS_JP = 3
};
#line 3327 
enum nl80211_user_reg_hint_type {
    NL80211_USER_REG_HINT_USER = 0,
    NL80211_USER_REG_HINT_CELL_BASE = 1,
    NL80211_USER_REG_HINT_INDOOR = 2
};
#line 3446 
enum nl80211_key_mode {
    NL80211_KEY_RX_TX = 0,
    NL80211_KEY_NO_TX = 1,
    NL80211_KEY_SET_TX = 2
};
#line 3452 
enum nl80211_chan_width {
    NL80211_CHAN_WIDTH_20_NOHT = 0,
    NL80211_CHAN_WIDTH_20 = 1,
    NL80211_CHAN_WIDTH_40 = 2,
    NL80211_CHAN_WIDTH_80 = 3,
    NL80211_CHAN_WIDTH_80P80 = 4,
    NL80211_CHAN_WIDTH_160 = 5,
    NL80211_CHAN_WIDTH_5 = 6,
    NL80211_CHAN_WIDTH_10 = 7
};
#line 3463 
enum nl80211_bss_scan_width {
    NL80211_BSS_CHAN_WIDTH_20 = 0,
    NL80211_BSS_CHAN_WIDTH_10 = 1,
    NL80211_BSS_CHAN_WIDTH_5 = 2
};
#line 3500 
enum nl80211_auth_type {
    NL80211_AUTHTYPE_OPEN_SYSTEM = 0,
    NL80211_AUTHTYPE_SHARED_KEY = 1,
    NL80211_AUTHTYPE_FT = 2,
    NL80211_AUTHTYPE_NETWORK_EAP = 3,
    NL80211_AUTHTYPE_SAE = 4,
    NL80211_AUTHTYPE_FILS_SK = 5,
    NL80211_AUTHTYPE_FILS_SK_PFS = 6,
    NL80211_AUTHTYPE_FILS_PK = 7,
    __NL80211_AUTHTYPE_NUM = 8,
    NL80211_AUTHTYPE_MAX = 7,
    NL80211_AUTHTYPE_AUTOMATIC = 8
};
#line 3521 
enum nl80211_mfp {
    NL80211_MFP_NO = 0,
    NL80211_MFP_REQUIRED = 1,
    NL80211_MFP_OPTIONAL = 2
};
#line 4599 
enum nl80211_band {
    NL80211_BAND_2GHZ = 0,
    NL80211_BAND_5GHZ = 1,
    NL80211_BAND_60GHZ = 2,
    NL80211_BAND_6GHZ = 3,
    NUM_NL80211_BANDS = 4
};
#line 4633 
enum nl80211_tx_power_setting {
    NL80211_TX_POWER_AUTOMATIC = 0,
    NL80211_TX_POWER_LIMITED = 1,
    NL80211_TX_POWER_FIXED = 2
};
#line 4914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_seq {
   __u32 start ;
   __u32 offset ;
   __u32 len ;
};
#line 4925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token {
   __u32 offset ;
   __u32 len ;
   __u8 token_stream[] ;
};
#line 4936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token_feature {
   __u32 min_len ;
   __u32 max_len ;
   __u32 bufsize ;
};
#line 5237 
enum nl80211_dfs_state {
    NL80211_DFS_USABLE = 0,
    NL80211_DFS_UNAVAILABLE = 1,
    NL80211_DFS_AVAILABLE = 2
};
#line 5847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_vendor_cmd_info {
   __u32 vendor_id ;
   __u32 subcmd ;
};
#line 5903 
enum nl80211_bss_select_attr {
    __NL80211_BSS_SELECT_ATTR_INVALID = 0,
    NL80211_BSS_SELECT_ATTR_RSSI = 1,
    NL80211_BSS_SELECT_ATTR_BAND_PREF = 2,
    NL80211_BSS_SELECT_ATTR_RSSI_ADJUST = 3,
    __NL80211_BSS_SELECT_ATTR_AFTER_LAST = 4,
    NL80211_BSS_SELECT_ATTR_MAX = 3
};
#line 6138 
enum environment_cap {
    ENVIRON_ANY = 0,
    ENVIRON_INDOOR = 1,
    ENVIRON_OUTDOOR = 2
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct regulatory_request {
   struct callback_head callback_head ;
   int wiphy_idx ;
   enum nl80211_reg_initiator initiator ;
   enum nl80211_user_reg_hint_type user_reg_hint_type ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   bool intersect ;
   bool processed ;
   enum environment_cap country_ie_env ;
   struct list_head list ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_freq_range {
   u32 start_freq_khz ;
   u32 end_freq_khz ;
   u32 max_bandwidth_khz ;
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_power_rule {
   u32 max_antenna_gain ;
   u32 max_eirp ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_ac {
   u16 cw_min ;
   u16 cw_max ;
   u16 cot ;
   u8 aifsn ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_rule {
   struct ieee80211_wmm_ac client[4U] ;
   struct ieee80211_wmm_ac ap[4U] ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_reg_rule {
   struct ieee80211_freq_range freq_range ;
   struct ieee80211_power_rule power_rule ;
   struct ieee80211_wmm_rule wmm_rule ;
   u32 flags ;
   u32 dfs_cac_ms ;
   bool has_wmm ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_regdomain {
   struct callback_head callback_head ;
   u32 n_reg_rules ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   struct ieee80211_reg_rule reg_rules[] ;
};
#line 233 
struct wiphy;
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_channel {
   enum nl80211_band band ;
   u32 center_freq ;
   u16 hw_value ;
   u32 flags ;
   int max_antenna_gain ;
   int max_power ;
   int max_reg_power ;
   bool beacon_found ;
   u32 orig_flags ;
   int orig_mag ;
   int orig_mpwr ;
   enum nl80211_dfs_state dfs_state ;
   unsigned long dfs_state_entered ;
   unsigned int dfs_cac_ms ;
};
#line 172 
enum ieee80211_bss_type {
    IEEE80211_BSS_TYPE_ESS = 0,
    IEEE80211_BSS_TYPE_PBSS = 1,
    IEEE80211_BSS_TYPE_IBSS = 2,
    IEEE80211_BSS_TYPE_MBSS = 3,
    IEEE80211_BSS_TYPE_ANY = 4
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_rate {
   u32 flags ;
   u16 bitrate ;
   u16 hw_value ;
   u16 hw_value_short ;
};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_he_obss_pd {
   bool enable ;
   u8 min_offset ;
   u8 max_offset ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_ht_cap {
   u16 cap ;
   bool ht_supported ;
   u8 ampdu_factor ;
   u8 ampdu_density ;
   struct ieee80211_mcs_info mcs ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_vht_cap {
   bool vht_supported ;
   u32 cap ;
   struct ieee80211_vht_mcs_info vht_mcs ;
};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_he_cap {
   bool has_he ;
   struct ieee80211_he_cap_elem he_cap_elem ;
   struct ieee80211_he_mcs_nss_supp he_mcs_nss_supp ;
   u8 ppe_thres[25U] ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sband_iftype_data {
   u16 types_mask ;
   struct ieee80211_sta_he_cap he_cap ;
};
#line 332 
enum ieee80211_edmg_bw_config {
    IEEE80211_EDMG_BW_CONFIG_4 = 4,
    IEEE80211_EDMG_BW_CONFIG_5 = 5,
    IEEE80211_EDMG_BW_CONFIG_6 = 6,
    IEEE80211_EDMG_BW_CONFIG_7 = 7,
    IEEE80211_EDMG_BW_CONFIG_8 = 8,
    IEEE80211_EDMG_BW_CONFIG_9 = 9,
    IEEE80211_EDMG_BW_CONFIG_10 = 10,
    IEEE80211_EDMG_BW_CONFIG_11 = 11,
    IEEE80211_EDMG_BW_CONFIG_12 = 12,
    IEEE80211_EDMG_BW_CONFIG_13 = 13,
    IEEE80211_EDMG_BW_CONFIG_14 = 14,
    IEEE80211_EDMG_BW_CONFIG_15 = 15
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_edmg {
   u8 channels ;
   enum ieee80211_edmg_bw_config bw_config ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_supported_band {
   struct ieee80211_channel *channels ;
   struct ieee80211_rate *bitrates ;
   enum nl80211_band band ;
   int n_channels ;
   int n_bitrates ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_edmg edmg_cap ;
   u16 n_iftype_data ;
   struct ieee80211_sband_iftype_data *iftype_data ;
};
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct key_params {
   u8 *key ;
   u8 *seq ;
   int key_len ;
   int seq_len ;
   u16 vlan_id ;
   u32 cipher ;
   enum nl80211_key_mode mode ;
};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_chan_def {
   struct ieee80211_channel *chan ;
   enum nl80211_chan_width width ;
   u32 center_freq1 ;
   u32 center_freq2 ;
   struct ieee80211_edmg edmg ;
};
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct survey_info {
   struct ieee80211_channel *channel ;
   u64 time ;
   u64 time_busy ;
   u64 time_ext_busy ;
   u64 time_rx ;
   u64 time_tx ;
   u64 time_scan ;
   u64 time_bss_rx ;
   u32 filled ;
   s8 noise ;
};
#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_crypto_settings {
   u32 wpa_versions ;
   u32 cipher_group ;
   int n_ciphers_pairwise ;
   u32 ciphers_pairwise[5U] ;
   int n_akm_suites ;
   u32 akm_suites[2U] ;
   bool control_port ;
   __be16 control_port_ethertype ;
   bool control_port_no_encrypt ;
   bool control_port_over_nl80211 ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
   u8 *psk ;
   u8 *sae_pwd ;
   u8 sae_pwd_len ;
};
#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct mac_address {
   u8 addr[6U] ;
};
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ssid {
   u8 ssid[32U] ;
   u8 ssid_len ;
};
#line 1899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_scan_info {
   u64 scan_start_tsf ;
   u8 tsf_bssid[6U] ;
   bool aborted ;
};
#line 1934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_scan_request {
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u16 duration ;
   bool duration_mandatory ;
   u32 flags ;
   u32 rates[4U] ;
   struct wireless_dev *wdev ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   u8 bssid[6U] ;
   struct wiphy *wiphy ;
   unsigned long scan_start ;
   struct cfg80211_scan_info info ;
   bool notified ;
   bool no_cck ;
   struct ieee80211_channel *channels[0U] ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_match_set {
   struct cfg80211_ssid ssid ;
   u8 bssid[6U] ;
   s32 rssi_thold ;
   s32 per_band_rssi_thold[4U] ;
};
#line 2007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_plan {
   u32 interval ;
   u32 iterations ;
};
#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_select_adjust {
   enum nl80211_band band ;
   s8 delta ;
};
#line 2073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_request {
   u64 reqid ;
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u32 flags ;
   struct cfg80211_match_set *match_sets ;
   int n_match_sets ;
   s32 min_rssi_thold ;
   u32 delay ;
   struct cfg80211_sched_scan_plan *scan_plans ;
   int n_scan_plans ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   bool relative_rssi_set ;
   s8 relative_rssi ;
   struct cfg80211_bss_select_adjust rssi_adjust ;
   struct wiphy *wiphy ;
   struct net_device *dev ;
   unsigned long scan_start ;
   bool report_results ;
   struct callback_head callback_head ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   struct list_head list ;
   struct ieee80211_channel *channels[0U] ;
};
#line 2109 
enum cfg80211_signal_type {
    CFG80211_SIGNAL_TYPE_NONE = 0,
    CFG80211_SIGNAL_TYPE_MBM = 1,
    CFG80211_SIGNAL_TYPE_UNSPEC = 2
};
#line 2432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ibss_params {
   u8 *ssid ;
   u8 *bssid ;
   struct cfg80211_chan_def chandef ;
   u8 *ie ;
   u8 ssid_len ;
   u8 ie_len ;
   u16 beacon_interval ;
   u32 basic_rates ;
   bool channel_fixed ;
   bool privacy ;
   bool control_port ;
   bool control_port_over_nl80211 ;
   bool userspace_handles_dfs ;
   int mcast_rate[4U] ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
union __anonunion_param_733 {
   enum nl80211_band band_pref ;
   struct cfg80211_bss_select_adjust adjust ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_selection {
   enum nl80211_bss_select_attr behaviour ;
   union __anonunion_param_733 param ;
};
#line 2531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_connect_params {
   struct ieee80211_channel *channel ;
   struct ieee80211_channel *channel_hint ;
   u8 *bssid ;
   u8 *bssid_hint ;
   u8 *ssid ;
   size_t ssid_len ;
   enum nl80211_auth_type auth_type ;
   u8 *ie ;
   size_t ie_len ;
   bool privacy ;
   enum nl80211_mfp mfp ;
   struct cfg80211_crypto_settings crypto ;
   u8 *key ;
   u8 key_len ;
   u8 key_idx ;
   u32 flags ;
   int bg_scan_period ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct ieee80211_vht_cap vht_capa ;
   struct ieee80211_vht_cap vht_capa_mask ;
   bool pbss ;
   struct cfg80211_bss_selection bss_select ;
   u8 *prev_bssid ;
   u8 *fils_erp_username ;
   size_t fils_erp_username_len ;
   u8 *fils_erp_realm ;
   size_t fils_erp_realm_len ;
   u16 fils_erp_next_seq_num ;
   u8 *fils_erp_rrk ;
   size_t fils_erp_rrk_len ;
   bool want_1x ;
   struct ieee80211_edmg edmg ;
};
#line 2656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pkt_pattern {
   u8 *mask ;
   u8 *pattern ;
   int pattern_len ;
   int pkt_offset ;
};
#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan_tcp {
   struct socket *sock ;
   __be32 src ;
   __be32 dst ;
   u16 src_port ;
   u16 dst_port ;
   u8 dst_mac[6U] ;
   int payload_len ;
   u8 *payload ;
   struct nl80211_wowlan_tcp_data_seq payload_seq ;
   u32 data_interval ;
   u32 wake_len ;
   u8 *wake_data ;
   u8 *wake_mask ;
   u32 tokens_size ;
   struct nl80211_wowlan_tcp_data_token payload_tok ;
};
#line 2715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan {
   bool any ;
   bool disconnect ;
   bool magic_pkt ;
   bool gtk_rekey_failure ;
   bool eap_identity_req ;
   bool four_way_handshake ;
   bool rfkill_release ;
   struct cfg80211_pkt_pattern *patterns ;
   struct cfg80211_wowlan_tcp *tcp ;
   int n_patterns ;
   struct cfg80211_sched_scan_request *nd_config ;
};
#line 4043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_limit {
   u16 max ;
   u16 types ;
};
#line 4107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_combination {
   struct ieee80211_iface_limit *limits ;
   u32 num_different_channels ;
   u16 max_interfaces ;
   u8 n_limits ;
   bool beacon_int_infra_match ;
   u8 radar_detect_widths ;
   u8 radar_detect_regions ;
   u32 beacon_int_min_gcd ;
};
#line 4165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_txrx_stypes {
   u16 tx ;
   u16 rx ;
};
#line 4198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_tcp_support {
   struct nl80211_wowlan_tcp_data_token_feature *tok ;
   u32 data_payload_max ;
   u32 data_interval_max ;
   u32 wake_payload_max ;
   bool seq ;
};
#line 4221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_support {
   u32 flags ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
   int max_nd_match_sets ;
   struct wiphy_wowlan_tcp_support *tcp ;
};
#line 4241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_coalesce_support {
   int n_rules ;
   int max_delay ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
};
#line 4312 
struct nla_policy;
#line 4312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_vendor_command {
   struct nl80211_vendor_cmd_info info ;
   u32 flags ;
   int (*doit)(struct wiphy *, struct wireless_dev *, void *, int ) ;
   int (*dumpit)(struct wiphy *, struct wireless_dev *, struct sk_buff *, void *, int , unsigned long *) ;
   struct nla_policy *policy ;
   unsigned int maxattr ;
};
#line 4335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_iftype_ext_capab {
   enum nl80211_iftype iftype ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_ftm_735 {
   u32 preambles ;
   u32 bandwidths ;
   s8 max_bursts_exponent ;
   u8 max_ftms_per_burst ;
   u8 supported : 1 ;
   u8 asap : 1 ;
   u8 non_asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_capabilities {
   unsigned int max_peers ;
   u8 report_ap_tsf : 1 ;
   u8 randomize_mac_addr : 1 ;
   struct __anonstruct_ftm_735 ftm ;
};
#line 4552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy {
   u8 perm_addr[6U] ;
   u8 addr_mask[6U] ;
   struct mac_address *addresses ;
   struct ieee80211_txrx_stypes *mgmt_stypes ;
   struct ieee80211_iface_combination *iface_combinations ;
   int n_iface_combinations ;
   u16 software_iftypes ;
   u16 n_addresses ;
   u16 interface_modes ;
   u16 max_acl_mac_addrs ;
   u32 flags ;
   u32 regulatory_flags ;
   u32 features ;
   u8 ext_features[6U] ;
   u32 ap_sme_capa ;
   enum cfg80211_signal_type signal_type ;
   int bss_priv_size ;
   u8 max_scan_ssids ;
   u8 max_sched_scan_reqs ;
   u8 max_sched_scan_ssids ;
   u8 max_match_sets ;
   u16 max_scan_ie_len ;
   u16 max_sched_scan_ie_len ;
   u32 max_sched_scan_plans ;
   u32 max_sched_scan_plan_interval ;
   u32 max_sched_scan_plan_iterations ;
   int n_cipher_suites ;
   u32 *cipher_suites ;
   int n_akm_suites ;
   u32 *akm_suites ;
   u8 retry_short ;
   u8 retry_long ;
   u32 frag_threshold ;
   u32 rts_threshold ;
   u8 coverage_class ;
   char fw_version[32U] ;
   u32 hw_version ;
   struct wiphy_wowlan_support *wowlan ;
   struct cfg80211_wowlan *wowlan_config ;
   u16 max_remain_on_channel_duration ;
   u8 max_num_pmkids ;
   u32 available_antennas_tx ;
   u32 available_antennas_rx ;
   u32 probe_resp_offload ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
   struct wiphy_iftype_ext_capab *iftype_ext_capab ;
   unsigned int num_iftype_ext_capab ;
   void *privid ;
   struct ieee80211_supported_band *bands[4U] ;
   void (*reg_notifier)(struct wiphy *, struct regulatory_request *) ;
   struct ieee80211_regdomain *regd ;
   struct device dev ;
   bool registered ;
   struct dentry *debugfsdir ;
   struct ieee80211_ht_cap *ht_capa_mod_mask ;
   struct ieee80211_vht_cap *vht_capa_mod_mask ;
   struct list_head wdev_list ;
   possible_net_t _net ;
   struct iw_handler_def *wext ;
   struct wiphy_coalesce_support *coalesce ;
   struct wiphy_vendor_command *vendor_commands ;
   struct nl80211_vendor_cmd_info *vendor_events ;
   int n_vendor_commands ;
   int n_vendor_events ;
   u16 max_ap_assoc_sta ;
   u8 max_num_csa_counters ;
   u8 max_adj_channel_rssi_comp ;
   u32 bss_select_support ;
   u8 nan_supported_bands ;
   u32 txq_limit ;
   u32 txq_memory_limit ;
   u32 txq_quantum ;
   u8 support_mbssid : 1 ;
   u8 support_only_he_mbssid : 1 ;
   struct cfg80211_pmsr_capabilities *pmsr_capa ;
   char priv[0U] ;
};
#line 4826 
struct cfg80211_conn;
#line 4827 
struct cfg80211_internal_bss;
#line 4828 
struct cfg80211_cached_keys;
#line 4829 
struct cfg80211_cqm_config;
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_wext_736 {
   struct cfg80211_ibss_params ibss ;
   struct cfg80211_connect_params connect ;
   struct cfg80211_cached_keys *keys ;
   u8 *ie ;
   size_t ie_len ;
   u8 bssid[6U] ;
   u8 prev_bssid[6U] ;
   u8 ssid[32U] ;
   s8 default_key ;
   s8 default_mgmt_key ;
   bool prev_bssid_valid ;
};
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wireless_dev {
   struct wiphy *wiphy ;
   enum nl80211_iftype iftype ;
   struct list_head list ;
   struct net_device *netdev ;
   u32 identifier ;
   struct list_head mgmt_registrations ;
   spinlock_t mgmt_registrations_lock ;
   struct mutex mtx ;
   bool use_4addr ;
   bool is_running ;
   u8 address[6U] ;
   u8 ssid[32U] ;
   u8 ssid_len ;
   u8 mesh_id_len ;
   u8 mesh_id_up_len ;
   struct cfg80211_conn *conn ;
   struct cfg80211_cached_keys *connect_keys ;
   enum ieee80211_bss_type conn_bss_type ;
   u32 conn_owner_nlportid ;
   struct work_struct disconnect_wk ;
   u8 disconnect_bssid[6U] ;
   struct list_head event_list ;
   spinlock_t event_lock ;
   struct cfg80211_internal_bss *current_bss ;
   struct cfg80211_chan_def preset_chandef ;
   struct cfg80211_chan_def chandef ;
   bool ibss_fixed ;
   bool ibss_dfs_possible ;
   bool ps ;
   int ps_timeout ;
   int beacon_interval ;
   u32 ap_unexpected_nlportid ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   bool cac_started ;
   unsigned long cac_start_time ;
   unsigned int cac_time_ms ;
   struct __anonstruct_wext_736 wext ;
   struct cfg80211_cqm_config *cqm_config ;
   struct list_head pmsr_list ;
   spinlock_t pmsr_lock ;
   struct work_struct pmsr_free_wk ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_744 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_743 {
   void *validation_data ;
   struct __anonstruct_744 __anonCompField___anonunion_743_162 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_743 __anonCompField_nla_policy_163 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_818 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_819 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_817 {
   struct __anonstruct_818 __anonCompField___anonunion_817_165 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_819 __anonCompField___anonunion_817_166 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_817 __anonCompField_tcf_result_167 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_821 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_821 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_834 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_834 __anonCompField_bdi_writeback_169 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_835 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_835 __anonCompField_bio_170 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_838 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_839 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_841 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_842 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_840 {
   struct __anonstruct_elv_841 elv ;
   struct __anonstruct_flush_842 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_843 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_838 __anonCompField_request_171 ;
   union __anonunion_839 __anonCompField_request_172 ;
   union __anonunion_840 __anonCompField_request_173 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_843 __anonCompField_request_174 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_862 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_862 __anonCompField_kernel_param_175 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_863 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_863 __anonCompField_bpf_prog_176 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_885 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_885 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_887 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_886 {
   __addrpair skc_addrpair ;
   struct __anonstruct_887 __anonCompField___anonunion_886_178 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_888 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_890 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_889 {
   __portpair skc_portpair ;
   struct __anonstruct_890 __anonCompField___anonunion_889_181 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_891 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_892 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_893 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_894 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_895 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_886 __anonCompField_sock_common_179 ;
   union __anonunion_888 __anonCompField_sock_common_180 ;
   union __anonunion_889 __anonCompField_sock_common_182 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_891 __anonCompField_sock_common_183 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_892 __anonCompField_sock_common_184 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_893 __anonCompField_sock_common_185 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_894 __anonCompField_sock_common_186 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_895 __anonCompField_sock_common_187 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_896 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_897 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_898 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_896 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_897 __anonCompField_sock_188 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_898 __anonCompField_sock_189 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_933 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_933 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_chanctx_conf {
   struct cfg80211_chan_def def ;
   struct cfg80211_chan_def min_def ;
   u8 rx_chains_static ;
   u8 rx_chains_dynamic ;
   bool radar_enabled ;
   u8 drv_priv[0U] ;
};
#line 267 
struct ieee80211_vif;
#line 440 
struct ieee80211_sta;
#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_mu_group_data {
   u8 membership[8U] ;
   u8 position[16U] ;
};
#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ftm_responder_params {
   u8 *lci ;
   u8 *civicloc ;
   size_t lci_len ;
   size_t civicloc_len ;
};
#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_bss_conf {
   u8 *bssid ;
   u8 bss_color ;
   u8 htc_trig_based_pkt_ext ;
   bool multi_sta_back_32bit ;
   bool uora_exists ;
   bool ack_enabled ;
   u8 uora_ocw_range ;
   u16 frame_time_rts_th ;
   bool he_support ;
   bool twt_requester ;
   bool twt_responder ;
   bool assoc ;
   bool ibss_joined ;
   bool ibss_creator ;
   u16 aid ;
   bool use_cts_prot ;
   bool use_short_preamble ;
   bool use_short_slot ;
   bool enable_beacon ;
   u8 dtim_period ;
   u16 beacon_int ;
   u16 assoc_capability ;
   u64 sync_tsf ;
   u32 sync_device_ts ;
   u8 sync_dtim_count ;
   u32 basic_rates ;
   struct ieee80211_rate *beacon_rate ;
   int mcast_rate[4U] ;
   u16 ht_operation_mode ;
   s32 cqm_rssi_thold ;
   u32 cqm_rssi_hyst ;
   s32 cqm_rssi_low ;
   s32 cqm_rssi_high ;
   struct cfg80211_chan_def chandef ;
   struct ieee80211_mu_group_data mu_group ;
   __be32 arp_addr_list[4U] ;
   int arp_addr_cnt ;
   bool qos ;
   bool idle ;
   bool ps ;
   u8 ssid[32U] ;
   size_t ssid_len ;
   bool hidden_ssid ;
   int txpower ;
   enum nl80211_tx_power_setting txpower_type ;
   struct ieee80211_p2p_noa_attr p2p_noa_attr ;
   bool allow_p2p_go_ps ;
   u16 max_idle_period ;
   bool protected_keep_alive ;
   bool ftm_responder ;
   struct ieee80211_ftm_responder_params *ftmr_params ;
   bool nontransmitted ;
   u8 transmitter_bssid[6U] ;
   u8 bssid_index ;
   u8 bssid_indicator ;
   bool ema_ap ;
   u8 profile_periodicity ;
   struct ieee80211_he_operation he_operation ;
   struct ieee80211_he_obss_pd he_obss_pd ;
};
#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_rate {
   s8 idx ;
   u16 count : 5 ;
   u16 flags : 11 ;
} __attribute__((__packed__));
#line 1430 
enum ieee80211_smps_mode {
    IEEE80211_SMPS_AUTOMATIC = 0,
    IEEE80211_SMPS_OFF = 1,
    IEEE80211_SMPS_STATIC = 2,
    IEEE80211_SMPS_DYNAMIC = 3,
    IEEE80211_SMPS_NUM_MODES = 4
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_conf {
   u32 flags ;
   int power_level ;
   int dynamic_ps_timeout ;
   u16 listen_interval ;
   u8 ps_dtim_period ;
   u8 long_frame_max_tx_count ;
   u8 short_frame_max_tx_count ;
   struct cfg80211_chan_def chandef ;
   bool radar_enabled ;
   enum ieee80211_smps_mode smps_mode ;
};
#line 1627 
struct ieee80211_txq;
#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_vif {
   enum nl80211_iftype type ;
   struct ieee80211_bss_conf bss_conf ;
   u8 addr[6U] ;
   bool p2p ;
   bool csa_active ;
   bool mu_mimo_owner ;
   u8 cab_queue ;
   u8 hw_queue[4U] ;
   struct ieee80211_txq *txq ;
   struct ieee80211_chanctx_conf *chanctx_conf ;
   u32 driver_flags ;
   struct dentry *debugfs_dir ;
   unsigned int probe_req_reg ;
   bool txqs_stopped[4U] ;
   u8 drv_priv[0U] ;
};
#line 1846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_cipher_scheme {
   u32 cipher ;
   u16 iftype ;
   u8 hdr_len ;
   u8 pn_len ;
   u8 pn_off ;
   u8 key_idx_off ;
   u8 key_idx_mask ;
   u8 key_idx_shift ;
   u8 mic_len ;
};
#line 1870 
enum ieee80211_sta_rx_bandwidth {
    IEEE80211_STA_RX_BW_20 = 0,
    IEEE80211_STA_RX_BW_40 = 1,
    IEEE80211_STA_RX_BW_80 = 2,
    IEEE80211_STA_RX_BW_160 = 3
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_rate_1020 {
   s8 idx ;
   u8 count ;
   u8 count_cts ;
   u8 count_rts ;
   u16 flags ;
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_rates {
   struct callback_head callback_head ;
   struct __anonstruct_rate_1020 rate[4U] ;
};
#line 1939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_txpwr {
   s16 power ;
   enum nl80211_tx_power_setting type ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta {
   u32 supp_rates[4U] ;
   u8 addr[6U] ;
   u16 aid ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_sta_he_cap he_cap ;
   u16 max_rx_aggregation_subframes ;
   bool wme ;
   u8 uapsd_queues ;
   u8 max_sp ;
   u8 rx_nss ;
   enum ieee80211_sta_rx_bandwidth bandwidth ;
   enum ieee80211_smps_mode smps_mode ;
   struct ieee80211_sta_rates *rates ;
   bool tdls ;
   bool tdls_initiator ;
   bool mfp ;
   u8 max_amsdu_subframes ;
   u16 max_amsdu_len ;
   bool support_p2p_ps ;
   u16 max_rc_amsdu_len ;
   u16 max_tid_amsdu_len[16U] ;
   struct ieee80211_sta_txpwr txpwr ;
   struct ieee80211_txq *txq[17U] ;
   u8 drv_priv[0U] ;
};
#line 2074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_txq {
   struct ieee80211_vif *vif ;
   struct ieee80211_sta *sta ;
   u8 tid ;
   u8 ac ;
   u8 drv_priv[0U] ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_radiotap_timestamp_1021 {
   int units_pos ;
   s16 accuracy ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_hw {
   struct ieee80211_conf conf ;
   struct wiphy *wiphy ;
   char *rate_control_algorithm ;
   void *priv ;
   unsigned long flags[1U] ;
   unsigned int extra_tx_headroom ;
   unsigned int extra_beacon_tailroom ;
   int vif_data_size ;
   int sta_data_size ;
   int chanctx_data_size ;
   int txq_data_size ;
   u16 queues ;
   u16 max_listen_interval ;
   s8 max_signal ;
   u8 max_rates ;
   u8 max_report_rates ;
   u8 max_rate_tries ;
   u16 max_rx_aggregation_subframes ;
   u16 max_tx_aggregation_subframes ;
   u8 max_tx_fragments ;
   u8 offchannel_tx_hw_queue ;
   u8 radiotap_mcs_details ;
   u16 radiotap_vht_details ;
   struct __anonstruct_radiotap_timestamp_1021 radiotap_timestamp ;
   netdev_features_t netdev_features ;
   u8 uapsd_queues ;
   u8 uapsd_max_sp_len ;
   u8 n_cipher_schemes ;
   struct ieee80211_cipher_scheme *cipher_schemes ;
   u8 max_nan_de_entries ;
   u8 tx_sk_pacing_shift ;
   u8 weight_multiplier ;
   u32 max_mtu ;
};
#line 6185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_desc_1022 {
   u32 start ;
   u32 duration ;
   u32 interval ;
};
#line 6185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_noa_data {
   u32 next_tsf ;
   bool has_next_tsf ;
   u8 absent ;
   u8 count[4U] ;
   struct __anonstruct_desc_1022 desc[4U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
struct ath_ani {
   bool caldone ;
   unsigned int longcal_timer ;
   unsigned int shortcal_timer ;
   unsigned int resetcal_timer ;
   unsigned int checkani_timer ;
   struct timer_list timer ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
struct ath_cycle_counters {
   u32 cycles ;
   u32 rx_busy ;
   u32 rx_frame ;
   u32 tx_frame ;
};
#line 51 
enum ath_device_state {
    ATH_HW_UNAVAILABLE = 0,
    ATH_HW_INITIALIZED = 1
};
#line 67 
enum ath_bus_type {
    ATH_PCI = 0,
    ATH_AHB = 1,
    ATH_USB = 2
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
struct reg_dmn_pair_mapping {
   u16 reg_domain ;
   u16 reg_5ghz_ctl ;
   u16 reg_2ghz_ctl ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
struct ath_regulatory {
   char alpha2[2U] ;
   enum nl80211_dfs_regions region ;
   u16 country_code ;
   u16 max_power_level ;
   u16 current_rd ;
   int16_t power_limit ;
   struct reg_dmn_pair_mapping *regpair ;
};
#line 89 
enum ath_crypt_caps {
    ATH_CRYPT_CAP_CIPHER_AESCCM = 1,
    ATH_CRYPT_CAP_MIC_COMBINED = 2
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
struct ath_ops {
   unsigned int (*read)(void *, u32 ) ;
   void (*multi_read)(void *, u32 *, u32 *, u16 ) ;
   void (*write)(void *, u32 , u32 ) ;
   void (*enable_write_buffer)(void *) ;
   void (*write_flush)(void *) ;
   u32 (*rmw)(void *, u32 , u32 , u32 ) ;
   void (*enable_rmw_buffer)(void *) ;
   void (*rmw_flush)(void *) ;
};
#line 135 
struct ath_common;
#line 136 
struct ath_bus_ops;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
struct ath_ps_ops {
   void (*wakeup)(struct ath_common *) ;
   void (*restore)(struct ath_common *) ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
struct ath_common {
   void *ah ;
   void *priv ;
   struct ieee80211_hw *hw ;
   int debug_mask ;
   enum ath_device_state state ;
   unsigned long op_flags ;
   struct ath_ani ani ;
   u16 cachelsz ;
   u16 curaid ;
   u8 macaddr[6U] ;
   u8 curbssid[6U] ;
   u8 bssidmask[6U] ;
   u32 rx_bufsize ;
   u32 keymax ;
   unsigned long keymap[2U] ;
   unsigned long tkip_keymap[2U] ;
   unsigned long ccmp_keymap[2U] ;
   enum ath_crypt_caps crypt_caps ;
   unsigned int clockrate ;
   spinlock_t cc_lock ;
   struct ath_cycle_counters cc_ani ;
   struct ath_cycle_counters cc_survey ;
   struct ath_regulatory regulatory ;
   struct ath_regulatory reg_world_copy ;
   struct ath_ops *ops ;
   struct ath_bus_ops *bus_ops ;
   struct ath_ps_ops *ps_ops ;
   bool btcoex_enabled ;
   bool disable_ani ;
   bool bt_ant_diversity ;
   int last_rssi ;
   struct ieee80211_supported_band sbands[4U] ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
struct ath_tx_status {
   u32 ts_tstamp ;
   u16 ts_seqnum ;
   u8 ts_status ;
   u8 ts_rateindex ;
   int8_t ts_rssi ;
   u8 ts_shortretry ;
   u8 ts_longretry ;
   u8 ts_virtcol ;
   u8 ts_flags ;
   int8_t ts_rssi_ctl0 ;
   int8_t ts_rssi_ctl1 ;
   int8_t ts_rssi_ctl2 ;
   int8_t ts_rssi_ext0 ;
   int8_t ts_rssi_ext1 ;
   int8_t ts_rssi_ext2 ;
   u8 qid ;
   u16 desc_id ;
   u8 tid ;
   u32 ba_low ;
   u32 ba_high ;
   u32 evm0 ;
   u32 evm1 ;
   u32 evm2 ;
   u32 duration ;
};
#line 313 
enum ath9k_tx_queue {
    ATH9K_TX_QUEUE_INACTIVE = 0,
    ATH9K_TX_QUEUE_DATA = 1,
    ATH9K_TX_QUEUE_BEACON = 2,
    ATH9K_TX_QUEUE_CAB = 3,
    ATH9K_TX_QUEUE_UAPSD = 4,
    ATH9K_TX_QUEUE_PSPOLL = 5
};
#line 322 
enum ath9k_tx_queue_flags {
    TXQ_FLAG_TXINT_ENABLE = 1,
    TXQ_FLAG_TXDESCINT_ENABLE = 2,
    TXQ_FLAG_TXEOLINT_ENABLE = 4,
    TXQ_FLAG_TXURNINT_ENABLE = 8,
    TXQ_FLAG_BACKOFF_DISABLE = 16,
    TXQ_FLAG_COMPRESSION_ENABLE = 32,
    TXQ_FLAG_RDYTIME_EXP_POLICY_ENABLE = 64,
    TXQ_FLAG_FRAG_BURST_BACKOFF_ENABLE = 128
};
#line 333 
enum ath9k_pkt_type {
    ATH9K_PKT_TYPE_NORMAL = 0,
    ATH9K_PKT_TYPE_ATIM = 1,
    ATH9K_PKT_TYPE_PSPOLL = 2,
    ATH9K_PKT_TYPE_BEACON = 3,
    ATH9K_PKT_TYPE_PROBE_RESP = 4,
    ATH9K_PKT_TYPE_CHIRP = 5,
    ATH9K_PKT_TYPE_GRP_POLL = 6
};
#line 619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
struct ath9k_tx_queue_info {
   u32 tqi_ver ;
   enum ath9k_tx_queue tqi_type ;
   int tqi_subtype ;
   enum ath9k_tx_queue_flags tqi_qflags ;
   u32 tqi_priority ;
   u32 tqi_aifs ;
   u32 tqi_cwmin ;
   u32 tqi_cwmax ;
   u16 tqi_shretry ;
   u16 tqi_lgretry ;
   u32 tqi_cbrPeriod ;
   u32 tqi_cbrOverflowLimit ;
   u32 tqi_burstTime ;
   u32 tqi_readyTime ;
   u32 tqi_physCompBuf ;
   u32 tqi_intFlags ;
};
#line 663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
struct ath9k_11n_rate_series {
   u32 Tries ;
   u32 Rate ;
   u32 PktDuration ;
   u32 ChSel ;
   u32 RateFlags ;
};
#line 670 
enum aggr_type {
    AGGR_BUF_NONE = 0,
    AGGR_BUF_FIRST = 1,
    AGGR_BUF_MIDDLE = 2,
    AGGR_BUF_LAST = 3
};
#line 677 
enum ath9k_key_type {
    ATH9K_KEY_TYPE_CLEAR = 0,
    ATH9K_KEY_TYPE_WEP = 1,
    ATH9K_KEY_TYPE_AES = 2,
    ATH9K_KEY_TYPE_TKIP = 3
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
struct ath_tx_info {
   u8 qcu ;
   bool is_first ;
   bool is_last ;
   enum aggr_type aggr ;
   u8 ndelim ;
   u16 aggr_len ;
   dma_addr_t link ;
   int pkt_len ;
   u32 flags ;
   dma_addr_t buf_addr[4U] ;
   int buf_len[4U] ;
   struct ath9k_11n_rate_series rates[4U] ;
   u8 rtscts_rate ;
   bool dur_update ;
   enum ath9k_pkt_type type ;
   enum ath9k_key_type keytype ;
   u8 keyix ;
   u8 txpower[4U] ;
};
#line 711 
struct ath_hw;
#line 712 
struct ath9k_channel;
#line 713 
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 752 
enum ath9k_ani_cmd {
    ATH9K_ANI_OFDM_WEAK_SIGNAL_DETECTION = 1,
    ATH9K_ANI_FIRSTEP_LEVEL = 2,
    ATH9K_ANI_SPUR_IMMUNITY_LEVEL = 4,
    ATH9K_ANI_MRC_CCK = 8,
    ATH9K_ANI_ALL = 4095
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ani.h"
struct ath9k_mib_stats {
   u32 ackrcv_bad ;
   u32 rts_bad ;
   u32 rts_good ;
   u32 fcs_bad ;
   u32 beacons ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ani.h"
struct ath9k_ani_default {
   u16 m1ThreshLow ;
   u16 m2ThreshLow ;
   u16 m1Thresh ;
   u16 m2Thresh ;
   u16 m2CountThr ;
   u16 m2CountThrLow ;
   u16 m1ThreshLowExt ;
   u16 m2ThreshLowExt ;
   u16 m1ThreshExt ;
   u16 m2ThreshExt ;
   u16 firstep ;
   u16 firstepLow ;
   u16 cycpwrThr1 ;
   u16 cycpwrThr1Ext ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ani.h"
struct ar5416AniState {
   u8 noiseImmunityLevel ;
   u8 ofdmNoiseImmunityLevel ;
   u8 cckNoiseImmunityLevel ;
   bool ofdmsTurn ;
   u8 mrcCCK ;
   u8 spurImmunityLevel ;
   u8 firstepLevel ;
   bool ofdmWeakSigDetect ;
   u32 listenTime ;
   u32 ofdmPhyErrCount ;
   u32 cckPhyErrCount ;
   struct ath9k_ani_default iniDef ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ani.h"
struct ar5416Stats {
   u32 ast_ani_spurup ;
   u32 ast_ani_spurdown ;
   u32 ast_ani_ofdmon ;
   u32 ast_ani_ofdmoff ;
   u32 ast_ani_cckhigh ;
   u32 ast_ani_ccklow ;
   u32 ast_ani_stepup ;
   u32 ast_ani_stepdown ;
   u32 ast_ani_ofdmerrs ;
   u32 ast_ani_cckerrs ;
   u32 ast_ani_reset ;
   u32 ast_ani_lneg_or_lzero ;
   u32 avgbrssi ;
   struct ath9k_mib_stats ast_mibstats ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_eeprom.h"
struct eepFlags {
   u8 opFlags ;
   u8 eepMisc ;
} __attribute__((__packed__));
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_eeprom.h"
struct ar9300_base_eep_hdr {
   __le16 regDmn[2U] ;
   u8 txrxMask ;
   struct eepFlags opCapFlags ;
   u8 rfSilent ;
   u8 blueToothOptions ;
   u8 deviceCap ;
   u8 deviceType ;
   int8_t pwrTableOffset ;
   u8 params_for_tuning_caps[2U] ;
   u8 featureEnable ;
   u8 miscConfiguration ;
   u8 eepromWriteEnableGpio ;
   u8 wlanDisableGpio ;
   u8 wlanLedGpio ;
   u8 rxBandSelectGpio ;
   u8 txrxgain ;
   __le32 swreg ;
} __attribute__((__packed__));
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_eeprom.h"
struct ar9300_modal_eep_header {
   __le32 antCtrlCommon ;
   __le32 antCtrlCommon2 ;
   __le16 antCtrlChain[3U] ;
   u8 xatten1DB[3U] ;
   u8 xatten1Margin[3U] ;
   int8_t tempSlope ;
   int8_t voltSlope ;
   u8 spurChans[5U] ;
   int8_t noiseFloorThreshCh[3U] ;
   u8 reserved[11U] ;
   int8_t quick_drop ;
   u8 xpaBiasLvl ;
   u8 txFrameToDataStart ;
   u8 txFrameToPaOn ;
   u8 txClip ;
   int8_t antennaGain ;
   u8 switchSettling ;
   int8_t adcDesiredSize ;
   u8 txEndToXpaOff ;
   u8 txEndToRxOn ;
   u8 txFrameToXpaOn ;
   u8 thresh62 ;
   __le32 papdRateMaskHt20 ;
   __le32 papdRateMaskHt40 ;
   __le16 switchcomspdt ;
   u8 xlna_bias_strength ;
   u8 futureModal[7U] ;
} __attribute__((__packed__));
#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_eeprom.h"
struct ar9300_cal_data_per_freq_op_loop {
   int8_t refPower ;
   u8 voltMeas ;
   u8 tempMeas ;
   int8_t rxNoisefloorCal ;
   int8_t rxNoisefloorPower ;
   u8 rxTempMeas ;
} __attribute__((__packed__));
#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_eeprom.h"
struct cal_tgt_pow_legacy {
   u8 tPow2x[4U] ;
} __attribute__((__packed__));
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_eeprom.h"
struct cal_tgt_pow_ht {
   u8 tPow2x[14U] ;
} __attribute__((__packed__));
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_eeprom.h"
struct cal_ctl_data_2g {
   u8 ctlEdges[4U] ;
} __attribute__((__packed__));
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_eeprom.h"
struct cal_ctl_data_5g {
   u8 ctlEdges[8U] ;
} __attribute__((__packed__));
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_eeprom.h"
struct ar9300_BaseExtension_1 {
   u8 ant_div_control ;
   u8 future[2U] ;
   u8 misc_enable ;
   int8_t tempslopextension[8U] ;
   int8_t quick_drop_low ;
   int8_t quick_drop_high ;
} __attribute__((__packed__));
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_eeprom.h"
struct ar9300_BaseExtension_2 {
   int8_t tempSlopeLow ;
   int8_t tempSlopeHigh ;
   u8 xatten1DBLow[3U] ;
   u8 xatten1MarginLow[3U] ;
   u8 xatten1DBHigh[3U] ;
   u8 xatten1MarginHigh[3U] ;
} __attribute__((__packed__));
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_eeprom.h"
struct ar9300_eeprom {
   u8 eepromVersion ;
   u8 templateVersion ;
   u8 macAddr[6U] ;
   u8 custData[20U] ;
   struct ar9300_base_eep_hdr baseEepHeader ;
   struct ar9300_modal_eep_header modalHeader2G ;
   struct ar9300_BaseExtension_1 base_ext1 ;
   u8 calFreqPier2G[3U] ;
   struct ar9300_cal_data_per_freq_op_loop calPierData2G[3U][3U] ;
   u8 calTarget_freqbin_Cck[2U] ;
   u8 calTarget_freqbin_2G[3U] ;
   u8 calTarget_freqbin_2GHT20[3U] ;
   u8 calTarget_freqbin_2GHT40[3U] ;
   struct cal_tgt_pow_legacy calTargetPowerCck[2U] ;
   struct cal_tgt_pow_legacy calTargetPower2G[3U] ;
   struct cal_tgt_pow_ht calTargetPower2GHT20[3U] ;
   struct cal_tgt_pow_ht calTargetPower2GHT40[3U] ;
   u8 ctlIndex_2G[12U] ;
   u8 ctl_freqbin_2G[12U][4U] ;
   struct cal_ctl_data_2g ctlPowerData_2G[12U] ;
   struct ar9300_modal_eep_header modalHeader5G ;
   struct ar9300_BaseExtension_2 base_ext2 ;
   u8 calFreqPier5G[8U] ;
   struct ar9300_cal_data_per_freq_op_loop calPierData5G[3U][8U] ;
   u8 calTarget_freqbin_5G[8U] ;
   u8 calTarget_freqbin_5GHT20[8U] ;
   u8 calTarget_freqbin_5GHT40[8U] ;
   struct cal_tgt_pow_legacy calTargetPower5G[8U] ;
   struct cal_tgt_pow_ht calTargetPower5GHT20[8U] ;
   struct cal_tgt_pow_ht calTargetPower5GHT40[8U] ;
   u8 ctlIndex_5G[9U] ;
   u8 ctl_freqbin_5G[9U][8U] ;
   struct cal_ctl_data_5g ctlPowerData_5G[9U] ;
} __attribute__((__packed__));
#line 371 
enum eeprom_param {
    EEP_NFTHRESH_5 = 0,
    EEP_NFTHRESH_2 = 1,
    EEP_MAC_MSW = 2,
    EEP_MAC_MID = 3,
    EEP_MAC_LSW = 4,
    EEP_REG_0 = 5,
    EEP_OP_CAP = 6,
    EEP_OP_MODE = 7,
    EEP_RF_SILENT = 8,
    EEP_OB_5 = 9,
    EEP_DB_5 = 10,
    EEP_OB_2 = 11,
    EEP_DB_2 = 12,
    EEP_TX_MASK = 13,
    EEP_RX_MASK = 14,
    EEP_FSTCLK_5G = 15,
    EEP_RXGAIN_TYPE = 16,
    EEP_OL_PWRCTRL = 17,
    EEP_TXGAIN_TYPE = 18,
    EEP_RC_CHAIN_MASK = 19,
    EEP_DAC_HPWR_5G = 20,
    EEP_FRAC_N_5G = 21,
    EEP_DEV_TYPE = 22,
    EEP_TEMPSENSE_SLOPE = 23,
    EEP_TEMPSENSE_SLOPE_PAL_ON = 24,
    EEP_PWR_TABLE_OFFSET = 25,
    EEP_PAPRD = 26,
    EEP_MODAL_VER = 27,
    EEP_ANT_DIV_CTL1 = 28,
    EEP_CHAIN_MASK_REDUCE = 29,
    EEP_ANTENNA_GAIN_2G = 30,
    EEP_ANTENNA_GAIN_5G = 31
};
#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct base_eep_header {
   __le16 length ;
   __le16 checksum ;
   __le16 version ;
   u8 opCapFlags ;
   u8 eepMisc ;
   __le16 regDmn[2U] ;
   u8 macAddr[6U] ;
   u8 rxMask ;
   u8 txMask ;
   __le16 rfSilent ;
   __le16 blueToothOptions ;
   __le16 deviceCap ;
   __le32 binBuildNumber ;
   u8 deviceType ;
   u8 pwdclkind ;
   u8 fastClk5g ;
   u8 divChain ;
   u8 rxGainType ;
   u8 dacHiPwrMode_5G ;
   u8 openLoopPwrCntl ;
   u8 dacLpMode ;
   u8 txGainType ;
   u8 rcChainMask ;
   u8 desiredScaleCCK ;
   u8 pwr_table_offset ;
   u8 frac_n_5g ;
   u8 futureBase_3[21U] ;
} __attribute__((__packed__));
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct base_eep_header_4k {
   __le16 length ;
   __le16 checksum ;
   __le16 version ;
   u8 opCapFlags ;
   u8 eepMisc ;
   __le16 regDmn[2U] ;
   u8 macAddr[6U] ;
   u8 rxMask ;
   u8 txMask ;
   __le16 rfSilent ;
   __le16 blueToothOptions ;
   __le16 deviceCap ;
   __le32 binBuildNumber ;
   u8 deviceType ;
   u8 txGainType ;
} __attribute__((__packed__));
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct spur_chan {
   __le16 spurChan ;
   u8 spurRangeLow ;
   u8 spurRangeHigh ;
} __attribute__((__packed__));
#line 338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct modal_eep_header {
   __le32 antCtrlChain[3U] ;
   __le32 antCtrlCommon ;
   u8 antennaGainCh[3U] ;
   u8 switchSettling ;
   u8 txRxAttenCh[3U] ;
   u8 rxTxMarginCh[3U] ;
   u8 adcDesiredSize ;
   u8 pgaDesiredSize ;
   u8 xlnaGainCh[3U] ;
   u8 txEndToXpaOff ;
   u8 txEndToRxOn ;
   u8 txFrameToXpaOn ;
   u8 thresh62 ;
   u8 noiseFloorThreshCh[3U] ;
   u8 xpdGain ;
   u8 xpd ;
   u8 iqCalICh[3U] ;
   u8 iqCalQCh[3U] ;
   u8 pdGainOverlap ;
   u8 ob ;
   u8 db ;
   u8 xpaBiasLvl ;
   u8 pwrDecreaseFor2Chain ;
   u8 pwrDecreaseFor3Chain ;
   u8 txFrameToDataStart ;
   u8 txFrameToPaOn ;
   u8 ht40PowerIncForPdadc ;
   u8 bswAtten[3U] ;
   u8 bswMargin[3U] ;
   u8 swSettleHt40 ;
   u8 xatten2Db[3U] ;
   u8 xatten2Margin[3U] ;
   u8 ob_ch1 ;
   u8 db_ch1 ;
   u8 lna_ctl ;
   u8 miscBits ;
   __le16 xpaBiasLvlFreq[3U] ;
   u8 futureModal[6U] ;
   struct spur_chan spurChans[5U] ;
} __attribute__((__packed__));
#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct modal_eep_4k_header {
   __le32 antCtrlChain[1U] ;
   __le32 antCtrlCommon ;
   u8 antennaGainCh[1U] ;
   u8 switchSettling ;
   u8 txRxAttenCh[1U] ;
   u8 rxTxMarginCh[1U] ;
   u8 adcDesiredSize ;
   u8 pgaDesiredSize ;
   u8 xlnaGainCh[1U] ;
   u8 txEndToXpaOff ;
   u8 txEndToRxOn ;
   u8 txFrameToXpaOn ;
   u8 thresh62 ;
   u8 noiseFloorThreshCh[1U] ;
   u8 xpdGain ;
   u8 xpd ;
   u8 iqCalICh[1U] ;
   u8 iqCalQCh[1U] ;
   u8 pdGainOverlap ;
   u8 ob_0 : 4 ;
   u8 ob_1 : 4 ;
   u8 db1_0 : 4 ;
   u8 db1_1 : 4 ;
   u8 xpaBiasLvl ;
   u8 txFrameToDataStart ;
   u8 txFrameToPaOn ;
   u8 ht40PowerIncForPdadc ;
   u8 bswAtten[1U] ;
   u8 bswMargin[1U] ;
   u8 swSettleHt40 ;
   u8 xatten2Db[1U] ;
   u8 xatten2Margin[1U] ;
   u8 db2_0 : 4 ;
   u8 db2_1 : 4 ;
   u8 version ;
   u8 ob_2 : 4 ;
   u8 ob_3 : 4 ;
   u8 ob_4 : 4 ;
   u8 antdiv_ctl1 : 4 ;
   u8 db1_2 : 4 ;
   u8 db1_3 : 4 ;
   u8 db1_4 : 4 ;
   u8 antdiv_ctl2 : 4 ;
   u8 db2_2 : 4 ;
   u8 db2_3 : 4 ;
   u8 db2_4 : 4 ;
   u8 reserved : 4 ;
   u8 tx_diversity ;
   u8 flc_pwr_thresh ;
   u8 bb_scale_smrt_antenna ;
   u8 futureModal[1U] ;
   struct spur_chan spurChans[5U] ;
} __attribute__((__packed__));
#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct base_eep_ar9287_header {
   __le16 length ;
   __le16 checksum ;
   __le16 version ;
   u8 opCapFlags ;
   u8 eepMisc ;
   __le16 regDmn[2U] ;
   u8 macAddr[6U] ;
   u8 rxMask ;
   u8 txMask ;
   __le16 rfSilent ;
   __le16 blueToothOptions ;
   __le16 deviceCap ;
   __le32 binBuildNumber ;
   u8 deviceType ;
   u8 openLoopPwrCntl ;
   int8_t pwrTableOffset ;
   int8_t tempSensSlope ;
   int8_t tempSensSlopePalOn ;
   u8 futureBase[29U] ;
} __attribute__((__packed__));
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct modal_eep_ar9287_header {
   __le32 antCtrlChain[2U] ;
   __le32 antCtrlCommon ;
   int8_t antennaGainCh[2U] ;
   u8 switchSettling ;
   u8 txRxAttenCh[2U] ;
   u8 rxTxMarginCh[2U] ;
   int8_t adcDesiredSize ;
   u8 txEndToXpaOff ;
   u8 txEndToRxOn ;
   u8 txFrameToXpaOn ;
   u8 thresh62 ;
   int8_t noiseFloorThreshCh[2U] ;
   u8 xpdGain ;
   u8 xpd ;
   int8_t iqCalICh[2U] ;
   int8_t iqCalQCh[2U] ;
   u8 pdGainOverlap ;
   u8 xpaBiasLvl ;
   u8 txFrameToDataStart ;
   u8 txFrameToPaOn ;
   u8 ht40PowerIncForPdadc ;
   u8 bswAtten[2U] ;
   u8 bswMargin[2U] ;
   u8 swSettleHt40 ;
   u8 version ;
   u8 db1 ;
   u8 db2 ;
   u8 ob_cck ;
   u8 ob_psk ;
   u8 ob_qam ;
   u8 ob_pal_off ;
   u8 futureModal[30U] ;
   struct spur_chan spurChans[5U] ;
} __attribute__((__packed__));
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct cal_data_per_freq {
   u8 pwrPdg[4U][5U] ;
   u8 vpdPdg[4U][5U] ;
} __attribute__((__packed__));
#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct cal_data_per_freq_4k {
   u8 pwrPdg[2U][5U] ;
   u8 vpdPdg[2U][5U] ;
} __attribute__((__packed__));
#line 521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct cal_target_power_leg {
   u8 bChannel ;
   u8 tPow2x[4U] ;
} __attribute__((__packed__));
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct cal_target_power_ht {
   u8 bChannel ;
   u8 tPow2x[8U] ;
} __attribute__((__packed__));
#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct cal_ctl_edges {
   u8 bChannel ;
   u8 ctl ;
} __attribute__((__packed__));
#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct cal_data_op_loop_ar9287 {
   u8 pwrPdg[2U][5U] ;
   u8 vpdPdg[2U][5U] ;
   u8 pcdac[2U][5U] ;
   u8 empty[2U][5U] ;
} __attribute__((__packed__));
#line 543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct cal_data_per_freq_ar9287 {
   u8 pwrPdg[4U][1U] ;
   u8 vpdPdg[4U][1U] ;
} __attribute__((__packed__));
#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
union cal_data_per_freq_ar9287_u {
   struct cal_data_op_loop_ar9287 calDataOpen ;
   struct cal_data_per_freq_ar9287 calDataClose ;
} __attribute__((__packed__));
#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct cal_ctl_data_ar9287 {
   struct cal_ctl_edges ctlEdges[2U][4U] ;
} __attribute__((__packed__));
#line 558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct cal_ctl_data {
   struct cal_ctl_edges ctlEdges[3U][8U] ;
} __attribute__((__packed__));
#line 563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct cal_ctl_data_4k {
   struct cal_ctl_edges ctlEdges[1U][4U] ;
} __attribute__((__packed__));
#line 568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct ar5416_eeprom_def {
   struct base_eep_header baseEepHeader ;
   u8 custData[64U] ;
   struct modal_eep_header modalHeader[2U] ;
   u8 calFreqPier5G[8U] ;
   u8 calFreqPier2G[4U] ;
   struct cal_data_per_freq calPierData5G[3U][8U] ;
   struct cal_data_per_freq calPierData2G[3U][4U] ;
   struct cal_target_power_leg calTargetPower5G[8U] ;
   struct cal_target_power_ht calTargetPower5GHT20[8U] ;
   struct cal_target_power_ht calTargetPower5GHT40[8U] ;
   struct cal_target_power_leg calTargetPowerCck[3U] ;
   struct cal_target_power_leg calTargetPower2G[4U] ;
   struct cal_target_power_ht calTargetPower2GHT20[4U] ;
   struct cal_target_power_ht calTargetPower2GHT40[4U] ;
   u8 ctlIndex[24U] ;
   struct cal_ctl_data ctlData[24U] ;
   u8 padding ;
} __attribute__((__packed__));
#line 597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct ar5416_eeprom_4k {
   struct base_eep_header_4k baseEepHeader ;
   u8 custData[20U] ;
   struct modal_eep_4k_header modalHeader ;
   u8 calFreqPier2G[3U] ;
   struct cal_data_per_freq_4k calPierData2G[1U][3U] ;
   struct cal_target_power_leg calTargetPowerCck[3U] ;
   struct cal_target_power_leg calTargetPower2G[3U] ;
   struct cal_target_power_ht calTargetPower2GHT20[3U] ;
   struct cal_target_power_ht calTargetPower2GHT40[3U] ;
   u8 ctlIndex[12U] ;
   struct cal_ctl_data_4k ctlData[12U] ;
   u8 padding ;
} __attribute__((__packed__));
#line 617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct ar9287_eeprom {
   struct base_eep_ar9287_header baseEepHeader ;
   u8 custData[32U] ;
   struct modal_eep_ar9287_header modalHeader ;
   u8 calFreqPier2G[3U] ;
   union cal_data_per_freq_ar9287_u calPierData2G[2U][3U] ;
   struct cal_target_power_leg calTargetPowerCck[3U] ;
   struct cal_target_power_leg calTargetPower2G[3U] ;
   struct cal_target_power_ht calTargetPower2GHT20[3U] ;
   struct cal_target_power_ht calTargetPower2GHT40[3U] ;
   u8 ctlIndex[12U] ;
   struct cal_ctl_data_ar9287 ctlData[12U] ;
   u8 padding ;
} __attribute__((__packed__));
#line 654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/eeprom.h"
struct eeprom_ops {
   int (*check_eeprom)(struct ath_hw *) ;
   u32 (*get_eeprom)(struct ath_hw *, enum eeprom_param ) ;
   bool (*fill_eeprom)(struct ath_hw *) ;
   u32 (*dump_eeprom)(struct ath_hw *, bool , u8 *, u32 , u32 ) ;
   int (*get_eeprom_ver)(struct ath_hw *) ;
   int (*get_eeprom_rev)(struct ath_hw *) ;
   void (*set_board_values)(struct ath_hw *, struct ath9k_channel *) ;
   void (*set_addac)(struct ath_hw *, struct ath9k_channel *) ;
   void (*set_txpower)(struct ath_hw *, struct ath9k_channel *, u16 , u8 , u8 , bool ) ;
   u16 (*get_spur_channel)(struct ath_hw *, u16 , bool ) ;
   u8 (*get_eepmisc)(struct ath_hw *) ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/calib.h"
struct ar5416IniArray {
   u32 *ia_array ;
   u32 ia_rows ;
   u32 ia_columns ;
};
#line 35 
enum ath9k_cal_state {
    CAL_INACTIVE = 0,
    CAL_WAITING = 1,
    CAL_RUNNING = 2,
    CAL_DONE = 3
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/calib.h"
struct ath9k_percal_data {
   u32 calType ;
   u32 calNumSamples ;
   u32 calCountMax ;
   void (*calCollect)(struct ath_hw *) ;
   void (*calPostProc)(struct ath_hw *, u8 ) ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/calib.h"
struct ath9k_cal_list {
   struct ath9k_percal_data *calData ;
   enum ath9k_cal_state calState ;
   struct ath9k_cal_list *calNext ;
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/calib.h"
struct ath9k_nfcal_hist {
   int16_t nfCalBuffer[5U] ;
   u8 currIndex ;
   int16_t privNF ;
   u8 invalidNFcount ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/calib.h"
struct ath9k_pacal_info {
   int32_t prev_offset ;
   int8_t max_skipcount ;
   int8_t skipcount ;
};
#line 120 
enum ath_usb_dev {
    AR9280_USB = 1,
    AR9287_USB = 2,
    STORAGE_DEVICE = 3
};
#line 151 
enum ath9k_ant_div_comb_lna_conf {
    ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2 = 0,
    ATH_ANT_DIV_COMB_LNA2 = 1,
    ATH_ANT_DIV_COMB_LNA1 = 2,
    ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2 = 3
};
#line 167 
enum ath_btcoex_scheme {
    ATH_BTCOEX_CFG_NONE = 0,
    ATH_BTCOEX_CFG_2WIRE = 1,
    ATH_BTCOEX_CFG_3WIRE = 2,
    ATH_BTCOEX_CFG_MCI = 3
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/btcoex.h"
struct ath9k_hw_mci {
   u32 raw_intr ;
   u32 rx_msg_intr ;
   u32 cont_status ;
   u32 gpm_addr ;
   u32 gpm_len ;
   u32 gpm_idx ;
   u32 sched_addr ;
   u32 wlan_channels[4U] ;
   u32 wlan_cal_seq ;
   u32 wlan_cal_done ;
   u32 config ;
   u8 *gpm_buf ;
   bool ready ;
   bool update_2g5g ;
   bool is_2g ;
   bool query_bt ;
   bool unhalt_bt_gpm ;
   bool halted_bt_gpm ;
   bool need_flush_btinfo ;
   bool bt_version_known ;
   bool wlan_channels_update ;
   u8 wlan_ver_major ;
   u8 wlan_ver_minor ;
   u8 bt_ver_major ;
   u8 bt_ver_minor ;
   u8 bt_state ;
   u8 stomp_ftp ;
   bool concur_tx ;
   u32 last_recovery ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/btcoex.h"
struct ath9k_hw_aic {
   bool aic_enabled ;
   u8 aic_cal_state ;
   u8 aic_caled_chan ;
   u32 aic_sram[79U] ;
   u32 aic_cal_start_time ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/btcoex.h"
struct ath_btcoex_hw {
   enum ath_btcoex_scheme scheme ;
   struct ath9k_hw_mci mci ;
   struct ath9k_hw_aic aic ;
   bool enabled ;
   u8 wlanactive_gpio ;
   u8 btactive_gpio ;
   u8 btpriority_gpio ;
   u32 bt_coex_mode ;
   u32 bt_coex_weights ;
   u32 bt_coex_mode2 ;
   u32 bt_coex_mode3 ;
   u32 bt_weight[4U] ;
   u32 wlan_weight[4U] ;
   u8 tx_prio[5U] ;
};
#line 138 
struct ath_node;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dynack.h"
struct ath_dyn_rxbuf {
   u16 h_rb ;
   u16 t_rb ;
   u32 tstamp[64U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dynack.h"
struct ts_info {
   u32 tstamp ;
   u32 dur ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dynack.h"
struct haddr_pair {
   u8 h_dest[6U] ;
   u8 h_src[6U] ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dynack.h"
struct ath_dyn_txbuf {
   u16 h_rb ;
   u16 t_rb ;
   struct haddr_pair addr[64U] ;
   struct ts_info ts[64U] ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dynack.h"
struct ath_dynack {
   bool enabled ;
   int ackto ;
   unsigned long lto ;
   struct list_head nodes ;
   spinlock_t qlock ;
   struct ath_dyn_rxbuf ack_rbf ;
   struct ath_dyn_txbuf st_rbf ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath9k_hw_wow {
   u32 wow_event_mask ;
   u32 wow_event_mask2 ;
   u8 max_patterns ;
};
#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath9k_hw_capabilities {
   u32 hw_caps ;
   u16 rts_aggr_limit ;
   u8 tx_chainmask ;
   u8 rx_chainmask ;
   u8 chip_chainmask ;
   u8 max_txchains ;
   u8 max_rxchains ;
   u8 num_gpio_pins ;
   u32 gpio_mask ;
   u32 gpio_requested ;
   u8 rx_hp_qdepth ;
   u8 rx_lp_qdepth ;
   u8 rx_status_len ;
   u8 tx_desc_len ;
   u8 txs_len ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath9k_ops_config {
   int dma_beacon_response_time ;
   int sw_beacon_response_time ;
   bool cwm_ignore_extcca ;
   u32 pcie_waen ;
   u8 analog_shiftreg ;
   u32 ofdm_trig_low ;
   u32 ofdm_trig_high ;
   u32 cck_trig_high ;
   u32 cck_trig_low ;
   bool enable_paprd ;
   int serialize_regmode ;
   bool rx_intr_mitigation ;
   bool tx_intr_mitigation ;
   u8 max_txtrig_level ;
   u16 ani_poll_interval ;
   u16 hw_hang_checks ;
   u16 rimt_first ;
   u16 rimt_last ;
   u32 aspm_l1_fix ;
   u32 xlna_gpio ;
   u32 ant_ctrl_comm2g_switch_enable ;
   bool xatten_margin_cfg ;
   bool alt_mingainidx ;
   u8 pll_pwrsave ;
   bool tx_gain_buffalo ;
   bool led_active_high ;
};
#line 364 
enum ath9k_int {
    ATH9K_INT_RX = 1,
    ATH9K_INT_RXDESC = 2,
    ATH9K_INT_RXHP = 1,
    ATH9K_INT_RXLP = 2,
    ATH9K_INT_RXNOFRM = 8,
    ATH9K_INT_RXEOL = 16,
    ATH9K_INT_RXORN = 32,
    ATH9K_INT_TX = 64,
    ATH9K_INT_TXDESC = 128,
    ATH9K_INT_TIM_TIMER = 256,
    ATH9K_INT_MCI = 512,
    ATH9K_INT_BB_WATCHDOG = 1024,
    ATH9K_INT_TXURN = 2048,
    ATH9K_INT_MIB = 4096,
    ATH9K_INT_RXPHY = 16384,
    ATH9K_INT_RXKCM = 32768,
    ATH9K_INT_SWBA = 65536,
    ATH9K_INT_BMISS = 262144,
    ATH9K_INT_BNR = 1048576,
    ATH9K_INT_TIM = 2097152,
    ATH9K_INT_DTIM = 4194304,
    ATH9K_INT_DTIMSYNC = 8388608,
    ATH9K_INT_GPIO = 16777216,
    ATH9K_INT_CABEND = 33554432,
    ATH9K_INT_TSFOOR = 67108864,
    ATH9K_INT_GENTIMER = 134217728,
    ATH9K_INT_CST = 268435456,
    ATH9K_INT_GTT = 536870912,
    ATH9K_INT_FATAL = 1073741824,
    ATH9K_INT_GLOBAL = 2147483648,
    ATH9K_INT_BMISC = 115343360,
    ATH9K_INT_COMMON = 17160378,
    ATH9K_INT_NOCARD = 4294967295
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath9k_hw_cal_data {
   u16 channel ;
   u16 channelFlags ;
   unsigned long cal_flags ;
   int32_t CalValid ;
   int8_t iCoff ;
   int8_t qCoff ;
   u8 caldac[2U] ;
   u16 small_signal_gain[3U] ;
   u32 pa_table[3U][24U] ;
   u32 num_measures[3U] ;
   int tx_corr_coeff[8U][3U] ;
   u32 tx_clcal[3U][16U] ;
   u32 rtt_table[3U][6U] ;
   struct ath9k_nfcal_hist nfCalHist[6U] ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath9k_channel {
   struct ieee80211_channel *chan ;
   u16 channel ;
   u16 channelFlags ;
   s16 noisefloor ;
};
#line 455 
enum ath9k_power_mode {
    ATH9K_PM_AWAKE = 0,
    ATH9K_PM_FULL_SLEEP = 1,
    ATH9K_PM_NETWORK_SLEEP = 2,
    ATH9K_PM_UNDEFINED = 3
};
#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath9k_hw_version {
   u32 magic ;
   u16 devid ;
   u16 subvendorid ;
   u32 macVersion ;
   u16 macRev ;
   u16 phyRev ;
   u16 analog5GhzRev ;
   u16 analog2GhzRev ;
   enum ath_usb_dev usbdev ;
};
#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath_gen_timer {
   void (*trigger)(void *) ;
   void (*overflow)(void *) ;
   void *arg ;
   u8 index ;
};
#line 555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath_gen_timer_table {
   struct ath_gen_timer *timers[16U] ;
   u16 timer_mask ;
   bool tsf2_enabled ;
};
#line 561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath_hw_antcomb_conf {
   u8 main_lna_conf ;
   u8 alt_lna_conf ;
   u8 fast_div_bias ;
   u8 main_gaintb ;
   u8 alt_gaintb ;
   int lna1_lna2_delta ;
   int lna1_lna2_switch_delta ;
   u8 div_group ;
};
#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath_hw_radar_conf {
   unsigned int pulse_inband ;
   unsigned int pulse_inband_step ;
   unsigned int pulse_height ;
   unsigned int pulse_rssi ;
   unsigned int pulse_maxlen ;
   unsigned int radar_rssi ;
   unsigned int radar_inband ;
   int fir_power ;
   bool ext_channel ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath_hw_private_ops {
   void (*init_hang_checks)(struct ath_hw *) ;
   bool (*detect_mac_hang)(struct ath_hw *) ;
   bool (*detect_bb_hang)(struct ath_hw *) ;
   void (*init_cal_settings)(struct ath_hw *) ;
   bool (*init_cal)(struct ath_hw *, struct ath9k_channel *) ;
   void (*init_mode_gain_regs)(struct ath_hw *) ;
   void (*setup_calibration)(struct ath_hw *, struct ath9k_cal_list *) ;
   int (*rf_set_freq)(struct ath_hw *, struct ath9k_channel *) ;
   void (*spur_mitigate_freq)(struct ath_hw *, struct ath9k_channel *) ;
   bool (*set_rf_regs)(struct ath_hw *, struct ath9k_channel *, u16 ) ;
   void (*set_channel_regs)(struct ath_hw *, struct ath9k_channel *) ;
   void (*init_bb)(struct ath_hw *, struct ath9k_channel *) ;
   int (*process_ini)(struct ath_hw *, struct ath9k_channel *) ;
   void (*olc_init)(struct ath_hw *) ;
   void (*set_rfmode)(struct ath_hw *, struct ath9k_channel *) ;
   void (*mark_phy_inactive)(struct ath_hw *) ;
   void (*set_delta_slope)(struct ath_hw *, struct ath9k_channel *) ;
   bool (*rfbus_req)(struct ath_hw *) ;
   void (*rfbus_done)(struct ath_hw *) ;
   void (*restore_chainmask)(struct ath_hw *) ;
   u32 (*compute_pll_control)(struct ath_hw *, struct ath9k_channel *) ;
   bool (*ani_control)(struct ath_hw *, enum ath9k_ani_cmd , int ) ;
   void (*do_getnf)(struct ath_hw *, int16_t *) ;
   void (*set_radar_params)(struct ath_hw *, struct ath_hw_radar_conf *) ;
   int (*fast_chan_change)(struct ath_hw *, struct ath9k_channel *, u8 *) ;
   void (*ani_cache_ini_regs)(struct ath_hw *) ;
   bool (*is_aic_enabled)(struct ath_hw *) ;
};
#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath_spec_scan {
   bool enabled ;
   bool short_repeat ;
   bool endless ;
   u8 count ;
   u8 period ;
   u8 fft_period ;
};
#line 722  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath_hw_ops {
   void (*config_pci_powersave)(struct ath_hw *, bool ) ;
   void (*rx_enable)(struct ath_hw *) ;
   void (*set_desc_link)(void *, u32 ) ;
   int (*calibrate)(struct ath_hw *, struct ath9k_channel *, u8 , bool ) ;
   bool (*get_isr)(struct ath_hw *, enum ath9k_int *, u32 *) ;
   void (*set_txdesc)(struct ath_hw *, void *, struct ath_tx_info *) ;
   int (*proc_txdesc)(struct ath_hw *, void *, struct ath_tx_status *) ;
   int (*get_duration)(struct ath_hw *, void *, int ) ;
   void (*antdiv_comb_conf_get)(struct ath_hw *, struct ath_hw_antcomb_conf *) ;
   void (*antdiv_comb_conf_set)(struct ath_hw *, struct ath_hw_antcomb_conf *) ;
   void (*spectral_scan_config)(struct ath_hw *, struct ath_spec_scan *) ;
   void (*spectral_scan_trigger)(struct ath_hw *) ;
   void (*spectral_scan_wait)(struct ath_hw *) ;
   void (*tx99_start)(struct ath_hw *, u32 ) ;
   void (*tx99_stop)(struct ath_hw *) ;
   void (*tx99_set_txpower)(struct ath_hw *, u8 ) ;
   void (*set_bt_ant_diversity)(struct ath_hw *, bool ) ;
};
#line 754  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath_nf_limits {
   s16 max ;
   s16 min ;
   s16 nominal ;
   s16 cal[3U] ;
   s16 pwr[3U] ;
};
#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
union __anonunion_eeprom_1026 {
   struct ar5416_eeprom_def def ;
   struct ar5416_eeprom_4k map4k ;
   struct ar9287_eeprom map9287 ;
   struct ar9300_eeprom ar9300_eep ;
};
#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
union __anonunion_meas0_1027 {
   u32 unsign[3U] ;
   int32_t sign[3U] ;
};
#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
union __anonunion_meas1_1028 {
   u32 unsign[3U] ;
   int32_t sign[3U] ;
};
#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
union __anonunion_meas2_1029 {
   u32 unsign[3U] ;
   int32_t sign[3U] ;
};
#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
union __anonunion_meas3_1030 {
   u32 unsign[3U] ;
   int32_t sign[3U] ;
};
#line 774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath_hw {
   struct ath_ops reg_ops ;
   struct device *dev ;
   struct ieee80211_hw *hw ;
   struct ath_common common ;
   struct ath9k_hw_version hw_version ;
   struct ath9k_ops_config config ;
   struct ath9k_hw_capabilities caps ;
   struct ath9k_channel channels[38U] ;
   struct ath9k_channel *curchan ;
   union __anonunion_eeprom_1026 eeprom ;
   struct eeprom_ops *eep_ops ;
   bool sw_mgmt_crypto_tx ;
   bool sw_mgmt_crypto_rx ;
   bool is_pciexpress ;
   bool aspm_enabled ;
   bool is_monitoring ;
   bool need_an_top2_fixup ;
   u16 tx_trig_level ;
   u32 nf_regs[6U] ;
   struct ath_nf_limits nf_2g ;
   struct ath_nf_limits nf_5g ;
   u16 rfsilent ;
   u32 rfkill_gpio ;
   u32 rfkill_polarity ;
   u32 ah_flags ;
   s16 nf_override ;
   bool reset_power_on ;
   bool htc_reset_init ;
   enum nl80211_iftype opmode ;
   enum ath9k_power_mode power_mode ;
   s8 noise ;
   struct ath9k_hw_cal_data *caldata ;
   struct ath9k_pacal_info pacal_info ;
   struct ar5416Stats stats ;
   struct ath9k_tx_queue_info txq[10U] ;
   enum ath9k_int imask ;
   u32 imrs2_reg ;
   u32 txok_interrupt_mask ;
   u32 txerr_interrupt_mask ;
   u32 txdesc_interrupt_mask ;
   u32 txeol_interrupt_mask ;
   u32 txurn_interrupt_mask ;
   atomic_t intr_ref_cnt ;
   bool chip_fullsleep ;
   u32 modes_index ;
   u32 supp_cals ;
   struct ath9k_cal_list iq_caldata ;
   struct ath9k_cal_list adcgain_caldata ;
   struct ath9k_cal_list adcdc_caldata ;
   struct ath9k_cal_list *cal_list ;
   struct ath9k_cal_list *cal_list_last ;
   struct ath9k_cal_list *cal_list_curr ;
   union __anonunion_meas0_1027 meas0 ;
   union __anonunion_meas1_1028 meas1 ;
   union __anonunion_meas2_1029 meas2 ;
   union __anonunion_meas3_1030 meas3 ;
   u16 cal_samples ;
   u8 enabled_cals ;
   u32 sta_id1_defaults ;
   u32 misc_mode ;
   struct ath_hw_private_ops private_ops ;
   struct ath_hw_ops ops ;
   u32 *analogBank6Data ;
   int coverage_class ;
   u32 slottime ;
   u32 globaltxtimeout ;
   u32 aniperiod ;
   enum ath9k_ani_cmd ani_function ;
   u32 ani_skip_count ;
   struct ar5416AniState ani ;
   struct ath_btcoex_hw btcoex_hw ;
   u32 intr_txqs ;
   u8 txchainmask ;
   u8 rxchainmask ;
   struct ath_hw_radar_conf radar_conf ;
   u32 originalGain[22U] ;
   int initPDADC ;
   int PDADCdelta ;
   int led_pin ;
   u32 gpio_mask ;
   u32 gpio_val ;
   struct ar5416IniArray ini_dfs ;
   struct ar5416IniArray iniModes ;
   struct ar5416IniArray iniCommon ;
   struct ar5416IniArray iniBB_RfGain ;
   struct ar5416IniArray iniBank6 ;
   struct ar5416IniArray iniAddac ;
   struct ar5416IniArray iniPcieSerdes ;
   struct ar5416IniArray iniPcieSerdesLowPower ;
   struct ar5416IniArray iniModesFastClock ;
   struct ar5416IniArray iniAdditional ;
   struct ar5416IniArray iniModesRxGain ;
   struct ar5416IniArray ini_modes_rx_gain_bounds ;
   struct ar5416IniArray iniModesTxGain ;
   struct ar5416IniArray iniCckfirNormal ;
   struct ar5416IniArray iniCckfirJapan2484 ;
   struct ar5416IniArray iniModes_9271_ANI_reg ;
   struct ar5416IniArray ini_radio_post_sys2ant ;
   struct ar5416IniArray ini_modes_rxgain_xlna ;
   struct ar5416IniArray ini_modes_rxgain_bb_core ;
   struct ar5416IniArray ini_modes_rxgain_bb_postamble ;
   struct ar5416IniArray iniMac[3U] ;
   struct ar5416IniArray iniBB[3U] ;
   struct ar5416IniArray iniRadio[3U] ;
   struct ar5416IniArray iniSOC[3U] ;
   u32 intr_gen_timer_trigger ;
   u32 intr_gen_timer_thresh ;
   struct ath_gen_timer_table hw_gen_timers ;
   struct ar9003_txs *ts_ring ;
   u32 ts_paddr_start ;
   u32 ts_paddr_end ;
   u16 ts_tail ;
   u16 ts_size ;
   u32 bb_watchdog_last_status ;
   u32 bb_watchdog_timeout_ms ;
   u8 bb_hang_rx_ofdm ;
   unsigned int paprd_target_power ;
   unsigned int paprd_training_power ;
   unsigned int paprd_ratemask ;
   unsigned int paprd_ratemask_ht40 ;
   bool paprd_table_write_done ;
   u32 paprd_gain_table_entries[32U] ;
   u8 paprd_gain_table_index[32U] ;
   u32 WARegVal ;
   u32 ent_mode ;
   struct ath9k_hw_wow wow ;
   bool is_clk_25mhz ;
   int (*get_mac_revision)(void) ;
   int (*external_reset)(void) ;
   bool disable_2ghz ;
   bool disable_5ghz ;
   struct firmware *eeprom_blob ;
   struct ath_dynack dynack ;
   bool tpc_enabled ;
   u8 tx_power[36U] ;
   u8 tx_power_stbc[36U] ;
   bool msi_enabled ;
   u32 msi_mask ;
   u32 msi_reg ;
};
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath_bus_ops {
   enum ath_bus_type ath_bus_type ;
   void (*read_cachesize)(struct ath_common *, int *) ;
   bool (*eeprom_read)(struct ath_common *, u32 , u16 *) ;
   void (*bt_coex_prep)(struct ath_common *) ;
   void (*aspm_init)(struct ath_common *) ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/common-init.h"
struct ath_beacon_config;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/common-debug.h"
struct ath_rx_stats {
   u32 rx_pkts_all ;
   u32 rx_bytes_all ;
   u32 crc_err ;
   u32 decrypt_crc_err ;
   u32 phy_err ;
   u32 mic_err ;
   u32 pre_delim_crc_err ;
   u32 post_delim_crc_err ;
   u32 decrypt_busy_err ;
   u32 phy_err_stats[39U] ;
   u32 rx_len_err ;
   u32 rx_oom_err ;
   u32 rx_rate_err ;
   u32 rx_too_many_frags_err ;
   u32 rx_beacons ;
   u32 rx_frags ;
   u32 rx_spectral ;
   u32 rx_spectral_sample_good ;
   u32 rx_spectral_sample_err ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/spectral_common.h"
enum spectral_mode {
    SPECTRAL_DISABLED = 0,
    SPECTRAL_BACKGROUND = 1,
    SPECTRAL_MANUAL = 2,
    SPECTRAL_CHANSCAN = 3
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/common-spectral.h"
struct ath_spec_scan_priv {
   struct ath_hw *ah ;
   struct rchan *rfs_chan_spec_scan ;
   enum spectral_mode spectral_mode ;
   struct ath_spec_scan spec_config ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/common.h"
struct ath_beacon_config {
   struct ieee80211_vif *main_vif ;
   int beacon_interval ;
   u16 dtim_period ;
   u16 bmiss_timeout ;
   u8 dtim_count ;
   u8 enable_beacon ;
   bool ibss_creator ;
   u32 nexttbtt ;
   u32 intval ;
};
#line 93 
struct ath_softc;
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs_debug.h"
struct ath_dfs_stats {
   u32 pulses_total ;
   u32 pulses_no_dfs ;
   u32 pulses_detected ;
   u32 datalen_discards ;
   u32 rssi_discards ;
   u32 bwinfo_discards ;
   u32 pri_phy_errors ;
   u32 ext_phy_errors ;
   u32 dc_phy_errors ;
   u32 pulses_processed ;
   u32 radar_detected ;
};
#line 61 
struct ath_dfs_pool_stats;
#line 62 
struct ath_txq;
#line 63 
struct ath_buf;
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.h"
struct ath_interrupt_stats {
   u32 total ;
   u32 rxok ;
   u32 rxlp ;
   u32 rxhp ;
   u32 rxeol ;
   u32 rxorn ;
   u32 txok ;
   u32 txeol ;
   u32 txurn ;
   u32 mib ;
   u32 rxphyerr ;
   u32 rx_keycache_miss ;
   u32 swba ;
   u32 bmiss ;
   u32 bnr ;
   u32 cst ;
   u32 gtt ;
   u32 tim ;
   u32 cabend ;
   u32 dtimsync ;
   u32 dtim ;
   u32 bb_watchdog ;
   u32 tsfoor ;
   u32 mci ;
   u32 gen_timer ;
   u32 sync_cause_all ;
   u32 sync_rtc_irq ;
   u32 sync_mac_irq ;
   u32 eeprom_illegal_access ;
   u32 apb_timeout ;
   u32 pci_mode_conflict ;
   u32 host1_fatal ;
   u32 host1_perr ;
   u32 trcv_fifo_perr ;
   u32 radm_cpl_ep ;
   u32 radm_cpl_dllp_abort ;
   u32 radm_cpl_tlp_abort ;
   u32 radm_cpl_ecrc_err ;
   u32 radm_cpl_timeout ;
   u32 local_timeout ;
   u32 pm_access ;
   u32 mac_awake ;
   u32 mac_asleep ;
   u32 mac_sleep_access ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.h"
struct ath_tx_stats {
   u32 tx_pkts_all ;
   u32 tx_bytes_all ;
   u32 queued ;
   u32 completed ;
   u32 xretries ;
   u32 a_aggr ;
   u32 a_queued_hw ;
   u32 a_completed ;
   u32 a_retries ;
   u32 a_xretries ;
   u32 txerr_filtered ;
   u32 fifo_underrun ;
   u32 xtxop ;
   u32 timer_exp ;
   u32 desc_cfg_err ;
   u32 data_underrun ;
   u32 delim_underrun ;
   u32 puttxbuf ;
   u32 txstart ;
   u32 txprocdesc ;
   u32 txfailed ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.h"
struct __anonstruct_ht_stats_1031 {
   u32 ht20_cnt ;
   u32 ht40_cnt ;
   u32 sgi_cnt ;
   u32 lgi_cnt ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.h"
struct __anonstruct_ofdm_stats_1032 {
   u32 ofdm_cnt ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.h"
struct __anonstruct_cck_stats_1033 {
   u32 cck_lp_cnt ;
   u32 cck_sp_cnt ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.h"
struct ath_rx_rate_stats {
   struct __anonstruct_ht_stats_1031 ht_stats[24U] ;
   struct __anonstruct_ofdm_stats_1032 ofdm_stats[8U] ;
   struct __anonstruct_cck_stats_1033 cck_stats[4U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.h"
struct ath_antenna_stats {
   u32 recv_cnt ;
   u32 rssi_avg ;
   u32 lna_recv_cnt[4U] ;
   u32 lna_attempt_cnt[4U] ;
};
#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.h"
struct ath_stats {
   struct ath_interrupt_stats istats ;
   struct ath_tx_stats txstats[10U] ;
   struct ath_rx_stats rxstats ;
   struct ath_dfs_stats dfs_stats ;
   struct ath_antenna_stats ant_stats[2U] ;
   u32 reset[13U] ;
};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.h"
struct ath9k_debug {
   struct dentry *debugfs_phy ;
   u32 regidx ;
   struct ath_stats stats ;
};
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.h"
struct ath_mci_profile {
   struct list_head info ;
   unsigned long status[1U] ;
   u16 aggr_limit ;
   u8 num_mgmt ;
   u8 num_sco ;
   u8 num_a2dp ;
   u8 num_hid ;
   u8 num_pan ;
   u8 num_other_acl ;
   u8 num_bdr ;
   u8 voice_priority ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.h"
struct ath_mci_buf {
   void *bf_addr ;
   dma_addr_t bf_paddr ;
   u32 bf_len ;
};
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.h"
struct ath_mci_coex {
   struct ath_mci_buf sched_buf ;
   struct ath_mci_buf gpm_buf ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/dfs_pattern_detector.h"
struct ath_dfs_pool_stats {
   u32 pool_reference ;
   u32 pulse_allocated ;
   u32 pulse_alloc_error ;
   u32 pulse_used ;
   u32 pseq_allocated ;
   u32 pseq_alloc_error ;
   u32 pseq_used ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/dfs_pattern_detector.h"
struct pulse_event {
   u64 ts ;
   u16 freq ;
   u8 width ;
   u8 rssi ;
   bool chirp ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/dfs_pattern_detector.h"
struct radar_detector_specs {
   u8 type_id ;
   u8 width_min ;
   u8 width_max ;
   u16 pri_min ;
   u16 pri_max ;
   u8 num_pri ;
   u8 ppb ;
   u8 ppb_thresh ;
   u8 max_pri_tolerance ;
   bool chirp ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/dfs_pattern_detector.h"
struct dfs_pattern_detector {
   void (*exit)(struct dfs_pattern_detector *) ;
   bool (*set_dfs_domain)(struct dfs_pattern_detector *, enum nl80211_dfs_regions ) ;
   bool (*add_pulse)(struct dfs_pattern_detector *, struct pulse_event *, struct radar_detector_specs *) ;
   struct ath_dfs_pool_stats (*get_stats)(struct dfs_pattern_detector *) ;
   enum nl80211_dfs_regions region ;
   u8 num_radar_types ;
   u64 last_pulse_ts ;
   struct ath_common *common ;
   struct radar_detector_specs *radar_spec ;
   struct list_head channel_detectors ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs.h"
struct ath_vif;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_descdma {
   void *dd_desc ;
   dma_addr_t dd_desc_paddr ;
   u32 dd_desc_len ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_txq {
   int mac80211_qnum ;
   u32 axq_qnum ;
   void *axq_link ;
   struct list_head axq_q ;
   spinlock_t axq_lock ;
   u32 axq_depth ;
   u32 axq_ampdu_depth ;
   bool axq_tx_inprogress ;
   struct list_head txq_fifo[8U] ;
   u8 txq_headidx ;
   u8 txq_tailidx ;
   int pending_frames ;
   struct sk_buff_head complete_q ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_rxbuf {
   struct list_head list ;
   struct sk_buff *bf_mpdu ;
   void *bf_desc ;
   dma_addr_t bf_daddr ;
   dma_addr_t bf_buf_addr ;
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_buf_state {
   u8 bf_type ;
   u8 bfs_paprd ;
   u8 ndelim ;
   bool stale ;
   u16 seqno ;
   unsigned long bfs_paprd_timestamp ;
};
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_buf {
   struct list_head list ;
   struct ath_buf *bf_lastbf ;
   struct ath_buf *bf_next ;
   struct sk_buff *bf_mpdu ;
   void *bf_desc ;
   dma_addr_t bf_daddr ;
   dma_addr_t bf_buf_addr ;
   struct ieee80211_tx_rate rates[4U] ;
   struct ath_buf_state bf_state ;
};
#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_node {
   struct ath_softc *sc ;
   struct ieee80211_sta *sta ;
   struct ieee80211_vif *vif ;
   u16 maxampdu ;
   u8 mpdudensity ;
   s8 ps_key ;
   bool sleeping ;
   bool no_ps_filter ;
   struct ath_rx_rate_stats rx_rate_stats ;
   u8 key_idx[4U] ;
   int ackto ;
   struct list_head list ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_tx {
   u32 txqsetup ;
   spinlock_t txbuflock ;
   struct list_head txbuf ;
   struct ath_txq txq[10U] ;
   struct ath_descdma txdma ;
   struct ath_txq *txq_map[4U] ;
   struct ath_txq *uapsdq ;
   u16 max_aggr_framelen[4U][4U][32U] ;
};
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_rx_edma {
   struct sk_buff_head rx_fifo ;
   u32 rx_fifo_hwsize ;
};
#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_rx {
   u8 defant ;
   u8 rxotherant ;
   bool discard_next ;
   u32 *rxlink ;
   u32 num_pkts ;
   struct list_head rxbuf ;
   struct ath_descdma rxdma ;
   struct ath_rx_edma rx_edma[2U] ;
   struct ath_rxbuf *buf_hold ;
   struct sk_buff *frag ;
   u32 ampdu_ref ;
};
#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_acq {
   struct list_head acq_new ;
   struct list_head acq_old ;
   spinlock_t lock ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_chanctx {
   struct cfg80211_chan_def chandef ;
   struct list_head vifs ;
   struct ath_acq acq[4U] ;
   int hw_queue_base ;
   struct ieee80211_vif *primary_sta ;
   struct ath_beacon_config beacon ;
   struct ath9k_hw_cal_data caldata ;
   struct timespec64 tsf_ts ;
   u64 tsf_val ;
   u32 last_beacon ;
   int flush_timeout ;
   u16 txpower ;
   u16 cur_txpower ;
   bool offchannel ;
   bool stopped ;
   bool active ;
   bool assigned ;
   bool switch_after_beacon ;
   short nvifs ;
   short nvifs_assigned ;
   unsigned int rxfilter ;
};
#line 368 
enum ath_chanctx_state {
    ATH_CHANCTX_STATE_IDLE = 0,
    ATH_CHANCTX_STATE_WAIT_FOR_BEACON = 1,
    ATH_CHANCTX_STATE_WAIT_FOR_TIMER = 2,
    ATH_CHANCTX_STATE_SWITCH = 3,
    ATH_CHANCTX_STATE_FORCE_ACTIVE = 4
};
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_chanctx_sched {
   bool beacon_pending ;
   bool beacon_adjust ;
   bool offchannel_pending ;
   bool wait_switch ;
   bool force_noa_update ;
   bool extend_absence ;
   bool mgd_prepare_tx ;
   enum ath_chanctx_state state ;
   u8 beacon_miss ;
   u32 next_tbtt ;
   u32 switch_start_time ;
   unsigned int offchannel_duration ;
   unsigned int channel_switch_time ;
   struct timer_list timer ;
};
#line 396 
enum ath_offchannel_state {
    ATH_OFFCHANNEL_IDLE = 0,
    ATH_OFFCHANNEL_PROBE_SEND = 1,
    ATH_OFFCHANNEL_PROBE_WAIT = 2,
    ATH_OFFCHANNEL_SUSPEND = 3,
    ATH_OFFCHANNEL_ROC_START = 4,
    ATH_OFFCHANNEL_ROC_WAIT = 5,
    ATH_OFFCHANNEL_ROC_DONE = 6
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_offchannel {
   struct ath_chanctx chan ;
   struct timer_list timer ;
   struct cfg80211_scan_request *scan_req ;
   struct ieee80211_vif *scan_vif ;
   int scan_idx ;
   enum ath_offchannel_state state ;
   struct ieee80211_channel *roc_chan ;
   struct ieee80211_vif *roc_vif ;
   int roc_duration ;
   int duration ;
};
#line 622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_vif {
   struct list_head list ;
   u16 seq_no ;
   u8 bssid[6U] ;
   u16 aid ;
   bool assoc ;
   struct ieee80211_vif *vif ;
   struct ath_node mcast_node ;
   int av_bslot ;
   __le64 tsf_adjust ;
   struct ath_buf *av_bcbuf ;
   struct ath_chanctx *chanctx ;
   struct ieee80211_noa_data noa ;
   u8 noa_index ;
   u32 offchannel_start ;
   u32 offchannel_duration ;
   u32 noa_start ;
   u32 noa_duration ;
   bool periodic_noa ;
   bool oneshot_noa ;
};
#line 678 
enum ldv_21477 {
    OK = 0,
    UPDATE = 1,
    COMMIT = 2
};
#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_beacon {
   enum ldv_21477 updateslot ;
   u32 beaconq ;
   u32 bmisscnt ;
   struct ieee80211_vif *bslot[8U] ;
   int slottime ;
   int slotupdate ;
   struct ath_descdma bdma ;
   struct ath_txq *cabq ;
   struct list_head bbuf ;
   bool tx_processed ;
   bool tx_last ;
};
#line 772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_btcoex {
   spinlock_t btcoex_lock ;
   struct timer_list period_timer ;
   struct timer_list no_stomp_timer ;
   u32 bt_priority_cnt ;
   unsigned long bt_priority_time ;
   unsigned long op_flags ;
   int bt_stomp_type ;
   u32 btcoex_no_stomp ;
   u32 btcoex_period ;
   u32 btscan_no_stomp ;
   u32 duty_cycle ;
   u32 bt_wait_time ;
   int rssi_count ;
   struct ath_mci_profile mci ;
   u8 stomp_audio ;
};
#line 910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_ant_comb {
   u16 count ;
   u16 total_pkt_count ;
   bool scan ;
   bool scan_not_start ;
   int main_total_rssi ;
   int alt_total_rssi ;
   int alt_recv_cnt ;
   int main_recv_cnt ;
   int rssi_lna1 ;
   int rssi_lna2 ;
   int rssi_add ;
   int rssi_sub ;
   int rssi_first ;
   int rssi_second ;
   int rssi_third ;
   int ant_ratio ;
   int ant_ratio2 ;
   bool alt_good ;
   int quick_scan_cnt ;
   enum ath9k_ant_div_comb_lna_conf main_conf ;
   enum ath9k_ant_div_comb_lna_conf first_quick_scan_conf ;
   enum ath9k_ant_div_comb_lna_conf second_quick_scan_conf ;
   bool first_ratio ;
   bool second_ratio ;
   unsigned long scan_start_time ;
   int low_rssi_thresh ;
   int fast_div_bias ;
};
#line 982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_softc {
   struct ieee80211_hw *hw ;
   struct device *dev ;
   struct survey_info *cur_survey ;
   struct survey_info survey[38U] ;
   spinlock_t intr_lock ;
   struct tasklet_struct intr_tq ;
   struct tasklet_struct bcon_tasklet ;
   struct ath_hw *sc_ah ;
   void *mem ;
   int irq ;
   spinlock_t sc_serial_rw ;
   spinlock_t sc_pm_lock ;
   spinlock_t sc_pcu_lock ;
   struct mutex mutex ;
   struct work_struct paprd_work ;
   struct work_struct hw_reset_work ;
   struct completion paprd_complete ;
   wait_queue_head_t tx_wait ;
   struct work_struct chanctx_work ;
   struct ath_gen_timer *p2p_ps_timer ;
   struct ath_vif *p2p_ps_vif ;
   struct ath_chanctx_sched sched ;
   struct ath_offchannel offchannel ;
   struct ath_chanctx *next_chan ;
   struct completion go_beacon ;
   struct timespec64 last_event_time ;
   unsigned long driver_data ;
   u8 gtt_cnt ;
   u32 intrstatus ;
   u16 ps_flags ;
   bool ps_enabled ;
   bool ps_idle ;
   short nbcnvifs ;
   unsigned long ps_usecount ;
   struct ath_rx rx ;
   struct ath_tx tx ;
   struct ath_beacon beacon ;
   struct cfg80211_chan_def cur_chandef ;
   struct ath_chanctx chanctx[2U] ;
   struct ath_chanctx *cur_chan ;
   spinlock_t chan_lock ;
   bool led_registered ;
   char led_name[32U] ;
   struct led_classdev led_cdev ;
   struct ath9k_debug debug ;
   struct delayed_work hw_check_work ;
   struct delayed_work hw_pll_work ;
   struct timer_list sleep_timer ;
   struct ath_btcoex btcoex ;
   struct ath_mci_coex mci_coex ;
   struct work_struct mci_work ;
   struct ath_descdma txsdma ;
   struct ath_ant_comb ant_comb ;
   u8 ant_tx ;
   u8 ant_rx ;
   struct dfs_pattern_detector *dfs_detector ;
   u64 dfs_prev_pulse_ts ;
   u32 wow_enabled ;
   struct ath_spec_scan_priv spec_priv ;
   struct ieee80211_vif *tx99_vif ;
   struct sk_buff *tx99_skb ;
   bool tx99_state ;
   s16 tx99_power ;
   u32 wow_intr_before_sleep ;
   bool force_wow ;
   u32 rng_last ;
   struct task_struct *rng_task ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1047 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1049 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1051 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct napi_struct;
#line 1867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_1538 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_1540 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_1542 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_1544 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 2026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_1554 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_1556 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_hdr {
   __le16 frame_control ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
   u8 addr4[6U] ;
} __attribute__((__packed__, __aligned__(2)));
#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_msrment_ie {
   u8 token ;
   u8 mode ;
   u8 type ;
   u8 request[0U] ;
} __attribute__((__packed__));
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_ext_chansw_ie {
   u8 mode ;
   u8 new_operating_class ;
   u8 new_ch_num ;
   u8 count ;
} __attribute__((__packed__));
#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_tim_ie {
   u8 dtim_count ;
   u8 dtim_period ;
   u8 bitmap_ctrl ;
   u8 virtual_map[1U] ;
} __attribute__((__packed__));
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_tpc_report_ie {
   u8 tx_power ;
   u8 link_margin ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_auth_1726 {
   __le16 auth_alg ;
   __le16 auth_transaction ;
   __le16 status_code ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_deauth_1727 {
   __le16 reason_code ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_assoc_req_1728 {
   __le16 capab_info ;
   __le16 listen_interval ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_assoc_resp_1729 {
   __le16 capab_info ;
   __le16 status_code ;
   __le16 aid ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_reassoc_resp_1730 {
   __le16 capab_info ;
   __le16 status_code ;
   __le16 aid ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_reassoc_req_1731 {
   __le16 capab_info ;
   __le16 listen_interval ;
   u8 current_ap[6U] ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_disassoc_1732 {
   __le16 reason_code ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_beacon_1733 {
   __le64 timestamp ;
   __le16 beacon_int ;
   __le16 capab_info ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_probe_req_1734 {
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_probe_resp_1735 {
   __le64 timestamp ;
   __le16 beacon_int ;
   __le16 capab_info ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_wme_action_1738 {
   u8 action_code ;
   u8 dialog_token ;
   u8 status_code ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_chan_switch_1739 {
   u8 action_code ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_ext_chan_switch_1740 {
   u8 action_code ;
   struct ieee80211_ext_chansw_ie data ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_measurement_1741 {
   u8 action_code ;
   u8 dialog_token ;
   u8 element_id ;
   u8 length ;
   struct ieee80211_msrment_ie msr_elem ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_addba_req_1742 {
   u8 action_code ;
   u8 dialog_token ;
   __le16 capab ;
   __le16 timeout ;
   __le16 start_seq_num ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_addba_resp_1743 {
   u8 action_code ;
   u8 dialog_token ;
   __le16 status ;
   __le16 capab ;
   __le16 timeout ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_delba_1744 {
   u8 action_code ;
   __le16 params ;
   __le16 reason_code ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_self_prot_1745 {
   u8 action_code ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_mesh_action_1746 {
   u8 action_code ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_sa_query_1747 {
   u8 action ;
   u8 trans_id[2U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_ht_smps_1748 {
   u8 action ;
   u8 smps_control ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_ht_notify_cw_1749 {
   u8 action_code ;
   u8 chanwidth ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_tdls_discover_resp_1750 {
   u8 action_code ;
   u8 dialog_token ;
   __le16 capability ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_vht_opmode_notif_1751 {
   u8 action_code ;
   u8 operating_mode ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_vht_group_notif_1752 {
   u8 action_code ;
   u8 membership[8U] ;
   u8 position[16U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_tpc_report_1753 {
   u8 action_code ;
   u8 dialog_token ;
   u8 tpc_elem_id ;
   u8 tpc_elem_length ;
   struct ieee80211_tpc_report_ie tpc ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_ftm_1754 {
   u8 action_code ;
   u8 dialog_token ;
   u8 follow_up ;
   u8 tod[6U] ;
   u8 toa[6U] ;
   __le16 tod_error ;
   __le16 toa_error ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
union __anonunion_u_1737 {
   struct __anonstruct_wme_action_1738 wme_action ;
   struct __anonstruct_chan_switch_1739 chan_switch ;
   struct __anonstruct_ext_chan_switch_1740 ext_chan_switch ;
   struct __anonstruct_measurement_1741 measurement ;
   struct __anonstruct_addba_req_1742 addba_req ;
   struct __anonstruct_addba_resp_1743 addba_resp ;
   struct __anonstruct_delba_1744 delba ;
   struct __anonstruct_self_prot_1745 self_prot ;
   struct __anonstruct_mesh_action_1746 mesh_action ;
   struct __anonstruct_sa_query_1747 sa_query ;
   struct __anonstruct_ht_smps_1748 ht_smps ;
   struct __anonstruct_ht_notify_cw_1749 ht_notify_cw ;
   struct __anonstruct_tdls_discover_resp_1750 tdls_discover_resp ;
   struct __anonstruct_vht_opmode_notif_1751 vht_opmode_notif ;
   struct __anonstruct_vht_group_notif_1752 vht_group_notif ;
   struct __anonstruct_tpc_report_1753 tpc_report ;
   struct __anonstruct_ftm_1754 ftm ;
};
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_action_1736 {
   u8 category ;
   union __anonunion_u_1737 u ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
union __anonunion_u_1725 {
   struct __anonstruct_auth_1726 auth ;
   struct __anonstruct_deauth_1727 deauth ;
   struct __anonstruct_assoc_req_1728 assoc_req ;
   struct __anonstruct_assoc_resp_1729 assoc_resp ;
   struct __anonstruct_reassoc_resp_1730 reassoc_resp ;
   struct __anonstruct_reassoc_req_1731 reassoc_req ;
   struct __anonstruct_disassoc_1732 disassoc ;
   struct __anonstruct_beacon_1733 beacon ;
   struct __anonstruct_probe_req_1734 probe_req ;
   struct __anonstruct_probe_resp_1735 probe_resp ;
   struct __anonstruct_action_1736 action ;
};
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_mgmt {
   __le16 frame_control ;
   __le16 duration ;
   u8 da[6U] ;
   u8 sa[6U] ;
   u8 bssid[6U] ;
   __le16 seq_ctrl ;
   union __anonunion_u_1725 u ;
} __attribute__((__packed__, __aligned__(2)));
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
enum rate_info_bw {
    RATE_INFO_BW_20 = 0,
    RATE_INFO_BW_5 = 1,
    RATE_INFO_BW_10 = 2,
    RATE_INFO_BW_40 = 3,
    RATE_INFO_BW_80 = 4,
    RATE_INFO_BW_160 = 5,
    RATE_INFO_BW_HE_RU = 6
};
#line 1119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_rx_status;
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_rx_status {
   u64 mactime ;
   u64 boottime_ns ;
   u32 device_timestamp ;
   u32 ampdu_reference ;
   u32 flag ;
   u16 freq ;
   u8 enc_flags ;
   u8 encoding : 2 ;
   u8 bw : 3 ;
   u8 he_ru : 3 ;
   u8 he_gi : 2 ;
   u8 he_dcm : 1 ;
   u8 rate_idx ;
   u8 nss ;
   u8 rx_flags ;
   u8 band ;
   u8 antenna ;
   s8 signal ;
   u8 chains ;
   s8 chain_signal[4U] ;
   u8 ampdu_delimiter_crc ;
   u8 zero_length_psdu_type ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
struct ath_rx_status {
   u32 rs_tstamp ;
   u16 rs_datalen ;
   u8 rs_status ;
   u8 rs_phyerr ;
   int8_t rs_rssi ;
   u8 rs_keyix ;
   u8 rs_rate ;
   u8 rs_antenna ;
   u8 rs_more ;
   int8_t rs_rssi_ctl[3U] ;
   int8_t rs_rssi_ext[3U] ;
   u8 rs_isaggr ;
   u8 rs_firstaggr ;
   u8 rs_moreaggr ;
   u8 rs_num_delims ;
   u8 rs_flags ;
   bool is_mybeacon ;
   u32 evm0 ;
   u32 evm1 ;
   u32 evm2 ;
   u32 evm3 ;
   u32 evm4 ;
   u16 enc_flags ;
   enum rate_info_bw bw ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
struct ath_desc {
   u32 ds_link ;
   u32 ds_data ;
   u32 ds_ctl0 ;
   u32 ds_ctl1 ;
   u32 ds_hw[20U] ;
   void *ds_vdata ;
} __attribute__((__packed__, __aligned__(4)));
#line 713 
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
enum ath9k_rx_qtype {
    ATH9K_RX_QUEUE_HP = 0,
    ATH9K_RX_QUEUE_LP = 1,
    ATH9K_RX_QUEUE_MAX = 2
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
enum ath_chanctx_event {
    ATH_CHANCTX_EVENT_BEACON_PREPARE = 0,
    ATH_CHANCTX_EVENT_BEACON_SENT = 1,
    ATH_CHANCTX_EVENT_TSF_TIMER = 2,
    ATH_CHANCTX_EVENT_BEACON_RECEIVED = 3,
    ATH_CHANCTX_EVENT_AUTHORIZED = 4,
    ATH_CHANCTX_EVENT_SWITCH = 5,
    ATH_CHANCTX_EVENT_ASSIGN = 6,
    ATH_CHANCTX_EVENT_UNASSIGN = 7,
    ATH_CHANCTX_EVENT_CHANGE = 8,
    ATH_CHANCTX_EVENT_ENABLE_MULTICHANNEL = 9
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_mac.h"
struct ar9003_txs {
   u32 ds_info ;
   u32 status1 ;
   u32 status2 ;
   u32 status3 ;
   u32 status4 ;
   u32 status5 ;
   u32 status6 ;
   u32 status7 ;
   u32 status8 ;
} __attribute__((__packed__, __aligned__(4)));
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_ecn.h"
typedef u32 codel_time_t;
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_3077 {
   struct ieee80211_tx_rate rates[4U] ;
   s8 rts_cts_rate_idx ;
   u8 use_rts : 1 ;
   u8 use_cts_prot : 1 ;
   u8 short_preamble : 1 ;
   u8 skip_table : 1 ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_3076 {
   struct __anonstruct_3077 __anonCompField___anonunion_3076_192 ;
   unsigned long jiffies ;
};
#line 1004 
struct ieee80211_key_conf;
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_control_3075 {
   union __anonunion_3076 __anonCompField___anonstruct_control_3075_193 ;
   struct ieee80211_vif *vif ;
   struct ieee80211_key_conf *hw_key ;
   u32 flags ;
   codel_time_t enqueue_time ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_ack_3078 {
   u64 cookie ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_status_3079 {
   struct ieee80211_tx_rate rates[4U] ;
   s32 ack_signal ;
   u8 ampdu_ack_len ;
   u8 ampdu_len ;
   u8 antenna ;
   u16 tx_time ;
   bool is_valid_ack_signal ;
   void *status_driver_data[2U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_3080 {
   struct ieee80211_tx_rate driver_rates[4U] ;
   u8 pad[4U] ;
   void *rate_driver_data[3U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_3074 {
   struct __anonstruct_control_3075 control ;
   struct __anonstruct_ack_3078 ack ;
   struct __anonstruct_status_3079 status ;
   struct __anonstruct_3080 __anonCompField___anonunion_3074_194 ;
   void *driver_data[5U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_info {
   u32 flags ;
   u8 band ;
   u8 hw_queue ;
   u16 ack_frame_id : 6 ;
   u16 tx_time_est : 10 ;
   union __anonunion_3074 __anonCompField_ieee80211_tx_info_195 ;
};
#line 1772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_key_conf {
   atomic64_t tx_pn ;
   u32 cipher ;
   u8 icv_len ;
   u8 iv_len ;
   u8 hw_key_idx ;
   s8 keyidx ;
   u16 flags ;
   u8 keylen ;
   u8 key[0U] ;
};
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs_debug.h"
enum ath_reset_type {
    RESET_TYPE_BB_HANG = 0,
    RESET_TYPE_BB_WATCHDOG = 1,
    RESET_TYPE_FATAL_INT = 2,
    RESET_TYPE_TX_ERROR = 3,
    RESET_TYPE_TX_GTT = 4,
    RESET_TYPE_TX_HANG = 5,
    RESET_TYPE_PLL_HANG = 6,
    RESET_TYPE_MAC_HANG = 7,
    RESET_TYPE_BEACON_STUCK = 8,
    RESET_TYPE_MCI = 9,
    RESET_TYPE_CALIBRATION = 10,
    RESET_TX_DMA_ERROR = 11,
    RESET_RX_DMA_ERROR = 12,
    __RESET_TYPE_MAX = 13
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_tx_control {
   struct ath_txq *txq ;
   struct ath_node *an ;
   struct ieee80211_sta *sta ;
   u8 paprd ;
};
#line 3039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_sta_flag_update {
   __u32 mask ;
   __u32 set ;
} __attribute__((__packed__));
#line 3362 
enum nl80211_mesh_power_mode {
    NL80211_MESH_POWER_UNKNOWN = 0,
    NL80211_MESH_POWER_ACTIVE = 1,
    NL80211_MESH_POWER_LIGHT_SLEEP = 2,
    NL80211_MESH_POWER_DEEP_SLEEP = 3,
    __NL80211_MESH_POWER_AFTER_LAST = 4,
    NL80211_MESH_POWER_MAX = 3
};
#line 4593 
enum nl80211_txrate_gi {
    NL80211_TXRATE_DEFAULT_GI = 0,
    NL80211_TXRATE_FORCE_SGI = 1,
    NL80211_TXRATE_FORCE_LGI = 2
};
#line 5912 
enum nl80211_nan_function_type {
    NL80211_NAN_FUNC_PUBLISH = 0,
    NL80211_NAN_FUNC_SUBSCRIBE = 1,
    NL80211_NAN_FUNC_FOLLOW_UP = 2,
    __NL80211_NAN_FUNC_TYPE_AFTER_LAST = 3,
    NL80211_NAN_FUNC_MAX_TYPE = 2
};
#line 6001 
enum nl80211_preamble {
    NL80211_PREAMBLE_LEGACY = 0,
    NL80211_PREAMBLE_HT = 1,
    NL80211_PREAMBLE_VHT = 2,
    NL80211_PREAMBLE_DMG = 3
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct pdev_archdata {
   };
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct mfd_cell;
#line 1915 
struct platform_device_id;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_device {
   char *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u64 dma_mask ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id *id_entry ;
   char *driver_override ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_driver {
   int (*probe)(struct platform_device *) ;
   int (*remove)(struct platform_device *) ;
   void (*shutdown)(struct platform_device *) ;
   int (*suspend)(struct platform_device *, pm_message_t ) ;
   int (*resume)(struct platform_device *) ;
   struct device_driver driver ;
   struct platform_device_id *id_table ;
   bool prevent_deferred_probe ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 1656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mu_edca_param_ac_rec {
   u8 aifsn ;
   u8 ecw_min_max ;
   u8 mu_edca_timer ;
} __attribute__((__packed__));
#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_control_3839 {
   u32 legacy ;
   u8 ht_mcs[10U] ;
   u16 vht_mcs[8U] ;
   enum nl80211_txrate_gi gi ;
};
#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bitrate_mask {
   struct __anonstruct_control_3839 control[4U] ;
};
#line 1314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct rate_info {
   u8 flags ;
   u8 mcs ;
   u16 legacy ;
   u8 nss ;
   u8 bw ;
   u8 he_gi ;
   u8 he_dcm ;
   u8 he_ru_alloc ;
   u8 n_bonded_ch ;
};
#line 1351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct sta_bss_parameters {
   u8 flags ;
   u8 dtim_period ;
   u16 beacon_interval ;
};
#line 1373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_txq_stats {
   u32 filled ;
   u32 backlog_bytes ;
   u32 backlog_packets ;
   u32 flows ;
   u32 drops ;
   u32 ecn_marks ;
   u32 overlimit ;
   u32 overmemory ;
   u32 collisions ;
   u32 tx_bytes ;
   u32 tx_packets ;
   u32 max_flows ;
};
#line 1399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_tid_stats {
   u32 filled ;
   u64 rx_msdu ;
   u64 tx_msdu ;
   u64 tx_msdu_retries ;
   u64 tx_msdu_failed ;
   struct cfg80211_txq_stats txq_stats ;
};
#line 1476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct station_info {
   u64 filled ;
   u32 connected_time ;
   u32 inactive_time ;
   u64 assoc_at ;
   u64 rx_bytes ;
   u64 tx_bytes ;
   u16 llid ;
   u16 plid ;
   u8 plink_state ;
   s8 signal ;
   s8 signal_avg ;
   u8 chains ;
   s8 chain_signal[4U] ;
   s8 chain_signal_avg[4U] ;
   struct rate_info txrate ;
   struct rate_info rxrate ;
   u32 rx_packets ;
   u32 tx_packets ;
   u32 tx_retries ;
   u32 tx_failed ;
   u32 rx_dropped_misc ;
   struct sta_bss_parameters bss_param ;
   struct nl80211_sta_flag_update sta_flags ;
   int generation ;
   u8 *assoc_req_ies ;
   size_t assoc_req_ies_len ;
   u32 beacon_loss_count ;
   s64 t_offset ;
   enum nl80211_mesh_power_mode local_pm ;
   enum nl80211_mesh_power_mode peer_pm ;
   enum nl80211_mesh_power_mode nonpeer_pm ;
   u32 expected_throughput ;
   u64 tx_duration ;
   u64 rx_duration ;
   u64 rx_beacon ;
   u8 rx_beacon_signal_avg ;
   u8 connected_to_gate ;
   struct cfg80211_tid_stats *pertid ;
   s8 ack_signal ;
   s8 avg_ack_signal ;
   u16 airtime_weight ;
   u32 rx_mpdu_count ;
   u32 fcs_err_count ;
   u32 airtime_link_metric ;
};
#line 2821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_gtk_rekey_data {
   u8 *kek ;
   u8 *kck ;
   u8 *replay_ctr ;
};
#line 2921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_nan_conf {
   u8 master_pref ;
   u8 bands ;
};
#line 2944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_nan_func_filter {
   u8 *filter ;
   u8 len ;
};
#line 2978  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_nan_func {
   enum nl80211_nan_function_type type ;
   u8 service_id[6U] ;
   u8 publish_type ;
   bool close_range ;
   bool publish_bcast ;
   bool subscribe_active ;
   u8 followup_id ;
   u8 followup_reqid ;
   struct mac_address followup_dest ;
   u32 ttl ;
   u8 *serv_spec_info ;
   u8 serv_spec_info_len ;
   bool srf_include ;
   u8 *srf_bf ;
   u8 srf_bf_len ;
   u8 srf_bf_idx ;
   struct mac_address *srf_macs ;
   int srf_num_macs ;
   struct cfg80211_nan_func_filter *rx_filters ;
   struct cfg80211_nan_func_filter *tx_filters ;
   u8 num_tx_filters ;
   u8 num_rx_filters ;
   u8 instance_id ;
   u64 cookie ;
};
#line 3072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ftm_responder_stats {
   u32 filled ;
   u32 success_num ;
   u32 partial_num ;
   u32 failed_num ;
   u32 asap_num ;
   u32 non_asap_num ;
   u64 total_duration_ms ;
   u32 unknown_triggers_num ;
   u32 reschedule_requests_num ;
   u32 out_of_window_triggers_num ;
};
#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_ftm_request_peer {
   enum nl80211_preamble preamble ;
   u16 burst_period ;
   u8 requested : 1 ;
   u8 asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
   u8 num_bursts_exp ;
   u8 burst_duration ;
   u8 ftms_per_burst ;
   u8 ftmr_retries ;
};
#line 3230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_request_peer {
   u8 addr[6U] ;
   struct cfg80211_chan_def chandef ;
   u8 report_ap_tsf : 1 ;
   struct cfg80211_pmsr_ftm_request_peer ftm ;
};
#line 3253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_request {
   u64 cookie ;
   void *drv_data ;
   u32 n_peers ;
   u32 nl_portid ;
   u32 timeout ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   struct list_head list ;
   struct cfg80211_pmsr_request_peer peers[] ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_queue_params {
   u16 txop ;
   u16 cw_min ;
   u16 cw_max ;
   u8 aifs ;
   bool acm ;
   bool uapsd ;
   bool mu_edca ;
   struct ieee80211_he_mu_edca_param_ac_rec mu_edca_param_rec ;
};
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_low_level_stats {
   unsigned int dot11ACKFailureCount ;
   unsigned int dot11RTSFailureCount ;
   unsigned int dot11FCSErrorCount ;
   unsigned int dot11RTSSuccessCount ;
};
#line 235 
enum ieee80211_chanctx_switch_mode {
    CHANCTX_SWMODE_REASSIGN_VIF = 0,
    CHANCTX_SWMODE_SWAP_CONTEXTS = 1
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_vif_chanctx_switch {
   struct ieee80211_vif *vif ;
   struct ieee80211_chanctx_conf *old_ctx ;
   struct ieee80211_chanctx_conf *new_ctx ;
};
#line 304 
enum ieee80211_event_type {
    RSSI_EVENT = 0,
    MLME_EVENT = 1,
    BAR_RX_EVENT = 2,
    BA_FRAME_TIMEOUT = 3
};
#line 311 
enum ieee80211_rssi_event_data {
    RSSI_EVENT_HIGH = 0,
    RSSI_EVENT_LOW = 1
};
#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_rssi_event {
   enum ieee80211_rssi_event_data data ;
};
#line 395 
enum ieee80211_mlme_event_data {
    AUTH_EVENT = 0,
    ASSOC_EVENT = 1,
    DEAUTH_RX_EVENT = 2,
    DEAUTH_TX_EVENT = 3
};
#line 402 
enum ieee80211_mlme_event_status {
    MLME_SUCCESS = 0,
    MLME_DENIED = 1,
    MLME_TIMEOUT = 2
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_mlme_event {
   enum ieee80211_mlme_event_data data ;
   enum ieee80211_mlme_event_status status ;
   u16 reason ;
};
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ba_event {
   struct ieee80211_sta *sta ;
   u16 tid ;
   u16 ssn ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_u_4108 {
   struct ieee80211_rssi_event rssi ;
   struct ieee80211_mlme_event mlme ;
   struct ieee80211_ba_event ba ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_event {
   enum ieee80211_event_type type ;
   union __anonunion_u_4108 u ;
};
#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_scan_ies {
   u8 *ies[4U] ;
   size_t len[4U] ;
   u8 *common_ies ;
   size_t common_ie_len ;
};
#line 1556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_channel_switch {
   u64 timestamp ;
   u32 device_timestamp ;
   bool block_tx ;
   struct cfg80211_chan_def chandef ;
   u8 count ;
   u32 delay ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_tkip_4117 {
   u32 iv32 ;
   u16 iv16 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_ccmp_4118 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_aes_cmac_4119 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_aes_gmac_4120 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_gcmp_4121 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_hw_4122 {
   u8 seq[16U] ;
   u8 seq_len ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_4116 {
   struct __anonstruct_tkip_4117 tkip ;
   struct __anonstruct_ccmp_4118 ccmp ;
   struct __anonstruct_aes_cmac_4119 aes_cmac ;
   struct __anonstruct_aes_gmac_4120 aes_gmac ;
   struct __anonstruct_gcmp_4121 gcmp ;
   struct __anonstruct_hw_4122 hw ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_key_seq {
   union __anonunion_4116 __anonCompField_ieee80211_key_seq_196 ;
};
#line 1857 
enum set_key_cmd {
    SET_KEY = 0,
    DISABLE_KEY = 1
};
#line 1862 
enum ieee80211_sta_state {
    IEEE80211_STA_NOTEXIST = 0,
    IEEE80211_STA_NONE = 1,
    IEEE80211_STA_AUTH = 2,
    IEEE80211_STA_ASSOC = 3,
    IEEE80211_STA_AUTHORIZED = 4
};
#line 2037 
enum sta_notify_cmd {
    STA_NOTIFY_SLEEP = 0,
    STA_NOTIFY_AWAKE = 1
};
#line 2057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_control {
   struct ieee80211_sta *sta ;
};
#line 2546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_scan_request {
   struct ieee80211_scan_ies ies ;
   struct cfg80211_scan_request req ;
};
#line 2566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tdls_ch_sw_params {
   struct ieee80211_sta *sta ;
   struct cfg80211_chan_def *chandef ;
   u8 action_code ;
   u32 status ;
   u32 timestamp ;
   u16 switch_time ;
   u16 switch_timeout ;
   struct sk_buff *tmpl_skb ;
   u32 ch_sw_tm_ie ;
};
#line 2662 
enum ieee80211_ampdu_mlme_action {
    IEEE80211_AMPDU_RX_START = 0,
    IEEE80211_AMPDU_RX_STOP = 1,
    IEEE80211_AMPDU_TX_START = 2,
    IEEE80211_AMPDU_TX_STOP_CONT = 3,
    IEEE80211_AMPDU_TX_STOP_FLUSH = 4,
    IEEE80211_AMPDU_TX_STOP_FLUSH_CONT = 5,
    IEEE80211_AMPDU_TX_OPERATIONAL = 6
};
#line 3161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ampdu_params {
   enum ieee80211_ampdu_mlme_action action ;
   struct ieee80211_sta *sta ;
   u16 tid ;
   u16 ssn ;
   u16 buf_size ;
   bool amsdu ;
   u16 timeout ;
};
#line 3170 
enum ieee80211_frame_release_type {
    IEEE80211_FRAME_RELEASE_PSPOLL = 0,
    IEEE80211_FRAME_RELEASE_UAPSD = 1
};
#line 3182 
enum ieee80211_roc_type {
    IEEE80211_ROC_TYPE_NORMAL = 0,
    IEEE80211_ROC_TYPE_MGMT_TX = 1
};
#line 3187 
enum ieee80211_reconfig_type {
    IEEE80211_RECONFIG_TYPE_RESTART = 0,
    IEEE80211_RECONFIG_TYPE_SUSPEND = 1
};
#line 3778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ops {
   void (*tx)(struct ieee80211_hw *, struct ieee80211_tx_control *, struct sk_buff *) ;
   int (*start)(struct ieee80211_hw *) ;
   void (*stop)(struct ieee80211_hw *) ;
   int (*suspend)(struct ieee80211_hw *, struct cfg80211_wowlan *) ;
   int (*resume)(struct ieee80211_hw *) ;
   void (*set_wakeup)(struct ieee80211_hw *, bool ) ;
   int (*add_interface)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*change_interface)(struct ieee80211_hw *, struct ieee80211_vif *, enum nl80211_iftype , bool ) ;
   void (*remove_interface)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*config)(struct ieee80211_hw *, u32 ) ;
   void (*bss_info_changed)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_bss_conf *, u32 ) ;
   int (*start_ap)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*stop_ap)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   u64 (*prepare_multicast)(struct ieee80211_hw *, struct netdev_hw_addr_list *) ;
   void (*configure_filter)(struct ieee80211_hw *, unsigned int , unsigned int *, u64 ) ;
   void (*config_iface_filter)(struct ieee80211_hw *, struct ieee80211_vif *, unsigned int , unsigned int ) ;
   int (*set_tim)(struct ieee80211_hw *, struct ieee80211_sta *, bool ) ;
   int (*set_key)(struct ieee80211_hw *, enum set_key_cmd , struct ieee80211_vif *, struct ieee80211_sta *, struct ieee80211_key_conf *) ;
   void (*update_tkip_key)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_key_conf *, struct ieee80211_sta *, u32 , u16 *) ;
   void (*set_rekey_data)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_gtk_rekey_data *) ;
   void (*set_default_unicast_key)(struct ieee80211_hw *, struct ieee80211_vif *, int ) ;
   int (*hw_scan)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_scan_request *) ;
   void (*cancel_hw_scan)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*sched_scan_start)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_sched_scan_request *, struct ieee80211_scan_ies *) ;
   int (*sched_scan_stop)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*sw_scan_start)(struct ieee80211_hw *, struct ieee80211_vif *, u8 *) ;
   void (*sw_scan_complete)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*get_stats)(struct ieee80211_hw *, struct ieee80211_low_level_stats *) ;
   void (*get_key_seq)(struct ieee80211_hw *, struct ieee80211_key_conf *, struct ieee80211_key_seq *) ;
   int (*set_frag_threshold)(struct ieee80211_hw *, u32 ) ;
   int (*set_rts_threshold)(struct ieee80211_hw *, u32 ) ;
   int (*sta_add)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   int (*sta_remove)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*sta_add_debugfs)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, struct dentry *) ;
   void (*sta_notify)(struct ieee80211_hw *, struct ieee80211_vif *, enum sta_notify_cmd , struct ieee80211_sta *) ;
   int (*sta_set_txpwr)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   int (*sta_state)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, enum ieee80211_sta_state , enum ieee80211_sta_state ) ;
   void (*sta_pre_rcu_remove)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*sta_rc_update)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, u32 ) ;
   void (*sta_rate_tbl_update)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*sta_statistics)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, struct station_info *) ;
   int (*conf_tx)(struct ieee80211_hw *, struct ieee80211_vif *, u16 , struct ieee80211_tx_queue_params *) ;
   u64 (*get_tsf)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*set_tsf)(struct ieee80211_hw *, struct ieee80211_vif *, u64 ) ;
   void (*offset_tsf)(struct ieee80211_hw *, struct ieee80211_vif *, s64 ) ;
   void (*reset_tsf)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*tx_last_beacon)(struct ieee80211_hw *) ;
   int (*ampdu_action)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_ampdu_params *) ;
   int (*get_survey)(struct ieee80211_hw *, int , struct survey_info *) ;
   void (*rfkill_poll)(struct ieee80211_hw *) ;
   void (*set_coverage_class)(struct ieee80211_hw *, s16 ) ;
   int (*testmode_cmd)(struct ieee80211_hw *, struct ieee80211_vif *, void *, int ) ;
   int (*testmode_dump)(struct ieee80211_hw *, struct sk_buff *, struct netlink_callback *, void *, int ) ;
   void (*flush)(struct ieee80211_hw *, struct ieee80211_vif *, u32 , bool ) ;
   void (*channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel_switch *) ;
   int (*set_antenna)(struct ieee80211_hw *, u32 , u32 ) ;
   int (*get_antenna)(struct ieee80211_hw *, u32 *, u32 *) ;
   int (*remain_on_channel)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel *, int , enum ieee80211_roc_type ) ;
   int (*cancel_remain_on_channel)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*set_ringparam)(struct ieee80211_hw *, u32 , u32 ) ;
   void (*get_ringparam)(struct ieee80211_hw *, u32 *, u32 *, u32 *, u32 *) ;
   bool (*tx_frames_pending)(struct ieee80211_hw *) ;
   int (*set_bitrate_mask)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_bitrate_mask *) ;
   void (*event_callback)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_event *) ;
   void (*allow_buffered_frames)(struct ieee80211_hw *, struct ieee80211_sta *, u16 , int , enum ieee80211_frame_release_type , bool ) ;
   void (*release_buffered_frames)(struct ieee80211_hw *, struct ieee80211_sta *, u16 , int , enum ieee80211_frame_release_type , bool ) ;
   int (*get_et_sset_count)(struct ieee80211_hw *, struct ieee80211_vif *, int ) ;
   void (*get_et_stats)(struct ieee80211_hw *, struct ieee80211_vif *, struct ethtool_stats *, u64 *) ;
   void (*get_et_strings)(struct ieee80211_hw *, struct ieee80211_vif *, u32 , u8 *) ;
   void (*mgd_prepare_tx)(struct ieee80211_hw *, struct ieee80211_vif *, u16 ) ;
   void (*mgd_protect_tdls_discover)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*add_chanctx)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *) ;
   void (*remove_chanctx)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *) ;
   void (*change_chanctx)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *, u32 ) ;
   int (*assign_vif_chanctx)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_chanctx_conf *) ;
   void (*unassign_vif_chanctx)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_chanctx_conf *) ;
   int (*switch_vif_chanctx)(struct ieee80211_hw *, struct ieee80211_vif_chanctx_switch *, int , enum ieee80211_chanctx_switch_mode ) ;
   void (*reconfig_complete)(struct ieee80211_hw *, enum ieee80211_reconfig_type ) ;
   void (*ipv6_addr_change)(struct ieee80211_hw *, struct ieee80211_vif *, struct inet6_dev *) ;
   void (*channel_switch_beacon)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_chan_def *) ;
   int (*pre_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel_switch *) ;
   int (*post_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*abort_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*channel_switch_rx_beacon)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel_switch *) ;
   int (*join_ibss)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*leave_ibss)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   u32 (*get_expected_throughput)(struct ieee80211_hw *, struct ieee80211_sta *) ;
   int (*get_txpower)(struct ieee80211_hw *, struct ieee80211_vif *, int *) ;
   int (*tdls_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, u8 , struct cfg80211_chan_def *, struct sk_buff *, u32 ) ;
   void (*tdls_cancel_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*tdls_recv_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_tdls_ch_sw_params *) ;
   void (*wake_tx_queue)(struct ieee80211_hw *, struct ieee80211_txq *) ;
   void (*sync_rx_queues)(struct ieee80211_hw *) ;
   int (*start_nan)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_nan_conf *) ;
   int (*stop_nan)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*nan_change_conf)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_nan_conf *, u32 ) ;
   int (*add_nan_func)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_nan_func *) ;
   void (*del_nan_func)(struct ieee80211_hw *, struct ieee80211_vif *, u8 ) ;
   bool (*can_aggregate_in_amsdu)(struct ieee80211_hw *, struct sk_buff *, struct sk_buff *) ;
   int (*get_ftm_responder_stats)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_ftm_responder_stats *) ;
   int (*start_pmsr)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_pmsr_request *) ;
   void (*abort_pmsr)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_pmsr_request *) ;
};
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_4150 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_4152 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_4154 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_4206 {
   int __val ;
   char __c[1U] ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_atx_tid {
   struct list_head list ;
   struct sk_buff_head retry_q ;
   struct ath_node *an ;
   struct ath_txq *txq ;
   unsigned long tx_buf[2U] ;
   u16 seq_start ;
   u16 seq_next ;
   u16 baw_size ;
   u8 tidno ;
   int baw_head ;
   int baw_tail ;
   s8 bar_index ;
   bool active ;
   bool clear_ps_filter ;
};
#line 406 
enum ath_roc_complete_reason {
    ATH_ROC_COMPLETE_EXPIRE = 0,
    ATH_ROC_COMPLETE_ABORT = 1,
    ATH_ROC_COMPLETE_CANCEL = 2
};
#line 654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath9k_vif_iter_data {
   u8 hw_macaddr[6U] ;
   u8 mask[6U] ;
   bool has_hw_macaddr ;
   u8 slottime ;
   bool beacons ;
   int naps ;
   int nmeshes ;
   int nstations ;
   int nwds ;
   int nadhocs ;
   int nocbs ;
   int nbcnvifs ;
   struct ieee80211_vif *primary_beacon_vif ;
   struct ieee80211_vif *primary_sta ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_5190 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_5192 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_5194 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 1867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_5681 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_5683 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_5685 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_5687 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1881  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_5689 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_5691 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_5693 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_5695 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 2026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_5697 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_5699 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_status {
   struct ieee80211_sta *sta ;
   struct ieee80211_tx_info *info ;
   struct sk_buff *skb ;
   struct rate_info *rate ;
};
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
struct ath_frame_info {
   struct ath_buf *bf ;
   u16 framelen ;
   s8 txq ;
   u8 keyix ;
   u8 rtscts_rate ;
   u8 retries : 7 ;
   u8 baw_tracked : 1 ;
   u8 tx_power ;
   enum ath9k_key_type keytype : 2 ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/leds.h"
struct led_init_data {
   struct fwnode_handle *fwnode ;
   char *default_label ;
   char *devicename ;
   bool devname_mandatory ;
};
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/calib.h"
enum ath_stomp_type {
    ATH_BTCOEX_STOMP_ALL = 0,
    ATH_BTCOEX_STOMP_LOW = 1,
    ATH_BTCOEX_STOMP_NONE = 2,
    ATH_BTCOEX_STOMP_LOW_FTP = 3,
    ATH_BTCOEX_STOMP_AUDIO = 4,
    ATH_BTCOEX_STOMP_MAX = 5
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_7260 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_7262 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_7264 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.h"
struct ath_mci_profile_info {
   u8 type ;
   u8 conn_handle ;
   bool start ;
   bool master ;
   bool edr ;
   u8 voice_type ;
   u16 T ;
   u8 W ;
   u8 A ;
   struct list_head list ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.h"
struct ath_mci_profile_status {
   bool is_critical ;
   bool is_link ;
   u8 conn_handle ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_9332 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_hdr_3addr {
   __le16 frame_control ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
} __attribute__((__packed__, __aligned__(2)));
#line 3439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
enum nl80211_channel_type {
    NL80211_CHAN_NO_HT = 0,
    NL80211_CHAN_HT20 = 1,
    NL80211_CHAN_HT40MINUS = 2,
    NL80211_CHAN_HT40PLUS = 3
};
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs.c"
struct ath_radar_data {
   u8 pulse_bw_info ;
   u8 rssi ;
   u8 ext_rssi ;
   u8 pulse_length_ext ;
   u8 pulse_length_pri ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs.c"
struct ath9k_dfs_fft_20 {
   u8 bin[28U] ;
   u8 lower_bins[3U] ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs.c"
struct ath9k_dfs_fft_40 {
   u8 bin[64U] ;
   u8 lower_bins[3U] ;
   u8 upper_bins[3U] ;
} __attribute__((__packed__));
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_12816 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_12816 __anonCompField_pci_dev_56 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_15543 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_16574 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ath9k_platform.h"
struct ath9k_platform_data {
   char *eeprom_name ;
   u16 eeprom_data[2048U] ;
   u8 *macaddr ;
   int led_pin ;
   u32 gpio_mask ;
   u32 gpio_val ;
   u32 bt_active_pin ;
   u32 bt_priority_pin ;
   u32 wlan_active_pin ;
   bool endian_check ;
   bool is_clk_25mhz ;
   bool tx_gain_buffalo ;
   bool disable_2ghz ;
   bool disable_5ghz ;
   bool led_active_high ;
   int (*get_mac_revision)(void) ;
   int (*external_reset)(void) ;
   bool use_eeprom ;
};
#line 556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct dmi_strmatch {
   unsigned char slot : 7 ;
   unsigned char exact_match : 1 ;
   char substr[79U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct dmi_system_id {
   int (*callback)(struct dmi_system_id *) ;
   char *ident ;
   struct dmi_strmatch matches[4U] ;
   void *driver_data ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mdio.h"
struct gpio_desc;
#line 327 
struct mii_bus;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct reset_control;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_device {
   struct device dev ;
   struct mii_bus *bus ;
   char modalias[32U] ;
   int (*bus_match)(struct device *, struct device_driver *) ;
   void (*device_free)(struct mdio_device *) ;
   void (*device_remove)(struct mdio_device *) ;
   int addr ;
   int flags ;
   struct gpio_desc *reset_gpio ;
   struct reset_control *reset_ctrl ;
   unsigned int reset_assert_delay ;
   unsigned int reset_deassert_delay ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_driver_common {
   struct device_driver driver ;
   int flags ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
enum ldv_12330 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_INTERNAL = 1,
    PHY_INTERFACE_MODE_MII = 2,
    PHY_INTERFACE_MODE_GMII = 3,
    PHY_INTERFACE_MODE_SGMII = 4,
    PHY_INTERFACE_MODE_TBI = 5,
    PHY_INTERFACE_MODE_REVMII = 6,
    PHY_INTERFACE_MODE_RMII = 7,
    PHY_INTERFACE_MODE_RGMII = 8,
    PHY_INTERFACE_MODE_RGMII_ID = 9,
    PHY_INTERFACE_MODE_RGMII_RXID = 10,
    PHY_INTERFACE_MODE_RGMII_TXID = 11,
    PHY_INTERFACE_MODE_RTBI = 12,
    PHY_INTERFACE_MODE_SMII = 13,
    PHY_INTERFACE_MODE_XGMII = 14,
    PHY_INTERFACE_MODE_MOCA = 15,
    PHY_INTERFACE_MODE_QSGMII = 16,
    PHY_INTERFACE_MODE_TRGMII = 17,
    PHY_INTERFACE_MODE_1000BASEX = 18,
    PHY_INTERFACE_MODE_2500BASEX = 19,
    PHY_INTERFACE_MODE_RXAUI = 20,
    PHY_INTERFACE_MODE_XAUI = 21,
    PHY_INTERFACE_MODE_10GKR = 22,
    PHY_INTERFACE_MODE_USXGMII = 23,
    PHY_INTERFACE_MODE_MAX = 24
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
typedef enum ldv_12330 phy_interface_t;
#line 186 
struct phylink;
#line 189 
enum ldv_12348 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct mii_bus {
   struct module *owner ;
   char *name ;
   char id[61U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_12348 state ;
   struct device dev ;
   struct mdio_device *mdio_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int irq[32U] ;
   int reset_delay_us ;
   struct gpio_desc *reset_gpiod ;
};
#line 278 
enum phy_state {
    PHY_DOWN = 0,
    PHY_READY = 1,
    PHY_HALTED = 2,
    PHY_UP = 3,
    PHY_RUNNING = 4,
    PHY_NOLINK = 5
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};
#line 363 
struct phy_driver;
#line 363 
struct phy_led_trigger;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_device {
   struct mdio_device mdio ;
   struct phy_driver *drv ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   unsigned int is_c45 : 1 ;
   unsigned int is_internal : 1 ;
   unsigned int is_pseudo_fixed_link : 1 ;
   unsigned int is_gigabit_capable : 1 ;
   unsigned int has_fixups : 1 ;
   unsigned int suspended : 1 ;
   unsigned int sysfs_links : 1 ;
   unsigned int loopback_enabled : 1 ;
   unsigned int autoneg : 1 ;
   unsigned int link : 1 ;
   unsigned int autoneg_complete : 1 ;
   unsigned int interrupts : 1 ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   unsigned long adv_old[2U] ;
   u32 eee_broken_modes ;
   struct phy_led_trigger *phy_led_triggers ;
   unsigned int phy_num_led_triggers ;
   struct phy_led_trigger *last_triggered ;
   struct phy_led_trigger *led_link_trigger ;
   int irq ;
   void *priv ;
   struct delayed_work state_queue ;
   struct mutex lock ;
   bool sfp_bus_attached ;
   struct sfp_bus *sfp_bus ;
   struct phylink *phylink ;
   struct net_device *attached_dev ;
   u8 mdix ;
   u8 mdix_ctrl ;
   void (*phy_link_change)(struct phy_device *, bool , bool ) ;
   void (*adjust_link)(struct net_device *) ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_driver {
   struct mdio_driver_common mdiodrv ;
   u32 phy_id ;
   char *name ;
   u32 phy_id_mask ;
   unsigned long *features ;
   u32 flags ;
   void *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*get_features)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   int (*handle_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd)(struct phy_device *, int , u16 ) ;
   int (*write_mmd)(struct phy_device *, int , u16 , u16 ) ;
   int (*read_page)(struct phy_device *) ;
   int (*write_page)(struct phy_device *, int ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_sset_count)(struct phy_device *) ;
   void (*get_strings)(struct phy_device *, u8 *) ;
   void (*get_stats)(struct phy_device *, struct ethtool_stats *, u64 *) ;
   int (*get_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_loopback)(struct phy_device *, bool ) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq_work.h"
struct irq_work {
   atomic_t flags ;
   struct llist_node llnode ;
   void (*func)(struct irq_work *) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/relay.h"
struct rchan_buf {
   void *start ;
   void *data ;
   size_t offset ;
   size_t subbufs_produced ;
   size_t subbufs_consumed ;
   struct rchan *chan ;
   wait_queue_head_t read_wait ;
   struct irq_work wakeup_work ;
   struct dentry *dentry ;
   struct kref kref ;
   struct page **page_array ;
   unsigned int page_count ;
   unsigned int finalized ;
   size_t *padding ;
   size_t prev_padding ;
   size_t bytes_consumed ;
   size_t early_bytes ;
   unsigned int cpu ;
} __attribute__((__aligned__(64)));
#line 59 
struct rchan_callbacks;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/relay.h"
struct rchan {
   u32 version ;
   size_t subbuf_size ;
   size_t n_subbufs ;
   size_t alloc_size ;
   struct rchan_callbacks *cb ;
   struct kref kref ;
   void *private_data ;
   size_t last_toobig ;
   struct rchan_buf **buf ;
   int is_global ;
   struct list_head list ;
   struct dentry *parent ;
   int has_base_filename ;
   char base_filename[255U] ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/relay.h"
struct rchan_callbacks {
   int (*subbuf_start)(struct rchan_buf *, void *, void *, size_t ) ;
   void (*buf_mapped)(struct rchan_buf *, struct file *) ;
   void (*buf_unmapped)(struct rchan_buf *, struct file *) ;
   struct dentry *(*create_buf_file)(char *, struct dentry *, umode_t , struct rchan_buf *, int *) ;
   int (*remove_buf_file)(struct dentry *) ;
};
#line 5133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
enum nl80211_ext_feature_index {
    NL80211_EXT_FEATURE_VHT_IBSS = 0,
    NL80211_EXT_FEATURE_RRM = 1,
    NL80211_EXT_FEATURE_MU_MIMO_AIR_SNIFFER = 2,
    NL80211_EXT_FEATURE_SCAN_START_TIME = 3,
    NL80211_EXT_FEATURE_BSS_PARENT_TSF = 4,
    NL80211_EXT_FEATURE_SET_SCAN_DWELL = 5,
    NL80211_EXT_FEATURE_BEACON_RATE_LEGACY = 6,
    NL80211_EXT_FEATURE_BEACON_RATE_HT = 7,
    NL80211_EXT_FEATURE_BEACON_RATE_VHT = 8,
    NL80211_EXT_FEATURE_FILS_STA = 9,
    NL80211_EXT_FEATURE_MGMT_TX_RANDOM_TA = 10,
    NL80211_EXT_FEATURE_MGMT_TX_RANDOM_TA_CONNECTED = 11,
    NL80211_EXT_FEATURE_SCHED_SCAN_RELATIVE_RSSI = 12,
    NL80211_EXT_FEATURE_CQM_RSSI_LIST = 13,
    NL80211_EXT_FEATURE_FILS_SK_OFFLOAD = 14,
    NL80211_EXT_FEATURE_4WAY_HANDSHAKE_STA_PSK = 15,
    NL80211_EXT_FEATURE_4WAY_HANDSHAKE_STA_1X = 16,
    NL80211_EXT_FEATURE_FILS_MAX_CHANNEL_TIME = 17,
    NL80211_EXT_FEATURE_ACCEPT_BCAST_PROBE_RESP = 18,
    NL80211_EXT_FEATURE_OCE_PROBE_REQ_HIGH_TX_RATE = 19,
    NL80211_EXT_FEATURE_OCE_PROBE_REQ_DEFERRAL_SUPPRESSION = 20,
    NL80211_EXT_FEATURE_MFP_OPTIONAL = 21,
    NL80211_EXT_FEATURE_LOW_SPAN_SCAN = 22,
    NL80211_EXT_FEATURE_LOW_POWER_SCAN = 23,
    NL80211_EXT_FEATURE_HIGH_ACCURACY_SCAN = 24,
    NL80211_EXT_FEATURE_DFS_OFFLOAD = 25,
    NL80211_EXT_FEATURE_CONTROL_PORT_OVER_NL80211 = 26,
    NL80211_EXT_FEATURE_ACK_SIGNAL_SUPPORT = 27,
    NL80211_EXT_FEATURE_DATA_ACK_SIGNAL_SUPPORT = 27,
    NL80211_EXT_FEATURE_TXQS = 28,
    NL80211_EXT_FEATURE_SCAN_RANDOM_SN = 29,
    NL80211_EXT_FEATURE_SCAN_MIN_PREQ_CONTENT = 30,
    NL80211_EXT_FEATURE_CAN_REPLACE_PTK0 = 31,
    NL80211_EXT_FEATURE_ENABLE_FTM_RESPONDER = 32,
    NL80211_EXT_FEATURE_AIRTIME_FAIRNESS = 33,
    NL80211_EXT_FEATURE_AP_PMKSA_CACHING = 34,
    NL80211_EXT_FEATURE_SCHED_SCAN_BAND_SPECIFIC_RSSI_THOLD = 35,
    NL80211_EXT_FEATURE_EXT_KEY_ID = 36,
    NL80211_EXT_FEATURE_STA_TX_PWR = 37,
    NL80211_EXT_FEATURE_SAE_OFFLOAD = 38,
    NL80211_EXT_FEATURE_VLAN_OFFLOAD = 39,
    NL80211_EXT_FEATURE_AQL = 40,
    NUM_NL80211_EXT_FEATURES = 41,
    MAX_NL80211_EXT_FEATURES = 40
};
#line 2083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
enum ieee80211_hw_flags {
    IEEE80211_HW_HAS_RATE_CONTROL = 0,
    IEEE80211_HW_RX_INCLUDES_FCS = 1,
    IEEE80211_HW_HOST_BROADCAST_PS_BUFFERING = 2,
    IEEE80211_HW_SIGNAL_UNSPEC = 3,
    IEEE80211_HW_SIGNAL_DBM = 4,
    IEEE80211_HW_NEED_DTIM_BEFORE_ASSOC = 5,
    IEEE80211_HW_SPECTRUM_MGMT = 6,
    IEEE80211_HW_AMPDU_AGGREGATION = 7,
    IEEE80211_HW_SUPPORTS_PS = 8,
    IEEE80211_HW_PS_NULLFUNC_STACK = 9,
    IEEE80211_HW_SUPPORTS_DYNAMIC_PS = 10,
    IEEE80211_HW_MFP_CAPABLE = 11,
    IEEE80211_HW_WANT_MONITOR_VIF = 12,
    IEEE80211_HW_NO_AUTO_VIF = 13,
    IEEE80211_HW_SW_CRYPTO_CONTROL = 14,
    IEEE80211_HW_SUPPORT_FAST_XMIT = 15,
    IEEE80211_HW_REPORTS_TX_ACK_STATUS = 16,
    IEEE80211_HW_CONNECTION_MONITOR = 17,
    IEEE80211_HW_QUEUE_CONTROL = 18,
    IEEE80211_HW_SUPPORTS_PER_STA_GTK = 19,
    IEEE80211_HW_AP_LINK_PS = 20,
    IEEE80211_HW_TX_AMPDU_SETUP_IN_HW = 21,
    IEEE80211_HW_SUPPORTS_RC_TABLE = 22,
    IEEE80211_HW_P2P_DEV_ADDR_FOR_INTF = 23,
    IEEE80211_HW_TIMING_BEACON_ONLY = 24,
    IEEE80211_HW_SUPPORTS_HT_CCK_RATES = 25,
    IEEE80211_HW_CHANCTX_STA_CSA = 26,
    IEEE80211_HW_SUPPORTS_CLONED_SKBS = 27,
    IEEE80211_HW_SINGLE_SCAN_ON_ALL_BANDS = 28,
    IEEE80211_HW_TDLS_WIDER_BW = 29,
    IEEE80211_HW_SUPPORTS_AMSDU_IN_AMPDU = 30,
    IEEE80211_HW_BEACON_TX_STATUS = 31,
    IEEE80211_HW_NEEDS_UNIQUE_STA_ADDR = 32,
    IEEE80211_HW_SUPPORTS_REORDERING_BUFFER = 33,
    IEEE80211_HW_USES_RSS = 34,
    IEEE80211_HW_TX_AMSDU = 35,
    IEEE80211_HW_TX_FRAG_LIST = 36,
    IEEE80211_HW_REPORTS_LOW_ACK = 37,
    IEEE80211_HW_SUPPORTS_TX_FRAG = 38,
    IEEE80211_HW_SUPPORTS_TDLS_BUFFER_STA = 39,
    IEEE80211_HW_DEAUTH_NEED_MGD_TX_PREP = 40,
    IEEE80211_HW_DOESNT_SUPPORT_QOS_NDP = 41,
    IEEE80211_HW_BUFF_MMPDU_TXQ = 42,
    IEEE80211_HW_SUPPORTS_VHT_EXT_NSS_BW = 43,
    IEEE80211_HW_STA_MMPDU_TXQ = 44,
    IEEE80211_HW_TX_STATUS_NO_AMPDU_LEN = 45,
    IEEE80211_HW_SUPPORTS_MULTI_BSSID = 46,
    IEEE80211_HW_SUPPORTS_ONLY_HE_MULTI_BSSID = 47,
    IEEE80211_HW_AMPDU_KEYBORDER_SUPPORT = 48,
    NUM_IEEE80211_HW_FLAGS = 49
};
#line 4143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tpt_blink {
   int throughput ;
   int blink_time ;
};
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
struct ath9k_eeprom_ctx {
   struct completion complete ;
   struct ath_hw *ah ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_17617 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_17619 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
struct ath9k_beacon_state {
   u32 bs_nexttbtt ;
   u32 bs_nextdtim ;
   u32 bs_intval ;
   u32 bs_dtimperiod ;
   u16 bs_bmissthreshold ;
   u32 bs_sleepduration ;
   u32 bs_tsfoor_threshold ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_18655 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
enum ath9k_int;
#line 713 
enum ath9k_int;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
struct __anonstruct_ani_info_19675 {
   char *name ;
   unsigned int val ;
};
#line 919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
struct reg_hole {
   u32 start ;
   u32 end ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_21458 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_21458 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_21459 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_21459 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_21475 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_21475 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_21479 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_21479 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_21480 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_21481 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_21480 __anonCompField_media_link_90 ;
   union __anonunion_21481 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_21483 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_21482 {
   struct __anonstruct_dev_21483 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_21482 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_21497 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_21498 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_21496 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_21497 i2c ;
   struct __anonstruct_custom_21498 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_21496 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_22399 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_22399 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_platform_instance_ath_ahb_driver_38 {
   struct platform_driver *arg0 ;
   int signal_pending ;
};
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_7 {
   int arg0 ;
   int signal_pending ;
};
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_ath_isr_36 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_fops_ackto_17 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_ieee80211_scenario_ath9k_ops_35 {
   struct ieee80211_hw *arg0 ;
   int signal_pending ;
};
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_ath_pci_driver_37 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_23_40 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   void __builtin_va_start(__builtin_va_list);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/rng.i.aux"
static bool IS_ERR(void *ptr);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 248 
void init_wait_entry(struct wait_queue_entry *, int);
#line 1128 
#line 1128 
long prepare_to_wait_event(struct wait_queue_head *, struct wait_queue_entry *, int);
#line 1129 
#line 1129 
void finish_wait(struct wait_queue_head *, struct wait_queue_entry *);
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hw_random.h"
#line 64 
void add_hwgenerator_randomness(char *, size_t, size_t);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 219 
long schedule_timeout(long);
#line 1688 
#line 1688 
int wake_up_process(struct task_struct *);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
#line 816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/rng.i.aux"
static struct task_struct *cif_kthread_create_on_node(int (*threadfn)(void *), void *data, int node, char *namefmt , ...);
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
#line 55 
int kthread_stop(struct task_struct *);
#line 56 
#line 56 
bool kthread_should_stop(void);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 590 
#line 399  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/rng.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 1103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/rng.c"
void ath9k_rng_start(struct ath_softc *sc);
#line 1104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/rng.c"
void ath9k_rng_stop(struct ath_softc *sc);
#line 1134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1134 
void ath9k_ps_wakeup(struct ath_softc *sc);
#line 1135 
#line 1135 
void ath9k_ps_restore(struct ath_softc *sc);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/rng.c"
static struct wait_queue_head rng_queue = {.lock = {.__anonCompField_spinlock_25 = {.rlock = {.magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.name = (char *)"rng_queue.lock"}}}}, .head = {.next = & rng_queue.head, .prev = & rng_queue.head}};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/rng.c"
static int ath9k_rng_data_read(struct ath_softc *sc, u32 *buf, u32 buf_size)
{
  #line 31 
  int i;
  #line 31 
  int j;
  #line 32 
  u32 v1;
  #line 32 
  u32 v2;
  #line 37 
  unsigned int tmp;
  #line 38 
  unsigned int tmp_0;
  #line 39 
  unsigned int tmp_1;
  #line 32 
  u32 rng_last = sc->rng_last;
  #line 33 
  struct ath_hw *ah = sc->sc_ah;
  #line 35 
  ath9k_ps_wakeup(sc);
  #line 37 
  if (ah->hw_version.macVersion == 1536U) 
                                          #line 37 
                                          tmp = 41820U; else 
                                                             #line 37 
                                                             tmp = 41824U;
  #line 37 
  ;
  #line 37 
  (*(ah->reg_ops.rmw))((void *)ah,tmp,524288U,7864320U);
  #line 38 
  if (ah->hw_version.macVersion == 1536U) 
                                          #line 38 
                                          tmp_0 = 41820U; else 
                                                               #line 38 
                                                               tmp_0 = 41824U;
  #line 38 
  ;
  #line 38 
  (*(ah->reg_ops.rmw))((void *)ah,tmp_0,0U,8388608U);
  #line 39 
  if (ah->hw_version.macVersion == 1536U) 
                                          #line 39 
                                          tmp_1 = 41824U; else 
                                                               #line 39 
                                                               tmp_1 = 41828U;
  #line 39 
  ;
  #line 39 
  (*(ah->reg_ops.rmw))((void *)ah,tmp_1,0U,15360U);
  #line 41 
  i = 0;
  #line 41 
  j = 0;
  #line 41 
  while ((unsigned int)i < buf_size) {
    {
      #line 42 
      v1 = (*(ah->reg_ops.read))((void *)ah,39968U) & 65535U;
      #line 43 
      v2 = (*(ah->reg_ops.read))((void *)ah,39968U) & 65535U;
      #line 46 
      if (((v1 != 0U && v2 != 0U) && (rng_last != v1 && v1 != v2)) && (v1 != 65535U && v2 != 65535U)) {
        #line 48 
        int tmp_4;
        #line 48 
        tmp_4 = j;
        #line 48 
        j ++;
        #line 48 
        *(buf + (unsigned long)tmp_4) = (v1 << 16) | v2;
      }
      #line 50 
      rng_last = v2;
    }
    #line 41 
    i ++;
  }
  #line 53 
  ath9k_ps_restore(sc);
  #line 55 
  sc->rng_last = rng_last;
  #line 57 
  return j << 2;
}

#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/rng.c"
static u32 ath9k_rng_delay_get(u32 fail_stats)
{
  #line 62 
  u32 delay;
  #line 64 
  if (fail_stats <= 99U) 
                         #line 65 
                         delay = 10U;
  else 
    #line 66 
    if (fail_stats <= 104U) 
                            #line 67 
                            delay = 1000U; else 
                                                #line 69 
                                                delay = 10000U;
  #line 71 
  return delay;
}

#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/rng.c"
static int ath9k_rng_kthread(void *data)
{
  #line 76 
  int bytes_read;
  #line 78 
  u32 *rng_buf;
  #line 79 
  u32 delay;
  #line 77 
  struct ath_softc *sc = (struct ath_softc *)data;
  #line 79 
  u32 fail_stats = 0U;
  #line 81 
  rng_buf = (u32 *)kmalloc_array(320UL,4UL,3264U);
  #line 82 
  if (rng_buf == (u32 *)0U) 
                            #line 83 
                            goto out;
  #line 85 
  while (1) {
    #line 85 
    if (kthread_should_stop()) 
                               #line 85 
                               break;
    #line 86 
    bytes_read = ath9k_rng_data_read(sc,rng_buf,320U);
    #line 88 
    if ((long)(bytes_read == 0) != 0L) {
      #line 89 
      fail_stats ++;
      #line 89 
      delay = ath9k_rng_delay_get(fail_stats);
      {
        #line 90 
        long __ret = (long)msecs_to_jiffies(delay);
        #line 90 
        __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/rng.c",90,0);
        {
          #line 90 
          bool __cond_0;
          #line 90 
          __cond_0 = kthread_should_stop();
          #line 90 
          if ((int)__cond_0 != 0 && __ret == 0L) 
                                                 #line 90 
                                                 __ret = 1L;
          #line 90 
          if ((((int)__cond_0 != 0 || __ret == 0L) != 0) == 0) {
            #line 90 
            long __ret_0;
            {
              #line 90 
              struct wait_queue_entry __wq_entry;
              #line 90 
              __ret_0 = (long)msecs_to_jiffies(delay);
              #line 90 
              init_wait_entry(& __wq_entry,0);
              #line 90 
              while (1) {
                #line 90 
                bool __cond;
                #line 90 
                long __int = prepare_to_wait_event(& rng_queue,& __wq_entry,1);
                #line 90 
                __cond = kthread_should_stop();
                #line 90 
                if ((int)__cond != 0 && __ret_0 == 0L) 
                                                       #line 90 
                                                       __ret_0 = 1L;
                #line 90 
                if ((((int)__cond != 0 || __ret_0 == 0L) != 0) != 0) 
                  #line 90 
                  break;
                #line 90 
                if (__int != 0L) {
                  #line 90 
                  __ret_0 = __int;
                  #line 90 
                  goto __out_0;
                }
                #line 90 
                __ret_0 = schedule_timeout(__ret_0);
              }
              #line 90 
              finish_wait(& rng_queue,& __wq_entry);
              #line 90 
              __out_0: 
                       #line 90 
              ;
              }
            #line 90 
            __ret = __ret_0;
          }
        }
        #line 90 
        long tmp_8 = __ret;
      }
      #line 93 
      continue;
    }
    #line 96 
    fail_stats = 0U;
    #line 99 
    add_hwgenerator_randomness((char *)rng_buf,(unsigned long)bytes_read,(unsigned long)(bytes_read * 80 >> 5));
  }
  #line 103 
  kfree((void *)rng_buf);
  #line 104 
  out: 
       #line 104 
  ;
  #line 105 
  sc->rng_task = (struct task_struct *)0;
  #line 107 
  return 0;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/rng.c"
void ath9k_rng_start(struct ath_softc *sc)
{
  #line 120 
  struct task_struct *__k;
  #line 112 
  struct ath_hw *ah = sc->sc_ah;
  #line 114 
  if (sc->rng_task != (struct task_struct *)0) 
                                               #line 115 
                                               return;
  #line 117 
  if (ah->hw_version.macVersion <= 447U) 
                                         #line 118 
                                         return;
  #line 120 
  __k = cif_kthread_create_on_node(& ath9k_rng_kthread,(void *)sc,-1,(char *)"ath9k-hwrng");
  {
    #line 120 
    if (! IS_ERR((void *)__k)) 
                               #line 120 
                               wake_up_process(__k);
  }
  #line 120 
  sc->rng_task = __k;
  #line 121 
  if ((int)IS_ERR((void *)sc->rng_task) != 0) 
                                              #line 122 
                                              sc->rng_task = (struct task_struct *)0;
  #line 123 
  return;
}

#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/rng.c"
void ath9k_rng_stop(struct ath_softc *sc)
{
  #line 127 
  if (sc->rng_task != (struct task_struct *)0) {
    #line 128 
    kthread_stop(sc->rng_task);
    #line 129 
    sc->rng_task = (struct task_struct *)0;
  }
  #line 131 
  return;
}

#line 99  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/rng.i.aux"
#line 99 
struct task_struct *emg_kthread_create_on_node(int (*arg0)(void *), void *arg1, int arg2, char *arg3 , ...);
#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/rng.i.aux"
int emg_wrapper_ath9k_rng_kthread(void *arg0)
{
  #line 108 
  return ath9k_rng_kthread(arg0);
}

#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/rng.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 228 
  return ldv_is_err(ptr);
}

#line 399  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/rng.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 402 
  return ldv_kmalloc_array(n,size,flags);
}

#line 816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/rng.i.aux"
static struct task_struct *cif_kthread_create_on_node(int (*threadfn)(void *), void *data, int node, char *namefmt , ...)
{
  #line 819 
  __builtin_va_list ldv_func_arg5;
  #line 820 
  #line 820 
  __builtin_va_start(ldv_func_arg5,namefmt);
  #line 823 
  return emg_kthread_create_on_node(threadfn,data,node,namefmt);
}

/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/recv.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_1047 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_1049 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_init(struct list_head *entry)
{
  #line 190 
  __list_del_entry(entry);
  #line 191 
  INIT_LIST_HEAD(entry);
  #line 192 
  return;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_is_last(struct list_head *list, struct list_head *head)
{
  #line 259 
  return list->next == head;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_1051 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/recv.i.aux"
static void cif_spin_lock_bh_chan_lock_of_ath_softc(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/recv.i.aux"
static void cif_spin_unlock_bh_chan_lock_of_ath_softc(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 843  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/recv.i.aux"
static void cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 834 
static void cif___ldv_spin_lock_sc_pm_lock_of_ath_softc(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 809  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/recv.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1023 
void consume_skb(struct sk_buff *);
#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_peek(struct sk_buff_head *list_)
{
  #line 1746 
  struct sk_buff *skb = list_->next;
  #line 1748 
  if (skb == (struct sk_buff *)list_) 
                                      #line 1749 
                                      skb = (struct sk_buff *)0;
  #line 1750 
  return skb;
}

#line 1812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static __u32 skb_queue_len(struct sk_buff_head *list_)
{
  #line 1814 
  return list_->qlen;
}

#line 1827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_head_init(struct sk_buff_head *list)
{
  #line 1829 
  list->next = ((struct sk_buff *)list);
  #line 1829 
  list->prev = ((struct sk_buff *)list);
  #line 1830 
  list->qlen = 0U;
  #line 1831 
  return;
}

#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_insert(struct sk_buff *newsk, struct sk_buff *prev, struct sk_buff *next, struct sk_buff_head *list)
{
  {
    #line 1868 
    union __anonunion___u_1538 __u = {.__val = next};
    #line 1867 
    __write_once_size((void *)(& newsk->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u.__c),8);
    #line 1867 
    struct sk_buff *tmp = __u.__val;
  }
  {
    #line 1869 
    union __anonunion___u_1540 __u_0 = {.__val = prev};
    #line 1868 
    __write_once_size((void *)(& newsk->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u_0.__c),8);
    #line 1868 
    struct sk_buff *tmp_3 = __u_0.__val;
  }
  {
    #line 1870 
    union __anonunion___u_1542 __u_1 = {.__val = newsk};
    #line 1869 
    __write_once_size((void *)(& next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u_1.__c),8);
    #line 1869 
    struct sk_buff *tmp_5 = __u_1.__val;
  }
  {
    #line 1871 
    union __anonunion___u_1544 __u_2 = {.__val = newsk};
    #line 1870 
    __write_once_size((void *)(& prev->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u_2.__c),8);
    #line 1870 
    struct sk_buff *tmp_7 = __u_2.__val;
  }
  #line 1871 
  (list->qlen) ++;
  #line 1872 
  return;
}

#line 1972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_before(struct sk_buff_head *list, struct sk_buff *next, struct sk_buff *newsk)
{
  #line 1976 
  __skb_insert(newsk,next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev,next,list);
  #line 1977 
  return;
}

#line 2006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk)
{
  #line 2009 
  __skb_queue_before(list,(struct sk_buff *)list,newsk);
  #line 2010 
  return;
}

#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)
{
  #line 2020 
  struct sk_buff *next;
  #line 2020 
  struct sk_buff *prev;
  #line 2022 
  (list->qlen) --;
  #line 2023 
  next = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next;
  #line 2024 
  prev = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev;
  #line 2025 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev = ((struct sk_buff *)0);
  #line 2025 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next = ((struct sk_buff *)0);
  {
    #line 2027 
    union __anonunion___u_1554 __u = {.__val = prev};
    #line 2026 
    __write_once_size((void *)(& next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u.__c),8);
    #line 2026 
    struct sk_buff *tmp_2 = __u.__val;
  }
  {
    #line 2028 
    union __anonunion___u_1556 __u_0 = {.__val = next};
    #line 2027 
    __write_once_size((void *)(& prev->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u_0.__c),8);
    #line 2027 
    struct sk_buff *tmp_4 = __u_0.__val;
  }
  #line 2029 
  return;
}

#line 2038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *__skb_dequeue(struct sk_buff_head *list)
{
  #line 2040 
  struct sk_buff *skb = skb_peek(list);
  #line 2041 
  if (skb != (struct sk_buff *)0) 
                                  #line 2042 
                                  __skb_unlink(skb,list);
  #line 2043 
  return skb;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_tailroom(struct sk_buff *skb)
{
  #line 2312 
  int tmp_0;
  #line 2312 
  if ((int)skb_is_nonlinear(skb) == 0) 
                                       #line 2312 
                                       tmp_0 = (int)(skb->end - skb->tail); else 
                                                                    #line 2312 
                                                                    tmp_0 = 0;
  #line 2312 
  return tmp_0;
}

#line 2652 
#line 2652 
void skb_trim(struct sk_buff *, unsigned int);
#line 3601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data(struct sk_buff *skb, void *to, unsigned int len)
{
  #line 3605 
  memcpy(to,(void *)skb->data,(unsigned long)len);
  #line 3606 
  return;
}

#line 3617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_has_morefrags(__le16 fc)
{
  #line 296 
  return (_Bool)(((int)fc & 1024) != 0);
}

#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_has_moredata(__le16 fc)
{
  #line 323 
  return (_Bool)(((int)fc & 8192) != 0);
}

#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_data(__le16 fc)
{
  #line 370 
  return (_Bool)(((int)fc & 12) == 8);
}

#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_data_present(__le16 fc)
{
  #line 398 
  return (_Bool)(((int)fc & 76) == 8);
}

#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_action(__le16 fc)
{
  #line 518 
  return (_Bool)(((int)fc & 252) == 208);
}

#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_ack(__le16 fc)
{
  #line 578 
  return (_Bool)(((int)fc & 252) == 212);
}

#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_qos_nullfunc(__le16 fc)
{
  #line 618 
  return (_Bool)(((int)fc & 252) == 200);
}

#line 1119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static struct ieee80211_rx_status *IEEE80211_SKB_RXCB(struct sk_buff *skb)
{
  #line 1121 
  return (struct ieee80211_rx_status *)(& skb->cb);
}

#line 4338 
#line 4338 
void ieee80211_rx_napi(struct ieee80211_hw *, struct ieee80211_sta *, struct sk_buff *, struct napi_struct *);
#line 4361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void ieee80211_rx(struct ieee80211_hw *hw, struct sk_buff *skb)
{
  #line 4363 
  ieee80211_rx_napi(hw,(struct ieee80211_sta *)0,skb,(struct napi_struct *)0);
  #line 4364 
  return;
}

#line 5477 
#line 5477 
struct ieee80211_sta *ieee80211_find_sta_by_ifaddr(struct ieee80211_hw *, u8 *, u8 *);
#line 5581 
#line 5581 
void ieee80211_sta_register_airtime(struct ieee80211_sta *, u8, u32, u32);
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
#line 194 
struct sk_buff *ath_rxbuf_alloc(struct ath_common *, u32, gfp_t);
#line 197 
#line 197 
bool ath_is_mybeacon(struct ath_common *, struct ieee80211_hdr *);
#line 199 
#line 199 
void ath_hw_setbssidmask(struct ath_common *);
#line 210 
#line 210 
void ath_printk(char *, struct ath_common *, char * , ...);
#line 731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
#line 731 
int ath9k_hw_rxprocdesc(struct ath_hw *, struct ath_desc *, struct ath_rx_status *);
#line 733 
#line 733 
void ath9k_hw_setuprxdesc(struct ath_hw *, struct ath_desc *, u32, u32);
#line 736 
#line 736 
void ath9k_hw_putrxbuf(struct ath_hw *, u32);
#line 737 
#line 737 
void ath9k_hw_startpcureceive(struct ath_hw *, bool);
#line 738 
#line 738 
void ath9k_hw_abortpcurecv(struct ath_hw *);
#line 739 
#line 739 
bool ath9k_hw_stopdmarecv(struct ath_hw *, bool *);
#line 745 
#line 745 
void ath9k_hw_set_interrupts(struct ath_hw *);
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dynack.h"
#line 87 
void ath_dynack_sample_ack_ts(struct ath_hw *, struct sk_buff *, u32);
#line 996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
__inline static struct ath_common *ath9k_hw_common(struct ath_hw *ah)
{
  #line 998 
  return & ah->common;
}

#line 1011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
__inline static struct ath_hw_ops *ath9k_hw_ops(struct ath_hw *ah)
{
  #line 1013 
  return & ah->ops;
}

#line 1036 
#line 1036 
void ath9k_hw_setantenna(struct ath_hw *, u32);
#line 1046 
#line 1046 
u16 ath9k_hw_computetxtime(struct ath_hw *, u8, int, u32, u16, bool);
#line 1053 
#line 1053 
void ath9k_hw_setrxfilter(struct ath_hw *, u32);
#line 1057 
#line 1057 
void ath9k_hw_setopmode(struct ath_hw *);
#line 1058 
#line 1058 
void ath9k_hw_setmcastfilter(struct ath_hw *, u32, u32);
#line 1061 
#line 1061 
u64 ath9k_hw_gettsf64(struct ath_hw *);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw-ops.h"
__inline static void ath9k_hw_rxena(struct ath_hw *ah)
{
  #line 35 
  (*(ath9k_hw_ops(ah)->rx_enable))(ah);
  #line 36 
  return;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/common-spectral.h"
#line 180 
int ath_cmn_process_fft(struct ath_spec_scan_priv *, struct ieee80211_hdr *, struct ath_rx_status *, u64);
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/common.h"
#line 64 
bool ath9k_cmn_rx_accept(struct ath_common *, struct ieee80211_hdr *, struct ieee80211_rx_status *, struct ath_rx_status *, bool *, unsigned int);
#line 70 
#line 70 
void ath9k_cmn_rx_skb_postprocess(struct ath_common *, struct sk_buff *, struct ath_rx_status *, struct ieee80211_rx_status *, bool);
#line 75 
#line 75 
int ath9k_cmn_process_rate(struct ath_common *, struct ieee80211_hw *, struct ath_rx_status *, struct ieee80211_rx_status *);
#line 79 
#line 79 
void ath9k_cmn_process_rssi(struct ath_common *, struct ieee80211_hw *, struct ath_rx_status *, struct ieee80211_rx_status *);
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.h"
#line 261 
void ath_debug_stat_rx(struct ath_softc *sc, struct ath_rx_status *rs);
#line 319 
#line 319 
void ath_debug_rate_stats(struct ath_softc *sc, struct ath_rx_status *rs, struct sk_buff *skb);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs.h"
#line 37 
void ath9k_dfs_process_phyerr(struct ath_softc *sc, void *data, struct ath_rx_status *rs, u64 mactime);
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 75 
int ath_descdma_setup(struct ath_softc *sc, struct ath_descdma *dd, struct list_head *head, char *name, int nbuf, int ndesc, bool is_tx);
#line 462 
#line 462 
bool ath9k_is_chanctx_enabled(void);
#line 471 
#line 471 
void ath9k_p2p_beacon_sync(struct ath_softc *sc);
#line 481 
#line 481 
void ath_chanctx_beacon_recv_ev(struct ath_softc *sc, enum ath_chanctx_event ev);
#line 574 
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
void ath_startrecv(struct ath_softc *sc);
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
bool ath_stoprecv(struct ath_softc *sc);
#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
u32 ath_calcrxfilter(struct ath_softc *sc);
#line 577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
int ath_rx_init(struct ath_softc *sc, int nbufs);
#line 578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
void ath_rx_cleanup(struct ath_softc *sc);
#line 579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
int ath_rx_tasklet(struct ath_softc *sc, int flush, bool hp);
#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 592 
u32 ath_pkt_duration(struct ath_softc *sc, u8 rix, int pktlen, int width, int half_gi, bool shortPreamble);
#line 722 
#line 722 
void ath9k_set_beacon(struct ath_softc *sc);
#line 944 
#line 944 
void ath_ant_comb_scan(struct ath_softc *sc, struct ath_rx_status *rs);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_mac.h"
#line 112 
void ath9k_hw_set_rx_bufsize(struct ath_hw *, u16);
#line 113 
#line 113 
void ath9k_hw_addrxbuf_edma(struct ath_hw *, u32, enum ath9k_rx_qtype);
#line 116 
#line 116 
int ath9k_hw_process_rxdesc_edma(struct ath_hw *, struct ath_rx_status *, void *);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
__inline static bool ath9k_check_auto_sleep(struct ath_softc *sc)
{
  #line 25 
  return (_Bool)(((int)sc->ps_enabled != 0 && ((sc->sc_ah)->caps.hw_caps & 4U) != 0U) != 0);
}

#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath_rx_buf_link(struct ath_softc *sc, struct ath_rxbuf *bf, bool flush)
{
  #line 42 
  struct ath_desc *ds;
  #line 43 
  struct sk_buff *skb;
  #line 40 
  struct ath_hw *ah = sc->sc_ah;
  #line 41 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 45 
  ds = (struct ath_desc *)bf->bf_desc;
  #line 46 
  ds->ds_link = 0U;
  #line 47 
  ds->ds_data = (unsigned int)bf->bf_buf_addr;
  #line 50 
  skb = bf->bf_mpdu;
  #line 51 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    #line 52 
    ldv_inline_asm();
    #line 53 
    ldv_inline_asm();
    #line 54 
    ldv_inline_asm();
    #line 51 
    ;
  }
  #line 52 
  ds->ds_vdata = (void *)skb->data;
  #line 59 
  ath9k_hw_setuprxdesc(ah,ds,common->rx_bufsize,0U);
  #line 63 
  if (sc->rx.rxlink != (u32 *)0U) 
                                  #line 64 
                                  *(sc->rx.rxlink) = (unsigned int)bf->bf_daddr;
  else 
    #line 65 
    if (! flush) 
                 #line 66 
                 ath9k_hw_putrxbuf(ah,(unsigned int)bf->bf_daddr);
  #line 68 
  sc->rx.rxlink = & ds->ds_link;
  #line 69 
  return;
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath_rx_buf_relink(struct ath_softc *sc, struct ath_rxbuf *bf, bool flush)
{
  #line 74 
  if (sc->rx.buf_hold != (struct ath_rxbuf *)0) 
                                                #line 75 
                                                ath_rx_buf_link(sc,sc->rx.buf_hold,(_Bool)((bool)((int)flush) != 0));
  #line 77 
  sc->rx.buf_hold = bf;
  #line 78 
  return;
}

#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath_setdefantenna(struct ath_softc *sc, u32 antenna)
{
  #line 83 
  ath9k_hw_setantenna(sc->sc_ah,antenna);
  #line 84 
  sc->rx.defant = (unsigned char)antenna;
  #line 85 
  sc->rx.rxotherant = (unsigned char)0U;
  #line 86 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath_opmode_init(struct ath_softc *sc)
{
  #line 93 
  u32 rfilt;
  #line 93 
  u32 mfilt[2U];
  #line 90 
  struct ath_hw *ah = sc->sc_ah;
  #line 91 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 96 
  rfilt = ath_calcrxfilter(sc);
  #line 97 
  ath9k_hw_setrxfilter(ah,rfilt);
  #line 100 
  ath_hw_setbssidmask(common);
  #line 103 
  ath9k_hw_setopmode(ah);
  #line 106 
  mfilt[1] = 4294967295U;
  #line 106 
  mfilt[0] = mfilt[1];
  #line 107 
  ath9k_hw_setmcastfilter(ah,mfilt[0],mfilt[1]);
  #line 108 
  return;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static bool ath_rx_edma_buf_link(struct ath_softc *sc, enum ath9k_rx_qtype qtype)
{
  #line 122 
  void *__mptr;
  #line 114 
  struct ath_rx_edma *rx_edma;
  #line 115 
  struct sk_buff *skb;
  #line 116 
  struct ath_rxbuf *bf;
  #line 113 
  struct ath_hw *ah = sc->sc_ah;
  #line 118 
  rx_edma = & sc->rx.rx_edma[(unsigned int)qtype];
  #line 119 
  ;
  #line 119 
  if (skb_queue_len(& rx_edma->rx_fifo) >= rx_edma->rx_fifo_hwsize) 
                                                                    #line 120 
                                                                    return (_Bool)0;
  #line 122 
  __mptr = (void *)sc->rx.rxbuf.next;
  #line 122 
  bf = ((struct ath_rxbuf *)__mptr);
  #line 123 
  list_del_init(& bf->list);
  #line 125 
  skb = bf->bf_mpdu;
  #line 127 
  memset((void *)skb->data,0,(unsigned long)ah->caps.rx_status_len);
  #line 128 
  dma_sync_single_for_device(sc->dev,bf->bf_buf_addr,(unsigned long)ah->caps.rx_status_len,(enum dma_data_direction)DMA_TO_DEVICE);
  #line 131 
  *((struct ath_rxbuf **)(& skb->cb)) = bf;
  #line 132 
  ath9k_hw_addrxbuf_edma(ah,(unsigned int)bf->bf_buf_addr,qtype);
  #line 133 
  __skb_queue_tail(& rx_edma->rx_fifo,skb);
  #line 135 
  return (_Bool)1;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath_rx_addbuffer_edma(struct ath_softc *sc, enum ath9k_rx_qtype qtype)
{
  #line 149 
  void *__mptr;
  #line 149 
  void *__mptr_0;
  #line 142 
  struct ath_rxbuf *bf;
  #line 142 
  struct ath_rxbuf *tbf;
  #line 141 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 144 
  if (list_empty(& sc->rx.rxbuf) != 0) {
    #line 145 
    if ((common->debug_mask & 2) != 0) 
                                       #line 145 
                                       ath_printk((char *)"\001",common,(char *)"No free rx buf available\n");
    #line 146 
    return;
  }
  #line 149 
  __mptr = (void *)sc->rx.rxbuf.next;
  #line 149 
  bf = ((struct ath_rxbuf *)__mptr);
  #line 149 
  __mptr_0 = (void *)bf->list.next;
  #line 150 
  tbf = ((struct ath_rxbuf *)__mptr_0);
  #line 149 
  while (& bf->list != & sc->rx.rxbuf) {
    #line 149 
    void *__mptr_1;
    #line 150 
    if (! ath_rx_edma_buf_link(sc,qtype)) 
                                          #line 151 
                                          break;
    #line 149 
    bf = tbf;
    #line 149 
    __mptr_1 = (void *)tbf->list.next;
    #line 149 
    tbf = ((struct ath_rxbuf *)__mptr_1);
  }
  #line 152 
  return;
}

#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath_rx_remove_buffer(struct ath_softc *sc, enum ath9k_rx_qtype qtype)
{
  #line 158 
  struct ath_rxbuf *bf;
  #line 159 
  struct ath_rx_edma *rx_edma;
  #line 160 
  struct sk_buff *skb;
  #line 162 
  rx_edma = & sc->rx.rx_edma[(unsigned int)qtype];
  #line 164 
  while (1) {
    #line 164 
    skb = __skb_dequeue(& rx_edma->rx_fifo);
    #line 164 
    if (! (skb != (struct sk_buff *)0)) 
                                        #line 164 
                                        break;
    #line 165 
    bf = *((struct ath_rxbuf **)(& skb->cb));
    #line 166 
    if ((long)(bf == (struct ath_rxbuf *)0) != 0L) {
      #line 167 
      ldv_inline_asm();
      #line 168 
      ldv_inline_asm();
      #line 169 
      ldv_inline_asm();
      #line 166 
      ;
    }
    #line 167 
    list_add_tail(& bf->list,& sc->rx.rxbuf);
  }
  #line 169 
  return;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath_rx_edma_cleanup(struct ath_softc *sc)
{
  #line 180 
  void *__mptr;
  #line 175 
  struct ath_rxbuf *bf;
  #line 173 
  struct ath_hw *ah = sc->sc_ah;
  #line 174 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 177 
  ath_rx_remove_buffer(sc,(enum ath9k_rx_qtype)ATH9K_RX_QUEUE_LP);
  #line 178 
  ath_rx_remove_buffer(sc,(enum ath9k_rx_qtype)ATH9K_RX_QUEUE_HP);
  #line 180 
  __mptr = (void *)sc->rx.rxbuf.next;
  #line 180 
  bf = ((struct ath_rxbuf *)__mptr);
  #line 180 
  while (& bf->list != & sc->rx.rxbuf) {
    #line 180 
    void *__mptr_0;
    #line 181 
    if (bf->bf_mpdu != (struct sk_buff *)0) {
      #line 182 
      dma_unmap_single_attrs(sc->dev,bf->bf_buf_addr,(unsigned long)common->rx_bufsize,(enum dma_data_direction)DMA_BIDIRECTIONAL,0UL);
      #line 185 
      dev_kfree_skb_any(bf->bf_mpdu);
      #line 186 
      bf->bf_buf_addr = 0ULL;
      #line 187 
      bf->bf_mpdu = (struct sk_buff *)0;
    }
    #line 180 
    __mptr_0 = (void *)bf->list.next;
    #line 180 
    bf = ((struct ath_rxbuf *)__mptr_0);
  }
  #line 189 
  return;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath_rx_edma_init_queue(struct ath_rx_edma *rx_edma, int size)
{
  #line 194 
  __skb_queue_head_init(& rx_edma->rx_fifo);
  #line 195 
  rx_edma->rx_fifo_hwsize = (unsigned int)size;
  #line 196 
  return;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static int ath_rx_edma_init(struct ath_softc *sc, int nbufs)
{
  #line 202 
  struct sk_buff *skb;
  #line 203 
  struct ath_rxbuf *bf;
  #line 204 
  int i;
  #line 205 
  u32 size;
  #line 200 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 201 
  struct ath_hw *ah = sc->sc_ah;
  #line 204 
  int error = 0;
  #line 207 
  ath9k_hw_set_rx_bufsize(ah,(unsigned short)((int)((unsigned short)common->rx_bufsize) - (int)((unsigned short)ah->caps.rx_status_len)));
  #line 210 
  ath_rx_edma_init_queue(& sc->rx.rx_edma[1],(int)ah->caps.rx_lp_qdepth);
  #line 212 
  ath_rx_edma_init_queue(& sc->rx.rx_edma[0],(int)ah->caps.rx_hp_qdepth);
  #line 215 
  size = (unsigned int)((unsigned long)nbufs) * 48U;
  #line 216 
  bf = (struct ath_rxbuf *)cif_devm_kzalloc(sc->dev,(unsigned long)size,3264U);
  #line 217 
  if (bf == (struct ath_rxbuf *)0) 
                                   #line 218 
                                   return -12;
  #line 220 
  INIT_LIST_HEAD(& sc->rx.rxbuf);
  #line 222 
  i = 0;
  #line 222 
  while (i < nbufs) {
    {
      #line 223 
      skb = ath_rxbuf_alloc(common,common->rx_bufsize,3264U);
      #line 224 
      if (skb == (struct sk_buff *)0) {
        #line 225 
        error = -12;
        #line 226 
        goto rx_init_fail;
      }
      #line 229 
      memset((void *)skb->data,0,(unsigned long)common->rx_bufsize);
      #line 230 
      bf->bf_mpdu = skb;
      #line 232 
      bf->bf_buf_addr = dma_map_single_attrs(sc->dev,(void *)skb->data,(unsigned long)common->rx_bufsize,(enum dma_data_direction)DMA_BIDIRECTIONAL,0UL);
      #line 235 
      if ((long)(dma_mapping_error(sc->dev,bf->bf_buf_addr) != 0) != 0L) {
        #line 237 
        dev_kfree_skb_any(skb);
        #line 238 
        bf->bf_mpdu = (struct sk_buff *)0;
        #line 239 
        bf->bf_buf_addr = 0ULL;
        #line 240 
        ath_printk((char *)"\001",common,(char *)"dma_mapping_error() on RX init\n");
        #line 242 
        error = -12;
        #line 243 
        goto rx_init_fail;
      }
      #line 246 
      list_add_tail(& bf->list,& sc->rx.rxbuf);
    }
    #line 222 
    i ++;
    #line 222 
    bf ++;
  }
  #line 249 
  return 0;
  #line 251 
  rx_init_fail: 
                #line 251 
  ;
  #line 252 
  ath_rx_edma_cleanup(sc);
  #line 253 
  return error;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath_edma_start_recv(struct ath_softc *sc)
{
  #line 258 
  ath9k_hw_rxena(sc->sc_ah);
  #line 259 
  ath_rx_addbuffer_edma(sc,(enum ath9k_rx_qtype)ATH9K_RX_QUEUE_HP);
  #line 260 
  ath_rx_addbuffer_edma(sc,(enum ath9k_rx_qtype)ATH9K_RX_QUEUE_LP);
  #line 261 
  ath_opmode_init(sc);
  #line 262 
  ath9k_hw_startpcureceive(sc->sc_ah,(_Bool)((bool)((int)(sc->cur_chan)->offchannel) != 0));
  #line 263 
  return;
}

#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath_edma_stop_recv(struct ath_softc *sc)
{
  #line 267 
  ath_rx_remove_buffer(sc,(enum ath9k_rx_qtype)ATH9K_RX_QUEUE_HP);
  #line 268 
  ath_rx_remove_buffer(sc,(enum ath9k_rx_qtype)ATH9K_RX_QUEUE_LP);
  #line 269 
  return;
}

#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
int ath_rx_init(struct ath_softc *sc, int nbufs)
{
  #line 300 
  void *__mptr;
  #line 274 
  struct sk_buff *skb;
  #line 275 
  struct ath_rxbuf *bf;
  #line 273 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 276 
  int error = 0;
  #line 278 
  spinlock_check(& sc->sc_pcu_lock);
  {
    #line 278 
    struct lock_class_key __key;
    #line 278 
    __raw_spin_lock_init(& sc->sc_pcu_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&sc->sc_pcu_lock)->rlock",& __key);
  }
  #line 280 
  common->rx_bufsize = (unsigned int)((int)(sc->sc_ah)->caps.rx_status_len + 1926);
  #line 283 
  if (((sc->sc_ah)->caps.hw_caps & 16U) != 0U) {
    #line 284 
    return ath_rx_edma_init(sc,nbufs);
  }
  #line 286 
  if ((common->debug_mask & 512) != 0) 
                                       #line 286 
                                       ath_printk((char *)"\001",common,(char *)"cachelsz %u rxbufsize %u\n",(int)common->cachelsz,common->rx_bufsize);
  #line 291 
  error = ath_descdma_setup(sc,& sc->rx.rxdma,& sc->rx.rxbuf,(char *)"rx",nbufs,1,(_Bool)0);
  #line 293 
  if (error != 0) {
    #line 294 
    ath_printk((char *)"\001",common,(char *)"failed to allocate rx descriptors: %d\n",error);
    #line 297 
    goto err;
  }
  #line 300 
  __mptr = (void *)sc->rx.rxbuf.next;
  #line 300 
  bf = ((struct ath_rxbuf *)__mptr);
  #line 300 
  while (& bf->list != & sc->rx.rxbuf) {
    #line 300 
    void *__mptr_0;
    {
      #line 301 
      skb = ath_rxbuf_alloc(common,common->rx_bufsize,3264U);
      #line 303 
      if (skb == (struct sk_buff *)0) {
        #line 304 
        error = -12;
        #line 305 
        goto err;
      }
      #line 308 
      bf->bf_mpdu = skb;
      #line 309 
      bf->bf_buf_addr = dma_map_single_attrs(sc->dev,(void *)skb->data,(unsigned long)common->rx_bufsize,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 312 
      if ((long)(dma_mapping_error(sc->dev,bf->bf_buf_addr) != 0) != 0L) {
        #line 314 
        dev_kfree_skb_any(skb);
        #line 315 
        bf->bf_mpdu = (struct sk_buff *)0;
        #line 316 
        bf->bf_buf_addr = 0ULL;
        #line 317 
        ath_printk((char *)"\001",common,(char *)"dma_mapping_error() on RX init\n");
        #line 319 
        error = -12;
        #line 320 
        goto err;
      }
    }
    #line 300 
    __mptr_0 = (void *)bf->list.next;
    #line 300 
    bf = ((struct ath_rxbuf *)__mptr_0);
  }
  #line 323 
  sc->rx.rxlink = (u32 *)0U;
  #line 324 
  err: 
       #line 324 
  ;
  #line 325 
  if (error != 0) 
                  #line 326 
                  ath_rx_cleanup(sc);
  #line 328 
  return error;
}

#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
void ath_rx_cleanup(struct ath_softc *sc)
{
  #line 343 
  void *__mptr;
  #line 335 
  struct sk_buff *skb;
  #line 336 
  struct ath_rxbuf *bf;
  #line 333 
  struct ath_hw *ah = sc->sc_ah;
  #line 334 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 338 
  if (((sc->sc_ah)->caps.hw_caps & 16U) != 0U) {
    #line 339 
    ath_rx_edma_cleanup(sc);
    #line 340 
    return;
  }
  #line 343 
  __mptr = (void *)sc->rx.rxbuf.next;
  #line 343 
  bf = ((struct ath_rxbuf *)__mptr);
  #line 343 
  while (& bf->list != & sc->rx.rxbuf) {
    #line 343 
    void *__mptr_0;
    #line 344 
    skb = bf->bf_mpdu;
    #line 345 
    if (skb != (struct sk_buff *)0) {
      #line 346 
      dma_unmap_single_attrs(sc->dev,bf->bf_buf_addr,(unsigned long)common->rx_bufsize,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 349 
      consume_skb(skb);
      #line 350 
      bf->bf_buf_addr = 0ULL;
      #line 351 
      bf->bf_mpdu = (struct sk_buff *)0;
    }
    #line 343 
    __mptr_0 = (void *)bf->list.next;
    #line 343 
    bf = ((struct ath_rxbuf *)__mptr_0);
  }
  #line 354 
  return;
}

#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
u32 ath_calcrxfilter(struct ath_softc *sc)
{
  #line 378 
  u32 rfilt;
  #line 377 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 381 
  return 0U;
  #line 383 
  rfilt = 7U;
  #line 387 
  if ((int)(sc->hw)->conf.radar_enabled != 0) 
                                              #line 388 
                                              rfilt |= 8448U;
  #line 390 
  cif_spin_lock_bh_chan_lock_of_ath_softc(& sc->chan_lock);
  #line 392 
  if (((sc->cur_chan)->rxfilter & 256U) != 0U) 
                                               #line 393 
                                               rfilt |= 128U;
  #line 395 
  if ((int)(sc->sc_ah)->is_monitoring != 0) 
                                            #line 396 
                                            rfilt |= 32U;
  #line 398 
  if (((sc->cur_chan)->rxfilter & 32U) != 0U || (int)(sc->sc_ah)->dynack.enabled != 0) 
    #line 400 
    rfilt |= 8U;
  #line 402 
  if (((sc->sc_ah)->opmode == (unsigned int)NL80211_IFTYPE_STATION && (int)(sc->cur_chan)->nvifs <= 1) && ((sc->cur_chan)->rxfilter & 16U) == 0U) 
    #line 405 
    rfilt |= 512U;
  else 
    #line 406 
    if ((sc->sc_ah)->opmode != (unsigned int)NL80211_IFTYPE_OCB) 
                                                                 #line 407 
                                                                 rfilt |= 16U;
  #line 409 
  if ((sc->sc_ah)->opmode == (unsigned int)NL80211_IFTYPE_AP || ((sc->cur_chan)->rxfilter & 128U) != 0U) 
    #line 411 
    rfilt |= 16384U;
  #line 413 
  if (sc->cur_chandef.width != (unsigned int)NL80211_CHAN_WIDTH_20_NOHT) 
    #line 414 
    rfilt |= 1024U;
  #line 416 
  if ((int)(sc->cur_chan)->nvifs > 1 || ((sc->cur_chan)->rxfilter & 64U) != 0U) {
    #line 418 
    if ((sc->sc_ah)->hw_version.macVersion <= 64U) 
                                                   #line 419 
                                                   rfilt |= 32U;
    #line 420 
    rfilt |= 32768U;
  }
  #line 423 
  if (((sc->sc_ah)->hw_version.macVersion == 1024U || (sc->sc_ah)->hw_version.macVersion == 1280U) || (sc->sc_ah)->hw_version.macVersion == 1536U) 
    #line 425 
    rfilt |= 1048576U;
  #line 427 
  if ((sc->sc_ah)->hw_version.macVersion == 640U || (sc->sc_ah)->hw_version.macVersion == 704U) 
    #line 428 
    rfilt |= 524288U;
  #line 430 
  if ((int)ath9k_is_chanctx_enabled() != 0) {
    #line 430 
    if ((int)test_bit(5L,& common->op_flags) != 0) 
                                                   #line 432 
                                                   rfilt |= 16U;
  }
  #line 434 
  cif_spin_unlock_bh_chan_lock_of_ath_softc(& sc->chan_lock);
  #line 436 
  return rfilt;
}

#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
void ath_startrecv(struct ath_softc *sc)
{
  #line 455 
  void *__mptr_0;
  #line 463 
  void *__mptr_2;
  #line 455 
  void *__mptr;
  #line 443 
  struct ath_rxbuf *bf;
  #line 443 
  struct ath_rxbuf *tbf;
  #line 442 
  struct ath_hw *ah = sc->sc_ah;
  #line 445 
  if ((ah->caps.hw_caps & 16U) != 0U) {
    #line 446 
    ath_edma_start_recv(sc);
    #line 447 
    return;
  }
  #line 450 
  if (list_empty(& sc->rx.rxbuf) != 0) 
                                       #line 451 
                                       goto start_recv;
  #line 453 
  sc->rx.buf_hold = (struct ath_rxbuf *)0;
  #line 454 
  sc->rx.rxlink = (u32 *)0U;
  #line 455 
  __mptr = (void *)sc->rx.rxbuf.next;
  #line 455 
  bf = ((struct ath_rxbuf *)__mptr);
  #line 455 
  __mptr_0 = (void *)bf->list.next;
  #line 456 
  tbf = ((struct ath_rxbuf *)__mptr_0);
  #line 455 
  while (& bf->list != & sc->rx.rxbuf) {
    #line 455 
    void *__mptr_1;
    #line 456 
    ath_rx_buf_link(sc,bf,(_Bool)0);
    #line 455 
    bf = tbf;
    #line 455 
    __mptr_1 = (void *)tbf->list.next;
    #line 455 
    tbf = ((struct ath_rxbuf *)__mptr_1);
  }
  #line 460 
  if (list_empty(& sc->rx.rxbuf) != 0) 
                                       #line 461 
                                       goto start_recv;
  #line 463 
  __mptr_2 = (void *)sc->rx.rxbuf.next;
  #line 463 
  bf = ((struct ath_rxbuf *)__mptr_2);
  #line 464 
  ath9k_hw_putrxbuf(ah,(unsigned int)bf->bf_daddr);
  #line 465 
  ath9k_hw_rxena(ah);
  #line 467 
  start_recv: 
              #line 467 
  ;
  #line 468 
  ath_opmode_init(sc);
  #line 469 
  ath9k_hw_startpcureceive(ah,(_Bool)((bool)((int)(sc->cur_chan)->offchannel) != 0));
  #line 470 
  return;
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath_flushrecv(struct ath_softc *sc)
{
  #line 474 
  if (((sc->sc_ah)->caps.hw_caps & 16U) != 0U) 
                                               #line 475 
                                               ath_rx_tasklet(sc,1,(_Bool)1);
  #line 476 
  ath_rx_tasklet(sc,1,(_Bool)0);
  #line 477 
  return;
}

#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
bool ath_stoprecv(struct ath_softc *sc)
{
  #line 482 
  bool stopped;
  #line 481 
  struct ath_hw *ah = sc->sc_ah;
  #line 482 
  bool reset = (_Bool)0;
  #line 484 
  ath9k_hw_abortpcurecv(ah);
  #line 485 
  ath9k_hw_setrxfilter(ah,0U);
  #line 486 
  stopped = ath9k_hw_stopdmarecv(ah,& reset);
  #line 488 
  ath_flushrecv(sc);
  #line 490 
  if (((sc->sc_ah)->caps.hw_caps & 16U) != 0U) 
                                               #line 491 
                                               ath_edma_stop_recv(sc); else 
                                                                    #line 493 
                                                                    sc->rx.rxlink = (u32 *)0U;
  #line 495 
  if ((ah->ah_flags & 2U) == 0U && (long)(! stopped) != 0L) {
    #line 497 
    ;
    #line 497 
    if ((ath9k_hw_common(sc->sc_ah)->debug_mask & 1) != 0) {
      #line 497 
      ath_printk((char *)"\001",ath9k_hw_common(sc->sc_ah),(char *)"Failed to stop Rx DMA\n");
    }
    #line 499 
    (sc->debug.stats.reset[12]) ++;
  }
  #line 501 
  return (_Bool)(((int)stopped != 0 && ! reset) != 0);
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static bool ath_beacon_dtim_pending_cab(struct sk_buff *skb)
{
  #line 507 
  struct ieee80211_mgmt *mgmt;
  #line 508 
  u8 *pos;
  #line 508 
  u8 *end;
  #line 508 
  u8 id;
  #line 508 
  u8 elen;
  #line 509 
  struct ieee80211_tim_ie *tim;
  #line 511 
  mgmt = (struct ieee80211_mgmt *)skb->data;
  #line 512 
  pos = (u8 *)(& mgmt->u.beacon.variable);
  #line 513 
  end = skb->data + (unsigned long)skb->len;
  #line 515 
  while (pos + 2U < end) {
    #line 516 
    u8 *tmp;
    #line 517 
    u8 *tmp_0;
    #line 516 
    tmp = pos;
    #line 516 
    pos ++;
    #line 516 
    id = *tmp;
    #line 517 
    tmp_0 = pos;
    #line 517 
    pos ++;
    #line 517 
    elen = *tmp_0;
    #line 518 
    if (pos + (unsigned long)elen > end) 
                                         #line 519 
                                         break;
    #line 521 
    if ((unsigned int)id == 5U) {
      #line 522 
      if ((unsigned int)elen <= 3U) 
                                    #line 523 
                                    break;
      #line 524 
      tim = (struct ieee80211_tim_ie *)pos;
      #line 525 
      if ((unsigned int)tim->dtim_count != 0U) 
                                               #line 526 
                                               break;
      #line 527 
      return (_Bool)(((int)tim->bitmap_ctrl & 1) != 0);
    }
    #line 530 
    pos += (unsigned long)elen;
  }
  #line 533 
  return (_Bool)0;
}

#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath_rx_ps_beacon(struct ath_softc *sc, struct sk_buff *skb)
{
  #line 538 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 539 
  bool skip_beacon = (_Bool)0;
  #line 541 
  if (skb->len <= 35U) 
                       #line 542 
                       return;
  #line 544 
  sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags & 65534U);
  #line 546 
  if (((unsigned long)sc->ps_flags & 16UL) != 0UL) {
    #line 547 
    sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags & 65519U);
    #line 548 
    if ((common->debug_mask & 2048) != 0) 
                                          #line 548 
                                          ath_printk((char *)"\001",common,(char *)"Reconfigure beacon timers based on synchronized timestamp\n");
    #line 552 
    if ((int)ath9k_is_chanctx_enabled() != 0) 
      #line 553 
      if (sc->cur_chan == & sc->offchannel.chan) 
                                                 #line 554 
                                                 skip_beacon = (_Bool)1;
    #line 558 
    if (! skip_beacon) {
      #line 559 
      int __ret_warn_on;
      #line 559 
      __ret_warn_on = (sc->cur_chan)->beacon.beacon_interval == 0;
      #line 559 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 560 
        ldv_inline_asm();
        #line 561 
        ldv_inline_asm();
      }
      #line 558 
      if ((long)((long)(__ret_warn_on != 0)) == 0L) 
                                                    #line 560 
                                                    ath9k_set_beacon(sc);
    }
    #line 562 
    ath9k_p2p_beacon_sync(sc);
  }
  #line 565 
  if ((int)ath_beacon_dtim_pending_cab(skb) != 0) {
    #line 573 
    if ((common->debug_mask & 2048) != 0) 
                                          #line 573 
                                          ath_printk((char *)"\001",common,(char *)"Received DTIM beacon indicating buffered broadcast/multicast frame(s)\n");
    #line 575 
    sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags | 3U);
    #line 576 
    return;
  }
  #line 579 
  if (((unsigned long)sc->ps_flags & 2UL) != 0UL) {
    #line 585 
    sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags & 65533U);
    #line 586 
    if ((common->debug_mask & 2048) != 0) 
                                          #line 586 
                                          ath_printk((char *)"\001",common,(char *)"PS wait for CAB frames timed out\n");
  }
  #line 588 
  return;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath_rx_ps(struct ath_softc *sc, struct sk_buff *skb, bool mybeacon)
{
  #line 592 
  struct ieee80211_hdr *hdr;
  #line 593 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 595 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 598 
  if (((unsigned long)sc->ps_flags & 1UL) != 0UL) 
                                                  #line 598 
                                                  goto _LOR_0;
  else {
    #line 598 
    if ((int)ath9k_check_auto_sleep(sc) != 0) {
      #line 598 
      _LOR_0: 
              #line 599 
      ;
      #line 599 
      if ((int)mybeacon != 0) 
                              #line 600 
                              ath_rx_ps_beacon(sc,skb); else 
                                                             #line 598 
                                                             goto _LAND_2;
    }
    else {
      #line 598 
      _LAND_2: 
               #line 601 
      ;
      #line 601 
      if (((unsigned long)sc->ps_flags & 2UL) != 0UL) {
        #line 601 
        if ((int)ieee80211_is_data((unsigned short)((int)hdr->frame_control)) != 0) 
          #line 601 
          goto _LOR;
        else {
          #line 602 
          if ((int)ieee80211_is_action((unsigned short)((int)hdr->frame_control)) != 0) {
            #line 601 
            _LOR: 
            #line 603 
            if ((int)is_multicast_ether_addr((u8 *)(& hdr->addr1)) != 0) {
              #line 605 
              if (ieee80211_has_moredata((unsigned short)((int)hdr->frame_control))) 
                #line 601 
                goto _LAND_1;
              else {
                #line 610 
                sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags & 65532U);
                #line 611 
                if ((common->debug_mask & 2048) != 0) 
                                                      #line 611 
                                                      ath_printk((char *)"\001",common,(char *)"All PS CAB frames received, back to sleep\n");
              }
            }
            else 
                 #line 601 
                 goto _LAND_1;
          }
          else 
               #line 601 
               goto _LAND_1;
        }
      }
      else {
        #line 601 
        _LAND_1: 
                 #line 613 
        ;
        #line 613 
        if (((unsigned long)sc->ps_flags & 4UL) != 0UL) {
          #line 614 
          if (! is_multicast_ether_addr((u8 *)(& hdr->addr1))) {
            #line 615 
            if (! ieee80211_has_morefrags((unsigned short)((int)hdr->frame_control))) {
              #line 616 
              sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags & 65531U);
              #line 617 
              if ((common->debug_mask & 2048) != 0) 
                                                    #line 617 
                                                    ath_printk((char *)"\001",common,(char *)"Going back to sleep after having received PS-Poll data (0x%lx)\n",(unsigned long)sc->ps_flags & 15UL);
            }
          }
        }
      }
    }
  }
  #line 619 
  return;
}

#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static bool ath_edma_get_buffers(struct ath_softc *sc, enum ath9k_rx_qtype qtype, struct ath_rx_status *rs, struct ath_rxbuf **dest)
{
  #line 634 
  struct sk_buff *skb;
  #line 635 
  struct ath_rxbuf *bf;
  #line 636 
  int ret;
  #line 631 
  struct ath_rx_edma *rx_edma = & sc->rx.rx_edma[(unsigned int)qtype];
  #line 632 
  struct ath_hw *ah = sc->sc_ah;
  #line 633 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 638 
  skb = skb_peek(& rx_edma->rx_fifo);
  #line 639 
  if (skb == (struct sk_buff *)0) 
                                  #line 640 
                                  return (_Bool)0;
  #line 642 
  bf = *((struct ath_rxbuf **)(& skb->cb));
  #line 643 
  if ((long)(bf == (struct ath_rxbuf *)0) != 0L) {
    #line 644 
    ldv_inline_asm();
    #line 645 
    ldv_inline_asm();
    #line 646 
    ldv_inline_asm();
    #line 643 
    ;
  }
  #line 645 
  dma_sync_single_for_cpu(sc->dev,bf->bf_buf_addr,(unsigned long)common->rx_bufsize,(enum dma_data_direction)DMA_FROM_DEVICE);
  #line 648 
  ret = ath9k_hw_process_rxdesc_edma(ah,rs,(void *)skb->data);
  #line 649 
  if (ret == -115) {
    #line 651 
    dma_sync_single_for_device(sc->dev,bf->bf_buf_addr,(unsigned long)common->rx_bufsize,(enum dma_data_direction)DMA_FROM_DEVICE);
    #line 653 
    return (_Bool)0;
  }
  #line 656 
  __skb_unlink(skb,& rx_edma->rx_fifo);
  #line 657 
  if (ret == -22) {
    #line 659 
    list_add_tail(& bf->list,& sc->rx.rxbuf);
    #line 660 
    ath_rx_edma_buf_link(sc,qtype);
    #line 662 
    skb = skb_peek(& rx_edma->rx_fifo);
    #line 663 
    if (skb != (struct sk_buff *)0) {
      #line 664 
      bf = *((struct ath_rxbuf **)(& skb->cb));
      #line 665 
      if ((long)(bf == (struct ath_rxbuf *)0) != 0L) {
        #line 666 
        ldv_inline_asm();
        #line 667 
        ldv_inline_asm();
        #line 668 
        ldv_inline_asm();
        #line 665 
        ;
      }
      #line 667 
      __skb_unlink(skb,& rx_edma->rx_fifo);
      #line 668 
      list_add_tail(& bf->list,& sc->rx.rxbuf);
      #line 669 
      ath_rx_edma_buf_link(sc,qtype);
    }
    #line 672 
    bf = (struct ath_rxbuf *)0;
  }
  #line 675 
  *dest = bf;
  #line 676 
  return (_Bool)1;
}

#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static struct ath_rxbuf *ath_edma_get_next_rx_buf(struct ath_softc *sc, struct ath_rx_status *rs, enum ath9k_rx_qtype qtype)
{
  #line 683 
  struct ath_rxbuf *bf = (struct ath_rxbuf *)0;
  #line 685 
  while (1) {
    #line 685 
    if (! ((int)ath_edma_get_buffers(sc,qtype,rs,& bf) != 0)) 
                                                              #line 685 
                                                              break;
    #line 686 
    if (bf == (struct ath_rxbuf *)0) 
                                     #line 687 
                                     continue;
    #line 689 
    return bf;
  }
  #line 691 
  return (struct ath_rxbuf *)0;
}

#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static struct ath_rxbuf *ath_get_next_rx_buf(struct ath_softc *sc, struct ath_rx_status *rs)
{
  #line 708 
  void *__mptr;
  #line 699 
  struct ath_desc *ds;
  #line 700 
  struct ath_rxbuf *bf;
  #line 701 
  int ret;
  #line 697 
  struct ath_hw *ah = sc->sc_ah;
  #line 698 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 703 
  if (list_empty(& sc->rx.rxbuf) != 0) {
    #line 704 
    sc->rx.rxlink = (u32 *)0U;
    #line 705 
    return (struct ath_rxbuf *)0;
  }
  #line 708 
  __mptr = (void *)sc->rx.rxbuf.next;
  #line 708 
  bf = ((struct ath_rxbuf *)__mptr);
  #line 709 
  if (sc->rx.buf_hold == bf) 
                             #line 710 
                             return (struct ath_rxbuf *)0;
  #line 712 
  ds = (struct ath_desc *)bf->bf_desc;
  #line 725 
  ret = ath9k_hw_rxprocdesc(ah,ds,rs);
  #line 726 
  if (ret == -115) {
    #line 737 
    void *__mptr_0;
    #line 727 
    struct ath_rx_status trs;
    #line 728 
    struct ath_rxbuf *tbf;
    #line 729 
    struct ath_desc *tds;
    #line 731 
    memset((void *)(& trs),0,56UL);
    #line 732 
    if (list_is_last(& bf->list,& sc->rx.rxbuf) != 0) {
      #line 733 
      sc->rx.rxlink = (u32 *)0U;
      #line 734 
      return (struct ath_rxbuf *)0;
    }
    #line 737 
    __mptr_0 = (void *)bf->list.next;
    #line 737 
    tbf = ((struct ath_rxbuf *)__mptr_0);
    #line 750 
    tds = (struct ath_desc *)tbf->bf_desc;
    #line 751 
    ret = ath9k_hw_rxprocdesc(ah,tds,& trs);
    #line 752 
    if (ret == -115) 
                     #line 753 
                     return (struct ath_rxbuf *)0;
    #line 759 
    ret = ath9k_hw_rxprocdesc(ah,ds,rs);
    #line 760 
    if (ret == -115) {
      #line 765 
      rs->rs_datalen = (unsigned short)0U;
      #line 766 
      rs->rs_more = (unsigned char)1U;
    }
  }
  #line 770 
  list_del(& bf->list);
  #line 771 
  if (bf->bf_mpdu == (struct sk_buff *)0) 
                                          #line 772 
                                          return bf;
  #line 779 
  dma_sync_single_for_cpu(sc->dev,bf->bf_buf_addr,(unsigned long)common->rx_bufsize,(enum dma_data_direction)DMA_FROM_DEVICE);
  #line 783 
  return bf;
}

#line 786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath9k_process_tsf(struct ath_rx_status *rs, struct ieee80211_rx_status *rxs, u64 tsf)
{
  #line 790 
  u32 tsf_lower = (unsigned int)tsf;
  #line 792 
  rxs->mactime = (tsf & 18446744069414584320ULL) | (unsigned long long)rs->rs_tstamp;
  #line 793 
  if (rs->rs_tstamp > tsf_lower && (long)(rs->rs_tstamp - tsf_lower > 268435456U) != 0L) 
    #line 795 
    rxs->mactime += 18446744069414584320ULL;
  #line 797 
  if (rs->rs_tstamp < tsf_lower && (long)(tsf_lower - rs->rs_tstamp > 268435456U) != 0L) 
    #line 799 
    rxs->mactime += 4294967296ULL;
  #line 800 
  return;
}

#line 807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static int ath9k_rx_skb_preprocess(struct ath_softc *sc, struct sk_buff *skb, struct ath_rx_status *rx_stats, struct ieee80211_rx_status *rx_status, bool *decrypt_error, u64 tsf)
{
  #line 912 
  int __ret_warn_on;
  #line 816 
  struct ieee80211_hdr *hdr;
  #line 818 
  bool is_phyerr;
  #line 813 
  struct ieee80211_hw *hw = sc->hw;
  #line 814 
  struct ath_hw *ah = sc->sc_ah;
  #line 815 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 817 
  bool discard_current = sc->rx.discard_next;
  #line 824 
  if ((int)discard_current != 0) 
                                 #line 825 
                                 goto corrupt;
  #line 827 
  sc->rx.discard_next = (_Bool)0;
  #line 833 
  is_phyerr = (_Bool)(((int)rx_stats->rs_status & 2) != 0);
  #line 834 
  if ((unsigned int)rx_stats->rs_datalen == 0U || (unsigned int)rx_stats->rs_datalen <= 9U && ! is_phyerr) {
    #line 836 
    (sc->debug.stats.rxstats.rx_len_err) ++;
    #line 837 
    goto corrupt;
  }
  #line 845 
  if ((unsigned int)rx_stats->rs_datalen > common->rx_bufsize - (unsigned int)ah->caps.rx_status_len) {
    #line 846 
    (sc->debug.stats.rxstats.rx_len_err) ++;
    #line 847 
    goto corrupt;
  }
  #line 851 
  if ((unsigned int)rx_stats->rs_more != 0U) 
                                             #line 852 
                                             return 0;
  #line 861 
  if (((int)rx_stats->rs_status & 64) != 0) 
                                            #line 862 
                                            goto corrupt;
  #line 864 
  hdr = (struct ieee80211_hdr *)(skb->data + (unsigned long)ah->caps.rx_status_len);
  #line 866 
  ath9k_process_tsf(rx_stats,rx_status,tsf);
  #line 867 
  ath_debug_stat_rx(sc,rx_stats);
  #line 873 
  if (((int)rx_stats->rs_status & 2) != 0) {
    #line 881 
    if ((int)hw->conf.radar_enabled != 0) 
                                          #line 882 
                                          ath9k_dfs_process_phyerr(sc,(void *)hdr,rx_stats,rx_status->mactime);
    else 
      #line 884 
      if (sc->spec_priv.spectral_mode != (unsigned int)SPECTRAL_DISABLED) {
        #line 884 
        if (ath_cmn_process_fft(& sc->spec_priv,hdr,rx_stats,rx_status->mactime) != 0) 
          #line 887 
          (sc->debug.stats.rxstats.rx_spectral) ++;
      }
    #line 889 
    return -22;
  }
  #line 896 
  cif_spin_lock_bh_chan_lock_of_ath_softc(& sc->chan_lock);
  #line 897 
  if (! ath9k_cmn_rx_accept(common,hdr,rx_status,rx_stats,decrypt_error,
                            (sc->cur_chan)->rxfilter)) {
    #line 899 
    cif_spin_unlock_bh_chan_lock_of_ath_softc(& sc->chan_lock);
    #line 900 
    return -22;
  }
  #line 902 
  cif_spin_unlock_bh_chan_lock_of_ath_softc(& sc->chan_lock);
  #line 904 
  if ((int)ath_is_mybeacon(common,hdr) != 0) {
    #line 905 
    (sc->debug.stats.rxstats.rx_beacons) ++;
    #line 906 
    rx_stats->is_mybeacon = (_Bool)1;
  }
  #line 912 
  __ret_warn_on = ah->curchan == (struct ath9k_channel *)0;
  #line 912 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 913 
    ldv_inline_asm();
    #line 914 
    ldv_inline_asm();
  }
  #line 912 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 913 
                                                return -22;
  #line 915 
  if (ath9k_cmn_process_rate(common,hw,rx_stats,rx_status) != 0) {
    #line 920 
    if (common->debug_mask != 0) 
                                 #line 920 
                                 ath_printk((char *)"\001",common,(char *)"unsupported hw bitrate detected 0x%02x using 1 Mbit\n",(int)rx_stats->rs_rate);
    #line 922 
    (sc->debug.stats.rxstats.rx_rate_err) ++;
    #line 923 
    return -22;
  }
  #line 926 
  if ((int)ath9k_is_chanctx_enabled() != 0) 
    #line 927 
    if ((int)rx_stats->is_mybeacon != 0) 
                                         #line 928 
                                         ath_chanctx_beacon_recv_ev(sc,(enum ath_chanctx_event)ATH_CHANCTX_EVENT_BEACON_RECEIVED);
  #line 932 
  ath9k_cmn_process_rssi(common,hw,rx_stats,rx_status);
  #line 934 
  rx_status->band = (unsigned char)((ah->curchan)->chan)->band;
  #line 935 
  rx_status->freq = (unsigned short)((ah->curchan)->chan)->center_freq;
  #line 936 
  rx_status->antenna = rx_stats->rs_antenna;
  #line 937 
  rx_status->flag |= 65536U;
  #line 940 
  if ((int)ieee80211_is_data_present((unsigned short)((int)hdr->frame_control)) != 0) {
    #line 941 
    if (! ieee80211_is_qos_nullfunc((unsigned short)((int)hdr->frame_control))) 
      #line 942 
      (sc->rx.num_pkts) ++;
  }
  #line 945 
  return 0;
  #line 947 
  corrupt: 
           #line 947 
  ;
  #line 948 
  sc->rx.discard_next = (_Bool)((unsigned int)rx_stats->rs_more != 0U);
  #line 949 
  return -22;
}

#line 962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath9k_antenna_check(struct ath_softc *sc, struct ath_rx_status *rs)
{
  #line 965 
  struct ath_hw *ah = sc->sc_ah;
  #line 966 
  struct ath9k_hw_capabilities *pCap = & ah->caps;
  #line 967 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 969 
  if ((ah->caps.hw_caps & 1024U) == 0U) 
                                        #line 970 
                                        return;
  #line 976 
  if ((int)sc->rx.defant != (int)rs->rs_antenna) {
    #line 977 
    sc->rx.rxotherant = (u8)((int)sc->rx.rxotherant + 1);
    #line 977 
    if ((unsigned int)sc->rx.rxotherant > 2U) 
                                              #line 978 
                                              ath_setdefantenna(sc,(unsigned int)rs->rs_antenna);
  }
  else 
       #line 980 
       sc->rx.rxotherant = (unsigned char)0U;
  #line 983 
  if ((pCap->hw_caps & 131072U) != 0U) {
    #line 984 
    if ((int)common->bt_ant_diversity != 0) 
                                            #line 985 
                                            ath_ant_comb_scan(sc,rs);
  }
  else 
       #line 987 
       ath_ant_comb_scan(sc,rs);
  #line 988 
  return;
}

#line 991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath9k_apply_ampdu_details(struct ath_softc *sc, struct ath_rx_status *rs, struct ieee80211_rx_status *rxs)
{
  #line 994 
  if ((unsigned int)rs->rs_isaggr != 0U) {
    #line 995 
    rxs->flag |= 4608U;
    #line 997 
    rxs->ampdu_reference = sc->rx.ampdu_ref;
    #line 999 
    if ((unsigned int)rs->rs_moreaggr == 0U) {
      #line 1000 
      rxs->flag |= 8192U;
      #line 1001 
      (sc->rx.ampdu_ref) ++;
    }
    #line 1004 
    if (((int)rs->rs_flags & 16) != 0) 
                                       #line 1005 
                                       rxs->flag |= 16384U;
  }
  #line 1007 
  return;
}

#line 1009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
static void ath_rx_count_airtime(struct ath_softc *sc, struct ath_rx_status *rs, struct sk_buff *skb)
{
  #line 1016 
  struct ieee80211_sta *sta;
  #line 1017 
  struct ieee80211_rx_status *rxs;
  #line 1018 
  struct ieee80211_rate *rate;
  #line 1019 
  bool is_sgi;
  #line 1019 
  bool is_40;
  #line 1019 
  bool is_sp;
  #line 1020 
  int phy;
  #line 1023 
  u8 tidno;
  #line 1013 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 1014 
  struct ath_hw *ah = sc->sc_ah;
  #line 1015 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 1021 
  u16 len = rs->rs_datalen;
  #line 1022 
  u32 airtime = 0U;
  #line 1025 
  if (! ieee80211_is_data((unsigned short)((int)hdr->frame_control))) 
    #line 1026 
    return;
  #line 1028 
  rcu_read_lock();
  #line 1030 
  sta = ieee80211_find_sta_by_ifaddr(sc->hw,(u8 *)(& hdr->addr2),(u8 *)0U);
  #line 1031 
  if (sta == (struct ieee80211_sta *)0) 
                                        #line 1032 
                                        goto exit;
  #line 1033 
  tidno = (unsigned char)((unsigned int)((unsigned char)skb->priority) & 15U);
  #line 1035 
  rxs = IEEE80211_SKB_RXCB(skb);
  #line 1037 
  is_sgi = (_Bool)(((int)rxs->enc_flags & 4) != 0);
  #line 1038 
  is_40 = (_Bool)((unsigned int)rxs->bw == 3U);
  #line 1039 
  is_sp = (_Bool)(((int)rxs->enc_flags & 1) != 0);
  #line 1041 
  if ((unsigned int)rxs->encoding == 1U) {
    #line 1045 
    airtime = ath_pkt_duration(sc,(unsigned char)((int)rxs->rate_idx),(int)len,
                         (int)is_40,(int)is_sgi,
                         (_Bool)((bool)((int)is_sp) != 0)) + airtime;
  }
  else {
    #line 1048 
    phy = (unsigned int)rs->rs_rate + 232U <= 6U;
    #line 1049 
    rate = common->sbands[(int)rxs->band].bitrates + (unsigned long)rxs->rate_idx;
    #line 1051 
    airtime = (unsigned int)ath9k_hw_computetxtime(ah,(unsigned char)((int)((unsigned char)phy)),
                               (int)rate->bitrate * 100,(unsigned int)len,
                               (unsigned short)((int)rxs->rate_idx),
                               (_Bool)((bool)((int)is_sp) != 0)) + airtime;
  }
  #line 1054 
  ieee80211_sta_register_airtime(sta,(unsigned char)((int)tidno),0U,airtime);
  #line 1055 
  exit: 
        #line 1055 
  ;
  #line 1056 
  rcu_read_unlock();
  #line 1057 
  return;
}

#line 1059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/recv.c"
int ath_rx_tasklet(struct ath_softc *sc, int flush, bool hp)
{
  #line 1061 
  struct ath_rxbuf *bf;
  #line 1062 
  struct sk_buff *requeue_skb;
  #line 1062 
  struct sk_buff *hdr_skb;
  #line 1063 
  struct ieee80211_rx_status *rxs;
  #line 1067 
  int retval;
  #line 1068 
  struct ath_rx_status rs;
  #line 1069 
  enum ath9k_rx_qtype qtype;
  #line 1071 
  int dma_type;
  #line 1073 
  unsigned long flags;
  #line 1074 
  dma_addr_t new_buf_addr;
  #line 1076 
  struct ieee80211_hdr *hdr;
  #line 1062 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 1064 
  struct ath_hw *ah = sc->sc_ah;
  #line 1065 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 1066 
  struct ieee80211_hw *hw = sc->hw;
  #line 1070 
  bool edma = (_Bool)((ah->caps.hw_caps & 16U) != 0U);
  #line 1072 
  u64 tsf = 0ULL;
  #line 1075 
  unsigned int budget = 512U;
  #line 1078 
  if ((int)edma != 0) 
                      #line 1079 
                      dma_type = 0; else 
                                         #line 1081 
                                         dma_type = 2;
  #line 1083 
  qtype = (enum ath9k_rx_qtype)(! hp);
  #line 1085 
  tsf = ath9k_hw_gettsf64(ah);
  #line 1087 
  while (1) {
    {
      #line 1229 
      unsigned int tmp_6;
      #line 1088 
      bool decrypt_error = (_Bool)0;
      #line 1090 
      memset((void *)(& rs),0,56UL);
      #line 1091 
      if ((int)edma != 0) 
                          #line 1092 
                          bf = ath_edma_get_next_rx_buf(sc,& rs,qtype); else 
                                                                    #line 1094 
                                                                    bf = ath_get_next_rx_buf(sc,& rs);
      #line 1096 
      if (bf == (struct ath_rxbuf *)0) 
                                       #line 1097 
                                       break;
      #line 1099 
      skb = bf->bf_mpdu;
      #line 1100 
      if (skb == (struct sk_buff *)0) 
                                      #line 1101 
                                      goto __Cont;
      #line 1107 
      if (sc->rx.frag != (struct sk_buff *)0) 
                                              #line 1108 
                                              hdr_skb = sc->rx.frag; else 
                                                                    #line 1110 
                                                                    hdr_skb = skb;
      #line 1112 
      rxs = IEEE80211_SKB_RXCB(hdr_skb);
      #line 1113 
      memset((void *)rxs,0,48UL);
      #line 1115 
      retval = ath9k_rx_skb_preprocess(sc,hdr_skb,& rs,rxs,& decrypt_error,tsf);
      #line 1117 
      if (retval != 0) 
                       #line 1118 
                       goto requeue_drop_frag;
      #line 1122 
      requeue_skb = ath_rxbuf_alloc(common,common->rx_bufsize,2592U);
      #line 1128 
      if (requeue_skb == (struct sk_buff *)0) {
        #line 1129 
        (sc->debug.stats.rxstats.rx_oom_err) ++;
        #line 1130 
        goto requeue_drop_frag;
      }
      #line 1134 
      new_buf_addr = dma_map_single_attrs(sc->dev,(void *)requeue_skb->data,(unsigned long)common->rx_bufsize,(enum dma_data_direction)dma_type,0UL);
      #line 1136 
      if ((long)(dma_mapping_error(sc->dev,new_buf_addr) != 0) != 0L) {
        #line 1137 
        dev_kfree_skb_any(requeue_skb);
        #line 1138 
        goto requeue_drop_frag;
      }
      #line 1142 
      dma_unmap_single_attrs(sc->dev,bf->bf_buf_addr,(unsigned long)common->rx_bufsize,(enum dma_data_direction)dma_type,0UL);
      #line 1145 
      bf->bf_mpdu = requeue_skb;
      #line 1146 
      bf->bf_buf_addr = new_buf_addr;
      #line 1148 
      skb_put(skb,(unsigned int)((int)rs.rs_datalen + (int)ah->caps.rx_status_len));
      #line 1149 
      if ((unsigned int)ah->caps.rx_status_len != 0U) 
                                                      #line 1150 
                                                      skb_pull(skb,(unsigned int)ah->caps.rx_status_len);
      #line 1152 
      if ((unsigned int)rs.rs_more == 0U) 
                                          #line 1153 
                                          ath9k_cmn_rx_skb_postprocess(common,hdr_skb,& rs,rxs,(_Bool)((bool)((int)decrypt_error) != 0));
      #line 1156 
      if ((unsigned int)rs.rs_more != 0U) {
        #line 1157 
        (sc->debug.stats.rxstats.rx_frags) ++;
        #line 1163 
        if (sc->rx.frag != (struct sk_buff *)0) {
          #line 1165 
          dev_kfree_skb_any(sc->rx.frag);
          #line 1166 
          dev_kfree_skb_any(skb);
          #line 1167 
          (sc->debug.stats.rxstats.rx_too_many_frags_err) ++;
          #line 1168 
          skb = (struct sk_buff *)0;
        }
        #line 1170 
        sc->rx.frag = skb;
        #line 1171 
        goto requeue;
      }
      #line 1174 
      if (sc->rx.frag != (struct sk_buff *)0) {
        #line 1175 
        int space = (int)(skb->len - (unsigned int)skb_tailroom(hdr_skb));
        #line 1177 
        if (pskb_expand_head(hdr_skb,0,space,2592U) < 0) {
          #line 1178 
          consume_skb(skb);
          #line 1179 
          (sc->debug.stats.rxstats.rx_oom_err) ++;
          #line 1180 
          goto requeue_drop_frag;
        }
        #line 1183 
        sc->rx.frag = (struct sk_buff *)0;
        #line 1185 
        ;
        #line 1185 
        ;
        #line 1185 
        skb_copy_from_linear_data(skb,skb_put(hdr_skb,skb->len),skb->len);
        #line 1187 
        dev_kfree_skb_any(skb);
        #line 1188 
        skb = hdr_skb;
      }
      #line 1191 
      if ((rxs->flag & 8U) != 0U) 
                                  #line 1192 
                                  skb_trim(skb,skb->len + 4294967288U);
      #line 1194 
      cif___ldv_spin_lock_sc_pm_lock_of_ath_softc(& sc->sc_pm_lock);
      #line 1195 
      if (((unsigned long)sc->ps_flags & 7UL) != 0UL) 
                                                      #line 1199 
                                                      ath_rx_ps(sc,skb,(_Bool)((bool)((int)rs.is_mybeacon) != 0));
      else {
        #line 1197 
        if ((int)ath9k_check_auto_sleep(sc) != 0) 
                                                  #line 1199 
                                                  ath_rx_ps(sc,skb,(_Bool)((bool)((int)rs.is_mybeacon) != 0));
      }
      #line 1200 
      cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc(& sc->sc_pm_lock,flags);
      #line 1202 
      ath9k_antenna_check(sc,& rs);
      #line 1203 
      ath9k_apply_ampdu_details(sc,& rs,rxs);
      #line 1204 
      ath_debug_rate_stats(sc,& rs,skb);
      #line 1205 
      ath_rx_count_airtime(sc,& rs,skb);
      #line 1207 
      hdr = (struct ieee80211_hdr *)skb->data;
      #line 1208 
      if ((int)ieee80211_is_ack((unsigned short)((int)hdr->frame_control)) != 0) 
        #line 1209 
        ath_dynack_sample_ack_ts(sc->sc_ah,skb,rs.rs_tstamp);
      #line 1211 
      ieee80211_rx(hw,skb);
      #line 1213 
      requeue_drop_frag: 
                         #line 1213 
      ;
      #line 1214 
      if (sc->rx.frag != (struct sk_buff *)0) {
        #line 1215 
        dev_kfree_skb_any(sc->rx.frag);
        #line 1216 
        sc->rx.frag = (struct sk_buff *)0;
      }
      #line 1218 
      requeue: 
               #line 1218 
      ;
      #line 1219 
      list_add_tail(& bf->list,& sc->rx.rxbuf);
      #line 1221 
      if (! edma) {
        #line 1222 
        ath_rx_buf_relink(sc,bf,(_Bool)(flush != 0));
        #line 1223 
        if (flush == 0) 
                        #line 1224 
                        ath9k_hw_rxena(ah);
      }
      else 
        #line 1225 
        if (flush == 0) 
                        #line 1226 
                        ath_rx_edma_buf_link(sc,qtype);
      #line 1229 
      tmp_6 = budget;
      #line 1229 
      budget --;
      #line 1229 
      ;
      #line 1229 
      if (tmp_6 == 0U) 
                       #line 1230 
                       break;
    }
    #line 1087 
    __Cont: 
            #line 1087 
    ;
  }
  #line 1233 
  if (((unsigned int)ah->imask & 16U) == 0U) {
    #line 1234 
    ah->imask = (enum ath9k_int)((unsigned int)ah->imask | 48U);
    #line 1235 
    ath9k_hw_set_interrupts(ah);
  }
  #line 1238 
  return 0;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/recv.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 137 
  ldv_init_list_head(list);
  #line 138 
  return;
}

#line 809  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/recv.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 812 
  return ldv_devm_kzalloc(size,flags);
}

#line 816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/recv.i.aux"
static void cif_spin_lock_bh_chan_lock_of_ath_softc(spinlock_t *lock)
{
  #line 819 
  ldv_spin_model_lock((char *)"chan_lock_of_ath_softc");
  #line 821 
  spin_lock_bh(lock);
  #line 822 
  return;
}

#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/recv.i.aux"
static void cif_spin_unlock_bh_chan_lock_of_ath_softc(spinlock_t *lock)
{
  #line 828 
  ldv_spin_model_unlock((char *)"chan_lock_of_ath_softc");
  #line 830 
  spin_unlock_bh(lock);
  #line 831 
  return;
}

#line 834  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/recv.i.aux"
static void cif___ldv_spin_lock_sc_pm_lock_of_ath_softc(spinlock_t *lock)
{
  #line 837 
  ldv_spin_model_lock((char *)"sc_pm_lock_of_ath_softc");
  #line 839 
  __ldv_spin_lock(lock);
  #line 840 
  return;
}

#line 843  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/recv.i.aux"
static void cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc(spinlock_t *lock, unsigned long flags)
{
  #line 846 
  ldv_spin_model_unlock((char *)"sc_pm_lock_of_ath_softc");
  #line 848 
  spin_unlock_irqrestore(lock,flags);
  #line 849 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 791  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static void cif_spin_lock_bh_axq_lock_of_ath_txq(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static void cif_spin_unlock_bh_axq_lock_of_ath_txq(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static void cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_0(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static void cif_spin_unlock_irqrestore_cc_lock_of_ath_common(spinlock_t *lock, unsigned long flags);
#line 35 
#line 809 
static void cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_0(spinlock_t *lock);
#line 35 
#line 827 
static void cif___ldv_spin_lock_cc_lock_of_ath_common(spinlock_t *lock);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void __init_completion(struct completion *x)
{
  #line 87 
  x->done = 0U;
  {
    #line 88 
    struct lock_class_key __key;
    #line 88 
    __init_waitqueue_head(& x->wait,(char *)"&x->wait",& __key);
  }
  #line 90 
  return;
}

#line 107 
#line 107 
unsigned long wait_for_completion_timeout(struct completion *, unsigned long);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 291 
#line 291 
unsigned int jiffies_to_msecs(unsigned long);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 845  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1032 
#line 1032 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);
#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  #line 1049 
  return __alloc_skb(size,priority,0,-1);
}

#line 1114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static struct ieee80211_tx_info *IEEE80211_SKB_CB(struct sk_buff *skb)
{
  #line 1116 
  return (struct ieee80211_tx_info *)(& skb->cb);
}

#line 5371 
#line 5371 
void ieee80211_queue_work(struct ieee80211_hw *, struct work_struct *);
#line 5383 
#line 5383 
void ieee80211_queue_delayed_work(struct ieee80211_hw *, struct delayed_work *, unsigned long);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
#line 206 
void ath_hw_cycle_counters_update(struct ath_common *);
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/calib.h"
#line 110 
bool ath9k_hw_reset_calvalid(struct ath_hw *);
#line 119 
#line 119 
s16 ath9k_hw_getchan_noise(struct ath_hw *, struct ath9k_channel *, s16);
#line 1067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
#line 1067 
u32 ar9003_get_pll_sqsum_dvc(struct ath_hw *);
#line 1073 
#line 1073 
bool ath9k_hw_check_alive(struct ath_hw *);
#line 1117 
#line 1117 
void ar9003_paprd_enable(struct ath_hw *, bool);
#line 1118 
#line 1118 
void ar9003_paprd_populate_single_table(struct ath_hw *, struct ath9k_hw_cal_data *, int);
#line 1121 
#line 1121 
int ar9003_paprd_create_curve(struct ath_hw *, struct ath9k_hw_cal_data *, int);
#line 1123 
#line 1123 
void ar9003_paprd_setup_gain_table(struct ath_hw *, int);
#line 1124 
#line 1124 
int ar9003_paprd_init_table(struct ath_hw *);
#line 1125 
#line 1125 
bool ar9003_paprd_is_done(struct ath_hw *);
#line 1126 
#line 1126 
bool ar9003_is_paprd_enabled(struct ath_hw *);
#line 1149 
#line 1149 
void ath9k_hw_ani_monitor(struct ath_hw *, struct ath9k_channel *);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw-ops.h"
__inline static int ath9k_hw_calibrate(struct ath_hw *ah, struct ath9k_channel *chan, u8 rxchainmask, bool longcal)
{
  #line 48 
  return (*(ath9k_hw_ops(ah)->calibrate))(ah,chan,
                                         (unsigned char)((int)rxchainmask),
                                         (_Bool)((bool)((int)longcal) != 0));
}

#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
__inline static void ath_txq_lock(struct ath_softc *sc, struct ath_txq *txq)
{
  #line 567 
  cif_spin_lock_bh_axq_lock_of_ath_txq(& txq->axq_lock);
  #line 568 
  return;
}

#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
__inline static void ath_txq_unlock(struct ath_softc *sc, struct ath_txq *txq)
{
  #line 571 
  cif_spin_unlock_bh_axq_lock_of_ath_txq(& txq->axq_lock);
  #line 572 
  return;
}

#line 596 
#line 596 
int ath_tx_start(struct ieee80211_hw *hw, struct sk_buff *skb, struct ath_tx_control *txctl);
#line 741 
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_hw_check_work(struct work_struct *work);
#line 743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
bool ath_hw_check(struct ath_softc *sc);
#line 744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_hw_pll_work(struct work_struct *work);
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_paprd_calibrate(struct work_struct *work);
#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_ani_calibrate(struct timer_list *t);
#line 747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_start_ani(struct ath_softc *sc);
#line 748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_stop_ani(struct ath_softc *sc);
#line 749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_check_ani(struct ath_softc *sc);
#line 750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
int ath_update_survey_stats(struct ath_softc *sc);
#line 751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_update_survey_nf(struct ath_softc *sc, int channel);
#line 752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 752 
void ath9k_queue_reset(struct ath_softc *sc, enum ath_reset_type type);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
static bool ath_tx_complete_check(struct ath_softc *sc)
{
  #line 25 
  struct ath_txq *txq;
  #line 26 
  int i;
  #line 28 
  if ((int)sc->tx99_state != 0) 
                                #line 29 
                                return (_Bool)1;
  #line 31 
  i = 0;
  #line 31 
  while (i <= 3) {
    #line 32 
    txq = sc->tx.txq_map[i];
    #line 34 
    ath_txq_lock(sc,txq);
    #line 35 
    if (txq->axq_depth != 0U) {
      #line 36 
      if ((int)txq->axq_tx_inprogress != 0) {
        #line 37 
        ath_txq_unlock(sc,txq);
        #line 38 
        goto reset;
      }
      #line 41 
      txq->axq_tx_inprogress = (_Bool)1;
    }
    #line 43 
    ath_txq_unlock(sc,txq);
    #line 31 
    i ++;
  }
  #line 46 
  return (_Bool)1;
  #line 48 
  reset: 
         #line 48 
  ;
  #line 49 
  ;
  #line 49 
  if ((ath9k_hw_common(sc->sc_ah)->debug_mask & 1) != 0) {
    #line 49 
    ath_printk((char *)"\001",ath9k_hw_common(sc->sc_ah),(char *)"tx hung, resetting the chip\n");
  }
  #line 51 
  ath9k_queue_reset(sc,(enum ath_reset_type)RESET_TYPE_TX_HANG);
  #line 52 
  return (_Bool)0;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_hw_check_work(struct work_struct *work)
{
  #line 58 
  void *__mptr;
  #line 58 
  __mptr = (void *)work;
  #line 58 
  struct ath_softc *sc = ((struct ath_softc *)(__mptr + 18446744073709535944U));
  #line 61 
  if (ath_hw_check(sc)) {
    #line 62 
    if (! ath_tx_complete_check(sc)) 
                                     #line 63 
                                     return;
  }
  else 
       #line 63 
       return;
  #line 65 
  ;
  #line 65 
  ;
  #line 65 
  ieee80211_queue_delayed_work(sc->hw,& sc->hw_check_work,msecs_to_jiffies(1000U));
  #line 67 
  return;
}

#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
bool ath_hw_check(struct ath_softc *sc)
{
  #line 75 
  enum ath_reset_type type;
  #line 76 
  bool is_alive;
  #line 74 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 78 
  ath9k_ps_wakeup(sc);
  #line 80 
  is_alive = ath9k_hw_check_alive(sc->sc_ah);
  #line 82 
  if (! is_alive) {
    #line 83 
    if ((common->debug_mask & 1) != 0) 
                                       #line 83 
                                       ath_printk((char *)"\001",common,(char *)"HW hang detected, schedule chip reset\n");
    #line 85 
    type = RESET_TYPE_MAC_HANG;
    #line 86 
    ath9k_queue_reset(sc,type);
  }
  #line 89 
  ath9k_ps_restore(sc);
  #line 91 
  return is_alive;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
static bool ath_hw_pll_rx_hang_check(struct ath_softc *sc, u32 pll_sqsum)
{
  #line 99 
  int count;
  #line 100 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 102 
  if (pll_sqsum > 262143U) {
    #line 103 
    count ++;
    #line 104 
    if (count == 3) {
      #line 105 
      if ((common->debug_mask & 1) != 0) 
                                         #line 105 
                                         ath_printk((char *)"\001",common,(char *)"PLL WAR, resetting the chip\n");
      #line 106 
      ath9k_queue_reset(sc,(enum ath_reset_type)RESET_TYPE_PLL_HANG);
      #line 107 
      count = 0;
      #line 108 
      return (_Bool)1;
    }
  }
  else 
       #line 111 
       count = 0;
  #line 114 
  return (_Bool)0;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_hw_pll_work(struct work_struct *work)
{
  #line 120 
  void *__mptr;
  #line 119 
  u32 pll_sqsum;
  #line 120 
  __mptr = (void *)work;
  #line 120 
  struct ath_softc *sc = ((struct ath_softc *)(__mptr + 18446744073709535760U));
  #line 122 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 129 
  if (! test_bit(1L,& common->op_flags)) 
                                         #line 130 
                                         return;
  #line 132 
  if ((int)sc->tx99_state != 0) 
                                #line 133 
                                return;
  #line 135 
  ath9k_ps_wakeup(sc);
  #line 136 
  pll_sqsum = ar9003_get_pll_sqsum_dvc(sc->sc_ah);
  #line 137 
  ath9k_ps_restore(sc);
  #line 138 
  if ((int)ath_hw_pll_rx_hang_check(sc,pll_sqsum) != 0) 
                                                        #line 139 
                                                        return;
  #line 141 
  ;
  #line 141 
  ;
  #line 141 
  ieee80211_queue_delayed_work(sc->hw,& sc->hw_pll_work,msecs_to_jiffies(100U));
  #line 143 
  return;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
static void ath_paprd_activate(struct ath_softc *sc)
{
  #line 153 
  int chain;
  #line 150 
  struct ath_hw *ah = sc->sc_ah;
  #line 151 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 152 
  struct ath9k_hw_cal_data *caldata = ah->caldata;
  #line 155 
  if (caldata == (struct ath9k_hw_cal_data *)0) 
                                                #line 155 
                                                goto _LOR;
  else {
    #line 155 
    if (! test_bit(2L,& caldata->cal_flags)) {
      #line 155 
      _LOR: {
              #line 156 
              if ((common->debug_mask & 8) != 0) 
                                                 #line 156 
                                                 ath_printk((char *)"\001",common,(char *)"Failed to activate PAPRD\n");
              #line 157 
              return;
            }
    }
  }
  #line 160 
  ar9003_paprd_enable(ah,(_Bool)0);
  #line 161 
  chain = 0;
  #line 161 
  while (chain <= 2) {
    #line 162 
    if ((((unsigned long)ah->txchainmask >> chain) & 1UL) == 0UL) 
                                                                  #line 163 
                                                                  goto __Cont;
    #line 165 
    ar9003_paprd_populate_single_table(ah,caldata,chain);
    #line 161 
    __Cont: 
            #line 161 
    chain ++;
  }
  #line 168 
  if ((common->debug_mask & 8) != 0) 
                                     #line 168 
                                     ath_printk((char *)"\001",common,(char *)"Activating PAPRD\n");
  #line 169 
  ar9003_paprd_enable(ah,(_Bool)1);
  #line 170 
  return;
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
static bool ath_paprd_send_frame(struct ath_softc *sc, struct sk_buff *skb, int chain)
{
  #line 178 
  struct ath_tx_control txctl;
  #line 179 
  unsigned long time_left;
  #line 174 
  struct ieee80211_hw *hw = sc->hw;
  #line 175 
  struct ieee80211_tx_info *tx_info = IEEE80211_SKB_CB(skb);
  #line 176 
  struct ath_hw *ah = sc->sc_ah;
  #line 177 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 181 
  memset((void *)(& txctl),0,32UL);
  #line 182 
  txctl.txq = sc->tx.txq_map[2];
  #line 184 
  memset((void *)tx_info,0,48UL);
  #line 185 
  tx_info->band = (unsigned char)(sc->cur_chandef.chan)->band;
  #line 186 
  tx_info->flags |= 4U;
  #line 187 
  tx_info->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_3075_193.__anonCompField___anonunion_3076_192.rates[0].idx = (signed char)0;
  #line 188 
  tx_info->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_3075_193.__anonCompField___anonunion_3076_192.rates[0].count = (unsigned short)1U;
  #line 189 
  tx_info->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_3075_193.__anonCompField___anonunion_3076_192.rates[0].flags = (unsigned short)8U;
  #line 190 
  tx_info->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_3075_193.__anonCompField___anonunion_3076_192.rates[1].idx = (signed char)(-1);
  #line 192 
  __init_completion(& sc->paprd_complete);
  #line 193 
  txctl.paprd = (unsigned char)(1UL << chain);
  #line 195 
  if (ath_tx_start(hw,skb,& txctl) != 0) {
    #line 196 
    if ((common->debug_mask & 8) != 0) 
                                       #line 196 
                                       ath_printk((char *)"\001",common,(char *)"PAPRD TX failed\n");
    #line 197 
    dev_kfree_skb_any(skb);
    #line 198 
    return (_Bool)0;
  }
  #line 201 
  ;
  #line 201 
  time_left = wait_for_completion_timeout(& sc->paprd_complete,msecs_to_jiffies(100U));
  #line 204 
  if (time_left == 0UL) 
    #line 205 
    if ((common->debug_mask & 8) != 0) 
                                       #line 205 
                                       ath_printk((char *)"\001",common,(char *)"Timeout waiting for paprd training on TX chain %d\n",chain);
  #line 209 
  return (_Bool)(time_left != 0UL);
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_paprd_calibrate(struct work_struct *work)
{
  #line 214 
  void *__mptr;
  #line 217 
  struct ieee80211_hdr *hdr;
  #line 221 
  int ftype;
  #line 223 
  int chain;
  #line 225 
  int ret;
  #line 214 
  __mptr = (void *)work;
  #line 214 
  struct ath_softc *sc = ((struct ath_softc *)(__mptr + 18446744073709548304U));
  #line 215 
  struct ieee80211_hw *hw = sc->hw;
  #line 216 
  struct ath_hw *ah = sc->sc_ah;
  #line 218 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 219 
  struct ath9k_hw_cal_data *caldata = ah->caldata;
  #line 220 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 222 
  int chain_ok = 0;
  #line 224 
  int len = 1800;
  #line 227 
  if (caldata == (struct ath9k_hw_cal_data *)0) 
                                                #line 227 
                                                goto _LOR;
  else {
    #line 228 
    if (test_bit(1L,& caldata->cal_flags)) {
      #line 228 
      if ((int)test_bit(2L,& caldata->cal_flags) != 0) {
        #line 227 
        _LOR: {
                #line 230 
                if ((common->debug_mask & 8) != 0) 
                                                   #line 230 
                                                   ath_printk((char *)"\001",common,(char *)"Skipping PAPRD calibration\n");
                #line 231 
                return;
              }
      }
    }
    else 
         #line 227 
         goto _LOR;
  }
  #line 234 
  ath9k_ps_wakeup(sc);
  #line 236 
  if (ar9003_paprd_init_table(ah) < 0) 
                                       #line 237 
                                       goto fail_paprd;
  #line 239 
  skb = alloc_skb((unsigned int)len,3264U);
  #line 240 
  if (skb == (struct sk_buff *)0) 
                                  #line 241 
                                  goto fail_paprd;
  #line 243 
  skb_put(skb,(unsigned int)len);
  #line 244 
  memset((void *)skb->data,0,(unsigned long)len);
  #line 245 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 246 
  ftype = 72;
  #line 247 
  hdr->frame_control = (unsigned short)ftype;
  #line 248 
  hdr->duration_id = (unsigned short)10U;
  #line 249 
  memcpy((void *)(& hdr->addr1),(void *)(& (hw->wiphy)->perm_addr),6UL);
  #line 250 
  memcpy((void *)(& hdr->addr2),(void *)(& (hw->wiphy)->perm_addr),6UL);
  #line 251 
  memcpy((void *)(& hdr->addr3),(void *)(& (hw->wiphy)->perm_addr),6UL);
  #line 253 
  chain = 0;
  #line 253 
  while (chain <= 2) {
    {
      #line 254 
      if ((((unsigned long)ah->txchainmask >> chain) & 1UL) == 0UL) 
                                                                    #line 255 
                                                                    goto __Cont;
      #line 257 
      chain_ok = 0;
      #line 258 
      ar9003_paprd_setup_gain_table(ah,chain);
      #line 260 
      if ((common->debug_mask & 8) != 0) 
                                         #line 260 
                                         ath_printk((char *)"\001",common,(char *)"Sending PAPRD training frame on chain %d\n",chain);
      #line 262 
      if (! ath_paprd_send_frame(sc,skb,chain)) 
                                                #line 263 
                                                goto fail_paprd;
      #line 265 
      if (! ar9003_paprd_is_done(ah)) {
        #line 266 
        if ((common->debug_mask & 8) != 0) 
                                           #line 266 
                                           ath_printk((char *)"\001",common,(char *)"PAPRD not yet done on chain %d\n",chain);
        #line 268 
        break;
      }
      #line 271 
      ret = ar9003_paprd_create_curve(ah,caldata,chain);
      #line 272 
      if (ret == -115) {
        #line 273 
        if ((common->debug_mask & 8) != 0) 
                                           #line 273 
                                           ath_printk((char *)"\001",common,(char *)"PAPRD curve on chain %d needs to be re-trained\n",chain);
        #line 276 
        break;
      }
      else 
        #line 277 
        if (ret != 0) {
          #line 278 
          if ((common->debug_mask & 8) != 0) 
                                             #line 278 
                                             ath_printk((char *)"\001",common,(char *)"PAPRD create curve failed on chain %d\n",chain);
          #line 281 
          break;
        }
      #line 284 
      chain_ok = 1;
    }
    #line 253 
    __Cont: 
            #line 253 
    chain ++;
  }
  #line 286 
  kfree_skb(skb);
  #line 288 
  if (chain_ok != 0) {
    #line 289 
    cif_set_bit(2L,& caldata->cal_flags);
    #line 290 
    ath_paprd_activate(sc);
  }
  #line 293 
  fail_paprd: 
              #line 293 
  ;
  #line 294 
  ath9k_ps_restore(sc);
  #line 295 
  return;
}

#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_ani_calibrate(struct timer_list *t)
{
  #line 404 
  u32 __UNIQUE_ID___x555;
  #line 404 
  u32 tmp_7;
  #line 306 
  void *__mptr;
  #line 313 
  u32 cal_interval;
  #line 313 
  u32 short_cal_interval;
  #line 313 
  u32 long_cal_interval;
  #line 314 
  unsigned long flags;
  #line 306 
  __mptr = (void *)t;
  #line 306 
  struct ath_common *common = ((struct ath_common *)(__mptr + 18446744073709551552U));
  #line 307 
  struct ath_softc *sc = (struct ath_softc *)common->priv;
  #line 308 
  struct ath_hw *ah = sc->sc_ah;
  #line 309 
  bool longcal = (_Bool)0;
  #line 310 
  bool shortcal = (_Bool)0;
  #line 311 
  bool aniflag = (_Bool)0;
  #line 312 
  unsigned int timestamp = jiffies_to_msecs(jiffies);
  #line 316 
  if (ah->caldata != (struct ath9k_hw_cal_data *)0) {
    #line 316 
    if ((int)test_bit(4L,& (ah->caldata)->cal_flags) != 0) 
                                                           #line 317 
                                                           long_cal_interval = 1000U; else 
                                                                    #line 319 
                                                                    long_cal_interval = 30000U;
  }
  else 
       #line 319 
       long_cal_interval = 30000U;
  #line 321 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_AP) 
                                                     #line 321 
                                                     short_cal_interval = 100U; else 
                                                                    #line 321 
                                                                    short_cal_interval = 1000U;
  #line 325 
  if ((sc->sc_ah)->power_mode != (unsigned int)ATH9K_PM_AWAKE) {
    #line 326 
    (ah->ani_skip_count) ++;
    #line 326 
    if (ah->ani_skip_count > 9U) {
      #line 327 
      cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_0(& sc->sc_pm_lock);
      #line 328 
      sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags | 32U);
      #line 329 
      cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_0(& sc->sc_pm_lock,flags);
    }
    #line 331 
    goto set_timer;
  }
  #line 333 
  ah->ani_skip_count = 0U;
  #line 334 
  cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_0(& sc->sc_pm_lock);
  #line 335 
  sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags & 65503U);
  #line 336 
  cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_0(& sc->sc_pm_lock,flags);
  #line 338 
  ath9k_ps_wakeup(sc);
  #line 341 
  if (timestamp - common->ani.longcal_timer >= long_cal_interval) {
    #line 342 
    longcal = (_Bool)1;
    #line 343 
    common->ani.longcal_timer = timestamp;
  }
  #line 347 
  if (! common->ani.caldone) {
    #line 348 
    if (timestamp - common->ani.shortcal_timer >= short_cal_interval) {
      #line 349 
      shortcal = (_Bool)1;
      #line 350 
      common->ani.shortcal_timer = timestamp;
      #line 351 
      common->ani.resetcal_timer = timestamp;
    }
  }
  else 
    #line 354 
    if (timestamp - common->ani.resetcal_timer > 1199999U) {
      #line 356 
      common->ani.caldone = ath9k_hw_reset_calvalid(ah);
      #line 357 
      if ((int)common->ani.caldone != 0) 
                                         #line 358 
                                         common->ani.resetcal_timer = timestamp;
    }
  #line 363 
  if (timestamp - common->ani.checkani_timer >= (unsigned int)ah->config.ani_poll_interval) {
    #line 364 
    aniflag = (_Bool)1;
    #line 365 
    common->ani.checkani_timer = timestamp;
  }
  #line 369 
  if ((int)aniflag != 0) {
    #line 370 
    cif___ldv_spin_lock_cc_lock_of_ath_common(& common->cc_lock);
    #line 371 
    ath9k_hw_ani_monitor(ah,ah->curchan);
    #line 372 
    ath_update_survey_stats(sc);
    #line 373 
    cif_spin_unlock_irqrestore_cc_lock_of_ath_common(& common->cc_lock,flags);
  }
  #line 377 
  if ((int)longcal != 0 || (int)shortcal != 0) {
    #line 378 
    int ret = ath9k_hw_calibrate(ah,ah->curchan,(unsigned char)((int)ah->rxchainmask),(_Bool)((bool)((int)longcal) != 0));
    #line 380 
    if (ret < 0) {
      #line 381 
      common->ani.caldone = (_Bool)0;
      #line 382 
      ath9k_queue_reset(sc,(enum ath_reset_type)RESET_TYPE_CALIBRATION);
      #line 383 
      return;
    }
    #line 386 
    common->ani.caldone = (_Bool)(ret != 0);
  }
  #line 389 
  if ((common->debug_mask & 64) != 0) {
    #line 389 
    char *tmp_3;
    #line 389 
    char *tmp_4;
    #line 389 
    char *tmp_5;
    #line 389 
    char *tmp_6;
    #line 389 
    if ((int)common->ani.caldone != 0) 
                                       #line 389 
                                       tmp_3 = (char *)"true"; else 
                                                                    #line 389 
                                                                    tmp_3 = (char *)"false";
    #line 389 
    if ((int)aniflag != 0) 
                           #line 389 
                           tmp_4 = (char *)"ani"; else 
                                                       #line 389 
                                                       tmp_4 = (char *)"";
    #line 389 
    if ((int)shortcal != 0) 
                            #line 389 
                            tmp_5 = (char *)"short"; else 
                                                          #line 389 
                                                          tmp_5 = (char *)"";
    #line 389 
    if ((int)longcal != 0) 
                           #line 389 
                           tmp_6 = (char *)"long"; else 
                                                        #line 389 
                                                        tmp_6 = (char *)"";
    #line 389 
    ;
    #line 389 
    ;
    #line 389 
    ath_printk((char *)"\001",common,(char *)"Calibration @%lu finished: %s %s %s, caldone: %s\n",jiffies,tmp_6,tmp_5,tmp_4,tmp_3);
  }
  #line 395 
  ath9k_ps_restore(sc);
  #line 397 
  set_timer: 
             #line 397 
  ;
  #line 403 
  cal_interval = 30000U;
  {
    #line 404 
    __UNIQUE_ID___x555 = cal_interval;
    #line 404 
    unsigned int __UNIQUE_ID___y556 = (unsigned int)ah->config.ani_poll_interval;
    #line 404 
    if (__UNIQUE_ID___x555 < __UNIQUE_ID___y556) 
                                                 #line 404 
                                                 tmp_7 = __UNIQUE_ID___x555; else 
                                                                    #line 404 
                                                                    tmp_7 = __UNIQUE_ID___y556;
    }
  #line 404 
  cal_interval = tmp_7;
  #line 405 
  if (! common->ani.caldone) {
    #line 406 
    u32 __UNIQUE_ID___x557;
    #line 406 
    u32 tmp_9;
    {
      #line 406 
      __UNIQUE_ID___x557 = cal_interval;
      #line 406 
      unsigned int __UNIQUE_ID___y558 = short_cal_interval;
      #line 406 
      if (__UNIQUE_ID___x557 < __UNIQUE_ID___y558) 
                                                   #line 406 
                                                   tmp_9 = __UNIQUE_ID___x557; else 
                                                                    #line 406 
                                                                    tmp_9 = __UNIQUE_ID___y558;
      }
    #line 406 
    cal_interval = tmp_9;
  }
  #line 408 
  ;
  #line 408 
  ;
  #line 408 
  cif_mod_timer(& common->ani.timer,msecs_to_jiffies(cal_interval) + jiffies);
  #line 410 
  if ((int)ar9003_is_paprd_enabled(ah) != 0) 
    #line 410 
    if (ah->caldata != (struct ath9k_hw_cal_data *)0) {
      #line 411 
      if (test_bit(2L,& (ah->caldata)->cal_flags)) {
        #line 413 
        if (! ah->paprd_table_write_done) {
          #line 414 
          ath9k_ps_wakeup(sc);
          #line 415 
          ath_paprd_activate(sc);
          #line 416 
          ath9k_ps_restore(sc);
        }
      }
      else 
           #line 412 
           ieee80211_queue_work(sc->hw,& sc->paprd_work);
    }
  #line 418 
  return;
}

#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_start_ani(struct ath_softc *sc)
{
  #line 423 
  struct ath_hw *ah = sc->sc_ah;
  #line 424 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 425 
  unsigned long timestamp = (unsigned long)jiffies_to_msecs(jiffies);
  #line 427 
  if ((int)common->disable_ani != 0) 
                                     #line 430 
                                     return;
  else {
    #line 428 
    if (test_bit(2L,& common->op_flags)) {
      #line 428 
      if ((int)(sc->cur_chan)->offchannel != 0) 
                                                #line 430 
                                                return;
    }
    else 
         #line 430 
         return;
  }
  #line 432 
  common->ani.longcal_timer = (unsigned int)timestamp;
  #line 433 
  common->ani.shortcal_timer = (unsigned int)timestamp;
  #line 434 
  common->ani.checkani_timer = (unsigned int)timestamp;
  #line 436 
  if ((common->debug_mask & 64) != 0) 
                                      #line 436 
                                      ath_printk((char *)"\001",common,(char *)"Starting ANI\n");
  #line 437 
  ;
  #line 437 
  ;
  #line 437 
  cif_mod_timer(& common->ani.timer,msecs_to_jiffies((unsigned int)ah->config.ani_poll_interval) + jiffies);
  #line 439 
  return;
}

#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_stop_ani(struct ath_softc *sc)
{
  #line 443 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 445 
  if ((common->debug_mask & 64) != 0) 
                                      #line 445 
                                      ath_printk((char *)"\001",common,(char *)"Stopping ANI\n");
  #line 446 
  cif_del_timer_sync(& common->ani.timer);
  #line 447 
  return;
}

#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_check_ani(struct ath_softc *sc)
{
  #line 451 
  struct ath_hw *ah = sc->sc_ah;
  #line 452 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 453 
  struct ath_beacon_config *cur_conf = & (sc->cur_chan)->beacon;
  #line 459 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_ADHOC) {
    #line 460 
    if ((unsigned int)cur_conf->enable_beacon == 0U) 
                                                     #line 461 
                                                     goto stop_ani;
  }
  else 
    #line 462 
    if (ah->opmode == (unsigned int)NL80211_IFTYPE_AP) {
      #line 463 
      if ((unsigned int)cur_conf->enable_beacon == 0U) {
        #line 468 
        if (! test_bit(3L,& common->op_flags)) 
                                               #line 469 
                                               goto stop_ani;
      }
    }
    else 
      #line 471 
      if (ah->opmode == (unsigned int)NL80211_IFTYPE_STATION) {
        #line 472 
        if (! test_bit(3L,& common->op_flags)) 
                                               #line 473 
                                               goto stop_ani;
      }
  #line 476 
  if (! test_bit(2L,& common->op_flags)) {
    #line 477 
    cif_set_bit(2L,& common->op_flags);
    #line 478 
    ath_start_ani(sc);
  }
  #line 481 
  return;
  #line 483 
  stop_ani: 
            #line 483 
  ;
  #line 484 
  cif_clear_bit(2L,& common->op_flags);
  #line 485 
  ath_stop_ani(sc);
  #line 486 
  return;
}

#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
void ath_update_survey_nf(struct ath_softc *sc, int channel)
{
  #line 490 
  struct ath_hw *ah = sc->sc_ah;
  #line 491 
  struct ath9k_channel *chan = & ah->channels[channel];
  #line 492 
  struct survey_info *survey = & sc->survey[channel];
  #line 494 
  if ((int)chan->noisefloor != 0) {
    #line 495 
    survey->filled |= 1U;
    #line 496 
    survey->noise = (signed char)ath9k_hw_getchan_noise(ah,chan,(short)((int)chan->noisefloor));
  }
  #line 499 
  return;
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/link.c"
int ath_update_survey_stats(struct ath_softc *sc)
{
  #line 508 
  struct ath_hw *ah = sc->sc_ah;
  #line 509 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 510 
  int pos = (int)((ah->curchan - & ah->channels[0]) / 16L);
  #line 511 
  struct survey_info *survey = & sc->survey[pos];
  #line 512 
  struct ath_cycle_counters *cc = & common->cc_survey;
  #line 513 
  unsigned int div = common->clockrate * 1000U;
  #line 514 
  int ret = 0;
  #line 516 
  if (ah->curchan == (struct ath9k_channel *)0) 
                                                #line 517 
                                                return -1;
  #line 519 
  if (ah->power_mode == (unsigned int)ATH9K_PM_AWAKE) 
                                                      #line 520 
                                                      ath_hw_cycle_counters_update(common);
  #line 522 
  if (cc->cycles != 0U) {
    #line 523 
    survey->filled |= 108U;
    #line 527 
    survey->time += (unsigned long long)(cc->cycles / div);
    #line 528 
    survey->time_busy += (unsigned long long)(cc->rx_busy / div);
    #line 529 
    survey->time_rx += (unsigned long long)(cc->rx_frame / div);
    #line 530 
    survey->time_tx += (unsigned long long)(cc->tx_frame / div);
  }
  #line 533 
  if (cc->cycles < div) 
                        #line 534 
                        return -1;
  #line 536 
  if (cc->cycles != 0U) 
                        #line 537 
                        ret = (int)((cc->rx_busy * 100U) / cc->cycles);
  #line 539 
  memset((void *)cc,0,16UL);
  #line 541 
  ath_update_survey_nf(sc,pos);
  #line 543 
  return ret;
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
#line 95 
int emg_del_timer_sync(struct timer_list *arg0);
#line 100 
#line 100 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 123 
  ldv_set_bit(nr,addr);
  #line 124 
  return;
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 130 
  ldv_clear_bit(nr,addr);
  #line 131 
  return;
}

#line 791  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static void cif_spin_lock_bh_axq_lock_of_ath_txq(spinlock_t *lock)
{
  #line 794 
  ldv_spin_model_lock((char *)"axq_lock_of_ath_txq");
  #line 796 
  spin_lock_bh_0(lock);
  #line 797 
  return;
}

#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static void cif_spin_unlock_bh_axq_lock_of_ath_txq(spinlock_t *lock)
{
  #line 803 
  ldv_spin_model_unlock((char *)"axq_lock_of_ath_txq");
  #line 805 
  spin_unlock_bh_0(lock);
  #line 806 
  return;
}

#line 809  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static void cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_0(spinlock_t *lock)
{
  #line 812 
  ldv_spin_model_lock((char *)"sc_pm_lock_of_ath_softc");
  #line 814 
  __ldv_spin_lock(lock);
  #line 815 
  return;
}

#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static void cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_0(spinlock_t *lock, unsigned long flags)
{
  #line 821 
  ldv_spin_model_unlock((char *)"sc_pm_lock_of_ath_softc");
  #line 823 
  spin_unlock_irqrestore_0(lock,flags);
  #line 824 
  return;
}

#line 827  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static void cif___ldv_spin_lock_cc_lock_of_ath_common(spinlock_t *lock)
{
  #line 830 
  ldv_spin_model_lock((char *)"cc_lock_of_ath_common");
  #line 832 
  __ldv_spin_lock(lock);
  #line 833 
  return;
}

#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static void cif_spin_unlock_irqrestore_cc_lock_of_ath_common(spinlock_t *lock, unsigned long flags)
{
  #line 839 
  ldv_spin_model_unlock((char *)"cc_lock_of_ath_common");
  #line 841 
  spin_unlock_irqrestore_0(lock,flags);
  #line 842 
  return;
}

#line 845  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 849 
  return emg_mod_timer(timer,expires);
}

#line 853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/link.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 857 
  return emg_del_timer_sync(timer);
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
__inline static resource_size_t resource_size(struct resource *res)
{
  #line 208 
  return (res->end - res->start) + 1ULL;
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_platdata(struct device *dev)
{
  #line 1583 
  return dev->platform_data;
}

#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 52 
struct resource *platform_get_resource(struct platform_device *, unsigned int, unsigned int);
#line 217 
#line 858  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/ahb.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2);
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 866  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/ahb.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1);
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static void *platform_get_drvdata(struct platform_device *pdev)
{
  #line 228 
  return dev_get_drvdata(& pdev->dev);
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static void platform_set_drvdata(struct platform_device *pdev, void *data)
{
  #line 234 
  dev_set_drvdata(& pdev->dev,data);
  #line 235 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 834  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/ahb.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 842  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/ahb.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 4738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static void set_wiphy_dev(struct wiphy *wiphy, struct device *dev)
{
  #line 4740 
  wiphy->dev.parent = dev;
  #line 4741 
  return;
}

#line 2599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void SET_IEEE80211_DEV(struct ieee80211_hw *hw, struct device *dev)
{
  #line 2601 
  set_wiphy_dev(hw->wiphy,dev);
  #line 2602 
  return;
}

#line 4123 
#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/ahb.i.aux"
static struct ieee80211_hw *cif_ieee80211_alloc_hw(size_t priv_data_len, struct ieee80211_ops *ops);
#line 4301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 850  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/ahb.i.aux"
static void cif_ieee80211_free_hw(struct ieee80211_hw *hw);
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
#line 69 
void *devm_ioremap_nocache(struct device *, resource_size_t, resource_size_t);
#line 1093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
#line 1093 
void ath9k_hw_name(struct ath_hw *, char *, size_t);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 2660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
struct ieee80211_ops ath9k_ops;
#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 463 
void ath9k_fill_chanctx_ops(void);
#line 1123 
#line 1123 
irqreturn_t ath_isr(int irq, void *dev);
#line 1127 
#line 1127 
int ath9k_init_device(u16 devid, struct ath_softc *sc, struct ath_bus_ops *bus_ops);
#line 1129 
#line 1129 
void ath9k_deinit_device(struct ath_softc *sc);
#line 1146 
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ahb.c"
int ath_ahb_init(void);
#line 1147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ahb.c"
void ath_ahb_exit(void);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ahb.c"
static struct platform_device_id ath9k_platform_id_table[7U] = {{.name = {(char)'a', (char)'t', (char)'h', (char)'9', (char)'k'}, .driver_data = 11UL}, {.name = {(char)'a', (char)'r', (char)'9', (char)'3', (char)'3', (char)'x', (char)'_', (char)'w', (char)'m', (char)'a', (char)'c'}, .driver_data = 53UL}, {.name = {(char)'a', (char)'r', (char)'9', (char)'3', (char)'4', (char)'x', (char)'_', (char)'w', (char)'m', (char)'a', (char)'c'}, .driver_data = 49UL}, {.name = {(char)'q', (char)'c', (char)'a', (char)'9', (char)'5', (char)'5', (char)'x', (char)'_', (char)'w', (char)'m', (char)'a', (char)'c'}, .driver_data = 56UL}, {.name = {(char)'q', (char)'c', (char)'a', (char)'9', (char)'5', (char)'3', (char)'x', (char)'_', (char)'w', (char)'m', (char)'a', (char)'c'}, .driver_data = 61UL}, {.name = {(char)'q', (char)'c', (char)'a', (char)'9', (char)'5', (char)'6', (char)'x', (char)'_', (char)'w', (char)'m', (char)'a', (char)'c'}, .driver_data = 63UL}};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ahb.c"
static void ath_ahb_read_cachesize(struct ath_common *common, int *csz)
{
  #line 56 
  *csz = 16;
  #line 57 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ahb.c"
static bool ath_ahb_eeprom_read(struct ath_common *common, u32 off, u16 *data)
{
  #line 61 
  ath_printk((char *)"\001",common,(char *)"%s: eeprom data has to be provided externally\n",(char *)"ath_ahb_eeprom_read");
  #line 63 
  return (_Bool)0;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ahb.c"
static struct ath_bus_ops ath_ahb_bus_ops = {.ath_bus_type = ATH_AHB, .read_cachesize = & ath_ahb_read_cachesize, .eeprom_read = & ath_ahb_eeprom_read};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ahb.c"
static int ath_ahb_probe(struct platform_device *pdev)
{
  #line 74 
  void *mem;
  #line 75 
  struct ath_softc *sc;
  #line 76 
  struct ieee80211_hw *hw;
  #line 77 
  struct resource *res;
  #line 79 
  int irq;
  #line 81 
  struct ath_hw *ah;
  #line 82 
  char hw_name[64U];
  #line 78 
  struct platform_device_id *id = pdev->id_entry;
  #line 80 
  int ret = 0;
  #line 84 
  if (dev_get_platdata(& pdev->dev) == (void *)0) {
    #line 85 
    _dev_err(& pdev->dev,(char *)"no platform data specified\n");
    #line 86 
    return -22;
  }
  #line 89 
  res = platform_get_resource(pdev,512U,0U);
  #line 90 
  if (res == (struct resource *)0) {
    #line 91 
    _dev_err(& pdev->dev,(char *)"no memory resource found\n");
    #line 92 
    return -6;
  }
  #line 95 
  ;
  #line 95 
  ;
  #line 95 
  mem = devm_ioremap_nocache(& pdev->dev,res->start,resource_size(res));
  #line 96 
  if (mem == (void *)0) {
    #line 97 
    _dev_err(& pdev->dev,(char *)"ioremap failed\n");
    #line 98 
    return -12;
  }
  #line 101 
  res = platform_get_resource(pdev,1024U,0U);
  #line 102 
  if (res == (struct resource *)0) {
    #line 103 
    _dev_err(& pdev->dev,(char *)"no IRQ resource found\n");
    #line 104 
    return -6;
  }
  #line 107 
  irq = (int)res->start;
  #line 109 
  ath9k_fill_chanctx_ops();
  #line 110 
  hw = cif_ieee80211_alloc_hw(16840UL,& ath9k_ops);
  #line 111 
  if (hw == (struct ieee80211_hw *)0) {
    #line 112 
    _dev_err(& pdev->dev,(char *)"no memory for ieee80211_hw\n");
    #line 113 
    return -12;
  }
  #line 116 
  SET_IEEE80211_DEV(hw,& pdev->dev);
  #line 117 
  platform_set_drvdata(pdev,(void *)hw);
  #line 119 
  sc = (struct ath_softc *)hw->priv;
  #line 120 
  sc->hw = hw;
  #line 121 
  sc->dev = & pdev->dev;
  #line 122 
  sc->mem = mem;
  #line 123 
  sc->irq = irq;
  #line 125 
  ret = cif_request_irq((unsigned int)irq,& ath_isr,128UL,(char *)"ath9k",(void *)sc);
  #line 126 
  if (ret != 0) {
    #line 127 
    _dev_err(& pdev->dev,(char *)"request_irq failed\n");
    #line 128 
    goto err_free_hw;
  }
  #line 131 
  ret = ath9k_init_device((unsigned short)((int)((unsigned short)id->driver_data)),sc,& ath_ahb_bus_ops);
  #line 132 
  if (ret != 0) {
    #line 133 
    _dev_err(& pdev->dev,(char *)"failed to initialize device\n");
    #line 134 
    goto err_irq;
  }
  #line 137 
  ah = sc->sc_ah;
  #line 138 
  ath9k_hw_name(ah,(char *)(& hw_name),64UL);
  #line 139 
  _dev_info(& (hw->wiphy)->dev,(char *)"%s mem=0x%lx, irq=%d\n",(char *)(& hw_name),(unsigned long)mem,irq);
  #line 142 
  return 0;
  #line 144 
  err_irq: 
           #line 144 
  ;
  #line 145 
  cif_free_irq((unsigned int)irq,(void *)sc);
  #line 146 
  err_free_hw: 
               #line 146 
  ;
  #line 147 
  cif_ieee80211_free_hw(hw);
  #line 148 
  return ret;
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ahb.c"
static int ath_ahb_remove(struct platform_device *pdev)
{
  #line 153 
  struct ieee80211_hw *hw = platform_get_drvdata(pdev);
  #line 155 
  if (hw != (struct ieee80211_hw *)0) {
    #line 156 
    struct ath_softc *sc = (struct ath_softc *)hw->priv;
    #line 158 
    ath9k_deinit_device(sc);
    #line 159 
    cif_free_irq((unsigned int)sc->irq,(void *)sc);
    #line 160 
    cif_ieee80211_free_hw(sc->hw);
  }
  #line 163 
  return 0;
}

#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ahb.c"
static struct platform_driver ath_ahb_driver = {.probe = & ath_ahb_probe, .remove = & ath_ahb_remove, .driver = {.name = (char *)"ath9k"}, .id_table = (struct platform_device_id *)(& ath9k_platform_id_table)};
#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ahb.c"
struct platform_device_id __mod_platform__ath9k_platform_id_table_device_table[7U];
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ahb.c"
int ath_ahb_init(void)
{
  #line 179 
  return cif___platform_driver_register(& ath_ahb_driver,& __this_module);
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ahb.c"
void ath_ahb_exit(void)
{
  #line 184 
  cif_platform_driver_unregister(& ath_ahb_driver);
  #line 185 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/ahb.i.aux"
struct platform_driver *emg_alias_ath_ahb_driver = & ath_ahb_driver;
#line 96 
#line 96 
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1);
#line 100 
#line 100 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 101 
#line 101 
struct ieee80211_hw *emg_ieee80211_alloc_hw(unsigned long arg0, struct ieee80211_ops *arg1);
#line 102 
#line 102 
void emg_ieee80211_free_hw(struct ieee80211_hw *arg0);
#line 105 
#line 105 
void emg_platform_driver_unregister(struct platform_driver *arg0);
#line 106 
#line 106 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/ahb.i.aux"
int emg_wrapper_ath_ahb_probe(struct platform_device *arg0)
{
  #line 113 
  return ath_ahb_probe(arg0);
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/ahb.i.aux"
int emg_wrapper_ath_ahb_remove(struct platform_device *arg0)
{
  #line 118 
  return ath_ahb_remove(arg0);
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/ahb.i.aux"
static struct ieee80211_hw *cif_ieee80211_alloc_hw(size_t priv_data_len, struct ieee80211_ops *ops)
{
  #line 830 
  return emg_ieee80211_alloc_hw(priv_data_len,ops);
}

#line 834  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/ahb.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 838 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 842  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/ahb.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 846 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 850  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/ahb.i.aux"
static void cif_ieee80211_free_hw(struct ieee80211_hw *hw)
{
  #line 854 
  emg_ieee80211_free_hw(hw);
  #line 855 
  return;
}

#line 858  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/ahb.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2)
{
  #line 862 
  return emg___platform_driver_register(ldv_func_arg1,ldv_func_arg2);
}

#line 866  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/ahb.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1)
{
  #line 870 
  emg_platform_driver_unregister(ldv_func_arg1);
  #line 871 
  return;
}

#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 8 
#line 8 
void ldv_atomic_dec(atomic_t *v);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 262  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 269  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_4150 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_0(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_0(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_4152 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_0(struct list_head *head)
{
  #line 269 
  union __anonunion___u_4154 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_4206 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set(v,i);
  #line 46 
  return;
}

#line 237 
#line 325  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void atomic_inc(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 332  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void atomic_dec(atomic_t *v);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 995  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_cc_lock_of_ath_common(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1075  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_sc_pcu_lock_of_ath_softc(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1093  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_intr_lock_of_ath_softc(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_sc_pm_lock_of_ath_softc(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_1(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 933  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_bh_axq_lock_of_ath_txq_0(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1021  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_bh_sc_pcu_lock_of_ath_softc(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1030  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_bh_chan_lock_of_ath_softc_0(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 1004  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_cc_lock_of_ath_common(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1084  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_sc_pcu_lock_of_ath_softc(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_intr_lock_of_ath_softc(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_sc_pm_lock_of_ath_softc(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_1(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 942  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_bh_axq_lock_of_ath_txq_0(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1039  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_bh_chan_lock_of_ath_softc_0(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1048  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_bh_sc_pcu_lock_of_ath_softc(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_1(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 960  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_1(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 978  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_irqrestore_cc_lock_of_ath_common_0(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1066  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_irqrestore_intr_lock_of_ath_softc(spinlock_t *lock, unsigned long flags);
#line 26 
#line 1137 
static void cif_mutex_lock_mutex_of_ath_softc(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 35 
#line 951 
static void cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_1(spinlock_t *lock);
#line 35 
#line 969 
static void cif___ldv_spin_lock_cc_lock_of_ath_common_0(spinlock_t *lock);
#line 35 
#line 1057 
static void cif___ldv_spin_lock_intr_lock_of_ath_softc(spinlock_t *lock);
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 200 
void __wake_up(struct wait_queue_head *, unsigned int, int, void *);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 1144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_mutex_unlock_mutex_of_ath_softc(struct mutex *lock);
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 292 
unsigned int jiffies_to_usecs(unsigned long);
#line 375 
#line 375 
unsigned long __usecs_to_jiffies(unsigned int);
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _usecs_to_jiffies(unsigned int u)
{
  #line 379 
  return (unsigned long)(((long)u + 3999L) / 4000L);
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long usecs_to_jiffies(unsigned int u)
{
  #line 413 
  if (0 != 0) {
    #line 414 
    ;
    #line 414 
    if (jiffies_to_usecs(4611686018427387902UL) < u) 
                                                     #line 415 
                                                     return 4611686018427387902UL;
    #line 416 
    return _usecs_to_jiffies(u);
  }
  else {
    #line 418 
    return __usecs_to_jiffies(u);
  }
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 41 
void ktime_get_raw_ts64(struct timespec64 *);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 1013  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_mod_timer_0(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 987  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_del_timer_sync_0(struct timer_list *timer);
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 237 
void disable_irq(unsigned int);
#line 239 
#line 239 
void enable_irq(unsigned int);
#line 638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static void tasklet_unlock_wait(struct tasklet_struct *t)
{
  #line 640 
  while (1) {
    #line 640 
    if (! ((int)test_bit(1L,& t->state) != 0)) 
                                               #line 640 
                                               break;
    #line 641 
    ldv_inline_asm();
  }
  #line 642 
  return;
}

#line 655 
#line 1111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t);
#line 664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static void tasklet_disable_nosync(struct tasklet_struct *t)
{
  #line 666 
  atomic_inc(& t->count);
  #line 670 
  return;
}

#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static void tasklet_disable(struct tasklet_struct *t)
{
  #line 672 
  tasklet_disable_nosync(t);
  #line 673 
  tasklet_unlock_wait(t);
  #line 674 
  ldv_inline_asm();
  #line 675 
  return;
}

#line 677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static void tasklet_enable(struct tasklet_struct *t)
{
  #line 680 
  atomic_dec(& t->count);
  #line 681 
  return;
}

#line 683 
#line 683 
void tasklet_kill(struct tasklet_struct *);
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_broadcast_addr(u8 *addr)
{
  #line 240 
  memset((void *)addr,255,6UL);
  #line 241 
  return;
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  #line 251 
  memset((void *)addr,0,6UL);
  #line 252 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_has_pm(__le16 fc)
{
  #line 314 
  return (_Bool)(((int)fc & 4096) != 0);
}

#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_pspoll(__le16 fc)
{
  #line 548 
  return (_Bool)(((int)fc & 252) == 164);
}

#line 606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_nullfunc(__le16 fc)
{
  #line 608 
  return (_Bool)(((int)fc & 252) == 72);
}

#line 2650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 2650 
void ieee80211_free_txskb(struct ieee80211_hw *, struct sk_buff *);
#line 5199 
#line 5199 
void ieee80211_stop_queues(struct ieee80211_hw *);
#line 5207 
#line 5207 
void ieee80211_wake_queues(struct ieee80211_hw *);
#line 5320 
#line 5320 
void ieee80211_iterate_active_interfaces_atomic(struct ieee80211_hw *, u32, void (*)(void *, u8 *, struct ieee80211_vif *), void *);
#line 5438 
#line 5438 
void ieee80211_stop_tx_ba_cb_irqsafe(struct ieee80211_vif *, u8 *, u16);
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
#line 200 
void ath_key_delete(struct ath_common *, struct ieee80211_key_conf *);
#line 201 
#line 201 
int ath_key_config(struct ath_common *, struct ieee80211_vif *, struct ieee80211_sta *, struct ieee80211_key_conf *);
#line 720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
#line 720 
bool ath9k_hw_updatetxtriglevel(struct ath_hw *, bool);
#line 735 
#line 735 
bool ath9k_hw_setrxabort(struct ath_hw *, bool);
#line 741 
#line 741 
void ath9k_hw_set_tx_filter(struct ath_hw *, u8, bool);
#line 744 
#line 744 
bool ath9k_hw_intrpend(struct ath_hw *);
#line 746 
#line 746 
void ath9k_hw_enable_interrupts(struct ath_hw *);
#line 747 
#line 747 
void ath9k_hw_disable_interrupts(struct ath_hw *);
#line 748 
#line 748 
void ath9k_hw_kill_interrupts(struct ath_hw *);
#line 749 
#line 749 
void ath9k_hw_resume_interrupts(struct ath_hw *);
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dynack.h"
#line 83 
void ath_dynack_reset(struct ath_hw *);
#line 84 
#line 84 
void ath_dynack_node_init(struct ath_hw *, struct ath_node *);
#line 85 
#line 85 
void ath_dynack_node_deinit(struct ath_hw *, struct ath_node *);
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
__inline static struct ath_regulatory *ath9k_hw_regulatory(struct ath_hw *ah)
{
  #line 1003 
  return & ath9k_hw_common(ah)->regulatory;
}

#line 1024 
#line 1024 
int ath9k_hw_reset(struct ath_hw *, struct ath9k_channel *, struct ath9k_hw_cal_data *, bool);
#line 1030 
#line 1030 
void ath9k_hw_gpio_request_in(struct ath_hw *, u32, char *);
#line 1031 
#line 1031 
void ath9k_hw_gpio_request_out(struct ath_hw *, u32, char *, u32);
#line 1035 
#line 1035 
void ath9k_hw_set_gpio(struct ath_hw *, u32, u32);
#line 1054 
#line 1054 
bool ath9k_hw_phy_disable(struct ath_hw *);
#line 1056 
#line 1056 
void ath9k_hw_set_txpowerlimit(struct ath_hw *, u32, bool);
#line 1059 
#line 1059 
void ath9k_hw_write_associd(struct ath_hw *);
#line 1062 
#line 1062 
void ath9k_hw_settsf64(struct ath_hw *, u64);
#line 1063 
#line 1063 
void ath9k_hw_reset_tsf(struct ath_hw *);
#line 1064 
#line 1064 
u32 ath9k_hw_get_tsf_offset(struct timespec64 *, struct timespec64 *);
#line 1065 
#line 1065 
void ath9k_hw_set_tsfadjust(struct ath_hw *, bool);
#line 1066 
#line 1066 
void ath9k_hw_init_global_settings(struct ath_hw *);
#line 1075 
#line 1075 
bool ath9k_hw_setpower(struct ath_hw *, enum ath9k_power_mode);
#line 1091 
#line 1091 
void ath_gen_timer_isr(struct ath_hw *);
#line 1112 
#line 1112 
bool ar9003_hw_bb_watchdog_check(struct ath_hw *);
#line 1115 
#line 1115 
void ar9003_hw_bb_watchdog_dbg_info(struct ath_hw *);
#line 1157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
__inline static bool ath9k_hw_btcoex_is_enabled(struct ath_hw *ah)
{
  #line 1159 
  return ah->btcoex_hw.enabled;
}

#line 1161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
__inline static bool ath9k_hw_mci_is_enabled(struct ath_hw *ah)
{
  #line 1163 
  return (_Bool)(((int)ah->common.btcoex_enabled != 0 && (ah->caps.hw_caps & 32768U) != 0U) != 0);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw-ops.h"
__inline static void ath9k_hw_configpcipowersave(struct ath_hw *ah, bool power_off)
{
  #line 27 
  if (! ah->aspm_enabled) 
                          #line 28 
                          return;
  #line 30 
  (*(ath9k_hw_ops(ah)->config_pci_powersave))(ah,(_Bool)((bool)((int)power_off) != 0));
  #line 31 
  return;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw-ops.h"
__inline static bool ath9k_hw_getisr(struct ath_hw *ah, enum ath9k_int *masked, u32 *sync_cause_p)
{
  #line 54 
  return (*(ath9k_hw_ops(ah)->get_isr))(ah,masked,sync_cause_p);
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw-ops.h"
__inline static int ath9k_hw_txprocdesc(struct ath_hw *ah, void *ds, struct ath_tx_status *ts)
{
  #line 66 
  return (*(ath9k_hw_ops(ah)->proc_txdesc))(ah,ds,ts);
}

#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/common-init.h"
#line 20 
void ath9k_cmn_reload_chainmask(struct ath_hw *);
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/common.h"
#line 84 
struct ath9k_channel *ath9k_cmn_get_channel(struct ieee80211_hw *, struct ath_hw *, struct cfg80211_chan_def *);
#line 90 
#line 90 
void ath9k_cmn_update_txpow(struct ath_hw *, u16, u16, u16 *);
#line 92 
#line 92 
void ath9k_cmn_init_crypto(struct ath_hw *);
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.h"
#line 257 
void ath_debug_stat_interrupt(struct ath_softc *sc, enum ath9k_int status);
#line 262 
#line 262 
int ath9k_get_et_sset_count(struct ieee80211_hw *hw, struct ieee80211_vif *vif, int sset);
#line 264 
#line 264 
void ath9k_get_et_stats(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ethtool_stats *stats, u64 *data);
#line 267 
#line 267 
void ath9k_get_et_strings(struct ieee80211_hw *hw, struct ieee80211_vif *vif, u32 sset, u8 *data);
#line 270 
#line 270 
void ath9k_sta_add_debugfs(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_sta *sta, struct dentry *dir);
#line 277 
#line 277 
void ath9k_debug_sync_cause(struct ath_softc *sc, u32 sync_cause);
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.h"
#line 160 
void ath_mci_enable(struct ath_softc *sc);
#line 161 
#line 161 
void ath9k_mci_update_wlan_channels(struct ath_softc *sc, bool allow_all);
#line 162 
#line 162 
void ath9k_mci_set_txpower(struct ath_softc *sc, bool setchannel, bool concur_tx);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
int ath9k_modparam_nohwcrypt;
#line 427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
__inline static struct ath_atx_tid *ath_node_to_tid(struct ath_node *an, u8 tidno)
{
  #line 431 
  struct ieee80211_txq *txq;
  #line 429 
  struct ieee80211_sta *sta = an->sta;
  #line 430 
  struct ieee80211_vif *vif = an->vif;
  #line 433 
  if ((long)(vif == (struct ieee80211_vif *)0) != 0L) {
    #line 434 
    ldv_inline_asm();
    #line 435 
    ldv_inline_asm();
    #line 436 
    ldv_inline_asm();
    #line 433 
    ;
  }
  #line 434 
  if (sta != (struct ieee80211_sta *)0) 
                                        #line 435 
                                        txq = sta->txq[(unsigned long)((unsigned int)tidno % 17U)]; else 
                                                                    #line 437 
                                                                    txq = vif->txq;
  #line 439 
  return (struct ath_atx_tid *)(& txq->drv_priv);
}

#line 450 
#line 450 
void ath_chanctx_set_channel(struct ath_softc *sc, struct ath_chanctx *ctx, struct cfg80211_chan_def *chandef);
#line 456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
__inline static struct ath_chanctx *ath_chanctx_get(struct ieee80211_chanctx_conf *ctx)
{
  #line 458 
  struct ath_chanctx **ptr = (struct ath_chanctx **)(& ctx->drv_priv);
  #line 459 
  return *ptr;
}

#line 466 
#line 466 
void ath9k_deinit_channel_context(struct ath_softc *sc);
#line 469 
#line 469 
void ath9k_p2p_remove_vif(struct ath_softc *sc, struct ieee80211_vif *vif);
#line 472 
#line 472 
void ath9k_p2p_bss_info_changed(struct ath_softc *sc, struct ieee80211_vif *vif);
#line 476 
#line 476 
void ath9k_p2p_ps_timer(void *priv);
#line 479 
#line 479 
void ath_chanctx_check_active(struct ath_softc *sc, struct ath_chanctx *ctx);
#line 485 
#line 485 
void ath_chanctx_event(struct ath_softc *sc, struct ieee80211_vif *vif, enum ath_chanctx_event ev);
#line 487 
#line 487 
void ath_chanctx_set_next(struct ath_softc *sc, bool force);
#line 488 
#line 488 
void ath_offchannel_next(struct ath_softc *sc);
#line 489 
#line 489 
void ath_scan_complete(struct ath_softc *sc, bool abort);
#line 490 
#line 490 
void ath_roc_complete(struct ath_softc *sc, enum ath_roc_complete_reason reason);
#line 492 
#line 492 
struct ath_chanctx *ath_is_go_chanctx_present(struct ath_softc *sc);
#line 583 
#line 583 
bool ath_drain_all_txq(struct ath_softc *sc);
#line 585 
#line 585 
void ath_tx_node_init(struct ath_softc *sc, struct ath_node *an);
#line 586 
#line 586 
void ath_tx_node_cleanup(struct ath_softc *sc, struct ath_node *an);
#line 588 
#line 588 
void ath_txq_schedule_all(struct ath_softc *sc);
#line 590 
#line 590 
int ath_txq_update(struct ath_softc *sc, int qnum, struct ath9k_tx_queue_info *qinfo);
#line 594 
#line 594 
void ath_update_max_aggr_framelen(struct ath_softc *sc, int queue, int txop);
#line 600 
#line 600 
void ath_tx_tasklet(struct ath_softc *sc);
#line 601 
#line 601 
void ath_tx_edma_tasklet(struct ath_softc *sc);
#line 602 
#line 602 
int ath_tx_aggr_start(struct ath_softc *sc, struct ieee80211_sta *sta, u16 tid, u16 *ssn);
#line 604 
#line 604 
void ath_tx_aggr_stop(struct ath_softc *sc, struct ieee80211_sta *sta, u16 tid);
#line 606 
#line 606 
void ath_tx_aggr_wakeup(struct ath_softc *sc, struct ath_node *an);
#line 607 
#line 607 
void ath_tx_aggr_sleep(struct ieee80211_sta *sta, struct ath_softc *sc, struct ath_node *an);
#line 609 
#line 609 
void ath9k_release_buffered_frames(struct ieee80211_hw *hw, struct ieee80211_sta *sta, u16 tids, int nframes, enum ieee80211_frame_release_type reason, bool more_data);
#line 614 
#line 614 
void ath9k_wake_tx_queue(struct ieee80211_hw *hw, struct ieee80211_txq *queue);
#line 672 
#line 1010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath9k_calculate_iter_data(struct ath_softc *sc, struct ath_chanctx *ctx, struct ath9k_vif_iter_data *iter_data);
#line 675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1098  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath9k_calculate_summary_state(struct ath_softc *sc, struct ath_chanctx *ctx);
#line 677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath9k_set_txpower(struct ath_softc *sc, struct ieee80211_vif *vif);
#line 717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 717 
void ath9k_beacon_config(struct ath_softc *sc, struct ieee80211_vif *main_vif, bool beacons);
#line 719 
#line 719 
void ath9k_beacon_assign_slot(struct ath_softc *sc, struct ieee80211_vif *vif);
#line 720 
#line 720 
void ath9k_beacon_remove_slot(struct ath_softc *sc, struct ieee80211_vif *vif);
#line 721 
#line 721 
void ath9k_beacon_ensure_primary_slot(struct ath_softc *sc);
#line 742 
#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath_reset_work(struct work_struct *work);
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath_ps_full_sleep(struct timer_list *t);
#line 754  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 2083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void __ath9k_flush(struct ieee80211_hw *hw, u32 queues, bool drop, bool sw_pending, bool timeout_override);
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 793 
void ath9k_start_btcoex(struct ath_softc *sc);
#line 794 
#line 794 
void ath9k_stop_btcoex(struct ath_softc *sc);
#line 797 
#line 797 
void ath9k_btcoex_handle_interrupt(struct ath_softc *sc, u32 status);
#line 799 
#line 799 
void ath9k_btcoex_stop_gen_timer(struct ath_softc *sc);
#line 863 
#line 863 
int ath9k_suspend(struct ieee80211_hw *hw, struct cfg80211_wowlan *wowlan);
#line 865 
#line 865 
int ath9k_resume(struct ieee80211_hw *hw);
#line 866 
#line 866 
void ath9k_set_wakeup(struct ieee80211_hw *hw, bool enabled);
#line 1120 
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath9k_tasklet(unsigned long data);
#line 1122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
u8 ath9k_parse_mpdudensity(u8 mpdudensity);
#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
int ath_reset(struct ath_softc *sc, struct ath9k_channel *hchan);
#line 1125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath_cancel_work(struct ath_softc *sc);
#line 1126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath_restart_work(struct ath_softc *sc);
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1133 
void ath9k_rfkill_poll_state(struct ieee80211_hw *hw);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
u8 ath9k_parse_mpdudensity(u8 mpdudensity)
{
  #line 35 
  switch ((int)mpdudensity) {
    #line 36 
    case 0: 
            #line 36 
    ;
    #line 37 
    return (unsigned char)0U;
    #line 38 
    case 1: 
            #line 38 
    ;
    #line 39 
    case 2: 
            #line 39 
    ;
    #line 40 
    case 3: 
            #line 40 
    ;
    #line 43 
    return (unsigned char)1U;
    #line 44 
    case 4: 
            #line 44 
    ;
    #line 45 
    return (unsigned char)2U;
    #line 46 
    case 5: 
            #line 46 
    ;
    #line 47 
    return (unsigned char)4U;
    #line 48 
    case 6: 
            #line 48 
    ;
    #line 49 
    return (unsigned char)8U;
    #line 50 
    case 7: 
            #line 50 
    ;
    #line 51 
    return (unsigned char)16U;
    #line 52 
    default: 
             #line 52 
    ;
    #line 53 
    return (unsigned char)0U;
  }
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static bool ath9k_has_pending_frames(struct ath_softc *sc, struct ath_txq *txq, bool sw_pending)
{
  #line 60 
  bool pending = (_Bool)0;
  #line 62 
  cif_spin_lock_bh_axq_lock_of_ath_txq_0(& txq->axq_lock);
  #line 64 
  if (txq->axq_depth != 0U) {
    #line 65 
    pending = (_Bool)1;
    #line 66 
    goto out;
  }
  #line 69 
  if (! sw_pending) 
                    #line 70 
                    goto out;
  #line 72 
  if (txq->mac80211_qnum >= 0) {
    #line 73 
    struct ath_acq *acq;
    #line 75 
    acq = & (sc->cur_chan)->acq[txq->mac80211_qnum];
    #line 76 
    if (list_empty_0(& acq->acq_new) == 0) 
                                           #line 77 
                                           pending = (_Bool)1;
    else {
      #line 76 
      if (list_empty_0(& acq->acq_old) == 0) 
                                             #line 77 
                                             pending = (_Bool)1;
    }
  }
  #line 79 
  out: 
       #line 79 
  ;
  #line 80 
  cif_spin_unlock_bh_axq_lock_of_ath_txq_0(& txq->axq_lock);
  #line 81 
  return pending;
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static bool ath9k_setpower(struct ath_softc *sc, enum ath9k_power_mode mode)
{
  #line 86 
  unsigned long flags;
  #line 87 
  bool ret;
  #line 89 
  cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock);
  #line 90 
  ret = ath9k_hw_setpower(sc->sc_ah,mode);
  #line 91 
  cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock,flags);
  #line 93 
  return ret;
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath_ps_full_sleep(struct timer_list *t)
{
  #line 98 
  void *__mptr;
  #line 100 
  unsigned long flags;
  #line 101 
  bool reset;
  #line 98 
  __mptr = (void *)t;
  #line 98 
  struct ath_softc *sc = ((struct ath_softc *)(__mptr + 18446744073709535576U));
  #line 99 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 103 
  cif___ldv_spin_lock_cc_lock_of_ath_common_0(& common->cc_lock);
  #line 104 
  ath_hw_cycle_counters_update(common);
  #line 105 
  cif_spin_unlock_irqrestore_cc_lock_of_ath_common_0(& common->cc_lock,flags);
  #line 107 
  ath9k_hw_setrxabort(sc->sc_ah,(_Bool)1);
  #line 108 
  ath9k_hw_stopdmarecv(sc->sc_ah,& reset);
  #line 110 
  ath9k_hw_setpower(sc->sc_ah,(enum ath9k_power_mode)ATH9K_PM_FULL_SLEEP);
  #line 111 
  return;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath9k_ps_wakeup(struct ath_softc *sc)
{
  #line 116 
  unsigned long flags;
  #line 117 
  enum ath9k_power_mode power_mode;
  #line 115 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 119 
  cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock);
  #line 120 
  (sc->ps_usecount) ++;
  #line 120 
  if (sc->ps_usecount != 1UL) 
                              #line 121 
                              goto unlock;
  #line 123 
  cif_del_timer_sync_0(& sc->sleep_timer);
  #line 124 
  power_mode = (sc->sc_ah)->power_mode;
  #line 125 
  ath9k_hw_setpower(sc->sc_ah,(enum ath9k_power_mode)ATH9K_PM_AWAKE);
  #line 132 
  if (power_mode != (unsigned int)ATH9K_PM_AWAKE) {
    #line 133 
    cif_spin_lock_cc_lock_of_ath_common(& common->cc_lock);
    #line 134 
    ath_hw_cycle_counters_update(common);
    #line 135 
    memset((void *)(& common->cc_survey),0,16UL);
    #line 136 
    memset((void *)(& common->cc_ani),0,16UL);
    #line 137 
    cif_spin_unlock_cc_lock_of_ath_common(& common->cc_lock);
  }
  #line 140 
  unlock: 
          #line 140 
  ;
  #line 141 
  cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock,flags);
  #line 142 
  return;
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath9k_ps_restore(struct ath_softc *sc)
{
  #line 147 
  enum ath9k_power_mode mode;
  #line 148 
  unsigned long flags;
  #line 146 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 150 
  cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock);
  #line 151 
  (sc->ps_usecount) --;
  #line 151 
  if (sc->ps_usecount != 0UL) 
                              #line 152 
                              goto unlock;
  #line 154 
  if ((int)sc->ps_idle != 0) {
    #line 155 
    cif_mod_timer_0(& sc->sleep_timer,jiffies + 25UL);
    #line 156 
    goto unlock;
  }
  #line 159 
  if ((int)sc->ps_enabled != 0 && ((unsigned long)sc->ps_flags & 47UL) == 0UL) {
    #line 165 
    mode = ATH9K_PM_NETWORK_SLEEP;
    #line 166 
    if ((int)ath9k_hw_btcoex_is_enabled(sc->sc_ah) != 0) 
                                                         #line 167 
                                                         ath9k_btcoex_stop_gen_timer(sc);
  }
  else 
       #line 169 
       goto unlock;
  #line 172 
  cif_spin_lock_cc_lock_of_ath_common(& common->cc_lock);
  #line 173 
  ath_hw_cycle_counters_update(common);
  #line 174 
  cif_spin_unlock_cc_lock_of_ath_common(& common->cc_lock);
  #line 176 
  ath9k_hw_setpower(sc->sc_ah,mode);
  #line 178 
  unlock: 
          #line 178 
  ;
  #line 179 
  cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock,flags);
  #line 180 
  return;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void __ath_cancel_work(struct ath_softc *sc)
{
  #line 184 
  cancel_work_sync(& sc->paprd_work);
  #line 185 
  cancel_delayed_work_sync(& sc->hw_check_work);
  #line 186 
  cancel_delayed_work_sync(& sc->hw_pll_work);
  #line 189 
  if ((int)ath9k_hw_mci_is_enabled(sc->sc_ah) != 0) 
                                                    #line 190 
                                                    cancel_work_sync(& sc->mci_work);
  #line 191 
  return;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath_cancel_work(struct ath_softc *sc)
{
  #line 196 
  __ath_cancel_work(sc);
  #line 197 
  cancel_work_sync(& sc->hw_reset_work);
  #line 198 
  return;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath_restart_work(struct ath_softc *sc)
{
  #line 202 
  ieee80211_queue_delayed_work(sc->hw,& sc->hw_check_work,1000UL);
  #line 205 
  if ((sc->sc_ah)->hw_version.macVersion == 768U || (sc->sc_ah)->hw_version.macVersion == 512U) {
    #line 206 
    ;
    #line 206 
    ;
    #line 206 
    ieee80211_queue_delayed_work(sc->hw,& sc->hw_pll_work,msecs_to_jiffies(100U));
  }
  #line 209 
  ath_start_ani(sc);
  #line 210 
  return;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static bool ath_prepare_reset(struct ath_softc *sc)
{
  #line 214 
  struct ath_hw *ah = sc->sc_ah;
  #line 215 
  bool ret = (_Bool)1;
  #line 217 
  ieee80211_stop_queues(sc->hw);
  #line 218 
  ath_stop_ani(sc);
  #line 219 
  ath9k_hw_disable_interrupts(ah);
  #line 221 
  if (ah->hw_version.macVersion > 447U) {
    #line 222 
    ret = (_Bool)(((int)ret & (int)ath_stoprecv(sc)) != 0);
    #line 223 
    ret = (_Bool)(((int)ret & (int)ath_drain_all_txq(sc)) != 0);
  }
  else {
    #line 225 
    ret = (_Bool)(((int)ret & (int)ath_drain_all_txq(sc)) != 0);
    #line 226 
    ret = (_Bool)(((int)ret & (int)ath_stoprecv(sc)) != 0);
  }
  #line 229 
  return ret;
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static bool ath_complete_reset(struct ath_softc *sc, bool start)
{
  #line 236 
  unsigned long flags;
  #line 234 
  struct ath_hw *ah = sc->sc_ah;
  #line 235 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 238 
  ath9k_calculate_summary_state(sc,sc->cur_chan);
  #line 239 
  ath_startrecv(sc);
  #line 240 
  ath9k_cmn_update_txpow(ah,(unsigned short)((int)(sc->cur_chan)->cur_txpower),(unsigned short)((int)(sc->cur_chan)->txpower),& (sc->cur_chan)->cur_txpower);
  #line 243 
  cif_clear_bit_0(4L,& common->op_flags);
  #line 245 
  if (! (sc->cur_chan)->offchannel && (int)start != 0) {
    #line 247 
    if ((sc->cur_chan)->tsf_val != 0ULL) {
      #line 248 
      u32 offset;
      #line 250 
      offset = ath9k_hw_get_tsf_offset(& (sc->cur_chan)->tsf_ts,(struct timespec64 *)0);
      #line 252 
      ath9k_hw_settsf64(ah,(sc->cur_chan)->tsf_val + (unsigned long long)offset);
    }
    #line 256 
    if (! test_bit(1L,& common->op_flags)) 
                                           #line 257 
                                           goto work;
    #line 259 
    if (ah->opmode == (unsigned int)NL80211_IFTYPE_STATION) {
      #line 259 
      if ((int)test_bit(3L,& common->op_flags) != 0) {
        #line 261 
        cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock);
        #line 262 
        sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags | 17U);
        #line 263 
        cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock,flags);
      }
      else 
           #line 265 
           ath9k_set_beacon(sc);
    }
    else 
         #line 265 
         ath9k_set_beacon(sc);
    #line 267 
    work: 
          #line 267 
    ;
    #line 268 
    ath_restart_work(sc);
    #line 269 
    ath_txq_schedule_all(sc);
  }
  #line 272 
  sc->gtt_cnt = (unsigned char)0U;
  #line 274 
  ath9k_hw_set_interrupts(ah);
  #line 275 
  ath9k_hw_enable_interrupts(ah);
  #line 276 
  ieee80211_wake_queues(sc->hw);
  #line 277 
  ath9k_p2p_ps_timer((void *)sc);
  #line 279 
  return (_Bool)1;
}

#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath_reset_internal(struct ath_softc *sc, struct ath9k_channel *hchan)
{
  #line 288 
  int r;
  #line 284 
  struct ath_hw *ah = sc->sc_ah;
  #line 285 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 286 
  struct ath9k_hw_cal_data *caldata = (struct ath9k_hw_cal_data *)0;
  #line 287 
  bool fastcc = (_Bool)1;
  #line 290 
  __ath_cancel_work(sc);
  #line 292 
  disable_irq((unsigned int)sc->irq);
  #line 293 
  tasklet_disable(& sc->intr_tq);
  #line 294 
  tasklet_disable(& sc->bcon_tasklet);
  #line 295 
  cif_spin_lock_bh_sc_pcu_lock_of_ath_softc(& sc->sc_pcu_lock);
  #line 297 
  if (! (sc->cur_chan)->offchannel) {
    #line 298 
    fastcc = (_Bool)0;
    #line 299 
    caldata = & (sc->cur_chan)->caldata;
  }
  #line 302 
  if (hchan == (struct ath9k_channel *)0) {
    #line 303 
    fastcc = (_Bool)0;
    #line 304 
    hchan = ah->curchan;
  }
  #line 307 
  if (! ath_prepare_reset(sc)) 
                               #line 308 
                               fastcc = (_Bool)0;
  #line 310 
  if ((int)ath9k_is_chanctx_enabled() != 0) 
                                            #line 311 
                                            fastcc = (_Bool)0;
  #line 313 
  cif_spin_lock_bh_chan_lock_of_ath_softc_0(& sc->chan_lock);
  #line 314 
  sc->cur_chandef = (sc->cur_chan)->chandef;
  #line 315 
  cif_spin_unlock_bh_chan_lock_of_ath_softc_0(& sc->chan_lock);
  #line 317 
  if ((common->debug_mask & 512) != 0) 
                                       #line 317 
                                       ath_printk((char *)"\001",common,(char *)"Reset to %u MHz, HT40: %d fastcc: %d\n",(int)hchan->channel,((unsigned long)hchan->channelFlags & 48UL) != 0UL,(int)fastcc);
  #line 320 
  r = ath9k_hw_reset(ah,hchan,caldata,(_Bool)((bool)((int)fastcc) != 0));
  #line 321 
  if (r != 0) {
    #line 322 
    ath_printk((char *)"\001",common,(char *)"Unable to reset channel, reset status %d\n",r);
    #line 325 
    ath9k_hw_enable_interrupts(ah);
    #line 326 
    ath9k_queue_reset(sc,(enum ath_reset_type)RESET_TYPE_BB_HANG);
    #line 328 
    goto out;
  }
  #line 331 
  if ((int)ath9k_hw_mci_is_enabled(sc->sc_ah) != 0) 
    #line 331 
    if ((int)(sc->cur_chan)->offchannel != 0) 
                                              #line 333 
                                              ath9k_mci_set_txpower(sc,(_Bool)1,(_Bool)0);
  #line 335 
  if (! ath_complete_reset(sc,(_Bool)1)) 
                                         #line 336 
                                         r = -5;
  #line 338 
  out: 
       #line 338 
  ;
  #line 339 
  enable_irq((unsigned int)sc->irq);
  #line 340 
  cif_spin_unlock_bh_sc_pcu_lock_of_ath_softc(& sc->sc_pcu_lock);
  #line 341 
  tasklet_enable(& sc->bcon_tasklet);
  #line 342 
  tasklet_enable(& sc->intr_tq);
  #line 344 
  return r;
}

#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath_node_attach(struct ath_softc *sc, struct ieee80211_sta *sta, struct ieee80211_vif *vif)
{
  #line 350 
  struct ath_node *an;
  #line 351 
  an = (struct ath_node *)(& sta->drv_priv);
  #line 353 
  an->sc = sc;
  #line 354 
  an->sta = sta;
  #line 355 
  an->vif = vif;
  #line 356 
  memset((void *)(& an->key_idx),0,4UL);
  #line 358 
  ath_tx_node_init(sc,an);
  #line 360 
  ath_dynack_node_init(sc->sc_ah,an);
  #line 361 
  return;
}

#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath_node_detach(struct ath_softc *sc, struct ieee80211_sta *sta)
{
  #line 365 
  struct ath_node *an = (struct ath_node *)(& sta->drv_priv);
  #line 366 
  ath_tx_node_cleanup(sc,an);
  #line 368 
  ath_dynack_node_deinit(sc->sc_ah,an);
  #line 369 
  return;
}

#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath9k_tasklet(unsigned long data)
{
  #line 376 
  enum ath_reset_type type;
  #line 377 
  unsigned long flags;
  #line 378 
  u32 status;
  #line 379 
  u32 rxmask;
  #line 373 
  struct ath_softc *sc = (struct ath_softc *)data;
  #line 374 
  struct ath_hw *ah = sc->sc_ah;
  #line 375 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 381 
  cif___ldv_spin_lock_intr_lock_of_ath_softc(& sc->intr_lock);
  #line 382 
  status = sc->intrstatus;
  #line 383 
  sc->intrstatus = 0U;
  #line 384 
  cif_spin_unlock_irqrestore_intr_lock_of_ath_softc(& sc->intr_lock,flags);
  #line 386 
  ath9k_ps_wakeup(sc);
  #line 387 
  cif_spin_lock_sc_pcu_lock_of_ath_softc(& sc->sc_pcu_lock);
  #line 389 
  if ((status & 1073741824U) != 0U) {
    #line 390 
    type = RESET_TYPE_FATAL_INT;
    #line 391 
    ath9k_queue_reset(sc,type);
    #line 392 
    if ((common->debug_mask & 1) != 0) 
                                       #line 392 
                                       ath_printk((char *)"\001",common,(char *)"FATAL: Skipping interrupts\n");
    #line 393 
    goto out;
  }
  #line 396 
  if (((int)ah->config.hw_hang_checks & 1) != 0 && (status & 1024U) != 0U) {
    #line 398 
    cif___ldv_spin_lock_cc_lock_of_ath_common_0(& common->cc_lock);
    #line 399 
    ath_hw_cycle_counters_update(common);
    #line 400 
    ar9003_hw_bb_watchdog_dbg_info(ah);
    #line 401 
    cif_spin_unlock_irqrestore_cc_lock_of_ath_common_0(& common->cc_lock,flags);
    #line 403 
    if ((int)ar9003_hw_bb_watchdog_check(ah) != 0) {
      #line 404 
      type = RESET_TYPE_BB_WATCHDOG;
      #line 405 
      ath9k_queue_reset(sc,type);
      #line 407 
      if ((common->debug_mask & 1) != 0) 
                                         #line 407 
                                         ath_printk((char *)"\001",common,(char *)"BB_WATCHDOG: Skipping interrupts\n");
      #line 409 
      goto out;
    }
  }
  #line 413 
  if ((status & 536870912U) != 0U) {
    #line 414 
    sc->gtt_cnt = (u8)((int)sc->gtt_cnt + 1);
    #line 416 
    if ((unsigned int)sc->gtt_cnt > 4U) {
      #line 416 
      if (! ath9k_hw_check_alive(ah)) {
        #line 417 
        type = RESET_TYPE_TX_GTT;
        #line 418 
        ath9k_queue_reset(sc,type);
        #line 419 
        if ((common->debug_mask & 1) != 0) 
                                           #line 419 
                                           ath_printk((char *)"\001",common,(char *)"GTT: Skipping interrupts\n");
        #line 421 
        goto out;
      }
    }
  }
  #line 425 
  cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock);
  #line 426 
  if ((status & 67108864U) != 0U && (int)sc->ps_enabled != 0) {
    #line 431 
    if ((common->debug_mask & 2048) != 0) 
                                          #line 431 
                                          ath_printk((char *)"\001",common,(char *)"TSFOOR - Sync with next Beacon\n");
    #line 432 
    sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags | 17U);
  }
  #line 434 
  cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock,flags);
  #line 436 
  if ((ah->caps.hw_caps & 16U) != 0U) 
                                      #line 437 
                                      rxmask = 51U; else 
                                                         #line 440 
                                                         rxmask = 49U;
  #line 442 
  if ((status & rxmask) != 0U) {
    #line 444 
    if ((ah->caps.hw_caps & 16U) != 0U && (status & 1U) != 0U) 
                                                               #line 446 
                                                               ath_rx_tasklet(sc,0,(_Bool)1);
    #line 448 
    ath_rx_tasklet(sc,0,(_Bool)0);
  }
  #line 451 
  if ((status & 64U) != 0U) {
    #line 452 
    if ((ah->caps.hw_caps & 16U) != 0U) {
      #line 459 
      sc->gtt_cnt = (unsigned char)0U;
      #line 461 
      ath_tx_edma_tasklet(sc);
    }
    else 
         #line 463 
         ath_tx_tasklet(sc);
    #line 466 
    __wake_up(& sc->tx_wait,3U,1,(void *)0);
  }
  #line 469 
  if ((status & 134217728U) != 0U) 
                                   #line 470 
                                   ath_gen_timer_isr(sc->sc_ah);
  #line 472 
  ath9k_btcoex_handle_interrupt(sc,status);
  #line 475 
  ath9k_hw_resume_interrupts(ah);
  #line 476 
  out: 
       #line 476 
  ;
  #line 477 
  cif_spin_unlock_sc_pcu_lock_of_ath_softc(& sc->sc_pcu_lock);
  #line 478 
  ath9k_ps_restore(sc);
  #line 479 
  return;
}

#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
irqreturn_t ath_isr(int irq, void *dev)
{
  #line 502 
  enum ath9k_int status;
  #line 499 
  struct ath_softc *sc = (struct ath_softc *)dev;
  #line 500 
  struct ath_hw *ah = sc->sc_ah;
  #line 501 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 503 
  u32 sync_cause = 0U;
  #line 504 
  bool sched = (_Bool)0;
  #line 511 
  if (ah == (struct ath_hw *)0) 
                                #line 512 
                                return IRQ_NONE;
  else {
    #line 511 
    if ((int)test_bit(0L,& common->op_flags) != 0) 
                                                   #line 512 
                                                   return IRQ_NONE;
  }
  #line 515 
  if (! ath9k_hw_intrpend(ah)) 
                               #line 516 
                               return IRQ_NONE;
  #line 524 
  ath9k_hw_getisr(ah,& status,& sync_cause);
  #line 525 
  ath9k_debug_sync_cause(sc,sync_cause);
  #line 526 
  status = (enum ath9k_int)((unsigned int)ah->imask & (unsigned int)status);
  #line 528 
  if ((int)test_bit(4L,& common->op_flags) != 0) 
                                                 #line 529 
                                                 return IRQ_HANDLED;
  #line 535 
  if (status == (unsigned int)0) 
                                 #line 536 
                                 return IRQ_NONE;
  #line 539 
  cif_spin_lock_intr_lock_of_ath_softc(& sc->intr_lock);
  #line 540 
  sc->intrstatus |= (unsigned int)status;
  #line 541 
  cif_spin_unlock_intr_lock_of_ath_softc(& sc->intr_lock);
  #line 543 
  if (((unsigned int)status & 2080638579U) != 0U) 
                                                  #line 544 
                                                  sched = (_Bool)1;
  #line 550 
  if (((unsigned int)status & 1073741824U) != 0U) 
                                                  #line 551 
                                                  goto chip_reset;
  #line 553 
  if (((int)ah->config.hw_hang_checks & 1) != 0 && ((unsigned int)status & 1024U) != 0U) 
    #line 555 
    goto chip_reset;
  #line 557 
  if (((unsigned int)status & 65536U) != 0U) 
                                             #line 558 
                                             cif_tasklet_schedule(& sc->bcon_tasklet);
  #line 560 
  if (((unsigned int)status & 2048U) != 0U) 
                                            #line 561 
                                            ath9k_hw_updatetxtriglevel(ah,(_Bool)1);
  #line 563 
  if (((unsigned int)status & 16U) != 0U) {
    #line 564 
    ah->imask = (enum ath9k_int)((unsigned int)ah->imask & 4294967247U);
    #line 565 
    ath9k_hw_set_interrupts(ah);
  }
  #line 568 
  if ((ah->caps.hw_caps & 4U) == 0U) 
    #line 569 
    if (((unsigned int)status & 256U) != 0U) {
      #line 570 
      int __ret_warn_on;
      #line 570 
      __ret_warn_on = (int)sc->ps_idle != 0;
      #line 570 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 571 
        ldv_inline_asm();
        #line 572 
        ldv_inline_asm();
      }
      #line 570 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 571 
                                                    goto chip_reset;
      #line 574 
      ath9k_setpower(sc,(enum ath9k_power_mode)ATH9K_PM_AWAKE);
      #line 575 
      cif_spin_lock_sc_pm_lock_of_ath_softc(& sc->sc_pm_lock);
      #line 576 
      ath9k_hw_setrxabort(sc->sc_ah,(_Bool)0);
      #line 577 
      sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags | 1U);
      #line 578 
      cif_spin_unlock_sc_pm_lock_of_ath_softc(& sc->sc_pm_lock);
    }
  #line 581 
  chip_reset: 
              #line 581 
  ;
  #line 583 
  ath_debug_stat_interrupt(sc,status);
  #line 585 
  if ((int)sched != 0) {
    #line 587 
    ath9k_hw_kill_interrupts(ah);
    #line 588 
    cif_tasklet_schedule(& sc->intr_tq);
  }
  #line 591 
  return IRQ_HANDLED;
}

#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
int ath_reset(struct ath_softc *sc, struct ath9k_channel *hchan)
{
  #line 603 
  int r;
  #line 602 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 605 
  ath9k_hw_kill_interrupts(sc->sc_ah);
  #line 606 
  cif_set_bit_0(4L,& common->op_flags);
  #line 608 
  ath9k_ps_wakeup(sc);
  #line 609 
  r = ath_reset_internal(sc,hchan);
  #line 610 
  ath9k_ps_restore(sc);
  #line 612 
  return r;
}

#line 620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath9k_queue_reset(struct ath_softc *sc, enum ath_reset_type type)
{
  #line 622 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 624 
  (sc->debug.stats.reset[(unsigned int)type]) ++;
  #line 626 
  ath9k_hw_kill_interrupts(sc->sc_ah);
  #line 627 
  cif_set_bit_0(4L,& common->op_flags);
  #line 628 
  ieee80211_queue_work(sc->hw,& sc->hw_reset_work);
  #line 629 
  return;
}

#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath_reset_work(struct work_struct *work)
{
  #line 633 
  void *__mptr;
  #line 633 
  __mptr = (void *)work;
  #line 633 
  struct ath_softc *sc = ((struct ath_softc *)(__mptr + 18446744073709548224U));
  #line 635 
  ath9k_ps_wakeup(sc);
  #line 636 
  ath_reset_internal(sc,(struct ath9k_channel *)0);
  #line 637 
  ath9k_ps_restore(sc);
  #line 638 
  return;
}

#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_start(struct ieee80211_hw *hw)
{
  #line 651 
  struct ath9k_channel *init_channel;
  #line 652 
  int r;
  #line 646 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 647 
  struct ath_hw *ah = sc->sc_ah;
  #line 648 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 649 
  struct ieee80211_channel *curchan = (sc->cur_chan)->chandef.chan;
  #line 650 
  struct ath_chanctx *ctx = sc->cur_chan;
  #line 654 
  if ((common->debug_mask & 512) != 0) 
                                       #line 654 
                                       ath_printk((char *)"\001",common,(char *)"Starting driver with initial channel: %d MHz\n",curchan->center_freq);
  #line 658 
  ath9k_ps_wakeup(sc);
  #line 659 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 661 
  init_channel = ath9k_cmn_get_channel(hw,ah,& ctx->chandef);
  #line 662 
  sc->cur_chandef = hw->conf.chandef;
  #line 665 
  ath9k_hw_configpcipowersave(ah,(_Bool)0);
  #line 674 
  cif_spin_lock_bh_sc_pcu_lock_of_ath_softc(& sc->sc_pcu_lock);
  #line 676 
  atomic_set(& ah->intr_ref_cnt,-1);
  #line 678 
  r = ath9k_hw_reset(ah,init_channel,ah->caldata,(_Bool)0);
  #line 679 
  if (r != 0) {
    #line 680 
    ath_printk((char *)"\001",common,(char *)"Unable to reset hardware; reset status %d (freq %u MHz)\n",r,curchan->center_freq);
    #line 683 
    ah->reset_power_on = (_Bool)0;
  }
  #line 687 
  ah->imask = 3221225584;
  #line 691 
  if ((ah->caps.hw_caps & 16U) != 0U) 
                                      #line 692 
                                      ah->imask = (enum ath9k_int)((unsigned int)ah->imask | 3U); else 
                                                                    #line 695 
                                                                    ah->imask = (enum ath9k_int)((unsigned int)ah->imask | 1U);
  #line 697 
  if (((int)ah->config.hw_hang_checks & 1) != 0) 
                                                 #line 698 
                                                 ah->imask = (enum ath9k_int)((unsigned int)ah->imask | 1024U);
  #line 704 
  if (ah->hw_version.macVersion > 447U) 
                                        #line 705 
                                        ah->imask = (enum ath9k_int)((unsigned int)ah->imask | 536870912U);
  #line 707 
  if ((ah->caps.hw_caps & 1U) != 0U) 
                                     #line 708 
                                     ah->imask = (enum ath9k_int)((unsigned int)ah->imask | 268435456U);
  #line 710 
  ath_mci_enable(sc);
  #line 712 
  cif_clear_bit_0(0L,& common->op_flags);
  #line 713 
  (sc->sc_ah)->is_monitoring = (_Bool)0;
  #line 715 
  if (! ath_complete_reset(sc,(_Bool)0)) 
                                         #line 716 
                                         ah->reset_power_on = (_Bool)0;
  #line 718 
  if (ah->led_pin >= 0) {
    #line 719 
    ath9k_hw_set_gpio(ah,(unsigned int)ah->led_pin,(unsigned int)((int)ah->config.led_active_high != 0));
    #line 721 
    ath9k_hw_gpio_request_out(ah,(unsigned int)ah->led_pin,(char *)0,0U);
  }
  #line 729 
  ath9k_cmn_init_crypto(sc->sc_ah);
  #line 731 
  ath9k_hw_reset_tsf(ah);
  #line 733 
  cif_spin_unlock_bh_sc_pcu_lock_of_ath_softc(& sc->sc_pcu_lock);
  #line 735 
  ath9k_rng_start(sc);
  #line 737 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 739 
  ath9k_ps_restore(sc);
  #line 741 
  return 0;
}

#line 744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_tx(struct ieee80211_hw *hw, struct ieee80211_tx_control *control, struct sk_buff *skb)
{
  #line 750 
  struct ath_tx_control txctl;
  #line 752 
  unsigned long flags;
  #line 748 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 749 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 751 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 754 
  if ((int)sc->ps_enabled != 0) {
    #line 759 
    if ((int)ieee80211_is_data((unsigned short)((int)hdr->frame_control)) != 0) {
      #line 760 
      if (! ieee80211_is_nullfunc((unsigned short)((int)hdr->frame_control))) {
        #line 761 
        if (! ieee80211_has_pm((unsigned short)((int)hdr->frame_control))) {
          #line 762 
          if ((common->debug_mask & 2048) != 0) 
                                                #line 762 
                                                ath_printk((char *)"\001",common,(char *)"Add PM=1 for a TX frame while in PS mode\n");
          #line 764 
          hdr->frame_control = (unsigned short)((unsigned int)hdr->frame_control | 4096U);
        }
      }
    }
  }
  #line 768 
  if ((long)((sc->sc_ah)->power_mode == (unsigned int)ATH9K_PM_NETWORK_SLEEP) != 0L) {
    #line 774 
    ath9k_ps_wakeup(sc);
    #line 775 
    cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock);
    #line 776 
    if (((sc->sc_ah)->caps.hw_caps & 4U) == 0U) 
                                                #line 777 
                                                ath9k_hw_setrxabort(sc->sc_ah,(_Bool)0);
    #line 778 
    if ((int)ieee80211_is_pspoll((unsigned short)((int)hdr->frame_control)) != 0) {
      #line 779 
      if ((common->debug_mask & 2048) != 0) 
                                            #line 779 
                                            ath_printk((char *)"\001",common,(char *)"Sending PS-Poll to pick a buffered frame\n");
      #line 781 
      sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags | 4U);
    }
    else {
      #line 783 
      if ((common->debug_mask & 2048) != 0) 
                                            #line 783 
                                            ath_printk((char *)"\001",common,(char *)"Wake up to complete TX\n");
      #line 784 
      sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags | 8U);
    }
    #line 791 
    cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock,flags);
    #line 792 
    ath9k_ps_restore(sc);
  }
  #line 799 
  if ((long)((sc->sc_ah)->power_mode == (unsigned int)ATH9K_PM_FULL_SLEEP) != 0L) {
    #line 800 
    ath_printk((char *)"\001",common,(char *)"TX while HW is in FULL_SLEEP mode\n");
    #line 801 
    goto exit;
  }
  #line 804 
  memset((void *)(& txctl),0,32UL);
  #line 805 
  txctl.txq = sc->tx.txq_map[(int)skb_get_queue_mapping(skb)];
  #line 806 
  txctl.sta = control->sta;
  #line 808 
  if ((common->debug_mask & 128) != 0) 
                                       #line 808 
                                       ath_printk((char *)"\001",common,(char *)"transmitting packet, skb: %p\n",skb);
  #line 810 
  if (ath_tx_start(hw,skb,& txctl) != 0) {
    #line 811 
    if ((common->debug_mask & 128) != 0) 
                                         #line 811 
                                         ath_printk((char *)"\001",common,(char *)"TX failed\n");
    #line 812 
    (sc->debug.stats.txstats[(txctl.txq)->axq_qnum].txfailed) ++;
    #line 813 
    goto exit;
  }
  #line 816 
  return;
  #line 817 
  exit: 
        #line 817 
  ;
  #line 818 
  ieee80211_free_txskb(hw,skb);
  #line 819 
  return;
}

#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_stop(struct ieee80211_hw *hw)
{
  #line 826 
  bool prev_idle;
  #line 823 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 824 
  struct ath_hw *ah = sc->sc_ah;
  #line 825 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 828 
  ath9k_deinit_channel_context(sc);
  #line 830 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 832 
  ath9k_rng_stop(sc);
  #line 834 
  ath_cancel_work(sc);
  #line 836 
  if ((int)test_bit(0L,& common->op_flags) != 0) {
    #line 837 
    if (common->debug_mask != 0) 
                                 #line 837 
                                 ath_printk((char *)"\001",common,(char *)"Device not present\n");
    #line 838 
    cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
    #line 839 
    return;
  }
  #line 843 
  ath9k_ps_wakeup(sc);
  #line 845 
  cif_spin_lock_bh_sc_pcu_lock_of_ath_softc(& sc->sc_pcu_lock);
  #line 848 
  ah->imask = (enum ath9k_int)((unsigned int)ah->imask & 2147483647U);
  #line 852 
  ath9k_hw_disable_interrupts(ah);
  #line 854 
  cif_spin_unlock_bh_sc_pcu_lock_of_ath_softc(& sc->sc_pcu_lock);
  #line 858 
  synchronize_irq((unsigned int)sc->irq);
  #line 859 
  tasklet_kill(& sc->intr_tq);
  #line 860 
  tasklet_kill(& sc->bcon_tasklet);
  #line 862 
  prev_idle = sc->ps_idle;
  #line 863 
  sc->ps_idle = (_Bool)1;
  #line 865 
  cif_spin_lock_bh_sc_pcu_lock_of_ath_softc(& sc->sc_pcu_lock);
  #line 867 
  if (ah->led_pin >= 0) {
    #line 868 
    ath9k_hw_set_gpio(ah,(unsigned int)ah->led_pin,(unsigned int)(! ah->config.led_active_high));
    #line 870 
    ath9k_hw_gpio_request_in(ah,(unsigned int)ah->led_pin,(char *)0);
  }
  #line 873 
  ath_prepare_reset(sc);
  #line 875 
  if (sc->rx.frag != (struct sk_buff *)0) {
    #line 876 
    dev_kfree_skb_any(sc->rx.frag);
    #line 877 
    sc->rx.frag = (struct sk_buff *)0;
  }
  #line 880 
  if (ah->curchan == (struct ath9k_channel *)0) 
                                                #line 881 
                                                ah->curchan = ath9k_cmn_get_channel(hw,ah,& (sc->cur_chan)->chandef);
  #line 884 
  ath9k_hw_reset(ah,ah->curchan,ah->caldata,(_Bool)0);
  #line 886 
  cif_set_bit_0(0L,& common->op_flags);
  #line 888 
  ath9k_hw_phy_disable(ah);
  #line 890 
  ath9k_hw_configpcipowersave(ah,(_Bool)1);
  #line 892 
  cif_spin_unlock_bh_sc_pcu_lock_of_ath_softc(& sc->sc_pcu_lock);
  #line 894 
  ath9k_ps_restore(sc);
  #line 896 
  sc->ps_idle = prev_idle;
  #line 898 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 900 
  if ((common->debug_mask & 512) != 0) 
                                       #line 900 
                                       ath_printk((char *)"\001",common,(char *)"Driver halt\n");
  #line 901 
  return;
}

#line 903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static bool ath9k_uses_beacons(int type)
{
  #line 905 
  switch (type) {
    #line 906 
    case 3: 
            #line 906 
    ;
    #line 907 
    case 1: 
            #line 907 
    ;
    #line 908 
    case 7: 
            #line 908 
    ;
    #line 909 
    return (_Bool)1;
    #line 910 
    default: 
             #line 910 
    ;
    #line 911 
    return (_Bool)0;
  }
}

#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_vif_iter_set_beacon(struct ath9k_vif_iter_data *iter_data, struct ieee80211_vif *vif)
{
  #line 919 
  if (iter_data->primary_beacon_vif == (struct ieee80211_vif *)0) 
                                                                  #line 920 
                                                                  iter_data->primary_beacon_vif = vif;
  else 
    #line 922 
    if ((iter_data->primary_beacon_vif)->type != (unsigned int)NL80211_IFTYPE_AP && vif->type == (unsigned int)NL80211_IFTYPE_AP) 
      #line 924 
      iter_data->primary_beacon_vif = vif;
  #line 927 
  iter_data->beacons = (_Bool)1;
  #line 928 
  (iter_data->nbcnvifs) ++;
  #line 929 
  return;
}

#line 931  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_vif_iter(struct ath9k_vif_iter_data *iter_data, u8 *mac, struct ieee80211_vif *vif)
{
  #line 935 
  int i;
  #line 934 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 937 
  if ((int)iter_data->has_hw_macaddr != 0) {
    #line 938 
    i = 0;
    #line 938 
    while (i <= 5) {
      #line 939 
      iter_data->mask[i] = (unsigned char)((int)iter_data->mask[i] & ~ ((int)iter_data->hw_macaddr[i] ^ (int)*(mac + (unsigned long)i)));
      #line 938 
      i ++;
    }
  }
  else {
    #line 942 
    memcpy((void *)(& iter_data->hw_macaddr),(void *)mac,6UL);
    #line 943 
    iter_data->has_hw_macaddr = (_Bool)1;
  }
  #line 946 
  if (! vif->bss_conf.use_short_slot) 
                                      #line 947 
                                      iter_data->slottime = (unsigned char)20U;
  #line 949 
  switch ((unsigned int)vif->type) {
    #line 950 
    case (unsigned int)3: 
                          #line 950 
    ;
    #line 951 
    (iter_data->naps) ++;
    #line 952 
    if ((int)vif->bss_conf.enable_beacon != 0) 
                                               #line 953 
                                               ath9k_vif_iter_set_beacon(iter_data,vif);
    #line 954 
    break;
    #line 955 
    case (unsigned int)2: 
                          #line 955 
    ;
    #line 956 
    (iter_data->nstations) ++;
    #line 957 
    if ((int)avp->assoc != 0 && iter_data->primary_sta == (struct ieee80211_vif *)0) 
      #line 958 
      iter_data->primary_sta = vif;
    #line 959 
    break;
    #line 960 
    case (unsigned int)11: 
                           #line 960 
    ;
    #line 961 
    (iter_data->nocbs) ++;
    #line 962 
    break;
    #line 963 
    case (unsigned int)1: 
                          #line 963 
    ;
    #line 964 
    (iter_data->nadhocs) ++;
    #line 965 
    if ((int)vif->bss_conf.enable_beacon != 0) 
                                               #line 966 
                                               ath9k_vif_iter_set_beacon(iter_data,vif);
    #line 967 
    break;
    #line 968 
    case (unsigned int)7: 
                          #line 968 
    ;
    #line 969 
    (iter_data->nmeshes) ++;
    #line 970 
    if ((int)vif->bss_conf.enable_beacon != 0) 
                                               #line 971 
                                               ath9k_vif_iter_set_beacon(iter_data,vif);
    #line 972 
    break;
    #line 973 
    case (unsigned int)5: 
                          #line 973 
    ;
    #line 974 
    (iter_data->nwds) ++;
    #line 975 
    break;
    #line 976 
    default: 
             #line 976 
    ;
    #line 977 
    break;
  }
  #line 979 
  return;
}

#line 981  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_update_bssid_mask(struct ath_softc *sc, struct ath_chanctx *ctx, struct ath9k_vif_iter_data *iter_data)
{
  #line 992 
  void *__mptr;
  #line 986 
  struct ath_vif *avp;
  #line 987 
  int i;
  #line 985 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 989 
  if (! ath9k_is_chanctx_enabled()) 
                                    #line 990 
                                    return;
  #line 992 
  __mptr = (void *)ctx->vifs.next;
  #line 992 
  avp = ((struct ath_vif *)__mptr);
  #line 992 
  while (& avp->list != & ctx->vifs) {
    #line 992 
    void *__mptr_0;
    #line 993 
    if ((int)ctx->nvifs_assigned != 1) 
                                       #line 994 
                                       goto __Cont;
    #line 996 
    if (! iter_data->has_hw_macaddr) 
                                     #line 997 
                                     goto __Cont;
    #line 999 
    ether_addr_copy((u8 *)(& common->curbssid),(u8 *)(& avp->bssid));
    #line 1002 
    i = 0;
    #line 1002 
    while (i <= 5) {
      #line 1003 
      iter_data->mask[i] = (unsigned char)((int)iter_data->mask[i] & ~ ((int)iter_data->hw_macaddr[i] ^ (int)((sc->hw)->wiphy)->perm_addr[i]));
      #line 1002 
      i ++;
    }
    #line 992 
    __Cont: { /* sequence */
              #line 992 
              __mptr_0 = (void *)avp->list.next;
              #line 992 
              avp = ((struct ath_vif *)__mptr_0);
            }
  }
  #line 1007 
  return;
}

#line 1010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath9k_calculate_iter_data(struct ath_softc *sc, struct ath_chanctx *ctx, struct ath9k_vif_iter_data *iter_data)
{
  #line 1024 
  void *__mptr;
  #line 1014 
  struct ath_vif *avp;
  #line 1020 
  memset((void *)iter_data,0,64UL);
  #line 1021 
  eth_broadcast_addr((u8 *)(& iter_data->mask));
  #line 1022 
  iter_data->slottime = (unsigned char)9U;
  #line 1024 
  __mptr = (void *)ctx->vifs.next;
  #line 1024 
  avp = ((struct ath_vif *)__mptr);
  #line 1024 
  while (& avp->list != & ctx->vifs) {
    #line 1024 
    void *__mptr_0;
    #line 1025 
    ath9k_vif_iter(iter_data,(u8 *)(& (avp->vif)->addr),avp->vif);
    #line 1024 
    __mptr_0 = (void *)avp->list.next;
    #line 1024 
    avp = ((struct ath_vif *)__mptr_0);
  }
  #line 1027 
  ath9k_update_bssid_mask(sc,ctx,iter_data);
  #line 1028 
  return;
}

#line 1030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_set_assoc_state(struct ath_softc *sc, struct ieee80211_vif *vif, bool changed)
{
  #line 1035 
  unsigned long flags;
  #line 1033 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1034 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 1037 
  cif_set_bit_0(3L,& common->op_flags);
  #line 1039 
  ether_addr_copy((u8 *)(& common->curbssid),(u8 *)(& avp->bssid));
  #line 1040 
  common->curaid = avp->aid;
  #line 1041 
  ath9k_hw_write_associd(sc->sc_ah);
  #line 1043 
  if ((int)changed != 0) {
    #line 1044 
    common->last_rssi = 127;
    #line 1045 
    (sc->sc_ah)->stats.avgbrssi = 127U;
    #line 1047 
    cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock);
    #line 1048 
    sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags | 17U);
    #line 1049 
    cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock,flags);
  }
  #line 1052 
  if ((int)ath9k_hw_mci_is_enabled(sc->sc_ah) != 0) 
                                                    #line 1053 
                                                    ath9k_mci_update_wlan_channels(sc,(_Bool)0);
  #line 1055 
  if ((common->debug_mask & 512) != 0) 
                                       #line 1055 
                                       ath_printk((char *)"\001",common,(char *)"Primary Station interface: %pM, BSSID: %pM\n",(u8 *)(& vif->addr),(u8 *)(& common->curbssid));
  #line 1056 
  return;
}

#line 1061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_set_offchannel_state(struct ath_softc *sc)
{
  #line 1074 
  int __ret_warn_on;
  #line 1063 
  struct ath_hw *ah = sc->sc_ah;
  #line 1064 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 1065 
  struct ieee80211_vif *vif = (struct ieee80211_vif *)0;
  #line 1067 
  ath9k_ps_wakeup(sc);
  #line 1069 
  if (sc->offchannel.state <= (unsigned int)ATH_OFFCHANNEL_SUSPEND) 
                                                                    #line 1070 
                                                                    vif = sc->offchannel.scan_vif; else 
                                                                    #line 1072 
                                                                    vif = sc->offchannel.roc_vif;
  #line 1074 
  __ret_warn_on = vif == (struct ieee80211_vif *)0;
  #line 1074 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 1075 
    ldv_inline_asm();
    #line 1076 
    ldv_inline_asm();
  }
  #line 1074 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 1075 
                                                goto exit;
  #line 1077 
  eth_zero_addr((u8 *)(& common->curbssid));
  #line 1078 
  eth_broadcast_addr((u8 *)(& common->bssidmask));
  #line 1079 
  memcpy((void *)(& common->macaddr),(void *)(& vif->addr),6UL);
  #line 1080 
  common->curaid = (unsigned short)0U;
  #line 1081 
  ah->opmode = vif->type;
  #line 1082 
  ah->imask = (enum ath9k_int)((unsigned int)ah->imask & 4294901759U);
  #line 1083 
  ah->imask = (enum ath9k_int)((unsigned int)ah->imask & 4227858431U);
  #line 1084 
  ah->slottime = 9U;
  #line 1086 
  ath_hw_setbssidmask(common);
  #line 1087 
  ath9k_hw_setopmode(ah);
  #line 1088 
  ath9k_hw_write_associd(sc->sc_ah);
  #line 1089 
  ath9k_hw_set_interrupts(ah);
  #line 1090 
  ath9k_hw_init_global_settings(ah);
  #line 1092 
  exit: 
        #line 1092 
  ;
  #line 1093 
  ath9k_ps_restore(sc);
  #line 1094 
  return;
}

#line 1098  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath9k_calculate_summary_state(struct ath_softc *sc, struct ath_chanctx *ctx)
{
  #line 1103 
  struct ath9k_vif_iter_data iter_data;
  #line 1101 
  struct ath_hw *ah = sc->sc_ah;
  #line 1102 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 1105 
  ath_chanctx_check_active(sc,ctx);
  #line 1107 
  if (sc->cur_chan != ctx) 
                           #line 1108 
                           return;
  #line 1111 
  if (& sc->offchannel.chan == ctx) 
                                    #line 1112 
                                    ath9k_set_offchannel_state(sc);
  #line 1115 
  ath9k_ps_wakeup(sc);
  #line 1116 
  ath9k_calculate_iter_data(sc,ctx,& iter_data);
  #line 1118 
  if ((int)iter_data.has_hw_macaddr != 0) 
                                          #line 1119 
                                          memcpy((void *)(& common->macaddr),(void *)(& iter_data.hw_macaddr),6UL);
  #line 1121 
  memcpy((void *)(& common->bssidmask),(void *)(& iter_data.mask),6UL);
  #line 1122 
  ath_hw_setbssidmask(common);
  #line 1124 
  if (iter_data.naps > 0) {
    #line 1125 
    ath9k_hw_set_tsfadjust(ah,(_Bool)1);
    #line 1126 
    ah->opmode = NL80211_IFTYPE_AP;
  }
  else {
    #line 1128 
    ath9k_hw_set_tsfadjust(ah,(_Bool)0);
    #line 1129 
    if ((int)iter_data.beacons != 0) 
                                     #line 1130 
                                     ath9k_beacon_ensure_primary_slot(sc);
    #line 1132 
    if (iter_data.nmeshes != 0) 
                                #line 1133 
                                ah->opmode = NL80211_IFTYPE_MESH_POINT;
    else 
      #line 1134 
      if (iter_data.nocbs != 0) 
                                #line 1135 
                                ah->opmode = NL80211_IFTYPE_OCB;
      else 
        #line 1136 
        if (iter_data.nwds != 0) 
                                 #line 1137 
                                 ah->opmode = NL80211_IFTYPE_AP;
        else 
          #line 1138 
          if (iter_data.nadhocs != 0) 
                                      #line 1139 
                                      ah->opmode = NL80211_IFTYPE_ADHOC; else 
                                                                    #line 1141 
                                                                    ah->opmode = NL80211_IFTYPE_STATION;
  }
  #line 1144 
  ath9k_hw_setopmode(ah);
  #line 1146 
  ctx->switch_after_beacon = (_Bool)0;
  #line 1147 
  if ((iter_data.nstations + iter_data.nadhocs) + iter_data.nmeshes > 0) 
    #line 1148 
    ah->imask = (enum ath9k_int)((unsigned int)ah->imask | 67108864U);
  else {
    #line 1150 
    ah->imask = (enum ath9k_int)((unsigned int)ah->imask & 4227858431U);
    #line 1151 
    if (iter_data.naps == 1 && (int)iter_data.beacons != 0) 
                                                            #line 1152 
                                                            ctx->switch_after_beacon = (_Bool)1;
  }
  #line 1155 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_STATION) {
    #line 1156 
    bool changed = (_Bool)(iter_data.primary_sta != ctx->primary_sta);
    #line 1158 
    if (iter_data.primary_sta != (struct ieee80211_vif *)0) {
      #line 1159 
      iter_data.primary_beacon_vif = iter_data.primary_sta;
      #line 1160 
      iter_data.beacons = (_Bool)1;
      #line 1161 
      ath9k_set_assoc_state(sc,iter_data.primary_sta,(_Bool)((bool)((int)changed) != 0));
      #line 1163 
      ctx->primary_sta = iter_data.primary_sta;
    }
    else {
      #line 1165 
      ctx->primary_sta = (struct ieee80211_vif *)0;
      #line 1166 
      eth_zero_addr((u8 *)(& common->curbssid));
      #line 1167 
      common->curaid = (unsigned short)0U;
      #line 1168 
      ath9k_hw_write_associd(sc->sc_ah);
      #line 1169 
      if ((int)ath9k_hw_mci_is_enabled(sc->sc_ah) != 0) 
                                                        #line 1170 
                                                        ath9k_mci_update_wlan_channels(sc,(_Bool)1);
    }
  }
  #line 1173 
  sc->nbcnvifs = (short)iter_data.nbcnvifs;
  #line 1174 
  ath9k_beacon_config(sc,iter_data.primary_beacon_vif,(_Bool)((bool)((int)iter_data.beacons) != 0));
  #line 1176 
  ath9k_hw_set_interrupts(ah);
  #line 1178 
  if (ah->slottime != (unsigned int)iter_data.slottime) {
    #line 1179 
    ah->slottime = (unsigned int)iter_data.slottime;
    #line 1180 
    ath9k_hw_init_global_settings(ah);
  }
  #line 1183 
  if (iter_data.primary_sta != (struct ieee80211_vif *)0) 
                                                          #line 1184 
                                                          cif_set_bit_0(3L,& common->op_flags); else 
                                                                    #line 1186 
                                                                    cif_clear_bit_0(3L,& common->op_flags);
  #line 1188 
  if ((common->debug_mask & 512) != 0) 
                                       #line 1188 
                                       ath_printk((char *)"\001",common,(char *)"macaddr: %pM, bssid: %pM, bssidmask: %pM\n",(u8 *)(& common->macaddr),(u8 *)(& common->curbssid),(u8 *)(& common->bssidmask));
  #line 1192 
  ath9k_ps_restore(sc);
  #line 1193 
  return;
}

#line 1195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_tpc_vif_iter(void *data, u8 *mac, struct ieee80211_vif *vif)
{
  #line 1197 
  int *power = (int *)data;
  #line 1199 
  if (*power < vif->bss_conf.txpower) 
                                      #line 1200 
                                      *power = vif->bss_conf.txpower;
  #line 1201 
  return;
}

#line 1204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath9k_set_txpower(struct ath_softc *sc, struct ieee80211_vif *vif)
{
  #line 1206 
  int power;
  #line 1207 
  struct ath_hw *ah = sc->sc_ah;
  #line 1208 
  struct ath_regulatory *reg = ath9k_hw_regulatory(ah);
  #line 1210 
  ath9k_ps_wakeup(sc);
  #line 1211 
  if ((int)ah->tpc_enabled != 0) {
    #line 1212 
    if (vif != (struct ieee80211_vif *)0) 
                                          #line 1212 
                                          power = vif->bss_conf.txpower; else 
                                                                    #line 1212 
                                                                    power = -1;
    #line 1213 
    ieee80211_iterate_active_interfaces_atomic(sc->hw,1U,& ath9k_tpc_vif_iter,(void *)(& power));
    #line 1216 
    if (power == -1) 
                     #line 1217 
                     power = (sc->hw)->conf.power_level;
  }
  else 
       #line 1219 
       power = (sc->hw)->conf.power_level;
  #line 1221 
  (sc->cur_chan)->txpower = (unsigned short)((unsigned int)((unsigned short)power) * 2U);
  #line 1222 
  ath9k_hw_set_txpowerlimit(ah,(unsigned int)(sc->cur_chan)->txpower,(_Bool)0);
  #line 1223 
  (sc->cur_chan)->cur_txpower = reg->max_power_level;
  #line 1224 
  ath9k_ps_restore(sc);
  #line 1225 
  return;
}

#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_assign_hw_queues(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 1230 
  int i;
  #line 1232 
  if (! ath9k_is_chanctx_enabled()) 
                                    #line 1233 
                                    return;
  #line 1235 
  i = 0;
  #line 1235 
  while (i <= 3) {
    #line 1236 
    vif->hw_queue[i] = (unsigned char)i;
    #line 1235 
    i ++;
  }
  #line 1238 
  if (vif->type == (unsigned int)NL80211_IFTYPE_AP || vif->type == (unsigned int)NL80211_IFTYPE_MESH_POINT) 
    #line 1240 
    vif->cab_queue = (unsigned char)((unsigned int)((unsigned char)hw->queues) + 254U); else 
                                                                    #line 1242 
                                                                    vif->cab_queue = (unsigned char)255U;
  #line 1243 
  return;
}

#line 1245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_add_interface(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 1248 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1249 
  struct ath_hw *ah = sc->sc_ah;
  #line 1250 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 1251 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 1252 
  struct ath_node *an = & avp->mcast_node;
  #line 1254 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 1256 
  if ((int)(sc->cur_chan)->nvifs > 0) {
    #line 1257 
    cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
    #line 1258 
    return -95;
  }
  #line 1260 
  sc->tx99_vif = vif;
  #line 1263 
  if ((common->debug_mask & 512) != 0) 
                                       #line 1263 
                                       ath_printk((char *)"\001",common,(char *)"Attach a VIF of type: %d\n",(unsigned int)vif->type);
  #line 1264 
  (sc->cur_chan)->nvifs = (short)((int)(sc->cur_chan)->nvifs + 1);
  #line 1266 
  if (vif->type == (unsigned int)NL80211_IFTYPE_STATION) {
    #line 1266 
    if ((int)ath9k_is_chanctx_enabled() != 0) 
                                              #line 1267 
                                              vif->driver_flags |= 8U;
  }
  #line 1269 
  if ((int)ath9k_uses_beacons((int)vif->type) != 0) 
                                                    #line 1270 
                                                    ath9k_beacon_assign_slot(sc,vif);
  #line 1272 
  avp->vif = vif;
  #line 1273 
  if (! ath9k_is_chanctx_enabled()) {
    #line 1274 
    avp->chanctx = sc->cur_chan;
    #line 1275 
    list_add_tail_0(& avp->list,& (avp->chanctx)->vifs);
  }
  #line 1278 
  ath9k_calculate_summary_state(sc,avp->chanctx);
  #line 1280 
  ath9k_assign_hw_queues(hw,vif);
  #line 1282 
  ath9k_set_txpower(sc,vif);
  #line 1284 
  an->sc = sc;
  #line 1285 
  an->sta = (struct ieee80211_sta *)0;
  #line 1286 
  an->vif = vif;
  #line 1287 
  an->no_ps_filter = (_Bool)1;
  #line 1288 
  ath_tx_node_init(sc,an);
  #line 1290 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 1291 
  return 0;
}

#line 1294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_change_interface(struct ieee80211_hw *hw, struct ieee80211_vif *vif, enum nl80211_iftype new_type, bool p2p)
{
  #line 1299 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1300 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1301 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 1303 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 1306 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 1307 
  return -95;
  #line 1310 
  if ((common->debug_mask & 512) != 0) 
                                       #line 1310 
                                       ath_printk((char *)"\001",common,(char *)"Change Interface\n");
  #line 1312 
  if ((int)ath9k_uses_beacons((int)vif->type) != 0) 
                                                    #line 1313 
                                                    ath9k_beacon_remove_slot(sc,vif);
  #line 1315 
  vif->type = new_type;
  #line 1316 
  vif->p2p = p2p;
  #line 1318 
  if ((int)ath9k_uses_beacons((int)vif->type) != 0) 
                                                    #line 1319 
                                                    ath9k_beacon_assign_slot(sc,vif);
  #line 1321 
  ath9k_assign_hw_queues(hw,vif);
  #line 1322 
  ath9k_calculate_summary_state(sc,avp->chanctx);
  #line 1324 
  ath9k_set_txpower(sc,vif);
  #line 1326 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 1327 
  return 0;
}

#line 1330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_remove_interface(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 1333 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1334 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1335 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 1337 
  if ((common->debug_mask & 512) != 0) 
                                       #line 1337 
                                       ath_printk((char *)"\001",common,(char *)"Detach Interface\n");
  #line 1339 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 1341 
  ath9k_p2p_remove_vif(sc,vif);
  #line 1343 
  (sc->cur_chan)->nvifs = (short)((int)(sc->cur_chan)->nvifs - 1);
  #line 1344 
  sc->tx99_vif = (struct ieee80211_vif *)0;
  #line 1345 
  if (! ath9k_is_chanctx_enabled()) 
                                    #line 1346 
                                    list_del_0(& avp->list);
  #line 1348 
  if ((int)ath9k_uses_beacons((int)vif->type) != 0) 
                                                    #line 1349 
                                                    ath9k_beacon_remove_slot(sc,vif);
  #line 1351 
  ath_tx_node_cleanup(sc,& avp->mcast_node);
  #line 1353 
  ath9k_calculate_summary_state(sc,avp->chanctx);
  #line 1355 
  ath9k_set_txpower(sc,(struct ieee80211_vif *)0);
  #line 1357 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 1358 
  return;
}

#line 1360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_enable_ps(struct ath_softc *sc)
{
  #line 1362 
  struct ath_hw *ah = sc->sc_ah;
  #line 1363 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 1366 
  return;
  #line 1368 
  sc->ps_enabled = (_Bool)1;
  #line 1369 
  if ((ah->caps.hw_caps & 4U) == 0U) {
    #line 1370 
    if (((unsigned int)ah->imask & 256U) == 0U) {
      #line 1371 
      ah->imask = (enum ath9k_int)((unsigned int)ah->imask | 256U);
      #line 1372 
      ath9k_hw_set_interrupts(ah);
    }
    #line 1374 
    ath9k_hw_setrxabort(ah,(_Bool)1);
  }
  #line 1376 
  if ((common->debug_mask & 2048) != 0) 
                                        #line 1376 
                                        ath_printk((char *)"\001",common,(char *)"PowerSave enabled\n");
}

#line 1379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_disable_ps(struct ath_softc *sc)
{
  #line 1381 
  struct ath_hw *ah = sc->sc_ah;
  #line 1382 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 1385 
  return;
  #line 1387 
  sc->ps_enabled = (_Bool)0;
  #line 1388 
  ath9k_hw_setpower(ah,(enum ath9k_power_mode)ATH9K_PM_AWAKE);
  #line 1389 
  if ((ah->caps.hw_caps & 4U) == 0U) {
    #line 1390 
    ath9k_hw_setrxabort(ah,(_Bool)0);
    #line 1391 
    sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags & 65520U);
    #line 1395 
    if (((unsigned int)ah->imask & 256U) != 0U) {
      #line 1396 
      ah->imask = (enum ath9k_int)((unsigned int)ah->imask & 4294967039U);
      #line 1397 
      ath9k_hw_set_interrupts(ah);
    }
  }
  #line 1400 
  if ((common->debug_mask & 2048) != 0) 
                                        #line 1400 
                                        ath_printk((char *)"\001",common,(char *)"PowerSave disabled\n");
}

#line 1403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_config(struct ieee80211_hw *hw, u32 changed)
{
  #line 1405 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1406 
  struct ath_hw *ah = sc->sc_ah;
  #line 1407 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 1408 
  struct ieee80211_conf *conf = & hw->conf;
  #line 1409 
  struct ath_chanctx *ctx = sc->cur_chan;
  #line 1411 
  ath9k_ps_wakeup(sc);
  #line 1412 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 1414 
  if ((changed & 256U) != 0U) {
    #line 1415 
    sc->ps_idle = (_Bool)((conf->flags & 4U) != 0U);
    #line 1416 
    if ((int)sc->ps_idle != 0) {
      #line 1417 
      ath_cancel_work(sc);
      #line 1418 
      ath9k_stop_btcoex(sc);
    }
    else {
      #line 1420 
      ath9k_start_btcoex(sc);
      #line 1425 
      ath_chanctx_set_channel(sc,ctx,& ctx->chandef);
    }
  }
  #line 1435 
  if ((changed & 16U) != 0U) {
    #line 1436 
    unsigned long flags;
    #line 1437 
    cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock);
    #line 1438 
    if ((conf->flags & 2U) != 0U) 
                                  #line 1439 
                                  ath9k_enable_ps(sc); else 
                                                            #line 1441 
                                                            ath9k_disable_ps(sc);
    #line 1442 
    cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_1(& sc->sc_pm_lock,flags);
  }
  #line 1445 
  if ((changed & 8U) != 0U) 
    #line 1446 
    if ((conf->flags & 1U) != 0U) {
      #line 1447 
      if ((common->debug_mask & 512) != 0) 
                                           #line 1447 
                                           ath_printk((char *)"\001",common,(char *)"Monitor mode is enabled\n");
      #line 1448 
      (sc->sc_ah)->is_monitoring = (_Bool)1;
    }
    else {
      #line 1450 
      if ((common->debug_mask & 512) != 0) 
                                           #line 1450 
                                           ath_printk((char *)"\001",common,(char *)"Monitor mode is disabled\n");
      #line 1451 
      (sc->sc_ah)->is_monitoring = (_Bool)0;
    }
  #line 1455 
  if (! ath9k_is_chanctx_enabled()) 
    #line 1455 
    if ((changed & 64U) != 0U) {
      #line 1456 
      ctx->offchannel = (_Bool)((conf->flags & 8U) != 0U);
      #line 1457 
      ath_chanctx_set_channel(sc,ctx,& hw->conf.chandef);
    }
  #line 1460 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 1461 
  ath9k_ps_restore(sc);
  #line 1463 
  return 0;
}

#line 1476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_configure_filter(struct ieee80211_hw *hw, unsigned int changed_flags, unsigned int *total_flags, u64 multicast)
{
  #line 1482 
  struct ath_chanctx *ctx;
  #line 1483 
  u32 rfilt;
  #line 1481 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1485 
  changed_flags &= 502U;
  #line 1486 
  *total_flags &= 502U;
  #line 1488 
  cif_spin_lock_bh_chan_lock_of_ath_softc_0(& sc->chan_lock);
  #line 1489 
  ctx = & sc->chanctx[0];
  #line 1489 
  while (& sc->chanctx[1UL] >= ctx) {
    #line 1490 
    ctx->rxfilter = *total_flags;
    #line 1489 
    ctx ++;
  }
  #line 1492 
  sc->offchannel.chan.rxfilter = *total_flags;
  #line 1494 
  cif_spin_unlock_bh_chan_lock_of_ath_softc_0(& sc->chan_lock);
  #line 1496 
  ath9k_ps_wakeup(sc);
  #line 1497 
  rfilt = ath_calcrxfilter(sc);
  #line 1498 
  ath9k_hw_setrxfilter(sc->sc_ah,rfilt);
  #line 1499 
  ath9k_ps_restore(sc);
  #line 1501 
  ;
  #line 1501 
  if ((ath9k_hw_common(sc->sc_ah)->debug_mask & 512) != 0) {
    #line 1501 
    ;
    #line 1501 
    ath_printk((char *)"\001",ath9k_hw_common(sc->sc_ah),(char *)"Set HW RX filter: 0x%x\n",rfilt);
  }
  #line 1502 
  return;
}

#line 1505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_sta_add(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_sta *sta)
{
  #line 1513 
  int key;
  #line 1509 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1510 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1511 
  struct ath_node *an = (struct ath_node *)(& sta->drv_priv);
  #line 1512 
  struct ieee80211_key_conf ps_key = {.tx_pn = {.counter = 0LL}, .cipher = 0U, .icv_len = (unsigned char)0, .iv_len = (unsigned char)0, .hw_key_idx = (unsigned char)0, .keyidx = (signed char)0, .flags = (unsigned short)0, .keylen = (unsigned char)0, .key = {}};
  #line 1515 
  ath_node_attach(sc,sta,vif);
  #line 1517 
  if ((unsigned int)vif->type + 4294967293U > 1U) 
                                                  #line 1519 
                                                  return 0;
  #line 1521 
  key = ath_key_config(common,vif,sta,& ps_key);
  #line 1522 
  if (key > 0) {
    #line 1523 
    an->ps_key = (signed char)key;
    #line 1524 
    an->key_idx[0] = (unsigned char)key;
  }
  #line 1527 
  return 0;
}

#line 1530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_del_ps_key(struct ath_softc *sc, struct ieee80211_vif *vif, struct ieee80211_sta *sta)
{
  #line 1534 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1535 
  struct ath_node *an = (struct ath_node *)(& sta->drv_priv);
  #line 1536 
  struct ieee80211_key_conf ps_key = {.tx_pn = {.counter = 0LL}, .cipher = 0U, .icv_len = (unsigned char)0, .iv_len = (unsigned char)0, .hw_key_idx = (unsigned char)an->ps_key, .keyidx = (signed char)0, .flags = (unsigned short)0, .keylen = (unsigned char)0, .key = {}};
  #line 1538 
  if ((int)an->ps_key == 0) 
                            #line 1539 
                            return;
  #line 1541 
  ath_key_delete(common,& ps_key);
  #line 1542 
  an->ps_key = (signed char)0;
  #line 1543 
  an->key_idx[0] = (unsigned char)0U;
  #line 1544 
  return;
}

#line 1546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_sta_remove(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_sta *sta)
{
  #line 1550 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1552 
  ath9k_del_ps_key(sc,vif,sta);
  #line 1553 
  ath_node_detach(sc,sta);
  #line 1555 
  return 0;
}

#line 1558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_sta_state(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_sta *sta, enum ieee80211_sta_state old_state, enum ieee80211_sta_state new_state)
{
  #line 1564 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1565 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1566 
  int ret = 0;
  #line 1568 
  if (old_state == (unsigned int)IEEE80211_STA_NOTEXIST && new_state == (unsigned int)IEEE80211_STA_NONE) {
    #line 1570 
    ret = ath9k_sta_add(hw,vif,sta);
    #line 1571 
    if ((common->debug_mask & 512) != 0) 
                                         #line 1571 
                                         ath_printk((char *)"\001",common,(char *)"Add station: %pM\n",(u8 *)(& sta->addr));
  }
  else 
    #line 1573 
    if (old_state == (unsigned int)IEEE80211_STA_NONE && new_state == (unsigned int)IEEE80211_STA_NOTEXIST) {
      #line 1575 
      ret = ath9k_sta_remove(hw,vif,sta);
      #line 1576 
      if ((common->debug_mask & 512) != 0) 
                                           #line 1576 
                                           ath_printk((char *)"\001",common,(char *)"Remove station: %pM\n",(u8 *)(& sta->addr));
    }
  #line 1580 
  if ((int)ath9k_is_chanctx_enabled() != 0) 
    #line 1581 
    if (vif->type == (unsigned int)NL80211_IFTYPE_STATION) 
      #line 1582 
      if (old_state == (unsigned int)IEEE80211_STA_ASSOC && new_state == (unsigned int)IEEE80211_STA_AUTHORIZED) 
        #line 1584 
        ath_chanctx_event(sc,vif,(enum ath_chanctx_event)ATH_CHANCTX_EVENT_AUTHORIZED);
  #line 1589 
  return ret;
}

#line 1592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_sta_set_tx_filter(struct ath_hw *ah, struct ath_node *an, bool set)
{
  #line 1596 
  int i;
  #line 1598 
  i = 0;
  #line 1598 
  while ((unsigned int)i <= 3U) {
    #line 1599 
    if ((unsigned int)an->key_idx[i] == 0U) 
                                            #line 1600 
                                            goto __Cont;
    #line 1601 
    ath9k_hw_set_tx_filter(ah,(unsigned char)((int)an->key_idx[i]),(_Bool)((bool)((int)set) != 0));
    #line 1598 
    __Cont: 
            #line 1598 
    i ++;
  }
  #line 1603 
  return;
}

#line 1605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_sta_notify(struct ieee80211_hw *hw, struct ieee80211_vif *vif, enum sta_notify_cmd cmd, struct ieee80211_sta *sta)
{
  #line 1610 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1611 
  struct ath_node *an = (struct ath_node *)(& sta->drv_priv);
  #line 1613 
  switch ((unsigned int)cmd) {
    #line 1614 
    case (unsigned int)0: 
                          #line 1614 
    ;
    #line 1615 
    an->sleeping = (_Bool)1;
    #line 1616 
    ath_tx_aggr_sleep(sta,sc,an);
    #line 1617 
    ath9k_sta_set_tx_filter(sc->sc_ah,an,(_Bool)1);
    #line 1618 
    break;
    #line 1619 
    case (unsigned int)1: 
                          #line 1619 
    ;
    #line 1620 
    ath9k_sta_set_tx_filter(sc->sc_ah,an,(_Bool)0);
    #line 1621 
    an->sleeping = (_Bool)0;
    #line 1622 
    ath_tx_aggr_wakeup(sc,an);
    #line 1623 
    break;
  }
  #line 1625 
  return;
}

#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_conf_tx(struct ieee80211_hw *hw, struct ieee80211_vif *vif, u16 queue, struct ieee80211_tx_queue_params *params)
{
  #line 1633 
  struct ath_txq *txq;
  #line 1634 
  struct ath9k_tx_queue_info qi;
  #line 1631 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1632 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1635 
  int ret = 0;
  #line 1637 
  if ((unsigned int)queue > 3U) 
                                #line 1638 
                                return 0;
  #line 1640 
  txq = sc->tx.txq_map[(int)queue];
  #line 1642 
  ath9k_ps_wakeup(sc);
  #line 1643 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 1645 
  memset((void *)(& qi),0,60UL);
  #line 1647 
  qi.tqi_aifs = (unsigned int)params->aifs;
  #line 1648 
  qi.tqi_cwmin = (unsigned int)params->cw_min;
  #line 1649 
  qi.tqi_cwmax = (unsigned int)params->cw_max;
  #line 1650 
  qi.tqi_burstTime = (unsigned int)((int)params->txop * 32);
  #line 1652 
  if ((common->debug_mask & 512) != 0) 
                                       #line 1652 
                                       ath_printk((char *)"\001",common,(char *)"Configure tx [queue/halq] [%d/%d], aifs: %d, cw_min: %d, cw_max: %d, txop: %d\n",(int)queue,txq->axq_qnum,(int)params->aifs,(int)params->cw_min,(int)params->cw_max,(int)params->txop);
  #line 1657 
  ath_update_max_aggr_framelen(sc,(int)queue,(int)qi.tqi_burstTime);
  #line 1658 
  ret = ath_txq_update(sc,(int)txq->axq_qnum,& qi);
  #line 1659 
  if (ret != 0) 
                #line 1660 
                ath_printk((char *)"\001",common,(char *)"TXQ Update failed\n");
  #line 1662 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 1663 
  ath9k_ps_restore(sc);
  #line 1665 
  return ret;
}

#line 1668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_set_key(struct ieee80211_hw *hw, enum set_key_cmd cmd, struct ieee80211_vif *vif, struct ieee80211_sta *sta, struct ieee80211_key_conf *key)
{
  #line 1677 
  int i;
  #line 1674 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1675 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1676 
  struct ath_node *an = (struct ath_node *)0;
  #line 1677 
  int ret = 0;
  #line 1679 
  if (ath9k_modparam_nohwcrypt != 0) 
                                     #line 1680 
                                     return -28;
  #line 1682 
  if (((vif->type == (unsigned int)NL80211_IFTYPE_ADHOC || vif->type == (unsigned int)NL80211_IFTYPE_MESH_POINT) && (key->cipher == 1027074U || key->cipher == 1027076U)) && ((int)key->flags & 8) == 0) 
    #line 1694 
    return -95;
  #line 1697 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 1698 
  ath9k_ps_wakeup(sc);
  #line 1699 
  if ((common->debug_mask & 512) != 0) 
                                       #line 1699 
                                       ath_printk((char *)"\001",common,(char *)"Set HW Key %d\n",(unsigned int)cmd);
  #line 1700 
  if (sta != (struct ieee80211_sta *)0) 
                                        #line 1701 
                                        an = (struct ath_node *)(& sta->drv_priv);
  #line 1703 
  switch ((unsigned int)cmd) {
    #line 1704 
    case (unsigned int)0: 
                          #line 1704 
    ;
    #line 1705 
    if (sta != (struct ieee80211_sta *)0) 
                                          #line 1706 
                                          ath9k_del_ps_key(sc,vif,sta);
    #line 1708 
    key->hw_key_idx = (unsigned char)0U;
    #line 1709 
    ret = ath_key_config(common,vif,sta,key);
    #line 1710 
    if (ret >= 0) {
      #line 1711 
      key->hw_key_idx = (unsigned char)ret;
      #line 1713 
      key->flags = (unsigned short)((unsigned int)key->flags | 2U);
      #line 1714 
      if (key->cipher == 1027074U) 
                                   #line 1715 
                                   key->flags = (unsigned short)((unsigned int)key->flags | 4U);
      #line 1716 
      if ((int)(sc->sc_ah)->sw_mgmt_crypto_tx != 0 && key->cipher == 1027076U) 
        #line 1718 
        key->flags = (unsigned short)((unsigned int)key->flags | 16U);
      #line 1719 
      ret = 0;
    }
    #line 1721 
    if (an != (struct ath_node *)0 && (unsigned int)key->hw_key_idx != 0U) {
      #line 1722 
      i = 0;
      #line 1722 
      while ((unsigned int)i <= 3U) {
        #line 1723 
        if ((unsigned int)an->key_idx[i] != 0U) 
                                                #line 1724 
                                                goto __Cont;
        #line 1725 
        an->key_idx[i] = key->hw_key_idx;
        #line 1726 
        break;
        #line 1722 
        __Cont: 
                #line 1722 
        i ++;
      }
      {
        #line 1728 
        int __ret_warn_on = i == 4;
        #line 1728 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 1729 
          ldv_inline_asm();
          #line 1730 
          ldv_inline_asm();
        }
        #line 1728 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 1730 
    break;
    #line 1731 
    case (unsigned int)1: 
                          #line 1731 
    ;
    #line 1732 
    ath_key_delete(common,key);
    #line 1733 
    if (an != (struct ath_node *)0) {
      #line 1734 
      i = 0;
      #line 1734 
      while ((unsigned int)i <= 3U) {
        #line 1735 
        if ((int)an->key_idx[i] != (int)key->hw_key_idx) 
                                                         #line 1736 
                                                         goto __Cont_0;
        #line 1737 
        an->key_idx[i] = (unsigned char)0U;
        #line 1738 
        break;
        #line 1734 
        __Cont_0: 
                  #line 1734 
        i ++;
      }
    }
    #line 1741 
    key->hw_key_idx = (unsigned char)0U;
    #line 1742 
    break;
    #line 1743 
    default: 
             #line 1743 
    ;
    #line 1744 
    ret = -22;
  }
  #line 1747 
  ath9k_ps_restore(sc);
  #line 1748 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 1750 
  return ret;
}

#line 1753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_bss_info_changed(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_bss_conf *bss_conf, u32 changed)
{
  #line 1767 
  int slottime;
  #line 1763 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1764 
  struct ath_hw *ah = sc->sc_ah;
  #line 1765 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 1766 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 1769 
  ath9k_ps_wakeup(sc);
  #line 1770 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 1772 
  if ((changed & 1U) != 0U) {
    #line 1773 
    if ((common->debug_mask & 512) != 0) 
                                         #line 1773 
                                         ath_printk((char *)"\001",common,(char *)"BSSID %pM Changed ASSOC %d\n",bss_conf->bssid,(int)bss_conf->assoc);
    #line 1776 
    memcpy((void *)(& avp->bssid),(void *)bss_conf->bssid,6UL);
    #line 1777 
    avp->aid = bss_conf->aid;
    #line 1778 
    avp->assoc = bss_conf->assoc;
    #line 1780 
    ath9k_calculate_summary_state(sc,avp->chanctx);
  }
  #line 1783 
  if ((changed & 2048U) != 0U || (changed & 4194304U) != 0U) {
    #line 1785 
    memcpy((void *)(& common->curbssid),(void *)bss_conf->bssid,6UL);
    #line 1786 
    common->curaid = bss_conf->aid;
    #line 1787 
    ath9k_hw_write_associd(sc->sc_ah);
  }
  #line 1790 
  if (((changed & 512U) != 0U || (changed & 64U) != 0U) || (changed & 1048576U) != 0U) 
    #line 1793 
    ath9k_calculate_summary_state(sc,avp->chanctx);
  #line 1796 
  if (avp->chanctx == sc->cur_chan && (changed & 8U) != 0U) {
    #line 1798 
    if ((int)bss_conf->use_short_slot != 0) 
                                            #line 1799 
                                            slottime = 9; else 
                                                               #line 1801 
                                                               slottime = 20;
    #line 1803 
    if (vif->type == (unsigned int)NL80211_IFTYPE_AP) {
      #line 1809 
      sc->beacon.slottime = slottime;
      #line 1810 
      sc->beacon.updateslot = UPDATE;
    }
    else {
      #line 1812 
      ah->slottime = (unsigned int)slottime;
      #line 1813 
      ath9k_hw_init_global_settings(ah);
    }
  }
  #line 1817 
  if ((changed & 524288U) != 0U) 
                                 #line 1818 
                                 ath9k_p2p_bss_info_changed(sc,vif);
  #line 1820 
  if ((changed & 2561U) != 0U) 
                               #line 1821 
                               ath_check_ani(sc);
  #line 1823 
  if ((changed & 262144U) != 0U) {
    #line 1824 
    if ((common->debug_mask & 512) != 0) 
                                         #line 1824 
                                         ath_printk((char *)"\001",common,(char *)"vif %pM power %d dbm power_type %d\n",(u8 *)(& vif->addr),bss_conf->txpower,(unsigned int)bss_conf->txpower_type);
    #line 1826 
    ath9k_set_txpower(sc,vif);
  }
  #line 1829 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 1830 
  ath9k_ps_restore(sc);
  #line 1831 
  return;
}

#line 1835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static u64 ath9k_get_tsf(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 1839 
  u64 tsf;
  #line 1837 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1838 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 1841 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 1842 
  ath9k_ps_wakeup(sc);
  #line 1844 
  if (sc->cur_chan == avp->chanctx) 
                                    #line 1845 
                                    tsf = ath9k_hw_gettsf64(sc->sc_ah);
  else {
    #line 1847 
    tsf = (sc->cur_chan)->tsf_val + (unsigned long long)ath9k_hw_get_tsf_offset(& (sc->cur_chan)->tsf_ts,
                              (struct timespec64 *)0);
  }
  #line 1850 
  tsf = avp->tsf_adjust + tsf;
  #line 1851 
  ath9k_ps_restore(sc);
  #line 1852 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 1854 
  return tsf;
}

#line 1857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_set_tsf(struct ieee80211_hw *hw, struct ieee80211_vif *vif, u64 tsf)
{
  #line 1861 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1862 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 1864 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 1865 
  ath9k_ps_wakeup(sc);
  #line 1866 
  tsf -= avp->tsf_adjust;
  #line 1867 
  ktime_get_raw_ts64(& (avp->chanctx)->tsf_ts);
  #line 1868 
  if (sc->cur_chan == avp->chanctx) 
                                    #line 1869 
                                    ath9k_hw_settsf64(sc->sc_ah,tsf);
  #line 1870 
  (avp->chanctx)->tsf_val = tsf;
  #line 1871 
  ath9k_ps_restore(sc);
  #line 1872 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 1873 
  return;
}

#line 1875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_reset_tsf(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 1877 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1878 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 1880 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 1882 
  ath9k_ps_wakeup(sc);
  #line 1883 
  ktime_get_raw_ts64(& (avp->chanctx)->tsf_ts);
  #line 1884 
  if (sc->cur_chan == avp->chanctx) 
                                    #line 1885 
                                    ath9k_hw_reset_tsf(sc->sc_ah);
  #line 1886 
  (avp->chanctx)->tsf_val = 0ULL;
  #line 1887 
  ath9k_ps_restore(sc);
  #line 1889 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 1890 
  return;
}

#line 1892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_ampdu_action(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_ampdu_params *params)
{
  #line 1905 
  struct ath_atx_tid *atid;
  #line 1896 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1897 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1898 
  bool flush = (_Bool)0;
  #line 1899 
  int ret = 0;
  #line 1900 
  struct ieee80211_sta *sta = params->sta;
  #line 1901 
  struct ath_node *an = (struct ath_node *)(& sta->drv_priv);
  #line 1902 
  enum ieee80211_ampdu_mlme_action action = params->action;
  #line 1903 
  u16 tid = params->tid;
  #line 1904 
  u16 *ssn = & params->ssn;
  #line 1907 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 1909 
  switch ((unsigned int)action) {
    #line 1910 
    case (unsigned int)0: 
                          #line 1910 
    ;
    #line 1911 
    break;
    #line 1912 
    case (unsigned int)1: 
                          #line 1912 
    ;
    #line 1913 
    break;
    #line 1914 
    case (unsigned int)2: 
                          #line 1914 
    ;
    #line 1915 
    if ((int)ath9k_is_chanctx_enabled() != 0) {
      #line 1916 
      if ((int)test_bit(5L,& common->op_flags) != 0) {
        #line 1917 
        ret = -16;
        #line 1918 
        break;
      }
    }
    #line 1921 
    ath9k_ps_wakeup(sc);
    #line 1922 
    ret = ath_tx_aggr_start(sc,sta,(unsigned short)((int)tid),ssn);
    #line 1923 
    if (ret == 0) 
                  #line 1924 
                  ret = 1;
    #line 1925 
    ath9k_ps_restore(sc);
    #line 1926 
    break;
    #line 1927 
    case (unsigned int)4: 
                          #line 1927 
    ;
    #line 1928 
    case (unsigned int)5: 
                          #line 1928 
    ;
    #line 1929 
    flush = (_Bool)1;
    #line 1931 
    case (unsigned int)3: 
                          #line 1931 
    ;
    #line 1932 
    ath9k_ps_wakeup(sc);
    #line 1933 
    ath_tx_aggr_stop(sc,sta,(unsigned short)((int)tid));
    #line 1934 
    if (! flush) 
                 #line 1935 
                 ieee80211_stop_tx_ba_cb_irqsafe(vif,(u8 *)(& sta->addr),(unsigned short)((int)tid));
    #line 1936 
    ath9k_ps_restore(sc);
    #line 1937 
    break;
    #line 1938 
    case (unsigned int)6: 
                          #line 1938 
    ;
    #line 1939 
    atid = ath_node_to_tid(an,(unsigned char)((int)((unsigned char)tid)));
    #line 1940 
    atid->baw_size = (unsigned short)(8 << (int)sta->ht_cap.ampdu_factor);
    #line 1942 
    break;
    #line 1943 
    default: 
             #line 1943 
    ;
    #line 1944 
    ath_printk((char *)"\001",ath9k_hw_common(sc->sc_ah),(char *)"Unknown AMPDU action\n");
  }
  #line 1947 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 1949 
  return ret;
}

#line 1952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_get_survey(struct ieee80211_hw *hw, int idx, struct survey_info *survey)
{
  #line 1957 
  struct ieee80211_supported_band *sband;
  #line 1958 
  struct ieee80211_channel *chan;
  #line 1959 
  unsigned long flags;
  #line 1960 
  int pos;
  #line 1955 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1956 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1963 
  return -95;
  #line 1965 
  cif___ldv_spin_lock_cc_lock_of_ath_common_0(& common->cc_lock);
  #line 1966 
  if (idx == 0) 
                #line 1967 
                ath_update_survey_stats(sc);
  #line 1969 
  sband = (hw->wiphy)->bands[0];
  #line 1970 
  if (sband != (struct ieee80211_supported_band *)0 && sband->n_channels <= idx) {
    #line 1971 
    idx -= sband->n_channels;
    #line 1972 
    sband = (struct ieee80211_supported_band *)0;
  }
  #line 1975 
  if (sband == (struct ieee80211_supported_band *)0) 
                                                     #line 1976 
                                                     sband = (hw->wiphy)->bands[1];
  #line 1978 
  if (sband == (struct ieee80211_supported_band *)0 || sband->n_channels <= idx) {
    #line 1979 
    cif_spin_unlock_irqrestore_cc_lock_of_ath_common_0(& common->cc_lock,flags);
    #line 1980 
    return -2;
  }
  #line 1983 
  chan = sband->channels + (unsigned long)idx;
  #line 1984 
  pos = (int)chan->hw_value;
  #line 1985 
  memcpy((void *)survey,(void *)(& sc->survey[pos]),72UL);
  #line 1986 
  survey->channel = chan;
  #line 1987 
  cif_spin_unlock_irqrestore_cc_lock_of_ath_common_0(& common->cc_lock,flags);
  #line 1989 
  return 0;
}

#line 1992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_enable_dynack(struct ath_softc *sc)
{
  #line 1995 
  u32 rfilt;
  #line 1996 
  struct ath_hw *ah = sc->sc_ah;
  #line 1998 
  ath_dynack_reset(ah);
  #line 2000 
  ah->dynack.enabled = (_Bool)1;
  #line 2001 
  rfilt = ath_calcrxfilter(sc);
  #line 2002 
  ath9k_hw_setrxfilter(ah,rfilt);
  #line 2003 
  return;
}

#line 2006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_set_coverage_class(struct ieee80211_hw *hw, s16 coverage_class)
{
  #line 2009 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2010 
  struct ath_hw *ah = sc->sc_ah;
  #line 2013 
  return;
  #line 2015 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 2017 
  if ((int)coverage_class >= 0) {
    #line 2018 
    ah->coverage_class = (int)coverage_class;
    #line 2019 
    if ((int)ah->dynack.enabled != 0) {
      #line 2020 
      u32 rfilt;
      #line 2022 
      ah->dynack.enabled = (_Bool)0;
      #line 2023 
      rfilt = ath_calcrxfilter(sc);
      #line 2024 
      ath9k_hw_setrxfilter(ah,rfilt);
    }
    #line 2026 
    ath9k_ps_wakeup(sc);
    #line 2027 
    ath9k_hw_init_global_settings(ah);
    #line 2028 
    ath9k_ps_restore(sc);
  }
  else 
    #line 2029 
    if (! ah->dynack.enabled) 
                              #line 2030 
                              ath9k_enable_dynack(sc);
  #line 2033 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
}

#line 2036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static bool ath9k_has_tx_pending(struct ath_softc *sc, bool sw_pending)
{
  #line 2039 
  int i;
  #line 2039 
  int npend = 0;
  #line 2041 
  i = 0;
  #line 2041 
  while (i <= 9) {
    {
      #line 2042 
      if ((sc->tx.txqsetup & (unsigned int)(1 << i)) == 0U) 
                                                            #line 2043 
                                                            goto __Cont;
      #line 2045 
      npend = (int)ath9k_has_pending_frames(sc,& sc->tx.txq[i],
                               (_Bool)((bool)((int)sw_pending) != 0));
      #line 2047 
      if (npend != 0) 
                      #line 2048 
                      break;
    }
    #line 2041 
    __Cont: 
            #line 2041 
    i ++;
  }
  #line 2051 
  return (_Bool)(npend != 0);
}

#line 2054  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_flush(struct ieee80211_hw *hw, struct ieee80211_vif *vif, u32 queues, bool drop)
{
  #line 2057 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2058 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2060 
  if ((int)ath9k_is_chanctx_enabled() != 0) {
    #line 2061 
    if (! test_bit(6L,& common->op_flags)) 
                                           #line 2062 
                                           goto flush;
    #line 2074 
    __ath9k_flush(hw,queues,(_Bool)((bool)((int)drop) != 0),(_Bool)1,(_Bool)1);
    #line 2075 
    return;
  }
  #line 2077 
  flush: 
         #line 2077 
  ;
  #line 2078 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 2079 
  __ath9k_flush(hw,queues,(_Bool)((bool)((int)drop) != 0),(_Bool)1,(_Bool)0);
  #line 2080 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 2081 
  return;
}

#line 2083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void __ath9k_flush(struct ieee80211_hw *hw, u32 queues, bool drop, bool sw_pending, bool timeout_override)
{
  #line 2114 
  long __ret;
  #line 2089 
  int timeout;
  #line 2090 
  bool drain_txq;
  #line 2086 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2087 
  struct ath_hw *ah = sc->sc_ah;
  #line 2088 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 2092 
  cancel_delayed_work_sync(& sc->hw_check_work);
  #line 2094 
  if ((ah->ah_flags & 2U) != 0U) {
    #line 2095 
    if (common->debug_mask != 0) 
                                 #line 2095 
                                 ath_printk((char *)"\001",common,(char *)"Device has been unplugged!\n");
    #line 2096 
    return;
  }
  #line 2099 
  if ((int)test_bit(0L,& common->op_flags) != 0) {
    #line 2100 
    if (common->debug_mask != 0) 
                                 #line 2100 
                                 ath_printk((char *)"\001",common,(char *)"Device not present\n");
    #line 2101 
    return;
  }
  #line 2104 
  cif_spin_lock_bh_chan_lock_of_ath_softc_0(& sc->chan_lock);
  #line 2105 
  if ((int)timeout_override != 0) 
                                  #line 2106 
                                  timeout = 50; else 
                                                     #line 2108 
                                                     timeout = (sc->cur_chan)->flush_timeout;
  #line 2109 
  cif_spin_unlock_bh_chan_lock_of_ath_softc_0(& sc->chan_lock);
  #line 2111 
  if ((common->debug_mask & 262144) != 0) {
    #line 2111 
    ;
    #line 2111 
    ath_printk((char *)"\001",common,(char *)"Flush timeout: %d\n",jiffies_to_msecs((unsigned long)timeout));
  }
  #line 2114 
  __ret = (long)timeout;
  #line 2114 
  __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c",2114,0);
  {
    #line 2114 
    bool __cond_0;
    {
      #line 2114 
      int tmp_8;
      #line 2114 
      if ((int)ath9k_has_tx_pending(sc,(_Bool)((bool)((int)sw_pending) != 0)) != 0) 
        #line 2114 
        tmp_8 = 0; else 
                        #line 2114 
                        tmp_8 = 1;
      #line 2114 
      __cond_0 = (_Bool)(tmp_8 != 0);
      #line 2114 
      if ((int)__cond_0 != 0 && __ret == 0L) 
                                             #line 2114 
                                             __ret = 1L;
      }
    #line 2114 
    if ((((int)__cond_0 != 0 || __ret == 0L) != 0) == 0) {
      #line 2114 
      long __ret_0;
      {
        #line 2114 
        struct wait_queue_entry __wq_entry;
        #line 2114 
        __ret_0 = (long)timeout;
        #line 2114 
        init_wait_entry(& __wq_entry,0);
        #line 2114 
        while (1) {
          #line 2114 
          bool __cond;
          #line 2114 
          long __int = prepare_to_wait_event(& sc->tx_wait,& __wq_entry,2);
          {
            #line 2114 
            int tmp_4;
            #line 2114 
            if ((int)ath9k_has_tx_pending(sc,(_Bool)((bool)((int)sw_pending) != 0)) != 0) 
              #line 2114 
              tmp_4 = 0; else 
                              #line 2114 
                              tmp_4 = 1;
            #line 2114 
            __cond = (_Bool)(tmp_4 != 0);
            #line 2114 
            if ((int)__cond != 0 && __ret_0 == 0L) 
                                                   #line 2114 
                                                   __ret_0 = 1L;
            }
          #line 2114 
          if ((((int)__cond != 0 || __ret_0 == 0L) != 0) != 0) 
                                                               #line 2114 
                                                               break;
          #line 2114 
          __ret_0 = schedule_timeout(__ret_0);
        }
        #line 2114 
        finish_wait(& sc->tx_wait,& __wq_entry);
        #line 2114 
        __out_0: 
                 #line 2114 
        ;
        }
      #line 2114 
      __ret = __ret_0;
    }
  }
  #line 2114 
  if (__ret > 0L) 
                  #line 2116 
                  drop = (_Bool)0;
  #line 2118 
  if ((int)drop != 0) {
    #line 2119 
    ath9k_ps_wakeup(sc);
    #line 2120 
    cif_spin_lock_bh_sc_pcu_lock_of_ath_softc(& sc->sc_pcu_lock);
    #line 2121 
    drain_txq = ath_drain_all_txq(sc);
    #line 2122 
    cif_spin_unlock_bh_sc_pcu_lock_of_ath_softc(& sc->sc_pcu_lock);
    #line 2124 
    if (! drain_txq) 
                     #line 2125 
                     ath_reset(sc,(struct ath9k_channel *)0);
    #line 2127 
    ath9k_ps_restore(sc);
  }
  #line 2130 
  ieee80211_queue_delayed_work(hw,& sc->hw_check_work,1000UL);
  #line 2131 
  return;
}

#line 2134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static bool ath9k_tx_frames_pending(struct ieee80211_hw *hw)
{
  #line 2136 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2138 
  return ath9k_has_tx_pending(sc,(_Bool)1);
}

#line 2141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_tx_last_beacon(struct ieee80211_hw *hw)
{
  #line 2145 
  struct ieee80211_vif *vif;
  #line 2146 
  struct ath_vif *avp;
  #line 2147 
  struct ath_buf *bf;
  #line 2148 
  struct ath_tx_status ts;
  #line 2150 
  int status;
  #line 2143 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2144 
  struct ath_hw *ah = sc->sc_ah;
  #line 2149 
  bool edma = (_Bool)((ah->caps.hw_caps & 16U) != 0U);
  #line 2152 
  vif = sc->beacon.bslot[0];
  #line 2153 
  if (vif == (struct ieee80211_vif *)0) 
                                        #line 2154 
                                        return 0;
  #line 2156 
  if (! vif->bss_conf.enable_beacon) 
                                     #line 2157 
                                     return 0;
  #line 2159 
  avp = (struct ath_vif *)(& vif->drv_priv);
  #line 2161 
  if (! sc->beacon.tx_processed && ! edma) {
    #line 2162 
    tasklet_disable(& sc->bcon_tasklet);
    #line 2164 
    bf = avp->av_bcbuf;
    #line 2165 
    if (bf == (struct ath_buf *)0 || bf->bf_mpdu == (struct sk_buff *)0) 
      #line 2166 
      goto skip;
    #line 2168 
    status = ath9k_hw_txprocdesc(ah,bf->bf_desc,& ts);
    #line 2169 
    if (status == -115) 
                        #line 2170 
                        goto skip;
    #line 2172 
    sc->beacon.tx_processed = (_Bool)1;
    #line 2173 
    sc->beacon.tx_last = (_Bool)(((int)ts.ts_status & 95) == 0);
    #line 2175 
    skip: 
          #line 2175 
    ;
    #line 2176 
    tasklet_enable(& sc->bcon_tasklet);
  }
  #line 2179 
  return (int)sc->beacon.tx_last;
}

#line 2182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_get_stats(struct ieee80211_hw *hw, struct ieee80211_low_level_stats *stats)
{
  #line 2185 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2186 
  struct ath_hw *ah = sc->sc_ah;
  #line 2187 
  struct ath9k_mib_stats *mib_stats = & ah->stats.ast_mibstats;
  #line 2189 
  stats->dot11ACKFailureCount = mib_stats->ackrcv_bad;
  #line 2190 
  stats->dot11RTSFailureCount = mib_stats->rts_bad;
  #line 2191 
  stats->dot11FCSErrorCount = mib_stats->fcs_bad;
  #line 2192 
  stats->dot11RTSSuccessCount = mib_stats->rts_good;
  #line 2193 
  return 0;
}

#line 2196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static u32 fill_chainmask(u32 cap, u32 new)
{
  #line 2199 
  int i;
  #line 2198 
  u32 filled = 0U;
  #line 2201 
  i = 0;
  #line 2201 
  while (cap != 0U && new != 0U) {
    #line 2202 
    if (((unsigned long)cap & 1UL) == 0UL) 
                                           #line 2203 
                                           goto __Cont;
    #line 2205 
    if (((unsigned long)new & 1UL) != 0UL) 
                                           #line 2206 
                                           filled = (unsigned int)(1UL << i) | filled;
    #line 2208 
    new >>= 1;
    #line 2201 
    __Cont: 
            #line 2201 
    i ++;
    #line 2201 
    cap >>= 1;
  }
  #line 2211 
  return filled;
}

#line 2214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static bool validate_antenna_mask(struct ath_hw *ah, u32 val)
{
  #line 2216 
  if (ah->hw_version.macVersion > 447U) 
                                        #line 2217 
                                        return (_Bool)1;
  #line 2219 
  switch (val & 7U) {
    #line 2220 
    case (unsigned int)1: 
                          #line 2220 
    ;
    #line 2221 
    case (unsigned int)3: 
                          #line 2221 
    ;
    #line 2222 
    case (unsigned int)7: 
                          #line 2222 
    ;
    #line 2223 
    return (_Bool)1;
    #line 2224 
    case (unsigned int)2: 
                          #line 2224 
    ;
    #line 2225 
    return (_Bool)((unsigned int)ah->caps.rx_chainmask == 1U);
    #line 2226 
    default: 
             #line 2226 
    ;
    #line 2227 
    return (_Bool)0;
  }
}

#line 2231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_set_antenna(struct ieee80211_hw *hw, u32 tx_ant, u32 rx_ant)
{
  #line 2233 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2234 
  struct ath_hw *ah = sc->sc_ah;
  #line 2236 
  if ((unsigned int)ah->caps.rx_chainmask != 1U) 
                                                 #line 2237 
                                                 rx_ant |= tx_ant;
  #line 2239 
  if (validate_antenna_mask(ah,rx_ant)) {
    #line 2239 
    if (tx_ant == 0U) 
                      #line 2240 
                      return -22;
  }
  else 
       #line 2240 
       return -22;
  #line 2242 
  sc->ant_rx = (unsigned char)rx_ant;
  #line 2243 
  sc->ant_tx = (unsigned char)tx_ant;
  #line 2245 
  if ((unsigned int)ah->caps.rx_chainmask == 1U) 
                                                 #line 2246 
                                                 return 0;
  #line 2249 
  if (ah->hw_version.macVersion == 20U) 
                                        #line 2250 
                                        ah->rxchainmask = (unsigned char)7U;
  else {
    #line 2252 
    ah->rxchainmask = (unsigned char)fill_chainmask((unsigned int)ah->caps.rx_chainmask,rx_ant);
  }
  #line 2254 
  ah->txchainmask = (unsigned char)fill_chainmask((unsigned int)ah->caps.tx_chainmask,tx_ant);
  #line 2255 
  ath9k_cmn_reload_chainmask(ah);
  #line 2257 
  return 0;
}

#line 2260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_get_antenna(struct ieee80211_hw *hw, u32 *tx_ant, u32 *rx_ant)
{
  #line 2262 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2264 
  *tx_ant = (unsigned int)sc->ant_tx;
  #line 2265 
  *rx_ant = (unsigned int)sc->ant_rx;
  #line 2266 
  return 0;
}

#line 2269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_sw_scan_start(struct ieee80211_hw *hw, struct ieee80211_vif *vif, u8 *mac_addr)
{
  #line 2273 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2274 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2275 
  cif_set_bit_0(5L,& common->op_flags);
  #line 2276 
  return;
}

#line 2278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_sw_scan_complete(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 2281 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2282 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2283 
  cif_clear_bit_0(5L,& common->op_flags);
  #line 2284 
  return;
}

#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_cancel_pending_offchannel(struct ath_softc *sc)
{
  #line 2290 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2292 
  if (sc->offchannel.roc_vif != (struct ieee80211_vif *)0) {
    #line 2293 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 2293 
                                            ath_printk((char *)"\001",common,(char *)"%s: Aborting RoC\n",(char *)"ath9k_cancel_pending_offchannel");
    #line 2296 
    cif_del_timer_sync_0(& sc->offchannel.timer);
    #line 2297 
    if (sc->offchannel.state > (unsigned int)ATH_OFFCHANNEL_SUSPEND) 
      #line 2298 
      ath_roc_complete(sc,(enum ath_roc_complete_reason)ATH_ROC_COMPLETE_ABORT);
  }
  #line 2301 
  if ((int)test_bit(5L,& common->op_flags) != 0) {
    #line 2302 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 2302 
                                            ath_printk((char *)"\001",common,(char *)"%s: Aborting HW scan\n",(char *)"ath9k_cancel_pending_offchannel");
    #line 2305 
    cif_del_timer_sync_0(& sc->offchannel.timer);
    #line 2306 
    ath_scan_complete(sc,(_Bool)1);
  }
  #line 2308 
  return;
}

#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_scan_request *hw_req)
{
  #line 2320 
  int __ret_warn_on;
  #line 2313 
  struct cfg80211_scan_request *req = & hw_req->req;
  #line 2314 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2315 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2316 
  int ret = 0;
  #line 2318 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 2320 
  __ret_warn_on = sc->offchannel.scan_req != (struct cfg80211_scan_request *)0;
  #line 2320 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 2321 
    ldv_inline_asm();
    #line 2322 
    ldv_inline_asm();
  }
  #line 2320 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) {
    #line 2321 
    ret = -16;
    #line 2322 
    goto out;
  }
  #line 2325 
  ath9k_ps_wakeup(sc);
  #line 2326 
  cif_set_bit_0(5L,& common->op_flags);
  #line 2327 
  sc->offchannel.scan_vif = vif;
  #line 2328 
  sc->offchannel.scan_req = req;
  #line 2329 
  sc->offchannel.scan_idx = 0;
  #line 2331 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 2331 
                                          ath_printk((char *)"\001",common,(char *)"HW scan request received on vif: %pM\n",(u8 *)(& vif->addr));
  #line 2334 
  if (sc->offchannel.state == (unsigned int)ATH_OFFCHANNEL_IDLE) {
    #line 2335 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 2335 
                                            ath_printk((char *)"\001",common,(char *)"Starting HW scan\n");
    #line 2336 
    ath_offchannel_next(sc);
  }
  #line 2339 
  out: 
       #line 2339 
  ;
  #line 2340 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 2342 
  return ret;
}

#line 2345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_cancel_hw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 2348 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2349 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2351 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 2351 
                                          ath_printk((char *)"\001",common,(char *)"Cancel HW scan on vif: %pM\n",(u8 *)(& vif->addr));
  #line 2353 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 2354 
  cif_del_timer_sync_0(& sc->offchannel.timer);
  #line 2355 
  ath_scan_complete(sc,(_Bool)1);
  #line 2356 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 2357 
  return;
}

#line 2359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_channel *chan, int duration, enum ieee80211_roc_type type)
{
  #line 2370 
  int __ret_warn_on;
  #line 2364 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2365 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2366 
  int ret = 0;
  #line 2368 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 2370 
  __ret_warn_on = sc->offchannel.roc_vif != (struct ieee80211_vif *)0;
  #line 2370 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 2371 
    ldv_inline_asm();
    #line 2372 
    ldv_inline_asm();
  }
  #line 2370 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) {
    #line 2371 
    ret = -16;
    #line 2372 
    goto out;
  }
  #line 2375 
  ath9k_ps_wakeup(sc);
  #line 2376 
  sc->offchannel.roc_vif = vif;
  #line 2377 
  sc->offchannel.roc_chan = chan;
  #line 2378 
  sc->offchannel.roc_duration = duration;
  #line 2380 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 2380 
                                          ath_printk((char *)"\001",common,(char *)"RoC request on vif: %pM, type: %d duration: %d\n",(u8 *)(& vif->addr),(unsigned int)type,duration);
  #line 2384 
  if (sc->offchannel.state == (unsigned int)ATH_OFFCHANNEL_IDLE) {
    #line 2385 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 2385 
                                            ath_printk((char *)"\001",common,(char *)"Starting RoC period\n");
    #line 2386 
    ath_offchannel_next(sc);
  }
  #line 2389 
  out: 
       #line 2389 
  ;
  #line 2390 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 2392 
  return ret;
}

#line 2395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_cancel_remain_on_channel(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 2398 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2399 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2401 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 2403 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 2403 
                                          ath_printk((char *)"\001",common,(char *)"Cancel RoC\n");
  #line 2404 
  cif_del_timer_sync_0(& sc->offchannel.timer);
  #line 2406 
  if (sc->offchannel.roc_vif != (struct ieee80211_vif *)0) 
    #line 2407 
    if (sc->offchannel.state > (unsigned int)ATH_OFFCHANNEL_SUSPEND) 
      #line 2408 
      ath_roc_complete(sc,(enum ath_roc_complete_reason)ATH_ROC_COMPLETE_CANCEL);
  #line 2411 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 2413 
  return 0;
}

#line 2416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_add_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *conf)
{
  #line 2421 
  struct ath_chanctx *ctx;
  #line 2421 
  struct ath_chanctx **ptr;
  #line 2422 
  int pos;
  #line 2419 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2420 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2424 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 2426 
  ctx = & sc->chanctx[0];
  #line 2426 
  while (& sc->chanctx[1UL] >= ctx) {
    #line 2427 
    if ((int)ctx->assigned != 0) 
                                 #line 2428 
                                 goto __Cont;
    #line 2430 
    ptr = (struct ath_chanctx **)(& conf->drv_priv);
    #line 2431 
    *ptr = ctx;
    #line 2432 
    ctx->assigned = (_Bool)1;
    #line 2433 
    pos = (int)((ctx - & sc->chanctx[0]) / 1360L);
    #line 2434 
    ctx->hw_queue_base = pos * 4;
    #line 2436 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 2436 
                                            ath_printk((char *)"\001",common,(char *)"Add channel context: %d MHz\n",(conf->def.chan)->center_freq);
    #line 2440 
    ath_chanctx_set_channel(sc,ctx,& conf->def);
    #line 2442 
    cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
    #line 2443 
    return 0;
    #line 2426 
    __Cont: 
            #line 2426 
    ctx ++;
  }
  #line 2446 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 2447 
  return -28;
}

#line 2451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_remove_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *conf)
{
  #line 2454 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2455 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2456 
  struct ath_chanctx *ctx = ath_chanctx_get(conf);
  #line 2458 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 2460 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 2460 
                                          ath_printk((char *)"\001",common,(char *)"Remove channel context: %d MHz\n",(conf->def.chan)->center_freq);
  #line 2464 
  ctx->assigned = (_Bool)0;
  #line 2465 
  ctx->hw_queue_base = 0;
  #line 2466 
  ath_chanctx_event(sc,(struct ieee80211_vif *)0,(enum ath_chanctx_event)ATH_CHANCTX_EVENT_UNASSIGN);
  #line 2468 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 2469 
  return;
}

#line 2471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_change_chanctx(struct ieee80211_hw *hw, struct ieee80211_chanctx_conf *conf, u32 changed)
{
  #line 2475 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2476 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2477 
  struct ath_chanctx *ctx = ath_chanctx_get(conf);
  #line 2479 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 2480 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 2480 
                                          ath_printk((char *)"\001",common,(char *)"Change channel context: %d MHz\n",(conf->def.chan)->center_freq);
  #line 2483 
  ath_chanctx_set_channel(sc,ctx,& conf->def);
  #line 2484 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 2485 
  return;
}

#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_assign_vif_chanctx(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_chanctx_conf *conf)
{
  #line 2495 
  int i;
  #line 2491 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2492 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2493 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 2494 
  struct ath_chanctx *ctx = ath_chanctx_get(conf);
  #line 2497 
  ath9k_cancel_pending_offchannel(sc);
  #line 2499 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 2501 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 2501 
                                          ath_printk((char *)"\001",common,(char *)"Assign VIF (addr: %pM, type: %d, p2p: %d) to channel context: %d MHz\n",(u8 *)(& vif->addr),(unsigned int)vif->type,(int)vif->p2p,(conf->def.chan)->center_freq);
  #line 2506 
  avp->chanctx = ctx;
  #line 2507 
  ctx->nvifs_assigned = (short)((int)ctx->nvifs_assigned + 1);
  #line 2508 
  list_add_tail_0(& avp->list,& ctx->vifs);
  #line 2509 
  ath9k_calculate_summary_state(sc,ctx);
  #line 2510 
  i = 0;
  #line 2510 
  while (i <= 3) {
    #line 2511 
    vif->hw_queue[i] = (unsigned char)((int)((unsigned char)ctx->hw_queue_base) + (int)((unsigned char)i));
    #line 2510 
    i ++;
  }
  #line 2513 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 2515 
  return 0;
}

#line 2518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_unassign_vif_chanctx(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_chanctx_conf *conf)
{
  #line 2526 
  int ac;
  #line 2522 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2523 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2524 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 2525 
  struct ath_chanctx *ctx = ath_chanctx_get(conf);
  #line 2528 
  ath9k_cancel_pending_offchannel(sc);
  #line 2530 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 2532 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 2532 
                                          ath_printk((char *)"\001",common,(char *)"Remove VIF (addr: %pM, type: %d, p2p: %d) from channel context: %d MHz\n",(u8 *)(& vif->addr),(unsigned int)vif->type,(int)vif->p2p,(conf->def.chan)->center_freq);
  #line 2537 
  avp->chanctx = (struct ath_chanctx *)0;
  #line 2538 
  ctx->nvifs_assigned = (short)((int)ctx->nvifs_assigned - 1);
  #line 2539 
  list_del_0(& avp->list);
  #line 2540 
  ath9k_calculate_summary_state(sc,ctx);
  #line 2541 
  ac = 0;
  #line 2541 
  while (ac <= 3) {
    #line 2542 
    vif->hw_queue[ac] = (unsigned char)255U;
    #line 2541 
    ac ++;
  }
  #line 2544 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 2545 
  return;
}

#line 2547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static void ath9k_mgd_prepare_tx(struct ieee80211_hw *hw, struct ieee80211_vif *vif, u16 duration)
{
  #line 2554 
  struct ath_beacon_config *cur_conf;
  #line 2555 
  struct ath_chanctx *go_ctx;
  #line 2556 
  unsigned long timeout;
  #line 2558 
  u32 beacon_int;
  #line 2551 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2552 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2553 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 2557 
  bool changed = (_Bool)0;
  #line 2560 
  if (! test_bit(6L,& common->op_flags)) 
                                         #line 2561 
                                         return;
  #line 2563 
  if (avp->chanctx == (struct ath_chanctx *)0) 
                                               #line 2564 
                                               return;
  #line 2566 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 2568 
  cif_spin_lock_bh_chan_lock_of_ath_softc_0(& sc->chan_lock);
  #line 2569 
  if (sc->next_chan != (struct ath_chanctx *)0 || sc->cur_chan != avp->chanctx) 
    #line 2570 
    changed = (_Bool)1;
  #line 2571 
  cif_spin_unlock_bh_chan_lock_of_ath_softc_0(& sc->chan_lock);
  #line 2573 
  if (! changed) 
                 #line 2574 
                 goto out;
  #line 2576 
  ath9k_cancel_pending_offchannel(sc);
  #line 2578 
  go_ctx = ath_is_go_chanctx_present(sc);
  #line 2580 
  if (go_ctx != (struct ath_chanctx *)0) {
    #line 2585 
    cif_spin_lock_bh_chan_lock_of_ath_softc_0(& sc->chan_lock);
    #line 2586 
    sc->sched.mgd_prepare_tx = (_Bool)1;
    #line 2587 
    cur_conf = & go_ctx->beacon;
    #line 2588 
    beacon_int = (unsigned int)(cur_conf->beacon_interval << 10);
    #line 2589 
    cif_spin_unlock_bh_chan_lock_of_ath_softc_0(& sc->chan_lock);
    #line 2591 
    timeout = usecs_to_jiffies(beacon_int * 2U);
    #line 2592 
    __init_completion(& sc->go_beacon);
    #line 2594 
    cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
    #line 2596 
    if (wait_for_completion_timeout(& sc->go_beacon,timeout) == 0UL) {
      #line 2598 
      if ((common->debug_mask & 262144) != 0) 
                                              #line 2598 
                                              ath_printk((char *)"\001",common,(char *)"Failed to send new NoA\n");
      #line 2601 
      cif_spin_lock_bh_chan_lock_of_ath_softc_0(& sc->chan_lock);
      #line 2602 
      sc->sched.mgd_prepare_tx = (_Bool)0;
      #line 2603 
      cif_spin_unlock_bh_chan_lock_of_ath_softc_0(& sc->chan_lock);
    }
    #line 2606 
    cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  }
  #line 2609 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 2609 
                                          ath_printk((char *)"\001",common,(char *)"%s: Set chanctx state to FORCE_ACTIVE for vif: %pM\n",(char *)"ath9k_mgd_prepare_tx",(u8 *)(& vif->addr));
  #line 2613 
  cif_spin_lock_bh_chan_lock_of_ath_softc_0(& sc->chan_lock);
  #line 2614 
  sc->next_chan = avp->chanctx;
  #line 2615 
  sc->sched.state = ATH_CHANCTX_STATE_FORCE_ACTIVE;
  #line 2616 
  cif_spin_unlock_bh_chan_lock_of_ath_softc_0(& sc->chan_lock);
  #line 2618 
  ath_chanctx_set_next(sc,(_Bool)1);
  #line 2619 
  out: 
       #line 2619 
  ;
  #line 2620 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 2621 
  return;
}

#line 2623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
void ath9k_fill_chanctx_ops(void)
{
  #line 2625 
  if (! ath9k_is_chanctx_enabled()) 
                                    #line 2626 
                                    return;
  #line 2628 
  ath9k_ops.hw_scan = & ath9k_hw_scan;
  #line 2629 
  ath9k_ops.cancel_hw_scan = & ath9k_cancel_hw_scan;
  #line 2630 
  ath9k_ops.remain_on_channel = & ath9k_remain_on_channel;
  #line 2631 
  ath9k_ops.cancel_remain_on_channel = & ath9k_cancel_remain_on_channel;
  #line 2632 
  ath9k_ops.add_chanctx = & ath9k_add_chanctx;
  #line 2633 
  ath9k_ops.remove_chanctx = & ath9k_remove_chanctx;
  #line 2634 
  ath9k_ops.change_chanctx = & ath9k_change_chanctx;
  #line 2635 
  ath9k_ops.assign_vif_chanctx = & ath9k_assign_vif_chanctx;
  #line 2636 
  ath9k_ops.unassign_vif_chanctx = & ath9k_unassign_vif_chanctx;
  #line 2637 
  ath9k_ops.mgd_prepare_tx = & ath9k_mgd_prepare_tx;
  #line 2638 
  return;
}

#line 2642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
static int ath9k_get_txpower(struct ieee80211_hw *hw, struct ieee80211_vif *vif, int *dbm)
{
  #line 2645 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2646 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 2648 
  cif_mutex_lock_mutex_of_ath_softc(& sc->mutex);
  #line 2649 
  if (avp->chanctx != (struct ath_chanctx *)0) 
                                               #line 2650 
                                               *dbm = (int)(avp->chanctx)->cur_txpower; else 
                                                                    #line 2652 
                                                                    *dbm = (int)(sc->cur_chan)->cur_txpower;
  #line 2653 
  cif_mutex_unlock_mutex_of_ath_softc(& sc->mutex);
  #line 2655 
  *dbm /= 2;
  #line 2657 
  return 0;
}

#line 2660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/main.c"
struct ieee80211_ops ath9k_ops = {.tx = & ath9k_tx, .start = & ath9k_start, .stop = & ath9k_stop, .suspend = & ath9k_suspend, .resume = & ath9k_resume, .set_wakeup = & ath9k_set_wakeup, .add_interface = & ath9k_add_interface, .change_interface = & ath9k_change_interface, .remove_interface = & ath9k_remove_interface, .config = & ath9k_config, .bss_info_changed = & ath9k_bss_info_changed, .configure_filter = & ath9k_configure_filter, .set_key = & ath9k_set_key, .sw_scan_start = & ath9k_sw_scan_start, .sw_scan_complete = & ath9k_sw_scan_complete, .get_stats = & ath9k_get_stats, .sta_add_debugfs = & ath9k_sta_add_debugfs, .sta_notify = & ath9k_sta_notify, .sta_state = & ath9k_sta_state, .conf_tx = & ath9k_conf_tx, .get_tsf = & ath9k_get_tsf, .set_tsf = & ath9k_set_tsf, .reset_tsf = & ath9k_reset_tsf, .tx_last_beacon = & ath9k_tx_last_beacon, .ampdu_action = & ath9k_ampdu_action, .get_survey = & ath9k_get_survey, .rfkill_poll = & ath9k_rfkill_poll_state, .set_coverage_class = & ath9k_set_coverage_class, .flush = & ath9k_flush, .set_antenna = & ath9k_set_antenna, .get_antenna = & ath9k_get_antenna, .tx_frames_pending = & ath9k_tx_frames_pending, .release_buffered_frames = & ath9k_release_buffered_frames, .get_et_sset_count = & ath9k_get_et_sset_count, .get_et_stats = & ath9k_get_et_stats, .get_et_strings = & ath9k_get_et_strings, .get_txpower = & ath9k_get_txpower, .wake_tx_queue = & ath9k_wake_tx_queue};
#line 103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
#line 103 
void emg_tasklet_schedule(struct tasklet_struct *arg0);
#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_ath9k_add_interface(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 108 
  return ath9k_add_interface(arg0,arg1);
}

#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_ath9k_ampdu_action(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, struct ieee80211_ampdu_params *arg2)
{
  #line 113 
  return ath9k_ampdu_action(arg0,arg1,arg2);
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_ath9k_bss_info_changed(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, struct ieee80211_bss_conf *arg2, unsigned int arg3)
{
  #line 118 
  ath9k_bss_info_changed(arg0,arg1,arg2,arg3);
  #line 119 
  return;
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_ath9k_change_interface(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, enum nl80211_iftype arg2, _Bool arg3)
{
  #line 123 
  return ath9k_change_interface(arg0,arg1,arg2,(_Bool)((bool)((int)arg3) != 0));
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_ath9k_conf_tx(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, unsigned short arg2, struct ieee80211_tx_queue_params *arg3)
{
  #line 128 
  return ath9k_conf_tx(arg0,arg1,(unsigned short)((int)arg2),arg3);
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_ath9k_config(struct ieee80211_hw *arg0, unsigned int arg1)
{
  #line 133 
  return ath9k_config(arg0,arg1);
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_ath9k_configure_filter(struct ieee80211_hw *arg0, unsigned int arg1, unsigned int *arg2, unsigned long long arg3)
{
  #line 138 
  ath9k_configure_filter(arg0,arg1,arg2,arg3);
  #line 139 
  return;
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_ath9k_flush(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, unsigned int arg2, _Bool arg3)
{
  #line 143 
  ath9k_flush(arg0,arg1,arg2,(_Bool)((bool)((int)arg3) != 0));
  #line 144 
  return;
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_ath9k_get_antenna(struct ieee80211_hw *arg0, unsigned int *arg1, unsigned int *arg2)
{
  #line 148 
  return ath9k_get_antenna(arg0,arg1,arg2);
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_ath9k_get_stats(struct ieee80211_hw *arg0, struct ieee80211_low_level_stats *arg1)
{
  #line 153 
  return ath9k_get_stats(arg0,arg1);
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_ath9k_get_survey(struct ieee80211_hw *arg0, int arg1, struct survey_info *arg2)
{
  #line 158 
  return ath9k_get_survey(arg0,arg1,arg2);
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
unsigned long long emg_wrapper_ath9k_get_tsf(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 163 
  return ath9k_get_tsf(arg0,arg1);
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_ath9k_get_txpower(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, int *arg2)
{
  #line 168 
  return ath9k_get_txpower(arg0,arg1,arg2);
}

#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_ath9k_remove_interface(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 173 
  ath9k_remove_interface(arg0,arg1);
  #line 174 
  return;
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_ath9k_reset_tsf(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 178 
  ath9k_reset_tsf(arg0,arg1);
  #line 179 
  return;
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_ath9k_set_antenna(struct ieee80211_hw *arg0, unsigned int arg1, unsigned int arg2)
{
  #line 183 
  return ath9k_set_antenna(arg0,arg1,arg2);
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_ath9k_set_coverage_class(struct ieee80211_hw *arg0, short arg1)
{
  #line 188 
  ath9k_set_coverage_class(arg0,(short)((int)arg1));
  #line 189 
  return;
}

#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_ath9k_set_key(struct ieee80211_hw *arg0, enum set_key_cmd arg1, struct ieee80211_vif *arg2, struct ieee80211_sta *arg3, struct ieee80211_key_conf *arg4)
{
  #line 193 
  return ath9k_set_key(arg0,arg1,arg2,arg3,arg4);
}

#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_ath9k_set_tsf(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, unsigned long long arg2)
{
  #line 198 
  ath9k_set_tsf(arg0,arg1,arg2);
  #line 199 
  return;
}

#line 202  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_ath9k_sta_notify(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, enum sta_notify_cmd arg2, struct ieee80211_sta *arg3)
{
  #line 203 
  ath9k_sta_notify(arg0,arg1,arg2,arg3);
  #line 204 
  return;
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_ath9k_sta_state(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, struct ieee80211_sta *arg2, enum ieee80211_sta_state arg3, enum ieee80211_sta_state arg4)
{
  #line 208 
  return ath9k_sta_state(arg0,arg1,arg2,arg3,arg4);
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_ath9k_start(struct ieee80211_hw *arg0)
{
  #line 213 
  return ath9k_start(arg0);
}

#line 217  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_ath9k_stop(struct ieee80211_hw *arg0)
{
  #line 218 
  ath9k_stop(arg0);
  #line 219 
  return;
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_ath9k_sw_scan_complete(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 223 
  ath9k_sw_scan_complete(arg0,arg1);
  #line 224 
  return;
}

#line 227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_ath9k_sw_scan_start(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, unsigned char *arg2)
{
  #line 228 
  ath9k_sw_scan_start(arg0,arg1,arg2);
  #line 229 
  return;
}

#line 232  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_ath9k_tx(struct ieee80211_hw *arg0, struct ieee80211_tx_control *arg1, struct sk_buff *arg2)
{
  #line 233 
  ath9k_tx(arg0,arg1,arg2);
  #line 234 
  return;
}

#line 237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
_Bool emg_wrapper_ath9k_tx_frames_pending(struct ieee80211_hw *arg0)
{
  #line 238 
  return ath9k_tx_frames_pending(arg0) != 0;
}

#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_ath9k_tx_last_beacon(struct ieee80211_hw *arg0)
{
  #line 243 
  return ath9k_tx_last_beacon(arg0);
}

#line 262  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 265 
  ldv_set_bit(nr,addr);
  #line 266 
  return;
}

#line 269  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 272 
  ldv_clear_bit(nr,addr);
  #line 273 
  return;
}

#line 325  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 328 
  ldv_atomic_inc(v);
  #line 329 
  return;
}

#line 332  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void atomic_dec(atomic_t *v)
{
  #line 335 
  ldv_atomic_dec(v);
  #line 336 
  return;
}

#line 933  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_bh_axq_lock_of_ath_txq_0(spinlock_t *lock)
{
  #line 936 
  ldv_spin_model_lock((char *)"axq_lock_of_ath_txq");
  #line 938 
  spin_lock_bh_1(lock);
  #line 939 
  return;
}

#line 942  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_bh_axq_lock_of_ath_txq_0(spinlock_t *lock)
{
  #line 945 
  ldv_spin_model_unlock((char *)"axq_lock_of_ath_txq");
  #line 947 
  spin_unlock_bh_1(lock);
  #line 948 
  return;
}

#line 951  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_1(spinlock_t *lock)
{
  #line 954 
  ldv_spin_model_lock((char *)"sc_pm_lock_of_ath_softc");
  #line 956 
  __ldv_spin_lock(lock);
  #line 957 
  return;
}

#line 960  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_1(spinlock_t *lock, unsigned long flags)
{
  #line 963 
  ldv_spin_model_unlock((char *)"sc_pm_lock_of_ath_softc");
  #line 965 
  spin_unlock_irqrestore_1(lock,flags);
  #line 966 
  return;
}

#line 969  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif___ldv_spin_lock_cc_lock_of_ath_common_0(spinlock_t *lock)
{
  #line 972 
  ldv_spin_model_lock((char *)"cc_lock_of_ath_common");
  #line 974 
  __ldv_spin_lock(lock);
  #line 975 
  return;
}

#line 978  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_irqrestore_cc_lock_of_ath_common_0(spinlock_t *lock, unsigned long flags)
{
  #line 981 
  ldv_spin_model_unlock((char *)"cc_lock_of_ath_common");
  #line 983 
  spin_unlock_irqrestore_1(lock,flags);
  #line 984 
  return;
}

#line 987  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_del_timer_sync_0(struct timer_list *timer)
{
  #line 991 
  return emg_del_timer_sync(timer);
}

#line 995  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_cc_lock_of_ath_common(spinlock_t *lock)
{
  #line 998 
  ldv_spin_model_lock((char *)"cc_lock_of_ath_common");
  #line 1000 
  spin_lock(lock);
  #line 1001 
  return;
}

#line 1004  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_cc_lock_of_ath_common(spinlock_t *lock)
{
  #line 1007 
  ldv_spin_model_unlock((char *)"cc_lock_of_ath_common");
  #line 1009 
  spin_unlock(lock);
  #line 1010 
  return;
}

#line 1013  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static int cif_mod_timer_0(struct timer_list *timer, unsigned long expires)
{
  #line 1017 
  return emg_mod_timer(timer,expires);
}

#line 1021  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_bh_sc_pcu_lock_of_ath_softc(spinlock_t *lock)
{
  #line 1024 
  ldv_spin_model_lock((char *)"sc_pcu_lock_of_ath_softc");
  #line 1026 
  spin_lock_bh_1(lock);
  #line 1027 
  return;
}

#line 1030  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_bh_chan_lock_of_ath_softc_0(spinlock_t *lock)
{
  #line 1033 
  ldv_spin_model_lock((char *)"chan_lock_of_ath_softc");
  #line 1035 
  spin_lock_bh_1(lock);
  #line 1036 
  return;
}

#line 1039  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_bh_chan_lock_of_ath_softc_0(spinlock_t *lock)
{
  #line 1042 
  ldv_spin_model_unlock((char *)"chan_lock_of_ath_softc");
  #line 1044 
  spin_unlock_bh_1(lock);
  #line 1045 
  return;
}

#line 1048  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_bh_sc_pcu_lock_of_ath_softc(spinlock_t *lock)
{
  #line 1051 
  ldv_spin_model_unlock((char *)"sc_pcu_lock_of_ath_softc");
  #line 1053 
  spin_unlock_bh_1(lock);
  #line 1054 
  return;
}

#line 1057  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif___ldv_spin_lock_intr_lock_of_ath_softc(spinlock_t *lock)
{
  #line 1060 
  ldv_spin_model_lock((char *)"intr_lock_of_ath_softc");
  #line 1062 
  __ldv_spin_lock(lock);
  #line 1063 
  return;
}

#line 1066  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_irqrestore_intr_lock_of_ath_softc(spinlock_t *lock, unsigned long flags)
{
  #line 1069 
  ldv_spin_model_unlock((char *)"intr_lock_of_ath_softc");
  #line 1071 
  spin_unlock_irqrestore_1(lock,flags);
  #line 1072 
  return;
}

#line 1075  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_sc_pcu_lock_of_ath_softc(spinlock_t *lock)
{
  #line 1078 
  ldv_spin_model_lock((char *)"sc_pcu_lock_of_ath_softc");
  #line 1080 
  spin_lock(lock);
  #line 1081 
  return;
}

#line 1084  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_sc_pcu_lock_of_ath_softc(spinlock_t *lock)
{
  #line 1087 
  ldv_spin_model_unlock((char *)"sc_pcu_lock_of_ath_softc");
  #line 1089 
  spin_unlock(lock);
  #line 1090 
  return;
}

#line 1093  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_intr_lock_of_ath_softc(spinlock_t *lock)
{
  #line 1096 
  ldv_spin_model_lock((char *)"intr_lock_of_ath_softc");
  #line 1098 
  spin_lock(lock);
  #line 1099 
  return;
}

#line 1102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_intr_lock_of_ath_softc(spinlock_t *lock)
{
  #line 1105 
  ldv_spin_model_unlock((char *)"intr_lock_of_ath_softc");
  #line 1107 
  spin_unlock(lock);
  #line 1108 
  return;
}

#line 1111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t)
{
  #line 1115 
  emg_tasklet_schedule(t);
  #line 1116 
  return;
}

#line 1119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_lock_sc_pm_lock_of_ath_softc(spinlock_t *lock)
{
  #line 1122 
  ldv_spin_model_lock((char *)"sc_pm_lock_of_ath_softc");
  #line 1124 
  spin_lock(lock);
  #line 1125 
  return;
}

#line 1128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_spin_unlock_sc_pm_lock_of_ath_softc(spinlock_t *lock)
{
  #line 1131 
  ldv_spin_model_unlock((char *)"sc_pm_lock_of_ath_softc");
  #line 1133 
  spin_unlock(lock);
  #line 1134 
  return;
}

#line 1137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_mutex_lock_mutex_of_ath_softc(struct mutex *lock)
{
  #line 1140 
  ldv_mutex_model_lock(lock,(char *)"mutex_of_ath_softc");
  #line 1141 
  return;
}

#line 1144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_mutex_unlock_mutex_of_ath_softc(struct mutex *lock)
{
  #line 1147 
  ldv_mutex_model_unlock(lock,(char *)"mutex_of_ath_softc");
  #line 1148 
  return;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_1(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_5190 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add_1(new,head,head->next);
  #line 80 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_1(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_1(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_1(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_5192 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_1(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_1(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_1(struct list_head *entry)
{
  #line 139 
  __list_del_entry_1(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_init_0(struct list_head *entry)
{
  #line 190 
  __list_del_entry_1(entry);
  #line 191 
  INIT_LIST_HEAD_0(entry);
  #line 192 
  return;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_move_tail(struct list_head *list, struct list_head *head)
{
  #line 213 
  __list_del_entry_1(list);
  #line 214 
  list_add_tail_1(list,head);
  #line 215 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_1(struct list_head *head)
{
  #line 269 
  union __anonunion___u_5194 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_is_singular(struct list_head *head)
{
  #line 328 
  int tmp_0;
  #line 328 
  if (list_empty_1(head) == 0) 
    #line 328 
    if (head->next == head->prev) 
                                  #line 328 
                                  tmp_0 = 1; else 
                                                  #line 328 
                                                  tmp_0 = 0;
  else 
       #line 328 
       tmp_0 = 0;
  #line 328 
  return tmp_0;
}

#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_cut_position(struct list_head *list, struct list_head *head, struct list_head *entry)
{
  #line 334 
  struct list_head *new_first = entry->next;
  #line 335 
  list->next = head->next;
  #line 336 
  (list->next)->prev = list;
  #line 337 
  list->prev = entry;
  #line 338 
  entry->next = list;
  #line 339 
  head->next = new_first;
  #line 340 
  new_first->prev = head;
  #line 341 
  return;
}

#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_cut_position(struct list_head *list, struct list_head *head, struct list_head *entry)
{
  #line 360 
  if (list_empty_1(head) != 0) 
                               #line 361 
                               return;
  #line 362 
  if (head->next != entry && head != entry) {
    #line 362 
    if (list_is_singular(head) != 0) 
                                     #line 364 
                                     return;
  }
  #line 365 
  if (entry == head) 
                     #line 366 
                     INIT_LIST_HEAD_0(list); else 
                                                  #line 368 
                                                  __list_cut_position(list,head,entry);
  #line 369 
  return;
}

#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_splice(struct list_head *list, struct list_head *prev, struct list_head *next)
{
  #line 405 
  struct list_head *first = list->next;
  #line 406 
  struct list_head *last = list->prev;
  #line 408 
  first->prev = prev;
  #line 409 
  prev->next = first;
  #line 411 
  last->next = next;
  #line 412 
  next->prev = last;
  #line 413 
  return;
}

#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_splice_tail_init(struct list_head *list, struct list_head *head)
{
  #line 466 
  if (list_empty_1(list) == 0) {
    #line 467 
    __list_splice(list,head->prev,head);
    #line 468 
    INIT_LIST_HEAD_0(list);
  }
  #line 470 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 59 
void *__memmove(void *, void *, size_t);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_2(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 791  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_lock_bh_axq_lock_of_ath_txq_1(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 809  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_lock_bh_txbuflock_of_ath_tx(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 827  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_lock_bh_chan_lock_of_ath_softc_1(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_2(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_unlock_bh_axq_lock_of_ath_txq_1(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_unlock_bh_txbuflock_of_ath_tx(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_unlock_bh_chan_lock_of_ath_softc_1(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_2(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 854  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_2(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 872  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_unlock_irqrestore_txbuflock_of_ath_tx(spinlock_t *lock, unsigned long flags);
#line 35 
#line 845 
static void cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_2(spinlock_t *lock);
#line 35 
#line 863 
static void cif___ldv_spin_lock_txbuflock_of_ath_tx(spinlock_t *lock);
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
#line 118 
void complete(struct completion *);
#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 446 
void *dmam_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dmam_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 774 
  return dmam_alloc_attrs(dev,size,dma_handle,gfp,
                       (unsigned long)(gfp >> 5) & 256UL);
}

#line 1493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_queue_empty(struct sk_buff_head *list)
{
  #line 1495 
  return list->next == (struct sk_buff *)list;
}

#line 1531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_queue_is_first(struct sk_buff_head *list, struct sk_buff *skb)
{
  #line 1534 
  return (_Bool)(skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev == (struct sk_buff *)list);
}

#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_insert_0(struct sk_buff *newsk, struct sk_buff *prev, struct sk_buff *next, struct sk_buff_head *list)
{
  {
    #line 1868 
    union __anonunion___u_5681 __u = {.__val = next};
    #line 1867 
    __write_once_size((void *)(& newsk->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u.__c),8);
    #line 1867 
    struct sk_buff *tmp = __u.__val;
  }
  {
    #line 1869 
    union __anonunion___u_5683 __u_0 = {.__val = prev};
    #line 1868 
    __write_once_size((void *)(& newsk->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u_0.__c),8);
    #line 1868 
    struct sk_buff *tmp_3 = __u_0.__val;
  }
  {
    #line 1870 
    union __anonunion___u_5685 __u_1 = {.__val = newsk};
    #line 1869 
    __write_once_size((void *)(& next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u_1.__c),8);
    #line 1869 
    struct sk_buff *tmp_5 = __u_1.__val;
  }
  {
    #line 1871 
    union __anonunion___u_5687 __u_2 = {.__val = newsk};
    #line 1870 
    __write_once_size((void *)(& prev->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u_2.__c),8);
    #line 1870 
    struct sk_buff *tmp_7 = __u_2.__val;
  }
  #line 1871 
  (list->qlen) ++;
  #line 1872 
  return;
}

#line 1874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_splice(struct sk_buff_head *list, struct sk_buff *prev, struct sk_buff *next)
{
  #line 1878 
  struct sk_buff *first = list->next;
  #line 1879 
  struct sk_buff *last = list->prev;
  {
    #line 1882 
    union __anonunion___u_5689 __u = {.__val = prev};
    #line 1881 
    __write_once_size((void *)(& first->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u.__c),8);
    #line 1881 
    struct sk_buff *tmp = __u.__val;
  }
  {
    #line 1883 
    union __anonunion___u_5691 __u_0 = {.__val = first};
    #line 1882 
    __write_once_size((void *)(& prev->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u_0.__c),8);
    #line 1882 
    struct sk_buff *tmp_3 = __u_0.__val;
  }
  {
    #line 1885 
    union __anonunion___u_5693 __u_1 = {.__val = next};
    #line 1884 
    __write_once_size((void *)(& last->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u_1.__c),8);
    #line 1884 
    struct sk_buff *tmp_5 = __u_1.__val;
  }
  {
    #line 1886 
    union __anonunion___u_5695 __u_2 = {.__val = last};
    #line 1885 
    __write_once_size((void *)(& next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u_2.__c),8);
    #line 1885 
    struct sk_buff *tmp_7 = __u_2.__val;
  }
  #line 1887 
  return;
}

#line 1909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_queue_splice_init(struct sk_buff_head *list, struct sk_buff_head *head)
{
  #line 1912 
  if (skb_queue_empty(list) == 0) {
    #line 1913 
    __skb_queue_splice(list,(struct sk_buff *)head,head->next);
    #line 1914 
    head->qlen += list->qlen;
    #line 1915 
    __skb_queue_head_init(list);
  }
  #line 1917 
  return;
}

#line 1924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_queue_splice_tail(struct sk_buff_head *list, struct sk_buff_head *head)
{
  #line 1927 
  if (skb_queue_empty(list) == 0) {
    #line 1928 
    __skb_queue_splice(list,head->prev,(struct sk_buff *)head);
    #line 1929 
    head->qlen += list->qlen;
  }
  #line 1931 
  return;
}

#line 1972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_before_0(struct sk_buff_head *list, struct sk_buff *next, struct sk_buff *newsk)
{
  #line 1976 
  __skb_insert_0(newsk,next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev,next,list);
  #line 1977 
  return;
}

#line 2006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_tail_0(struct sk_buff_head *list, struct sk_buff *newsk)
{
  #line 2009 
  __skb_queue_before_0(list,(struct sk_buff *)list,newsk);
  #line 2010 
  return;
}

#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_unlink_0(struct sk_buff *skb, struct sk_buff_head *list)
{
  #line 2020 
  struct sk_buff *next;
  #line 2020 
  struct sk_buff *prev;
  #line 2022 
  (list->qlen) --;
  #line 2023 
  next = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next;
  #line 2024 
  prev = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev;
  #line 2025 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev = ((struct sk_buff *)0);
  #line 2025 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next = ((struct sk_buff *)0);
  {
    #line 2027 
    union __anonunion___u_5697 __u = {.__val = prev};
    #line 2026 
    __write_once_size((void *)(& next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u.__c),8);
    #line 2026 
    struct sk_buff *tmp_2 = __u.__val;
  }
  {
    #line 2028 
    union __anonunion___u_5699 __u_0 = {.__val = next};
    #line 2027 
    __write_once_size((void *)(& prev->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u_0.__c),8);
    #line 2027 
    struct sk_buff *tmp_4 = __u_0.__val;
  }
  #line 2029 
  return;
}

#line 2038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *__skb_dequeue_0(struct sk_buff_head *list)
{
  #line 2040 
  struct sk_buff *skb = skb_peek(list);
  #line 2041 
  if (skb != (struct sk_buff *)0) 
                                  #line 2042 
                                  __skb_unlink_0(skb,list);
  #line 2043 
  return skb;
}

#line 2245 
#line 2245 
void *skb_push(struct sk_buff *, unsigned int);
#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_probe_resp(__le16 fc)
{
  #line 458 
  return (_Bool)(((int)fc & 252) == 80);
}

#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_beacon(__le16 fc)
{
  #line 468 
  return (_Bool)(((int)fc & 252) == 128);
}

#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_atim(__le16 fc)
{
  #line 478 
  return (_Bool)(((int)fc & 252) == 144);
}

#line 5177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
#line 5177 
unsigned int ieee80211_hdrlen(__le16);
#line 2625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static struct ieee80211_rate *ieee80211_get_rts_cts_rate(struct ieee80211_hw *hw, struct ieee80211_tx_info *c)
{
  #line 2628 
  if ((int)c->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_3075_193.__anonCompField___anonunion_3076_192.rts_cts_rate_idx < 0) 
    #line 2629 
    return (struct ieee80211_rate *)0;
  #line 2630 
  return ((hw->wiphy)->bands[(int)c->band])->bitrates + (unsigned long)c->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_3075_193.__anonCompField___anonunion_3076_192.rts_cts_rate_idx;
}

#line 4511 
#line 4511 
void ieee80211_sta_set_buffered(struct ieee80211_sta *, u8, bool);
#line 4527 
#line 4527 
void ieee80211_get_tx_rates(struct ieee80211_vif *, struct ieee80211_sta *, struct sk_buff *, struct ieee80211_tx_rate *, int);
#line 4580 
#line 4580 
void ieee80211_tx_status(struct ieee80211_hw *, struct sk_buff *);
#line 4597 
#line 4597 
void ieee80211_tx_status_ext(struct ieee80211_hw *, struct ieee80211_tx_status *);
#line 4616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void ieee80211_tx_status_noskb(struct ieee80211_hw *hw, struct ieee80211_sta *sta, struct ieee80211_tx_info *info)
{
  #line 4620 
  struct ieee80211_tx_status status = {.sta = sta, .info = info, .skb = (struct sk_buff *)0, .rate = (struct rate_info *)0};
  #line 4625 
  ieee80211_tx_status_ext(hw,& status);
  #line 4626 
  return;
}

#line 4990 
#line 4990 
struct sk_buff *ieee80211_get_buffered_bc(struct ieee80211_hw *, struct ieee80211_vif *);
#line 5532 
#line 5532 
void ieee80211_sta_eosp(struct ieee80211_sta *);
#line 5853 
#line 5853 
void ieee80211_send_bar(struct ieee80211_vif *, u8 *, u16, u16);
#line 6290 
#line 6290 
struct sk_buff *ieee80211_tx_dequeue(struct ieee80211_hw *, struct ieee80211_txq *);
#line 6326 
#line 6326 
struct ieee80211_txq *ieee80211_next_txq(struct ieee80211_hw *, u8);
#line 6337 
#line 6337 
void ieee80211_txq_schedule_start(struct ieee80211_hw *, u8);
#line 6340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void ieee80211_txq_schedule_end(struct ieee80211_hw *hw, u8 ac)
{
  #line 6342 
  return;
}

#line 6344 
#line 6344 
void __ieee80211_schedule_txq(struct ieee80211_hw *, struct ieee80211_txq *, bool);
#line 6360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void ieee80211_schedule_txq(struct ieee80211_hw *hw, struct ieee80211_txq *txq)
{
  #line 6362 
  __ieee80211_schedule_txq(hw,txq,(_Bool)1);
  #line 6363 
  return;
}

#line 6376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void ieee80211_return_txq(struct ieee80211_hw *hw, struct ieee80211_txq *txq, bool force)
{
  #line 6379 
  __ieee80211_schedule_txq(hw,txq,(_Bool)((bool)((int)force) != 0));
  #line 6380 
  return;
}

#line 716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
#line 716 
u32 ath9k_hw_gettxbuf(struct ath_hw *, u32);
#line 717 
#line 717 
void ath9k_hw_puttxbuf(struct ath_hw *, u32, u32);
#line 718 
#line 718 
void ath9k_hw_txstart(struct ath_hw *, u32);
#line 719 
#line 719 
u32 ath9k_hw_numtxpending(struct ath_hw *, u32);
#line 722 
#line 722 
void ath9k_hw_abort_tx_dma(struct ath_hw *);
#line 723 
#line 723 
bool ath9k_hw_set_txq_props(struct ath_hw *, int, struct ath9k_tx_queue_info *);
#line 725 
#line 725 
bool ath9k_hw_get_txq_props(struct ath_hw *, int, struct ath9k_tx_queue_info *);
#line 727 
#line 727 
int ath9k_hw_setuptxqueue(struct ath_hw *, enum ath9k_tx_queue, struct ath9k_tx_queue_info *);
#line 729 
#line 729 
bool ath9k_hw_releasetxqueue(struct ath_hw *, u32);
#line 730 
#line 730 
bool ath9k_hw_resettxqueue(struct ath_hw *, u32);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dynack.h"
#line 88 
void ath_dynack_sample_tx_ts(struct ath_hw *, struct sk_buff *, struct ath_tx_status *, struct ieee80211_sta *);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw-ops.h"
__inline static void ath9k_hw_set_desc_link(struct ath_hw *ah, void *ds, u32 link)
{
  #line 41 
  (*(ath9k_hw_ops(ah)->set_desc_link))(ds,link);
  #line 42 
  return;
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw-ops.h"
__inline static void ath9k_hw_set_txdesc(struct ath_hw *ah, void *ds, struct ath_tx_info *i)
{
  #line 60 
  (*(ath9k_hw_ops(ah)->set_txdesc))(ah,ds,i);
  #line 61 
  return;
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw-ops.h"
__inline static int ath9k_hw_get_duration(struct ath_hw *ah, void *ds, int index)
{
  #line 72 
  return (*(ath9k_hw_ops(ah)->get_duration))(ah,ds,index);
}

#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw-ops.h"
__inline static void ath9k_hw_tx99_start(struct ath_hw *ah, u32 qnum)
{
  #line 89 
  (*(ath9k_hw_ops(ah)->tx99_start))(ah,qnum);
  #line 90 
  return;
}

#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/common.h"
#line 83 
int ath9k_cmn_get_hw_crypto_keytype(struct sk_buff *);
#line 258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.h"
#line 258 
void ath_debug_stat_tx(struct ath_softc *sc, struct ath_buf *bf, struct ath_tx_status *ts, struct ath_txq *txq, unsigned int flags);
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_tx_queue_tid(struct ath_softc *sc, struct ath_atx_tid *tid);
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
__inline static void ath_txq_lock_0(struct ath_softc *sc, struct ath_txq *txq)
{
  #line 567 
  cif_spin_lock_bh_axq_lock_of_ath_txq_1(& txq->axq_lock);
  #line 568 
  return;
}

#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
__inline static void ath_txq_unlock_0(struct ath_softc *sc, struct ath_txq *txq)
{
  #line 571 
  cif_spin_unlock_bh_axq_lock_of_ath_txq_1(& txq->axq_lock);
  #line 572 
  return;
}

#line 580 
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
struct ath_txq *ath_txq_setup(struct ath_softc *sc, int qtype, int subtype);
#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_txq_unlock_complete(struct ath_softc *sc, struct ath_txq *txq);
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_tx_cleanupq(struct ath_softc *sc, struct ath_txq *txq);
#line 584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_draintxq(struct ath_softc *sc, struct ath_txq *txq);
#line 587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_txq_schedule(struct ath_softc *sc, struct ath_txq *txq);
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 2758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
int ath_tx_init(struct ath_softc *sc, int nbufs);
#line 595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 2196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_assign_seq(struct ath_common *common, struct sk_buff *skb);
#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 2331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_tx_cabq(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct sk_buff *skb);
#line 724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 724 
void ath9k_csa_update(struct ath_softc *sc);
#line 798 
#line 798 
u16 ath9k_btcoex_aggr_limit(struct ath_softc *sc, u32 max_4ms_framelen);
#line 1085 
#line 2842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
int ath9k_tx99_send(struct ath_softc *sc, struct sk_buff *skb, struct ath_tx_control *txctl);
#line 1121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
int ath_cabq_update(struct ath_softc *sc);
#line 1131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 2125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
u8 ath_txchainmask_reduction(struct ath_softc *sc, u8 chainmask, u32 rate);
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_mac.h"
#line 120 
void ath9k_hw_setup_statusring(struct ath_hw *, void *, u32, u16);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static u16 bits_per_symbol[8U][2U] = {{(unsigned short)26U, (unsigned short)54U}, {(unsigned short)52U, (unsigned short)108U}, {(unsigned short)78U, (unsigned short)162U}, {(unsigned short)104U, (unsigned short)216U}, {(unsigned short)156U, (unsigned short)324U}, {(unsigned short)208U, (unsigned short)432U}, {(unsigned short)234U, (unsigned short)486U}, {(unsigned short)260U, (unsigned short)540U}};
#line 50 
#line 2043 
static void ath_tx_send_normal(struct ath_softc *sc, struct ath_txq *txq, struct ath_atx_tid *tid, struct sk_buff *skb);
#line 52 
#line 2397 
static void ath_tx_complete(struct ath_softc *sc, struct sk_buff *skb, int tx_flags, struct ath_txq *txq, struct ieee80211_sta *sta);
#line 55 
#line 2449 
static void ath_tx_complete_buf(struct ath_softc *sc, struct ath_buf *bf, struct ath_txq *txq, struct list_head *bf_q, struct ieee80211_sta *sta, struct ath_tx_status *ts, int txok);
#line 59 
#line 1976 
static void ath_tx_txqaddbuf(struct ath_softc *sc, struct ath_txq *txq, struct list_head *head, bool internal);
#line 61 
#line 2495 
static void ath_tx_rc_status(struct ath_softc *sc, struct ath_buf *bf, struct ath_tx_status *ts, int nframes, int nbad, int txok);
#line 64 
#line 271 
static void ath_tx_update_baw(struct ath_softc *sc, struct ath_atx_tid *tid, struct ath_buf *bf);
#line 66 
#line 2144 
static struct ath_buf *ath_tx_setup_buffer(struct ath_softc *sc, struct ath_txq *txq, struct ath_atx_tid *tid, struct sk_buff *skb);
#line 70 
#line 2218 
static int ath_tx_prepare(struct ieee80211_hw *hw, struct sk_buff *skb, struct ath_tx_control *txctl);
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_status(struct ieee80211_hw *hw, struct sk_buff *skb)
{
  #line 86 
  struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
  #line 87 
  struct ieee80211_sta *sta = (struct ieee80211_sta *)info->__anonCompField_ieee80211_tx_info_195.status.status_driver_data[0];
  #line 89 
  if ((info->flags & 268435457U) != 0U) {
    #line 91 
    ieee80211_tx_status(hw,skb);
    #line 92 
    return;
  }
  #line 95 
  if (sta != (struct ieee80211_sta *)0) 
                                        #line 96 
                                        ieee80211_tx_status_noskb(hw,sta,info);
  #line 98 
  consume_skb(skb);
  #line 99 
  return;
}

#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_txq_unlock_complete(struct ath_softc *sc, struct ath_txq *txq)
{
  #line 105 
  struct sk_buff_head q;
  #line 106 
  struct sk_buff *skb;
  #line 104 
  struct ieee80211_hw *hw = sc->hw;
  #line 108 
  __skb_queue_head_init(& q);
  #line 109 
  skb_queue_splice_init(& txq->complete_q,& q);
  #line 110 
  cif_spin_unlock_bh_axq_lock_of_ath_txq_1(& txq->axq_lock);
  #line 112 
  while (1) {
    #line 112 
    skb = __skb_dequeue_0(& q);
    #line 112 
    if (! (skb != (struct sk_buff *)0)) 
                                        #line 112 
                                        break;
    #line 113 
    ath_tx_status(hw,skb);
  }
  #line 114 
  return;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_tx_queue_tid(struct ath_softc *sc, struct ath_atx_tid *tid)
{
  #line 119 
  void *__mptr;
  #line 119 
  __mptr = (void *)tid;
  #line 118 
  struct ieee80211_txq *queue = ((struct ieee80211_txq *)(__mptr + 18446744073709551592U));
  #line 121 
  ieee80211_schedule_txq(sc->hw,queue);
  #line 122 
  return;
}

#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath9k_wake_tx_queue(struct ieee80211_hw *hw, struct ieee80211_txq *queue)
{
  #line 126 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 127 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 128 
  struct ath_atx_tid *tid = (struct ath_atx_tid *)(& queue->drv_priv);
  #line 129 
  struct ath_txq *txq = tid->txq;
  #line 131 
  if ((common->debug_mask & 2) != 0) {
    #line 131 
    u8 *tmp_0;
    #line 131 
    ;
    #line 131 
    if (queue->sta != (struct ieee80211_sta *)0) 
                                                 #line 131 
                                                 tmp_0 = (u8 *)(& (queue->sta)->addr); else 
                                                                    #line 131 
                                                                    tmp_0 = (u8 *)(& (queue->vif)->addr);
    #line 131 
    ;
    #line 131 
    ath_printk((char *)"\001",common,(char *)"Waking TX queue: %pM (%d)\n",tmp_0,(int)tid->tidno);
  }
  #line 135 
  ath_txq_lock_0(sc,txq);
  #line 136 
  ath_txq_schedule(sc,txq);
  #line 137 
  ath_txq_unlock_0(sc,txq);
  #line 138 
  return;
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static struct ath_frame_info *get_frame_info(struct sk_buff *skb)
{
  #line 142 
  struct ieee80211_tx_info *tx_info = IEEE80211_SKB_CB(skb);
  #line 145 
  return (struct ath_frame_info *)(& tx_info->__anonCompField_ieee80211_tx_info_195.__anonCompField___anonunion_3074_194.rate_driver_data[0]);
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_send_bar(struct ath_atx_tid *tid, u16 seqno)
{
  #line 150 
  if ((tid->an)->sta == (struct ieee80211_sta *)0) 
                                                   #line 151 
                                                   return;
  #line 153 
  ieee80211_send_bar((tid->an)->vif,(u8 *)(& ((tid->an)->sta)->addr),(unsigned short)((int)tid->tidno),(unsigned short)((int)seqno << 4U));
  #line 155 
  return;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_set_rates(struct ieee80211_vif *vif, struct ieee80211_sta *sta, struct ath_buf *bf)
{
  #line 160 
  ieee80211_get_tx_rates(vif,sta,bf->bf_mpdu,(struct ieee80211_tx_rate *)(& bf->rates),4);
  #line 161 
  return;
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_txq_skb_done(struct ath_softc *sc, struct ath_txq *txq, struct sk_buff *skb)
{
  #line 174 
  int __ret_warn_on;
  #line 167 
  struct ath_frame_info *fi = get_frame_info(skb);
  #line 168 
  int q = (int)fi->txq;
  #line 170 
  if (q < 0) 
             #line 171 
             return;
  #line 173 
  txq = sc->tx.txq_map[q];
  #line 174 
  (txq->pending_frames) --;
  #line 174 
  __ret_warn_on = txq->pending_frames < 0;
  #line 174 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 175 
    ldv_inline_asm();
    #line 176 
    ldv_inline_asm();
  }
  #line 174 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 175 
                                                txq->pending_frames = 0;
  #line 176 
  return;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static struct ath_atx_tid *ath_get_skb_tid(struct ath_softc *sc, struct ath_node *an, struct sk_buff *skb)
{
  #line 182 
  u8 tidno = (unsigned char)((unsigned int)((unsigned char)skb->priority) & 15U);
  #line 183 
  return ath_node_to_tid(an,(unsigned char)((int)tidno));
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static int ath_tid_pull(struct ath_atx_tid *tid, struct sk_buff **skbuf)
{
  #line 189 
  void *__mptr;
  #line 196 
  struct sk_buff *skb;
  #line 197 
  struct ath_frame_info *fi;
  #line 198 
  int q;
  #line 198 
  int ret;
  #line 189 
  __mptr = (void *)tid;
  #line 189 
  struct ieee80211_txq *txq = ((struct ieee80211_txq *)(__mptr + 18446744073709551592U));
  #line 190 
  struct ath_softc *sc = (tid->an)->sc;
  #line 191 
  struct ieee80211_hw *hw = sc->hw;
  #line 192 
  struct ath_tx_control txctl = {.txq = tid->txq, .an = (struct ath_node *)0, .sta = (tid->an)->sta, .paprd = (unsigned char)0};
  #line 200 
  skb = ieee80211_tx_dequeue(hw,txq);
  #line 201 
  if (skb == (struct sk_buff *)0) 
                                  #line 202 
                                  return -2;
  #line 204 
  ret = ath_tx_prepare(hw,skb,& txctl);
  #line 205 
  if (ret != 0) {
    #line 206 
    ieee80211_free_txskb(hw,skb);
    #line 207 
    return ret;
  }
  #line 210 
  q = (int)skb_get_queue_mapping(skb);
  #line 211 
  if (tid->txq == sc->tx.txq_map[q]) {
    #line 212 
    fi = get_frame_info(skb);
    #line 213 
    fi->txq = (signed char)q;
    #line 214 
    ((tid->txq)->pending_frames) ++;
  }
  #line 217 
  *skbuf = skb;
  #line 218 
  return 0;
}

#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static int ath_tid_dequeue(struct ath_atx_tid *tid, struct sk_buff **skb)
{
  #line 224 
  int ret = 0;
  #line 225 
  *skb = __skb_dequeue_0(& tid->retry_q);
  #line 226 
  if (*skb == (struct sk_buff *)0) 
                                   #line 227 
                                   ret = ath_tid_pull(tid,skb);
  #line 229 
  return ret;
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_flush_tid(struct ath_softc *sc, struct ath_atx_tid *tid)
{
  #line 235 
  struct sk_buff *skb;
  #line 236 
  struct ath_buf *bf;
  #line 237 
  struct list_head bf_head;
  #line 238 
  struct ath_tx_status ts;
  #line 239 
  struct ath_frame_info *fi;
  #line 234 
  struct ath_txq *txq = tid->txq;
  #line 240 
  bool sendbar = (_Bool)0;
  #line 242 
  INIT_LIST_HEAD_0(& bf_head);
  #line 244 
  memset((void *)(& ts),0,48UL);
  #line 246 
  while (1) {
    #line 246 
    skb = __skb_dequeue_0(& tid->retry_q);
    #line 246 
    if (! (skb != (struct sk_buff *)0)) 
                                        #line 246 
                                        break;
    #line 247 
    fi = get_frame_info(skb);
    #line 248 
    bf = fi->bf;
    #line 249 
    if (bf == (struct ath_buf *)0) {
      #line 250 
      ath_txq_skb_done(sc,txq,skb);
      #line 251 
      ieee80211_free_txskb(sc->hw,skb);
      #line 252 
      continue;
    }
    #line 255 
    if ((unsigned int)fi->baw_tracked != 0U) {
      #line 256 
      ath_tx_update_baw(sc,tid,bf);
      #line 257 
      sendbar = (_Bool)1;
    }
    #line 260 
    list_add_tail_1(& bf->list,& bf_head);
    #line 261 
    ath_tx_complete_buf(sc,bf,txq,& bf_head,(struct ieee80211_sta *)0,& ts,0);
  }
  #line 264 
  if ((int)sendbar != 0) {
    #line 265 
    ath_txq_unlock_0(sc,txq);
    #line 266 
    ath_send_bar(tid,(unsigned short)((int)tid->seq_start));
    #line 267 
    ath_txq_lock_0(sc,txq);
  }
  #line 269 
  return;
}

#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_update_baw(struct ath_softc *sc, struct ath_atx_tid *tid, struct ath_buf *bf)
{
  #line 276 
  int index;
  #line 276 
  int cindex;
  #line 274 
  struct ath_frame_info *fi = get_frame_info(bf->bf_mpdu);
  #line 275 
  u16 seqno = bf->bf_state.seqno;
  #line 278 
  if ((unsigned int)fi->baw_tracked == 0U) 
                                           #line 279 
                                           return;
  #line 281 
  index = ((int)seqno - (int)tid->seq_start) & 4095;
  #line 282 
  cindex = (tid->baw_head + index) & 127;
  #line 284 
  __set_bit((long)cindex,(unsigned long *)(& tid->tx_buf));
  #line 286 
  while (1) {
    #line 286 
    if (tid->baw_head != tid->baw_tail) {
      #line 286 
      if (test_bit((long)tid->baw_head,(unsigned long *)(& tid->tx_buf))) 
        #line 286 
        break;
    }
    else 
         #line 286 
         break;
    #line 287 
    tid->seq_start = (u16)((int)tid->seq_start + 1);
    #line 287 
    tid->seq_start = (unsigned short)((unsigned int)tid->seq_start & 4095U);
    #line 288 
    (tid->baw_head) ++;
    #line 288 
    tid->baw_head &= 127;
    #line 289 
    if ((int)tid->bar_index >= 0) 
                                  #line 290 
                                  tid->bar_index = (s8)((int)tid->bar_index - 1);
  }
  #line 292 
  return;
}

#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_addto_baw(struct ath_softc *sc, struct ath_atx_tid *tid, struct ath_buf *bf)
{
  #line 299 
  int index;
  #line 299 
  int cindex;
  #line 297 
  struct ath_frame_info *fi = get_frame_info(bf->bf_mpdu);
  #line 298 
  u16 seqno = bf->bf_state.seqno;
  #line 301 
  if ((unsigned int)fi->baw_tracked != 0U) 
                                           #line 302 
                                           return;
  #line 304 
  index = ((int)seqno - (int)tid->seq_start) & 4095;
  #line 305 
  cindex = (tid->baw_head + index) & 127;
  #line 306 
  __set_bit((long)cindex,(unsigned long *)(& tid->tx_buf));
  #line 307 
  fi->baw_tracked = (unsigned char)1U;
  #line 309 
  if (((tid->baw_tail - tid->baw_head) & 127) <= index) {
    #line 311 
    tid->baw_tail = cindex;
    #line 312 
    (tid->baw_tail) ++;
    #line 312 
    tid->baw_tail &= 127;
  }
  #line 315 
  return;
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tid_drain(struct ath_softc *sc, struct ath_txq *txq, struct ath_atx_tid *tid)
{
  #line 320 
  struct sk_buff *skb;
  #line 321 
  struct ath_buf *bf;
  #line 322 
  struct list_head bf_head;
  #line 323 
  struct ath_tx_status ts;
  #line 324 
  struct ath_frame_info *fi;
  #line 325 
  int ret;
  #line 327 
  memset((void *)(& ts),0,48UL);
  #line 328 
  INIT_LIST_HEAD_0(& bf_head);
  #line 330 
  while (1) {
    #line 330 
    ret = ath_tid_dequeue(tid,& skb);
    #line 330 
    if (! (ret == 0)) 
                      #line 330 
                      break;
    #line 331 
    fi = get_frame_info(skb);
    #line 332 
    bf = fi->bf;
    #line 334 
    if (bf == (struct ath_buf *)0) {
      #line 335 
      ath_tx_complete(sc,skb,1,txq,(struct ieee80211_sta *)0);
      #line 336 
      continue;
    }
    #line 339 
    list_add_tail_1(& bf->list,& bf_head);
    #line 340 
    ath_tx_complete_buf(sc,bf,txq,& bf_head,(struct ieee80211_sta *)0,& ts,0);
  }
  #line 342 
  return;
}

#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_set_retry(struct ath_softc *sc, struct ath_txq *txq, struct sk_buff *skb, int count)
{
  #line 349 
  struct ieee80211_hdr *hdr;
  #line 347 
  struct ath_frame_info *fi = get_frame_info(skb);
  #line 348 
  struct ath_buf *bf = fi->bf;
  #line 350 
  int prev = (int)fi->retries;
  #line 352 
  (sc->debug.stats.txstats[txq->axq_qnum].a_retries) ++;
  #line 353 
  fi->retries = (unsigned char)((int)((unsigned char)fi->retries) + (int)((unsigned char)count));
  #line 355 
  if (prev > 0) 
                #line 356 
                return;
  #line 358 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 359 
  hdr->frame_control = (unsigned short)((unsigned int)hdr->frame_control | 2048U);
  #line 360 
  dma_sync_single_for_device(sc->dev,bf->bf_buf_addr,30UL,(enum dma_data_direction)DMA_TO_DEVICE);
  #line 361 
  return;
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static struct ath_buf *ath_tx_get_buffer(struct ath_softc *sc)
{
  #line 375 
  void *__mptr;
  #line 366 
  struct ath_buf *bf = (struct ath_buf *)0;
  #line 368 
  cif_spin_lock_bh_txbuflock_of_ath_tx(& sc->tx.txbuflock);
  #line 370 
  if ((long)(list_empty_1(& sc->tx.txbuf) != 0) != 0L) {
    #line 371 
    cif_spin_unlock_bh_txbuflock_of_ath_tx(& sc->tx.txbuflock);
    #line 372 
    return (struct ath_buf *)0;
  }
  #line 375 
  __mptr = (void *)sc->tx.txbuf.next;
  #line 375 
  bf = ((struct ath_buf *)__mptr);
  #line 376 
  list_del_1(& bf->list);
  #line 378 
  cif_spin_unlock_bh_txbuflock_of_ath_tx(& sc->tx.txbuflock);
  #line 380 
  return bf;
}

#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_return_buffer(struct ath_softc *sc, struct ath_buf *bf)
{
  #line 385 
  cif_spin_lock_bh_txbuflock_of_ath_tx(& sc->tx.txbuflock);
  #line 386 
  list_add_tail_1(& bf->list,& sc->tx.txbuf);
  #line 387 
  cif_spin_unlock_bh_txbuflock_of_ath_tx(& sc->tx.txbuflock);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static struct ath_buf *ath_clone_txbuf(struct ath_softc *sc, struct ath_buf *bf)
{
  #line 395 
  int __ret_warn_on;
  #line 392 
  struct ath_buf *tbf;
  #line 394 
  tbf = ath_tx_get_buffer(sc);
  #line 395 
  __ret_warn_on = tbf == (struct ath_buf *)0;
  #line 395 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 396 
    ldv_inline_asm();
    #line 397 
    ldv_inline_asm();
  }
  #line 395 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 396 
                                                return (struct ath_buf *)0;
  #line 398 
  tbf->bf_lastbf = (struct ath_buf *)0;
  #line 398 
  tbf->bf_next = (struct ath_buf *)0;
  #line 398 
  memset((void *)(& tbf->bf_state),0,16UL);
  #line 400 
  tbf->bf_mpdu = bf->bf_mpdu;
  #line 401 
  tbf->bf_buf_addr = bf->bf_buf_addr;
  #line 402 
  memcpy(tbf->bf_desc,bf->bf_desc,(unsigned long)(sc->sc_ah)->caps.tx_desc_len);
  #line 403 
  tbf->bf_state = bf->bf_state;
  #line 404 
  tbf->bf_state.stale = (_Bool)0;
  #line 406 
  return tbf;
}

#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_count_frames(struct ath_softc *sc, struct ath_buf *bf, struct ath_tx_status *ts, int txok, int *nframes, int *nbad)
{
  #line 414 
  u32 ba[2U];
  #line 415 
  int ba_index;
  #line 413 
  u16 seq_st = (unsigned short)0U;
  #line 416 
  int isaggr = 0;
  #line 418 
  *nbad = 0;
  #line 419 
  *nframes = 0;
  #line 421 
  isaggr = (int)bf->bf_state.bf_type & 2;
  #line 422 
  if (isaggr != 0) {
    #line 423 
    seq_st = ts->ts_seqnum;
    #line 424 
    memcpy((void *)(& ba),(void *)(& ts->ba_low),8UL);
  }
  #line 427 
  while (bf != (struct ath_buf *)0) {
    #line 428 
    ba_index = ((int)bf->bf_state.seqno - (int)seq_st) & 4095;
    #line 430 
    (*nframes) ++;
    #line 431 
    if (txok == 0 || isaggr != 0 && (ba_index > 63 || (ba[ba_index >> 5] & (unsigned int)(1 << (ba_index & 31))) == 0U)) 
      #line 432 
      (*nbad) ++;
    #line 434 
    bf = bf->bf_next;
  }
  #line 436 
  return;
}

#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_complete_aggr(struct ath_softc *sc, struct ath_txq *txq, struct ath_buf *bf, struct list_head *bf_q, struct ieee80211_sta *sta, struct ath_atx_tid *tid, struct ath_tx_status *ts, int txok)
{
  #line 446 
  struct sk_buff *skb;
  #line 447 
  struct ieee80211_tx_info *tx_info;
  #line 448 
  struct ath_buf *bf_next;
  #line 449 
  struct list_head bf_head;
  #line 450 
  struct sk_buff_head bf_pending;
  #line 451 
  u16 seq_first;
  #line 452 
  u32 ba[2U];
  #line 453 
  int isaggr;
  #line 453 
  int txfail;
  #line 453 
  int txpending;
  #line 454 
  bool isba;
  #line 455 
  struct ieee80211_tx_rate rates[4U];
  #line 456 
  struct ath_frame_info *fi;
  #line 457 
  int nframes;
  #line 459 
  int i;
  #line 459 
  int retries;
  #line 445 
  struct ath_node *an = (struct ath_node *)0;
  #line 448 
  struct ath_buf *bf_last = bf->bf_lastbf;
  #line 451 
  u16 seq_st = (unsigned short)0U;
  #line 451 
  u16 acked_cnt = (unsigned short)0U;
  #line 451 
  u16 txfail_cnt = (unsigned short)0U;
  #line 453 
  int sendbar = 0;
  #line 453 
  int needreset = 0;
  #line 453 
  int nbad = 0;
  #line 454 
  bool rc_update = (_Bool)1;
  #line 458 
  bool flush = (_Bool)(((int)ts->ts_status & 64) != 0);
  #line 460 
  int bar_index = -1;
  #line 462 
  skb = bf->bf_mpdu;
  #line 463 
  tx_info = IEEE80211_SKB_CB(skb);
  #line 465 
  memcpy((void *)(& rates),(void *)(& bf->rates),12UL);
  #line 467 
  retries = (int)ts->ts_longretry + 1;
  #line 468 
  i = 0;
  #line 468 
  while ((int)ts->ts_rateindex > i) {
    #line 469 
    retries = (int)rates[i].count + retries;
    #line 468 
    i ++;
  }
  #line 471 
  if (sta == (struct ieee80211_sta *)0) {
    #line 472 
    INIT_LIST_HEAD_0(& bf_head);
    #line 473 
    while (bf != (struct ath_buf *)0) {
      #line 474 
      bf_next = bf->bf_next;
      #line 476 
      if (! bf->bf_state.stale || bf_next != (struct ath_buf *)0) 
                                                                  #line 477 
                                                                  list_move_tail(& bf->list,& bf_head);
      #line 479 
      ath_tx_complete_buf(sc,bf,txq,& bf_head,(struct ieee80211_sta *)0,ts,0);
      #line 481 
      bf = bf_next;
    }
    #line 483 
    return;
  }
  #line 486 
  an = (struct ath_node *)(& sta->drv_priv);
  #line 487 
  seq_first = tid->seq_start;
  #line 488 
  isba = (_Bool)(((int)ts->ts_flags & 1) != 0);
  #line 498 
  if ((int)isba != 0 && (int)tid->tidno != (int)ts->tid) 
                                                         #line 499 
                                                         txok = 0;
  #line 501 
  isaggr = (int)bf->bf_state.bf_type & 2;
  #line 502 
  memset((void *)(& ba),0,8UL);
  #line 504 
  if (isaggr != 0 && txok != 0) 
    #line 505 
    if (((int)ts->ts_flags & 1) != 0) {
      #line 506 
      seq_st = ts->ts_seqnum;
      #line 507 
      memcpy((void *)(& ba),(void *)(& ts->ba_low),8UL);
    }
    else 
      #line 516 
      if ((sc->sc_ah)->opmode == (unsigned int)NL80211_IFTYPE_STATION) 
        #line 517 
        needreset = 1;
  #line 521 
  __skb_queue_head_init(& bf_pending);
  #line 523 
  ath_tx_count_frames(sc,bf,ts,txok,& nframes,& nbad);
  #line 524 
  while (bf != (struct ath_buf *)0) {
    #line 525 
    u16 seqno = bf->bf_state.seqno;
    #line 527 
    sendbar = 0;
    #line 527 
    txpending = sendbar;
    #line 527 
    txfail = txpending;
    #line 528 
    bf_next = bf->bf_next;
    #line 530 
    skb = bf->bf_mpdu;
    #line 531 
    tx_info = IEEE80211_SKB_CB(skb);
    #line 532 
    fi = get_frame_info(skb);
    #line 534 
    if ((((int)seqno - (int)tid->seq_start) & 4095) >= (int)tid->baw_size || ! tid->active) 
      #line 540 
      txfail = 1;
    else 
      #line 541 
      if ((((int)seqno - (int)seq_st) & 4032) == 0 && (ba[(((int)seqno - (int)seq_st) >> 5) & 127] & (unsigned int)(1 << (((int)seqno - (int)seq_st) & 31))) != 0U) 
        #line 544 
        acked_cnt = (u16)((int)acked_cnt + 1);
      else 
        #line 545 
        if (isaggr == 0 && txok != 0) 
                                      #line 547 
                                      acked_cnt = (u16)((int)acked_cnt + 1);
        else 
          #line 548 
          if ((int)flush != 0) 
                               #line 549 
                               txpending = 1;
          else 
            #line 550 
            if ((unsigned int)fi->retries <= 29U) {
              #line 551 
              if (txok != 0 || ! an->sleeping) 
                                               #line 552 
                                               ath_tx_set_retry(sc,txq,bf->bf_mpdu,retries);
              #line 555 
              txpending = 1;
            }
            else {
              #line 559 
              int __UNIQUE_ID___x557;
              #line 559 
              int tmp;
              #line 557 
              txfail = 1;
              #line 558 
              txfail_cnt = (u16)((int)txfail_cnt + 1);
              {
                #line 559 
                __UNIQUE_ID___x557 = bar_index;
                #line 559 
                int __UNIQUE_ID___y558 = ((int)seqno - (int)seq_first) & 4095;
                #line 559 
                if (__UNIQUE_ID___x557 > __UNIQUE_ID___y558) 
                                                             #line 559 
                                                             tmp = __UNIQUE_ID___x557; else 
                                                                    #line 559 
                                                                    tmp = __UNIQUE_ID___y558;
                }
              #line 559 
              bar_index = tmp;
            }
    #line 567 
    INIT_LIST_HEAD_0(& bf_head);
    #line 568 
    if (bf_next != (struct ath_buf *)0 || ! bf_last->bf_state.stale) 
      #line 569 
      list_move_tail(& bf->list,& bf_head);
    #line 571 
    if (txpending == 0) {
      #line 576 
      ath_tx_update_baw(sc,tid,bf);
      #line 578 
      if ((int)rc_update != 0 && ((unsigned int)acked_cnt == 1U || (unsigned int)txfail_cnt == 1U)) {
        #line 579 
        memcpy((void *)(& tx_info->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_3075_193.__anonCompField___anonunion_3076_192.rates),(void *)(& rates),12UL);
        #line 580 
        ath_tx_rc_status(sc,bf,ts,nframes,nbad,txok);
        #line 581 
        rc_update = (_Bool)0;
        #line 582 
        if (bf->bf_lastbf == bf) 
                                 #line 583 
                                 ath_dynack_sample_tx_ts(sc->sc_ah,bf->bf_mpdu,ts,sta);
      }
      #line 588 
      ath_tx_complete_buf(sc,bf,txq,& bf_head,sta,ts,txfail == 0);
    }
    else {
      #line 591 
      if ((tx_info->flags & 268435456U) != 0U) {
        #line 592 
        tx_info->flags &= 4026531839U;
        #line 593 
        ieee80211_sta_eosp(sta);
      }
      #line 596 
      if (bf->bf_next == (struct ath_buf *)0 && (int)bf_last->bf_state.stale != 0) {
        #line 597 
        struct ath_buf *tbf;
        #line 599 
        tbf = ath_clone_txbuf(sc,bf_last);
        #line 605 
        if (tbf == (struct ath_buf *)0) {
          #line 611 
          int __UNIQUE_ID___x559;
          #line 611 
          int tmp_1;
          #line 606 
          ath_tx_update_baw(sc,tid,bf);
          #line 608 
          ath_tx_complete_buf(sc,bf,txq,& bf_head,(struct ieee80211_sta *)0,ts,0);
          {
            #line 611 
            __UNIQUE_ID___x559 = bar_index;
            #line 611 
            int __UNIQUE_ID___y560 = ((int)seqno - (int)seq_first) & 4095;
            #line 611 
            if (__UNIQUE_ID___x559 > __UNIQUE_ID___y560) 
                                                         #line 611 
                                                         tmp_1 = __UNIQUE_ID___x559; else 
                                                                    #line 611 
                                                                    tmp_1 = __UNIQUE_ID___y560;
            }
          #line 611 
          bar_index = tmp_1;
          #line 613 
          break;
        }
        #line 616 
        fi->bf = tbf;
      }
      #line 623 
      __skb_queue_tail_0(& bf_pending,skb);
    }
    #line 626 
    bf = bf_next;
  }
  #line 630 
  if (skb_queue_empty(& bf_pending) == 0) {
    #line 631 
    if ((int)an->sleeping != 0) 
                                #line 632 
                                ieee80211_sta_set_buffered(sta,(unsigned char)((int)tid->tidno),(_Bool)1);
    #line 634 
    skb_queue_splice_tail(& bf_pending,& tid->retry_q);
    #line 635 
    if (! an->sleeping) {
      #line 636 
      ath_tx_queue_tid(sc,tid);
      #line 637 
      if (((int)ts->ts_status & 3) != 0) 
                                         #line 638 
                                         tid->clear_ps_filter = (_Bool)1;
    }
  }
  #line 642 
  if (bar_index >= 0) {
    #line 643 
    u16 bar_seq = (unsigned short)((unsigned int)((unsigned short)(bar_index + (int)seq_first)) & 4095U);
    #line 645 
    if ((((int)bar_seq - (int)tid->seq_start) & 4095) < (int)tid->baw_size) 
      #line 646 
      tid->bar_index = (signed char)((int)bar_seq - (int)tid->seq_start);
    #line 648 
    ath_txq_unlock_0(sc,txq);
    #line 649 
    ath_send_bar(tid,(unsigned short)((int)((unsigned int)(bar_index + (int)seq_first) + 1U) & 4095));
    #line 650 
    ath_txq_lock_0(sc,txq);
  }
  #line 653 
  if (needreset != 0) 
                      #line 654 
                      ath9k_queue_reset(sc,(enum ath_reset_type)RESET_TYPE_TX_ERROR);
  #line 655 
  return;
}

#line 657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static bool bf_is_ampdu_not_probing(struct ath_buf *bf)
{
  #line 659 
  struct ieee80211_tx_info *info = IEEE80211_SKB_CB(bf->bf_mpdu);
  #line 660 
  return (_Bool)((((int)bf->bf_state.bf_type & 1) != 0 && (info->flags & 4096U) == 0U) != 0);
}

#line 663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_count_airtime(struct ath_softc *sc, struct ieee80211_sta *sta, struct ath_buf *bf, struct ath_tx_status *ts, u8 tid)
{
  #line 670 
  int i;
  #line 669 
  u32 airtime = 0U;
  #line 672 
  airtime = ts->duration * (unsigned int)((int)ts->ts_longretry + 1) + airtime;
  #line 673 
  i = 0;
  #line 673 
  while ((int)ts->ts_rateindex > i) {
    {
      #line 674 
      int rate_dur = ath9k_hw_get_duration(sc->sc_ah,bf->bf_desc,i);
      #line 675 
      airtime = (unsigned int)((int)bf->rates[i].count * rate_dur) + airtime;
    }
    #line 673 
    i ++;
  }
  #line 678 
  ieee80211_sta_register_airtime(sta,(unsigned char)((int)tid),airtime,0U);
  #line 679 
  return;
}

#line 681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_process_buffer(struct ath_softc *sc, struct ath_txq *txq, struct ath_tx_status *ts, struct ath_buf *bf, struct list_head *bf_head)
{
  #line 686 
  struct ieee80211_tx_info *info;
  #line 687 
  struct ieee80211_sta *sta;
  #line 688 
  struct ieee80211_hdr *hdr;
  #line 690 
  bool txok;
  #line 690 
  bool flush;
  #line 685 
  struct ieee80211_hw *hw = sc->hw;
  #line 689 
  struct ath_atx_tid *tid = (struct ath_atx_tid *)0;
  #line 692 
  txok = (_Bool)(((int)ts->ts_status & 95) == 0);
  #line 693 
  flush = (_Bool)(((int)ts->ts_status & 64) != 0);
  #line 694 
  txq->axq_tx_inprogress = (_Bool)0;
  #line 696 
  (txq->axq_depth) --;
  #line 697 
  if ((int)bf_is_ampdu_not_probing(bf) != 0) 
                                             #line 698 
                                             (txq->axq_ampdu_depth) --;
  #line 700 
  ts->duration = (unsigned int)ath9k_hw_get_duration(sc->sc_ah,bf->bf_desc,(int)ts->ts_rateindex);
  #line 703 
  hdr = (struct ieee80211_hdr *)(bf->bf_mpdu)->data;
  #line 704 
  sta = ieee80211_find_sta_by_ifaddr(hw,(u8 *)(& hdr->addr1),(u8 *)(& hdr->addr2));
  #line 705 
  if (sta != (struct ieee80211_sta *)0) {
    #line 706 
    struct ath_node *an = (struct ath_node *)(& sta->drv_priv);
    #line 707 
    tid = ath_get_skb_tid(sc,an,bf->bf_mpdu);
    #line 708 
    ath_tx_count_airtime(sc,sta,bf,ts,(unsigned char)((int)tid->tidno));
    #line 709 
    if (((int)ts->ts_status & 3) != 0) 
                                       #line 710 
                                       tid->clear_ps_filter = (_Bool)1;
  }
  #line 713 
  if (((int)bf->bf_state.bf_type & 1) == 0) {
    #line 714 
    if (! flush) {
      #line 715 
      info = IEEE80211_SKB_CB(bf->bf_mpdu);
      #line 716 
      memcpy((void *)(& info->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_3075_193.__anonCompField___anonunion_3076_192.rates),(void *)(& bf->rates),12UL);
      #line 718 
      ath_tx_rc_status(sc,bf,ts,1,(int)txok == 0,(int)txok);
      #line 719 
      ath_dynack_sample_tx_ts(sc->sc_ah,bf->bf_mpdu,ts,sta);
    }
    #line 722 
    ath_tx_complete_buf(sc,bf,txq,bf_head,sta,ts,(int)txok);
  }
  else 
       #line 724 
       ath_tx_complete_aggr(sc,txq,bf,bf_head,sta,tid,ts,(int)txok);
  #line 726 
  if (! flush) 
               #line 727 
               ath_txq_schedule(sc,txq);
  #line 728 
  return;
}

#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static bool ath_lookup_legacy(struct ath_buf *bf)
{
  #line 732 
  struct sk_buff *skb;
  #line 733 
  struct ieee80211_tx_info *tx_info;
  #line 734 
  struct ieee80211_tx_rate *rates;
  #line 735 
  int i;
  #line 737 
  skb = bf->bf_mpdu;
  #line 738 
  tx_info = IEEE80211_SKB_CB(skb);
  #line 739 
  rates = (struct ieee80211_tx_rate *)(& tx_info->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_3075_193.__anonCompField___anonunion_3076_192.rates);
  #line 741 
  i = 0;
  #line 741 
  while (i <= 3) {
    #line 742 
    if ((unsigned int)(rates + (unsigned long)i)->count == 0U || (int)(rates + (unsigned long)i)->idx < 0) 
      #line 743 
      break;
    #line 745 
    if (((int)(rates + (unsigned long)i)->flags & 8) == 0) 
                                                           #line 746 
                                                           return (_Bool)1;
    #line 741 
    i ++;
  }
  #line 749 
  return (_Bool)0;
}

#line 752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static u32 ath_lookup_rate(struct ath_softc *sc, struct ath_buf *bf, struct ath_atx_tid *tid)
{
  #line 804 
  u32 tmp_1;
  #line 804 
  u32 __UNIQUE_ID___x563;
  #line 755 
  struct sk_buff *skb;
  #line 756 
  struct ieee80211_tx_info *tx_info;
  #line 757 
  struct ieee80211_tx_rate *rates;
  #line 758 
  u32 max_4ms_framelen;
  #line 758 
  u32 frmlen;
  #line 759 
  u16 aggr_limit;
  #line 759 
  u16 bt_aggr_limit;
  #line 761 
  int i;
  #line 759 
  u16 legacy = (unsigned short)0U;
  #line 760 
  int q = (tid->txq)->mac80211_qnum;
  #line 763 
  skb = bf->bf_mpdu;
  #line 764 
  tx_info = IEEE80211_SKB_CB(skb);
  #line 765 
  rates = (struct ieee80211_tx_rate *)(& bf->rates);
  #line 771 
  max_4ms_framelen = 65535U;
  #line 773 
  i = 0;
  #line 773 
  while (i <= 3) {
    {
      #line 793 
      u32 __UNIQUE_ID___x561;
      #line 793 
      u32 tmp;
      #line 774 
      int modeidx;
      #line 776 
      if ((unsigned int)(rates + (unsigned long)i)->count == 0U) 
                                                                 #line 777 
                                                                 goto __Cont;
      #line 779 
      if (((int)(rates + (unsigned long)i)->flags & 8) == 0) {
        #line 780 
        legacy = (unsigned short)1U;
        #line 781 
        break;
      }
      #line 784 
      if (((int)(rates + (unsigned long)i)->flags & 32) != 0) 
                                                              #line 785 
                                                              modeidx = 2; else 
                                                                    #line 787 
                                                                    modeidx = 0;
      #line 789 
      if (((int)(rates + (unsigned long)i)->flags & 128) != 0) 
                                                               #line 790 
                                                               modeidx ++;
      #line 792 
      frmlen = (unsigned int)sc->tx.max_aggr_framelen[q][modeidx][(int)(rates + (unsigned long)i)->idx];
      {
        #line 793 
        __UNIQUE_ID___x561 = max_4ms_framelen;
        #line 793 
        u32 __UNIQUE_ID___y562 = frmlen;
        #line 793 
        if (__UNIQUE_ID___x561 < __UNIQUE_ID___y562) 
                                                     #line 793 
                                                     tmp = __UNIQUE_ID___x561; else 
                                                                    #line 793 
                                                                    tmp = __UNIQUE_ID___y562;
        }
      #line 793 
      max_4ms_framelen = tmp;
    }
    #line 773 
    __Cont: 
            #line 773 
    i ++;
  }
  #line 801 
  if ((tx_info->flags & 4096U) != 0U || (unsigned int)legacy != 0U) 
                                                                    #line 802 
                                                                    return 0U;
  {
    #line 804 
    __UNIQUE_ID___x563 = max_4ms_framelen;
    #line 804 
    unsigned int __UNIQUE_ID___y564 = 65535U;
    #line 804 
    if (__UNIQUE_ID___x563 < __UNIQUE_ID___y564) 
                                                 #line 804 
                                                 tmp_1 = __UNIQUE_ID___x563; else 
                                                                    #line 804 
                                                                    tmp_1 = __UNIQUE_ID___y564;
    }
  #line 804 
  aggr_limit = (unsigned short)tmp_1;
  #line 809 
  bt_aggr_limit = ath9k_btcoex_aggr_limit(sc,max_4ms_framelen);
  #line 810 
  if ((unsigned int)bt_aggr_limit != 0U) 
                                         #line 811 
                                         aggr_limit = bt_aggr_limit;
  #line 813 
  if ((unsigned int)(tid->an)->maxampdu != 0U) {
    #line 814 
    u16 __UNIQUE_ID___x565;
    #line 814 
    int tmp_3;
    {
      #line 814 
      __UNIQUE_ID___x565 = aggr_limit;
      #line 814 
      u16 __UNIQUE_ID___y566 = (tid->an)->maxampdu;
      #line 814 
      if ((int)__UNIQUE_ID___x565 < (int)__UNIQUE_ID___y566) 
                                                             #line 814 
                                                             tmp_3 = (int)__UNIQUE_ID___x565; else 
                                                                    #line 814 
                                                                    tmp_3 = (int)__UNIQUE_ID___y566;
      }
    #line 814 
    aggr_limit = (unsigned short)tmp_3;
  }
  #line 816 
  return (unsigned int)aggr_limit;
}

#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static int ath_compute_num_delims(struct ath_softc *sc, struct ath_atx_tid *tid, struct ath_buf *bf, u16 frmlen, bool first_subfrm)
{
  #line 828 
  u32 nsymbits;
  #line 828 
  u32 nsymbols;
  #line 829 
  u16 minlen;
  #line 830 
  u8 flags;
  #line 830 
  u8 rix;
  #line 831 
  int width;
  #line 831 
  int streams;
  #line 831 
  int half_gi;
  #line 831 
  int ndelim;
  #line 831 
  int mindelim;
  #line 832 
  struct ath_frame_info *fi = get_frame_info(bf->bf_mpdu);
  #line 835 
  if ((unsigned int)frmlen <= 255U) 
                                    #line 835 
                                    ndelim = (259 - (int)frmlen) / 4; else 
                                                                    #line 835 
                                                                    ndelim = 0;
  #line 843 
  if ((unsigned int)fi->keyix != 255U && ((sc->sc_ah)->caps.hw_caps & 16U) == 0U) 
    #line 845 
    ndelim += 10;
  #line 851 
  if (((int)first_subfrm != 0 && ((sc->sc_ah)->hw_version.macVersion != 448U || (unsigned int)(sc->sc_ah)->hw_version.macRev <= 3U)) && ((sc->sc_ah)->ent_mode & 8388608U) != 0U) {
    #line 853 
    int __UNIQUE_ID___x567;
    #line 853 
    int tmp_0;
    {
      #line 853 
      __UNIQUE_ID___x567 = ndelim;
      #line 853 
      int __UNIQUE_ID___y568 = 60;
      #line 853 
      if (__UNIQUE_ID___x567 > __UNIQUE_ID___y568) 
                                                   #line 853 
                                                   tmp_0 = __UNIQUE_ID___x567; else 
                                                                    #line 853 
                                                                    tmp_0 = __UNIQUE_ID___y568;
      }
    #line 853 
    ndelim = tmp_0;
  }
  #line 865 
  if ((unsigned int)(tid->an)->mpdudensity == 0U) 
                                                  #line 866 
                                                  return ndelim;
  #line 868 
  rix = (unsigned char)bf->rates[0].idx;
  #line 869 
  flags = (unsigned char)bf->rates[0].flags;
  #line 870 
  width = ((int)flags >> 5) & 1;
  #line 871 
  half_gi = (int)flags >> 7;
  #line 873 
  if (half_gi != 0) 
                    #line 874 
                    nsymbols = (unsigned int)(((int)(tid->an)->mpdudensity * 5 + -4) / 18); else 
                                                                    #line 876 
                                                                    nsymbols = (unsigned int)((int)(tid->an)->mpdudensity >> 2);
  #line 878 
  if (nsymbols == 0U) 
                      #line 879 
                      nsymbols = 1U;
  #line 881 
  streams = (((int)rix >> 3) & 15) + 1;
  #line 882 
  nsymbits = (unsigned int)((int)bits_per_symbol[(int)rix & 7][width] * streams);
  #line 883 
  minlen = (unsigned short)((nsymbols * nsymbits) / 8U);
  #line 885 
  if ((int)frmlen < (int)minlen) {
    #line 887 
    int __UNIQUE_ID___x569;
    #line 887 
    int tmp_2;
    #line 886 
    mindelim = ((int)minlen - (int)frmlen) / 4;
    {
      #line 887 
      __UNIQUE_ID___x569 = mindelim;
      #line 887 
      int __UNIQUE_ID___y570 = ndelim;
      #line 887 
      if (__UNIQUE_ID___x569 > __UNIQUE_ID___y570) 
                                                   #line 887 
                                                   tmp_2 = __UNIQUE_ID___x569; else 
                                                                    #line 887 
                                                                    tmp_2 = __UNIQUE_ID___y570;
      }
    #line 887 
    ndelim = tmp_2;
  }
  #line 890 
  return ndelim;
}

#line 894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static int ath_tx_get_tid_subframe(struct ath_softc *sc, struct ath_txq *txq, struct ath_atx_tid *tid, struct ath_buf **buf)
{
  #line 897 
  struct ieee80211_tx_info *tx_info;
  #line 898 
  struct ath_frame_info *fi;
  #line 899 
  struct ath_buf *bf;
  #line 900 
  struct sk_buff *skb;
  #line 901 
  u16 seqno;
  #line 902 
  int ret;
  #line 900 
  struct sk_buff *first_skb = (struct sk_buff *)0;
  #line 904 
  while (1) {
    #line 905 
    ret = ath_tid_dequeue(tid,& skb);
    #line 906 
    if (ret < 0) 
                 #line 907 
                 return ret;
    #line 909 
    fi = get_frame_info(skb);
    #line 910 
    bf = fi->bf;
    #line 911 
    if (fi->bf == (struct ath_buf *)0) 
                                       #line 912 
                                       bf = ath_tx_setup_buffer(sc,txq,tid,skb); else 
                                                                    #line 914 
                                                                    bf->bf_state.stale = (_Bool)0;
    #line 916 
    if (bf == (struct ath_buf *)0) {
      #line 917 
      ath_txq_skb_done(sc,txq,skb);
      #line 918 
      ieee80211_free_txskb(sc->hw,skb);
      #line 919 
      continue;
    }
    #line 922 
    bf->bf_next = (struct ath_buf *)0;
    #line 923 
    bf->bf_lastbf = bf;
    #line 925 
    tx_info = IEEE80211_SKB_CB(skb);
    #line 926 
    tx_info->flags &= 4026531831U;
    #line 934 
    if (! tid->active) 
                       #line 935 
                       tx_info->flags &= 4294967231U;
    #line 937 
    if ((tx_info->flags & 64U) == 0U) {
      #line 938 
      bf->bf_state.bf_type = (unsigned char)0U;
      #line 939 
      break;
    }
    #line 942 
    bf->bf_state.bf_type = (unsigned char)3U;
    #line 943 
    seqno = bf->bf_state.seqno;
    #line 946 
    if ((((int)seqno - (int)tid->seq_start) & 4095) >= (int)tid->baw_size) {
      #line 947 
      __skb_queue_tail_0(& tid->retry_q,skb);
      #line 952 
      if (! skb_queue_is_first(& tid->retry_q,skb)) {
        #line 953 
        int __ret_warn_on;
        #line 953 
        __ret_warn_on = skb == first_skb;
        #line 953 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 954 
          ldv_inline_asm();
          #line 955 
          ldv_inline_asm();
        }
        #line 952 
        if ((long)((long)(__ret_warn_on != 0)) == 0L) {
          #line 954 
          if (first_skb == (struct sk_buff *)0) 
                                                #line 955 
                                                first_skb = skb;
          #line 956 
          continue;
        }
      }
      #line 958 
      return -115;
    }
    #line 961 
    if ((int)tid->bar_index > (((int)seqno - (int)tid->seq_start) & 4095)) {
      #line 963 
      struct list_head bf_head;
      #line 962 
      struct ath_tx_status ts = {.ts_tstamp = 0U, .ts_seqnum = (unsigned short)0, .ts_status = (unsigned char)0, .ts_rateindex = (unsigned char)0, .ts_rssi = (signed char)0, .ts_shortretry = (unsigned char)0, .ts_longretry = (unsigned char)0, .ts_virtcol = (unsigned char)0, .ts_flags = (unsigned char)0, .ts_rssi_ctl0 = (signed char)0, .ts_rssi_ctl1 = (signed char)0, .ts_rssi_ctl2 = (signed char)0, .ts_rssi_ext0 = (signed char)0, .ts_rssi_ext1 = (signed char)0, .ts_rssi_ext2 = (signed char)0, .qid = (unsigned char)0, .desc_id = (unsigned short)0, .tid = (unsigned char)0, .ba_low = 0U, .ba_high = 0U, .evm0 = 0U, .evm1 = 0U, .evm2 = 0U, .duration = 0U};
      #line 965 
      INIT_LIST_HEAD_0(& bf_head);
      #line 966 
      list_add(& bf->list,& bf_head);
      #line 967 
      ath_tx_update_baw(sc,tid,bf);
      #line 968 
      ath_tx_complete_buf(sc,bf,txq,& bf_head,(struct ieee80211_sta *)0,& ts,0);
      #line 969 
      continue;
    }
    #line 972 
    if (((int)bf->bf_state.bf_type & 1) != 0) 
                                              #line 973 
                                              ath_tx_addto_baw(sc,tid,bf);
    #line 975 
    break;
  }
  #line 978 
  *buf = bf;
  #line 979 
  return 0;
}

#line 983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static int ath_tx_form_aggr(struct ath_softc *sc, struct ath_txq *txq, struct ath_atx_tid *tid, struct list_head *bf_q, struct ath_buf *bf_first)
{
  #line 989 
  int ndelim;
  #line 989 
  int ret;
  #line 991 
  u16 al_delta;
  #line 992 
  struct ieee80211_tx_info *tx_info;
  #line 993 
  struct ath_frame_info *fi;
  #line 994 
  struct sk_buff *skb;
  #line 988 
  struct ath_buf *bf = bf_first;
  #line 988 
  struct ath_buf *bf_prev = (struct ath_buf *)0;
  #line 989 
  int nframes = 0;
  #line 990 
  u16 aggr_limit = (unsigned short)0U;
  #line 990 
  u16 al = (unsigned short)0U;
  #line 990 
  u16 bpad = (unsigned short)0U;
  #line 991 
  u16 h_baw = (unsigned short)((unsigned int)tid->baw_size / 2U);
  #line 997 
  bf = bf_first;
  #line 998 
  aggr_limit = (unsigned short)ath_lookup_rate(sc,bf,tid);
  #line 1000 
  while (bf != (struct ath_buf *)0) {
    #line 1002 
    skb = bf->bf_mpdu;
    #line 1003 
    fi = get_frame_info(skb);
    #line 1006 
    al_delta = (unsigned short)((unsigned int)fi->framelen + 4U);
    #line 1007 
    if (nframes != 0) {
      #line 1008 
      if ((int)aggr_limit < ((int)al + (int)bpad) + (int)al_delta) 
                                                                   #line 1008 
                                                                   goto _LOR;
      else {
        #line 1008 
        if ((int)ath_lookup_legacy(bf) != 0) 
                                             #line 1008 
                                             goto _LOR;
        else 
          #line 1009 
          if ((int)h_baw <= nframes) 
                                     #line 1008 
                                     _LOR: 
                                           #line 1010 
                                           goto stop;
      }
      #line 1012 
      tx_info = IEEE80211_SKB_CB(bf->bf_mpdu);
      #line 1013 
      if ((tx_info->flags & 4096U) != 0U || (tx_info->flags & 64U) == 0U) 
        #line 1015 
        goto stop;
    }
    #line 1019 
    al = (unsigned short)(((int)bpad + (int)al_delta) + (int)al);
    #line 1025 
    ndelim = ath_compute_num_delims(sc,tid,bf_first,(unsigned short)((int)fi->framelen),(_Bool)(nframes == 0));
    #line 1027 
    bpad = (unsigned short)((int)((unsigned short)((4 - ((int)al_delta & 3)) % 4)) + ((int)((unsigned short)ndelim) << 2U));
    #line 1029 
    nframes ++;
    #line 1030 
    bf->bf_next = (struct ath_buf *)0;
    #line 1033 
    bf->bf_state.ndelim = (unsigned char)ndelim;
    #line 1035 
    list_add_tail_1(& bf->list,bf_q);
    #line 1036 
    if (bf_prev != (struct ath_buf *)0) 
                                        #line 1037 
                                        bf_prev->bf_next = bf;
    #line 1039 
    bf_prev = bf;
    #line 1041 
    ret = ath_tx_get_tid_subframe(sc,txq,tid,& bf);
    #line 1042 
    if (ret < 0) 
                 #line 1043 
                 break;
  }
  #line 1045 
  goto finish;
  #line 1046 
  stop: 
        #line 1046 
  ;
  #line 1047 
  __skb_queue_tail_0(& tid->retry_q,bf->bf_mpdu);
  #line 1048 
  finish: 
          #line 1048 
  ;
  #line 1049 
  bf = bf_first;
  #line 1050 
  bf->bf_lastbf = bf_prev;
  #line 1052 
  if (bf == bf_prev) {
    #line 1053 
    al = get_frame_info(bf->bf_mpdu)->framelen;
    #line 1054 
    bf->bf_state.bf_type = (unsigned char)1U;
  }
  else 
       #line 1056 
       (sc->debug.stats.txstats[txq->axq_qnum].a_aggr) ++;
  #line 1059 
  return (int)al;
}

#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
u32 ath_pkt_duration(struct ath_softc *sc, u8 rix, int pktlen, int width, int half_gi, bool shortPreamble)
{
  #line 1072 
  u32 nbits;
  #line 1072 
  u32 nsymbits;
  #line 1072 
  u32 duration;
  #line 1072 
  u32 nsymbols;
  #line 1073 
  int streams;
  #line 1076 
  streams = (((int)rix >> 3) & 15) + 1;
  #line 1077 
  nbits = (unsigned int)((pktlen << 3) + 22);
  #line 1078 
  nsymbits = (unsigned int)((int)bits_per_symbol[(int)rix & 7][width] * streams);
  #line 1079 
  nsymbols = ((nbits + nsymbits) + 4294967295U) / nsymbits;
  #line 1081 
  if (half_gi == 0) 
                    #line 1082 
                    duration = nsymbols << 2; else 
                                                   #line 1084 
                                                   duration = (nsymbols * 18U + 4U) / 5U;
  #line 1087 
  duration = (unsigned int)((streams + 8) * 4) + duration;
  #line 1089 
  return duration;
}

#line 1092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static int ath_max_framelen(int usec, int mcs, bool ht40, bool sgi)
{
  #line 1095 
  int symbols;
  #line 1095 
  int bits;
  #line 1094 
  int streams = ((mcs >> 3) & 15) + 1;
  #line 1096 
  int bytes = 0;
  #line 1098 
  usec -= (streams + 8) * 4;
  #line 1099 
  if ((int)sgi != 0) 
                     #line 1099 
                     symbols = (usec * 5 + -4) / 18; else 
                                                          #line 1099 
                                                          symbols = usec >> 2;
  #line 1100 
  bits = ((int)bits_per_symbol[mcs % 8][(int)ht40] * symbols) * streams;
  #line 1101 
  bits += -22;
  #line 1102 
  bytes = bits / 8;
  #line 1103 
  if (bytes > 65532) 
                     #line 1104 
                     bytes = 65532;
  #line 1106 
  return bytes;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_update_max_aggr_framelen(struct ath_softc *sc, int queue, int txop)
{
  #line 1111 
  u16 *cur_ht20;
  #line 1111 
  u16 *cur_ht20_sgi;
  #line 1111 
  u16 *cur_ht40;
  #line 1111 
  u16 *cur_ht40_sgi;
  #line 1112 
  int mcs;
  #line 1115 
  if (txop == 0 || txop > 4096) 
                                #line 1116 
                                txop = 4096;
  #line 1118 
  cur_ht20 = (u16 *)(& sc->tx.max_aggr_framelen[queue][0]);
  #line 1119 
  cur_ht20_sgi = (u16 *)(& sc->tx.max_aggr_framelen[queue][1]);
  #line 1120 
  cur_ht40 = (u16 *)(& sc->tx.max_aggr_framelen[queue][2]);
  #line 1121 
  cur_ht40_sgi = (u16 *)(& sc->tx.max_aggr_framelen[queue][3]);
  #line 1122 
  mcs = 0;
  #line 1122 
  while (mcs <= 31) {
    {
      #line 1123 
      *(cur_ht20 + (unsigned long)mcs) = (unsigned short)ath_max_framelen(txop,mcs,(_Bool)0,(_Bool)0);
      #line 1124 
      *(cur_ht20_sgi + (unsigned long)mcs) = (unsigned short)ath_max_framelen(txop,mcs,(_Bool)0,(_Bool)1);
      #line 1125 
      *(cur_ht40 + (unsigned long)mcs) = (unsigned short)ath_max_framelen(txop,mcs,(_Bool)1,(_Bool)0);
      #line 1126 
      *(cur_ht40_sgi + (unsigned long)mcs) = (unsigned short)ath_max_framelen(txop,mcs,(_Bool)1,(_Bool)1);
    }
    #line 1122 
    mcs ++;
  }
  #line 1128 
  return;
}

#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static u8 ath_get_rate_txpower(struct ath_softc *sc, struct ath_buf *bf, u8 rateidx, bool is_40, bool is_cck)
{
  #line 1133 
  u8 max_power;
  #line 1134 
  struct sk_buff *skb;
  #line 1135 
  struct ath_frame_info *fi;
  #line 1136 
  struct ieee80211_tx_info *info;
  #line 1137 
  struct ath_hw *ah = sc->sc_ah;
  #line 1139 
  if ((int)sc->tx99_state != 0 || ! ah->tpc_enabled) 
                                                     #line 1140 
                                                     return (unsigned char)63U;
  #line 1142 
  skb = bf->bf_mpdu;
  #line 1143 
  fi = get_frame_info(skb);
  #line 1144 
  info = IEEE80211_SKB_CB(skb);
  #line 1146 
  if (ah->hw_version.macVersion <= 447U) {
    #line 1181 
    int tmp_2;
    #line 1182 
    unsigned char __UNIQUE_ID___x574;
    #line 1182 
    int tmp_4;
    #line 1181 
    int __UNIQUE_ID___x572;
    #line 1147 
    int txpower = (int)fi->tx_power;
    #line 1149 
    if ((int)is_40 != 0) {
      #line 1150 
      u8 power_ht40delta;
      #line 1151 
      struct ar5416_eeprom_def *eep = & ah->eeprom.def;
      #line 1152 
      u16 eeprom_rev = (unsigned short)(*((ah->eep_ops)->get_eeprom_rev))(ah);
      #line 1154 
      if ((unsigned int)eeprom_rev > 1U) {
        #line 1155 
        bool is_2ghz;
        #line 1156 
        struct modal_eep_header *pmodal;
        #line 1158 
        is_2ghz = (_Bool)((unsigned int)info->band == 0U);
        #line 1159 
        pmodal = & eep->modalHeader[(int)is_2ghz];
        #line 1160 
        power_ht40delta = pmodal->ht40PowerIncForPdadc;
      }
      else 
           #line 1162 
           power_ht40delta = (unsigned char)2U;
      #line 1164 
      txpower = (int)power_ht40delta + txpower;
    }
    #line 1167 
    if ((ah->hw_version.macVersion == 384U || ah->hw_version.macVersion == 192U) || ah->hw_version.macVersion == 320U) 
      #line 1169 
      txpower += 10;
    else 
      #line 1170 
      if (ah->hw_version.macVersion > 127U) {
        #line 1171 
        s8 power_offset;
        #line 1173 
        power_offset = (signed char)(*((ah->eep_ops)->get_eeprom))(ah,
                                       (enum eeprom_param)EEP_PWR_TABLE_OFFSET);
        #line 1175 
        txpower -= (int)power_offset * 2;
      }
    #line 1178 
    if (ah->hw_version.macVersion > 127U) {
      #line 1178 
      if ((*((ah->eep_ops)->get_eeprom))(ah,(enum eeprom_param)EEP_OL_PWRCTRL) != 0U) 
        #line 1178 
        if ((int)is_cck != 0) 
                              #line 1179 
                              txpower += -2;
    }
    {
      #line 1181 
      __UNIQUE_ID___x572 = txpower;
      #line 1181 
      int __UNIQUE_ID___y573 = 0;
      #line 1181 
      if (__UNIQUE_ID___x572 > __UNIQUE_ID___y573) 
                                                   #line 1181 
                                                   tmp_2 = __UNIQUE_ID___x572; else 
                                                                    #line 1181 
                                                                    tmp_2 = __UNIQUE_ID___y573;
      }
    #line 1181 
    txpower = tmp_2;
    {
      #line 1182 
      __UNIQUE_ID___x574 = ah->tx_power[(int)rateidx];
      #line 1182 
      unsigned char __UNIQUE_ID___y575 = (unsigned char)txpower;
      #line 1182 
      if ((int)__UNIQUE_ID___x574 < (int)__UNIQUE_ID___y575) 
                                                             #line 1182 
                                                             tmp_4 = (int)__UNIQUE_ID___x574; else 
                                                                    #line 1182 
                                                                    tmp_4 = (int)__UNIQUE_ID___y575;
      }
    #line 1182 
    max_power = (unsigned char)tmp_4;
    #line 1188 
    if ((unsigned int)max_power == 0U && ah->hw_version.macVersion <= 127U) 
      #line 1189 
      max_power = (unsigned char)1U;
  }
  else 
    #line 1190 
    if ((unsigned int)bf->bf_state.bfs_paprd == 0U) 
      #line 1191 
      if ((unsigned int)rateidx <= 7U && (info->flags & 25165824U) != 0U) {
        #line 1192 
        unsigned char __UNIQUE_ID___x576;
        #line 1192 
        int tmp_6;
        {
          #line 1192 
          __UNIQUE_ID___x576 = ah->tx_power_stbc[(int)rateidx];
          #line 1192 
          unsigned char __UNIQUE_ID___y577 = fi->tx_power;
          #line 1192 
          if ((int)__UNIQUE_ID___x576 < (int)__UNIQUE_ID___y577) 
                                                                 #line 1192 
                                                                 tmp_6 = (int)__UNIQUE_ID___x576; else 
                                                                    #line 1192 
                                                                    tmp_6 = (int)__UNIQUE_ID___y577;
          }
        #line 1192 
        max_power = (unsigned char)tmp_6;
      }
      else {
        #line 1195 
        unsigned char __UNIQUE_ID___x578;
        #line 1195 
        int tmp_8;
        {
          #line 1195 
          __UNIQUE_ID___x578 = ah->tx_power[(int)rateidx];
          #line 1195 
          unsigned char __UNIQUE_ID___y579 = fi->tx_power;
          #line 1195 
          if ((int)__UNIQUE_ID___x578 < (int)__UNIQUE_ID___y579) 
                                                                 #line 1195 
                                                                 tmp_8 = (int)__UNIQUE_ID___x578; else 
                                                                    #line 1195 
                                                                    tmp_8 = (int)__UNIQUE_ID___y579;
          }
        #line 1195 
        max_power = (unsigned char)tmp_8;
      }
    else 
         #line 1198 
         max_power = (unsigned char)ah->paprd_training_power;
  #line 1201 
  return max_power;
}

#line 1204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_buf_set_rate(struct ath_softc *sc, struct ath_buf *bf, struct ath_tx_info *info, int len, bool rts)
{
  #line 1209 
  struct sk_buff *skb;
  #line 1210 
  struct ieee80211_tx_info *tx_info;
  #line 1211 
  struct ieee80211_tx_rate *rates;
  #line 1212 
  struct ieee80211_rate *rate;
  #line 1213 
  struct ieee80211_hdr *hdr;
  #line 1216 
  int i;
  #line 1225 
  int tmp_2;
  #line 1207 
  struct ath_hw *ah = sc->sc_ah;
  #line 1208 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 1214 
  struct ath_frame_info *fi = get_frame_info(bf->bf_mpdu);
  #line 1215 
  u32 rts_thresh = ((sc->hw)->wiphy)->rts_threshold;
  #line 1217 
  u8 rix = (unsigned char)0U;
  #line 1219 
  skb = bf->bf_mpdu;
  #line 1220 
  tx_info = IEEE80211_SKB_CB(skb);
  #line 1221 
  rates = (struct ieee80211_tx_rate *)(& bf->rates);
  #line 1222 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 1225 
  if ((int)ieee80211_is_pspoll((unsigned short)((int)hdr->frame_control)) != 0) 
    #line 1225 
    tmp_2 = 0; else 
                    #line 1225 
                    tmp_2 = 1;
  #line 1225 
  info->dur_update = (_Bool)(tmp_2 != 0);
  #line 1226 
  info->rtscts_rate = fi->rtscts_rate;
  #line 1228 
  i = 0;
  #line 1228 
  while ((unsigned int)i <= 3U) {
    {
      #line 1229 
      bool is_40;
      #line 1229 
      bool is_sgi;
      #line 1229 
      bool is_sp;
      #line 1229 
      bool is_cck;
      #line 1230 
      int phy;
      #line 1232 
      if ((unsigned int)(rates + (unsigned long)i)->count == 0U || (int)(rates + (unsigned long)i)->idx < 0) 
        #line 1233 
        goto __Cont;
      #line 1235 
      rix = (unsigned char)(rates + (unsigned long)i)->idx;
      #line 1236 
      info->rates[i].Tries = (unsigned int)(rates + (unsigned long)i)->count;
      #line 1241 
      if (((((int)bf->bf_state.bf_type & 1) != 0 && ((int)bf->bf_state.bf_type & 2) == 0) && ((int)(rates + (unsigned long)i)->flags & 8) != 0) && (long)(rts_thresh != 4294967295U) != 0L) 
        #line 1244 
        if (rts_thresh == 0U || (unsigned int)len > rts_thresh) 
                                                                #line 1245 
                                                                rts = (_Bool)1;
      #line 1248 
      if ((int)rts != 0 || ((int)(rates + (unsigned long)i)->flags & 1) != 0) {
        #line 1249 
        info->rates[i].RateFlags |= 1U;
        #line 1250 
        info->flags |= 4U;
      }
      else 
        #line 1251 
        if (((int)(rates + (unsigned long)i)->flags & 2) != 0) {
          #line 1252 
          info->rates[i].RateFlags |= 1U;
          #line 1253 
          info->flags |= 8U;
        }
      #line 1256 
      if (((int)(rates + (unsigned long)i)->flags & 32) != 0) 
                                                              #line 1257 
                                                              info->rates[i].RateFlags |= 2U;
      #line 1258 
      if (((int)(rates + (unsigned long)i)->flags & 128) != 0) 
                                                               #line 1259 
                                                               info->rates[i].RateFlags |= 4U;
      #line 1261 
      is_sgi = (_Bool)(((int)(rates + (unsigned long)i)->flags & 128) != 0);
      #line 1262 
      is_40 = (_Bool)(((int)(rates + (unsigned long)i)->flags & 32) != 0);
      #line 1263 
      is_sp = (_Bool)(((int)(rates + (unsigned long)i)->flags & 4) != 0);
      #line 1265 
      if (((int)(rates + (unsigned long)i)->flags & 8) != 0) {
        #line 1267 
        info->rates[i].Rate = (unsigned int)rix | 128U;
        #line 1268 
        info->rates[i].ChSel = (unsigned int)ath_txchainmask_reduction(sc,(unsigned char)((int)ah->txchainmask),
                                  info->rates[i].Rate);
        #line 1270 
        info->rates[i].PktDuration = ath_pkt_duration(sc,(unsigned char)((int)rix),len,(int)is_40,(int)is_sgi,(_Bool)((bool)((int)is_sp) != 0));
        #line 1272 
        if ((unsigned int)rix <= 7U && (tx_info->flags & 25165824U) != 0U) 
          #line 1273 
          info->rates[i].RateFlags |= 8U;
        #line 1275 
        info->txpower[i] = ath_get_rate_txpower(sc,bf,(unsigned char)((int)rix),(_Bool)((bool)((int)is_40) != 0),(_Bool)0);
        #line 1277 
        goto __Cont;
      }
      #line 1281 
      rate = common->sbands[(int)tx_info->band].bitrates + (unsigned long)(rates + (unsigned long)i)->idx;
      #line 1282 
      if ((unsigned int)tx_info->band == 0U && (rate->flags & 16U) == 0U) 
        #line 1284 
        phy = 1; else 
                      #line 1286 
                      phy = 0;
      #line 1288 
      info->rates[i].Rate = (unsigned int)rate->hw_value;
      #line 1289 
      if ((unsigned int)rate->hw_value_short != 0U) {
        #line 1290 
        if (((int)(rates + (unsigned long)i)->flags & 4) != 0) 
                                                               #line 1291 
                                                               info->rates[i].Rate |= (unsigned int)rate->hw_value_short;
      }
      else 
           #line 1293 
           is_sp = (_Bool)0;
      #line 1296 
      if ((unsigned int)bf->bf_state.bfs_paprd != 0U) 
                                                      #line 1297 
                                                      info->rates[i].ChSel = (unsigned int)ah->txchainmask;
      else {
        #line 1299 
        info->rates[i].ChSel = (unsigned int)ath_txchainmask_reduction(sc,(unsigned char)((int)ah->txchainmask),
                                  info->rates[i].Rate);
      }
      #line 1302 
      info->rates[i].PktDuration = (unsigned int)ath9k_hw_computetxtime(sc->sc_ah,
                               (unsigned char)((int)((unsigned char)phy)),
                               (int)rate->bitrate * 100,(unsigned int)len,
                               (unsigned short)((int)rix),
                               (_Bool)((bool)((int)is_sp) != 0));
      #line 1305 
      is_cck = (_Bool)(info->rates[i].Rate + 4294967272U <= 6U);
      #line 1306 
      info->txpower[i] = ath_get_rate_txpower(sc,bf,(unsigned char)((int)rix),(_Bool)0,(_Bool)((bool)((int)is_cck) != 0));
    }
    #line 1228 
    __Cont: 
            #line 1228 
    i ++;
  }
  #line 1311 
  if (((int)bf->bf_state.bf_type & 2) != 0 && (int)(sc->sc_ah)->caps.rts_aggr_limit < len) 
    #line 1312 
    info->flags &= 4294967291U;
  #line 1315 
  if ((info->flags & 4U) != 0U) 
                                #line 1316 
                                info->flags &= 4294967287U;
  #line 1317 
  return;
}

#line 1319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static enum ath9k_pkt_type get_hw_packet_type(struct sk_buff *skb)
{
  #line 1321 
  struct ieee80211_hdr *hdr;
  #line 1322 
  enum ath9k_pkt_type htype;
  #line 1323 
  __le16 fc;
  #line 1325 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 1326 
  fc = hdr->frame_control;
  #line 1328 
  if ((int)ieee80211_is_beacon((unsigned short)((int)fc)) != 0) 
                                                                #line 1329 
                                                                htype = ATH9K_PKT_TYPE_BEACON;
  else {
    #line 1330 
    if ((int)ieee80211_is_probe_resp((unsigned short)((int)fc)) != 0) 
      #line 1331 
      htype = ATH9K_PKT_TYPE_PROBE_RESP;
    else {
      #line 1332 
      if ((int)ieee80211_is_atim((unsigned short)((int)fc)) != 0) 
                                                                  #line 1333 
                                                                  htype = ATH9K_PKT_TYPE_ATIM;
      else {
        #line 1334 
        if ((int)ieee80211_is_pspoll((unsigned short)((int)fc)) != 0) 
          #line 1335 
          htype = ATH9K_PKT_TYPE_PSPOLL; else 
                                              #line 1337 
                                              htype = ATH9K_PKT_TYPE_NORMAL;
      }
    }
  }
  #line 1339 
  return htype;
}

#line 1342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_fill_desc(struct ath_softc *sc, struct ath_buf *bf, struct ath_txq *txq, int len)
{
  #line 1347 
  struct ath_tx_info info;
  #line 1345 
  struct ath_hw *ah = sc->sc_ah;
  #line 1346 
  struct ath_buf *bf_first = (struct ath_buf *)0;
  #line 1348 
  u32 rts_thresh = ((sc->hw)->wiphy)->rts_threshold;
  #line 1349 
  bool rts = (_Bool)0;
  #line 1351 
  memset((void *)(& info),0,184UL);
  #line 1352 
  info.is_first = (_Bool)1;
  #line 1353 
  info.is_last = (_Bool)1;
  #line 1354 
  info.qcu = (unsigned char)txq->axq_qnum;
  #line 1356 
  while (bf != (struct ath_buf *)0) {
    #line 1357 
    struct sk_buff *skb = bf->bf_mpdu;
    #line 1358 
    struct ieee80211_tx_info *tx_info = IEEE80211_SKB_CB(skb);
    #line 1359 
    struct ath_frame_info *fi = get_frame_info(skb);
    #line 1360 
    bool aggr = (_Bool)(((int)bf->bf_state.bf_type & 2) != 0);
    #line 1362 
    info.type = get_hw_packet_type(skb);
    #line 1363 
    if (bf->bf_next != (struct ath_buf *)0) 
                                            #line 1364 
                                            info.link = (bf->bf_next)->bf_daddr;
    else 
      #line 1366 
      if ((int)sc->tx99_state != 0) 
                                    #line 1366 
                                    info.link = bf->bf_daddr; else 
                                                                   #line 1366 
                                                                   info.link = 0ULL;
    #line 1368 
    if (bf_first == (struct ath_buf *)0) {
      #line 1369 
      bf_first = bf;
      #line 1371 
      if (! sc->tx99_state) 
                            #line 1372 
                            info.flags = 16U;
      #line 1373 
      if ((tx_info->flags & 8U) != 0U || sc->tx.uapsdq == txq) 
                                                               #line 1375 
                                                               info.flags |= 4096U;
      #line 1377 
      if ((tx_info->flags & 4U) != 0U) 
                                       #line 1378 
                                       info.flags |= 2U;
      #line 1379 
      if ((tx_info->flags & 4194304U) != 0U) 
                                             #line 1380 
                                             info.flags |= 2048U;
      #line 1382 
      if ((unsigned int)bf->bf_state.bfs_paprd != 0U) 
                                                      #line 1383 
                                                      info.flags |= (unsigned int)bf->bf_state.bfs_paprd << 16;
      #line 1393 
      if (((int)aggr != 0 && bf == bf_first) && (long)(rts_thresh != 4294967295U) != 0L) 
        #line 1398 
        if (rts_thresh == 0U || (unsigned int)len > rts_thresh) 
                                                                #line 1399 
                                                                rts = (_Bool)1;
      #line 1402 
      if (! aggr) 
                  #line 1403 
                  len = (int)fi->framelen;
      #line 1405 
      ath_buf_set_rate(sc,bf,& info,len,(_Bool)((bool)((int)rts) != 0));
    }
    #line 1408 
    info.buf_addr[0] = bf->bf_buf_addr;
    #line 1409 
    info.buf_len[0] = (int)skb->len;
    #line 1410 
    info.pkt_len = (int)fi->framelen;
    #line 1411 
    info.keyix = fi->keyix;
    #line 1412 
    info.keytype = (enum ath9k_key_type)fi->keytype;
    #line 1414 
    if ((int)aggr != 0) {
      #line 1415 
      if (bf == bf_first) 
                          #line 1416 
                          info.aggr = AGGR_BUF_FIRST;
      else 
        #line 1417 
        if (bf_first->bf_lastbf == bf) 
                                       #line 1418 
                                       info.aggr = AGGR_BUF_LAST; else 
                                                                    #line 1420 
                                                                    info.aggr = AGGR_BUF_MIDDLE;
      #line 1422 
      info.ndelim = bf->bf_state.ndelim;
      #line 1423 
      info.aggr_len = (unsigned short)len;
    }
    #line 1426 
    if (bf_first->bf_lastbf == bf) 
                                   #line 1427 
                                   bf_first = (struct ath_buf *)0;
    #line 1429 
    ath9k_hw_set_txdesc(ah,bf->bf_desc,& info);
    #line 1430 
    bf = bf->bf_next;
  }
  #line 1432 
  return;
}

#line 1435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_form_burst(struct ath_softc *sc, struct ath_txq *txq, struct ath_atx_tid *tid, struct list_head *bf_q, struct ath_buf *bf_first)
{
  #line 1440 
  int ret;
  #line 1439 
  struct ath_buf *bf = bf_first;
  #line 1439 
  struct ath_buf *bf_prev = (struct ath_buf *)0;
  #line 1440 
  int nframes = 0;
  #line 1442 
  while (1) {
    #line 1443 
    struct ieee80211_tx_info *tx_info;
    #line 1445 
    nframes ++;
    #line 1446 
    list_add_tail_1(& bf->list,bf_q);
    #line 1447 
    if (bf_prev != (struct ath_buf *)0) 
                                        #line 1448 
                                        bf_prev->bf_next = bf;
    #line 1449 
    bf_prev = bf;
    #line 1451 
    if (nframes > 1) 
                     #line 1452 
                     break;
    #line 1454 
    ret = ath_tx_get_tid_subframe(sc,txq,tid,& bf);
    #line 1455 
    if (ret < 0) 
                 #line 1456 
                 break;
    #line 1458 
    tx_info = IEEE80211_SKB_CB(bf->bf_mpdu);
    #line 1459 
    if ((tx_info->flags & 64U) != 0U) {
      #line 1460 
      __skb_queue_tail_0(& tid->retry_q,bf->bf_mpdu);
      #line 1461 
      break;
    }
    #line 1464 
    ath_set_rates((tid->an)->vif,(tid->an)->sta,bf);
  }
  #line 1466 
  return;
}

#line 1468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static int ath_tx_sched_aggr(struct ath_softc *sc, struct ath_txq *txq, struct ath_atx_tid *tid)
{
  #line 1472 
  struct ieee80211_tx_info *tx_info;
  #line 1473 
  struct list_head bf_q;
  #line 1474 
  int ret;
  #line 1475 
  bool aggr;
  #line 1471 
  struct ath_buf *bf = (struct ath_buf *)0;
  #line 1474 
  int aggr_len = 0;
  #line 1477 
  INIT_LIST_HEAD_0(& bf_q);
  #line 1479 
  ret = ath_tx_get_tid_subframe(sc,txq,tid,& bf);
  #line 1480 
  if (ret < 0) 
               #line 1481 
               return ret;
  #line 1483 
  tx_info = IEEE80211_SKB_CB(bf->bf_mpdu);
  #line 1484 
  aggr = (_Bool)((tx_info->flags & 64U) != 0U);
  #line 1485 
  if ((int)aggr != 0 && txq->axq_ampdu_depth > 1U || ! aggr && txq->axq_depth > 7U) {
    #line 1487 
    __skb_queue_tail_0(& tid->retry_q,bf->bf_mpdu);
    #line 1488 
    return -16;
  }
  #line 1491 
  ath_set_rates((tid->an)->vif,(tid->an)->sta,bf);
  #line 1492 
  if ((int)aggr != 0) 
                      #line 1493 
                      aggr_len = ath_tx_form_aggr(sc,txq,tid,& bf_q,bf); else 
                                                                    #line 1495 
                                                                    ath_tx_form_burst(sc,txq,tid,& bf_q,bf);
  #line 1497 
  if (list_empty_1(& bf_q) != 0) 
                                 #line 1498 
                                 return -11;
  #line 1500 
  if ((int)tid->clear_ps_filter != 0 || (int)(tid->an)->no_ps_filter != 0) {
    #line 1501 
    tid->clear_ps_filter = (_Bool)0;
    #line 1502 
    tx_info->flags |= 8U;
  }
  #line 1505 
  ath_tx_fill_desc(sc,bf,txq,aggr_len);
  #line 1506 
  ath_tx_txqaddbuf(sc,txq,& bf_q,(_Bool)0);
  #line 1507 
  return 0;
}

#line 1510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
int ath_tx_aggr_start(struct ath_softc *sc, struct ieee80211_sta *sta, u16 tid, u16 *ssn)
{
  #line 1514 
  struct ath_atx_tid *txtid;
  #line 1515 
  struct ath_txq *txq;
  #line 1516 
  struct ath_node *an;
  #line 1517 
  u8 density;
  #line 1513 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1519 
  if ((common->debug_mask & 128) != 0) 
                                       #line 1519 
                                       ath_printk((char *)"\001",common,(char *)"%s called\n",(char *)"ath_tx_aggr_start");
  #line 1521 
  an = (struct ath_node *)(& sta->drv_priv);
  #line 1522 
  txtid = ath_node_to_tid(an,(unsigned char)((int)((unsigned char)tid)));
  #line 1523 
  txq = txtid->txq;
  #line 1525 
  ath_txq_lock_0(sc,txq);
  #line 1531 
  if ((int)sta->ht_cap.ht_supported != 0) {
    #line 1532 
    an->maxampdu = (unsigned short)((unsigned int)((unsigned short)(1 << ((int)sta->ht_cap.ampdu_factor + 13))) + 65535U);
    #line 1534 
    density = ath9k_parse_mpdudensity((unsigned char)((int)sta->ht_cap.ampdu_density));
    #line 1535 
    an->mpdudensity = density;
  }
  #line 1538 
  txtid->active = (_Bool)1;
  #line 1539 
  txtid->seq_start = (txtid->seq_next);
  #line 1539 
  *ssn = (txtid->seq_next);
  #line 1540 
  txtid->bar_index = (signed char)(-1);
  #line 1542 
  memset((void *)(& txtid->tx_buf),0,16UL);
  #line 1543 
  txtid->baw_tail = 0;
  #line 1543 
  txtid->baw_head = 0;
  #line 1545 
  ath_txq_unlock_complete(sc,txq);
  #line 1547 
  return 0;
}

#line 1550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_tx_aggr_stop(struct ath_softc *sc, struct ieee80211_sta *sta, u16 tid)
{
  #line 1552 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1553 
  struct ath_node *an = (struct ath_node *)(& sta->drv_priv);
  #line 1554 
  struct ath_atx_tid *txtid = ath_node_to_tid(an,(unsigned char)((int)((unsigned char)tid)));
  #line 1555 
  struct ath_txq *txq = txtid->txq;
  #line 1557 
  if ((common->debug_mask & 128) != 0) 
                                       #line 1557 
                                       ath_printk((char *)"\001",common,(char *)"%s called\n",(char *)"ath_tx_aggr_stop");
  #line 1559 
  ath_txq_lock_0(sc,txq);
  #line 1560 
  txtid->active = (_Bool)0;
  #line 1561 
  ath_tx_flush_tid(sc,txtid);
  #line 1562 
  ath_txq_unlock_complete(sc,txq);
  #line 1563 
  return;
}

#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_tx_aggr_sleep(struct ieee80211_sta *sta, struct ath_softc *sc, struct ath_node *an)
{
  #line 1569 
  struct ath_atx_tid *tid;
  #line 1570 
  int tidno;
  #line 1568 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1572 
  if ((common->debug_mask & 128) != 0) 
                                       #line 1572 
                                       ath_printk((char *)"\001",common,(char *)"%s called\n",(char *)"ath_tx_aggr_sleep");
  #line 1574 
  tidno = 0;
  #line 1574 
  while (tidno <= 15) {
    {
      #line 1575 
      tid = ath_node_to_tid(an,(unsigned char)((int)((unsigned char)tidno)));
      #line 1577 
      if (skb_queue_empty(& tid->retry_q) == 0) 
                                                #line 1578 
                                                ieee80211_sta_set_buffered(sta,(unsigned char)((int)tid->tidno),(_Bool)1);
    }
    #line 1574 
    tidno ++;
  }
  #line 1580 
  return;
}

#line 1583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_tx_aggr_wakeup(struct ath_softc *sc, struct ath_node *an)
{
  #line 1586 
  struct ath_atx_tid *tid;
  #line 1587 
  struct ath_txq *txq;
  #line 1588 
  int tidno;
  #line 1585 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1590 
  if ((common->debug_mask & 128) != 0) 
                                       #line 1590 
                                       ath_printk((char *)"\001",common,(char *)"%s called\n",(char *)"ath_tx_aggr_wakeup");
  #line 1592 
  tidno = 0;
  #line 1592 
  while (tidno <= 15) {
    {
      #line 1593 
      tid = ath_node_to_tid(an,(unsigned char)((int)((unsigned char)tidno)));
      #line 1594 
      txq = tid->txq;
      #line 1596 
      ath_txq_lock_0(sc,txq);
      #line 1597 
      tid->clear_ps_filter = (_Bool)1;
      #line 1598 
      if (skb_queue_empty(& tid->retry_q) == 0) {
        #line 1599 
        ath_tx_queue_tid(sc,tid);
        #line 1600 
        ath_txq_schedule(sc,txq);
      }
      #line 1602 
      ath_txq_unlock_complete(sc,txq);
    }
    #line 1592 
    tidno ++;
  }
  #line 1604 
  return;
}

#line 1609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath9k_set_moredata(struct ath_softc *sc, struct ath_buf *bf, bool val)
{
  #line 1611 
  struct ieee80211_hdr *hdr;
  #line 1612 
  u16 mask = (unsigned short)8192U;
  #line 1613 
  u16 mask_val = (unsigned short)((int)((unsigned short)val) * (int)mask);
  #line 1615 
  hdr = (struct ieee80211_hdr *)(bf->bf_mpdu)->data;
  #line 1616 
  if (((int)hdr->frame_control & (int)mask) != (int)mask_val) {
    #line 1617 
    hdr->frame_control = (unsigned short)(((int)hdr->frame_control & ~ ((int)mask)) | (int)mask_val);
    #line 1618 
    dma_sync_single_for_device(sc->dev,bf->bf_buf_addr,30UL,(enum dma_data_direction)DMA_TO_DEVICE);
  }
  #line 1620 
  return;
}

#line 1623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath9k_release_buffered_frames(struct ieee80211_hw *hw, struct ieee80211_sta *sta, u16 tids, int nframes, enum ieee80211_frame_release_type reason, bool more_data)
{
  #line 1682 
  void *__mptr;
  #line 1632 
  struct ieee80211_tx_info *info;
  #line 1633 
  struct list_head bf_q;
  #line 1636 
  int i;
  #line 1636 
  int ret;
  #line 1629 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1630 
  struct ath_node *an = (struct ath_node *)(& sta->drv_priv);
  #line 1631 
  struct ath_txq *txq = sc->tx.uapsdq;
  #line 1634 
  struct ath_buf *bf_tail = (struct ath_buf *)0;
  #line 1634 
  struct ath_buf *bf = (struct ath_buf *)0;
  #line 1635 
  int sent = 0;
  #line 1638 
  INIT_LIST_HEAD_0(& bf_q);
  #line 1639 
  i = 0;
  #line 1639 
  while ((unsigned int)tids != 0U && nframes != 0) {
    {
      #line 1640 
      struct ath_atx_tid *tid;
      #line 1642 
      if (((int)tids & 1) == 0) 
                                #line 1643 
                                goto __Cont;
      #line 1645 
      tid = ath_node_to_tid(an,(unsigned char)((int)((unsigned char)i)));
      #line 1647 
      ath_txq_lock_0(sc,tid->txq);
      #line 1648 
      while (nframes > 0) {
        #line 1649 
        ret = ath_tx_get_tid_subframe(sc,sc->tx.uapsdq,tid,& bf);
        #line 1651 
        if (ret < 0) 
                     #line 1652 
                     break;
        #line 1654 
        ath9k_set_moredata(sc,bf,(_Bool)1);
        #line 1655 
        list_add_tail_1(& bf->list,& bf_q);
        #line 1656 
        ath_set_rates((tid->an)->vif,(tid->an)->sta,bf);
        #line 1657 
        if (((int)bf->bf_state.bf_type & 1) != 0) 
                                                  #line 1658 
                                                  bf->bf_state.bf_type = (unsigned char)((unsigned int)bf->bf_state.bf_type & 253U);
        #line 1659 
        if (bf_tail != (struct ath_buf *)0) 
                                            #line 1660 
                                            bf_tail->bf_next = bf;
        #line 1662 
        bf_tail = bf;
        #line 1663 
        nframes --;
        #line 1664 
        sent ++;
        #line 1665 
        (sc->debug.stats.txstats[txq->axq_qnum].a_queued_hw) ++;
        #line 1667 
        if (an->sta != (struct ieee80211_sta *)0) {
          #line 1667 
          if (skb_queue_empty(& tid->retry_q) != 0) 
                                                    #line 1668 
                                                    ieee80211_sta_set_buffered(an->sta,(unsigned char)((int)((unsigned char)i)),(_Bool)0);
        }
      }
      #line 1670 
      ath_txq_unlock_complete(sc,tid->txq);
    }
    #line 1639 
    __Cont: 
            #line 1639 
    i ++;
    #line 1639 
    tids = (unsigned short)((int)tids >> 1);
  }
  #line 1673 
  if (list_empty_1(& bf_q) != 0) 
                                 #line 1674 
                                 return;
  #line 1676 
  if (! more_data) 
                   #line 1677 
                   ath9k_set_moredata(sc,bf_tail,(_Bool)0);
  #line 1679 
  info = IEEE80211_SKB_CB(bf_tail->bf_mpdu);
  #line 1680 
  info->flags |= 268435456U;
  #line 1682 
  __mptr = (void *)bf_q.next;
  #line 1682 
  bf = ((struct ath_buf *)__mptr);
  #line 1683 
  ath_txq_lock_0(sc,txq);
  #line 1684 
  ath_tx_fill_desc(sc,bf,txq,0);
  #line 1685 
  ath_tx_txqaddbuf(sc,txq,& bf_q,(_Bool)0);
  #line 1686 
  ath_txq_unlock_0(sc,txq);
  #line 1687 
  return;
}

#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
struct ath_txq *ath_txq_setup(struct ath_softc *sc, int qtype, int subtype)
{
  #line 1696 
  struct ath9k_tx_queue_info qi;
  #line 1703 
  int axq_qnum;
  #line 1703 
  int i;
  #line 1695 
  struct ath_hw *ah = sc->sc_ah;
  #line 1697 
  int subtype_txq_to_hwq[4U] = {3, 2, 1, 0};
  #line 1705 
  memset((void *)(& qi),0,60UL);
  #line 1706 
  qi.tqi_subtype = subtype_txq_to_hwq[subtype];
  #line 1707 
  qi.tqi_aifs = 4294967295U;
  #line 1708 
  qi.tqi_cwmin = 4294967295U;
  #line 1709 
  qi.tqi_cwmax = 4294967295U;
  #line 1710 
  qi.tqi_physCompBuf = 0U;
  #line 1727 
  if ((ah->caps.hw_caps & 16U) != 0U) 
                                      #line 1728 
                                      qi.tqi_qflags = TXQ_FLAG_TXINT_ENABLE;
  else 
    #line 1730 
    if (qtype == 4) 
                    #line 1731 
                    qi.tqi_qflags = TXQ_FLAG_TXDESCINT_ENABLE; else 
                                                                    #line 1733 
                                                                    qi.tqi_qflags = (enum ath9k_tx_queue_flags)6;
  #line 1736 
  axq_qnum = ath9k_hw_setuptxqueue(ah,(enum ath9k_tx_queue)qtype,& qi);
  #line 1737 
  if (axq_qnum == -1) 
                      #line 1742 
                      return (struct ath_txq *)0;
  #line 1744 
  if ((sc->tx.txqsetup & (unsigned int)(1 << axq_qnum)) == 0U) {
    #line 1745 
    struct ath_txq *txq = & sc->tx.txq[axq_qnum];
    #line 1747 
    txq->axq_qnum = (unsigned int)axq_qnum;
    #line 1748 
    txq->mac80211_qnum = -1;
    #line 1749 
    txq->axq_link = (void *)0;
    #line 1750 
    __skb_queue_head_init(& txq->complete_q);
    #line 1751 
    INIT_LIST_HEAD_0(& txq->axq_q);
    #line 1752 
    spinlock_check(& txq->axq_lock);
    {
      #line 1752 
      struct lock_class_key __key;
      #line 1752 
      __raw_spin_lock_init(& txq->axq_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&txq->axq_lock)->rlock",& __key);
    }
    #line 1753 
    txq->axq_depth = 0U;
    #line 1754 
    txq->axq_ampdu_depth = 0U;
    #line 1755 
    txq->axq_tx_inprogress = (_Bool)0;
    #line 1756 
    sc->tx.txqsetup |= (unsigned int)(1 << axq_qnum);
    #line 1758 
    txq->txq_tailidx = ((unsigned char)0U);
    #line 1758 
    txq->txq_headidx = ((unsigned char)0U);
    #line 1759 
    i = 0;
    #line 1759 
    while (i <= 7) {
      #line 1760 
      INIT_LIST_HEAD_0(& txq->txq_fifo[i]);
      #line 1759 
      i ++;
    }
  }
  #line 1762 
  return & sc->tx.txq[axq_qnum];
}

#line 1765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
int ath_txq_update(struct ath_softc *sc, int qnum, struct ath9k_tx_queue_info *qinfo)
{
  #line 1770 
  struct ath9k_tx_queue_info qi;
  #line 1768 
  struct ath_hw *ah = sc->sc_ah;
  #line 1769 
  int error = 0;
  #line 1772 
  if ((long)(sc->tx.txq[qnum].axq_qnum != (unsigned int)qnum) != 0L) {
    #line 1773 
    ldv_inline_asm();
    #line 1774 
    ldv_inline_asm();
    #line 1775 
    ldv_inline_asm();
    #line 1772 
    ;
  }
  #line 1774 
  ath9k_hw_get_txq_props(ah,qnum,& qi);
  #line 1775 
  qi.tqi_aifs = qinfo->tqi_aifs;
  #line 1776 
  qi.tqi_cwmin = qinfo->tqi_cwmin;
  #line 1777 
  qi.tqi_cwmax = qinfo->tqi_cwmax;
  #line 1778 
  qi.tqi_burstTime = qinfo->tqi_burstTime;
  #line 1779 
  qi.tqi_readyTime = qinfo->tqi_readyTime;
  #line 1781 
  if (ath9k_hw_set_txq_props(ah,qnum,& qi)) 
                                            #line 1786 
                                            ath9k_hw_resettxqueue(ah,(unsigned int)qnum);
  else {
    #line 1782 
    ;
    #line 1782 
    ath_printk((char *)"\001",ath9k_hw_common(sc->sc_ah),(char *)"Unable to update hardware queue %u!\n",qnum);
    #line 1784 
    error = -5;
  }
  #line 1789 
  return error;
}

#line 1792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
int ath_cabq_update(struct ath_softc *sc)
{
  #line 1794 
  struct ath9k_tx_queue_info qi;
  #line 1795 
  struct ath_beacon_config *cur_conf = & (sc->cur_chan)->beacon;
  #line 1796 
  int qnum = (int)(sc->beacon.cabq)->axq_qnum;
  #line 1798 
  ath9k_hw_get_txq_props(sc->sc_ah,qnum,& qi);
  #line 1800 
  qi.tqi_readyTime = (unsigned int)(((cur_conf->beacon_interval << 10) * 80) / 100);
  #line 1802 
  ath_txq_update(sc,qnum,& qi);
  #line 1804 
  return 0;
}

#line 1807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_drain_txq_list(struct ath_softc *sc, struct ath_txq *txq, struct list_head *list)
{
  #line 1810 
  struct ath_buf *bf;
  #line 1810 
  struct ath_buf *lastbf;
  #line 1811 
  struct list_head bf_head;
  #line 1812 
  struct ath_tx_status ts;
  #line 1814 
  memset((void *)(& ts),0,48UL);
  #line 1815 
  ts.ts_status = (unsigned char)64U;
  #line 1816 
  INIT_LIST_HEAD_0(& bf_head);
  #line 1818 
  while (1) {
    #line 1818 
    if (! (list_empty_1(list) == 0)) 
                                     #line 1818 
                                     break;
    {
      #line 1819 
      void *__mptr;
      #line 1819 
      __mptr = (void *)list->next;
      #line 1819 
      bf = ((struct ath_buf *)__mptr);
      #line 1821 
      if ((int)bf->bf_state.stale != 0) {
        #line 1822 
        list_del_1(& bf->list);
        #line 1824 
        ath_tx_return_buffer(sc,bf);
        #line 1825 
        continue;
      }
      #line 1828 
      lastbf = bf->bf_lastbf;
      #line 1829 
      list_cut_position(& bf_head,list,& lastbf->list);
      #line 1830 
      ath_tx_process_buffer(sc,txq,& ts,bf,& bf_head);
    }
  }
  #line 1832 
  return;
}

#line 1840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_draintxq(struct ath_softc *sc, struct ath_txq *txq)
{
  #line 1842 
  rcu_read_lock();
  #line 1843 
  ath_txq_lock_0(sc,txq);
  #line 1845 
  if (((sc->sc_ah)->caps.hw_caps & 16U) != 0U) {
    #line 1846 
    int idx = (int)txq->txq_tailidx;
    #line 1848 
    while (1) {
      #line 1848 
      if (! (list_empty_1(& txq->txq_fifo[idx]) == 0)) 
                                                       #line 1848 
                                                       break;
      #line 1849 
      ath_drain_txq_list(sc,txq,& txq->txq_fifo[idx]);
      #line 1851 
      idx ++;
      #line 1851 
      idx &= 7;
    }
    #line 1853 
    txq->txq_tailidx = (unsigned char)idx;
  }
  #line 1856 
  txq->axq_link = (void *)0;
  #line 1857 
  txq->axq_tx_inprogress = (_Bool)0;
  #line 1858 
  ath_drain_txq_list(sc,txq,& txq->axq_q);
  #line 1860 
  ath_txq_unlock_complete(sc,txq);
  #line 1861 
  rcu_read_unlock();
  #line 1862 
  return;
}

#line 1864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
bool ath_drain_all_txq(struct ath_softc *sc)
{
  #line 1868 
  struct ath_txq *txq;
  #line 1869 
  int i;
  #line 1866 
  struct ath_hw *ah = sc->sc_ah;
  #line 1867 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1870 
  u32 npend = 0U;
  #line 1872 
  if ((int)test_bit(0L,& common->op_flags) != 0) 
                                                 #line 1873 
                                                 return (_Bool)1;
  #line 1875 
  ath9k_hw_abort_tx_dma(ah);
  #line 1878 
  i = 0;
  #line 1878 
  while (i <= 9) {
    {
      #line 1879 
      if ((sc->tx.txqsetup & (unsigned int)(1 << i)) == 0U) 
                                                            #line 1880 
                                                            goto __Cont;
      #line 1882 
      if (sc->tx.txq[i].axq_depth == 0U) 
                                         #line 1883 
                                         goto __Cont;
      #line 1885 
      if (ath9k_hw_numtxpending(ah,sc->tx.txq[i].axq_qnum) != 0U) 
                                                                  #line 1886 
                                                                  npend = (unsigned int)(1UL << i) | npend;
    }
    #line 1878 
    __Cont: 
            #line 1878 
    i ++;
  }
  #line 1889 
  if (npend != 0U) {
    #line 1890 
    (sc->debug.stats.reset[11]) ++;
    #line 1891 
    if ((common->debug_mask & 1) != 0) 
                                       #line 1891 
                                       ath_printk((char *)"\001",common,(char *)"Failed to stop TX DMA, queues=0x%03x!\n",npend);
  }
  #line 1895 
  i = 0;
  #line 1895 
  while (i <= 9) {
    #line 1896 
    if ((sc->tx.txqsetup & (unsigned int)(1 << i)) == 0U) 
                                                          #line 1897 
                                                          goto __Cont_0;
    #line 1899 
    txq = & sc->tx.txq[i];
    #line 1900 
    ath_draintxq(sc,txq);
    #line 1895 
    __Cont_0: 
              #line 1895 
    i ++;
  }
  #line 1903 
  return (_Bool)(npend == 0U);
}

#line 1906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_tx_cleanupq(struct ath_softc *sc, struct ath_txq *txq)
{
  #line 1908 
  ath9k_hw_releasetxqueue(sc->sc_ah,txq->axq_qnum);
  #line 1909 
  sc->tx.txqsetup &= (unsigned int)(~ (1 << txq->axq_qnum));
  #line 1910 
  return;
}

#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_txq_schedule(struct ath_softc *sc, struct ath_txq *txq)
{
  #line 1919 
  struct ieee80211_txq *queue;
  #line 1920 
  struct ath_atx_tid *tid;
  #line 1921 
  int ret;
  #line 1917 
  struct ieee80211_hw *hw = sc->hw;
  #line 1918 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1923 
  if (txq->mac80211_qnum < 0) 
                              #line 1924 
                              return;
  #line 1926 
  if ((int)test_bit(4L,& common->op_flags) != 0) 
                                                 #line 1927 
                                                 return;
  #line 1929 
  ieee80211_txq_schedule_start(hw,(unsigned char)((int)((unsigned char)txq->mac80211_qnum)));
  #line 1930 
  cif_spin_lock_bh_chan_lock_of_ath_softc_1(& sc->chan_lock);
  #line 1931 
  rcu_read_lock();
  #line 1933 
  if ((int)(sc->cur_chan)->stopped != 0) 
                                         #line 1934 
                                         goto out;
  #line 1936 
  while (1) {
    #line 1936 
    queue = ieee80211_next_txq(hw,(unsigned char)((int)((unsigned char)txq->mac80211_qnum)));
    #line 1936 
    if (! (queue != (struct ieee80211_txq *)0)) 
                                                #line 1936 
                                                break;
    {
      #line 1937 
      bool force;
      #line 1939 
      tid = (struct ath_atx_tid *)(& queue->drv_priv);
      #line 1941 
      ret = ath_tx_sched_aggr(sc,txq,tid);
      #line 1942 
      if ((common->debug_mask & 2) != 0) 
                                         #line 1942 
                                         ath_printk((char *)"\001",common,(char *)"ath_tx_sched_aggr returned %d\n",ret);
      #line 1944 
      force = (_Bool)(skb_queue_empty(& tid->retry_q) == 0);
      #line 1945 
      ieee80211_return_txq(hw,queue,(_Bool)((bool)((int)force) != 0));
    }
  }
  #line 1948 
  out: 
       #line 1948 
  ;
  #line 1949 
  rcu_read_unlock();
  #line 1950 
  cif_spin_unlock_bh_chan_lock_of_ath_softc_1(& sc->chan_lock);
  #line 1951 
  ieee80211_txq_schedule_end(hw,(unsigned char)((int)((unsigned char)txq->mac80211_qnum)));
  #line 1952 
  return;
}

#line 1954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_txq_schedule_all(struct ath_softc *sc)
{
  #line 1956 
  struct ath_txq *txq;
  #line 1957 
  int i;
  #line 1959 
  i = 0;
  #line 1959 
  while (i <= 3) {
    #line 1960 
    txq = sc->tx.txq_map[i];
    #line 1962 
    cif_spin_lock_bh_axq_lock_of_ath_txq_1(& txq->axq_lock);
    #line 1963 
    ath_txq_schedule(sc,txq);
    #line 1964 
    cif_spin_unlock_bh_axq_lock_of_ath_txq_1(& txq->axq_lock);
    #line 1959 
    i ++;
  }
  #line 1966 
  return;
}

#line 1976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_txqaddbuf(struct ath_softc *sc, struct ath_txq *txq, struct list_head *head, bool internal)
{
  #line 1994 
  void *__mptr;
  #line 1995 
  void *__mptr_0;
  #line 1981 
  struct ath_buf *bf;
  #line 1981 
  struct ath_buf *bf_last;
  #line 1983 
  bool edma;
  #line 1979 
  struct ath_hw *ah = sc->sc_ah;
  #line 1980 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 1982 
  bool puttxbuf = (_Bool)0;
  #line 1990 
  if (list_empty_1(head) != 0) 
                               #line 1991 
                               return;
  #line 1993 
  edma = (_Bool)((ah->caps.hw_caps & 16U) != 0U);
  #line 1994 
  __mptr = (void *)head->next;
  #line 1994 
  bf = ((struct ath_buf *)__mptr);
  #line 1995 
  __mptr_0 = (void *)head->prev;
  #line 1995 
  bf_last = ((struct ath_buf *)__mptr_0);
  #line 1997 
  if ((common->debug_mask & 2) != 0) 
                                     #line 1997 
                                     ath_printk((char *)"\001",common,(char *)"qnum: %d, txq depth: %d\n",txq->axq_qnum,txq->axq_depth);
  #line 2000 
  if ((int)edma != 0) {
    #line 2000 
    if (list_empty_1(& txq->txq_fifo[(int)txq->txq_headidx]) != 0) {
      #line 2001 
      list_splice_tail_init(head,& txq->txq_fifo[(int)txq->txq_headidx]);
      #line 2002 
      txq->txq_headidx = (u8)((int)txq->txq_headidx + 1);
      #line 2002 
      txq->txq_headidx = (unsigned char)((unsigned int)txq->txq_headidx & 7U);
      #line 2003 
      puttxbuf = (_Bool)1;
    }
    else 
         #line 2000 
         goto _LAND;
  }
  else {
    #line 2000 
    _LAND: {
             #line 2005 
             list_splice_tail_init(head,& txq->axq_q);
             #line 2007 
             if (txq->axq_link != (void *)0) {
               #line 2008 
               ath9k_hw_set_desc_link(ah,txq->axq_link,(unsigned int)bf->bf_daddr);
               #line 2009 
               if ((common->debug_mask & 128) != 0) 
                                                    #line 2009 
                                                    ath_printk((char *)"\001",common,(char *)"link[%u] (%p)=%llx (%p)\n",txq->axq_qnum,txq->axq_link,bf->bf_daddr,bf->bf_desc);
             }
             else 
               #line 2012 
               if (! edma) 
                           #line 2013 
                           puttxbuf = (_Bool)1;
             #line 2015 
             txq->axq_link = bf_last->bf_desc;
           }
  }
  #line 2018 
  if ((int)puttxbuf != 0) {
    #line 2019 
    (sc->debug.stats.txstats[txq->axq_qnum].puttxbuf) ++;
    #line 2020 
    ath9k_hw_puttxbuf(ah,txq->axq_qnum,(unsigned int)bf->bf_daddr);
    #line 2021 
    if ((common->debug_mask & 128) != 0) 
                                         #line 2021 
                                         ath_printk((char *)"\001",common,(char *)"TXDP[%u] = %llx (%p)\n",txq->axq_qnum,bf->bf_daddr,bf->bf_desc);
  }
  #line 2025 
  if (! edma || (int)sc->tx99_state != 0) {
    #line 2026 
    (sc->debug.stats.txstats[txq->axq_qnum].txstart) ++;
    #line 2027 
    ath9k_hw_txstart(ah,txq->axq_qnum);
  }
  #line 2030 
  if (! internal) 
    #line 2031 
    while (bf != (struct ath_buf *)0) {
      #line 2032 
      (txq->axq_depth) ++;
      #line 2033 
      if ((int)bf_is_ampdu_not_probing(bf) != 0) 
                                                 #line 2034 
                                                 (txq->axq_ampdu_depth) ++;
      #line 2036 
      bf_last = bf->bf_lastbf;
      #line 2037 
      bf = bf_last->bf_next;
      #line 2038 
      bf_last->bf_next = (struct ath_buf *)0;
    }
  #line 2040 
  return;
}

#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_send_normal(struct ath_softc *sc, struct ath_txq *txq, struct ath_atx_tid *tid, struct sk_buff *skb)
{
  #line 2048 
  struct list_head bf_head;
  #line 2046 
  struct ieee80211_tx_info *tx_info = IEEE80211_SKB_CB(skb);
  #line 2047 
  struct ath_frame_info *fi = get_frame_info(skb);
  #line 2049 
  struct ath_buf *bf = fi->bf;
  #line 2051 
  INIT_LIST_HEAD_0(& bf_head);
  #line 2052 
  list_add_tail_1(& bf->list,& bf_head);
  #line 2053 
  bf->bf_state.bf_type = (unsigned char)0U;
  #line 2054 
  if (tid != (struct ath_atx_tid *)0 && (tx_info->flags & 64U) != 0U) {
    #line 2055 
    bf->bf_state.bf_type = (unsigned char)1U;
    #line 2056 
    ath_tx_addto_baw(sc,tid,bf);
  }
  #line 2059 
  bf->bf_next = (struct ath_buf *)0;
  #line 2060 
  bf->bf_lastbf = bf;
  #line 2061 
  ath_tx_fill_desc(sc,bf,txq,(int)fi->framelen);
  #line 2062 
  ath_tx_txqaddbuf(sc,txq,& bf_head,(_Bool)0);
  #line 2063 
  (sc->debug.stats.txstats[txq->axq_qnum].queued) ++;
  #line 2064 
  return;
}

#line 2066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void setup_frame_info(struct ieee80211_hw *hw, struct ieee80211_sta *sta, struct sk_buff *skb, int framelen)
{
  #line 2074 
  struct ieee80211_rate *rate;
  #line 2077 
  enum ath9k_key_type keytype;
  #line 2079 
  u8 txpower;
  #line 2071 
  struct ieee80211_tx_info *tx_info = IEEE80211_SKB_CB(skb);
  #line 2072 
  struct ieee80211_key_conf *hw_key = tx_info->__anonCompField_ieee80211_tx_info_195.control.hw_key;
  #line 2073 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 2075 
  struct ath_frame_info *fi = get_frame_info(skb);
  #line 2076 
  struct ath_node *an = (struct ath_node *)0;
  #line 2078 
  bool short_preamble = (_Bool)0;
  #line 2086 
  if (tx_info->__anonCompField_ieee80211_tx_info_195.control.vif != (struct ieee80211_vif *)0 && (int)(tx_info->__anonCompField_ieee80211_tx_info_195.control.vif)->bss_conf.use_short_preamble != 0) 
    #line 2088 
    short_preamble = (_Bool)1;
  #line 2090 
  rate = ieee80211_get_rts_cts_rate(hw,tx_info);
  #line 2091 
  keytype = (enum ath9k_key_type)ath9k_cmn_get_hw_crypto_keytype(skb);
  #line 2093 
  if (sta != (struct ieee80211_sta *)0) 
                                        #line 2094 
                                        an = (struct ath_node *)(& sta->drv_priv);
  #line 2096 
  if (tx_info->__anonCompField_ieee80211_tx_info_195.control.vif != (struct ieee80211_vif *)0) {
    #line 2097 
    struct ieee80211_vif *vif = tx_info->__anonCompField_ieee80211_tx_info_195.control.vif;
    #line 2099 
    txpower = (unsigned char)((unsigned int)((unsigned char)vif->bss_conf.txpower) * 2U);
  }
  else {
    #line 2101 
    struct ath_softc *sc = (struct ath_softc *)hw->priv;
    #line 2103 
    txpower = (unsigned char)(sc->cur_chan)->cur_txpower;
  }
  #line 2106 
  memset((void *)fi,0,16UL);
  #line 2107 
  fi->txq = (signed char)(-1);
  #line 2108 
  if (hw_key != (struct ieee80211_key_conf *)0) 
                                                #line 2109 
                                                fi->keyix = hw_key->hw_key_idx;
  else 
    #line 2110 
    if (an != (struct ath_node *)0) {
      #line 2110 
      if ((int)ieee80211_is_data((unsigned short)((int)hdr->frame_control)) != 0) 
        #line 2110 
        if ((int)an->ps_key > 0) 
                                 #line 2111 
                                 fi->keyix = (unsigned char)an->ps_key; else 
                                                                    #line 2113 
                                                                    fi->keyix = (unsigned char)255U;
      else 
           #line 2113 
           fi->keyix = (unsigned char)255U;
    }
    else 
         #line 2113 
         fi->keyix = (unsigned char)255U;
  #line 2114 
  fi->keytype = (enum ath9k_key_type)keytype;
  #line 2115 
  fi->framelen = (unsigned short)framelen;
  #line 2116 
  fi->tx_power = txpower;
  #line 2118 
  if (rate == (struct ieee80211_rate *)0) 
                                          #line 2119 
                                          return;
  #line 2120 
  fi->rtscts_rate = (unsigned char)rate->hw_value;
  #line 2121 
  if ((int)short_preamble != 0) 
                                #line 2122 
                                fi->rtscts_rate = (unsigned char)((int)fi->rtscts_rate | (int)((unsigned char)rate->hw_value_short));
  #line 2123 
  return;
}

#line 2125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
u8 ath_txchainmask_reduction(struct ath_softc *sc, u8 chainmask, u32 rate)
{
  #line 2127 
  struct ath_hw *ah = sc->sc_ah;
  #line 2128 
  struct ath9k_channel *curchan = ah->curchan;
  #line 2130 
  if (((ah->caps.hw_caps & 8192U) != 0U && ((unsigned long)curchan->channelFlags & 1UL) != 0UL) && ((unsigned int)chainmask == 7U && rate <= 143U)) 
    #line 2132 
    return (unsigned char)3U;
  else 
    #line 2133 
    if (ah->hw_version.macVersion == 640U) {
      #line 2133 
      if ((int)ath9k_hw_btcoex_is_enabled(ah) != 0) 
        #line 2133 
        if (rate + 4294967272U <= 6U) 
                                      #line 2135 
                                      return (unsigned char)2U; else 
                                                                  #line 2137 
                                                                  return chainmask;
      else 
           #line 2137 
           return chainmask;
    }
    else 
         #line 2137 
         return chainmask;
}

#line 2144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static struct ath_buf *ath_tx_setup_buffer(struct ath_softc *sc, struct ath_txq *txq, struct ath_atx_tid *tid, struct sk_buff *skb)
{
  #line 2152 
  struct ath_buf *bf;
  #line 2153 
  int fragno;
  #line 2154 
  u16 seqno;
  #line 2149 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2150 
  struct ath_frame_info *fi = get_frame_info(skb);
  #line 2151 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 2156 
  bf = ath_tx_get_buffer(sc);
  #line 2157 
  if (bf == (struct ath_buf *)0) {
    #line 2158 
    if ((common->debug_mask & 128) != 0) 
                                         #line 2158 
                                         ath_printk((char *)"\001",common,(char *)"TX buffers are full\n");
    #line 2159 
    return (struct ath_buf *)0;
  }
  #line 2162 
  bf->bf_lastbf = (struct ath_buf *)0;
  #line 2162 
  bf->bf_next = (struct ath_buf *)0;
  #line 2162 
  memset((void *)(& bf->bf_state),0,16UL);
  #line 2164 
  if (tid != (struct ath_atx_tid *)0) {
    #line 2164 
    if ((int)ieee80211_is_data_present((unsigned short)((int)hdr->frame_control)) != 0) {
      #line 2165 
      fragno = (int)hdr->seq_ctrl & 15;
      #line 2166 
      seqno = tid->seq_next;
      #line 2167 
      hdr->seq_ctrl = (unsigned short)((int)tid->seq_next << 4U);
      #line 2169 
      if (fragno != 0) 
                       #line 2170 
                       hdr->seq_ctrl = (unsigned short)((int)hdr->seq_ctrl | (int)((unsigned short)fragno));
      #line 2172 
      if (! ieee80211_has_morefrags((unsigned short)((int)hdr->frame_control))) {
        #line 2173 
        tid->seq_next = (u16)((int)tid->seq_next + 1);
        #line 2173 
        tid->seq_next = (unsigned short)((unsigned int)tid->seq_next & 4095U);
      }
      #line 2175 
      bf->bf_state.seqno = seqno;
    }
  }
  #line 2178 
  bf->bf_mpdu = skb;
  #line 2180 
  bf->bf_buf_addr = dma_map_single_attrs(sc->dev,(void *)skb->data,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 2182 
  if ((long)(dma_mapping_error(sc->dev,bf->bf_buf_addr) != 0) != 0L) {
    #line 2183 
    bf->bf_mpdu = (struct sk_buff *)0;
    #line 2184 
    bf->bf_buf_addr = 0ULL;
    #line 2185 
    ath_printk((char *)"\001",ath9k_hw_common(sc->sc_ah),(char *)"dma_mapping_error() on TX\n");
    #line 2187 
    ath_tx_return_buffer(sc,bf);
    #line 2188 
    return (struct ath_buf *)0;
  }
  #line 2191 
  fi->bf = bf;
  #line 2193 
  return bf;
}

#line 2196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_assign_seq(struct ath_common *common, struct sk_buff *skb)
{
  #line 2201 
  struct ath_vif *avp;
  #line 2198 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 2199 
  struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
  #line 2200 
  struct ieee80211_vif *vif = info->__anonCompField_ieee80211_tx_info_195.control.vif;
  #line 2203 
  if ((info->flags & 2U) == 0U) 
                                #line 2204 
                                return;
  #line 2206 
  if (vif == (struct ieee80211_vif *)0) 
                                        #line 2207 
                                        return;
  #line 2209 
  avp = (struct ath_vif *)(& vif->drv_priv);
  #line 2211 
  if ((info->flags & 16U) != 0U) 
                                 #line 2212 
                                 avp->seq_no = (unsigned short)((unsigned int)avp->seq_no + 16U);
  #line 2214 
  hdr->seq_ctrl = (unsigned short)((unsigned int)hdr->seq_ctrl & 15U);
  #line 2215 
  hdr->seq_ctrl = (unsigned short)((int)hdr->seq_ctrl | (int)avp->seq_no);
  #line 2216 
  return;
}

#line 2218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static int ath_tx_prepare(struct ieee80211_hw *hw, struct sk_buff *skb, struct ath_tx_control *txctl)
{
  #line 2225 
  struct ath_vif *avp;
  #line 2228 
  int padpos;
  #line 2228 
  int padsize;
  #line 2221 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 2222 
  struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
  #line 2223 
  struct ieee80211_sta *sta = txctl->sta;
  #line 2224 
  struct ieee80211_vif *vif = info->__anonCompField_ieee80211_tx_info_195.control.vif;
  #line 2226 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2227 
  int frmlen = (int)(skb->len + 4U);
  #line 2231 
  if (sta != (struct ieee80211_sta *)0) 
                                        #line 2232 
                                        txctl->an = (struct ath_node *)(& sta->drv_priv);
  else 
    #line 2233 
    if (vif != (struct ieee80211_vif *)0) {
      #line 2233 
      if ((int)ieee80211_is_data((unsigned short)((int)hdr->frame_control)) != 0) {
        #line 2234 
        avp = (struct ath_vif *)(& vif->drv_priv);
        #line 2235 
        txctl->an = & avp->mcast_node;
      }
    }
  #line 2238 
  if (info->__anonCompField_ieee80211_tx_info_195.control.hw_key != (struct ieee80211_key_conf *)0) 
    #line 2239 
    frmlen = (int)(info->__anonCompField_ieee80211_tx_info_195.control.hw_key)->icv_len + frmlen;
  #line 2241 
  ;
  #line 2241 
  ath_assign_seq(ath9k_hw_common(sc->sc_ah),skb);
  #line 2243 
  if ((vif != (struct ieee80211_vif *)0 && vif->type != (unsigned int)NL80211_IFTYPE_AP) && vif->type != (unsigned int)NL80211_IFTYPE_AP_VLAN) 
    #line 2246 
    info->flags |= 8U;
  else {
    #line 2245 
    if (! ieee80211_is_data((unsigned short)((int)hdr->frame_control))) 
      #line 2246 
      info->flags |= 8U;
  }
  #line 2249 
  padpos = (int)ieee80211_hdrlen((unsigned short)((int)hdr->frame_control));
  #line 2250 
  padsize = padpos & 3;
  #line 2251 
  if (padsize != 0 && skb->len > (unsigned int)padpos) {
    #line 2252 
    ;
    #line 2252 
    if (skb_headroom(skb) < (unsigned int)padsize) 
                                                   #line 2253 
                                                   return -12;
    #line 2255 
    skb_push(skb,(unsigned int)padsize);
    #line 2256 
    __memmove((void *)skb->data,(void *)(skb->data + (unsigned long)padsize),(unsigned long)padpos);
  }
  #line 2259 
  setup_frame_info(hw,sta,skb,frmlen);
  #line 2260 
  return 0;
}

#line 2265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
int ath_tx_start(struct ieee80211_hw *hw, struct sk_buff *skb, struct ath_tx_control *txctl)
{
  #line 2276 
  struct ath_buf *bf;
  #line 2277 
  bool ps_resp;
  #line 2278 
  int q;
  #line 2278 
  int ret;
  #line 2268 
  struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
  #line 2269 
  struct ieee80211_sta *sta = txctl->sta;
  #line 2270 
  struct ieee80211_vif *vif = info->__anonCompField_ieee80211_tx_info_195.control.vif;
  #line 2271 
  struct ath_frame_info *fi = get_frame_info(skb);
  #line 2272 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2273 
  struct ath_txq *txq = txctl->txq;
  #line 2274 
  struct ath_atx_tid *tid = (struct ath_atx_tid *)0;
  #line 2275 
  struct ath_node *an = (struct ath_node *)0;
  #line 2280 
  ps_resp = (_Bool)((info->__anonCompField_ieee80211_tx_info_195.control.flags & 2U) != 0U);
  #line 2282 
  ret = ath_tx_prepare(hw,skb,txctl);
  #line 2283 
  if (ret != 0) 
                #line 2284 
                return ret;
  #line 2291 
  q = (int)skb_get_queue_mapping(skb);
  #line 2293 
  if ((int)ps_resp != 0) 
                         #line 2294 
                         txq = sc->tx.uapsdq;
  #line 2296 
  if (txctl->sta != (struct ieee80211_sta *)0) {
    #line 2297 
    an = (struct ath_node *)(& sta->drv_priv);
    #line 2298 
    tid = ath_get_skb_tid(sc,an,skb);
  }
  #line 2301 
  ath_txq_lock_0(sc,txq);
  #line 2302 
  if (sc->tx.txq_map[q] == txq) {
    #line 2303 
    fi->txq = (signed char)q;
    #line 2304 
    (txq->pending_frames) ++;
  }
  #line 2307 
  bf = ath_tx_setup_buffer(sc,txq,tid,skb);
  #line 2308 
  if (bf == (struct ath_buf *)0) {
    #line 2309 
    ath_txq_skb_done(sc,txq,skb);
    #line 2310 
    if ((unsigned int)txctl->paprd != 0U) 
                                          #line 2311 
                                          dev_kfree_skb_any(skb); else 
                                                                    #line 2313 
                                                                    ieee80211_free_txskb(sc->hw,skb);
    #line 2314 
    goto out;
  }
  #line 2317 
  bf->bf_state.bfs_paprd = txctl->paprd;
  #line 2319 
  if ((unsigned int)txctl->paprd != 0U) 
                                        #line 2320 
                                        bf->bf_state.bfs_paprd_timestamp = jiffies;
  #line 2322 
  ath_set_rates(vif,sta,bf);
  #line 2323 
  ath_tx_send_normal(sc,txq,tid,skb);
  #line 2325 
  out: 
       #line 2325 
  ;
  #line 2326 
  ath_txq_unlock_0(sc,txq);
  #line 2328 
  return 0;
}

#line 2331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_tx_cabq(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct sk_buff *skb)
{
  #line 2382 
  void *__mptr;
  #line 2385 
  void *__mptr_0;
  #line 2340 
  struct ath_buf *bf;
  #line 2343 
  int max_duration;
  #line 2334 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 2335 
  struct ath_tx_control txctl = {.txq = sc->beacon.cabq, .an = (struct ath_node *)0, .sta = (struct ieee80211_sta *)0, .paprd = (unsigned char)0};
  #line 2338 
  struct ath_tx_info info = {.qcu = (unsigned char)0, .is_first = (_Bool)0, .is_last = (_Bool)0, .aggr = 0, .ndelim = (unsigned char)0, .aggr_len = (unsigned short)0, .link = 0ULL, .pkt_len = 0, .flags = 0U, .buf_addr = {0ULL, 0ULL, 0ULL, 0ULL}, .buf_len = {0, 0, 0, 0}, .rates = {{.Tries = 0U, .Rate = 0U, .PktDuration = 0U, .ChSel = 0U, .RateFlags = 0U}, {.Tries = 0U, .Rate = 0U, .PktDuration = 0U, .ChSel = 0U, .RateFlags = 0U}, {.Tries = 0U, .Rate = 0U, .PktDuration = 0U, .ChSel = 0U, .RateFlags = 0U}, {.Tries = 0U, .Rate = 0U, .PktDuration = 0U, .ChSel = 0U, .RateFlags = 0U}}, .rtscts_rate = (unsigned char)0, .dur_update = (_Bool)0, .type = 0, .keytype = 0, .keyix = (unsigned char)0, .txpower = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}};
  #line 2339 
  struct ath_buf *bf_tail = (struct ath_buf *)0;
  #line 2341 
  struct list_head bf_q = {.next = & bf_q, .prev = & bf_q};
  #line 2342 
  int duration = 0;
  #line 2345 
  max_duration = ((sc->cur_chan)->beacon.beacon_interval * (int)(sc->cur_chan)->beacon.dtim_period) * 125;
  #line 2349 
  while (1) {
    {
      #line 2350 
      struct ath_frame_info *fi = get_frame_info(skb);
      #line 2352 
      if (ath_tx_prepare(hw,skb,& txctl) != 0) 
                                               #line 2353 
                                               break;
      #line 2355 
      bf = ath_tx_setup_buffer(sc,txctl.txq,(struct ath_atx_tid *)0,skb);
      #line 2356 
      if (bf == (struct ath_buf *)0) 
                                     #line 2357 
                                     break;
      #line 2359 
      bf->bf_lastbf = bf;
      #line 2360 
      ath_set_rates(vif,(struct ieee80211_sta *)0,bf);
      #line 2361 
      ath_buf_set_rate(sc,bf,& info,(int)fi->framelen,(_Bool)0);
      #line 2362 
      duration = (int)(info.rates[0].PktDuration + (unsigned int)duration);
      #line 2363 
      if (bf_tail != (struct ath_buf *)0) 
                                          #line 2364 
                                          bf_tail->bf_next = bf;
      #line 2366 
      list_add_tail_1(& bf->list,& bf_q);
      #line 2367 
      bf_tail = bf;
      #line 2368 
      skb = (struct sk_buff *)0;
      #line 2370 
      if (duration > max_duration) 
                                   #line 2371 
                                   break;
      #line 2373 
      skb = ieee80211_get_buffered_bc(hw,vif);
    }
    #line 2374 
    if (! (skb != (struct sk_buff *)0)) 
                                        #line 2349 
                                        break;
  }
  #line 2376 
  if (skb != (struct sk_buff *)0) 
                                  #line 2377 
                                  ieee80211_free_txskb(hw,skb);
  #line 2379 
  if (list_empty_1(& bf_q) != 0) 
                                 #line 2380 
                                 return;
  #line 2382 
  __mptr = (void *)bf_q.prev;
  #line 2382 
  bf = ((struct ath_buf *)__mptr);
  #line 2383 
  ath9k_set_moredata(sc,bf,(_Bool)0);
  #line 2385 
  __mptr_0 = (void *)bf_q.next;
  #line 2385 
  bf = ((struct ath_buf *)__mptr_0);
  #line 2386 
  ath_txq_lock_0(sc,txctl.txq);
  #line 2387 
  ath_tx_fill_desc(sc,bf,txctl.txq,0);
  #line 2388 
  ath_tx_txqaddbuf(sc,txctl.txq,& bf_q,(_Bool)0);
  #line 2389 
  (sc->debug.stats.txstats[(txctl.txq)->axq_qnum].queued) ++;
  #line 2390 
  ath_txq_unlock_0(sc,txctl.txq);
  #line 2391 
  return;
}

#line 2397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_complete(struct ath_softc *sc, struct sk_buff *skb, int tx_flags, struct ath_txq *txq, struct ieee80211_sta *sta)
{
  #line 2404 
  int padpos;
  #line 2404 
  int padsize;
  #line 2405 
  unsigned long flags;
  #line 2401 
  struct ieee80211_tx_info *tx_info = IEEE80211_SKB_CB(skb);
  #line 2402 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2403 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 2407 
  if ((common->debug_mask & 128) != 0) 
                                       #line 2407 
                                       ath_printk((char *)"\001",common,(char *)"TX complete: skb: %p\n",skb);
  #line 2409 
  if ((sc->sc_ah)->caldata != (struct ath9k_hw_cal_data *)0) 
                                                             #line 2410 
                                                             cif_set_bit_1(1L,& ((sc->sc_ah)->caldata)->cal_flags);
  #line 2412 
  if ((tx_flags & 1) == 0) 
    #line 2413 
    if ((tx_info->flags & 4U) != 0U) 
                                     #line 2414 
                                     tx_info->flags |= 2147483648U; else 
                                                                    #line 2416 
                                                                    tx_info->flags |= 512U;
  #line 2419 
  if ((tx_info->flags & 1U) != 0U) {
    #line 2420 
    padpos = (int)ieee80211_hdrlen((unsigned short)((int)hdr->frame_control));
    #line 2421 
    padsize = padpos & 3;
    #line 2422 
    if (padsize != 0 && skb->len > (unsigned int)(padpos + padsize)) {
      #line 2427 
      __memmove((void *)(skb->data + (unsigned long)padsize),(void *)skb->data,(unsigned long)padpos);
      #line 2428 
      skb_pull(skb,(unsigned int)padsize);
    }
  }
  #line 2432 
  cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_2(& sc->sc_pm_lock);
  #line 2433 
  if (((unsigned long)sc->ps_flags & 8UL) != 0UL && txq->axq_depth == 0U) {
    #line 2434 
    sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags & 65527U);
    #line 2435 
    if ((common->debug_mask & 2048) != 0) 
                                          #line 2435 
                                          ath_printk((char *)"\001",common,(char *)"Going back to sleep after having received TX status (0x%lx)\n",(unsigned long)sc->ps_flags & 15UL);
  }
  #line 2442 
  cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_2(& sc->sc_pm_lock,flags);
  #line 2444 
  ath_txq_skb_done(sc,txq,skb);
  #line 2445 
  tx_info->__anonCompField_ieee80211_tx_info_195.status.status_driver_data[0] = (void *)sta;
  #line 2446 
  __skb_queue_tail_0(& txq->complete_q,skb);
  #line 2447 
  return;
}

#line 2449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_complete_buf(struct ath_softc *sc, struct ath_buf *bf, struct ath_txq *txq, struct list_head *bf_q, struct ieee80211_sta *sta, struct ath_tx_status *ts, int txok)
{
  #line 2456 
  unsigned long flags;
  #line 2454 
  struct sk_buff *skb = bf->bf_mpdu;
  #line 2455 
  struct ieee80211_tx_info *tx_info = IEEE80211_SKB_CB(skb);
  #line 2457 
  int tx_flags = 0;
  #line 2459 
  if (txok == 0) 
                 #line 2460 
                 tx_flags |= 1;
  #line 2462 
  if (((int)ts->ts_status & 2) != 0) 
                                     #line 2463 
                                     tx_info->flags |= 256U;
  #line 2465 
  dma_unmap_single_attrs(sc->dev,bf->bf_buf_addr,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 2466 
  bf->bf_buf_addr = 0ULL;
  #line 2467 
  if ((int)sc->tx99_state != 0) 
                                #line 2468 
                                goto skip_tx_complete;
  #line 2470 
  if ((unsigned int)bf->bf_state.bfs_paprd != 0U) {
    {
      #line 2471 
      unsigned long __dummy;
      #line 2471 
      unsigned long __dummy2;
      }
    #line 2471 
    if (1 != 0) {
      {
        #line 2471 
        unsigned long __dummy_0;
        #line 2471 
        unsigned long __dummy2_0;
        }
      #line 2471 
      if (1 != 0) {
        #line 2471 
        ;
        #line 2471 
        if ((long)((bf->bf_state.bfs_paprd_timestamp + msecs_to_jiffies(100U)) - jiffies) < 0L) 
          #line 2474 
          dev_kfree_skb_any(skb); else 
                                       #line 2476 
                                       complete(& sc->paprd_complete);
      }
      else 
           #line 2476 
           complete(& sc->paprd_complete);
    }
    else 
         #line 2476 
         complete(& sc->paprd_complete);
  }
  else {
    #line 2478 
    ath_debug_stat_tx(sc,bf,ts,txq,(unsigned int)tx_flags);
    #line 2479 
    ath_tx_complete(sc,skb,tx_flags,txq,sta);
  }
  #line 2481 
  skip_tx_complete: 
                    #line 2481 
  ;
  #line 2485 
  bf->bf_mpdu = (struct sk_buff *)0;
  #line 2490 
  cif___ldv_spin_lock_txbuflock_of_ath_tx(& sc->tx.txbuflock);
  #line 2491 
  list_splice_tail_init(bf_q,& sc->tx.txbuf);
  #line 2492 
  cif_spin_unlock_irqrestore_txbuflock_of_ath_tx(& sc->tx.txbuflock,flags);
  #line 2493 
  return;
}

#line 2495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_rc_status(struct ath_softc *sc, struct ath_buf *bf, struct ath_tx_status *ts, int nframes, int nbad, int txok)
{
  #line 2504 
  u8 i;
  #line 2504 
  u8 tx_rateindex;
  #line 2499 
  struct sk_buff *skb = bf->bf_mpdu;
  #line 2500 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 2501 
  struct ieee80211_tx_info *tx_info = IEEE80211_SKB_CB(skb);
  #line 2502 
  struct ieee80211_hw *hw = sc->hw;
  #line 2503 
  struct ath_hw *ah = sc->sc_ah;
  #line 2506 
  if (txok != 0) 
                 #line 2507 
                 tx_info->__anonCompField_ieee80211_tx_info_195.status.ack_signal = (int)ts->ts_rssi;
  #line 2509 
  tx_rateindex = ts->ts_rateindex;
  {
    #line 2510 
    int __ret_warn_on = (int)hw->max_rates <= (int)tx_rateindex;
    #line 2510 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 2511 
      ldv_inline_asm();
      #line 2512 
      ldv_inline_asm();
    }
    #line 2510 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 2512 
  if ((tx_info->flags & 64U) != 0U) {
    #line 2513 
    tx_info->flags |= 1024U;
    #line 2515 
    if ((long)(nbad > nframes) != 0L) {
      #line 2516 
      ldv_inline_asm();
      #line 2517 
      ldv_inline_asm();
      #line 2518 
      ldv_inline_asm();
      #line 2515 
      ;
    }
  }
  #line 2517 
  tx_info->__anonCompField_ieee80211_tx_info_195.status.ampdu_len = (unsigned char)nframes;
  #line 2518 
  tx_info->__anonCompField_ieee80211_tx_info_195.status.ampdu_ack_len = (unsigned char)((int)((unsigned char)nframes) - (int)((unsigned char)nbad));
  #line 2520 
  if (((int)ts->ts_status & 2) == 0 && (tx_info->flags & 4U) == 0U) 
    #line 2534 
    if ((long)(((int)ts->ts_flags & 24) != 0) != 0L) {
      #line 2535 
      if ((int)ieee80211_is_data((unsigned short)((int)hdr->frame_control)) != 0) 
        #line 2536 
        if ((int)ah->tx_trig_level >= (int)((unsigned short)(sc->sc_ah)->config.max_txtrig_level)) 
          #line 2538 
          tx_info->__anonCompField_ieee80211_tx_info_195.status.rates[(int)tx_rateindex].count = (unsigned short)hw->max_rate_tries;
    }
  #line 2542 
  i = (unsigned char)((unsigned int)tx_rateindex + 1U);
  #line 2542 
  while ((int)hw->max_rates > (int)i) {
    #line 2543 
    tx_info->__anonCompField_ieee80211_tx_info_195.status.rates[(int)i].count = (unsigned short)0U;
    #line 2544 
    tx_info->__anonCompField_ieee80211_tx_info_195.status.rates[(int)i].idx = (signed char)(-1);
    #line 2542 
    i = (u8)((int)i + 1);
  }
  #line 2547 
  tx_info->__anonCompField_ieee80211_tx_info_195.status.rates[(int)tx_rateindex].count = (unsigned short)((unsigned int)ts->ts_longretry + 1U);
  #line 2550 
  tx_info->__anonCompField_ieee80211_tx_info_195.status.tx_time = (unsigned short)0U;
  #line 2551 
  return;
}

#line 2553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static void ath_tx_processq(struct ath_softc *sc, struct ath_txq *txq)
{
  #line 2557 
  struct ath_buf *bf;
  #line 2557 
  struct ath_buf *lastbf;
  #line 2558 
  struct list_head bf_head;
  #line 2559 
  struct ath_desc *ds;
  #line 2560 
  struct ath_tx_status ts;
  #line 2561 
  int status;
  #line 2555 
  struct ath_hw *ah = sc->sc_ah;
  #line 2556 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 2557 
  struct ath_buf *bf_held = (struct ath_buf *)0;
  #line 2563 
  if ((common->debug_mask & 2) != 0) {
    #line 2563 
    ;
    #line 2563 
    ;
    #line 2563 
    ;
    #line 2563 
    ath_printk((char *)"\001",common,(char *)"tx queue %d (%x), link %p\n",txq->axq_qnum,ath9k_hw_gettxbuf(sc->sc_ah,txq->axq_qnum),txq->axq_link);
  }
  #line 2567 
  ath_txq_lock_0(sc,txq);
  #line 2568 
  while (1) {
    #line 2577 
    void *__mptr;
    #line 2569 
    if ((int)test_bit(4L,& common->op_flags) != 0) 
                                                   #line 2570 
                                                   break;
    #line 2572 
    if (list_empty_1(& txq->axq_q) != 0) {
      #line 2573 
      txq->axq_link = (void *)0;
      #line 2574 
      ath_txq_schedule(sc,txq);
      #line 2575 
      break;
    }
    #line 2577 
    __mptr = (void *)txq->axq_q.next;
    #line 2577 
    bf = ((struct ath_buf *)__mptr);
    #line 2587 
    bf_held = (struct ath_buf *)0;
    #line 2588 
    if ((int)bf->bf_state.stale != 0) {
      #line 2593 
      void *__mptr_0;
      #line 2589 
      bf_held = bf;
      #line 2590 
      if (list_is_last(& bf_held->list,& txq->axq_q) != 0) 
                                                           #line 2591 
                                                           break;
      #line 2593 
      __mptr_0 = (void *)bf_held->list.next;
      #line 2593 
      bf = ((struct ath_buf *)__mptr_0);
    }
    #line 2597 
    lastbf = bf->bf_lastbf;
    #line 2598 
    ds = (struct ath_desc *)lastbf->bf_desc;
    #line 2600 
    memset((void *)(& ts),0,48UL);
    #line 2601 
    status = ath9k_hw_txprocdesc(ah,(void *)ds,& ts);
    #line 2602 
    if (status == -115) 
                        #line 2603 
                        break;
    #line 2605 
    (sc->debug.stats.txstats[txq->axq_qnum].txprocdesc) ++;
    #line 2612 
    lastbf->bf_state.stale = (_Bool)1;
    #line 2613 
    INIT_LIST_HEAD_0(& bf_head);
    #line 2614 
    if (list_is_singular(& lastbf->list) == 0) 
                                               #line 2615 
                                               list_cut_position(& bf_head,& txq->axq_q,lastbf->list.prev);
    #line 2618 
    if (bf_held != (struct ath_buf *)0) {
      #line 2619 
      list_del_1(& bf_held->list);
      #line 2620 
      ath_tx_return_buffer(sc,bf_held);
    }
    #line 2623 
    ath_tx_process_buffer(sc,txq,& ts,bf,& bf_head);
  }
  #line 2625 
  ath_txq_unlock_complete(sc,txq);
  #line 2626 
  return;
}

#line 2628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_tx_tasklet(struct ath_softc *sc)
{
  #line 2632 
  int i;
  #line 2630 
  struct ath_hw *ah = sc->sc_ah;
  #line 2631 
  u32 qcumask = ah->intr_txqs & 1023U;
  #line 2634 
  rcu_read_lock();
  #line 2635 
  i = 0;
  #line 2635 
  while (i <= 9) {
    #line 2636 
    if ((sc->tx.txqsetup & (unsigned int)(1 << i)) != 0U && ((unsigned int)(1 << i) & qcumask) != 0U) 
      #line 2637 
      ath_tx_processq(sc,& sc->tx.txq[i]);
    #line 2635 
    i ++;
  }
  #line 2639 
  rcu_read_unlock();
  #line 2640 
  return;
}

#line 2642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_tx_edma_tasklet(struct ath_softc *sc)
{
  #line 2644 
  struct ath_tx_status ts;
  #line 2647 
  struct ath_txq *txq;
  #line 2648 
  struct ath_buf *bf;
  #line 2648 
  struct ath_buf *lastbf;
  #line 2649 
  struct list_head bf_head;
  #line 2650 
  struct list_head *fifo_list;
  #line 2651 
  int status;
  #line 2645 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2646 
  struct ath_hw *ah = sc->sc_ah;
  #line 2653 
  rcu_read_lock();
  #line 2654 
  while (1) {
    {
      #line 2692 
      void *__mptr;
      #line 2655 
      if ((int)test_bit(4L,& common->op_flags) != 0) 
                                                     #line 2656 
                                                     break;
      #line 2658 
      status = ath9k_hw_txprocdesc(ah,(void *)0,& ts);
      #line 2659 
      if (status == -115) 
                          #line 2660 
                          break;
      #line 2661 
      if (status == -5) {
        #line 2662 
        if ((common->debug_mask & 128) != 0) 
                                             #line 2662 
                                             ath_printk((char *)"\001",common,(char *)"Error processing tx status\n");
        #line 2663 
        break;
      }
      #line 2667 
      if ((unsigned int)ts.qid == sc->beacon.beaconq) {
        #line 2668 
        sc->beacon.tx_processed = (_Bool)1;
        #line 2669 
        sc->beacon.tx_last = (_Bool)(((int)ts.ts_status & 95) == 0);
        #line 2671 
        if ((int)ath9k_is_chanctx_enabled() != 0) 
                                                  #line 2672 
                                                  ath_chanctx_event(sc,(struct ieee80211_vif *)0,(enum ath_chanctx_event)ATH_CHANCTX_EVENT_BEACON_SENT);
        #line 2676 
        ath9k_csa_update(sc);
        #line 2677 
        goto __Cont;
      }
      #line 2680 
      txq = & sc->tx.txq[(int)ts.qid];
      #line 2682 
      ath_txq_lock_0(sc,txq);
      #line 2684 
      (sc->debug.stats.txstats[txq->axq_qnum].txprocdesc) ++;
      #line 2686 
      fifo_list = & txq->txq_fifo[(int)txq->txq_tailidx];
      #line 2687 
      if (list_empty_1(fifo_list) != 0) {
        #line 2688 
        ath_txq_unlock_0(sc,txq);
        #line 2689 
        break;
      }
      #line 2692 
      __mptr = (void *)fifo_list->next;
      #line 2692 
      bf = ((struct ath_buf *)__mptr);
      #line 2693 
      if ((int)bf->bf_state.stale != 0) {
        #line 2696 
        void *__mptr_0;
        #line 2694 
        list_del_1(& bf->list);
        #line 2695 
        ath_tx_return_buffer(sc,bf);
        #line 2696 
        __mptr_0 = (void *)fifo_list->next;
        #line 2696 
        bf = ((struct ath_buf *)__mptr_0);
      }
      #line 2699 
      lastbf = bf->bf_lastbf;
      #line 2701 
      INIT_LIST_HEAD_0(& bf_head);
      #line 2702 
      if (list_is_last(& lastbf->list,fifo_list) != 0) {
        #line 2703 
        list_splice_tail_init(fifo_list,& bf_head);
        #line 2704 
        txq->txq_tailidx = (u8)((int)txq->txq_tailidx + 1);
        #line 2704 
        txq->txq_tailidx = (unsigned char)((unsigned int)txq->txq_tailidx & 7U);
        #line 2706 
        if (list_empty_1(& txq->axq_q) == 0) {
          #line 2707 
          struct list_head bf_q;
          #line 2709 
          INIT_LIST_HEAD_0(& bf_q);
          #line 2710 
          txq->axq_link = (void *)0;
          #line 2711 
          list_splice_tail_init(& txq->axq_q,& bf_q);
          #line 2712 
          ath_tx_txqaddbuf(sc,txq,& bf_q,(_Bool)1);
        }
      }
      else {
        #line 2715 
        lastbf->bf_state.stale = (_Bool)1;
        #line 2716 
        if (bf != lastbf) 
                          #line 2717 
                          list_cut_position(& bf_head,fifo_list,lastbf->list.prev);
      }
      #line 2721 
      ath_tx_process_buffer(sc,txq,& ts,bf,& bf_head);
      #line 2722 
      ath_txq_unlock_complete(sc,txq);
    }
    #line 2654 
    __Cont: 
            #line 2654 
    ;
  }
  #line 2724 
  rcu_read_unlock();
  #line 2725 
  return;
}

#line 2731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static int ath_txstatus_setup(struct ath_softc *sc, int size)
{
  #line 2733 
  struct ath_descdma *dd = & sc->txsdma;
  #line 2734 
  u8 txs_len = (sc->sc_ah)->caps.txs_len;
  #line 2736 
  dd->dd_desc_len = (unsigned int)((int)txs_len * size);
  #line 2737 
  dd->dd_desc = dmam_alloc_coherent(sc->dev,(unsigned long)dd->dd_desc_len,& dd->dd_desc_paddr,3264U);
  #line 2739 
  if (dd->dd_desc == (void *)0) 
                                #line 2740 
                                return -12;
  #line 2742 
  return 0;
}

#line 2745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
static int ath_tx_edma_init(struct ath_softc *sc)
{
  #line 2747 
  int err;
  #line 2749 
  err = ath_txstatus_setup(sc,512);
  #line 2750 
  if (err == 0) 
                #line 2751 
                ath9k_hw_setup_statusring(sc->sc_ah,sc->txsdma.dd_desc,(unsigned int)sc->txsdma.dd_desc_paddr,(unsigned short)512);
  #line 2755 
  return err;
}

#line 2758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
int ath_tx_init(struct ath_softc *sc, int nbufs)
{
  #line 2760 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2761 
  int error = 0;
  #line 2763 
  spinlock_check(& sc->tx.txbuflock);
  {
    #line 2763 
    struct lock_class_key __key;
    #line 2763 
    __raw_spin_lock_init(& sc->tx.txbuflock.__anonCompField_spinlock_25.rlock,(char *)"&(&sc->tx.txbuflock)->rlock",& __key);
  }
  #line 2765 
  error = ath_descdma_setup(sc,& sc->tx.txdma,& sc->tx.txbuf,(char *)"tx",nbufs,1,(_Bool)1);
  #line 2767 
  if (error != 0) {
    #line 2768 
    ath_printk((char *)"\001",common,(char *)"Failed to allocate tx descriptors: %d\n",error);
    #line 2770 
    return error;
  }
  #line 2773 
  error = ath_descdma_setup(sc,& sc->beacon.bdma,& sc->beacon.bbuf,(char *)"beacon",8,1,(_Bool)1);
  #line 2775 
  if (error != 0) {
    #line 2776 
    ath_printk((char *)"\001",common,(char *)"Failed to allocate beacon descriptors: %d\n",error);
    #line 2778 
    return error;
  }
  #line 2781 
  if (((sc->sc_ah)->caps.hw_caps & 16U) != 0U) 
                                               #line 2782 
                                               error = ath_tx_edma_init(sc);
  #line 2784 
  return error;
}

#line 2787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_tx_node_init(struct ath_softc *sc, struct ath_node *an)
{
  #line 2789 
  struct ath_atx_tid *tid;
  #line 2790 
  int tidno;
  #line 2790 
  int acno;
  #line 2792 
  tidno = 0;
  #line 2792 
  while (tidno <= 15) {
    {
      #line 2793 
      tid = ath_node_to_tid(an,(unsigned char)((int)((unsigned char)tidno)));
      #line 2794 
      tid->an = an;
      #line 2795 
      tid->tidno = (unsigned char)tidno;
      #line 2796 
      tid->seq_next = ((unsigned short)0U);
      #line 2796 
      tid->seq_start = ((unsigned short)0U);
      #line 2797 
      tid->baw_size = (unsigned short)64U;
      #line 2798 
      tid->baw_tail = 0;
      #line 2798 
      tid->baw_head = 0;
      #line 2799 
      tid->active = (_Bool)0;
      #line 2800 
      tid->clear_ps_filter = (_Bool)1;
      #line 2801 
      __skb_queue_head_init(& tid->retry_q);
      #line 2802 
      INIT_LIST_HEAD_0(& tid->list);
      #line 2803 
      if (tidno != 0 && tidno != 3) {
        #line 2803 
        int tmp_1;
        #line 2803 
        if ((unsigned int)tidno + 4294967295U > 1U) 
                                                    #line 2803 
                                                    tmp_1 = (unsigned int)tidno + 4294967292U <= 1U; else 
                                                                    #line 2803 
                                                                    tmp_1 = 3;
        #line 2803 
        acno = tmp_1;
      }
      else 
           #line 2803 
           acno = 2;
      #line 2804 
      tid->txq = sc->tx.txq_map[acno];
      #line 2806 
      if (an->sta == (struct ieee80211_sta *)0) 
                                                #line 2807 
                                                break;
    }
    #line 2792 
    tidno ++;
  }
  #line 2809 
  return;
}

#line 2811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
void ath_tx_node_cleanup(struct ath_softc *sc, struct ath_node *an)
{
  #line 2813 
  struct ath_atx_tid *tid;
  #line 2814 
  struct ath_txq *txq;
  #line 2815 
  int tidno;
  #line 2817 
  rcu_read_lock();
  #line 2819 
  tidno = 0;
  #line 2819 
  while (tidno <= 15) {
    {
      #line 2820 
      tid = ath_node_to_tid(an,(unsigned char)((int)((unsigned char)tidno)));
      #line 2821 
      txq = tid->txq;
      #line 2823 
      ath_txq_lock_0(sc,txq);
      #line 2825 
      if (list_empty_1(& tid->list) == 0) 
                                          #line 2826 
                                          list_del_init_0(& tid->list);
      #line 2828 
      ath_tid_drain(sc,txq,tid);
      #line 2829 
      tid->active = (_Bool)0;
      #line 2831 
      ath_txq_unlock_0(sc,txq);
      #line 2833 
      if (an->sta == (struct ieee80211_sta *)0) 
                                                #line 2834 
                                                break;
    }
    #line 2819 
    tidno ++;
  }
  #line 2837 
  rcu_read_unlock();
  #line 2838 
  return;
}

#line 2842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/xmit.c"
int ath9k_tx99_send(struct ath_softc *sc, struct sk_buff *skb, struct ath_tx_control *txctl)
{
  #line 2848 
  struct ath_buf *bf;
  #line 2849 
  int padpos;
  #line 2849 
  int padsize;
  #line 2845 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 2846 
  struct ath_frame_info *fi = get_frame_info(skb);
  #line 2847 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 2851 
  padpos = (int)ieee80211_hdrlen((unsigned short)((int)hdr->frame_control));
  #line 2852 
  padsize = padpos & 3;
  #line 2854 
  if (padsize != 0 && skb->len > (unsigned int)padpos) {
    #line 2855 
    ;
    #line 2855 
    if (skb_headroom(skb) < (unsigned int)padsize) {
      #line 2856 
      if ((common->debug_mask & 128) != 0) 
                                           #line 2856 
                                           ath_printk((char *)"\001",common,(char *)"tx99 padding failed\n");
      #line 2858 
      return -22;
    }
    #line 2861 
    skb_push(skb,(unsigned int)padsize);
    #line 2862 
    __memmove((void *)skb->data,(void *)(skb->data + (unsigned long)padsize),(unsigned long)padpos);
  }
  #line 2865 
  fi->keyix = (unsigned char)255U;
  #line 2866 
  fi->framelen = (unsigned short)((unsigned int)((unsigned short)skb->len) + 4U);
  #line 2867 
  fi->keytype = (enum ath9k_key_type)0U;
  #line 2869 
  bf = ath_tx_setup_buffer(sc,txctl->txq,(struct ath_atx_tid *)0,skb);
  #line 2870 
  if (bf == (struct ath_buf *)0) {
    #line 2871 
    if ((common->debug_mask & 128) != 0) 
                                         #line 2871 
                                         ath_printk((char *)"\001",common,(char *)"tx99 buffer setup failed\n");
    #line 2872 
    return -22;
  }
  #line 2875 
  ath_set_rates(sc->tx99_vif,(struct ieee80211_sta *)0,bf);
  #line 2877 
  ath9k_hw_set_desc_link(sc->sc_ah,bf->bf_desc,(unsigned int)bf->bf_daddr);
  #line 2878 
  ath9k_hw_tx99_start(sc->sc_ah,(txctl->txq)->axq_qnum);
  #line 2880 
  ath_tx_send_normal(sc,txctl->txq,(struct ath_atx_tid *)0,skb);
  #line 2882 
  return 0;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr)
{
  #line 123 
  ldv_set_bit(nr,addr);
  #line 124 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 137 
  ldv_init_list_head(list);
  #line 138 
  return;
}

#line 791  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_lock_bh_axq_lock_of_ath_txq_1(spinlock_t *lock)
{
  #line 794 
  ldv_spin_model_lock((char *)"axq_lock_of_ath_txq");
  #line 796 
  spin_lock_bh_2(lock);
  #line 797 
  return;
}

#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_unlock_bh_axq_lock_of_ath_txq_1(spinlock_t *lock)
{
  #line 803 
  ldv_spin_model_unlock((char *)"axq_lock_of_ath_txq");
  #line 805 
  spin_unlock_bh_2(lock);
  #line 806 
  return;
}

#line 809  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_lock_bh_txbuflock_of_ath_tx(spinlock_t *lock)
{
  #line 812 
  ldv_spin_model_lock((char *)"txbuflock_of_ath_tx");
  #line 814 
  spin_lock_bh_2(lock);
  #line 815 
  return;
}

#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_unlock_bh_txbuflock_of_ath_tx(spinlock_t *lock)
{
  #line 821 
  ldv_spin_model_unlock((char *)"txbuflock_of_ath_tx");
  #line 823 
  spin_unlock_bh_2(lock);
  #line 824 
  return;
}

#line 827  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_lock_bh_chan_lock_of_ath_softc_1(spinlock_t *lock)
{
  #line 830 
  ldv_spin_model_lock((char *)"chan_lock_of_ath_softc");
  #line 832 
  spin_lock_bh_2(lock);
  #line 833 
  return;
}

#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_unlock_bh_chan_lock_of_ath_softc_1(spinlock_t *lock)
{
  #line 839 
  ldv_spin_model_unlock((char *)"chan_lock_of_ath_softc");
  #line 841 
  spin_unlock_bh_2(lock);
  #line 842 
  return;
}

#line 845  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_2(spinlock_t *lock)
{
  #line 848 
  ldv_spin_model_lock((char *)"sc_pm_lock_of_ath_softc");
  #line 850 
  __ldv_spin_lock(lock);
  #line 851 
  return;
}

#line 854  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_2(spinlock_t *lock, unsigned long flags)
{
  #line 857 
  ldv_spin_model_unlock((char *)"sc_pm_lock_of_ath_softc");
  #line 859 
  spin_unlock_irqrestore_2(lock,flags);
  #line 860 
  return;
}

#line 863  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif___ldv_spin_lock_txbuflock_of_ath_tx(spinlock_t *lock)
{
  #line 866 
  ldv_spin_model_lock((char *)"txbuflock_of_ath_tx");
  #line 868 
  __ldv_spin_lock(lock);
  #line 869 
  return;
}

#line 872  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/xmit.i.aux"
static void cif_spin_unlock_irqrestore_txbuflock_of_ath_tx(spinlock_t *lock, unsigned long flags)
{
  #line 875 
  ldv_spin_model_unlock((char *)"txbuflock_of_ath_tx");
  #line 877 
  spin_unlock_irqrestore_2(lock,flags);
  #line 878 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 476 
#line 476 
int scnprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_3(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 827  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static void cif_spin_lock_bh_btcoex_lock_of_ath_btcoex(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_3(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static void cif_spin_unlock_bh_btcoex_lock_of_ath_btcoex(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_3(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static void cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_3(spinlock_t *lock, unsigned long flags);
#line 35 
#line 809 
static void cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_3(spinlock_t *lock);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 845  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static int cif_mod_timer_1(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static int cif_del_timer_sync_1(struct timer_list *timer);
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/leds.h"
#line 164 
int led_classdev_register_ext(struct device *, struct led_classdev *, struct led_init_data *);
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/leds.h"
__inline static int led_classdev_register(struct device *parent, struct led_classdev *led_cdev)
{
  #line 181 
  return led_classdev_register_ext(parent,led_cdev,(struct led_init_data *)0);
}

#line 193 
#line 193 
void led_classdev_unregister(struct led_classdev *);
#line 4749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static struct device *wiphy_dev(struct wiphy *wiphy)
{
  #line 4751 
  return wiphy->dev.parent;
}

#line 4760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static char *wiphy_name(struct wiphy *wiphy)
{
  #line 4762 
  return dev_name(& wiphy->dev);
}

#line 6082 
#line 6082 
void wiphy_rfkill_set_hw_state(struct wiphy *, bool);
#line 6088 
#line 6088 
void wiphy_rfkill_start_polling(struct wiphy *);
#line 4165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 4165 
char *__ieee80211_get_radio_led_name(struct ieee80211_hw *);
#line 4247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static char *ieee80211_get_radio_led_name(struct ieee80211_hw *hw)
{
  #line 4250 
  return __ieee80211_get_radio_led_name(hw);
}

#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/btcoex.h"
#line 124 
void ath9k_hw_btcoex_init_scheme(struct ath_hw *);
#line 125 
#line 125 
void ath9k_hw_btcoex_init_2wire(struct ath_hw *);
#line 126 
#line 126 
void ath9k_hw_btcoex_init_3wire(struct ath_hw *);
#line 127 
#line 127 
void ath9k_hw_btcoex_deinit(struct ath_hw *);
#line 128 
#line 128 
void ath9k_hw_btcoex_init_mci(struct ath_hw *);
#line 129 
#line 129 
void ath9k_hw_init_btcoex_hw(struct ath_hw *, int);
#line 130 
#line 130 
void ath9k_hw_btcoex_set_weight(struct ath_hw *, u32, u32, enum ath_stomp_type);
#line 134 
#line 134 
void ath9k_hw_btcoex_disable(struct ath_hw *);
#line 135 
#line 135 
void ath9k_hw_btcoex_bt_stomp(struct ath_hw *, enum ath_stomp_type);
#line 1033  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
#line 1033 
void ath9k_hw_gpio_free(struct ath_hw *, u32);
#line 1034 
#line 1034 
u32 ath9k_hw_gpio_get(struct ath_hw *, u32);
#line 1167 
#line 1167 
void ath9k_hw_btcoex_enable(struct ath_hw *);
#line 1169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
__inline static enum ath_btcoex_scheme ath9k_hw_get_btcoex_scheme(struct ath_hw *ah)
{
  #line 1171 
  return ah->btcoex_hw.scheme;
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_mci.h"
#line 309 
u32 ar9003_mci_state(struct ath_hw *, u32);
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.h"
#line 153 
void ath_mci_flush_profile(struct ath_mci_profile *mci);
#line 154 
#line 154 
int ath_mci_setup(struct ath_softc *sc);
#line 155 
#line 155 
void ath_mci_cleanup(struct ath_softc *sc);
#line 156 
#line 156 
void ath_mci_intr(struct ath_softc *sc);
#line 157 
#line 157 
void ath9k_mci_update_rssi(struct ath_softc *sc);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
int ath9k_led_blink;
#line 791  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
int ath9k_init_btcoex(struct ath_softc *sc);
#line 792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath9k_deinit_btcoex(struct ath_softc *sc);
#line 795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath9k_btcoex_timer_resume(struct ath_softc *sc);
#line 796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath9k_btcoex_timer_pause(struct ath_softc *sc);
#line 800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
int ath9k_dump_btcoex(struct ath_softc *sc, u8 *buf, u32 size);
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath_init_leds(struct ath_softc *sc);
#line 845  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath_deinit_leds(struct ath_softc *sc);
#line 1132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath_start_rfkill_poll(struct ath_softc *sc);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
static void ath_fill_led_pin(struct ath_softc *sc)
{
  #line 27 
  struct ath_hw *ah = sc->sc_ah;
  #line 30 
  if (ah->led_pin < 0) 
    #line 31 
    if (ah->hw_version.macVersion == 384U) 
                                           #line 32 
                                           ah->led_pin = 8;
    else 
      #line 33 
      if (ah->hw_version.macVersion == 576U) 
                                             #line 34 
                                             ah->led_pin = 6;
      else 
        #line 35 
        if (ah->hw_version.macVersion == 448U) 
                                               #line 36 
                                               ah->led_pin = 10;
        else 
          #line 37 
          if (ah->hw_version.macVersion == 640U || ah->hw_version.macVersion == 704U) 
            #line 38 
            ah->led_pin = 4; else 
                                  #line 40 
                                  ah->led_pin = 1;
  #line 44 
  ath9k_hw_gpio_request_out(ah,(unsigned int)ah->led_pin,(char *)"ath9k-led",0U);
  #line 48 
  ath9k_hw_set_gpio(ah,(unsigned int)ah->led_pin,(unsigned int)(! ah->config.led_active_high));
  #line 49 
  return;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
static void ath_led_brightness(struct led_classdev *led_cdev, enum led_brightness brightness)
{
  #line 54 
  void *__mptr;
  #line 54 
  __mptr = (void *)led_cdev;
  #line 54 
  struct ath_softc *sc = ((struct ath_softc *)(__mptr + 18446744073709538080U));
  #line 55 
  u32 val = (unsigned int)(brightness == (unsigned int)LED_OFF);
  #line 57 
  if ((int)(sc->sc_ah)->config.led_active_high != 0) 
                                                     #line 58 
                                                     val = (unsigned int)(val == 0U);
  #line 60 
  ath9k_hw_set_gpio(sc->sc_ah,(unsigned int)(sc->sc_ah)->led_pin,val);
  #line 61 
  return;
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath_deinit_leds(struct ath_softc *sc)
{
  #line 65 
  if (! sc->led_registered) 
                            #line 66 
                            return;
  #line 68 
  ath_led_brightness(& sc->led_cdev,(enum led_brightness)LED_OFF);
  #line 69 
  led_classdev_unregister(& sc->led_cdev);
  #line 71 
  ath9k_hw_gpio_free(sc->sc_ah,(unsigned int)(sc->sc_ah)->led_pin);
  #line 72 
  return;
}

#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath_init_leds(struct ath_softc *sc)
{
  #line 76 
  int ret;
  #line 78 
  if ((sc->sc_ah)->hw_version.macVersion == 20U) 
                                                 #line 79 
                                                 return;
  #line 81 
  ath_fill_led_pin(sc);
  #line 83 
  if (ath9k_led_blink == 0) 
                            #line 84 
                            sc->led_cdev.default_trigger = ieee80211_get_radio_led_name(sc->hw);
  #line 87 
  ;
  #line 87 
  snprintf((char *)(& sc->led_name),32UL,(char *)"ath9k-%s",wiphy_name((sc->hw)->wiphy));
  #line 89 
  sc->led_cdev.name = (char *)(& sc->led_name);
  #line 90 
  sc->led_cdev.brightness_set = & ath_led_brightness;
  #line 92 
  ;
  #line 92 
  ret = led_classdev_register(wiphy_dev((sc->hw)->wiphy),& sc->led_cdev);
  #line 93 
  if (ret < 0) 
               #line 94 
               return;
  #line 96 
  sc->led_registered = (_Bool)1;
  #line 97 
  return;
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
static bool ath_is_rfkill_set(struct ath_softc *sc)
{
  #line 107 
  bool is_blocked;
  #line 106 
  struct ath_hw *ah = sc->sc_ah;
  #line 109 
  ath9k_ps_wakeup(sc);
  #line 110 
  is_blocked = (_Bool)(ath9k_hw_gpio_get(ah,ah->rfkill_gpio) == ah->rfkill_polarity);
  #line 112 
  ath9k_ps_restore(sc);
  #line 114 
  return is_blocked;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath9k_rfkill_poll_state(struct ieee80211_hw *hw)
{
  #line 119 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 120 
  bool blocked = (_Bool)((int)ath_is_rfkill_set(sc) != 0);
  #line 122 
  wiphy_rfkill_set_hw_state(hw->wiphy,(_Bool)((bool)((int)blocked) != 0));
  #line 123 
  return;
}

#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath_start_rfkill_poll(struct ath_softc *sc)
{
  #line 127 
  struct ath_hw *ah = sc->sc_ah;
  #line 129 
  if ((ah->caps.hw_caps & 2U) != 0U) 
                                     #line 130 
                                     wiphy_rfkill_start_polling((sc->hw)->wiphy);
  #line 131 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
static void ath_detect_bt_priority(struct ath_softc *sc)
{
  #line 144 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 145 
  struct ath_hw *ah = sc->sc_ah;
  #line 147 
  if (ath9k_hw_gpio_get(sc->sc_ah,
                        (unsigned int)ah->btcoex_hw.btpriority_gpio) != 0U) 
    #line 148 
    (btcoex->bt_priority_cnt) ++;
  {
    #line 150 
    unsigned long __dummy;
    #line 150 
    unsigned long __dummy2;
    }
  #line 150 
  if (1 != 0) {
    {
      #line 150 
      unsigned long __dummy_0;
      #line 150 
      unsigned long __dummy2_0;
      }
    #line 150 
    if (1 != 0) {
      #line 150 
      ;
      #line 150 
      if ((long)((btcoex->bt_priority_time + msecs_to_jiffies(1000U)) - jiffies) < 0L) {
        #line 152 
        cif_clear_bit_1(0L,& btcoex->op_flags);
        #line 153 
        cif_clear_bit_1(1L,& btcoex->op_flags);
        #line 155 
        if (btcoex->bt_priority_cnt > 14U) {
          #line 156 
          ;
          #line 156 
          if ((ath9k_hw_common(sc->sc_ah)->debug_mask & 4096) != 0) {
            #line 156 
            ath_printk((char *)"\001",ath9k_hw_common(sc->sc_ah),(char *)"BT scan detected\n");
          }
          #line 158 
          cif_set_bit_2(0L,& btcoex->op_flags);
          #line 159 
          cif_set_bit_2(1L,& btcoex->op_flags);
        }
        else 
          #line 160 
          if (btcoex->bt_priority_cnt > 2U) {
            #line 161 
            ;
            #line 161 
            if ((ath9k_hw_common(sc->sc_ah)->debug_mask & 4096) != 0) {
              #line 161 
              ath_printk((char *)"\001",ath9k_hw_common(sc->sc_ah),(char *)"BT priority traffic detected\n");
            }
            #line 163 
            cif_set_bit_2(0L,& btcoex->op_flags);
          }
        #line 166 
        btcoex->bt_priority_cnt = 0U;
        #line 167 
        btcoex->bt_priority_time = jiffies;
      }
    }
  }
  #line 169 
  return;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
static void ath_mci_ftp_adjust(struct ath_softc *sc)
{
  #line 173 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 174 
  struct ath_mci_profile *mci = & btcoex->mci;
  #line 175 
  struct ath_hw *ah = sc->sc_ah;
  #line 177 
  if (btcoex->bt_wait_time > 100U) {
    #line 178 
    if (ar9003_mci_state(ah,22U) != 0U) 
      #line 178 
      if ((unsigned int)mci->num_pan != 0U || (unsigned int)mci->num_other_acl != 0U) 
        #line 180 
        ah->btcoex_hw.mci.stomp_ftp = (unsigned char)(sc->rx.num_pkts <= 4U); else 
                                                                    #line 183 
                                                                    ah->btcoex_hw.mci.stomp_ftp = (unsigned char)0U;
    else 
         #line 183 
         ah->btcoex_hw.mci.stomp_ftp = (unsigned char)0U;
    #line 184 
    btcoex->bt_wait_time = 0U;
    #line 185 
    sc->rx.num_pkts = 0U;
  }
  #line 187 
  return;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
static void ath_btcoex_period_timer(struct timer_list *t)
{
  #line 196 
  void *__mptr;
  #line 199 
  enum ath_stomp_type stomp_type;
  #line 200 
  u32 timer_period;
  #line 201 
  unsigned long flags;
  #line 196 
  __mptr = (void *)t;
  #line 196 
  struct ath_softc *sc = ((struct ath_softc *)(__mptr + 18446744073709535416U));
  #line 197 
  struct ath_hw *ah = sc->sc_ah;
  #line 198 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 203 
  cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_3(& sc->sc_pm_lock);
  #line 204 
  if ((sc->sc_ah)->power_mode == (unsigned int)ATH9K_PM_NETWORK_SLEEP) {
    #line 205 
    btcoex->bt_wait_time += btcoex->btcoex_period;
    #line 206 
    cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_3(& sc->sc_pm_lock,flags);
    #line 207 
    goto skip_hw_wakeup;
  }
  #line 209 
  cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_3(& sc->sc_pm_lock,flags);
  #line 211 
  ath9k_ps_wakeup(sc);
  #line 212 
  cif_spin_lock_bh_btcoex_lock_of_ath_btcoex(& btcoex->btcoex_lock);
  #line 214 
  if ((ah->caps.hw_caps & 32768U) != 0U) {
    #line 215 
    ath9k_mci_update_rssi(sc);
    #line 216 
    ath_mci_ftp_adjust(sc);
  }
  #line 219 
  if ((ah->caps.hw_caps & 32768U) == 0U) 
                                         #line 220 
                                         ath_detect_bt_priority(sc);
  #line 222 
  stomp_type = (enum ath_stomp_type)btcoex->bt_stomp_type;
  #line 223 
  timer_period = btcoex->btcoex_no_stomp;
  #line 225 
  if ((ah->caps.hw_caps & 32768U) == 0U) {
    #line 226 
    if ((int)test_bit(1L,& btcoex->op_flags) != 0) {
      #line 227 
      stomp_type = ATH_BTCOEX_STOMP_ALL;
      #line 228 
      timer_period = btcoex->btscan_no_stomp;
    }
  }
  else 
    #line 230 
    if ((unsigned int)btcoex->stomp_audio > 4U) {
      #line 231 
      stomp_type = ATH_BTCOEX_STOMP_AUDIO;
      #line 232 
      btcoex->stomp_audio = (unsigned char)0U;
    }
  #line 235 
  ath9k_hw_btcoex_bt_stomp(ah,stomp_type);
  #line 236 
  ath9k_hw_btcoex_enable(ah);
  #line 238 
  cif_spin_unlock_bh_btcoex_lock_of_ath_btcoex(& btcoex->btcoex_lock);
  #line 240 
  if (btcoex->btcoex_period != btcoex->btcoex_no_stomp) {
    #line 241 
    ;
    #line 241 
    ;
    #line 241 
    cif_mod_timer_1(& btcoex->no_stomp_timer,msecs_to_jiffies(timer_period) + jiffies);
  }
  #line 244 
  ath9k_ps_restore(sc);
  #line 246 
  skip_hw_wakeup: 
                  #line 246 
  ;
  #line 247 
  ;
  #line 247 
  ;
  #line 247 
  cif_mod_timer_1(& btcoex->period_timer,msecs_to_jiffies(btcoex->btcoex_period) + jiffies);
  #line 249 
  return;
}

#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
static void ath_btcoex_no_stomp_timer(struct timer_list *t)
{
  #line 257 
  void *__mptr;
  #line 257 
  __mptr = (void *)t;
  #line 257 
  struct ath_softc *sc = ((struct ath_softc *)(__mptr + 18446744073709535328U));
  #line 258 
  struct ath_hw *ah = sc->sc_ah;
  #line 259 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 261 
  ath9k_ps_wakeup(sc);
  #line 262 
  cif_spin_lock_bh_btcoex_lock_of_ath_btcoex(& btcoex->btcoex_lock);
  #line 264 
  if (btcoex->bt_stomp_type == 1) 
                                  #line 264 
                                  goto _LOR;
  else 
    #line 264 
    if ((ah->caps.hw_caps & 32768U) == 0U) {
      #line 265 
      if ((int)test_bit(1L,& btcoex->op_flags) != 0) 
                                                     #line 264 
                                                     _LOR: 
                                                           #line 267 
                                                           ath9k_hw_btcoex_bt_stomp(ah,(enum ath_stomp_type)ATH_BTCOEX_STOMP_NONE); else 
                                                                    #line 264 
                                                                    goto _LAND;
    }
    else {
      #line 264 
      _LAND: 
             #line 268 
      ;
      #line 268 
      if (btcoex->bt_stomp_type == 0) 
                                      #line 269 
                                      ath9k_hw_btcoex_bt_stomp(ah,(enum ath_stomp_type)ATH_BTCOEX_STOMP_LOW);
    }
  #line 271 
  ath9k_hw_btcoex_enable(ah);
  #line 272 
  cif_spin_unlock_bh_btcoex_lock_of_ath_btcoex(& btcoex->btcoex_lock);
  #line 273 
  ath9k_ps_restore(sc);
  #line 274 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
static void ath_init_btcoex_timer(struct ath_softc *sc)
{
  #line 278 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 280 
  btcoex->btcoex_period = 45U;
  #line 281 
  btcoex->btcoex_no_stomp = (btcoex->btcoex_period * 45U) / 100U;
  #line 283 
  btcoex->btscan_no_stomp = (btcoex->btcoex_period * 10U) / 100U;
  #line 285 
  btcoex->bt_stomp_type = 1;
  {
    #line 287 
    struct lock_class_key __key;
    #line 287 
    init_timer_key(& btcoex->period_timer,& ath_btcoex_period_timer,0U,(char *)"(&btcoex->period_timer)",& __key);
  }
  {
    #line 288 
    struct lock_class_key __key_0;
    #line 288 
    init_timer_key(& btcoex->no_stomp_timer,& ath_btcoex_no_stomp_timer,0U,(char *)"(&btcoex->no_stomp_timer)",& __key_0);
  }
  #line 290 
  spinlock_check(& btcoex->btcoex_lock);
  {
    #line 290 
    struct lock_class_key __key_1;
    #line 290 
    __raw_spin_lock_init(& btcoex->btcoex_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&btcoex->btcoex_lock)->rlock",& __key_1);
  }
  #line 293 
  return;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath9k_btcoex_timer_resume(struct ath_softc *sc)
{
  #line 298 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 299 
  struct ath_hw *ah = sc->sc_ah;
  #line 301 
  if (ath9k_hw_get_btcoex_scheme(ah) != (unsigned int)ATH_BTCOEX_CFG_3WIRE) {
    #line 301 
    if (ath9k_hw_get_btcoex_scheme(ah) != (unsigned int)ATH_BTCOEX_CFG_MCI) 
      #line 303 
      return;
  }
  #line 305 
  ;
  #line 305 
  if ((ath9k_hw_common(ah)->debug_mask & 4096) != 0) {
    #line 305 
    ath_printk((char *)"\001",ath9k_hw_common(ah),(char *)"Starting btcoex timers\n");
  }
  #line 308 
  cif_del_timer_sync_1(& btcoex->no_stomp_timer);
  #line 310 
  btcoex->bt_priority_cnt = 0U;
  #line 311 
  btcoex->bt_priority_time = jiffies;
  #line 312 
  cif_clear_bit_1(0L,& btcoex->op_flags);
  #line 313 
  cif_clear_bit_1(1L,& btcoex->op_flags);
  #line 315 
  cif_mod_timer_1(& btcoex->period_timer,jiffies);
  #line 316 
  return;
}

#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath9k_btcoex_timer_pause(struct ath_softc *sc)
{
  #line 323 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 324 
  struct ath_hw *ah = sc->sc_ah;
  #line 326 
  if (ath9k_hw_get_btcoex_scheme(ah) != (unsigned int)ATH_BTCOEX_CFG_3WIRE) {
    #line 326 
    if (ath9k_hw_get_btcoex_scheme(ah) != (unsigned int)ATH_BTCOEX_CFG_MCI) 
      #line 328 
      return;
  }
  #line 330 
  ;
  #line 330 
  if ((ath9k_hw_common(ah)->debug_mask & 4096) != 0) {
    #line 330 
    ath_printk((char *)"\001",ath9k_hw_common(ah),(char *)"Stopping btcoex timers\n");
  }
  #line 332 
  cif_del_timer_sync_1(& btcoex->period_timer);
  #line 333 
  cif_del_timer_sync_1(& btcoex->no_stomp_timer);
  #line 334 
  return;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath9k_btcoex_stop_gen_timer(struct ath_softc *sc)
{
  #line 338 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 340 
  cif_del_timer_sync_1(& btcoex->no_stomp_timer);
  #line 341 
  return;
}

#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
u16 ath9k_btcoex_aggr_limit(struct ath_softc *sc, u32 max_4ms_framelen)
{
  #line 345 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 346 
  struct ath_mci_profile *mci = & sc->btcoex.mci;
  #line 347 
  u16 aggr_limit = (unsigned short)0U;
  #line 349 
  if (((sc->sc_ah)->caps.hw_caps & 32768U) != 0U && (unsigned int)mci->aggr_limit != 0U) 
    #line 350 
    aggr_limit = (unsigned short)((unsigned int)mci->aggr_limit * max_4ms_framelen >> 4);
  else {
    #line 351 
    if ((int)test_bit(0L,& btcoex->op_flags) != 0) {
      #line 352 
      u32 __UNIQUE_ID___x555;
      #line 352 
      u32 tmp;
      {
        #line 352 
        __UNIQUE_ID___x555 = (max_4ms_framelen * 3U) / 8U;
        #line 352 
        unsigned int __UNIQUE_ID___y556 = 65535U;
        #line 352 
        if (__UNIQUE_ID___x555 < __UNIQUE_ID___y556) 
                                                     #line 352 
                                                     tmp = __UNIQUE_ID___x555; else 
                                                                    #line 352 
                                                                    tmp = __UNIQUE_ID___y556;
        }
      #line 352 
      aggr_limit = (unsigned short)tmp;
    }
  }
  #line 355 
  return aggr_limit;
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath9k_btcoex_handle_interrupt(struct ath_softc *sc, u32 status)
{
  #line 360 
  if ((status & 512U) != 0U) 
                             #line 361 
                             ath_mci_intr(sc);
  #line 362 
  return;
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath9k_start_btcoex(struct ath_softc *sc)
{
  #line 366 
  struct ath_hw *ah = sc->sc_ah;
  #line 368 
  if ((int)ah->btcoex_hw.enabled != 0) 
                                       #line 370 
                                       return;
  else {
    #line 368 
    if (ath9k_hw_get_btcoex_scheme(ah) == (unsigned int)ATH_BTCOEX_CFG_NONE) 
      #line 370 
      return;
  }
  #line 372 
  if ((ah->caps.hw_caps & 32768U) == 0U) 
                                         #line 373 
                                         ath9k_hw_btcoex_set_weight(ah,65365U,43176U,(enum ath_stomp_type)ATH_BTCOEX_STOMP_ALL); else 
                                                                    #line 376 
                                                                    ath9k_hw_btcoex_set_weight(ah,0U,0U,(enum ath_stomp_type)ATH_BTCOEX_STOMP_NONE);
  #line 378 
  ath9k_hw_btcoex_enable(ah);
  #line 379 
  ath9k_btcoex_timer_resume(sc);
  #line 380 
  return;
}

#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath9k_stop_btcoex(struct ath_softc *sc)
{
  #line 384 
  struct ath_hw *ah = sc->sc_ah;
  #line 386 
  if (! ah->btcoex_hw.enabled) 
                               #line 388 
                               return;
  else {
    #line 386 
    if (ath9k_hw_get_btcoex_scheme(ah) == (unsigned int)ATH_BTCOEX_CFG_NONE) 
      #line 388 
      return;
  }
  #line 390 
  ath9k_btcoex_timer_pause(sc);
  #line 391 
  ath9k_hw_btcoex_disable(ah);
  #line 393 
  if ((ah->caps.hw_caps & 32768U) != 0U) 
                                         #line 394 
                                         ath_mci_flush_profile(& sc->btcoex.mci);
  #line 395 
  return;
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
void ath9k_deinit_btcoex(struct ath_softc *sc)
{
  #line 399 
  struct ath_hw *ah = sc->sc_ah;
  #line 401 
  if ((int)ath9k_hw_mci_is_enabled(ah) != 0) 
                                             #line 402 
                                             ath_mci_cleanup(sc);
  else {
    #line 404 
    enum ath_btcoex_scheme scheme = ath9k_hw_get_btcoex_scheme(ah);
    #line 406 
    if ((unsigned int)scheme + 4294967295U <= 1U) 
                                                  #line 408 
                                                  ath9k_hw_btcoex_deinit(sc->sc_ah);
  }
  #line 410 
  return;
}

#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
int ath9k_init_btcoex(struct ath_softc *sc)
{
  #line 414 
  struct ath_txq *txq;
  #line 416 
  int r;
  #line 415 
  struct ath_hw *ah = sc->sc_ah;
  #line 418 
  ath9k_hw_btcoex_init_scheme(ah);
  #line 420 
  switch ((unsigned int)ath9k_hw_get_btcoex_scheme(sc->sc_ah)) {
    #line 421 
    case (unsigned int)0: 
                          #line 421 
    ;
    #line 422 
    break;
    #line 423 
    case (unsigned int)1: 
                          #line 423 
    ;
    #line 424 
    ath9k_hw_btcoex_init_2wire(sc->sc_ah);
    #line 425 
    break;
    #line 426 
    case (unsigned int)2: 
                          #line 426 
    ;
    #line 427 
    ath9k_hw_btcoex_init_3wire(sc->sc_ah);
    #line 428 
    ath_init_btcoex_timer(sc);
    #line 429 
    txq = sc->tx.txq_map[2];
    #line 430 
    ath9k_hw_init_btcoex_hw(sc->sc_ah,(int)txq->axq_qnum);
    #line 431 
    break;
    #line 432 
    case (unsigned int)3: 
                          #line 432 
    ;
    #line 433 
    ath_init_btcoex_timer(sc);
    #line 435 
    sc->btcoex.duty_cycle = 55U;
    #line 436 
    INIT_LIST_HEAD_1(& sc->btcoex.mci.info);
    #line 437 
    ath9k_hw_btcoex_init_mci(ah);
    #line 439 
    r = ath_mci_setup(sc);
    #line 440 
    if (r != 0) 
                #line 441 
                return r;
    #line 443 
    break;
    #line 444 
    default: 
             #line 444 
    ;
    {
      #line 445 
      int __ret_warn_on = 1;
      #line 445 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 446 
        ldv_inline_asm();
        #line 447 
        ldv_inline_asm();
      }
      #line 445 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 446 
    break;
  }
  #line 449 
  return 0;
}

#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
static int ath9k_dump_mci_btcoex(struct ath_softc *sc, u8 *buf, u32 size)
{
  #line 459 
  int i;
  #line 454 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 455 
  struct ath_mci_profile *mci = & btcoex->mci;
  #line 456 
  struct ath_hw *ah = sc->sc_ah;
  #line 457 
  struct ath_btcoex_hw *btcoex_hw = & ah->btcoex_hw;
  #line 458 
  u32 len = 0U;
  #line 461 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                (unsigned long)(size - len),(char *)"%20s : %10d\n",
                (char *)"Total BT profiles",
                ((((int)mci->num_other_acl + (int)mci->num_a2dp) + (int)mci->num_hid) + (int)mci->num_pan) + (int)mci->num_sco) + len;
  #line 462 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                  (unsigned long)(size - len),(char *)"%20s : %10d\n",
                  (char *)"MGMT",(int)mci->num_mgmt) + len;
  #line 463 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                  (unsigned long)(size - len),(char *)"%20s : %10d\n",
                  (char *)"SCO",(int)mci->num_sco) + len;
  #line 464 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                  (unsigned long)(size - len),(char *)"%20s : %10d\n",
                  (char *)"A2DP",(int)mci->num_a2dp) + len;
  #line 465 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                  (unsigned long)(size - len),(char *)"%20s : %10d\n",
                  (char *)"HID",(int)mci->num_hid) + len;
  #line 466 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                  (unsigned long)(size - len),(char *)"%20s : %10d\n",
                  (char *)"PAN",(int)mci->num_pan) + len;
  #line 467 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                  (unsigned long)(size - len),(char *)"%20s : %10d\n",
                  (char *)"ACL",(int)mci->num_other_acl) + len;
  #line 468 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                  (unsigned long)(size - len),(char *)"%20s : %10d\n",
                  (char *)"BDR",(int)mci->num_bdr) + len;
  #line 469 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                  (unsigned long)(size - len),(char *)"%20s : %10d\n",
                  (char *)"Aggr. Limit",(int)mci->aggr_limit) + len;
  #line 470 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                  (unsigned long)(size - len),(char *)"%20s : %10d\n",
                  (char *)"Stomp Type",btcoex->bt_stomp_type) + len;
  #line 471 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                  (unsigned long)(size - len),(char *)"%20s : %10d\n",
                  (char *)"BTCoex Period (msec)",btcoex->btcoex_period) + len;
  #line 472 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                   (unsigned long)(size - len),(char *)"%20s : %10d\n",
                   (char *)"Duty Cycle",btcoex->duty_cycle) + len;
  #line 473 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                   (unsigned long)(size - len),(char *)"%20s : %10d\n",
                   (char *)"BT Wait time",btcoex->bt_wait_time) + len;
  #line 474 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                   (unsigned long)(size - len),(char *)"%20s : %10d\n",
                   (char *)"Concurrent Tx",(int)btcoex_hw->mci.concur_tx) + len;
  #line 475 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                   (unsigned long)(size - len),(char *)"%20s : %10d\n",
                   (char *)"Concurrent RSSI cnt",btcoex->rssi_count) + len;
  #line 477 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                   (unsigned long)(size - len),(char *)"BT Weights: ") + len;
  #line 478 
  i = 0;
  #line 478 
  while (i <= 3) {
    #line 480 
    len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                   (unsigned long)(size - len),(char *)"%08x ",
                   btcoex_hw->bt_weight[i]) + len;
    #line 478 
    i ++;
  }
  #line 481 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                   (unsigned long)(size - len),(char *)"\n") + len;
  #line 482 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                   (unsigned long)(size - len),(char *)"WLAN Weights: ") + len;
  #line 483 
  i = 0;
  #line 483 
  while (i <= 3) {
    #line 485 
    len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                   (unsigned long)(size - len),(char *)"%08x ",
                   btcoex_hw->wlan_weight[i]) + len;
    #line 483 
    i ++;
  }
  #line 486 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                   (unsigned long)(size - len),(char *)"\n") + len;
  #line 487 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                   (unsigned long)(size - len),(char *)"Tx Priorities: ") + len;
  #line 488 
  i = 0;
  #line 488 
  while (i <= 4) {
    #line 490 
    len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                   (unsigned long)(size - len),(char *)"%08x ",
                   (int)btcoex_hw->tx_prio[i]) + len;
    #line 488 
    i ++;
  }
  #line 492 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                   (unsigned long)(size - len),(char *)"\n") + len;
  #line 494 
  return (int)len;
}

#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
static int ath9k_dump_legacy_btcoex(struct ath_softc *sc, u8 *buf, u32 size)
{
  #line 500 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 501 
  u32 len = 0U;
  #line 503 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                (unsigned long)(size - len),(char *)"%20s : %10d\n",
                (char *)"Stomp Type",btcoex->bt_stomp_type) + len;
  #line 504 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                  (unsigned long)(size - len),(char *)"%20s : %10d\n",
                  (char *)"BTCoex Period (msec)",btcoex->btcoex_period) + len;
  #line 505 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                  (unsigned long)(size - len),(char *)"%20s : %10d\n",
                  (char *)"Duty Cycle",btcoex->duty_cycle) + len;
  #line 506 
  len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                  (unsigned long)(size - len),(char *)"%20s : %10d\n",
                  (char *)"BT Wait time",btcoex->bt_wait_time) + len;
  #line 508 
  return (int)len;
}

#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/gpio.c"
int ath9k_dump_btcoex(struct ath_softc *sc, u8 *buf, u32 size)
{
  #line 513 
  if ((int)ath9k_hw_mci_is_enabled(sc->sc_ah) != 0) {
    #line 514 
    return ath9k_dump_mci_btcoex(sc,buf,size);
  }
  else {
    #line 516 
    return ath9k_dump_legacy_btcoex(sc,buf,size);
  }
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr)
{
  #line 123 
  ldv_set_bit(nr,addr);
  #line 124 
  return;
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr)
{
  #line 130 
  ldv_clear_bit(nr,addr);
  #line 131 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list)
{
  #line 137 
  ldv_init_list_head(list);
  #line 138 
  return;
}

#line 809  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static void cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_3(spinlock_t *lock)
{
  #line 812 
  ldv_spin_model_lock((char *)"sc_pm_lock_of_ath_softc");
  #line 814 
  __ldv_spin_lock(lock);
  #line 815 
  return;
}

#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static void cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_3(spinlock_t *lock, unsigned long flags)
{
  #line 821 
  ldv_spin_model_unlock((char *)"sc_pm_lock_of_ath_softc");
  #line 823 
  spin_unlock_irqrestore_3(lock,flags);
  #line 824 
  return;
}

#line 827  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static void cif_spin_lock_bh_btcoex_lock_of_ath_btcoex(spinlock_t *lock)
{
  #line 830 
  ldv_spin_model_lock((char *)"btcoex_lock_of_ath_btcoex");
  #line 832 
  spin_lock_bh_3(lock);
  #line 833 
  return;
}

#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static void cif_spin_unlock_bh_btcoex_lock_of_ath_btcoex(spinlock_t *lock)
{
  #line 839 
  ldv_spin_model_unlock((char *)"btcoex_lock_of_ath_btcoex");
  #line 841 
  spin_unlock_bh_3(lock);
  #line 842 
  return;
}

#line 845  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static int cif_mod_timer_1(struct timer_list *timer, unsigned long expires)
{
  #line 849 
  return emg_mod_timer(timer,expires);
}

#line 853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/gpio.i.aux"
static int cif_del_timer_sync_1(struct timer_list *timer)
{
  #line 857 
  return emg_del_timer_sync(timer);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/mci.i.aux"
static void INIT_LIST_HEAD_2(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_2(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_7260 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_2(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_2(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_2(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_7262 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_2(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_2(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_2(struct list_head *entry)
{
  #line 139 
  __list_del_entry_2(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_2(struct list_head *head)
{
  #line 269 
  union __anonunion___u_7264 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 486  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/mci.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/btcoex.h"
#line 137 
void ath9k_hw_btcoex_set_concur_txprio(struct ath_hw *, u8 *);
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ar9003_mci.h"
#line 306 
bool ar9003_mci_send_message(struct ath_hw *, u8, u32, u32 *, u8, bool, bool);
#line 310 
#line 310 
int ar9003_mci_setup(struct ath_hw *, u32, void *, u16, u32);
#line 312 
#line 312 
void ar9003_mci_cleanup(struct ath_hw *);
#line 313 
#line 313 
void ar9003_mci_get_interrupt(struct ath_hw *, u32 *, u32 *);
#line 315 
#line 315 
u32 ar9003_mci_get_next_gpm_offset(struct ath_hw *, u32 *);
#line 316 
#line 316 
void ar9003_mci_set_bt_version(struct ath_hw *, u8, u8);
#line 317 
#line 317 
void ar9003_mci_send_wlan_channels(struct ath_hw *);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
static u8 ath_mci_duty_cycle[9U] = {(unsigned char)55U, (unsigned char)50U, (unsigned char)60U, (unsigned char)70U, (unsigned char)80U, (unsigned char)85U, (unsigned char)90U, (unsigned char)95U, (unsigned char)98U};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
static struct ath_mci_profile_info *ath_mci_find_profile(struct ath_mci_profile *mci, struct ath_mci_profile_info *info)
{
  #line 34 
  void *__mptr;
  #line 29 
  struct ath_mci_profile_info *entry;
  #line 31 
  if (list_empty_2(& mci->info) != 0) 
                                      #line 32 
                                      return (struct ath_mci_profile_info *)0;
  #line 34 
  __mptr = (void *)mci->info.next;
  #line 34 
  entry = ((struct ath_mci_profile_info *)(__mptr + 18446744073709551600U));
  #line 34 
  while (& entry->list != & mci->info) {
    #line 34 
    void *__mptr_0;
    #line 35 
    if ((int)entry->conn_handle == (int)info->conn_handle) 
                                                           #line 36 
                                                           return entry;
    #line 34 
    __mptr_0 = (void *)entry->list.next;
    #line 34 
    entry = ((struct ath_mci_profile_info *)(__mptr_0 + 18446744073709551600U));
  }
  #line 38 
  return (struct ath_mci_profile_info *)0;
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
static bool ath_mci_add_profile(struct ath_common *common, struct ath_mci_profile *mci, struct ath_mci_profile_info *info)
{
  #line 45 
  struct ath_mci_profile_info *entry;
  #line 46 
  u8 voice_priority[9U] = {(unsigned char)110U, (unsigned char)110U, (unsigned char)110U, (unsigned char)112U, (unsigned char)110U, (unsigned char)110U, (unsigned char)114U, (unsigned char)116U, (unsigned char)118U};
  #line 48 
  if ((unsigned int)mci->num_sco == 1U && (unsigned int)info->type == 5U) 
    #line 50 
    return (_Bool)0;
  #line 52 
  if ((((int)mci->num_other_acl + (int)mci->num_a2dp) + (int)mci->num_hid) + (int)mci->num_pan == 7 && (unsigned int)info->type != 5U) 
    #line 54 
    return (_Bool)0;
  #line 56 
  entry = (struct ath_mci_profile_info *)kzalloc(32UL,2592U);
  #line 57 
  if (entry == (struct ath_mci_profile_info *)0) 
                                                 #line 58 
                                                 return (_Bool)0;
  #line 60 
  memcpy((void *)entry,(void *)info,10UL);
  #line 61 
  switch ((int)info->type) {
    #line 61 
    case 1: 
            #line 61 
    ;
    #line 61 
    mci->num_other_acl = (u8)((int)mci->num_other_acl + 1);
    #line 61 
    break;
    #line 61 
    case 2: 
            #line 61 
    ;
    #line 61 
    mci->num_a2dp = (u8)((int)mci->num_a2dp + 1);
    #line 61 
    if (! info->edr) 
                     #line 61 
                     mci->num_bdr = (u8)((int)mci->num_bdr + 1);
    #line 61 
    break;
    #line 61 
    case 3: 
            #line 61 
    ;
    #line 61 
    mci->num_hid = (u8)((int)mci->num_hid + 1);
    #line 61 
    break;
    #line 61 
    case 4: 
            #line 61 
    ;
    #line 61 
    mci->num_pan = (u8)((int)mci->num_pan + 1);
    #line 61 
    break;
    #line 61 
    case 5: 
            #line 61 
    ;
    #line 61 
    case 6: 
            #line 61 
    ;
    #line 61 
    mci->num_sco = (u8)((int)mci->num_sco + 1);
    #line 61 
    break;
    #line 61 
    default: 
             #line 61 
    ;
    #line 61 
    break;
  }
  #line 62 
  list_add_tail_2(& entry->list,& mci->info);
  #line 63 
  if ((unsigned int)info->type == 5U) 
    #line 64 
    if ((unsigned int)info->voice_type <= 8U) 
                                              #line 65 
                                              mci->voice_priority = voice_priority[(int)info->voice_type]; else 
                                                                    #line 67 
                                                                    mci->voice_priority = (unsigned char)110U;
  #line 70 
  return (_Bool)1;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
static void ath_mci_del_profile(struct ath_common *common, struct ath_mci_profile *mci, struct ath_mci_profile_info *entry)
{
  #line 77 
  if (entry == (struct ath_mci_profile_info *)0) 
                                                 #line 78 
                                                 return;
  #line 80 
  switch ((int)entry->type) {
    #line 80 
    case 1: 
            #line 80 
    ;
    #line 80 
    mci->num_other_acl = (u8)((int)mci->num_other_acl - 1);
    #line 80 
    break;
    #line 80 
    case 2: 
            #line 80 
    ;
    #line 80 
    mci->num_a2dp = (u8)((int)mci->num_a2dp - 1);
    #line 80 
    if (! entry->edr) 
                      #line 80 
                      mci->num_bdr = (u8)((int)mci->num_bdr - 1);
    #line 80 
    break;
    #line 80 
    case 3: 
            #line 80 
    ;
    #line 80 
    mci->num_hid = (u8)((int)mci->num_hid - 1);
    #line 80 
    break;
    #line 80 
    case 4: 
            #line 80 
    ;
    #line 80 
    mci->num_pan = (u8)((int)mci->num_pan - 1);
    #line 80 
    break;
    #line 80 
    case 5: 
            #line 80 
    ;
    #line 80 
    case 6: 
            #line 80 
    ;
    #line 80 
    mci->num_sco = (u8)((int)mci->num_sco - 1);
    #line 80 
    break;
    #line 80 
    default: 
             #line 80 
    ;
    #line 80 
    break;
  }
  #line 81 
  list_del_2(& entry->list);
  #line 82 
  kfree((void *)entry);
  #line 83 
  return;
}

#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
void ath_mci_flush_profile(struct ath_mci_profile *mci)
{
  #line 95 
  void *__mptr;
  #line 95 
  void *__mptr_0;
  #line 87 
  struct ath_mci_profile_info *info;
  #line 87 
  struct ath_mci_profile_info *tinfo;
  #line 89 
  mci->aggr_limit = (unsigned short)0U;
  #line 90 
  mci->num_mgmt = (unsigned char)0U;
  #line 92 
  if (list_empty_2(& mci->info) != 0) 
                                      #line 93 
                                      return;
  #line 95 
  __mptr = (void *)mci->info.next;
  #line 95 
  info = ((struct ath_mci_profile_info *)(__mptr + 18446744073709551600U));
  #line 95 
  __mptr_0 = (void *)info->list.next;
  #line 96 
  tinfo = ((struct ath_mci_profile_info *)(__mptr_0 + 18446744073709551600U));
  #line 95 
  while (& info->list != & mci->info) {
    #line 95 
    void *__mptr_1;
    #line 96 
    list_del_2(& info->list);
    #line 97 
    switch ((int)info->type) {
      #line 97 
      case 1: 
              #line 97 
      ;
      #line 97 
      mci->num_other_acl = (u8)((int)mci->num_other_acl - 1);
      #line 97 
      break;
      #line 97 
      case 2: 
              #line 97 
      ;
      #line 97 
      mci->num_a2dp = (u8)((int)mci->num_a2dp - 1);
      #line 97 
      if (! info->edr) 
                       #line 97 
                       mci->num_bdr = (u8)((int)mci->num_bdr - 1);
      #line 97 
      break;
      #line 97 
      case 3: 
              #line 97 
      ;
      #line 97 
      mci->num_hid = (u8)((int)mci->num_hid - 1);
      #line 97 
      break;
      #line 97 
      case 4: 
              #line 97 
      ;
      #line 97 
      mci->num_pan = (u8)((int)mci->num_pan - 1);
      #line 97 
      break;
      #line 97 
      case 5: 
              #line 97 
      ;
      #line 97 
      case 6: 
              #line 97 
      ;
      #line 97 
      mci->num_sco = (u8)((int)mci->num_sco - 1);
      #line 97 
      break;
      #line 97 
      default: 
               #line 97 
      ;
      #line 97 
      break;
    }
    #line 98 
    kfree((void *)info);
    #line 95 
    info = tinfo;
    #line 95 
    __mptr_1 = (void *)tinfo->list.next;
    #line 95 
    tinfo = ((struct ath_mci_profile_info *)(__mptr_1 + 18446744073709551600U));
  }
  #line 100 
  return;
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
static void ath_mci_adjust_aggr_limit(struct ath_btcoex *btcoex)
{
  #line 104 
  struct ath_mci_profile *mci = & btcoex->mci;
  #line 105 
  u32 wlan_airtime = (btcoex->btcoex_period * (100U - btcoex->duty_cycle)) / 100U;
  #line 114 
  if (wlan_airtime <= 4U && ((unsigned int)mci->aggr_limit == 0U || (unsigned int)mci->aggr_limit > wlan_airtime * 2U)) 
    #line 116 
    mci->aggr_limit = (unsigned short)((unsigned int)((unsigned short)wlan_airtime) * 2U);
  #line 117 
  return;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
static void ath_mci_update_scheme(struct ath_softc *sc)
{
  #line 125 
  struct ath_mci_profile_info *info;
  #line 199 
  unsigned int tmp_1;
  #line 121 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 122 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 123 
  struct ath_mci_profile *mci = & btcoex->mci;
  #line 124 
  struct ath9k_hw_mci *mci_hw = & (sc->sc_ah)->btcoex_hw.mci;
  #line 126 
  u32 num_profile = (unsigned int)(((((int)mci->num_other_acl + (int)mci->num_a2dp) + (int)mci->num_hid) + (int)mci->num_pan) + (int)mci->num_sco);
  #line 128 
  if ((mci_hw->config & 16384U) != 0U) 
                                       #line 129 
                                       goto skip_tuning;
  #line 131 
  mci->aggr_limit = (unsigned short)0U;
  #line 132 
  btcoex->duty_cycle = (unsigned int)ath_mci_duty_cycle[num_profile];
  #line 133 
  btcoex->btcoex_period = 40U;
  #line 134 
  if (((((int)mci->num_other_acl + (int)mci->num_a2dp) + (int)mci->num_hid) + (int)mci->num_pan) + (int)mci->num_sco != 0) 
    #line 135 
    btcoex->bt_stomp_type = 1; else 
                                    #line 137 
                                    btcoex->bt_stomp_type = (unsigned int)mci->num_mgmt == 0U;
  #line 140 
  if (num_profile == 1U) {
    #line 141 
    void *__mptr;
    #line 141 
    __mptr = (void *)mci->info.next;
    #line 141 
    info = ((struct ath_mci_profile_info *)(__mptr + 18446744073709551600U));
    #line 144 
    if ((unsigned int)mci->num_sco != 0U) {
      #line 145 
      if ((unsigned int)info->T == 12U) 
                                        #line 146 
                                        mci->aggr_limit = (unsigned short)8U;
      else 
        #line 147 
        if ((unsigned int)info->T == 6U) {
          #line 148 
          mci->aggr_limit = (unsigned short)6U;
          #line 149 
          btcoex->duty_cycle = 30U;
        }
        else 
             #line 151 
             mci->aggr_limit = (unsigned short)6U;
      #line 152 
      if ((common->debug_mask & 32768) != 0) 
                                             #line 152 
                                             ath_printk((char *)"\001",common,(char *)"Single SCO, aggregation limit %d 1/4 ms\n",(int)mci->aggr_limit);
    }
    else 
      #line 155 
      if ((unsigned int)mci->num_pan != 0U || (unsigned int)mci->num_other_acl != 0U) {
        #line 160 
        if ((sc->sc_ah)->hw_version.macVersion == 704U) 
                                                        #line 160 
                                                        btcoex->duty_cycle = 40U; else 
                                                                    #line 160 
                                                                    btcoex->duty_cycle = 35U;
        #line 161 
        btcoex->btcoex_period = 53U;
        #line 162 
        if ((common->debug_mask & 32768) != 0) 
                                               #line 162 
                                               ath_printk((char *)"\001",common,(char *)"Single PAN/FTP bt period %d ms dutycycle %d\n",btcoex->duty_cycle,btcoex->btcoex_period);
      }
      else 
        #line 165 
        if ((unsigned int)mci->num_hid != 0U) {
          #line 166 
          btcoex->duty_cycle = 30U;
          #line 167 
          mci->aggr_limit = (unsigned short)6U;
          #line 168 
          if ((common->debug_mask & 32768) != 0) 
                                                 #line 168 
                                                 ath_printk((char *)"\001",common,(char *)"Multiple attempt/timeout single HID ");
        }
  }
  else 
    #line 172 
    if (num_profile == 2U) {
      #line 173 
      if ((unsigned int)mci->num_hid == 2U) 
                                            #line 174 
                                            btcoex->duty_cycle = 30U;
      #line 175 
      mci->aggr_limit = (unsigned short)6U;
      #line 176 
      if ((common->debug_mask & 32768) != 0) 
                                             #line 176 
                                             ath_printk((char *)"\001",common,(char *)"Two BT profiles aggr limit 1.5 ms dutycycle %d%%\n",btcoex->duty_cycle);
    }
    else 
      #line 179 
      if (num_profile > 2U) {
        #line 180 
        mci->aggr_limit = (unsigned short)4U;
        #line 181 
        if ((common->debug_mask & 32768) != 0) 
                                               #line 181 
                                               ath_printk((char *)"\001",common,(char *)"Three or more profiles aggregation limit 1 ms\n");
      }
  #line 185 
  skip_tuning: 
               #line 185 
  ;
  #line 186 
  if (((unsigned long)((sc->sc_ah)->curchan)->channelFlags & 1UL) == 0UL) 
    #line 187 
    if (((unsigned long)((sc->sc_ah)->curchan)->channelFlags & 8UL) != 0UL) 
      #line 188 
      ath_mci_adjust_aggr_limit(btcoex); else 
                                              #line 190 
                                              btcoex->btcoex_period >>= 1;
  #line 193 
  ath9k_btcoex_timer_pause(sc);
  #line 194 
  ath9k_hw_btcoex_disable(sc->sc_ah);
  #line 196 
  if (((unsigned long)((sc->sc_ah)->curchan)->channelFlags & 1UL) != 0UL) 
    #line 197 
    return;
  #line 199 
  if ((unsigned int)mci->num_bdr != 0U) 
                                        #line 199 
                                        tmp_1 = 20U; else 
                                                          #line 199 
                                                          tmp_1 = 0U;
  #line 199 
  btcoex->duty_cycle += tmp_1;
  #line 200 
  if (btcoex->duty_cycle > 90U) 
                                #line 201 
                                btcoex->duty_cycle = 90U;
  #line 203 
  btcoex->btcoex_no_stomp = (btcoex->btcoex_period * (100U - btcoex->duty_cycle)) / 100U;
  #line 206 
  ath9k_hw_btcoex_enable(sc->sc_ah);
  #line 207 
  ath9k_btcoex_timer_resume(sc);
  #line 208 
  return;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
static void ath_mci_cal_msg(struct ath_softc *sc, u8 opcode, u8 *rx_payload)
{
  #line 212 
  struct ath_hw *ah = sc->sc_ah;
  #line 213 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 214 
  struct ath9k_hw_mci *mci_hw = & ah->btcoex_hw.mci;
  #line 215 
  u32 payload[4U] = {0U, 0U, 0U, 0U};
  #line 217 
  switch ((int)opcode) {
    #line 218 
    case 0: 
            #line 218 
    ;
    #line 219 
    if ((unsigned int)mci_hw->bt_state == 1U) {
      #line 220 
      mci_hw->bt_state = (unsigned char)2U;
      #line 221 
      ath9k_queue_reset(sc,(enum ath_reset_type)RESET_TYPE_MCI);
    }
    #line 223 
    if ((common->debug_mask & 32768) != 0) 
                                           #line 223 
                                           ath_printk((char *)"\001",common,(char *)"MCI State : %d\n",(int)mci_hw->bt_state);
    #line 224 
    break;
    #line 225 
    case 1: 
            #line 225 
    ;
    #line 226 
    *((u8 *)(& payload) + 4U) = (unsigned char)5U;
    #line 227 
    ar9003_mci_send_message(sc->sc_ah,(unsigned char)128,0U,(u32 *)(& payload),(unsigned char)16,(_Bool)0,(_Bool)1);
    #line 229 
    break;
    #line 230 
    default: 
             #line 230 
    ;
    #line 231 
    if ((common->debug_mask & 32768) != 0) 
                                           #line 231 
                                           ath_printk((char *)"\001",common,(char *)"Unknown GPM CAL message\n");
    #line 232 
    break;
  }
  #line 234 
  return;
}

#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
static void ath9k_mci_work(struct work_struct *work)
{
  #line 238 
  void *__mptr;
  #line 238 
  __mptr = (void *)work;
  #line 238 
  struct ath_softc *sc = ((struct ath_softc *)(__mptr + 18446744073709535088U));
  #line 240 
  ath_mci_update_scheme(sc);
  #line 241 
  return;
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
static void ath_mci_update_stomp_txprio(u8 cur_txprio, u8 *stomp_prio)
{
  #line 245 
  if ((int)*(stomp_prio + 2U) > (int)cur_txprio) 
                                                 #line 246 
                                                 *(stomp_prio + 2U) = cur_txprio;
  #line 248 
  if ((int)*stomp_prio < (int)cur_txprio) 
                                          #line 249 
                                          *stomp_prio = cur_txprio;
  #line 251 
  if ((unsigned int)cur_txprio > 60U && (int)*(stomp_prio + 1U) > (int)cur_txprio) 
    #line 253 
    *(stomp_prio + 1U) = cur_txprio;
  #line 254 
  return;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
static void ath_mci_set_concur_txprio(struct ath_softc *sc)
{
  #line 260 
  u8 stomp_txprio[5U];
  #line 258 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 259 
  struct ath_mci_profile *mci = & btcoex->mci;
  #line 262 
  memset((void *)(& stomp_txprio),0,5UL);
  #line 263 
  if ((unsigned int)mci->num_mgmt != 0U) {
    #line 264 
    stomp_txprio[0] = (unsigned char)62U;
    #line 265 
    if ((unsigned int)mci->num_pan == 0U && (unsigned int)mci->num_other_acl == 0U) 
      #line 266 
      stomp_txprio[2] = (unsigned char)62U;
  }
  else {
    #line 269 
    u8 prof_prio[4U] = {(unsigned char)50U, (unsigned char)90U, (unsigned char)94U, (unsigned char)52U};
    #line 271 
    stomp_txprio[2] = (unsigned char)255U;
    #line 271 
    stomp_txprio[1] = stomp_txprio[2];
    #line 274 
    if ((unsigned int)mci->num_sco != 0U) 
                                          #line 275 
                                          ath_mci_update_stomp_txprio((unsigned char)((int)mci->voice_priority),(u8 *)(& stomp_txprio));
    #line 277 
    if ((unsigned int)mci->num_other_acl != 0U) 
                                                #line 278 
                                                ath_mci_update_stomp_txprio((unsigned char)((int)prof_prio[0]),(u8 *)(& stomp_txprio));
    #line 279 
    if ((unsigned int)mci->num_a2dp != 0U) 
                                           #line 280 
                                           ath_mci_update_stomp_txprio((unsigned char)((int)prof_prio[1]),(u8 *)(& stomp_txprio));
    #line 281 
    if ((unsigned int)mci->num_hid != 0U) 
                                          #line 282 
                                          ath_mci_update_stomp_txprio((unsigned char)((int)prof_prio[2]),(u8 *)(& stomp_txprio));
    #line 283 
    if ((unsigned int)mci->num_pan != 0U) 
                                          #line 284 
                                          ath_mci_update_stomp_txprio((unsigned char)((int)prof_prio[3]),(u8 *)(& stomp_txprio));
    #line 286 
    if ((unsigned int)stomp_txprio[2] == 255U) 
                                               #line 287 
                                               stomp_txprio[2] = (unsigned char)0U;
    #line 289 
    if ((unsigned int)stomp_txprio[1] == 255U) 
                                               #line 290 
                                               stomp_txprio[1] = (unsigned char)0U;
  }
  #line 292 
  ath9k_hw_btcoex_set_concur_txprio(sc->sc_ah,(u8 *)(& stomp_txprio));
  #line 293 
  return;
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
static u8 ath_mci_process_profile(struct ath_softc *sc, struct ath_mci_profile_info *info)
{
  #line 298 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 299 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 300 
  struct ath_mci_profile *mci = & btcoex->mci;
  #line 301 
  struct ath_mci_profile_info *entry = (struct ath_mci_profile_info *)0;
  #line 303 
  entry = ath_mci_find_profile(mci,info);
  #line 304 
  if (entry != (struct ath_mci_profile_info *)0) {
    #line 313 
    if ((int)entry->type != (int)info->type) {
      #line 314 
      switch ((int)entry->type) {
        #line 314 
        case 1: 
                #line 314 
        ;
        #line 314 
        mci->num_other_acl = (u8)((int)mci->num_other_acl - 1);
        #line 314 
        break;
        #line 314 
        case 2: 
                #line 314 
        ;
        #line 314 
        mci->num_a2dp = (u8)((int)mci->num_a2dp - 1);
        #line 314 
        if (! entry->edr) 
                          #line 314 
                          mci->num_bdr = (u8)((int)mci->num_bdr - 1);
        #line 314 
        break;
        #line 314 
        case 3: 
                #line 314 
        ;
        #line 314 
        mci->num_hid = (u8)((int)mci->num_hid - 1);
        #line 314 
        break;
        #line 314 
        case 4: 
                #line 314 
        ;
        #line 314 
        mci->num_pan = (u8)((int)mci->num_pan - 1);
        #line 314 
        break;
        #line 314 
        case 5: 
                #line 314 
        ;
        #line 314 
        case 6: 
                #line 314 
        ;
        #line 314 
        mci->num_sco = (u8)((int)mci->num_sco - 1);
        #line 314 
        break;
        #line 314 
        default: 
                 #line 314 
        ;
        #line 314 
        break;
      }
      #line 315 
      switch ((int)info->type) {
        #line 315 
        case 1: 
                #line 315 
        ;
        #line 315 
        mci->num_other_acl = (u8)((int)mci->num_other_acl + 1);
        #line 315 
        break;
        #line 315 
        case 2: 
                #line 315 
        ;
        #line 315 
        mci->num_a2dp = (u8)((int)mci->num_a2dp + 1);
        #line 315 
        if (! info->edr) 
                         #line 315 
                         mci->num_bdr = (u8)((int)mci->num_bdr + 1);
        #line 315 
        break;
        #line 315 
        case 3: 
                #line 315 
        ;
        #line 315 
        mci->num_hid = (u8)((int)mci->num_hid + 1);
        #line 315 
        break;
        #line 315 
        case 4: 
                #line 315 
        ;
        #line 315 
        mci->num_pan = (u8)((int)mci->num_pan + 1);
        #line 315 
        break;
        #line 315 
        case 5: 
                #line 315 
        ;
        #line 315 
        case 6: 
                #line 315 
        ;
        #line 315 
        mci->num_sco = (u8)((int)mci->num_sco + 1);
        #line 315 
        break;
        #line 315 
        default: 
                 #line 315 
        ;
        #line 315 
        break;
      }
    }
    #line 317 
    memcpy((void *)entry,(void *)info,10UL);
  }
  #line 320 
  if ((int)info->start != 0) {
    #line 321 
    if (entry == (struct ath_mci_profile_info *)0) {
      #line 321 
      if (! ath_mci_add_profile(common,mci,info)) 
                                                  #line 322 
                                                  return (unsigned char)0U;
    }
  }
  else 
       #line 324 
       ath_mci_del_profile(common,mci,entry);
  #line 326 
  ath_mci_set_concur_txprio(sc);
  #line 327 
  return (unsigned char)1U;
}

#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
static u8 ath_mci_process_status(struct ath_softc *sc, struct ath_mci_profile_status *status)
{
  #line 335 
  struct ath_mci_profile_info info;
  #line 333 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 334 
  struct ath_mci_profile *mci = & btcoex->mci;
  #line 336 
  int i = 0;
  #line 336 
  int old_num_mgmt = (int)mci->num_mgmt;
  #line 339 
  if ((int)status->is_link != 0) 
                                 #line 340 
                                 return (unsigned char)0U;
  #line 342 
  info.conn_handle = status->conn_handle;
  #line 343 
  if (ath_mci_find_profile(mci,& info) != (struct ath_mci_profile_info *)0) 
    #line 344 
    return (unsigned char)0U;
  #line 346 
  if ((unsigned int)status->conn_handle > 7U) 
                                              #line 347 
                                              return (unsigned char)0U;
  #line 349 
  if ((int)status->is_critical != 0) 
                                     #line 350 
                                     __set_bit((long)status->conn_handle,(unsigned long *)(& mci->status)); else 
                                                                    #line 352 
                                                                    __set_bit((long)status->conn_handle,(unsigned long *)(& mci->status));
  #line 354 
  mci->num_mgmt = (unsigned char)0U;
  #line 355 
  while (1) {
    #line 356 
    if ((int)test_bit((long)i,(unsigned long *)(& mci->status)) != 0) 
      #line 357 
      mci->num_mgmt = (u8)((int)mci->num_mgmt + 1);
    #line 358 
    i ++;
    #line 358 
    if (! (i <= 7)) 
                    #line 355 
                    break;
  }
  #line 360 
  ath_mci_set_concur_txprio(sc);
  #line 361 
  if ((int)mci->num_mgmt != old_num_mgmt) 
                                          #line 362 
                                          return (unsigned char)1U;
  #line 364 
  return (unsigned char)0U;
}

#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
static void ath_mci_msg(struct ath_softc *sc, u8 opcode, u8 *rx_payload)
{
  #line 370 
  struct ath_mci_profile_info profile_info;
  #line 371 
  struct ath_mci_profile_status profile_status;
  #line 373 
  u8 major;
  #line 373 
  u8 minor;
  #line 374 
  u32 seq_num;
  #line 369 
  struct ath_hw *ah = sc->sc_ah;
  #line 372 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 373 
  u8 update_scheme = (unsigned char)0U;
  #line 376 
  if (ar9003_mci_state(ah,19U) != 0U) {
    #line 376 
    if (ar9003_mci_state(ah,0U) != 0U) {
      #line 378 
      if ((common->debug_mask & 32768) != 0) 
                                             #line 378 
                                             ath_printk((char *)"\001",common,(char *)"(MCI) Need to flush BT profiles\n");
      #line 379 
      ath_mci_flush_profile(& sc->btcoex.mci);
      #line 380 
      ar9003_mci_state(ah,18U);
    }
  }
  #line 383 
  switch ((int)opcode) {
    #line 384 
    case 0: 
            #line 384 
    ;
    #line 385 
    ar9003_mci_state(ah,14U);
    #line 386 
    break;
    #line 387 
    case 1: 
            #line 387 
    ;
    #line 388 
    major = *(rx_payload + 6U);
    #line 389 
    minor = *(rx_payload + 7U);
    #line 390 
    ar9003_mci_set_bt_version(ah,(unsigned char)((int)major),(unsigned char)((int)minor));
    #line 391 
    break;
    #line 392 
    case 2: 
            #line 392 
    ;
    #line 393 
    ar9003_mci_send_wlan_channels(ah);
    #line 394 
    break;
    #line 395 
    case 5: 
            #line 395 
    ;
    #line 396 
    memcpy((void *)(& profile_info),(void *)(rx_payload + 6U),10UL);
    #line 399 
    if ((unsigned int)profile_info.type + 255U > 5U) {
      #line 401 
      if ((common->debug_mask & 32768) != 0) 
                                             #line 401 
                                             ath_printk((char *)"\001",common,(char *)"Illegal profile type = %d, state = %d\n",(int)profile_info.type,(int)profile_info.start);
      #line 405 
      break;
    }
    #line 408 
    update_scheme = (unsigned char)((int)ath_mci_process_profile(sc,& profile_info) + (int)update_scheme);
    #line 409 
    break;
    #line 410 
    case 6: 
            #line 410 
    ;
    #line 411 
    profile_status.is_link = (_Bool)((unsigned int)*(rx_payload + 6U) != 0U);
    #line 413 
    profile_status.conn_handle = *(rx_payload + 7U);
    #line 415 
    profile_status.is_critical = (_Bool)((unsigned int)*(rx_payload + 8U) != 0U);
    #line 418 
    seq_num = *((u32 *)(rx_payload + 12U));
    #line 419 
    if ((common->debug_mask & 32768) != 0) 
                                           #line 419 
                                           ath_printk((char *)"\001",common,(char *)"BT_Status_Update: is_link=%d, linkId=%d, state=%d, SEQ=%u\n",(int)profile_status.is_link,(int)profile_status.conn_handle,(int)profile_status.is_critical,seq_num);
    #line 424 
    update_scheme = (unsigned char)((int)ath_mci_process_status(sc,& profile_status) + (int)update_scheme);
    #line 425 
    break;
    #line 426 
    default: 
             #line 426 
    ;
    #line 427 
    if ((common->debug_mask & 32768) != 0) 
                                           #line 427 
                                           ath_printk((char *)"\001",common,(char *)"Unknown GPM COEX message = 0x%02x\n",(int)opcode);
    #line 428 
    break;
  }
  #line 430 
  if ((unsigned int)update_scheme != 0U) 
                                         #line 431 
                                         ieee80211_queue_work(sc->hw,& sc->mci_work);
  #line 432 
  return;
}

#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
int ath_mci_setup(struct ath_softc *sc)
{
  #line 439 
  int ret;
  #line 436 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 437 
  struct ath_mci_coex *mci = & sc->mci_coex;
  #line 438 
  struct ath_mci_buf *buf = & mci->sched_buf;
  #line 441 
  buf->bf_addr = dmam_alloc_coherent(sc->dev,512UL,& buf->bf_paddr,3264U);
  #line 445 
  if (buf->bf_addr == (void *)0) {
    #line 446 
    if ((common->debug_mask & 1024) != 0) 
                                          #line 446 
                                          ath_printk((char *)"\001",common,(char *)"MCI buffer alloc failed\n");
    #line 447 
    return -12;
  }
  #line 450 
  memset(buf->bf_addr,254,512UL);
  #line 453 
  mci->sched_buf.bf_len = 256U;
  #line 455 
  mci->gpm_buf.bf_len = 256U;
  #line 456 
  mci->gpm_buf.bf_addr = mci->sched_buf.bf_addr + (unsigned long)mci->sched_buf.bf_len;
  #line 457 
  mci->gpm_buf.bf_paddr = mci->sched_buf.bf_paddr + (unsigned long long)mci->sched_buf.bf_len;
  #line 459 
  ret = ar9003_mci_setup(sc->sc_ah,(unsigned int)mci->gpm_buf.bf_paddr,mci->gpm_buf.bf_addr,(unsigned short)((int)((unsigned short)(mci->gpm_buf.bf_len >> 4))),(unsigned int)mci->sched_buf.bf_paddr);
  #line 462 
  if (ret != 0) {
    #line 463 
    ath_printk((char *)"\001",common,(char *)"Failed to initialize MCI\n");
    #line 464 
    return ret;
  }
  {
    #line 467 
    struct lock_class_key __key;
    #line 467 
    __init_work(& sc->mci_work,0);
    #line 467 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 467 
    sc->mci_work.data = __constr_expr_41;
    #line 467 
    lockdep_init_map(& sc->mci_work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 467 
    INIT_LIST_HEAD_2(& sc->mci_work.entry);
    #line 467 
    sc->mci_work.func = & ath9k_mci_work;
  }
  #line 468 
  if ((common->debug_mask & 32768) != 0) 
                                         #line 468 
                                         ath_printk((char *)"\001",common,(char *)"MCI Initialized\n");
  #line 470 
  return 0;
}

#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
void ath_mci_cleanup(struct ath_softc *sc)
{
  #line 475 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 476 
  struct ath_hw *ah = sc->sc_ah;
  #line 478 
  ar9003_mci_cleanup(ah);
  #line 480 
  if ((common->debug_mask & 32768) != 0) 
                                         #line 480 
                                         ath_printk((char *)"\001",common,(char *)"MCI De-Initialized\n");
  #line 481 
  return;
}

#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
void ath_mci_intr(struct ath_softc *sc)
{
  #line 489 
  u32 mci_int;
  #line 489 
  u32 mci_int_rxmsg;
  #line 490 
  u32 offset;
  #line 490 
  u32 subtype;
  #line 490 
  u32 opcode;
  #line 491 
  u32 *pgpm;
  #line 485 
  struct ath_mci_coex *mci = & sc->mci_coex;
  #line 486 
  struct ath_hw *ah = sc->sc_ah;
  #line 487 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 488 
  struct ath9k_hw_mci *mci_hw = & ah->btcoex_hw.mci;
  #line 492 
  u32 more_data = 1U;
  #line 493 
  bool skip_gpm = (_Bool)0;
  #line 495 
  ar9003_mci_get_interrupt(sc->sc_ah,& mci_int,& mci_int_rxmsg);
  #line 497 
  if (ar9003_mci_state(ah,0U) == 0U) {
    #line 498 
    ar9003_mci_state(ah,1U);
    #line 499 
    return;
  }
  #line 502 
  if ((mci_int_rxmsg & 4096U) != 0U) {
    #line 503 
    u32 payload[4U] = {4294967295U, 4294967295U, 4294967295U, 4294967040U};
    #line 511 
    ar9003_mci_send_message(ah,(unsigned char)255,0U,(u32 *)(& payload),(unsigned char)16,(_Bool)1,(_Bool)0);
    #line 513 
    ar9003_mci_send_message(ah,(unsigned char)112,0U,(u32 *)0U,(unsigned char)0,(_Bool)1,(_Bool)0);
    #line 516 
    mci_int_rxmsg &= 4294963199U;
    #line 517 
    ar9003_mci_state(ah,13U);
    #line 522 
    ar9003_mci_state(ah,7U);
  }
  #line 525 
  if ((mci_int_rxmsg & 2048U) != 0U) {
    #line 526 
    mci_int_rxmsg &= 4294965247U;
    #line 528 
    if ((unsigned int)mci_hw->bt_state == 0U) {
      #line 528 
      if (ar9003_mci_state(ah,11U) != 0U) 
                                          #line 531 
                                          ar9003_mci_state(ah,7U);
    }
  }
  #line 534 
  if ((mci_int_rxmsg & 1024U) != 0U) {
    #line 535 
    mci_int_rxmsg &= 4294966271U;
    #line 537 
    if ((unsigned int)mci_hw->bt_state == 1U) {
      #line 537 
      if (ar9003_mci_state(ah,11U) != 1U) 
                                          #line 540 
                                          mci_hw->bt_state = (unsigned char)0U;
    }
  }
  #line 543 
  if ((mci_int & 8U) != 0U || (mci_int & 2147483648U) != 0U) {
    #line 545 
    ar9003_mci_state(ah,21U);
    #line 546 
    skip_gpm = (_Bool)1;
  }
  #line 549 
  if ((mci_int_rxmsg & 32U) != 0U) {
    #line 550 
    mci_int_rxmsg &= 4294967263U;
    #line 551 
    ar9003_mci_state(ah,10U);
  }
  #line 554 
  if ((mci_int_rxmsg & 256U) != 0U) {
    #line 555 
    mci_int_rxmsg &= 4294967039U;
    #line 557 
    while (more_data == 1U) {
      #line 558 
      if ((int)test_bit(4L,& common->op_flags) != 0) 
                                                     #line 559 
                                                     return;
      #line 561 
      pgpm = (u32 *)mci->gpm_buf.bf_addr;
      #line 562 
      offset = ar9003_mci_get_next_gpm_offset(ah,& more_data);
      #line 564 
      if (offset == 4294967295U) 
                                 #line 565 
                                 break;
      #line 567 
      pgpm += (unsigned long)(offset >> 2);
      #line 573 
      subtype = (unsigned int)*((u8 *)pgpm + 4U);
      #line 574 
      opcode = (unsigned int)*((u8 *)pgpm + 5U);
      #line 576 
      if ((int)skip_gpm != 0) 
                              #line 577 
                              goto recycle;
      #line 579 
      if (subtype <= 5U) 
                         #line 580 
                         ath_mci_cal_msg(sc,(unsigned char)((int)((unsigned char)subtype)),(u8 *)pgpm);
      else 
        #line 582 
        switch (subtype) {
          #line 583 
          case (u32)12: 
                        #line 583 
          ;
          #line 584 
          ath_mci_msg(sc,(unsigned char)((int)((unsigned char)opcode)),(u8 *)pgpm);
          #line 585 
          break;
          #line 586 
          default: 
                   #line 586 
          ;
          #line 587 
          break;
        }
      #line 590 
      recycle: 
               #line 590 
      ;
      #line 591 
      *(pgpm + 1U) = 4278124286U;
    }
  }
  #line 595 
  if ((mci_int_rxmsg & 574U) != 0U) {
    #line 596 
    if ((mci_int_rxmsg & 2U) != 0U) 
                                    #line 597 
                                    mci_int_rxmsg &= 4294967293U;
    #line 599 
    if ((mci_int_rxmsg & 512U) != 0U) 
                                      #line 600 
                                      mci_int_rxmsg &= 4294966783U;
    #line 602 
    if ((mci_int_rxmsg & 8U) != 0U) {
      #line 603 
      int value_dbm = (int)mci_hw->cont_status & 255;
      #line 606 
      mci_int_rxmsg &= 4294967287U;
      #line 608 
      if ((common->debug_mask & 32768) != 0) {
        #line 608 
        char *tmp_4;
        #line 608 
        ;
        #line 608 
        ;
        #line 608 
        if ((mci_hw->cont_status & 65536U) != 0U) 
                                                  #line 608 
                                                  tmp_4 = (char *)"tx"; else 
                                                                    #line 608 
                                                                    tmp_4 = (char *)"rx";
        #line 608 
        ;
        #line 608 
        ath_printk((char *)"\001",common,(char *)"MCI CONT_INFO: (%s) pri = %d pwr = %d dBm\n",tmp_4,(mci_hw->cont_status >> 8) & 255U,value_dbm);
      }
    }
    #line 616 
    if ((mci_int_rxmsg & 4U) != 0U) 
                                    #line 617 
                                    mci_int_rxmsg &= 4294967291U;
    #line 619 
    if ((mci_int_rxmsg & 16U) != 0U) 
                                     #line 620 
                                     mci_int_rxmsg &= 4294967279U;
  }
  #line 623 
  if ((mci_int & 8U) != 0U || (mci_int & 2147483648U) != 0U) {
    #line 625 
    mci_int &= 2147483639U;
    #line 627 
    ath_mci_msg(sc,(unsigned char)8,(u8 *)0U);
  }
  #line 629 
  return;
}

#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
void ath_mci_enable(struct ath_softc *sc)
{
  #line 633 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 635 
  if (! common->btcoex_enabled) 
                                #line 636 
                                return;
  #line 638 
  if (((sc->sc_ah)->caps.hw_caps & 32768U) != 0U) 
                                                  #line 639 
                                                  (sc->sc_ah)->imask = (enum ath9k_int)((unsigned int)(sc->sc_ah)->imask | 512U);
  #line 640 
  return;
}

#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
void ath9k_mci_update_wlan_channels(struct ath_softc *sc, bool allow_all)
{
  #line 648 
  int i;
  #line 649 
  s16 chan_start;
  #line 649 
  s16 chan_end;
  #line 650 
  u16 wlan_chan;
  #line 644 
  struct ath_hw *ah = sc->sc_ah;
  #line 645 
  struct ath9k_hw_mci *mci = & ah->btcoex_hw.mci;
  #line 646 
  struct ath9k_channel *chan = ah->curchan;
  #line 647 
  u32 channelmap[4U] = {0U, 4294901760U, 4294967295U, 2147483647U};
  #line 652 
  if (chan == (struct ath9k_channel *)0 || ((unsigned long)chan->channelFlags & 1UL) != 0UL) 
    #line 653 
    return;
  #line 655 
  if ((int)allow_all != 0) 
                           #line 656 
                           goto send_wlan_chan;
  #line 658 
  wlan_chan = (unsigned short)((unsigned int)chan->channel + 63134U);
  #line 660 
  chan_start = (short)((unsigned int)wlan_chan + 65526U);
  #line 661 
  chan_end = (short)((unsigned int)wlan_chan + 10U);
  #line 663 
  if (((unsigned long)chan->channelFlags & 16UL) != 0UL) 
                                                         #line 664 
                                                         chan_end = (short)((unsigned int)chan_end + 20U);
  else 
    #line 665 
    if (((unsigned long)chan->channelFlags & 32UL) != 0UL) 
                                                           #line 666 
                                                           chan_start = (short)((unsigned int)chan_start + 65516U);
  #line 669 
  chan_start = (short)((unsigned int)chan_start + 65529U);
  #line 670 
  chan_end = (short)((unsigned int)chan_end + 7U);
  #line 672 
  if ((int)chan_start <= 0) 
                            #line 673 
                            chan_start = (short)0;
  #line 674 
  if ((int)chan_end > 78) 
                          #line 675 
                          chan_end = (short)78;
  #line 677 
  ;
  #line 677 
  if ((ath9k_hw_common(ah)->debug_mask & 32768) != 0) {
    #line 677 
    ;
    #line 677 
    ;
    #line 677 
    ;
    #line 677 
    ath_printk((char *)"\001",ath9k_hw_common(ah),(char *)"WLAN current channel %d mask BT channel %d - %d\n",(int)wlan_chan,(int)chan_start,(int)chan_end);
  }
  #line 681 
  i = (int)chan_start;
  #line 681 
  while ((int)chan_end > i) {
    #line 682 
    if (i <= 78) 
                 #line 682 
                 *((u8 *)(& channelmap) + ((unsigned long)(i / 8) + (unsigned long)6U)) = (unsigned char)((int)*((u8 *)(& channelmap) + ((unsigned long)(i / 8) + (unsigned long)6U)) & ~ (1 << (i & 7)));
    #line 681 
    i ++;
  }
  #line 684 
  send_wlan_chan: 
                  #line 684 
  ;
  #line 686 
  i = 0;
  #line 686 
  while (i <= 3) {
    #line 687 
    mci->wlan_channels[i] = channelmap[i];
    #line 686 
    i ++;
  }
  #line 688 
  ar9003_mci_send_wlan_channels(ah);
  #line 689 
  ar9003_mci_state(ah,17U);
  #line 690 
  return;
}

#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
void ath9k_mci_set_txpower(struct ath_softc *sc, bool setchannel, bool concur_tx)
{
  #line 695 
  struct ath_hw *ah = sc->sc_ah;
  #line 696 
  struct ath9k_hw_mci *mci_hw = & (sc->sc_ah)->btcoex_hw.mci;
  #line 697 
  bool old_concur_tx = mci_hw->concur_tx;
  #line 699 
  if ((mci_hw->config & 3U) == 0U) {
    #line 700 
    mci_hw->concur_tx = (_Bool)0;
    #line 701 
    return;
  }
  #line 704 
  if (((unsigned long)(ah->curchan)->channelFlags & 1UL) != 0UL) 
                                                                 #line 705 
                                                                 return;
  #line 707 
  if ((int)setchannel != 0) {
    #line 708 
    struct ath9k_hw_cal_data *caldata = & (sc->cur_chan)->caldata;
    #line 709 
    if ((((unsigned long)(ah->curchan)->channelFlags & 16UL) != 0UL && (int)(ah->curchan)->channel > (int)caldata->channel) && (int)(ah->curchan)->channel <= (int)caldata->channel + 20) 
      #line 712 
      return;
    #line 713 
    if ((((unsigned long)(ah->curchan)->channelFlags & 32UL) != 0UL && (int)(ah->curchan)->channel < (int)caldata->channel) && (int)(ah->curchan)->channel >= (int)caldata->channel + -20) 
      #line 716 
      return;
    #line 717 
    mci_hw->concur_tx = (_Bool)0;
  }
  else 
       #line 719 
       mci_hw->concur_tx = concur_tx;
  #line 721 
  if ((int)mci_hw->concur_tx != (int)old_concur_tx) 
                                                    #line 722 
                                                    ath9k_hw_set_txpowerlimit(ah,(unsigned int)(sc->cur_chan)->txpower,(_Bool)0);
  #line 723 
  return;
}

#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
static void ath9k_mci_stomp_audio(struct ath_softc *sc)
{
  #line 727 
  struct ath_hw *ah = sc->sc_ah;
  #line 728 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 729 
  struct ath_mci_profile *mci = & btcoex->mci;
  #line 731 
  if ((unsigned int)mci->num_sco == 0U && (unsigned int)mci->num_a2dp == 0U) 
    #line 732 
    return;
  #line 734 
  if (ah->stats.avgbrssi > 25U) {
    #line 735 
    btcoex->stomp_audio = (unsigned char)0U;
    #line 736 
    return;
  }
  #line 739 
  btcoex->stomp_audio = (u8)((int)btcoex->stomp_audio + 1);
  #line 740 
  return;
}

#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mci.c"
void ath9k_mci_update_rssi(struct ath_softc *sc)
{
  #line 743 
  struct ath_hw *ah = sc->sc_ah;
  #line 744 
  struct ath_btcoex *btcoex = & sc->btcoex;
  #line 745 
  struct ath9k_hw_mci *mci_hw = & (sc->sc_ah)->btcoex_hw.mci;
  #line 747 
  ath9k_mci_stomp_audio(sc);
  #line 749 
  if ((mci_hw->config & 3U) == 0U) 
                                   #line 750 
                                   return;
  #line 752 
  if (ah->stats.avgbrssi > 39U) {
    #line 753 
    if (btcoex->rssi_count < 0) 
                                #line 754 
                                btcoex->rssi_count = 0;
    #line 755 
    (btcoex->rssi_count) ++;
    #line 755 
    if (btcoex->rssi_count > 4) {
      #line 756 
      btcoex->rssi_count = 0;
      #line 757 
      ath9k_mci_set_txpower(sc,(_Bool)0,(_Bool)1);
    }
  }
  else {
    #line 760 
    if (btcoex->rssi_count > 0) 
                                #line 761 
                                btcoex->rssi_count = 0;
    #line 762 
    (btcoex->rssi_count) --;
    #line 762 
    if (btcoex->rssi_count < -4) {
      #line 763 
      btcoex->rssi_count = 0;
      #line 764 
      ath9k_mci_set_txpower(sc,(_Bool)0,(_Bool)0);
    }
  }
  #line 767 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/mci.i.aux"
static void INIT_LIST_HEAD_2(struct list_head *list)
{
  #line 137 
  ldv_init_list_head(list);
  #line 138 
  return;
}

#line 486  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/mci.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 489 
  return ldv_kzalloc(size,flags);
}

#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw-ops.h"
__inline static void ath9k_hw_antdiv_comb_conf_get(struct ath_hw *ah, struct ath_hw_antcomb_conf *antconf)
{
  #line 78 
  (*(ath9k_hw_ops(ah)->antdiv_comb_conf_get))(ah,antconf);
  #line 79 
  return;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw-ops.h"
__inline static void ath9k_hw_antdiv_comb_conf_set(struct ath_hw *ah, struct ath_hw_antcomb_conf *antconf)
{
  #line 84 
  (*(ath9k_hw_ops(ah)->antdiv_comb_conf_set))(ah,antconf);
  #line 85 
  return;
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.h"
#line 274 
void ath9k_debug_stat_ant(struct ath_softc *sc, struct ath_hw_antcomb_conf *div_ant_conf, int main_rssi_avg, int alt_rssi_avg);
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/antenna.c"
__inline static bool ath_is_alt_ant_ratio_better(struct ath_ant_comb *antcomb, int alt_ratio, int maxdelta, int mindelta, int main_rssi_avg, int alt_rssi_avg, int pkt_count)
{
  #line 76 
  if (pkt_count <= 50) 
                       #line 77 
                       return (_Bool)0;
  #line 79 
  if (main_rssi_avg + mindelta < alt_rssi_avg) 
                                               #line 80 
                                               return (_Bool)1;
  #line 82 
  if ((antcomb->ant_ratio2 <= alt_ratio && antcomb->low_rssi_thresh <= alt_rssi_avg) && main_rssi_avg + maxdelta < alt_rssi_avg) 
    #line 85 
    return (_Bool)1;
  #line 87 
  return (_Bool)0;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/antenna.c"
__inline static bool ath_ant_div_comb_alt_check(struct ath_hw_antcomb_conf *conf, struct ath_ant_comb *antcomb, int alt_ratio, int alt_rssi_avg, int main_rssi_avg)
{
  #line 95 
  bool result;
  #line 95 
  bool set1;
  #line 95 
  bool set2;
  #line 97 
  set2 = (_Bool)0;
  #line 97 
  set1 = set2;
  #line 97 
  result = set1;
  #line 99 
  if ((unsigned int)conf->main_lna_conf == 1U && (unsigned int)conf->alt_lna_conf == 2U) 
    #line 101 
    set1 = (_Bool)1;
  #line 103 
  if ((unsigned int)conf->main_lna_conf == 2U && (unsigned int)conf->alt_lna_conf == 1U) 
    #line 105 
    set2 = (_Bool)1;
  #line 107 
  switch ((int)conf->div_group) {
    #line 108 
    case 0: 
            #line 108 
    ;
    #line 109 
    if (alt_ratio > 30) 
                        #line 110 
                        result = (_Bool)1;
    #line 111 
    break;
    #line 112 
    case 1: 
            #line 112 
    ;
    #line 113 
    case 2: 
            #line 113 
    ;
    #line 114 
    if (alt_rssi_avg <= 3 || antcomb->low_rssi_thresh > alt_rssi_avg) 
      #line 115 
      break;
    #line 117 
    if (((int)set1 != 0 && main_rssi_avg + -5 <= alt_rssi_avg || (int)set2 != 0 && main_rssi_avg + -2 <= alt_rssi_avg) || antcomb->ant_ratio < alt_ratio) 
      #line 120 
      result = (_Bool)1;
    #line 122 
    break;
    #line 123 
    case 3: 
            #line 123 
    ;
    #line 124 
    if (alt_rssi_avg <= 3 || antcomb->low_rssi_thresh > alt_rssi_avg) 
      #line 125 
      break;
    #line 127 
    if (((int)set1 != 0 && main_rssi_avg + -3 <= alt_rssi_avg || (int)set2 != 0 && main_rssi_avg + 2 < alt_rssi_avg) || antcomb->ant_ratio < alt_ratio) 
      #line 130 
      result = (_Bool)1;
    #line 132 
    break;
  }
  #line 135 
  return result;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/antenna.c"
static void ath_lnaconf_alt_good_scan(struct ath_ant_comb *antcomb, struct ath_hw_antcomb_conf ant_conf, int main_rssi_avg)
{
  #line 142 
  antcomb->quick_scan_cnt = 0;
  #line 144 
  if ((unsigned int)ant_conf.main_lna_conf == 1U) 
                                                  #line 145 
                                                  antcomb->rssi_lna2 = main_rssi_avg;
  else 
    #line 146 
    if ((unsigned int)ant_conf.main_lna_conf == 2U) 
                                                    #line 147 
                                                    antcomb->rssi_lna1 = main_rssi_avg;
  #line 149 
  switch (((int)ant_conf.main_lna_conf << 4) | (int)ant_conf.alt_lna_conf) {
    #line 150 
    case 16: 
             #line 150 
    ;
    #line 151 
    antcomb->main_conf = ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2;
    #line 152 
    antcomb->first_quick_scan_conf = ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2;
    #line 154 
    antcomb->second_quick_scan_conf = ATH_ANT_DIV_COMB_LNA1;
    #line 155 
    break;
    #line 156 
    case 32: 
             #line 156 
    ;
    #line 157 
    antcomb->main_conf = ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2;
    #line 158 
    antcomb->first_quick_scan_conf = ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2;
    #line 160 
    antcomb->second_quick_scan_conf = ATH_ANT_DIV_COMB_LNA2;
    #line 161 
    break;
    #line 162 
    case 33: 
             #line 162 
    ;
    #line 163 
    antcomb->main_conf = ATH_ANT_DIV_COMB_LNA2;
    #line 164 
    antcomb->first_quick_scan_conf = ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2;
    #line 166 
    antcomb->second_quick_scan_conf = ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2;
    #line 168 
    break;
    #line 169 
    case 18: 
             #line 169 
    ;
    #line 170 
    antcomb->main_conf = ATH_ANT_DIV_COMB_LNA1;
    #line 171 
    antcomb->first_quick_scan_conf = ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2;
    #line 173 
    antcomb->second_quick_scan_conf = ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2;
    #line 175 
    break;
    #line 176 
    case 19: 
             #line 176 
    ;
    #line 177 
    antcomb->main_conf = ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2;
    #line 178 
    antcomb->first_quick_scan_conf = ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2;
    #line 180 
    antcomb->second_quick_scan_conf = ATH_ANT_DIV_COMB_LNA1;
    #line 181 
    break;
    #line 182 
    case 35: 
             #line 182 
    ;
    #line 183 
    antcomb->main_conf = ATH_ANT_DIV_COMB_LNA1_PLUS_LNA2;
    #line 184 
    antcomb->first_quick_scan_conf = ATH_ANT_DIV_COMB_LNA1_MINUS_LNA2;
    #line 186 
    antcomb->second_quick_scan_conf = ATH_ANT_DIV_COMB_LNA2;
    #line 187 
    break;
    #line 188 
    default: 
             #line 188 
    ;
    #line 189 
    break;
  }
  #line 191 
  return;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/antenna.c"
static void ath_ant_set_alt_ratio(struct ath_ant_comb *antcomb, struct ath_hw_antcomb_conf *conf)
{
  #line 197 
  if ((int)antcomb->first_ratio != 0 && (int)antcomb->second_ratio != 0) 
    #line 198 
    if (antcomb->rssi_second > antcomb->rssi_third) 
      #line 200 
      if ((unsigned int)antcomb->first_quick_scan_conf + 4294967295U <= 1U) 
        #line 203 
        if ((unsigned int)conf->main_lna_conf == 1U) 
                                                     #line 204 
                                                     conf->alt_lna_conf = (unsigned char)2U; else 
                                                                    #line 206 
                                                                    conf->alt_lna_conf = (unsigned char)1U;
      else 
           #line 209 
           conf->alt_lna_conf = (unsigned char)antcomb->first_quick_scan_conf;
    else 
      #line 211 
      if ((unsigned int)antcomb->second_quick_scan_conf + 4294967295U <= 1U) 
        #line 214 
        if ((unsigned int)conf->main_lna_conf == 1U) 
                                                     #line 215 
                                                     conf->alt_lna_conf = (unsigned char)2U; else 
                                                                    #line 217 
                                                                    conf->alt_lna_conf = (unsigned char)1U;
      else 
           #line 220 
           conf->alt_lna_conf = (unsigned char)antcomb->second_quick_scan_conf;
  else 
    #line 222 
    if ((int)antcomb->first_ratio != 0) 
      #line 224 
      if ((unsigned int)antcomb->first_quick_scan_conf + 4294967295U <= 1U) 
        #line 227 
        if ((unsigned int)conf->main_lna_conf == 1U) 
                                                     #line 228 
                                                     conf->alt_lna_conf = (unsigned char)2U; else 
                                                                    #line 230 
                                                                    conf->alt_lna_conf = (unsigned char)1U;
      else 
           #line 233 
           conf->alt_lna_conf = (unsigned char)antcomb->first_quick_scan_conf;
    else 
      #line 234 
      if ((int)antcomb->second_ratio != 0) 
        #line 236 
        if ((unsigned int)antcomb->second_quick_scan_conf + 4294967295U <= 1U) 
          #line 239 
          if ((unsigned int)conf->main_lna_conf == 1U) 
                                                       #line 240 
                                                       conf->alt_lna_conf = (unsigned char)2U; else 
                                                                    #line 242 
                                                                    conf->alt_lna_conf = (unsigned char)1U;
        else 
             #line 245 
             conf->alt_lna_conf = (unsigned char)antcomb->second_quick_scan_conf;
      else 
        #line 248 
        if ((unsigned int)antcomb->main_conf + 4294967295U <= 1U) 
          #line 251 
          if ((unsigned int)conf->main_lna_conf == 1U) 
                                                       #line 252 
                                                       conf->alt_lna_conf = (unsigned char)2U; else 
                                                                    #line 254 
                                                                    conf->alt_lna_conf = (unsigned char)1U;
        else 
             #line 257 
             conf->alt_lna_conf = (unsigned char)antcomb->main_conf;
  #line 258 
  return;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/antenna.c"
static void ath_select_ant_div_from_quick_scan(struct ath_ant_comb *antcomb, struct ath_hw_antcomb_conf *div_ant_conf, int main_rssi_avg, int alt_rssi_avg, int alt_ratio)
{
  #line 267 
  switch (antcomb->quick_scan_cnt) {
    #line 268 
    case 0: 
            #line 268 
    ;
    #line 270 
    div_ant_conf->main_lna_conf = (unsigned char)antcomb->main_conf;
    #line 271 
    div_ant_conf->alt_lna_conf = (unsigned char)antcomb->first_quick_scan_conf;
    #line 272 
    break;
    #line 273 
    case 1: 
            #line 273 
    ;
    #line 275 
    div_ant_conf->main_lna_conf = (unsigned char)antcomb->main_conf;
    #line 276 
    div_ant_conf->alt_lna_conf = (unsigned char)antcomb->second_quick_scan_conf;
    #line 277 
    antcomb->rssi_first = main_rssi_avg;
    #line 278 
    antcomb->rssi_second = alt_rssi_avg;
    #line 280 
    if (antcomb->main_conf == (unsigned int)ATH_ANT_DIV_COMB_LNA1) {
      #line 282 
      if ((int)ath_is_alt_ant_ratio_better(antcomb,alt_ratio,-4,2,main_rssi_avg,
                                  alt_rssi_avg,(int)antcomb->total_pkt_count) != 0) 
        #line 287 
        antcomb->first_ratio = (_Bool)1; else 
                                              #line 289 
                                              antcomb->first_ratio = (_Bool)0;
    }
    else 
      #line 290 
      if (antcomb->main_conf == (unsigned int)ATH_ANT_DIV_COMB_LNA2) {
        #line 291 
        if ((int)ath_is_alt_ant_ratio_better(antcomb,alt_ratio,-2,2,main_rssi_avg,
                                    alt_rssi_avg,
                                    (int)antcomb->total_pkt_count) != 0) 
          #line 296 
          antcomb->first_ratio = (_Bool)1; else 
                                                #line 298 
                                                antcomb->first_ratio = (_Bool)0;
      }
      else {
        #line 300 
        if ((int)ath_is_alt_ant_ratio_better(antcomb,alt_ratio,-4,0,main_rssi_avg,
                                    alt_rssi_avg,
                                    (int)antcomb->total_pkt_count) != 0) 
          #line 305 
          antcomb->first_ratio = (_Bool)1; else 
                                                #line 307 
                                                antcomb->first_ratio = (_Bool)0;
      }
    #line 309 
    break;
    #line 310 
    case 2: 
            #line 310 
    ;
    #line 311 
    antcomb->alt_good = (_Bool)0;
    #line 312 
    antcomb->scan_not_start = (_Bool)0;
    #line 313 
    antcomb->scan = (_Bool)0;
    #line 314 
    antcomb->rssi_first = main_rssi_avg;
    #line 315 
    antcomb->rssi_third = alt_rssi_avg;
    #line 317 
    switch ((unsigned int)antcomb->second_quick_scan_conf) {
      #line 318 
      case (unsigned int)2: 
                            #line 318 
      ;
      #line 319 
      antcomb->rssi_lna1 = alt_rssi_avg;
      #line 320 
      break;
      #line 321 
      case (unsigned int)1: 
                            #line 321 
      ;
      #line 322 
      antcomb->rssi_lna2 = alt_rssi_avg;
      #line 323 
      break;
      #line 324 
      case (unsigned int)3: 
                            #line 324 
      ;
      #line 325 
      if (antcomb->main_conf == (unsigned int)ATH_ANT_DIV_COMB_LNA2) 
        #line 326 
        antcomb->rssi_lna2 = main_rssi_avg;
      else 
        #line 327 
        if (antcomb->main_conf == (unsigned int)ATH_ANT_DIV_COMB_LNA1) 
          #line 328 
          antcomb->rssi_lna1 = main_rssi_avg;
      #line 329 
      break;
      #line 330 
      default: 
               #line 330 
      ;
      #line 331 
      break;
    }
    #line 334 
    if (antcomb->rssi_lna2 > antcomb->rssi_lna1 + div_ant_conf->lna1_lna2_switch_delta) 
      #line 336 
      div_ant_conf->main_lna_conf = (unsigned char)1U; else 
                                                            #line 338 
                                                            div_ant_conf->main_lna_conf = (unsigned char)2U;
    #line 340 
    if (antcomb->main_conf == (unsigned int)ATH_ANT_DIV_COMB_LNA1) {
      #line 341 
      if ((int)ath_is_alt_ant_ratio_better(antcomb,alt_ratio,-4,2,main_rssi_avg,
                                    alt_rssi_avg,
                                    (int)antcomb->total_pkt_count) != 0) 
        #line 346 
        antcomb->second_ratio = (_Bool)1; else 
                                               #line 348 
                                               antcomb->second_ratio = (_Bool)0;
    }
    else 
      #line 349 
      if (antcomb->main_conf == (unsigned int)ATH_ANT_DIV_COMB_LNA2) {
        #line 350 
        if ((int)ath_is_alt_ant_ratio_better(antcomb,alt_ratio,-2,2,main_rssi_avg,
                                    alt_rssi_avg,
                                    (int)antcomb->total_pkt_count) != 0) 
          #line 355 
          antcomb->second_ratio = (_Bool)1; else 
                                                 #line 357 
                                                 antcomb->second_ratio = (_Bool)0;
      }
      else {
        #line 359 
        if ((int)ath_is_alt_ant_ratio_better(antcomb,alt_ratio,-4,0,main_rssi_avg,
                                    alt_rssi_avg,
                                    (int)antcomb->total_pkt_count) != 0) 
          #line 364 
          antcomb->second_ratio = (_Bool)1; else 
                                                 #line 366 
                                                 antcomb->second_ratio = (_Bool)0;
      }
    #line 369 
    ath_ant_set_alt_ratio(antcomb,div_ant_conf);
    #line 371 
    break;
    #line 372 
    default: 
             #line 372 
    ;
    #line 373 
    break;
  }
  #line 375 
  return;
}

#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/antenna.c"
static void ath_ant_div_conf_fast_divbias(struct ath_hw_antcomb_conf *ant_conf, struct ath_ant_comb *antcomb, int alt_ratio)
{
  #line 381 
  ant_conf->main_gaintb = (unsigned char)0U;
  #line 382 
  ant_conf->alt_gaintb = (unsigned char)0U;
  #line 384 
  if ((unsigned int)ant_conf->div_group == 0U) 
    #line 386 
    switch (((int)ant_conf->main_lna_conf << 4) | (int)ant_conf->alt_lna_conf) {
      #line 388 
      case 1: 
              #line 388 
      ;
      #line 389 
      ant_conf->fast_div_bias = (unsigned char)59U;
      #line 390 
      break;
      #line 391 
      case 2: 
              #line 391 
      ;
      #line 392 
      ant_conf->fast_div_bias = (unsigned char)61U;
      #line 393 
      break;
      #line 394 
      case 3: 
              #line 394 
      ;
      #line 395 
      ant_conf->fast_div_bias = (unsigned char)1U;
      #line 396 
      break;
      #line 397 
      case 16: 
               #line 397 
      ;
      #line 398 
      ant_conf->fast_div_bias = (unsigned char)7U;
      #line 399 
      break;
      #line 400 
      case 18: 
               #line 400 
      ;
      #line 401 
      ant_conf->fast_div_bias = (unsigned char)2U;
      #line 402 
      break;
      #line 403 
      case 19: 
               #line 403 
      ;
      #line 404 
      ant_conf->fast_div_bias = (unsigned char)7U;
      #line 405 
      break;
      #line 406 
      case 32: 
               #line 406 
      ;
      #line 407 
      ant_conf->fast_div_bias = (unsigned char)6U;
      #line 408 
      break;
      #line 409 
      case 33: 
               #line 409 
      ;
      #line 410 
      ant_conf->fast_div_bias = (unsigned char)0U;
      #line 411 
      break;
      #line 412 
      case 35: 
               #line 412 
      ;
      #line 413 
      ant_conf->fast_div_bias = (unsigned char)6U;
      #line 414 
      break;
      #line 415 
      case 48: 
               #line 415 
      ;
      #line 416 
      ant_conf->fast_div_bias = (unsigned char)1U;
      #line 417 
      break;
      #line 418 
      case 49: 
               #line 418 
      ;
      #line 419 
      ant_conf->fast_div_bias = (unsigned char)59U;
      #line 420 
      break;
      #line 421 
      case 50: 
               #line 421 
      ;
      #line 422 
      ant_conf->fast_div_bias = (unsigned char)61U;
      #line 423 
      break;
      #line 424 
      default: 
               #line 424 
      ;
      #line 425 
      break;
    }
  else 
    #line 427 
    if ((unsigned int)ant_conf->div_group == 1U) 
      #line 429 
      switch (((int)ant_conf->main_lna_conf << 4) | (int)ant_conf->alt_lna_conf) {
        #line 431 
        case 1: 
                #line 431 
        ;
        #line 432 
        ant_conf->fast_div_bias = (unsigned char)1U;
        #line 433 
        break;
        #line 434 
        case 2: 
                #line 434 
        ;
        #line 435 
        ant_conf->fast_div_bias = (unsigned char)1U;
        #line 436 
        break;
        #line 437 
        case 3: 
                #line 437 
        ;
        #line 438 
        ant_conf->fast_div_bias = (unsigned char)1U;
        #line 439 
        break;
        #line 440 
        case 16: 
                 #line 440 
        ;
        #line 441 
        if (! antcomb->scan && alt_ratio > 30) 
                                               #line 443 
                                               ant_conf->fast_div_bias = (unsigned char)63U; else 
                                                                    #line 445 
                                                                    ant_conf->fast_div_bias = (unsigned char)1U;
        #line 446 
        break;
        #line 447 
        case 18: 
                 #line 447 
        ;
        #line 448 
        ant_conf->fast_div_bias = (unsigned char)1U;
        #line 449 
        break;
        #line 450 
        case 19: 
                 #line 450 
        ;
        #line 451 
        if (! antcomb->scan && alt_ratio > 30) 
                                               #line 453 
                                               ant_conf->fast_div_bias = (unsigned char)63U; else 
                                                                    #line 455 
                                                                    ant_conf->fast_div_bias = (unsigned char)1U;
        #line 456 
        break;
        #line 457 
        case 32: 
                 #line 457 
        ;
        #line 458 
        if (! antcomb->scan && alt_ratio > 30) 
                                               #line 460 
                                               ant_conf->fast_div_bias = (unsigned char)63U; else 
                                                                    #line 462 
                                                                    ant_conf->fast_div_bias = (unsigned char)1U;
        #line 463 
        break;
        #line 464 
        case 33: 
                 #line 464 
        ;
        #line 465 
        ant_conf->fast_div_bias = (unsigned char)1U;
        #line 466 
        break;
        #line 467 
        case 35: 
                 #line 467 
        ;
        #line 468 
        if (! antcomb->scan && alt_ratio > 30) 
                                               #line 470 
                                               ant_conf->fast_div_bias = (unsigned char)63U; else 
                                                                    #line 472 
                                                                    ant_conf->fast_div_bias = (unsigned char)1U;
        #line 473 
        break;
        #line 474 
        case 48: 
                 #line 474 
        ;
        #line 475 
        ant_conf->fast_div_bias = (unsigned char)1U;
        #line 476 
        break;
        #line 477 
        case 49: 
                 #line 477 
        ;
        #line 478 
        ant_conf->fast_div_bias = (unsigned char)1U;
        #line 479 
        break;
        #line 480 
        case 50: 
                 #line 480 
        ;
        #line 481 
        ant_conf->fast_div_bias = (unsigned char)1U;
        #line 482 
        break;
        #line 483 
        default: 
                 #line 483 
        ;
        #line 484 
        break;
      }
    else 
      #line 486 
      if ((unsigned int)ant_conf->div_group == 2U) {
        #line 488 
        switch (((int)ant_conf->main_lna_conf << 4) | (int)ant_conf->alt_lna_conf) {
          #line 490 
          case 1: 
                  #line 490 
          ;
          #line 491 
          ant_conf->fast_div_bias = (unsigned char)1U;
          #line 492 
          break;
          #line 493 
          case 2: 
                  #line 493 
          ;
          #line 494 
          ant_conf->fast_div_bias = (unsigned char)1U;
          #line 495 
          break;
          #line 496 
          case 3: 
                  #line 496 
          ;
          #line 497 
          ant_conf->fast_div_bias = (unsigned char)1U;
          #line 498 
          break;
          #line 499 
          case 16: 
                   #line 499 
          ;
          #line 500 
          if (! antcomb->scan && antcomb->ant_ratio < alt_ratio) 
                                                                 #line 501 
                                                                 ant_conf->fast_div_bias = (unsigned char)1U; else 
                                                                    #line 503 
                                                                    ant_conf->fast_div_bias = (unsigned char)2U;
          #line 504 
          break;
          #line 505 
          case 18: 
                   #line 505 
          ;
          #line 506 
          ant_conf->fast_div_bias = (unsigned char)1U;
          #line 507 
          break;
          #line 508 
          case 19: 
                   #line 508 
          ;
          #line 509 
          if (! antcomb->scan && antcomb->ant_ratio < alt_ratio) 
                                                                 #line 510 
                                                                 ant_conf->fast_div_bias = (unsigned char)1U; else 
                                                                    #line 512 
                                                                    ant_conf->fast_div_bias = (unsigned char)2U;
          #line 513 
          break;
          #line 514 
          case 32: 
                   #line 514 
          ;
          #line 515 
          if (! antcomb->scan && antcomb->ant_ratio < alt_ratio) 
                                                                 #line 516 
                                                                 ant_conf->fast_div_bias = (unsigned char)1U; else 
                                                                    #line 518 
                                                                    ant_conf->fast_div_bias = (unsigned char)2U;
          #line 519 
          break;
          #line 520 
          case 33: 
                   #line 520 
          ;
          #line 521 
          ant_conf->fast_div_bias = (unsigned char)1U;
          #line 522 
          break;
          #line 523 
          case 35: 
                   #line 523 
          ;
          #line 524 
          if (! antcomb->scan && antcomb->ant_ratio < alt_ratio) 
                                                                 #line 525 
                                                                 ant_conf->fast_div_bias = (unsigned char)1U; else 
                                                                    #line 527 
                                                                    ant_conf->fast_div_bias = (unsigned char)2U;
          #line 528 
          break;
          #line 529 
          case 48: 
                   #line 529 
          ;
          #line 530 
          ant_conf->fast_div_bias = (unsigned char)1U;
          #line 531 
          break;
          #line 532 
          case 49: 
                   #line 532 
          ;
          #line 533 
          ant_conf->fast_div_bias = (unsigned char)1U;
          #line 534 
          break;
          #line 535 
          case 50: 
                   #line 535 
          ;
          #line 536 
          ant_conf->fast_div_bias = (unsigned char)1U;
          #line 537 
          break;
          #line 538 
          default: 
                   #line 538 
          ;
          #line 539 
          break;
        }
        #line 542 
        if (antcomb->fast_div_bias != 0) 
                                         #line 543 
                                         ant_conf->fast_div_bias = (unsigned char)antcomb->fast_div_bias;
      }
      else 
        #line 544 
        if ((unsigned int)ant_conf->div_group == 3U) 
          #line 545 
          switch (((int)ant_conf->main_lna_conf << 4) | (int)ant_conf->alt_lna_conf) {
            #line 547 
            case 1: 
                    #line 547 
            ;
            #line 548 
            ant_conf->fast_div_bias = (unsigned char)1U;
            #line 549 
            break;
            #line 550 
            case 2: 
                    #line 550 
            ;
            #line 551 
            ant_conf->fast_div_bias = (unsigned char)57U;
            #line 552 
            break;
            #line 553 
            case 3: 
                    #line 553 
            ;
            #line 554 
            ant_conf->fast_div_bias = (unsigned char)1U;
            #line 555 
            break;
            #line 556 
            case 16: 
                     #line 556 
            ;
            #line 557 
            ant_conf->fast_div_bias = (unsigned char)2U;
            #line 558 
            break;
            #line 559 
            case 18: 
                     #line 559 
            ;
            #line 560 
            ant_conf->fast_div_bias = (unsigned char)63U;
            #line 561 
            break;
            #line 562 
            case 19: 
                     #line 562 
            ;
            #line 563 
            ant_conf->fast_div_bias = (unsigned char)2U;
            #line 564 
            break;
            #line 565 
            case 32: 
                     #line 565 
            ;
            #line 566 
            ant_conf->fast_div_bias = (unsigned char)3U;
            #line 567 
            break;
            #line 568 
            case 33: 
                     #line 568 
            ;
            #line 569 
            ant_conf->fast_div_bias = (unsigned char)3U;
            #line 570 
            break;
            #line 571 
            case 35: 
                     #line 571 
            ;
            #line 572 
            ant_conf->fast_div_bias = (unsigned char)3U;
            #line 573 
            break;
            #line 574 
            case 48: 
                     #line 574 
            ;
            #line 575 
            ant_conf->fast_div_bias = (unsigned char)1U;
            #line 576 
            break;
            #line 577 
            case 49: 
                     #line 577 
            ;
            #line 578 
            ant_conf->fast_div_bias = (unsigned char)6U;
            #line 579 
            break;
            #line 580 
            case 50: 
                     #line 580 
            ;
            #line 581 
            ant_conf->fast_div_bias = (unsigned char)1U;
            #line 582 
            break;
            #line 583 
            default: 
                     #line 583 
            ;
            #line 584 
            break;
          }
  #line 586 
  return;
}

#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/antenna.c"
static void ath_ant_try_scan(struct ath_ant_comb *antcomb, struct ath_hw_antcomb_conf *conf, int curr_alt_set, int alt_rssi_avg, int main_rssi_avg)
{
  #line 594 
  switch (curr_alt_set) {
    #line 595 
    case 1: 
            #line 595 
    ;
    #line 596 
    antcomb->rssi_lna2 = alt_rssi_avg;
    #line 597 
    antcomb->rssi_lna1 = main_rssi_avg;
    #line 598 
    antcomb->scan = (_Bool)1;
    #line 600 
    conf->main_lna_conf = (unsigned char)2U;
    #line 601 
    conf->alt_lna_conf = (unsigned char)3U;
    #line 602 
    break;
    #line 603 
    case 2: 
            #line 603 
    ;
    #line 604 
    antcomb->rssi_lna1 = alt_rssi_avg;
    #line 605 
    antcomb->rssi_lna2 = main_rssi_avg;
    #line 606 
    antcomb->scan = (_Bool)1;
    #line 608 
    conf->main_lna_conf = (unsigned char)1U;
    #line 609 
    conf->alt_lna_conf = (unsigned char)3U;
    #line 610 
    break;
    #line 611 
    case 3: 
            #line 611 
    ;
    #line 612 
    antcomb->rssi_add = alt_rssi_avg;
    #line 613 
    antcomb->scan = (_Bool)1;
    #line 615 
    conf->alt_lna_conf = (unsigned char)0U;
    #line 616 
    break;
    #line 617 
    case 0: 
            #line 617 
    ;
    #line 618 
    antcomb->rssi_sub = alt_rssi_avg;
    #line 619 
    antcomb->scan = (_Bool)0;
    #line 620 
    if (antcomb->rssi_lna2 > antcomb->rssi_lna1 + conf->lna1_lna2_switch_delta) 
      #line 623 
      if (antcomb->rssi_add > antcomb->rssi_lna1 && antcomb->rssi_add > antcomb->rssi_sub) {
        #line 626 
        conf->main_lna_conf = (unsigned char)1U;
        #line 627 
        conf->alt_lna_conf = (unsigned char)3U;
      }
      else 
        #line 628 
        if (antcomb->rssi_sub > antcomb->rssi_lna1) {
          #line 631 
          conf->main_lna_conf = (unsigned char)1U;
          #line 632 
          conf->alt_lna_conf = (unsigned char)0U;
        }
        else {
          #line 635 
          conf->main_lna_conf = (unsigned char)1U;
          #line 636 
          conf->alt_lna_conf = (unsigned char)2U;
        }
    else 
      #line 640 
      if (antcomb->rssi_add > antcomb->rssi_lna2 && antcomb->rssi_add > antcomb->rssi_sub) {
        #line 643 
        conf->main_lna_conf = (unsigned char)2U;
        #line 644 
        conf->alt_lna_conf = (unsigned char)3U;
      }
      else 
        #line 645 
        if (antcomb->rssi_sub > antcomb->rssi_lna1) {
          #line 648 
          conf->main_lna_conf = (unsigned char)2U;
          #line 649 
          conf->alt_lna_conf = (unsigned char)0U;
        }
        else {
          #line 652 
          conf->main_lna_conf = (unsigned char)2U;
          #line 653 
          conf->alt_lna_conf = (unsigned char)1U;
        }
    #line 656 
    break;
    #line 657 
    default: 
             #line 657 
    ;
    #line 658 
    break;
  }
  #line 660 
  return;
}

#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/antenna.c"
static bool ath_ant_try_switch(struct ath_hw_antcomb_conf *div_ant_conf, struct ath_ant_comb *antcomb, int alt_ratio, int alt_rssi_avg, int main_rssi_avg, int curr_main_set, int curr_alt_set)
{
  #line 668 
  bool ret = (_Bool)0;
  #line 670 
  if ((int)ath_ant_div_comb_alt_check(div_ant_conf,antcomb,alt_ratio,alt_rssi_avg,
                                 main_rssi_avg) != 0) {
    #line 672 
    if (curr_alt_set == 1) {
      #line 676 
      div_ant_conf->main_lna_conf = (unsigned char)1U;
      #line 677 
      div_ant_conf->alt_lna_conf = (unsigned char)2U;
    }
    else 
      #line 678 
      if (curr_alt_set == 2) {
        #line 679 
        div_ant_conf->main_lna_conf = (unsigned char)2U;
        #line 680 
        div_ant_conf->alt_lna_conf = (unsigned char)1U;
      }
    #line 683 
    ret = (_Bool)1;
  }
  else 
    #line 684 
    if ((unsigned int)curr_alt_set + 4294967295U > 1U) {
      #line 689 
      if (curr_main_set == 1) 
                              #line 690 
                              div_ant_conf->alt_lna_conf = (unsigned char)2U;
      else 
        #line 691 
        if (curr_main_set == 2) 
                                #line 692 
                                div_ant_conf->alt_lna_conf = (unsigned char)1U;
      #line 694 
      ret = (_Bool)1;
    }
  #line 697 
  return ret;
}

#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/antenna.c"
static bool ath_ant_short_scan_check(struct ath_ant_comb *antcomb)
{
  #line 702 
  int alt_ratio;
  #line 704 
  if (! antcomb->scan || ! antcomb->alt_good) 
                                              #line 705 
                                              return (_Bool)0;
  {
    #line 707 
    unsigned long __dummy;
    #line 707 
    unsigned long __dummy2;
    }
  #line 707 
  if (1 != 0) {
    {
      #line 707 
      unsigned long __dummy_0;
      #line 707 
      unsigned long __dummy2_0;
      }
    #line 707 
    if (1 != 0) {
      #line 707 
      ;
      #line 707 
      if ((long)((antcomb->scan_start_time + msecs_to_jiffies(50U)) - jiffies) < 0L) 
        #line 709 
        return (_Bool)1;
    }
  }
  #line 711 
  if ((unsigned int)antcomb->total_pkt_count == 256U) {
    #line 712 
    alt_ratio = (antcomb->alt_recv_cnt * 100) / (int)antcomb->total_pkt_count;
    #line 714 
    if (antcomb->ant_ratio > alt_ratio) 
                                        #line 715 
                                        return (_Bool)1;
  }
  #line 718 
  return (_Bool)0;
}

#line 721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/antenna.c"
void ath_ant_comb_scan(struct ath_softc *sc, struct ath_rx_status *rs)
{
  #line 723 
  struct ath_hw_antcomb_conf div_ant_conf;
  #line 725 
  int curr_alt_set;
  #line 726 
  int curr_main_set;
  #line 729 
  int rx_ant_conf;
  #line 729 
  int main_ant_conf;
  #line 730 
  bool ret;
  #line 724 
  struct ath_ant_comb *antcomb = & sc->ant_comb;
  #line 725 
  int alt_ratio = 0;
  #line 725 
  int alt_rssi_avg = 0;
  #line 725 
  int main_rssi_avg = 0;
  #line 727 
  int main_rssi = (int)rs->rs_rssi_ctl[0];
  #line 728 
  int alt_rssi = (int)rs->rs_rssi_ctl[1];
  #line 730 
  bool short_scan = (_Bool)0;
  #line 732 
  rx_ant_conf = ((int)rs->rs_rssi_ctl[2] >> 4) & 3;
  #line 734 
  main_ant_conf = ((int)rs->rs_rssi_ctl[2] >> 2) & 3;
  #line 737 
  if (antcomb->low_rssi_thresh <= alt_rssi) {
    #line 738 
    antcomb->ant_ratio = 30;
    #line 739 
    antcomb->ant_ratio2 = 20;
  }
  else {
    #line 741 
    antcomb->ant_ratio = 50;
    #line 742 
    antcomb->ant_ratio2 = 50;
  }
  #line 746 
  if (main_rssi > 0 && alt_rssi > 0) {
    #line 747 
    antcomb->total_pkt_count = (u16)((int)antcomb->total_pkt_count + 1);
    #line 748 
    antcomb->main_total_rssi += main_rssi;
    #line 749 
    antcomb->alt_total_rssi += alt_rssi;
    #line 751 
    if (main_ant_conf == rx_ant_conf) 
                                      #line 752 
                                      (antcomb->main_recv_cnt) ++; else 
                                                                    #line 754 
                                                                    (antcomb->alt_recv_cnt) ++;
  }
  #line 757 
  if (main_ant_conf == rx_ant_conf) {
    #line 758 
    (sc->debug.stats.ant_stats[0].recv_cnt) ++;
    #line 759 
    (sc->debug.stats.ant_stats[0].lna_recv_cnt[rx_ant_conf]) ++;
  }
  else {
    #line 761 
    (sc->debug.stats.ant_stats[1].recv_cnt) ++;
    #line 762 
    (sc->debug.stats.ant_stats[1].lna_recv_cnt[rx_ant_conf]) ++;
  }
  #line 766 
  short_scan = ath_ant_short_scan_check(antcomb);
  #line 768 
  if (((unsigned int)antcomb->total_pkt_count <= 511U || (unsigned int)rs->rs_moreaggr != 0U) && ! short_scan) 
    #line 770 
    return;
  #line 772 
  if ((unsigned int)antcomb->total_pkt_count != 0U) {
    #line 773 
    alt_ratio = (antcomb->alt_recv_cnt * 100) / (int)antcomb->total_pkt_count;
    #line 775 
    main_rssi_avg = antcomb->main_total_rssi / (int)antcomb->total_pkt_count;
    #line 777 
    alt_rssi_avg = antcomb->alt_total_rssi / (int)antcomb->total_pkt_count;
  }
  #line 781 
  ath9k_hw_antdiv_comb_conf_get(sc->sc_ah,& div_ant_conf);
  #line 782 
  curr_alt_set = (int)div_ant_conf.alt_lna_conf;
  #line 783 
  curr_main_set = (int)div_ant_conf.main_lna_conf;
  #line 784 
  antcomb->count = (u16)((int)antcomb->count + 1);
  #line 786 
  if ((unsigned int)antcomb->count == 100U) {
    #line 787 
    if (antcomb->ant_ratio < alt_ratio) {
      #line 788 
      ath_lnaconf_alt_good_scan(antcomb,div_ant_conf,main_rssi_avg);
      #line 790 
      antcomb->alt_good = (_Bool)1;
    }
    else 
         #line 792 
         antcomb->alt_good = (_Bool)0;
    #line 795 
    antcomb->count = (unsigned short)0U;
    #line 796 
    antcomb->scan = (_Bool)1;
    #line 797 
    antcomb->scan_not_start = (_Bool)1;
  }
  #line 800 
  if (! antcomb->scan) {
    #line 801 
    ret = ath_ant_try_switch(& div_ant_conf,antcomb,alt_ratio,alt_rssi_avg,main_rssi_avg,curr_main_set,curr_alt_set);
    #line 804 
    if ((int)ret != 0) 
                       #line 805 
                       goto div_comb_done;
  }
  #line 808 
  if (! antcomb->scan && div_ant_conf.lna1_lna2_delta + main_rssi_avg > alt_rssi_avg) 
    #line 810 
    goto div_comb_done;
  #line 812 
  if (! antcomb->scan_not_start) 
                                 #line 813 
                                 ath_ant_try_scan(antcomb,& div_ant_conf,curr_alt_set,alt_rssi_avg,main_rssi_avg);
  else {
    #line 816 
    if (! antcomb->alt_good) {
      #line 817 
      antcomb->scan_not_start = (_Bool)0;
      #line 819 
      if (curr_main_set == 1) {
        #line 820 
        div_ant_conf.main_lna_conf = (unsigned char)1U;
        #line 822 
        div_ant_conf.alt_lna_conf = (unsigned char)2U;
      }
      else 
        #line 824 
        if (curr_main_set == 2) {
          #line 825 
          div_ant_conf.main_lna_conf = (unsigned char)2U;
          #line 827 
          div_ant_conf.alt_lna_conf = (unsigned char)1U;
        }
      #line 830 
      goto div_comb_done;
    }
    #line 832 
    ath_select_ant_div_from_quick_scan(antcomb,& div_ant_conf,main_rssi_avg,alt_rssi_avg,alt_ratio);
    #line 835 
    (antcomb->quick_scan_cnt) ++;
  }
  #line 838 
  div_comb_done: 
                 #line 838 
  ;
  #line 839 
  ath_ant_div_conf_fast_divbias(& div_ant_conf,antcomb,alt_ratio);
  #line 840 
  ath9k_hw_antdiv_comb_conf_set(sc->sc_ah,& div_ant_conf);
  #line 841 
  ath9k_debug_stat_ant(sc,& div_ant_conf,main_rssi_avg,alt_rssi_avg);
  #line 843 
  antcomb->scan_start_time = jiffies;
  #line 844 
  antcomb->total_pkt_count = (unsigned short)0U;
  #line 845 
  antcomb->main_total_rssi = 0;
  #line 846 
  antcomb->alt_total_rssi = 0;
  #line 847 
  antcomb->main_recv_cnt = 0;
  #line 848 
  antcomb->alt_recv_cnt = 0;
  #line 849 
  return;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_clear_bit_2(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void INIT_LIST_HEAD_3(struct list_head *list);
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_3(struct list_head *head)
{
  #line 269 
  union __anonunion___u_9332 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 61 
int memcmp(void *, void *, size_t);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_4(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 827  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_spin_lock_bh_chan_lock_of_ath_softc_2(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 875  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_spin_lock_bh_sc_pcu_lock_of_ath_softc_0(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_4(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_spin_unlock_bh_chan_lock_of_ath_softc_2(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 902  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_spin_unlock_bh_sc_pcu_lock_of_ath_softc_0(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_4(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_spin_unlock_irqrestore_cc_lock_of_ath_common_1(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 893  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_4(spinlock_t *lock, unsigned long flags);
#line 26 
#line 853 
static void cif_mutex_lock_mutex_of_ath_softc_0(struct mutex *lock);
#line 35 
#line 809 
static void cif___ldv_spin_lock_cc_lock_of_ath_common_1(spinlock_t *lock);
#line 35 
#line 884 
static void cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_4(spinlock_t *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 860  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_mutex_unlock_mutex_of_ath_softc_0(struct mutex *lock);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 845  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static int cif_mod_timer_2(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 867  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static int cif_del_timer_sync_2(struct timer_list *timer);
#line 2221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_put_zero(struct sk_buff *skb, unsigned int len)
{
  #line 2223 
  void *tmp = skb_put(skb,len);
  #line 2225 
  memset(tmp,0,(unsigned long)len);
  #line 2227 
  return tmp;
}

#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_put_data(struct sk_buff *skb, void *data, unsigned int len)
{
  #line 2233 
  void *tmp = skb_put(skb,len);
  #line 2235 
  memcpy(tmp,data,(unsigned long)len);
  #line 2237 
  return tmp;
}

#line 4272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_queue_mapping(struct sk_buff *skb, u16 queue_mapping)
{
  #line 4274 
  skb->queue_mapping = queue_mapping;
  #line 4275 
  return;
}

#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
#line 634 
void cfg80211_chandef_create(struct cfg80211_chan_def *, struct ieee80211_channel *, enum nl80211_channel_type);
#line 4853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 4853 
struct sk_buff *ieee80211_nullfunc_get(struct ieee80211_hw *, struct ieee80211_vif *, bool);
#line 4870 
#line 4870 
struct sk_buff *ieee80211_probereq_get(struct ieee80211_hw *, u8 *, u8 *, size_t, size_t);
#line 5170 
#line 5170 
void ieee80211_wake_queue(struct ieee80211_hw *, int);
#line 5179 
#line 5179 
void ieee80211_stop_queue(struct ieee80211_hw *, int);
#line 5220 
#line 5220 
void ieee80211_scan_completed(struct ieee80211_hw *, struct cfg80211_scan_info *);
#line 5452 
#line 5452 
struct ieee80211_sta *ieee80211_find_sta(struct ieee80211_vif *, u8 *);
#line 5799 
#line 5799 
void ieee80211_ready_on_channel(struct ieee80211_hw *);
#line 5805 
#line 5805 
void ieee80211_remain_on_channel_expired(struct ieee80211_hw *);
#line 6092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static enum nl80211_iftype ieee80211_iftype_p2p(enum nl80211_iftype type, bool p2p)
{
  #line 6094 
  if ((int)p2p != 0) 
    #line 6095 
    switch ((unsigned int)type) {
      #line 6096 
      case (unsigned int)2: 
                            #line 6096 
      ;
      #line 6097 
      return NL80211_IFTYPE_P2P_CLIENT;
      #line 6098 
      case (unsigned int)3: 
                            #line 6098 
      ;
      #line 6099 
      return NL80211_IFTYPE_P2P_GO;
      #line 6100 
      default: 
               #line 6100 
      ;
      #line 6101 
      break;
    }
  #line 6104 
  return type;
}

#line 6108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static enum nl80211_iftype ieee80211_vif_type_p2p(struct ieee80211_vif *vif)
{
  #line 6110 
  return ieee80211_iftype_p2p(vif->type,(_Bool)((bool)((int)vif->p2p) != 0));
}

#line 6168 
#line 6168 
bool ieee80211_tx_prepare_skb(struct ieee80211_hw *, struct ieee80211_vif *, struct sk_buff *, int, struct ieee80211_sta **);
#line 6208 
#line 6208 
int ieee80211_parse_p2p_noa(struct ieee80211_p2p_noa_attr *, struct ieee80211_noa_data *, u32);
#line 6217 
#line 6217 
void ieee80211_update_p2p_noa(struct ieee80211_noa_data *, u32);
#line 1052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
#line 1052 
u32 ath9k_hw_getrxfilter(struct ath_hw *);
#line 1060 
#line 1060 
u32 ath9k_hw_gettsf32(struct ath_hw *);
#line 1078 
#line 1078 
struct ath_gen_timer *ath_gen_timer_alloc(struct ath_hw *, void (*)(void *), void (*)(void *), void *, u8);
#line 1083 
#line 1083 
void ath9k_hw_gen_timer_start(struct ath_hw *, struct ath_gen_timer *, u32, u32);
#line 1088 
#line 1088 
void ath9k_hw_gen_timer_stop(struct ath_hw *, struct ath_gen_timer *);
#line 1090 
#line 1090 
void ath_gen_timer_free(struct ath_hw *, struct ath_gen_timer *);
#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/common-spectral.h"
#line 175 
void ath9k_cmn_spectral_scan_trigger(struct ath_common *, struct ath_spec_scan_priv *);
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
int ath9k_use_chanctx;
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath_chanctx_init(struct ath_softc *sc);
#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_init_channel_context(struct ath_softc *sc);
#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_offchannel_init(struct ath_softc *sc);
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
int ath9k_init_p2p(struct ath_softc *sc);
#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_deinit_p2p(struct ath_softc *sc);
#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_beacon_add_noa(struct ath_softc *sc, struct ath_vif *avp, struct sk_buff *skb);
#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_chanctx_wake_queues(struct ath_softc *sc, struct ath_chanctx *ctx);
#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_chanctx_stop_queues(struct ath_softc *sc, struct ath_chanctx *ctx);
#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath_chanctx_beacon_sent_ev(struct ath_softc *sc, enum ath_chanctx_event ev);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static int ath_set_channel(struct ath_softc *sc)
{
  #line 28 
  struct ath9k_channel *hchan;
  #line 32 
  unsigned long flags;
  #line 34 
  int r;
  #line 25 
  struct ath_hw *ah = sc->sc_ah;
  #line 26 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 27 
  struct ieee80211_hw *hw = sc->hw;
  #line 29 
  struct cfg80211_chan_def *chandef = & (sc->cur_chan)->chandef;
  #line 30 
  struct ieee80211_channel *chan = chandef->chan;
  #line 31 
  int pos = (int)chan->hw_value;
  #line 33 
  int old_pos = -1;
  #line 36 
  if ((int)test_bit(0L,& common->op_flags) != 0) 
                                                 #line 37 
                                                 return -5;
  #line 39 
  if (ah->curchan != (struct ath9k_channel *)0) 
                                                #line 40 
                                                old_pos = (int)((ah->curchan - & ah->channels[0]) / 16L);
  #line 42 
  if ((common->debug_mask & 512) != 0) 
                                       #line 42 
                                       ath_printk((char *)"\001",common,(char *)"Set channel: %d MHz width: %d\n",chan->center_freq,(unsigned int)chandef->width);
  #line 46 
  cif___ldv_spin_lock_cc_lock_of_ath_common_1(& common->cc_lock);
  #line 47 
  ath_update_survey_stats(sc);
  #line 48 
  cif_spin_unlock_irqrestore_cc_lock_of_ath_common_1(& common->cc_lock,flags);
  #line 50 
  ath9k_cmn_get_channel(hw,ah,chandef);
  #line 57 
  if (! (sc->cur_chan)->offchannel && sc->cur_survey != & sc->survey[pos]) {
    #line 58 
    if (sc->cur_survey != (struct survey_info *)0) 
                                                   #line 59 
                                                   (sc->cur_survey)->filled &= 4294967293U;
    #line 61 
    sc->cur_survey = & sc->survey[pos];
    #line 63 
    memset((void *)sc->cur_survey,0,72UL);
    #line 64 
    (sc->cur_survey)->filled |= 2U;
  }
  else 
    #line 65 
    if ((sc->survey[pos].filled & 2U) == 0U) 
                                             #line 66 
                                             memset((void *)(& sc->survey[pos]),0,72UL);
  #line 69 
  hchan = & (sc->sc_ah)->channels[pos];
  #line 70 
  r = ath_reset(sc,hchan);
  #line 71 
  if (r != 0) 
              #line 72 
              return r;
  #line 78 
  if (old_pos >= 0) 
                    #line 79 
                    ath_update_survey_nf(sc,old_pos);
  #line 84 
  if ((int)hw->conf.radar_enabled != 0) {
    #line 85 
    u32 rxfilter;
    #line 87 
    rxfilter = ath9k_hw_getrxfilter(ah);
    #line 88 
    rxfilter |= 8448U;
    #line 90 
    ath9k_hw_setrxfilter(ah,rxfilter);
    #line 91 
    if ((common->debug_mask & 65536) != 0) 
                                           #line 91 
                                           ath_printk((char *)"\001",common,(char *)"DFS enabled at freq %d\n",chan->center_freq);
  }
  else {
    #line 95 
    if ((int)test_bit(5L,& common->op_flags) != 0) 
      #line 95 
      if (sc->spec_priv.spectral_mode == (unsigned int)SPECTRAL_CHANSCAN) 
        #line 97 
        ath9k_cmn_spectral_scan_trigger(common,& sc->spec_priv);
  }
  #line 100 
  return 0;
}

#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath_chanctx_init(struct ath_softc *sc)
{
  #line 105 
  struct ath_chanctx *ctx;
  #line 107 
  struct ieee80211_supported_band *sband;
  #line 108 
  struct ieee80211_channel *chan;
  #line 109 
  int i;
  #line 109 
  int j;
  #line 106 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 111 
  sband = & common->sbands[0];
  #line 112 
  if (sband->n_channels == 0) 
                              #line 113 
                              sband = & common->sbands[1];
  #line 115 
  chan = sband->channels;
  #line 116 
  i = 0;
  #line 116 
  while (i <= 1) {
    #line 117 
    ctx = & sc->chanctx[i];
    #line 118 
    cfg80211_chandef_create(& ctx->chandef,chan,(enum nl80211_channel_type)NL80211_CHAN_HT20);
    #line 119 
    INIT_LIST_HEAD_3(& ctx->vifs);
    #line 120 
    ctx->txpower = (unsigned short)100U;
    #line 121 
    ctx->flush_timeout = 50;
    #line 122 
    j = 0;
    #line 122 
    while ((unsigned int)j <= 3U) {
      #line 123 
      INIT_LIST_HEAD_3(& ctx->acq[j].acq_new);
      #line 124 
      INIT_LIST_HEAD_3(& ctx->acq[j].acq_old);
      #line 125 
      spinlock_check(& ctx->acq[j].lock);
      {
        #line 125 
        struct lock_class_key __key;
        #line 125 
        __raw_spin_lock_init(& ctx->acq[j].lock.__anonCompField_spinlock_25.rlock,(char *)"&(&ctx->acq[j].lock)->rlock",& __key);
      }
      #line 122 
      j ++;
    }
    #line 116 
    i ++;
  }
  #line 130 
  return;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath_chanctx_set_channel(struct ath_softc *sc, struct ath_chanctx *ctx, struct cfg80211_chan_def *chandef)
{
  #line 134 
  bool cur_chan;
  #line 133 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 136 
  cif_spin_lock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
  #line 137 
  if (chandef != (struct cfg80211_chan_def *)0) 
                                                #line 138 
                                                memcpy((void *)(& ctx->chandef),(void *)chandef,32UL);
  #line 139 
  cur_chan = (_Bool)(sc->cur_chan == ctx);
  #line 140 
  cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
  #line 142 
  if (! cur_chan) {
    #line 143 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 143 
                                            ath_printk((char *)"\001",common,(char *)"Current context differs from the new context\n");
    #line 145 
    return;
  }
  #line 148 
  ath_set_channel(sc);
  #line 149 
  return;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
struct ath_chanctx *ath_is_go_chanctx_present(struct ath_softc *sc)
{
  #line 159 
  struct ath_chanctx *ctx;
  #line 160 
  struct ath_vif *avp;
  #line 161 
  struct ieee80211_vif *vif;
  #line 163 
  cif_spin_lock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
  #line 165 
  ctx = & sc->chanctx[0];
  #line 165 
  while (& sc->chanctx[1UL] >= ctx) {
    {
      #line 169 
      void *__mptr;
      #line 166 
      if (! ctx->active) 
                         #line 167 
                         goto __Cont;
      #line 169 
      __mptr = (void *)ctx->vifs.next;
      #line 169 
      avp = ((struct ath_vif *)__mptr);
      #line 169 
      while (& avp->list != & ctx->vifs) {
        #line 169 
        void *__mptr_0;
        {
          #line 170 
          vif = avp->vif;
          #line 172 
          if (ieee80211_vif_type_p2p(vif) == (unsigned int)NL80211_IFTYPE_P2P_GO) {
            #line 173 
            cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
            #line 174 
            return ctx;
          }
        }
        #line 169 
        __mptr_0 = (void *)avp->list.next;
        #line 169 
        avp = ((struct ath_vif *)__mptr_0);
      }
    }
    #line 165 
    __Cont: 
            #line 165 
    ctx ++;
  }
  #line 179 
  cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
  #line 180 
  return (struct ath_chanctx *)0;
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static char *offchannel_state_string(enum ath_offchannel_state state)
{
  #line 189 
  switch ((unsigned int)state) {
    #line 190 
    case (unsigned int)0: 
                          #line 190 
    ;
    #line 190 
    return (char *)"ATH_OFFCHANNEL_IDLE";
    #line 191 
    case (unsigned int)1: 
                          #line 191 
    ;
    #line 191 
    return (char *)"ATH_OFFCHANNEL_PROBE_SEND";
    #line 192 
    case (unsigned int)2: 
                          #line 192 
    ;
    #line 192 
    return (char *)"ATH_OFFCHANNEL_PROBE_WAIT";
    #line 193 
    case (unsigned int)3: 
                          #line 193 
    ;
    #line 193 
    return (char *)"ATH_OFFCHANNEL_SUSPEND";
    #line 194 
    case (unsigned int)4: 
                          #line 194 
    ;
    #line 194 
    return (char *)"ATH_OFFCHANNEL_ROC_START";
    #line 195 
    case (unsigned int)5: 
                          #line 195 
    ;
    #line 195 
    return (char *)"ATH_OFFCHANNEL_ROC_WAIT";
    #line 196 
    case (unsigned int)6: 
                          #line 196 
    ;
    #line 196 
    return (char *)"ATH_OFFCHANNEL_ROC_DONE";
    #line 197 
    default: 
             #line 197 
    ;
    #line 198 
    return (char *)"unknown";
  }
}

#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static char *chanctx_event_string(enum ath_chanctx_event ev)
{
  #line 204 
  switch ((unsigned int)ev) {
    #line 205 
    case (unsigned int)0: 
                          #line 205 
    ;
    #line 205 
    return (char *)"ATH_CHANCTX_EVENT_BEACON_PREPARE";
    #line 206 
    case (unsigned int)1: 
                          #line 206 
    ;
    #line 206 
    return (char *)"ATH_CHANCTX_EVENT_BEACON_SENT";
    #line 207 
    case (unsigned int)2: 
                          #line 207 
    ;
    #line 207 
    return (char *)"ATH_CHANCTX_EVENT_TSF_TIMER";
    #line 208 
    case (unsigned int)3: 
                          #line 208 
    ;
    #line 208 
    return (char *)"ATH_CHANCTX_EVENT_BEACON_RECEIVED";
    #line 209 
    case (unsigned int)4: 
                          #line 209 
    ;
    #line 209 
    return (char *)"ATH_CHANCTX_EVENT_AUTHORIZED";
    #line 210 
    case (unsigned int)5: 
                          #line 210 
    ;
    #line 210 
    return (char *)"ATH_CHANCTX_EVENT_SWITCH";
    #line 211 
    case (unsigned int)6: 
                          #line 211 
    ;
    #line 211 
    return (char *)"ATH_CHANCTX_EVENT_ASSIGN";
    #line 212 
    case (unsigned int)7: 
                          #line 212 
    ;
    #line 212 
    return (char *)"ATH_CHANCTX_EVENT_UNASSIGN";
    #line 213 
    case (unsigned int)8: 
                          #line 213 
    ;
    #line 213 
    return (char *)"ATH_CHANCTX_EVENT_CHANGE";
    #line 214 
    case (unsigned int)9: 
                          #line 214 
    ;
    #line 214 
    return (char *)"ATH_CHANCTX_EVENT_ENABLE_MULTICHANNEL";
    #line 215 
    default: 
             #line 215 
    ;
    #line 216 
    return (char *)"unknown";
  }
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static char *chanctx_state_string(enum ath_chanctx_state state)
{
  #line 222 
  switch ((unsigned int)state) {
    #line 223 
    case (unsigned int)0: 
                          #line 223 
    ;
    #line 223 
    return (char *)"ATH_CHANCTX_STATE_IDLE";
    #line 224 
    case (unsigned int)1: 
                          #line 224 
    ;
    #line 224 
    return (char *)"ATH_CHANCTX_STATE_WAIT_FOR_BEACON";
    #line 225 
    case (unsigned int)2: 
                          #line 225 
    ;
    #line 225 
    return (char *)"ATH_CHANCTX_STATE_WAIT_FOR_TIMER";
    #line 226 
    case (unsigned int)3: 
                          #line 226 
    ;
    #line 226 
    return (char *)"ATH_CHANCTX_STATE_SWITCH";
    #line 227 
    case (unsigned int)4: 
                          #line 227 
    ;
    #line 227 
    return (char *)"ATH_CHANCTX_STATE_FORCE_ACTIVE";
    #line 228 
    default: 
             #line 228 
    ;
    #line 229 
    return (char *)"unknown";
  }
}

#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static u32 chanctx_event_delta(struct ath_softc *sc)
{
  #line 235 
  u64 ms;
  #line 236 
  struct timespec64 ts;
  #line 236 
  struct timespec64 *old;
  #line 238 
  ktime_get_raw_ts64(& ts);
  #line 239 
  old = & sc->last_event_time;
  #line 240 
  ms = (unsigned long long)(ts.tv_sec * 1000LL + (long long)(ts.tv_nsec / 1000000L));
  #line 241 
  ms -= (unsigned long long)(old->tv_sec * 1000LL + (long long)(old->tv_nsec / 1000000L));
  #line 242 
  sc->last_event_time = ts;
  #line 244 
  return (unsigned int)ms;
}

#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath_chanctx_check_active(struct ath_softc *sc, struct ath_chanctx *ctx)
{
  #line 280 
  void *__mptr;
  #line 250 
  struct ath_chanctx *ictx;
  #line 251 
  struct ath_vif *avp;
  #line 249 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 252 
  bool active = (_Bool)0;
  #line 253 
  u8 n_active = (unsigned char)0U;
  #line 255 
  if (ctx == (struct ath_chanctx *)0) 
                                      #line 256 
                                      return;
  #line 258 
  if (& sc->offchannel.chan == ctx) {
    #line 259 
    cif_spin_lock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
    #line 261 
    if ((long)(sc->sched.channel_switch_time != 0U) != 0L) {
      #line 262 
      ctx->flush_timeout = (int)usecs_to_jiffies(sc->sched.channel_switch_time);
    }
    else {
      #line 265 
      ctx->flush_timeout = (int)msecs_to_jiffies(10U);
    }
    #line 268 
    cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
    #line 275 
    return;
  }
  #line 278 
  ictx = ctx;
  #line 280 
  __mptr = (void *)ctx->vifs.next;
  #line 280 
  avp = ((struct ath_vif *)__mptr);
  #line 280 
  while (& avp->list != & ctx->vifs) {
    #line 280 
    void *__mptr_0;
    {
      #line 281 
      struct ieee80211_vif *vif = avp->vif;
      #line 283 
      switch ((unsigned int)vif->type) {
        #line 284 
        case (unsigned int)8: 
                              #line 284 
        ;
        #line 285 
        case (unsigned int)2: 
                              #line 285 
        ;
        #line 286 
        if ((int)avp->assoc != 0) 
                                  #line 287 
                                  active = (_Bool)1;
        #line 288 
        break;
        #line 289 
        default: 
                 #line 289 
        ;
        #line 290 
        active = (_Bool)1;
        #line 291 
        break;
      }
    }
    #line 280 
    __mptr_0 = (void *)avp->list.next;
    #line 280 
    avp = ((struct ath_vif *)__mptr_0);
  }
  #line 294 
  ctx->active = active;
  #line 296 
  ctx = & sc->chanctx[0];
  #line 296 
  while (& sc->chanctx[1UL] >= ctx) {
    #line 297 
    if (! ctx->assigned) 
                         #line 298 
                         goto __Cont;
    else {
      #line 297 
      if (list_empty_3(& ctx->vifs) != 0) 
                                          #line 298 
                                          goto __Cont;
    }
    #line 299 
    n_active = (u8)((int)n_active + 1);
    #line 296 
    __Cont: 
            #line 296 
    ctx ++;
  }
  #line 302 
  cif_spin_lock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
  #line 304 
  if ((unsigned int)n_active <= 1U) {
    #line 305 
    ictx->flush_timeout = 50;
    #line 306 
    cif_clear_bit_2(6L,& common->op_flags);
    #line 307 
    cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
    #line 308 
    return;
  }
  #line 311 
  ictx->flush_timeout = (int)usecs_to_jiffies(sc->sched.channel_switch_time);
  #line 313 
  if ((int)test_and_set_bit(6L,& common->op_flags) != 0) {
    #line 314 
    cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
    #line 315 
    return;
  }
  #line 318 
  cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
  #line 320 
  if ((int)ath9k_is_chanctx_enabled() != 0) 
                                            #line 321 
                                            ath_chanctx_event(sc,(struct ieee80211_vif *)0,(enum ath_chanctx_event)ATH_CHANCTX_EVENT_ENABLE_MULTICHANNEL);
  #line 322 
  return;
}

#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static struct ath_chanctx *ath_chanctx_get_next(struct ath_softc *sc, struct ath_chanctx *ctx)
{
  #line 329 
  int idx = (int)((ctx - & sc->chanctx[0]) / 1360L);
  #line 331 
  return & sc->chanctx[idx == 0];
}

#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath_chanctx_adjust_tbtt_delta(struct ath_softc *sc)
{
  #line 336 
  struct ath_chanctx *prev;
  #line 336 
  struct ath_chanctx *cur;
  #line 337 
  struct timespec64 ts;
  #line 338 
  u32 cur_tsf;
  #line 338 
  u32 prev_tsf;
  #line 338 
  u32 beacon_int;
  #line 339 
  s32 offset;
  #line 341 
  beacon_int = (unsigned int)((sc->cur_chan)->beacon.beacon_interval << 10);
  #line 343 
  cur = sc->cur_chan;
  #line 344 
  prev = ath_chanctx_get_next(sc,cur);
  #line 346 
  if (! prev->switch_after_beacon) 
                                   #line 347 
                                   return;
  #line 349 
  ktime_get_raw_ts64(& ts);
  #line 350 
  cur_tsf = (unsigned int)cur->tsf_val + ath9k_hw_get_tsf_offset(& cur->tsf_ts,& ts);
  #line 353 
  prev_tsf = (prev->last_beacon - (unsigned int)prev->tsf_val) + cur_tsf;
  #line 354 
  prev_tsf -= ath9k_hw_get_tsf_offset(& prev->tsf_ts,& ts);
  #line 359 
  offset = (int)(cur_tsf - prev_tsf);
  #line 362 
  if (offset < 0 || beacon_int * 3U < (unsigned int)offset) 
                                                            #line 363 
                                                            return;
  #line 365 
  offset = (int)(beacon_int / 2U - (unsigned int)offset % beacon_int);
  #line 366 
  prev->tsf_val += (unsigned long long)offset;
  #line 367 
  return;
}

#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath_chanctx_setup_timer(struct ath_softc *sc, u32 tsf_time)
{
  #line 377 
  unsigned long timeout;
  #line 375 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 376 
  struct ath_hw *ah = sc->sc_ah;
  #line 379 
  ath9k_hw_gen_timer_start(ah,sc->p2p_ps_timer,tsf_time,1000000U);
  #line 380 
  tsf_time -= ath9k_hw_gettsf32(ah);
  #line 381 
  timeout = msecs_to_jiffies(tsf_time / 1000U) + 1UL;
  #line 382 
  cif_mod_timer_2(& sc->sched.timer,jiffies + timeout);
  #line 384 
  if ((common->debug_mask & 262144) != 0) {
    #line 384 
    ;
    #line 384 
    ;
    #line 384 
    ath_printk((char *)"\001",common,(char *)"Setup chanctx timer with timeout: %d (%d) ms\n",tsf_time / 1000U,jiffies_to_msecs(timeout));
  }
  #line 385 
  return;
}

#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath_chanctx_handle_bmiss(struct ath_softc *sc, struct ath_chanctx *ctx, struct ath_vif *avp)
{
  #line 399 
  if ((int)ctx->active != 0 && (int)sc->sched.extend_absence != 0) {
    #line 400 
    avp->noa_duration = 0U;
    #line 401 
    sc->sched.extend_absence = (_Bool)0;
  }
  #line 408 
  if ((int)ctx->active != 0 && (unsigned int)sc->sched.beacon_miss > 1U) {
    #line 409 
    avp->noa_duration = 0U;
    #line 410 
    sc->sched.extend_absence = (_Bool)1;
  }
  #line 412 
  return;
}

#line 414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath_chanctx_offchannel_noa(struct ath_softc *sc, struct ath_chanctx *ctx, struct ath_vif *avp, u32 tsf_time)
{
  #line 419 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 421 
  avp->noa_index = (u8)((int)avp->noa_index + 1);
  #line 422 
  avp->offchannel_start = tsf_time;
  #line 423 
  avp->offchannel_duration = sc->sched.offchannel_duration;
  #line 425 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 425 
                                          ath_printk((char *)"\001",common,(char *)"offchannel noa_duration: %d, noa_start: %u, noa_index: %d\n",avp->offchannel_duration,avp->offchannel_start,(int)avp->noa_index);
  #line 436 
  if ((int)ctx->active != 0 && avp->noa_duration != 0U) 
                                                        #line 437 
                                                        avp->noa_duration = 0U;
  #line 438 
  return;
}

#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath_chanctx_set_periodic_noa(struct ath_softc *sc, struct ath_vif *avp, struct ath_beacon_config *cur_conf, u32 tsf_time, u32 beacon_int)
{
  #line 446 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 448 
  avp->noa_index = (u8)((int)avp->noa_index + 1);
  #line 449 
  avp->noa_start = tsf_time;
  #line 451 
  if ((int)sc->sched.extend_absence != 0) 
                                          #line 452 
                                          avp->noa_duration = (beacon_int * 3U) / 2U + sc->sched.channel_switch_time; else 
                                                                    #line 455 
                                                                    avp->noa_duration = (unsigned int)((cur_conf->beacon_interval << 10) / 2) + sc->sched.channel_switch_time;
  #line 459 
  if ((int)test_bit(5L,& common->op_flags) != 0) 
                                                 #line 459 
                                                 goto _LOR;
  else 
    #line 459 
    if ((int)sc->sched.extend_absence != 0) 
                                            #line 459 
                                            _LOR: 
                                                  #line 461 
                                                  avp->periodic_noa = (_Bool)0; else 
                                                                    #line 463 
                                                                    avp->periodic_noa = (_Bool)1;
  #line 465 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 465 
                                          ath_printk((char *)"\001",common,(char *)"noa_duration: %d, noa_start: %u, noa_index: %d, periodic: %d\n",avp->noa_duration,avp->noa_start,(int)avp->noa_index,(int)avp->periodic_noa);
  #line 466 
  return;
}

#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath_chanctx_set_oneshot_noa(struct ath_softc *sc, struct ath_vif *avp, u32 tsf_time, u32 duration)
{
  #line 478 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 480 
  avp->noa_index = (u8)((int)avp->noa_index + 1);
  #line 481 
  avp->noa_start = tsf_time;
  #line 482 
  avp->periodic_noa = (_Bool)0;
  #line 483 
  avp->oneshot_noa = (_Bool)1;
  #line 484 
  avp->noa_duration = sc->sched.channel_switch_time + duration;
  #line 486 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 486 
                                          ath_printk((char *)"\001",common,(char *)"oneshot noa_duration: %d, noa_start: %u, noa_index: %d, periodic: %d\n",avp->noa_duration,avp->noa_start,(int)avp->noa_index,(int)avp->periodic_noa);
  #line 487 
  return;
}

#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath_chanctx_event(struct ath_softc *sc, struct ieee80211_vif *vif, enum ath_chanctx_event ev)
{
  #line 499 
  struct ath_beacon_config *cur_conf;
  #line 501 
  struct ath_chanctx *ctx;
  #line 502 
  u32 tsf_time;
  #line 503 
  u32 beacon_int;
  #line 497 
  struct ath_hw *ah = sc->sc_ah;
  #line 498 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 500 
  struct ath_vif *avp = (struct ath_vif *)0;
  #line 505 
  if (vif != (struct ieee80211_vif *)0) 
                                        #line 506 
                                        avp = (struct ath_vif *)(& vif->drv_priv);
  #line 508 
  cif_spin_lock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
  #line 510 
  if ((common->debug_mask & 262144) != 0) {
    #line 510 
    ;
    #line 510 
    ;
    #line 510 
    ath_printk((char *)"\001",common,(char *)"cur_chan: %d MHz, event: %s, state: %s, delta: %u ms\n",(sc->cur_chan)->chandef.center_freq1,chanctx_event_string(ev),chanctx_state_string(sc->sched.state),chanctx_event_delta(sc));
  }
  #line 516 
  switch ((unsigned int)ev) {
    #line 517 
    case (unsigned int)0: 
                          #line 517 
    ;
    #line 518 
    if (avp->offchannel_duration != 0U) 
                                        #line 519 
                                        avp->offchannel_duration = 0U;
    #line 521 
    if ((int)avp->oneshot_noa != 0) {
      #line 522 
      avp->noa_duration = 0U;
      #line 523 
      avp->oneshot_noa = (_Bool)0;
      #line 525 
      if ((common->debug_mask & 262144) != 0) 
                                              #line 525 
                                              ath_printk((char *)"\001",common,(char *)"Clearing oneshot NoA\n");
    }
    #line 529 
    if (avp->chanctx != sc->cur_chan) {
      #line 530 
      if ((common->debug_mask & 262144) != 0) 
                                              #line 530 
                                              ath_printk((char *)"\001",common,(char *)"Contexts differ, not preparing beacon\n");
      #line 532 
      break;
    }
    #line 535 
    if ((int)sc->sched.offchannel_pending != 0 && ! sc->sched.wait_switch) {
      #line 536 
      sc->sched.offchannel_pending = (_Bool)0;
      #line 537 
      sc->next_chan = & sc->offchannel.chan;
      #line 538 
      sc->sched.state = ATH_CHANCTX_STATE_WAIT_FOR_BEACON;
      #line 539 
      if ((common->debug_mask & 262144) != 0) 
                                              #line 539 
                                              ath_printk((char *)"\001",common,(char *)"Setting offchannel_pending to false\n");
    }
    #line 543 
    ctx = ath_chanctx_get_next(sc,sc->cur_chan);
    #line 544 
    if ((int)ctx->active != 0 && sc->sched.state == (unsigned int)ATH_CHANCTX_STATE_IDLE) {
      #line 545 
      sc->next_chan = ctx;
      #line 546 
      sc->sched.state = ATH_CHANCTX_STATE_WAIT_FOR_BEACON;
      #line 547 
      if ((common->debug_mask & 262144) != 0) 
                                              #line 547 
                                              ath_printk((char *)"\001",common,(char *)"Set next context, move chanctx state to WAIT_FOR_BEACON\n");
    }
    #line 552 
    if (sc->sched.state == (unsigned int)ATH_CHANCTX_STATE_WAIT_FOR_TIMER) {
      #line 553 
      sc->sched.state = ATH_CHANCTX_STATE_WAIT_FOR_BEACON;
      #line 554 
      if ((common->debug_mask & 262144) != 0) 
                                              #line 554 
                                              ath_printk((char *)"\001",common,(char *)"Move chanctx state from WAIT_FOR_TIMER to WAIT_FOR_BEACON\n");
    }
    #line 558 
    if ((int)sc->sched.mgd_prepare_tx != 0) 
                                            #line 559 
                                            sc->sched.state = ATH_CHANCTX_STATE_WAIT_FOR_BEACON;
    #line 567 
    if ((! ctx->active && avp->noa_duration != 0U) && sc->sched.state != (unsigned int)ATH_CHANCTX_STATE_WAIT_FOR_BEACON) {
      #line 569 
      avp->noa_duration = 0U;
      #line 570 
      avp->periodic_noa = (_Bool)0;
      #line 572 
      if ((common->debug_mask & 262144) != 0) 
                                              #line 572 
                                              ath_printk((char *)"\001",common,(char *)"Clearing NoA schedule\n");
    }
    #line 576 
    if (sc->sched.state != (unsigned int)ATH_CHANCTX_STATE_WAIT_FOR_BEACON) 
      #line 577 
      break;
    #line 579 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 579 
                                            ath_printk((char *)"\001",common,(char *)"Preparing beacon for vif: %pM\n",(u8 *)(& vif->addr));
    #line 581 
    sc->sched.beacon_pending = (_Bool)1;
    #line 582 
    sc->sched.next_tbtt = (*(ah->reg_ops.read))((void *)ah,33280U);
    #line 584 
    cur_conf = & (sc->cur_chan)->beacon;
    #line 585 
    beacon_int = (unsigned int)(cur_conf->beacon_interval << 10);
    #line 588 
    tsf_time = sc->sched.next_tbtt + beacon_int / 4U;
    #line 589 
    sc->sched.switch_start_time = tsf_time;
    #line 590 
    (sc->cur_chan)->last_beacon = sc->sched.next_tbtt;
    #line 597 
    if (sc->next_chan == & sc->offchannel.chan) {
      #line 598 
      ath_chanctx_offchannel_noa(sc,ctx,avp,tsf_time);
      #line 599 
      break;
    }
    #line 602 
    ath_chanctx_handle_bmiss(sc,ctx,avp);
    #line 610 
    if ((int)sc->sched.mgd_prepare_tx != 0) {
      #line 611 
      ;
      #line 611 
      ;
      #line 611 
      ;
      #line 611 
      ath_chanctx_set_oneshot_noa(sc,avp,tsf_time,jiffies_to_usecs(50UL));
      #line 613 
      break;
    }
    #line 617 
    if (avp->noa_duration != 0U && tsf_time - avp->noa_start > 1073741824U) 
      #line 618 
      avp->noa_duration = 0U;
    #line 625 
    if ((int)ctx->active != 0 && (avp->noa_duration == 0U || (int)sc->sched.force_noa_update != 0)) 
      #line 627 
      ath_chanctx_set_periodic_noa(sc,avp,cur_conf,tsf_time,beacon_int);
    #line 630 
    if ((int)ctx->active != 0 && (int)sc->sched.force_noa_update != 0) 
      #line 631 
      sc->sched.force_noa_update = (_Bool)0;
    #line 633 
    break;
    #line 634 
    case (unsigned int)1: 
                          #line 634 
    ;
    #line 635 
    if (! sc->sched.beacon_pending) {
      #line 636 
      if ((common->debug_mask & 262144) != 0) 
                                              #line 636 
                                              ath_printk((char *)"\001",common,(char *)"No pending beacon\n");
      #line 638 
      break;
    }
    #line 641 
    sc->sched.beacon_pending = (_Bool)0;
    #line 643 
    if ((int)sc->sched.mgd_prepare_tx != 0) {
      #line 644 
      sc->sched.mgd_prepare_tx = (_Bool)0;
      #line 645 
      complete(& sc->go_beacon);
      #line 646 
      if ((common->debug_mask & 262144) != 0) 
                                              #line 646 
                                              ath_printk((char *)"\001",common,(char *)"Beacon sent, complete go_beacon\n");
      #line 648 
      break;
    }
    #line 651 
    if (sc->sched.state != (unsigned int)ATH_CHANCTX_STATE_WAIT_FOR_BEACON) 
      #line 652 
      break;
    #line 654 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 654 
                                            ath_printk((char *)"\001",common,(char *)"Move chanctx state to WAIT_FOR_TIMER\n");
    #line 657 
    sc->sched.state = ATH_CHANCTX_STATE_WAIT_FOR_TIMER;
    #line 658 
    ath_chanctx_setup_timer(sc,sc->sched.switch_start_time);
    #line 659 
    break;
    #line 660 
    case (unsigned int)2: 
                          #line 660 
    ;
    #line 661 
    if (sc->sched.state != (unsigned int)ATH_CHANCTX_STATE_WAIT_FOR_TIMER) 
      #line 662 
      break;
    #line 664 
    if (! (sc->cur_chan)->switch_after_beacon && (int)sc->sched.beacon_pending != 0) 
      #line 666 
      sc->sched.beacon_miss = (u8)((int)sc->sched.beacon_miss + 1);
    #line 668 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 668 
                                            ath_printk((char *)"\001",common,(char *)"Move chanctx state to SWITCH\n");
    #line 671 
    sc->sched.state = ATH_CHANCTX_STATE_SWITCH;
    #line 672 
    ieee80211_queue_work(sc->hw,& sc->chanctx_work);
    #line 673 
    break;
    #line 674 
    case (unsigned int)3: 
                          #line 674 
    ;
    #line 675 
    if (test_bit(6L,& common->op_flags)) {
      #line 675 
      if (sc->cur_chan == & sc->offchannel.chan) 
                                                 #line 677 
                                                 break;
    }
    else 
         #line 677 
         break;
    #line 679 
    sc->sched.beacon_pending = (_Bool)0;
    #line 680 
    sc->sched.beacon_miss = (unsigned char)0U;
    #line 682 
    if ((sc->sched.state == (unsigned int)ATH_CHANCTX_STATE_FORCE_ACTIVE || ! sc->sched.beacon_adjust) || (sc->cur_chan)->tsf_val == 0ULL) 
      #line 685 
      break;
    #line 687 
    ath_chanctx_adjust_tbtt_delta(sc);
    #line 692 
    tsf_time = sc->sched.switch_start_time;
    #line 694 
    tsf_time -= (unsigned int)(sc->cur_chan)->tsf_val + ath9k_hw_get_tsf_offset(& (sc->cur_chan)->tsf_ts,
                                (struct timespec64 *)0);
    #line 695 
    tsf_time = ath9k_hw_gettsf32(ah) + tsf_time;
    #line 697 
    sc->sched.beacon_adjust = (_Bool)0;
    #line 698 
    ath_chanctx_setup_timer(sc,tsf_time);
    #line 699 
    break;
    #line 700 
    case (unsigned int)4: 
                          #line 700 
    ;
    #line 701 
    if (sc->sched.state != (unsigned int)ATH_CHANCTX_STATE_FORCE_ACTIVE || avp->chanctx != sc->cur_chan) 
      #line 703 
      break;
    #line 705 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 705 
                                            ath_printk((char *)"\001",common,(char *)"Move chanctx state from FORCE_ACTIVE to IDLE\n");
    #line 708 
    sc->sched.state = ATH_CHANCTX_STATE_IDLE;
    #line 710 
    case (unsigned int)5: 
                          #line 710 
    ;
    #line 711 
    if (test_bit(6L,& common->op_flags)) {
      #line 711 
      if (sc->sched.state == (unsigned int)ATH_CHANCTX_STATE_FORCE_ACTIVE) 
        #line 715 
        break;
      else 
        #line 712 
        if ((int)(sc->cur_chan)->switch_after_beacon != 0) 
                                                           #line 715 
                                                           break;
        else 
          #line 713 
          if (sc->cur_chan == & sc->offchannel.chan) 
                                                     #line 715 
                                                     break;
    }
    else 
         #line 715 
         break;
    #line 720 
    sc->next_chan = ath_chanctx_get_next(sc,sc->cur_chan);
    #line 721 
    cur_conf = & (sc->cur_chan)->beacon;
    #line 723 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 723 
                                            ath_printk((char *)"\001",common,(char *)"Move chanctx state to WAIT_FOR_TIMER (event SWITCH)\n");
    #line 726 
    sc->sched.state = ATH_CHANCTX_STATE_WAIT_FOR_TIMER;
    #line 727 
    sc->sched.wait_switch = (_Bool)0;
    #line 729 
    tsf_time = (unsigned int)((cur_conf->beacon_interval << 10) / 2);
    #line 731 
    if ((int)sc->sched.extend_absence != 0) {
      #line 732 
      sc->sched.beacon_miss = (unsigned char)0U;
      #line 733 
      tsf_time *= 3U;
    }
    #line 736 
    tsf_time -= sc->sched.channel_switch_time;
    #line 737 
    tsf_time = ath9k_hw_gettsf32(sc->sc_ah) + tsf_time;
    #line 738 
    sc->sched.switch_start_time = tsf_time;
    #line 740 
    ath_chanctx_setup_timer(sc,tsf_time);
    #line 741 
    sc->sched.beacon_pending = (_Bool)1;
    #line 742 
    sc->sched.beacon_adjust = (_Bool)1;
    #line 743 
    break;
    #line 744 
    case (unsigned int)9: 
                          #line 744 
    ;
    #line 745 
    if (sc->cur_chan == & sc->offchannel.chan || (int)(sc->cur_chan)->switch_after_beacon != 0) 
      #line 747 
      break;
    #line 749 
    sc->next_chan = ath_chanctx_get_next(sc,sc->cur_chan);
    #line 750 
    ieee80211_queue_work(sc->hw,& sc->chanctx_work);
    #line 751 
    break;
    #line 752 
    case (unsigned int)7: 
                          #line 752 
    ;
    #line 753 
    if ((int)(sc->cur_chan)->assigned != 0) {
      #line 754 
      if ((sc->next_chan != (struct ath_chanctx *)0 && ! (sc->next_chan)->assigned) && sc->next_chan != & sc->offchannel.chan) 
        #line 756 
        sc->sched.state = ATH_CHANCTX_STATE_IDLE;
      #line 757 
      break;
    }
    #line 760 
    ctx = ath_chanctx_get_next(sc,sc->cur_chan);
    #line 761 
    sc->sched.state = ATH_CHANCTX_STATE_IDLE;
    #line 762 
    if (! ctx->assigned) 
                         #line 763 
                         break;
    #line 765 
    sc->next_chan = ctx;
    #line 766 
    ieee80211_queue_work(sc->hw,& sc->chanctx_work);
    #line 767 
    break;
    #line 768 
    case (unsigned int)6: 
                          #line 768 
    ;
    #line 769 
    break;
    #line 770 
    case (unsigned int)8: 
                          #line 770 
    ;
    #line 771 
    break;
  }
  #line 774 
  cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
  #line 775 
  return;
}

#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath_chanctx_beacon_sent_ev(struct ath_softc *sc, enum ath_chanctx_event ev)
{
  #line 780 
  if ((int)sc->sched.beacon_pending != 0) 
                                          #line 781 
                                          ath_chanctx_event(sc,(struct ieee80211_vif *)0,ev);
  #line 782 
  return;
}

#line 784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath_chanctx_beacon_recv_ev(struct ath_softc *sc, enum ath_chanctx_event ev)
{
  #line 787 
  ath_chanctx_event(sc,(struct ieee80211_vif *)0,ev);
  #line 788 
  return;
}

#line 790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static int ath_scan_channel_duration(struct ath_softc *sc, struct ieee80211_channel *chan)
{
  #line 793 
  struct cfg80211_scan_request *req = sc->offchannel.scan_req;
  #line 795 
  if (req->n_ssids == 0 || (chan->flags & 2U) != 0U) 
                                                     #line 796 
                                                     return 27;
  #line 798 
  return 15;
}

#line 801  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath_chanctx_switch(struct ath_softc *sc, struct ath_chanctx *ctx, struct cfg80211_chan_def *chandef)
{
  #line 804 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 806 
  cif_spin_lock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
  #line 808 
  if ((int)test_bit(6L,& common->op_flags) != 0) 
    #line 808 
    if (sc->cur_chan != ctx) 
      #line 809 
      if (& sc->offchannel.chan == ctx) {
        #line 810 
        if (chandef != (struct cfg80211_chan_def *)0) 
                                                      #line 811 
                                                      ctx->chandef = *chandef;
        #line 813 
        sc->sched.offchannel_pending = (_Bool)1;
        #line 814 
        sc->sched.wait_switch = (_Bool)1;
        #line 815 
        sc->sched.offchannel_duration = jiffies_to_usecs((unsigned long)sc->offchannel.duration) + sc->sched.channel_switch_time;
        #line 819 
        cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
        #line 820 
        if ((common->debug_mask & 262144) != 0) 
                                                #line 820 
                                                ath_printk((char *)"\001",common,(char *)"Set offchannel_pending to true\n");
        #line 822 
        return;
      }
  #line 825 
  sc->next_chan = ctx;
  #line 826 
  if (chandef != (struct cfg80211_chan_def *)0) {
    #line 827 
    ctx->chandef = *chandef;
    #line 828 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 828 
                                            ath_printk((char *)"\001",common,(char *)"Assigned next_chan to %d MHz\n",chandef->center_freq1);
  }
  #line 832 
  if (sc->next_chan == & sc->offchannel.chan) {
    #line 833 
    sc->sched.offchannel_duration = jiffies_to_usecs((unsigned long)sc->offchannel.duration) + sc->sched.channel_switch_time;
    #line 837 
    if (chandef != (struct cfg80211_chan_def *)0) 
      #line 838 
      if ((common->debug_mask & 262144) != 0) 
                                              #line 838 
                                              ath_printk((char *)"\001",common,(char *)"Offchannel duration for chan %d MHz : %u\n",chandef->center_freq1,sc->sched.offchannel_duration);
  }
  #line 844 
  cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
  #line 845 
  ieee80211_queue_work(sc->hw,& sc->chanctx_work);
  #line 846 
  return;
}

#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath_chanctx_offchan_switch(struct ath_softc *sc, struct ieee80211_channel *chan)
{
  #line 852 
  struct cfg80211_chan_def chandef;
  #line 851 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 854 
  cfg80211_chandef_create(& chandef,chan,(enum nl80211_channel_type)NL80211_CHAN_NO_HT);
  #line 855 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 855 
                                          ath_printk((char *)"\001",common,(char *)"Channel definition created: %d MHz\n",chandef.center_freq1);
  #line 858 
  ath_chanctx_switch(sc,& sc->offchannel.chan,& chandef);
  #line 859 
  return;
}

#line 861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static struct ath_chanctx *ath_chanctx_get_oper_chan(struct ath_softc *sc, bool active)
{
  #line 864 
  struct ath_chanctx *ctx;
  #line 866 
  ctx = & sc->chanctx[0];
  #line 866 
  while (& sc->chanctx[1UL] >= ctx) {
    #line 867 
    if (! ctx->assigned) 
                         #line 868 
                         goto __Cont;
    else {
      #line 867 
      if (list_empty_3(& ctx->vifs) != 0) 
                                          #line 868 
                                          goto __Cont;
    }
    #line 869 
    if ((int)active != 0 && ! ctx->active) 
                                           #line 870 
                                           goto __Cont;
    #line 872 
    if ((int)ctx->switch_after_beacon != 0) 
                                            #line 873 
                                            return ctx;
    #line 866 
    __Cont: 
            #line 866 
    ctx ++;
  }
  #line 876 
  return & sc->chanctx[0];
}

#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath_scan_next_channel(struct ath_softc *sc)
{
  #line 884 
  struct ieee80211_channel *chan;
  #line 903 
  int tmp_1;
  #line 882 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 883 
  struct cfg80211_scan_request *req = sc->offchannel.scan_req;
  #line 886 
  if ((unsigned int)sc->offchannel.scan_idx >= req->n_channels) {
    #line 887 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 887 
                                            ath_printk((char *)"\001",common,(char *)"Moving offchannel state to ATH_OFFCHANNEL_IDLE, ",sc->offchannel.scan_idx,req->n_channels);
    #line 893 
    sc->offchannel.state = ATH_OFFCHANNEL_IDLE;
    #line 894 
    ;
    #line 894 
    ath_chanctx_switch(sc,ath_chanctx_get_oper_chan(sc,(_Bool)0),(struct cfg80211_chan_def *)0);
    #line 896 
    return;
  }
  #line 899 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 899 
                                          ath_printk((char *)"\001",common,(char *)"Moving offchannel state to ATH_OFFCHANNEL_PROBE_SEND, scan_idx: %d\n",sc->offchannel.scan_idx);
  #line 903 
  tmp_1 = sc->offchannel.scan_idx;
  #line 903 
  (sc->offchannel.scan_idx) ++;
  #line 903 
  chan = req->channels[tmp_1];
  #line 904 
  sc->offchannel.duration = ath_scan_channel_duration(sc,chan);
  #line 905 
  sc->offchannel.state = ATH_OFFCHANNEL_PROBE_SEND;
  #line 907 
  ath_chanctx_offchan_switch(sc,chan);
  #line 908 
  return;
}

#line 910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath_offchannel_next(struct ath_softc *sc)
{
  #line 912 
  struct ieee80211_vif *vif;
  #line 914 
  if (sc->offchannel.scan_req != (struct cfg80211_scan_request *)0) {
    #line 915 
    vif = sc->offchannel.scan_vif;
    #line 916 
    sc->offchannel.chan.txpower = (unsigned short)vif->bss_conf.txpower;
    #line 917 
    ath_scan_next_channel(sc);
  }
  else 
    #line 918 
    if (sc->offchannel.roc_vif != (struct ieee80211_vif *)0) {
      #line 919 
      vif = sc->offchannel.roc_vif;
      #line 920 
      sc->offchannel.chan.txpower = (unsigned short)vif->bss_conf.txpower;
      #line 921 
      sc->offchannel.duration = (int)msecs_to_jiffies((unsigned int)sc->offchannel.roc_duration);
      #line 923 
      sc->offchannel.state = ATH_OFFCHANNEL_ROC_START;
      #line 924 
      ath_chanctx_offchan_switch(sc,sc->offchannel.roc_chan);
    }
    else {
      #line 926 
      cif_spin_lock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
      #line 927 
      sc->sched.offchannel_pending = (_Bool)0;
      #line 928 
      sc->sched.wait_switch = (_Bool)0;
      #line 929 
      cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
      #line 931 
      ;
      #line 931 
      ath_chanctx_switch(sc,ath_chanctx_get_oper_chan(sc,(_Bool)0),(struct cfg80211_chan_def *)0);
      #line 933 
      sc->offchannel.state = ATH_OFFCHANNEL_IDLE;
      #line 934 
      if ((int)sc->ps_idle != 0) 
                                 #line 935 
                                 ath_cancel_work(sc);
    }
  #line 937 
  return;
}

#line 939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath_roc_complete(struct ath_softc *sc, enum ath_roc_complete_reason reason)
{
  #line 941 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 943 
  sc->offchannel.roc_vif = (struct ieee80211_vif *)0;
  #line 944 
  sc->offchannel.roc_chan = (struct ieee80211_channel *)0;
  #line 946 
  switch ((unsigned int)reason) {
    #line 947 
    case (unsigned int)1: 
                          #line 947 
    ;
    #line 948 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 948 
                                            ath_printk((char *)"\001",common,(char *)"RoC aborted\n");
    #line 949 
    ieee80211_remain_on_channel_expired(sc->hw);
    #line 950 
    break;
    #line 951 
    case (unsigned int)0: 
                          #line 951 
    ;
    #line 952 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 952 
                                            ath_printk((char *)"\001",common,(char *)"RoC expired\n");
    #line 953 
    ieee80211_remain_on_channel_expired(sc->hw);
    #line 954 
    break;
    #line 955 
    case (unsigned int)2: 
                          #line 955 
    ;
    #line 956 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 956 
                                            ath_printk((char *)"\001",common,(char *)"RoC canceled\n");
    #line 957 
    break;
  }
  #line 960 
  ath_offchannel_next(sc);
  #line 961 
  ath9k_ps_restore(sc);
  #line 962 
  return;
}

#line 964  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath_scan_complete(struct ath_softc *sc, bool abort)
{
  #line 966 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 967 
  struct cfg80211_scan_info info = {.scan_start_tsf = 0ULL, .tsf_bssid = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .aborted = abort};
  #line 971 
  if ((int)abort != 0) {
    #line 972 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 972 
                                            ath_printk((char *)"\001",common,(char *)"HW scan aborted\n");
  }
  else 
    #line 974 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 974 
                                            ath_printk((char *)"\001",common,(char *)"HW scan complete\n");
  #line 976 
  sc->offchannel.scan_req = (struct cfg80211_scan_request *)0;
  #line 977 
  sc->offchannel.scan_vif = (struct ieee80211_vif *)0;
  #line 978 
  sc->offchannel.state = ATH_OFFCHANNEL_IDLE;
  #line 979 
  ieee80211_scan_completed(sc->hw,& info);
  #line 980 
  cif_clear_bit_2(5L,& common->op_flags);
  #line 981 
  cif_spin_lock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
  #line 982 
  if ((int)test_bit(6L,& common->op_flags) != 0) 
                                                 #line 983 
                                                 sc->sched.force_noa_update = (_Bool)1;
  #line 984 
  cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
  #line 985 
  ath_offchannel_next(sc);
  #line 986 
  ath9k_ps_restore(sc);
  #line 987 
  return;
}

#line 989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath_scan_send_probe(struct ath_softc *sc, struct cfg80211_ssid *ssid)
{
  #line 995 
  struct sk_buff *skb;
  #line 996 
  struct ieee80211_tx_info *info;
  #line 992 
  struct cfg80211_scan_request *req = sc->offchannel.scan_req;
  #line 993 
  struct ieee80211_vif *vif = sc->offchannel.scan_vif;
  #line 994 
  struct ath_tx_control txctl = {.txq = (struct ath_txq *)0, .an = (struct ath_node *)0, .sta = (struct ieee80211_sta *)0, .paprd = (unsigned char)0};
  #line 997 
  int band = (int)(sc->offchannel.chan.chandef.chan)->band;
  #line 999 
  skb = ieee80211_probereq_get(sc->hw,(u8 *)(& vif->addr),(u8 *)(& ssid->ssid),(unsigned long)ssid->ssid_len,req->ie_len);
  #line 1001 
  if (skb == (struct sk_buff *)0) 
                                  #line 1002 
                                  return;
  #line 1004 
  info = IEEE80211_SKB_CB(skb);
  #line 1005 
  if ((int)req->no_cck != 0) 
                             #line 1006 
                             info->flags |= 134217728U;
  #line 1008 
  if (req->ie_len != 0UL) 
                          #line 1009 
                          skb_put_data(skb,(void *)req->ie,(unsigned int)req->ie_len);
  #line 1011 
  skb_set_queue_mapping(skb,(unsigned short)0);
  #line 1013 
  if (! ieee80211_tx_prepare_skb(sc->hw,vif,skb,band,
                               (struct ieee80211_sta **)0)) 
    #line 1014 
    goto error;
  #line 1016 
  txctl.txq = sc->tx.txq_map[0];
  #line 1017 
  if (ath_tx_start(sc->hw,skb,& txctl) != 0) 
                                             #line 1018 
                                             goto error;
  #line 1020 
  return;
  #line 1022 
  error: 
         #line 1022 
  ;
  #line 1023 
  ieee80211_free_txskb(sc->hw,skb);
  #line 1024 
  return;
}

#line 1026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath_scan_channel_start(struct ath_softc *sc)
{
  #line 1030 
  int i;
  #line 1028 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1029 
  struct cfg80211_scan_request *req = sc->offchannel.scan_req;
  #line 1032 
  if ((((sc->cur_chan)->chandef.chan)->flags & 2U) == 0U && req->n_ssids != 0) {
    #line 1034 
    i = 0;
    #line 1034 
    while (req->n_ssids > i) {
      #line 1035 
      ath_scan_send_probe(sc,req->ssids + (unsigned long)i);
      #line 1034 
      i ++;
    }
  }
  #line 1039 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 1039 
                                          ath_printk((char *)"\001",common,(char *)"Moving offchannel state to ATH_OFFCHANNEL_PROBE_WAIT\n");
  #line 1042 
  sc->offchannel.state = ATH_OFFCHANNEL_PROBE_WAIT;
  #line 1043 
  cif_mod_timer_2(& sc->offchannel.timer,(unsigned long)sc->offchannel.duration + jiffies);
  #line 1044 
  return;
}

#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath_chanctx_timer(struct timer_list *t)
{
  #line 1048 
  void *__mptr;
  #line 1048 
  __mptr = (void *)t;
  #line 1048 
  struct ath_softc *sc = ((struct ath_softc *)(__mptr + 18446744073709547832U));
  #line 1049 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1051 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 1051 
                                          ath_printk((char *)"\001",common,(char *)"Channel context timer invoked\n");
  #line 1054 
  ath_chanctx_event(sc,(struct ieee80211_vif *)0,(enum ath_chanctx_event)ATH_CHANCTX_EVENT_TSF_TIMER);
  #line 1055 
  return;
}

#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath_offchannel_timer(struct timer_list *t)
{
  #line 1059 
  void *__mptr;
  #line 1060 
  struct ath_chanctx *ctx;
  #line 1059 
  __mptr = (void *)t;
  #line 1059 
  struct ath_softc *sc = ((struct ath_softc *)(__mptr + 18446744073709546384U));
  #line 1061 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1063 
  if ((common->debug_mask & 262144) != 0) {
    #line 1063 
    ;
    #line 1063 
    ath_printk((char *)"\001",common,(char *)"%s: offchannel state: %s\n",(char *)"ath_offchannel_timer",offchannel_state_string(sc->offchannel.state));
  }
  #line 1066 
  switch ((unsigned int)sc->offchannel.state) {
    #line 1067 
    case (unsigned int)2: 
                          #line 1067 
    ;
    #line 1068 
    if (sc->offchannel.scan_req == (struct cfg80211_scan_request *)0) 
      #line 1069 
      return;
    #line 1072 
    ctx = ath_chanctx_get_oper_chan(sc,(_Bool)1);
    #line 1073 
    if ((int)ctx->active != 0) {
      #line 1074 
      if ((common->debug_mask & 262144) != 0) 
                                              #line 1074 
                                              ath_printk((char *)"\001",common,(char *)"Switch to oper/active context, ");
      #line 1078 
      sc->offchannel.state = ATH_OFFCHANNEL_SUSPEND;
      #line 1079 
      ath_chanctx_switch(sc,ctx,(struct cfg80211_chan_def *)0);
      #line 1080 
      cif_mod_timer_2(& sc->offchannel.timer,jiffies + 25UL);
      #line 1081 
      break;
    }
    #line 1084 
    case (unsigned int)3: 
                          #line 1084 
    ;
    #line 1085 
    if (sc->offchannel.scan_req == (struct cfg80211_scan_request *)0) 
      #line 1086 
      return;
    #line 1088 
    ath_scan_next_channel(sc);
    #line 1089 
    break;
    #line 1090 
    case (unsigned int)4: 
                          #line 1090 
    ;
    #line 1091 
    case (unsigned int)5: 
                          #line 1091 
    ;
    #line 1092 
    sc->offchannel.state = ATH_OFFCHANNEL_ROC_DONE;
    #line 1093 
    ath_roc_complete(sc,(enum ath_roc_complete_reason)ATH_ROC_COMPLETE_EXPIRE);
    #line 1094 
    break;
    #line 1095 
    default: 
             #line 1095 
    ;
    #line 1096 
    break;
  }
  #line 1098 
  return;
}

#line 1101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static bool ath_chanctx_send_vif_ps_frame(struct ath_softc *sc, struct ath_vif *avp, bool powersave)
{
  #line 1106 
  struct ieee80211_hdr_3addr *nullfunc;
  #line 1107 
  struct ath_tx_control txctl;
  #line 1108 
  struct sk_buff *skb;
  #line 1104 
  struct ieee80211_vif *vif = avp->vif;
  #line 1105 
  struct ieee80211_sta *sta = (struct ieee80211_sta *)0;
  #line 1109 
  int band = (int)((sc->cur_chan)->chandef.chan)->band;
  #line 1111 
  switch ((unsigned int)vif->type) {
    #line 1112 
    case (unsigned int)2: 
                          #line 1112 
    ;
    #line 1113 
    if (! avp->assoc) 
                      #line 1114 
                      return (_Bool)0;
    #line 1116 
    skb = ieee80211_nullfunc_get(sc->hw,vif,(_Bool)0);
    #line 1117 
    if (skb == (struct sk_buff *)0) 
                                    #line 1118 
                                    return (_Bool)0;
    #line 1120 
    nullfunc = (struct ieee80211_hdr_3addr *)skb->data;
    #line 1121 
    if ((int)powersave != 0) 
                             #line 1122 
                             nullfunc->frame_control = (unsigned short)((unsigned int)nullfunc->frame_control | 4096U);
    #line 1125 
    skb->priority = 7U;
    #line 1126 
    skb_set_queue_mapping(skb,(unsigned short)0);
    #line 1127 
    if (! ieee80211_tx_prepare_skb(sc->hw,vif,skb,band,& sta)) {
      #line 1128 
      dev_kfree_skb_any(skb);
      #line 1129 
      return (_Bool)0;
    }
    #line 1131 
    break;
    #line 1132 
    default: 
             #line 1132 
    ;
    #line 1133 
    return (_Bool)0;
  }
  #line 1136 
  memset((void *)(& txctl),0,32UL);
  #line 1137 
  txctl.txq = sc->tx.txq_map[0];
  #line 1138 
  txctl.sta = sta;
  #line 1139 
  if (ath_tx_start(sc->hw,skb,& txctl) != 0) {
    #line 1140 
    ieee80211_free_txskb(sc->hw,skb);
    #line 1141 
    return (_Bool)0;
  }
  #line 1144 
  return (_Bool)1;
}

#line 1148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static bool ath_chanctx_send_ps_frame(struct ath_softc *sc, bool powersave)
{
  #line 1154 
  void *__mptr;
  #line 1150 
  struct ath_vif *avp;
  #line 1151 
  bool sent = (_Bool)0;
  #line 1153 
  rcu_read_lock();
  #line 1154 
  __mptr = (void *)(sc->cur_chan)->vifs.next;
  #line 1154 
  avp = ((struct ath_vif *)__mptr);
  #line 1154 
  while (& avp->list != & (sc->cur_chan)->vifs) {
    #line 1154 
    void *__mptr_0;
    #line 1155 
    if ((int)ath_chanctx_send_vif_ps_frame(sc,avp,
                                      (_Bool)((bool)((int)powersave) != 0)) != 0) 
      #line 1156 
      sent = (_Bool)1;
    #line 1154 
    __mptr_0 = (void *)avp->list.next;
    #line 1154 
    avp = ((struct ath_vif *)__mptr_0);
  }
  #line 1158 
  rcu_read_unlock();
  #line 1160 
  return sent;
}

#line 1163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static bool ath_chanctx_defer_switch(struct ath_softc *sc)
{
  #line 1165 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1167 
  if (sc->cur_chan == & sc->offchannel.chan) 
                                             #line 1168 
                                             return (_Bool)0;
  #line 1170 
  switch ((unsigned int)sc->sched.state) {
    #line 1171 
    case (unsigned int)3: 
                          #line 1171 
    ;
    #line 1172 
    return (_Bool)0;
    #line 1173 
    case (unsigned int)0: 
                          #line 1173 
    ;
    #line 1174 
    if (! (sc->cur_chan)->switch_after_beacon) 
                                               #line 1175 
                                               return (_Bool)0;
    #line 1177 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 1177 
                                            ath_printk((char *)"\001",common,(char *)"Defer switch, set chanctx state to WAIT_FOR_BEACON\n");
    #line 1180 
    sc->sched.state = ATH_CHANCTX_STATE_WAIT_FOR_BEACON;
    #line 1181 
    break;
    #line 1182 
    default: 
             #line 1182 
    ;
    #line 1183 
    break;
  }
  #line 1186 
  return (_Bool)1;
}

#line 1189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath_offchannel_channel_change(struct ath_softc *sc)
{
  #line 1191 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1193 
  if ((common->debug_mask & 262144) != 0) {
    #line 1193 
    ;
    #line 1193 
    ath_printk((char *)"\001",common,(char *)"%s: offchannel state: %s\n",(char *)"ath_offchannel_channel_change",offchannel_state_string(sc->offchannel.state));
  }
  #line 1196 
  switch ((unsigned int)sc->offchannel.state) {
    #line 1197 
    case (unsigned int)1: 
                          #line 1197 
    ;
    #line 1198 
    if (sc->offchannel.scan_req == (struct cfg80211_scan_request *)0) 
      #line 1199 
      return;
    #line 1201 
    if ((sc->cur_chan)->chandef.chan != sc->offchannel.chan.chandef.chan) 
      #line 1203 
      return;
    #line 1205 
    ath_scan_channel_start(sc);
    #line 1206 
    break;
    #line 1207 
    case (unsigned int)0: 
                          #line 1207 
    ;
    #line 1208 
    if (sc->offchannel.scan_req == (struct cfg80211_scan_request *)0) 
      #line 1209 
      return;
    #line 1211 
    ath_scan_complete(sc,(_Bool)0);
    #line 1212 
    break;
    #line 1213 
    case (unsigned int)4: 
                          #line 1213 
    ;
    #line 1214 
    if (sc->cur_chan != & sc->offchannel.chan) 
                                               #line 1215 
                                               break;
    #line 1217 
    sc->offchannel.state = ATH_OFFCHANNEL_ROC_WAIT;
    #line 1218 
    cif_mod_timer_2(& sc->offchannel.timer,(unsigned long)sc->offchannel.duration + jiffies);
    #line 1220 
    ieee80211_ready_on_channel(sc->hw);
    #line 1221 
    break;
    #line 1222 
    case (unsigned int)6: 
                          #line 1222 
    ;
    #line 1223 
    break;
    #line 1224 
    default: 
             #line 1224 
    ;
    #line 1225 
    break;
  }
  #line 1227 
  return;
}

#line 1229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath_chanctx_set_next(struct ath_softc *sc, bool force)
{
  #line 1232 
  struct ath_chanctx *old_ctx;
  #line 1233 
  struct timespec64 ts;
  #line 1231 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1234 
  bool measure_time = (_Bool)0;
  #line 1235 
  bool send_ps = (_Bool)0;
  #line 1236 
  bool queues_stopped = (_Bool)0;
  #line 1238 
  cif_spin_lock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
  #line 1239 
  if (sc->next_chan == (struct ath_chanctx *)0) {
    #line 1240 
    cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
    #line 1241 
    return;
  }
  #line 1244 
  if (! force) {
    #line 1244 
    if ((int)ath_chanctx_defer_switch(sc) != 0) {
      #line 1245 
      cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
      #line 1246 
      return;
    }
  }
  #line 1249 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 1249 
                                          ath_printk((char *)"\001",common,(char *)"%s: current: %d MHz, next: %d MHz\n",(char *)"ath_chanctx_set_next",(sc->cur_chan)->chandef.center_freq1,(sc->next_chan)->chandef.center_freq1);
  #line 1255 
  if (sc->cur_chan != sc->next_chan) {
    #line 1256 
    if ((common->debug_mask & 262144) != 0) 
                                            #line 1256 
                                            ath_printk((char *)"\001",common,(char *)"Stopping current chanctx: %d\n",(sc->cur_chan)->chandef.center_freq1);
    #line 1259 
    (sc->cur_chan)->stopped = (_Bool)1;
    #line 1260 
    cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
    #line 1262 
    if (sc->next_chan == & sc->offchannel.chan) {
      #line 1263 
      ktime_get_raw_ts64(& ts);
      #line 1264 
      measure_time = (_Bool)1;
    }
    #line 1267 
    ath9k_chanctx_stop_queues(sc,sc->cur_chan);
    #line 1268 
    queues_stopped = (_Bool)1;
    #line 1270 
    __ath9k_flush(sc->hw,4294967295U,(_Bool)1,(_Bool)0,(_Bool)0);
    #line 1272 
    if ((int)ath_chanctx_send_ps_frame(sc,(_Bool)1) != 0) 
                                                          #line 1273 
                                                          __ath9k_flush(sc->hw,1U,(_Bool)0,(_Bool)0,(_Bool)0);
    #line 1276 
    send_ps = (_Bool)1;
    #line 1277 
    cif_spin_lock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
    #line 1279 
    if (sc->cur_chan != & sc->offchannel.chan) {
      #line 1280 
      ktime_get_raw_ts64(& (sc->cur_chan)->tsf_ts);
      #line 1281 
      (sc->cur_chan)->tsf_val = ath9k_hw_gettsf64(sc->sc_ah);
    }
  }
  #line 1284 
  old_ctx = sc->cur_chan;
  #line 1285 
  sc->cur_chan = sc->next_chan;
  #line 1286 
  (sc->cur_chan)->stopped = (_Bool)0;
  #line 1287 
  sc->next_chan = (struct ath_chanctx *)0;
  #line 1289 
  if (! sc->sched.offchannel_pending) 
                                      #line 1290 
                                      sc->sched.offchannel_duration = 0U;
  #line 1292 
  if (sc->sched.state != (unsigned int)ATH_CHANCTX_STATE_FORCE_ACTIVE) 
    #line 1293 
    sc->sched.state = ATH_CHANCTX_STATE_IDLE;
  #line 1295 
  cif_spin_unlock_bh_chan_lock_of_ath_softc_2(& sc->chan_lock);
  #line 1297 
  if ((int)(sc->sc_ah)->chip_fullsleep != 0) 
                                             #line 1297 
                                             goto _LOR;
  else {
    #line 1297 
    if (memcmp((void *)(& sc->cur_chandef),
               (void *)(& (sc->cur_chan)->chandef),32UL) != 0) {
      #line 1297 
      _LOR: {
              #line 1300 
              if ((common->debug_mask & 262144) != 0) 
                                                      #line 1300 
                                                      ath_printk((char *)"\001",common,(char *)"%s: Set channel %d MHz\n",(char *)"ath_chanctx_set_next",(sc->cur_chan)->chandef.center_freq1);
              #line 1303 
              ath_set_channel(sc);
              #line 1304 
              if ((int)measure_time != 0) 
                                          #line 1305 
                                          sc->sched.channel_switch_time = ath9k_hw_get_tsf_offset(& ts,(struct timespec64 *)0);
              #line 1311 
              goto out;
            }
    }
  }
  #line 1314 
  if ((int)queues_stopped != 0) 
                                #line 1315 
                                ath9k_chanctx_wake_queues(sc,old_ctx);
  #line 1316 
  out: 
       #line 1316 
  ;
  #line 1317 
  if ((int)send_ps != 0) 
                         #line 1318 
                         ath_chanctx_send_ps_frame(sc,(_Bool)0);
  #line 1320 
  ath_offchannel_channel_change(sc);
  #line 1321 
  ath_chanctx_event(sc,(struct ieee80211_vif *)0,(enum ath_chanctx_event)ATH_CHANCTX_EVENT_SWITCH);
  #line 1322 
  return;
}

#line 1324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath_chanctx_work(struct work_struct *work)
{
  #line 1326 
  void *__mptr;
  #line 1326 
  __mptr = (void *)work;
  #line 1326 
  struct ath_softc *sc = ((struct ath_softc *)(__mptr + 18446744073709547960U));
  #line 1328 
  cif_mutex_lock_mutex_of_ath_softc_0(& sc->mutex);
  #line 1329 
  ath_chanctx_set_next(sc,(_Bool)0);
  #line 1330 
  cif_mutex_unlock_mutex_of_ath_softc_0(& sc->mutex);
  #line 1331 
  return;
}

#line 1333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_offchannel_init(struct ath_softc *sc)
{
  #line 1335 
  struct ath_chanctx *ctx;
  #line 1337 
  struct ieee80211_supported_band *sband;
  #line 1338 
  struct ieee80211_channel *chan;
  #line 1339 
  int i;
  #line 1336 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1341 
  sband = & common->sbands[0];
  #line 1342 
  if (sband->n_channels == 0) 
                              #line 1343 
                              sband = & common->sbands[1];
  #line 1345 
  chan = sband->channels;
  #line 1347 
  ctx = & sc->offchannel.chan;
  #line 1348 
  INIT_LIST_HEAD_3(& ctx->vifs);
  #line 1349 
  ctx->txpower = (unsigned short)100U;
  #line 1350 
  cfg80211_chandef_create(& ctx->chandef,chan,(enum nl80211_channel_type)NL80211_CHAN_HT20);
  #line 1352 
  i = 0;
  #line 1352 
  while ((unsigned int)i <= 3U) {
    #line 1353 
    INIT_LIST_HEAD_3(& ctx->acq[i].acq_new);
    #line 1354 
    INIT_LIST_HEAD_3(& ctx->acq[i].acq_old);
    #line 1355 
    spinlock_check(& ctx->acq[i].lock);
    {
      #line 1355 
      struct lock_class_key __key;
      #line 1355 
      __raw_spin_lock_init(& ctx->acq[i].lock.__anonCompField_spinlock_25.rlock,(char *)"&(&ctx->acq[i].lock)->rlock",& __key);
    }
    #line 1352 
    i ++;
  }
  #line 1358 
  sc->offchannel.chan.offchannel = (_Bool)1;
  #line 1359 
  return;
}

#line 1361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_init_channel_context(struct ath_softc *sc)
{
  {
    #line 1363 
    struct lock_class_key __key;
    #line 1363 
    __init_work(& sc->chanctx_work,0);
    #line 1363 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 1363 
    sc->chanctx_work.data = __constr_expr_41;
    #line 1363 
    lockdep_init_map(& sc->chanctx_work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 1363 
    INIT_LIST_HEAD_3(& sc->chanctx_work.entry);
    #line 1363 
    sc->chanctx_work.func = & ath_chanctx_work;
  }
  {
    #line 1365 
    struct lock_class_key __key_0;
    #line 1365 
    init_timer_key(& sc->offchannel.timer,& ath_offchannel_timer,0U,(char *)"(&sc->offchannel.timer)",& __key_0);
  }
  {
    #line 1366 
    struct lock_class_key __key_1;
    #line 1366 
    init_timer_key(& sc->sched.timer,& ath_chanctx_timer,0U,(char *)"(&sc->sched.timer)",& __key_1);
  }
  #line 1368 
  __init_completion(& sc->go_beacon);
  #line 1369 
  return;
}

#line 1371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_deinit_channel_context(struct ath_softc *sc)
{
  #line 1373 
  cancel_work_sync(& sc->chanctx_work);
  #line 1374 
  return;
}

#line 1376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
bool ath9k_is_chanctx_enabled(void)
{
  #line 1378 
  return (_Bool)(ath9k_use_chanctx == 1);
}

#line 1385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_chanctx_stop_queues(struct ath_softc *sc, struct ath_chanctx *ctx)
{
  #line 1388 
  int i;
  #line 1387 
  struct ath_hw *ah = sc->sc_ah;
  #line 1390 
  if (& sc->offchannel.chan == ctx) 
                                    #line 1391 
                                    ieee80211_stop_queue(sc->hw,(int)(sc->hw)->offchannel_tx_hw_queue);
  else {
    #line 1394 
    i = 0;
    #line 1394 
    while (i <= 3) {
      #line 1395 
      ieee80211_stop_queue(sc->hw,ctx->hw_queue_base + i);
      #line 1394 
      i ++;
    }
  }
  #line 1399 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_AP) 
                                                     #line 1400 
                                                     ieee80211_stop_queue(sc->hw,(int)(sc->hw)->queues + -2);
  #line 1401 
  return;
}

#line 1404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_chanctx_wake_queues(struct ath_softc *sc, struct ath_chanctx *ctx)
{
  #line 1407 
  int i;
  #line 1406 
  struct ath_hw *ah = sc->sc_ah;
  #line 1409 
  if (& sc->offchannel.chan == ctx) 
                                    #line 1410 
                                    ieee80211_wake_queue(sc->hw,(int)(sc->hw)->offchannel_tx_hw_queue);
  else {
    #line 1413 
    i = 0;
    #line 1413 
    while (i <= 3) {
      #line 1414 
      ieee80211_wake_queue(sc->hw,ctx->hw_queue_base + i);
      #line 1413 
      i ++;
    }
  }
  #line 1418 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_AP) 
                                                     #line 1419 
                                                     ieee80211_wake_queue(sc->hw,(int)(sc->hw)->queues + -2);
  #line 1420 
  return;
}

#line 1426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath9k_update_p2p_ps_timer(struct ath_softc *sc, struct ath_vif *avp)
{
  #line 1430 
  u32 tsf;
  #line 1430 
  u32 target_tsf;
  #line 1428 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1429 
  struct ath_hw *ah = sc->sc_ah;
  #line 1432 
  if (avp == (struct ath_vif *)0 || ! avp->noa.has_next_tsf) 
                                                             #line 1433 
                                                             return;
  #line 1435 
  ath9k_hw_gen_timer_stop(ah,sc->p2p_ps_timer);
  #line 1437 
  tsf = ath9k_hw_gettsf32(sc->sc_ah);
  #line 1439 
  target_tsf = avp->noa.next_tsf;
  #line 1440 
  if ((unsigned int)avp->noa.absent == 0U) 
                                           #line 1441 
                                           target_tsf += 4294966296U; else 
                                                                    #line 1443 
                                                                    target_tsf += 1000U;
  #line 1445 
  if (target_tsf - tsf <= 999U) 
                                #line 1446 
                                target_tsf = tsf + 1000U;
  #line 1448 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 1448 
                                          ath_printk((char *)"\001",common,(char *)"%s absent %d tsf 0x%08X next_tsf 0x%08X (%dms)\n",(char *)"ath9k_update_p2p_ps_timer",(int)avp->noa.absent,tsf,target_tsf,(target_tsf - tsf) / 1000U);
  #line 1452 
  ath9k_hw_gen_timer_start(ah,sc->p2p_ps_timer,target_tsf,1000000U);
  #line 1453 
  return;
}

#line 1455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static void ath9k_update_p2p_ps(struct ath_softc *sc, struct ieee80211_vif *vif)
{
  #line 1458 
  u32 tsf;
  #line 1457 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 1460 
  if (sc->p2p_ps_timer == (struct ath_gen_timer *)0) 
                                                     #line 1461 
                                                     return;
  #line 1463 
  if (vif->type != (unsigned int)NL80211_IFTYPE_STATION) 
                                                         #line 1464 
                                                         return;
  #line 1466 
  sc->p2p_ps_vif = avp;
  #line 1468 
  if (((unsigned long)sc->ps_flags & 16UL) != 0UL) 
                                                   #line 1469 
                                                   return;
  #line 1471 
  tsf = ath9k_hw_gettsf32(sc->sc_ah);
  #line 1472 
  ieee80211_parse_p2p_noa(& vif->bss_conf.p2p_noa_attr,& avp->noa,tsf);
  #line 1473 
  ath9k_update_p2p_ps_timer(sc,avp);
  #line 1474 
  return;
}

#line 1476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
static u8 ath9k_get_ctwin(struct ath_softc *sc, struct ath_vif *avp)
{
  #line 1479 
  u8 switch_time;
  #line 1479 
  u8 ctwin;
  #line 1478 
  struct ath_beacon_config *cur_conf = & (sc->cur_chan)->beacon;
  #line 1488 
  switch_time = (unsigned char)(cur_conf->beacon_interval / 4);
  #line 1490 
  ctwin = (avp->vif)->bss_conf.p2p_noa_attr.oppps_ctwindow;
  #line 1491 
  if ((unsigned int)ctwin != 0U && (int)ctwin < (int)switch_time) 
                                                                  #line 1492 
                                                                  return ctwin;
  #line 1494 
  if ((unsigned int)switch_time <= 9U) 
                                       #line 1495 
                                       return (unsigned char)0U;
  #line 1497 
  return (unsigned char)10U;
}

#line 1500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_beacon_add_noa(struct ath_softc *sc, struct ath_vif *avp, struct sk_buff *skb)
{
  #line 1513 
  struct ieee80211_p2p_noa_attr *noa;
  #line 1514 
  int noa_len;
  #line 1514 
  int noa_desc;
  #line 1515 
  u8 *hdr;
  #line 1503 
  u8 noa_ie_hdr[9U] = {(unsigned char)221U, (unsigned char)0U, (unsigned char)80U, (unsigned char)111U, (unsigned char)154U, (unsigned char)9U, (unsigned char)12U, (unsigned char)0U, (unsigned char)0U};
  #line 1514 
  int i = 0;
  #line 1517 
  if (avp->offchannel_duration == 0U && avp->noa_duration == 0U) 
                                                                 #line 1518 
                                                                 return;
  #line 1520 
  noa_desc = (avp->offchannel_duration != 0U) + (avp->noa_duration != 0U);
  #line 1521 
  noa_len = (int)((unsigned long)noa_desc * (unsigned long)13U + (unsigned long)2U);
  #line 1523 
  hdr = (u8 *)skb_put_data(skb,(void *)(& noa_ie_hdr),9U);
  #line 1524 
  *(hdr + 1U) = (unsigned char)((unsigned int)((unsigned char)noa_len) + 7U);
  #line 1525 
  *(hdr + 7U) = (unsigned char)noa_len;
  #line 1527 
  noa = (struct ieee80211_p2p_noa_attr *)skb_put_zero(skb,(unsigned int)noa_len);
  #line 1529 
  noa->index = avp->noa_index;
  #line 1530 
  noa->oppps_ctwindow = ath9k_get_ctwin(sc,avp);
  #line 1531 
  if ((unsigned int)noa->oppps_ctwindow != 0U) 
                                               #line 1532 
                                               noa->oppps_ctwindow = (unsigned char)((unsigned int)noa->oppps_ctwindow | 128U);
  #line 1534 
  if (avp->noa_duration != 0U) {
    #line 1535 
    if ((int)avp->periodic_noa != 0) {
      #line 1536 
      u32 interval = (unsigned int)((sc->cur_chan)->beacon.beacon_interval << 10);
      #line 1537 
      noa->desc[i].count = (unsigned char)255U;
      #line 1538 
      noa->desc[i].interval = interval;
    }
    else 
         #line 1540 
         noa->desc[i].count = (unsigned char)1U;
    #line 1543 
    noa->desc[i].start_time = avp->noa_start;
    #line 1544 
    noa->desc[i].duration = avp->noa_duration;
    #line 1545 
    i ++;
  }
  #line 1548 
  if (avp->offchannel_duration != 0U) {
    #line 1549 
    noa->desc[i].count = (unsigned char)1U;
    #line 1550 
    noa->desc[i].start_time = avp->offchannel_start;
    #line 1551 
    noa->desc[i].duration = avp->offchannel_duration;
  }
  #line 1553 
  return;
}

#line 1555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_p2p_ps_timer(void *priv)
{
  #line 1559 
  struct ieee80211_vif *vif;
  #line 1560 
  struct ieee80211_sta *sta;
  #line 1561 
  struct ath_node *an;
  #line 1562 
  u32 tsf;
  #line 1557 
  struct ath_softc *sc = (struct ath_softc *)priv;
  #line 1558 
  struct ath_vif *avp = sc->p2p_ps_vif;
  #line 1564 
  cif_del_timer_sync_2(& sc->sched.timer);
  #line 1565 
  ath9k_hw_gen_timer_stop(sc->sc_ah,sc->p2p_ps_timer);
  #line 1566 
  ath_chanctx_event(sc,(struct ieee80211_vif *)0,(enum ath_chanctx_event)ATH_CHANCTX_EVENT_TSF_TIMER);
  #line 1568 
  if (avp == (struct ath_vif *)0 || avp->chanctx != sc->cur_chan) 
                                                                  #line 1569 
                                                                  return;
  #line 1571 
  tsf = ath9k_hw_gettsf32(sc->sc_ah);
  #line 1572 
  if ((unsigned int)avp->noa.absent == 0U) 
                                           #line 1573 
                                           tsf += 1000U; else 
                                                              #line 1575 
                                                              tsf += 4294966296U;
  #line 1577 
  if (! avp->noa.has_next_tsf || avp->noa.next_tsf - tsf > 2147483648U) 
    #line 1579 
    ieee80211_update_p2p_noa(& avp->noa,tsf);
  #line 1581 
  ath9k_update_p2p_ps_timer(sc,avp);
  #line 1583 
  rcu_read_lock();
  #line 1585 
  vif = avp->vif;
  #line 1586 
  sta = ieee80211_find_sta(vif,(u8 *)(& avp->bssid));
  #line 1587 
  if (sta == (struct ieee80211_sta *)0) 
                                        #line 1588 
                                        goto out;
  #line 1590 
  an = (struct ath_node *)(& sta->drv_priv);
  #line 1591 
  if ((int)an->sleeping == ((unsigned int)avp->noa.absent != 0U)) 
                                                                  #line 1592 
                                                                  goto out;
  #line 1594 
  an->sleeping = (_Bool)((unsigned int)avp->noa.absent != 0U);
  #line 1595 
  if ((int)an->sleeping != 0) 
                              #line 1596 
                              ath_tx_aggr_sleep(sta,sc,an); else 
                                                                 #line 1598 
                                                                 ath_tx_aggr_wakeup(sc,an);
  #line 1600 
  out: 
       #line 1600 
  ;
  #line 1601 
  rcu_read_unlock();
  #line 1602 
  return;
}

#line 1604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_p2p_bss_info_changed(struct ath_softc *sc, struct ieee80211_vif *vif)
{
  #line 1607 
  unsigned long flags;
  #line 1609 
  cif_spin_lock_bh_sc_pcu_lock_of_ath_softc_0(& sc->sc_pcu_lock);
  #line 1610 
  cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_4(& sc->sc_pm_lock);
  #line 1611 
  ath9k_update_p2p_ps(sc,vif);
  #line 1612 
  cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_4(& sc->sc_pm_lock,flags);
  #line 1613 
  cif_spin_unlock_bh_sc_pcu_lock_of_ath_softc_0(& sc->sc_pcu_lock);
  #line 1614 
  return;
}

#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_p2p_beacon_sync(struct ath_softc *sc)
{
  #line 1618 
  if (sc->p2p_ps_vif != (struct ath_vif *)0) 
                                             #line 1619 
                                             ath9k_update_p2p_ps(sc,(sc->p2p_ps_vif)->vif);
  #line 1620 
  return;
}

#line 1622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_p2p_remove_vif(struct ath_softc *sc, struct ieee80211_vif *vif)
{
  #line 1625 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 1627 
  cif_spin_lock_bh_sc_pcu_lock_of_ath_softc_0(& sc->sc_pcu_lock);
  #line 1628 
  if (sc->p2p_ps_vif == avp) {
    #line 1629 
    sc->p2p_ps_vif = (struct ath_vif *)0;
    #line 1630 
    ath9k_update_p2p_ps_timer(sc,(struct ath_vif *)0);
  }
  #line 1632 
  cif_spin_unlock_bh_sc_pcu_lock_of_ath_softc_0(& sc->sc_pcu_lock);
  #line 1633 
  return;
}

#line 1635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
int ath9k_init_p2p(struct ath_softc *sc)
{
  #line 1637 
  sc->p2p_ps_timer = ath_gen_timer_alloc(sc->sc_ah,& ath9k_p2p_ps_timer,(void (*)(void *))0,(void *)sc,(unsigned char)7);
  #line 1639 
  if (sc->p2p_ps_timer == (struct ath_gen_timer *)0) 
                                                     #line 1640 
                                                     return -12;
  #line 1642 
  return 0;
}

#line 1645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/channel.c"
void ath9k_deinit_p2p(struct ath_softc *sc)
{
  #line 1647 
  if (sc->p2p_ps_timer != (struct ath_gen_timer *)0) 
                                                     #line 1648 
                                                     ath_gen_timer_free(sc->sc_ah,sc->p2p_ps_timer);
  #line 1649 
  return;
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_clear_bit_2(long nr, unsigned long *addr)
{
  #line 130 
  ldv_clear_bit(nr,addr);
  #line 131 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void INIT_LIST_HEAD_3(struct list_head *list)
{
  #line 137 
  ldv_init_list_head(list);
  #line 138 
  return;
}

#line 809  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif___ldv_spin_lock_cc_lock_of_ath_common_1(spinlock_t *lock)
{
  #line 812 
  ldv_spin_model_lock((char *)"cc_lock_of_ath_common");
  #line 814 
  __ldv_spin_lock(lock);
  #line 815 
  return;
}

#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_spin_unlock_irqrestore_cc_lock_of_ath_common_1(spinlock_t *lock, unsigned long flags)
{
  #line 821 
  ldv_spin_model_unlock((char *)"cc_lock_of_ath_common");
  #line 823 
  spin_unlock_irqrestore_4(lock,flags);
  #line 824 
  return;
}

#line 827  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_spin_lock_bh_chan_lock_of_ath_softc_2(spinlock_t *lock)
{
  #line 830 
  ldv_spin_model_lock((char *)"chan_lock_of_ath_softc");
  #line 832 
  spin_lock_bh_4(lock);
  #line 833 
  return;
}

#line 836  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_spin_unlock_bh_chan_lock_of_ath_softc_2(spinlock_t *lock)
{
  #line 839 
  ldv_spin_model_unlock((char *)"chan_lock_of_ath_softc");
  #line 841 
  spin_unlock_bh_4(lock);
  #line 842 
  return;
}

#line 845  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static int cif_mod_timer_2(struct timer_list *timer, unsigned long expires)
{
  #line 849 
  return emg_mod_timer(timer,expires);
}

#line 853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_mutex_lock_mutex_of_ath_softc_0(struct mutex *lock)
{
  #line 856 
  ldv_mutex_model_lock(lock,(char *)"mutex_of_ath_softc");
  #line 857 
  return;
}

#line 860  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_mutex_unlock_mutex_of_ath_softc_0(struct mutex *lock)
{
  #line 863 
  ldv_mutex_model_unlock(lock,(char *)"mutex_of_ath_softc");
  #line 864 
  return;
}

#line 867  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static int cif_del_timer_sync_2(struct timer_list *timer)
{
  #line 871 
  return emg_del_timer_sync(timer);
}

#line 875  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_spin_lock_bh_sc_pcu_lock_of_ath_softc_0(spinlock_t *lock)
{
  #line 878 
  ldv_spin_model_lock((char *)"sc_pcu_lock_of_ath_softc");
  #line 880 
  spin_lock_bh_4(lock);
  #line 881 
  return;
}

#line 884  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_4(spinlock_t *lock)
{
  #line 887 
  ldv_spin_model_lock((char *)"sc_pm_lock_of_ath_softc");
  #line 889 
  __ldv_spin_lock(lock);
  #line 890 
  return;
}

#line 893  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_4(spinlock_t *lock, unsigned long flags)
{
  #line 896 
  ldv_spin_model_unlock((char *)"sc_pm_lock_of_ath_softc");
  #line 898 
  spin_unlock_irqrestore_4(lock,flags);
  #line 899 
  return;
}

#line 902  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/channel.i.aux"
static void cif_spin_unlock_bh_sc_pcu_lock_of_ath_softc_0(spinlock_t *lock)
{
  #line 905 
  ldv_spin_model_unlock((char *)"sc_pcu_lock_of_ath_softc");
  #line 907 
  spin_unlock_bh_4(lock);
  #line 908 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/wow.i.aux"
static void cif_set_bit_3(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/wow.i.aux"
static void cif_clear_bit_3(long nr, unsigned long *addr);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_5(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/wow.i.aux"
static void cif_spin_lock_bh_sc_pcu_lock_of_ath_softc_1(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_5(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/wow.i.aux"
static void cif_spin_unlock_bh_sc_pcu_lock_of_ath_softc_1(spinlock_t *lock);
#line 26 
#line 809 
static void cif_mutex_lock_mutex_of_ath_softc_1(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 834  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/wow.i.aux"
static void cif_mutex_unlock_mutex_of_ath_softc_1(struct mutex *lock);
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
#line 107 
int device_init_wakeup(struct device *, bool);
#line 108 
#line 108 
int device_set_wakeup_enable(struct device *, bool);
#line 1197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
#line 1197 
int ath9k_hw_wow_apply_pattern(struct ath_hw *, u8 *, u8 *, int, int);
#line 1200 
#line 1200 
u32 ath9k_hw_wow_wakeup(struct ath_hw *);
#line 1201 
#line 1201 
void ath9k_hw_wow_enable(struct ath_hw *, u32);
#line 861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/wow.c"
void ath9k_init_wow(struct ieee80211_hw *hw);
#line 862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/wow.c"
void ath9k_deinit_wow(struct ieee80211_hw *hw);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/wow.c"
static struct wiphy_wowlan_support ath9k_wowlan_support_legacy = {.flags = 6U, .n_patterns = 6, .pattern_max_len = 256, .pattern_min_len = 1};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/wow.c"
static struct wiphy_wowlan_support ath9k_wowlan_support = {.flags = 6U, .n_patterns = 14, .pattern_max_len = 256, .pattern_min_len = 1};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/wow.c"
static u8 ath9k_wow_map_triggers(struct ath_softc *sc, struct cfg80211_wowlan *wowlan)
{
  #line 36 
  u8 wow_triggers = (unsigned char)0U;
  #line 38 
  if ((int)wowlan->disconnect != 0) 
                                    #line 39 
                                    wow_triggers = (unsigned char)((unsigned int)wow_triggers | 12U);
  #line 41 
  if ((int)wowlan->magic_pkt != 0) 
                                   #line 42 
                                   wow_triggers = (unsigned char)((unsigned int)wow_triggers | 2U);
  #line 44 
  if (wowlan->n_patterns != 0) 
                               #line 45 
                               wow_triggers = (unsigned char)((unsigned int)wow_triggers | 1U);
  #line 47 
  return wow_triggers;
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/wow.c"
static int ath9k_wow_add_disassoc_deauth_pattern(struct ath_softc *sc)
{
  #line 55 
  int ret;
  #line 55 
  int i;
  #line 56 
  u8 dis_deauth_pattern[256U];
  #line 57 
  u8 dis_deauth_mask[256U];
  #line 52 
  struct ath_hw *ah = sc->sc_ah;
  #line 53 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 54 
  int pattern_count = 0;
  #line 55 
  int byte_cnt = 0;
  #line 59 
  memset((void *)(& dis_deauth_pattern),0,256UL);
  #line 60 
  memset((void *)(& dis_deauth_mask),0,256UL);
  #line 91 
  i = 0;
  #line 91 
  while (i <= 31) {
    #line 92 
    dis_deauth_mask[i] = (unsigned char)255U;
    #line 91 
    i ++;
  }
  #line 95 
  dis_deauth_pattern[byte_cnt] = (unsigned char)160U;
  #line 96 
  byte_cnt ++;
  #line 99 
  byte_cnt += 3;
  #line 105 
  byte_cnt += 6;
  #line 108 
  memcpy((void *)((u8 *)(& dis_deauth_pattern) + (unsigned long)byte_cnt),(void *)(& common->curbssid),6UL);
  #line 110 
  byte_cnt += 6;
  #line 113 
  memcpy((void *)((u8 *)(& dis_deauth_pattern) + (unsigned long)byte_cnt),(void *)(& common->curbssid),6UL);
  #line 116 
  dis_deauth_mask[0] = (unsigned char)254U;
  #line 117 
  dis_deauth_mask[1] = (unsigned char)3U;
  #line 118 
  dis_deauth_mask[2] = (unsigned char)192U;
  #line 120 
  ret = ath9k_hw_wow_apply_pattern(ah,(u8 *)(& dis_deauth_pattern),(u8 *)(& dis_deauth_mask),pattern_count,byte_cnt);
  #line 122 
  if (ret != 0) 
                #line 123 
                goto exit;
  #line 125 
  pattern_count ++;
  #line 130 
  dis_deauth_pattern[0] = (unsigned char)192U;
  #line 132 
  ret = ath9k_hw_wow_apply_pattern(ah,(u8 *)(& dis_deauth_pattern),(u8 *)(& dis_deauth_mask),pattern_count,byte_cnt);
  #line 134 
  exit: 
        #line 134 
  ;
  #line 135 
  return ret;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/wow.c"
static int ath9k_wow_add_pattern(struct ath_softc *sc, struct cfg80211_wowlan *wowlan)
{
  #line 143 
  u8 wow_pattern[256U];
  #line 144 
  u8 wow_mask[256U];
  #line 145 
  int mask_len;
  #line 141 
  struct ath_hw *ah = sc->sc_ah;
  #line 142 
  struct cfg80211_pkt_pattern *patterns = wowlan->patterns;
  #line 145 
  int ret = 0;
  #line 146 
  s8 i = (signed char)0;
  #line 148 
  i = (signed char)0;
  #line 148 
  while ((int)i < wowlan->n_patterns) {
    #line 149 
    mask_len = ((patterns + (unsigned long)i)->pattern_len + 7) / 8;
    #line 150 
    memset((void *)(& wow_pattern),0,256UL);
    #line 151 
    memset((void *)(& wow_mask),0,256UL);
    #line 152 
    memcpy((void *)(& wow_pattern),(void *)(patterns + (unsigned long)i)->pattern,(unsigned long)(patterns + (unsigned long)i)->pattern_len);
    #line 153 
    memcpy((void *)(& wow_mask),(void *)(patterns + (unsigned long)i)->mask,(unsigned long)mask_len);
    #line 155 
    ret = ath9k_hw_wow_apply_pattern(ah,(u8 *)(& wow_pattern),(u8 *)(& wow_mask),(int)i + 2,(patterns + (unsigned long)i)->pattern_len);
    #line 160 
    if (ret != 0) 
                  #line 161 
                  break;
    #line 148 
    i = (s8)((int)i + 1);
  }
  #line 164 
  return ret;
}

#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/wow.c"
int ath9k_suspend(struct ieee80211_hw *hw, struct cfg80211_wowlan *wowlan)
{
  #line 186 
  int __ret_warn_on;
  #line 173 
  u8 triggers;
  #line 170 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 171 
  struct ath_hw *ah = sc->sc_ah;
  #line 172 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 174 
  int ret = 0;
  #line 176 
  ath9k_deinit_channel_context(sc);
  #line 178 
  cif_mutex_lock_mutex_of_ath_softc_1(& sc->mutex);
  #line 180 
  if ((int)test_bit(0L,& common->op_flags) != 0) {
    #line 181 
    ath_printk((char *)"\001",common,(char *)"Device not present\n");
    #line 182 
    ret = -19;
    #line 183 
    goto fail_wow;
  }
  #line 186 
  __ret_warn_on = wowlan == (struct cfg80211_wowlan *)0;
  #line 186 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 187 
    ldv_inline_asm();
    #line 188 
    ldv_inline_asm();
  }
  #line 186 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) {
    #line 187 
    ath_printk((char *)"\001",common,(char *)"None of the WoW triggers enabled\n");
    #line 188 
    ret = -22;
    #line 189 
    goto fail_wow;
  }
  #line 192 
  if ((int)(sc->cur_chan)->nvifs > 1) {
    #line 193 
    if ((common->debug_mask & 131072) != 0) 
                                            #line 193 
                                            ath_printk((char *)"\001",common,(char *)"WoW for multivif is not yet supported\n");
    #line 194 
    ret = 1;
    #line 195 
    goto fail_wow;
  }
  #line 198 
  if ((int)ath9k_is_chanctx_enabled() != 0) {
    #line 199 
    if ((int)test_bit(6L,& common->op_flags) != 0) {
      #line 200 
      if ((common->debug_mask & 131072) != 0) 
                                              #line 200 
                                              ath_printk((char *)"\001",common,(char *)"Multi-channel WOW is not supported\n");
      #line 202 
      ret = 1;
      #line 203 
      goto fail_wow;
    }
  }
  #line 207 
  if (! test_bit(3L,& common->op_flags)) {
    #line 208 
    if ((common->debug_mask & 131072) != 0) 
                                            #line 208 
                                            ath_printk((char *)"\001",common,(char *)"None of the STA vifs are associated\n");
    #line 209 
    ret = 1;
    #line 210 
    goto fail_wow;
  }
  #line 213 
  triggers = ath9k_wow_map_triggers(sc,wowlan);
  #line 214 
  if ((unsigned int)triggers == 0U) {
    #line 215 
    if ((common->debug_mask & 131072) != 0) 
                                            #line 215 
                                            ath_printk((char *)"\001",common,(char *)"No valid WoW triggers\n");
    #line 216 
    ret = 1;
    #line 217 
    goto fail_wow;
  }
  #line 220 
  ath_cancel_work(sc);
  #line 221 
  ath_stop_ani(sc);
  #line 223 
  ath9k_ps_wakeup(sc);
  #line 225 
  ath9k_stop_btcoex(sc);
  #line 231 
  ret = ath9k_wow_add_disassoc_deauth_pattern(sc);
  #line 232 
  if (ret != 0) {
    #line 233 
    ath_printk((char *)"\001",common,(char *)"Unable to add disassoc/deauth pattern: %d\n",ret);
    #line 235 
    goto fail_wow;
  }
  #line 238 
  if (((unsigned long)triggers & 1UL) != 0UL) {
    #line 239 
    ret = ath9k_wow_add_pattern(sc,wowlan);
    #line 240 
    if (ret != 0) {
      #line 241 
      ath_printk((char *)"\001",common,(char *)"Unable to add user pattern: %d\n",ret);
      #line 243 
      goto fail_wow;
    }
  }
  #line 247 
  cif_spin_lock_bh_sc_pcu_lock_of_ath_softc_1(& sc->sc_pcu_lock);
  #line 253 
  sc->wow_intr_before_sleep = (unsigned int)ah->imask;
  #line 254 
  ah->imask = (enum ath9k_int)((unsigned int)ah->imask & 2147483647U);
  #line 255 
  ath9k_hw_disable_interrupts(ah);
  #line 256 
  ah->imask = 2147745792;
  #line 257 
  ath9k_hw_set_interrupts(ah);
  #line 258 
  ath9k_hw_enable_interrupts(ah);
  #line 260 
  cif_spin_unlock_bh_sc_pcu_lock_of_ath_softc_1(& sc->sc_pcu_lock);
  #line 266 
  synchronize_irq((unsigned int)sc->irq);
  #line 267 
  tasklet_kill(& sc->intr_tq);
  #line 269 
  ath9k_hw_wow_enable(ah,(unsigned int)triggers);
  #line 271 
  ath9k_ps_restore(sc);
  #line 272 
  if ((common->debug_mask & 131072) != 0) 
                                          #line 272 
                                          ath_printk((char *)"\001",common,(char *)"Suspend with WoW triggers: 0x%x\n",(int)triggers);
  #line 274 
  cif_set_bit_3(7L,& common->op_flags);
  #line 275 
  fail_wow: 
            #line 275 
  ;
  #line 276 
  cif_mutex_unlock_mutex_of_ath_softc_1(& sc->mutex);
  #line 277 
  return ret;
}

#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/wow.c"
int ath9k_resume(struct ieee80211_hw *hw)
{
  #line 285 
  u8 status;
  #line 282 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 283 
  struct ath_hw *ah = sc->sc_ah;
  #line 284 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 287 
  cif_mutex_lock_mutex_of_ath_softc_1(& sc->mutex);
  #line 289 
  ath9k_ps_wakeup(sc);
  #line 291 
  cif_spin_lock_bh_sc_pcu_lock_of_ath_softc_1(& sc->sc_pcu_lock);
  #line 293 
  ath9k_hw_disable_interrupts(ah);
  #line 294 
  ah->imask = (enum ath9k_int)sc->wow_intr_before_sleep;
  #line 295 
  ath9k_hw_set_interrupts(ah);
  #line 296 
  ath9k_hw_enable_interrupts(ah);
  #line 298 
  cif_spin_unlock_bh_sc_pcu_lock_of_ath_softc_1(& sc->sc_pcu_lock);
  #line 300 
  status = (unsigned char)ath9k_hw_wow_wakeup(ah);
  #line 301 
  if ((common->debug_mask & 131072) != 0) 
                                          #line 301 
                                          ath_printk((char *)"\001",common,(char *)"Resume with WoW status: 0x%x\n",(int)status);
  #line 303 
  ath_restart_work(sc);
  #line 304 
  ath9k_start_btcoex(sc);
  #line 306 
  cif_clear_bit_3(7L,& common->op_flags);
  #line 308 
  ath9k_ps_restore(sc);
  #line 309 
  cif_mutex_unlock_mutex_of_ath_softc_1(& sc->mutex);
  #line 311 
  return 0;
}

#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/wow.c"
void ath9k_set_wakeup(struct ieee80211_hw *hw, bool enabled)
{
  #line 316 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 317 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 319 
  cif_mutex_lock_mutex_of_ath_softc_1(& sc->mutex);
  #line 320 
  device_set_wakeup_enable(sc->dev,(_Bool)((bool)((int)enabled) != 0));
  #line 321 
  cif_mutex_unlock_mutex_of_ath_softc_1(& sc->mutex);
  #line 323 
  if ((common->debug_mask & 131072) != 0) {
    #line 323 
    char *tmp_0;
    #line 323 
    if ((int)enabled != 0) 
                           #line 323 
                           tmp_0 = (char *)"enabled"; else 
                                                           #line 323 
                                                           tmp_0 = (char *)"disabled";
    #line 323 
    ;
    #line 323 
    ath_printk((char *)"\001",common,(char *)"WoW wakeup source is %s\n",tmp_0);
  }
  #line 324 
  return;
}

#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/wow.c"
void ath9k_init_wow(struct ieee80211_hw *hw)
{
  #line 329 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 330 
  struct ath_hw *ah = sc->sc_ah;
  #line 332 
  if ((sc->driver_data & 16UL) != 0UL || (int)sc->force_wow != 0) {
    #line 333 
    if ((ah->hw_version.macVersion == 640U || ah->hw_version.macVersion == 704U) && (unsigned int)ah->hw_version.macRev > 1U) 
      #line 334 
      (hw->wiphy)->wowlan = & ath9k_wowlan_support; else 
                                                         #line 336 
                                                         (hw->wiphy)->wowlan = & ath9k_wowlan_support_legacy;
    #line 338 
    device_init_wakeup(sc->dev,(_Bool)1);
  }
  #line 340 
  return;
}

#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/wow.c"
void ath9k_deinit_wow(struct ieee80211_hw *hw)
{
  #line 344 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 346 
  if ((sc->driver_data & 16UL) != 0UL || (int)sc->force_wow != 0) 
                                                                  #line 347 
                                                                  device_init_wakeup(sc->dev,(_Bool)0);
  #line 348 
  return;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/wow.i.aux"
static void cif_set_bit_3(long nr, unsigned long *addr)
{
  #line 123 
  ldv_set_bit(nr,addr);
  #line 124 
  return;
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/wow.i.aux"
static void cif_clear_bit_3(long nr, unsigned long *addr)
{
  #line 130 
  ldv_clear_bit(nr,addr);
  #line 131 
  return;
}

#line 809  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/wow.i.aux"
static void cif_mutex_lock_mutex_of_ath_softc_1(struct mutex *lock)
{
  #line 812 
  ldv_mutex_model_lock(lock,(char *)"mutex_of_ath_softc");
  #line 813 
  return;
}

#line 816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/wow.i.aux"
static void cif_spin_lock_bh_sc_pcu_lock_of_ath_softc_1(spinlock_t *lock)
{
  #line 819 
  ldv_spin_model_lock((char *)"sc_pcu_lock_of_ath_softc");
  #line 821 
  spin_lock_bh_5(lock);
  #line 822 
  return;
}

#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/wow.i.aux"
static void cif_spin_unlock_bh_sc_pcu_lock_of_ath_softc_1(spinlock_t *lock)
{
  #line 828 
  ldv_spin_model_unlock((char *)"sc_pcu_lock_of_ath_softc");
  #line 830 
  spin_unlock_bh_5(lock);
  #line 831 
  return;
}

#line 834  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/wow.i.aux"
static void cif_mutex_unlock_mutex_of_ath_softc_1(struct mutex *lock)
{
  #line 837 
  ldv_mutex_model_unlock(lock,(char *)"mutex_of_ath_softc");
  #line 838 
  return;
}

#line 5771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 5771 
void ieee80211_radar_detected(struct ieee80211_hw *);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs.c"
__inline static int fft_max_index(u8 *bins)
{
  #line 65 
  return (int)*(bins + 2U) >> 2;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs.c"
__inline static int fft_max_magnitude(u8 *bins)
{
  #line 69 
  return (((int)*bins >> 6) | ((int)*(bins + 1U) << 2)) | (((int)*(bins + 2U) << 10) & 3072);
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs.c"
__inline static u8 fft_bitmap_weight(u8 *bins)
{
  #line 73 
  return (unsigned char)((unsigned int)*bins & 63U);
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs.c"
static int ath9k_get_max_index_ht40(struct ath9k_dfs_fft_40 *fft, bool is_ctl, bool is_ext)
{
  #line 79 
  int DFS_UPPER_BIN_OFFSET = 64;
  #line 81 
  if ((int)is_ctl != 0 && (int)is_ext != 0) {
    #line 83 
    is_ctl = (_Bool)((unsigned int)fft_bitmap_weight((u8 *)(& fft->lower_bins)) != 0U);
    #line 84 
    is_ext = (_Bool)((unsigned int)fft_bitmap_weight((u8 *)(& fft->upper_bins)) != 0U);
    #line 87 
    if ((int)is_ctl != 0 && (int)is_ext != 0) {
      #line 88 
      int mag_lower = fft_max_magnitude((u8 *)(& fft->lower_bins));
      #line 89 
      int mag_upper = fft_max_magnitude((u8 *)(& fft->upper_bins));
      #line 90 
      if (mag_upper > mag_lower) 
                                 #line 91 
                                 is_ctl = (_Bool)0; else 
                                                         #line 93 
                                                         is_ext = (_Bool)0;
    }
  }
  #line 96 
  if ((int)is_ctl != 0) {
    #line 97 
    return fft_max_index((u8 *)(& fft->lower_bins));
  }
  #line 98 
  return fft_max_index((u8 *)(& fft->upper_bins)) + 64;
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs.c"
static bool ath9k_check_chirping(struct ath_softc *sc, u8 *data, int datalen, bool is_ctl, bool is_ext)
{
  #line 103 
  int i;
  #line 104 
  int max_bin[4U];
  #line 107 
  int prev_delta;
  #line 105 
  struct ath_hw *ah = sc->sc_ah;
  #line 106 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 109 
  if (((unsigned long)(ah->curchan)->channelFlags & 48UL) != 0UL) {
    #line 110 
    struct ath9k_dfs_fft_40 *fft = (struct ath9k_dfs_fft_40 *)data;
    #line 111 
    int num_fft_packets = (int)((unsigned long)datalen / 70UL);
    #line 112 
    if (num_fft_packets == 0) 
                              #line 113 
                              return (_Bool)0;
    #line 115 
    if ((common->debug_mask & 65536) != 0) 
                                           #line 115 
                                           ath_printk((char *)"\001",common,(char *)"HT40: datalen=%d, num_fft_packets=%d\n",datalen,num_fft_packets);
    #line 117 
    if (num_fft_packets <= 3) {
      #line 118 
      if ((common->debug_mask & 65536) != 0) 
                                             #line 118 
                                             ath_printk((char *)"\001",common,(char *)"not enough packets for chirp\n");
      #line 119 
      return (_Bool)0;
    }
    #line 122 
    if ((unsigned long)datalen % 70UL == 2UL) {
      #line 123 
      fft = (struct ath9k_dfs_fft_40 *)(data + 2U);
      #line 124 
      if ((common->debug_mask & 65536) != 0) 
                                             #line 124 
                                             ath_printk((char *)"\001",common,(char *)"fixing datalen by 2\n");
    }
    #line 126 
    if (((unsigned long)(ah->curchan)->channelFlags & 32UL) != 0UL) {
      #line 127 
      bool __tmp = is_ctl;
      #line 127 
      is_ctl = is_ext;
      #line 127 
      is_ext = __tmp;
    }
    #line 129 
    i = 0;
    #line 129 
    while (i <= 3) {
      #line 130 
      max_bin[i] = ath9k_get_max_index_ht40(fft + (unsigned long)i,(_Bool)((bool)((int)is_ctl) != 0),(_Bool)((bool)((int)is_ext) != 0));
      #line 129 
      i ++;
    }
  }
  else {
    #line 133 
    struct ath9k_dfs_fft_20 *fft_0 = (struct ath9k_dfs_fft_20 *)data;
    #line 134 
    int num_fft_packets_0 = (int)((unsigned long)datalen / 31UL);
    #line 135 
    if (num_fft_packets_0 == 0) 
                                #line 136 
                                return (_Bool)0;
    #line 137 
    if ((common->debug_mask & 65536) != 0) 
                                           #line 137 
                                           ath_printk((char *)"\001",common,(char *)"HT20: datalen=%d, num_fft_packets=%d\n",datalen,num_fft_packets_0);
    #line 139 
    if (num_fft_packets_0 <= 3) {
      #line 140 
      if ((common->debug_mask & 65536) != 0) 
                                             #line 140 
                                             ath_printk((char *)"\001",common,(char *)"not enough packets for chirp\n");
      #line 141 
      return (_Bool)0;
    }
    #line 144 
    i = 0;
    #line 144 
    while (i <= 3) {
      #line 145 
      max_bin[i] = fft_max_index((u8 *)(& (fft_0 + (unsigned long)i)->lower_bins)) ^ 32;
      #line 144 
      i ++;
    }
  }
  #line 147 
  if ((common->debug_mask & 65536) != 0) 
                                         #line 147 
                                         ath_printk((char *)"\001",common,(char *)"bin_max = [%d, %d, %d, %d]\n",max_bin[0],max_bin[1],max_bin[2],max_bin[3]);
  #line 154 
  prev_delta = 0;
  #line 155 
  i = 0;
  #line 155 
  while (i <= 2) {
    {
      #line 160 
      int __x;
      #line 160 
      int tmp_1;
      #line 168 
      int __x_1;
      #line 168 
      int tmp_5;
      #line 156 
      int ddelta = -1;
      #line 157 
      int delta = max_bin[i + 1] - max_bin[i];
      #line 160 
      __x = delta;
      #line 160 
      if (__x < 0) 
                   #line 160 
                   tmp_1 = - __x; else 
                                       #line 160 
                                       tmp_1 = __x;
      #line 160 
      if (tmp_1 <= 0) 
                      #line 160 
                      goto _LOR;
      else {
        #line 160 
        int __x_0;
        #line 160 
        int tmp_3;
        #line 160 
        __x_0 = delta;
        #line 160 
        if (__x_0 < 0) 
                       #line 160 
                       tmp_3 = - __x_0; else 
                                             #line 160 
                                             tmp_3 = __x_0;
        #line 160 
        if (tmp_3 > 10) {
          #line 160 
          _LOR: {
                  #line 161 
                  if ((common->debug_mask & 65536) != 0) 
                                                         #line 161 
                                                         ath_printk((char *)"\001",common,(char *)"CHIRP: invalid delta %d ",delta,i);
                  #line 163 
                  return (_Bool)0;
                }
        }
      }
      #line 165 
      if (i == 0) 
                  #line 166 
                  goto done;
      #line 167 
      ddelta = delta - prev_delta;
      #line 168 
      __x_1 = ddelta;
      #line 168 
      if (__x_1 < 0) 
                     #line 168 
                     tmp_5 = - __x_1; else 
                                           #line 168 
                                           tmp_5 = __x_1;
      #line 168 
      if (tmp_5 > 2) {
        #line 169 
        if ((common->debug_mask & 65536) != 0) 
                                               #line 169 
                                               ath_printk((char *)"\001",common,(char *)"CHIRP: ddelta %d too high\n",ddelta);
        #line 171 
        return (_Bool)0;
      }
      #line 173 
      done: 
            #line 173 
      ;
      #line 174 
      if ((common->debug_mask & 65536) != 0) 
                                             #line 174 
                                             ath_printk((char *)"\001",common,(char *)"CHIRP - %d: delta=%d, ddelta=%d\n",i,delta,ddelta);
      #line 176 
      prev_delta = delta;
    }
    #line 155 
    i ++;
  }
  #line 178 
  return (_Bool)1;
}

#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs.c"
static u32 dur_to_usecs(struct ath_hw *ah, u32 dur)
{
  #line 187 
  u32 nsecs;
  #line 185 
  u32 AR93X_NSECS_PER_DUR = 800U;
  #line 186 
  u32 AR93X_NSECS_PER_DUR_FAST = 727U;
  #line 189 
  if (((unsigned long)(ah->curchan)->channelFlags & 1UL) != 0UL && (ah->caps.hw_caps & 128U) != 0U) 
    #line 190 
    nsecs = dur * 727U; else 
                             #line 192 
                             nsecs = dur * 800U;
  #line 194 
  return (nsecs + 500U) / 1000U;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs.c"
static bool ath9k_postprocess_radar_event(struct ath_softc *sc, struct ath_radar_data *ard, struct pulse_event *pe)
{
  #line 204 
  u8 rssi;
  #line 205 
  u16 dur;
  #line 211 
  ard->pulse_bw_info = (unsigned char)((unsigned int)ard->pulse_bw_info & 3U);
  #line 213 
  switch ((int)ard->pulse_bw_info) {
    #line 214 
    case 1: 
            #line 214 
    ;
    #line 216 
    dur = (unsigned short)ard->pulse_length_pri;
    #line 217 
    (sc->debug.stats.dfs_stats.pri_phy_errors) ++;
    #line 222 
    if ((int)ard->rssi + 2 >= (int)ard->ext_rssi) 
                                                  #line 222 
                                                  rssi = ard->rssi; else 
                                                                    #line 222 
                                                                    rssi = (unsigned char)0U;
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 226 
    dur = (unsigned short)ard->pulse_length_ext;
    #line 227 
    (sc->debug.stats.dfs_stats.ext_phy_errors) ++;
    #line 232 
    if ((int)ard->ext_rssi + 11 >= (int)ard->rssi) 
                                                   #line 232 
                                                   rssi = ard->ext_rssi; else 
                                                                    #line 232 
                                                                    rssi = (unsigned char)0U;
    #line 233 
    break;
    #line 234 
    case 3: 
            #line 234 
    ;
    #line 242 
    if ((int)ard->pulse_length_ext >= (int)ard->pulse_length_pri) 
                                                                  #line 243 
                                                                  dur = (unsigned short)ard->pulse_length_ext; else 
                                                                    #line 245 
                                                                    dur = (unsigned short)ard->pulse_length_pri;
    #line 246 
    (sc->debug.stats.dfs_stats.dc_phy_errors) ++;
    #line 249 
    if ((int)ard->ext_rssi > (int)ard->rssi) 
                                             #line 249 
                                             rssi = ard->ext_rssi; else 
                                                                    #line 249 
                                                                    rssi = ard->rssi;
    #line 250 
    break;
    #line 251 
    default: 
             #line 251 
    ;
    #line 256 
    (sc->debug.stats.dfs_stats.bwinfo_discards) ++;
    #line 257 
    return (_Bool)0;
  }
  #line 260 
  if ((unsigned int)rssi == 0U) {
    #line 261 
    (sc->debug.stats.dfs_stats.rssi_discards) ++;
    #line 262 
    return (_Bool)0;
  }
  #line 266 
  pe->width = (unsigned char)dur_to_usecs(sc->sc_ah,(unsigned int)dur);
  #line 267 
  pe->rssi = rssi;
  #line 269 
  (sc->debug.stats.dfs_stats.pulses_detected) ++;
  #line 270 
  return (_Bool)1;
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs.c"
static void ath9k_dfs_process_radar_pulse(struct ath_softc *sc, struct pulse_event *pe)
{
  #line 276 
  struct dfs_pattern_detector *pd = sc->dfs_detector;
  #line 277 
  (sc->debug.stats.dfs_stats.pulses_processed) ++;
  #line 278 
  if (pd == (struct dfs_pattern_detector *)0) 
                                              #line 279 
                                              return;
  #line 280 
  if (! (*(pd->add_pulse))(pd,pe,(struct radar_detector_specs *)0)) 
                                                                    #line 281 
                                                                    return;
  #line 282 
  (sc->debug.stats.dfs_stats.radar_detected) ++;
  #line 283 
  ieee80211_radar_detected(sc->hw);
  #line 284 
  return;
}

#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs.c"
void ath9k_dfs_process_phyerr(struct ath_softc *sc, void *data, struct ath_rx_status *rs, u64 mactime)
{
  #line 292 
  struct ath_radar_data ard;
  #line 293 
  u16 datalen;
  #line 294 
  char *vdata_end;
  #line 295 
  struct pulse_event pe;
  #line 296 
  struct ath_hw *ah = sc->sc_ah;
  #line 297 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 299 
  (sc->debug.stats.dfs_stats.pulses_total) ++;
  #line 300 
  if ((unsigned int)rs->rs_phyerr != 5U && (unsigned int)rs->rs_phyerr != 36U) {
    #line 302 
    if ((common->debug_mask & 65536) != 0) 
                                           #line 302 
                                           ath_printk((char *)"\001",common,(char *)"Error: rs_phyer=0x%x not a radar error\n",(int)rs->rs_phyerr);
    #line 305 
    (sc->debug.stats.dfs_stats.pulses_no_dfs) ++;
    #line 306 
    return;
  }
  #line 309 
  datalen = rs->rs_datalen;
  #line 310 
  if ((unsigned int)datalen == 0U) {
    #line 311 
    (sc->debug.stats.dfs_stats.datalen_discards) ++;
    #line 312 
    return;
  }
  #line 315 
  ard.rssi = (unsigned char)rs->rs_rssi_ctl[0];
  #line 316 
  ard.ext_rssi = (unsigned char)rs->rs_rssi_ext[0];
  #line 322 
  if (((int)ard.rssi & 128) != 0) 
                                  #line 323 
                                  ard.rssi = (unsigned char)0U;
  #line 324 
  if (((int)ard.ext_rssi & 128) != 0) 
                                      #line 325 
                                      ard.ext_rssi = (unsigned char)0U;
  #line 327 
  vdata_end = (char *)(data + (unsigned long)datalen);
  #line 328 
  ard.pulse_bw_info = (unsigned char)*(vdata_end + 18446744073709551615U);
  #line 329 
  ard.pulse_length_ext = (unsigned char)*(vdata_end + 18446744073709551614U);
  #line 330 
  ard.pulse_length_pri = (unsigned char)*(vdata_end + 18446744073709551613U);
  #line 331 
  pe.freq = (ah->curchan)->channel;
  #line 332 
  pe.ts = mactime;
  #line 333 
  if (! ath9k_postprocess_radar_event(sc,& ard,& pe)) 
                                                      #line 334 
                                                      return;
  #line 336 
  if ((unsigned int)pe.width + 235U <= 88U) {
    #line 338 
    bool is_ctl = (_Bool)(((int)ard.pulse_bw_info & 1) != 0);
    #line 339 
    bool is_ext = (_Bool)(((int)ard.pulse_bw_info & 2) != 0);
    #line 340 
    int clen = (int)datalen + -3;
    #line 341 
    pe.chirp = ath9k_check_chirping(sc,(u8 *)data,clen,(_Bool)((bool)((int)is_ctl) != 0),(_Bool)((bool)((int)is_ext) != 0));
  }
  else 
       #line 343 
       pe.chirp = (_Bool)0;
  #line 346 
  if ((common->debug_mask & 65536) != 0) 
                                         #line 346 
                                         ath_printk((char *)"\001",common,(char *)"ath9k_dfs_process_phyerr: type=%d, freq=%d, ts=%llu, ",(int)ard.pulse_bw_info,(int)pe.freq,pe.ts,(int)pe.width,(int)pe.rssi,pe.ts - sc->dfs_prev_pulse_ts);
  #line 351 
  sc->dfs_prev_pulse_ts = pe.ts;
  #line 352 
  if (((int)ard.pulse_bw_info & 1) != 0) 
                                         #line 353 
                                         ath9k_dfs_process_radar_pulse(sc,& pe);
  #line 354 
  if (((unsigned long)(ah->curchan)->channelFlags & 48UL) != 0UL && ((int)ard.pulse_bw_info & 2) != 0) {
    #line 356 
    unsigned int tmp_1;
    #line 356 
    if (((unsigned long)(ah->curchan)->channelFlags & 16UL) != 0UL) 
                                                                    #line 356 
                                                                    tmp_1 = 20U; else 
                                                                    #line 356 
                                                                    tmp_1 = 65516U;
    #line 356 
    pe.freq = (unsigned short)((unsigned int)pe.freq + tmp_1);
    #line 357 
    ath9k_dfs_process_radar_pulse(sc,& pe);
  }
  #line 359 
  return;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 870  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static int cif_del_timer_sync_3(struct timer_list *timer);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 846  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static int cif_request_irq_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 854  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1083 
int pci_read_config_byte(struct pci_dev *, int, u8 *);
#line 1085 
#line 1085 
int pci_read_config_dword(struct pci_dev *, int, u32 *);
#line 1086 
#line 1086 
int pci_write_config_byte(struct pci_dev *, int, u8);
#line 1088 
#line 1088 
int pci_write_config_dword(struct pci_dev *, int, u32);
#line 1090 
#line 1090 
int pcie_capability_read_word(struct pci_dev *, int, u16 *);
#line 1094 
#line 1094 
int pcie_capability_clear_and_set_word(struct pci_dev *, int, u16, u16);
#line 1111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pcie_capability_clear_word(struct pci_dev *dev, int pos, u16 clear)
{
  #line 1114 
  return pcie_capability_clear_and_set_word(dev,pos,
                                         (unsigned short)((int)clear),
                                         (unsigned short)0);
}

#line 1135 
#line 1135 
int pcim_enable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1346 
#line 878  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 886  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1436 
int pci_enable_msi(struct pci_dev *);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1972 
#line 1972 
void **pcim_iomap_table(struct pci_dev *);
#line 1973 
#line 1973 
int pcim_iomap_regions(struct pci_dev *, int, char *);
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 4123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 838  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static struct ieee80211_hw *cif_ieee80211_alloc_hw_0(size_t priv_data_len, struct ieee80211_ops *ops);
#line 4301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 862  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static void cif_ieee80211_free_hw_0(struct ieee80211_hw *hw);
#line 1041  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
#line 1041 
bool ath9k_hw_wait(struct ath_hw *, u32, u32, u32, u32);
#line 1055 
#line 1055 
bool ath9k_hw_disable(struct ath_hw *);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
bool is_ath9k_unloaded;
#line 1138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
int ath_pci_init(void);
#line 1139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 1095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
void ath_pci_exit(void);
#line 24 
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
int ath9k_use_msi;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
static struct pci_device_id ath_pci_id_table[152U] = {{.vendor = 5772U, .device = 35U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 36U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 39U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 41U, .subvendor = 5772U, .subdevice = 8342U, .driver_data = 2048UL}, {.vendor = 5772U, .device = 41U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 42U, .subvendor = 6715U, .subdevice = 7281U, .driver_data = 64UL}, {.vendor = 5772U, .device = 42U, .subvendor = 4187U, .subdevice = 57375U, .driver_data = 64UL}, {.vendor = 5772U, .device = 42U, .subvendor = 4525U, .subdevice = 26162U, .driver_data = 64UL}, {.vendor = 5772U, .device = 42U, .subvendor = 4525U, .subdevice = 26178U, .driver_data = 64UL}, {.vendor = 5772U, .device = 42U, .subvendor = 6706U, .subdevice = 774U, .driver_data = 64UL}, {.vendor = 5772U, .device = 42U, .subvendor = 6239U, .subdevice = 12445U, .driver_data = 64UL}, {.vendor = 5772U, .device = 42U, .subvendor = 4303U, .subdevice = 5244U, .driver_data = 64UL}, {.vendor = 5772U, .device = 42U, .subvendor = 4303U, .subdevice = 5245U, .driver_data = 64UL}, {.vendor = 5772U, .device = 42U, .subvendor = 4303U, .subdevice = 5430U, .driver_data = 64UL}, {.vendor = 5772U, .device = 42U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 43U, .subvendor = 6715U, .subdevice = 11319U, .driver_data = 32UL}, {.vendor = 5772U, .device = 43U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 44U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 45U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 46U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 48U, .subvendor = 6742U, .subdevice = 8192U, .driver_data = 1024UL}, {.vendor = 5772U, .device = 48U, .subvendor = 6742U, .subdevice = 8193U, .driver_data = 1024UL}, {.vendor = 5772U, .device = 48U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 50U, .subvendor = 6715U, .subdevice = 8326U, .driver_data = 33UL}, {.vendor = 5772U, .device = 50U, .subvendor = 6715U, .subdevice = 4663U, .driver_data = 33UL}, {.vendor = 5772U, .device = 50U, .subvendor = 6715U, .subdevice = 8486U, .driver_data = 33UL}, {.vendor = 5772U, .device = 50U, .subvendor = 6715U, .subdevice = 4714U, .driver_data = 33UL}, {.vendor = 5772U, .device = 50U, .subvendor = 6715U, .subdevice = 8530U, .driver_data = 34UL}, {.vendor = 5772U, .device = 50U, .subvendor = 4187U, .subdevice = 57461U, .driver_data = 34UL}, {.vendor = 5772U, .device = 50U, .subvendor = 5772U, .subdevice = 12569U, .driver_data = 32UL}, {.vendor = 5772U, .device = 50U, .subvendor = 5772U, .subdevice = 12578U, .driver_data = 32UL}, {.vendor = 5772U, .device = 50U, .subvendor = 6239U, .subdevice = 12569U, .driver_data = 32UL}, {.vendor = 5772U, .device = 50U, .subvendor = 6239U, .subdevice = 12327U, .driver_data = 32UL}, {.vendor = 5772U, .device = 50U, .subvendor = 5197U, .subdevice = 16645U, .driver_data = 32UL}, {.vendor = 5772U, .device = 50U, .subvendor = 5197U, .subdevice = 16646U, .driver_data = 32UL}, {.vendor = 5772U, .device = 50U, .subvendor = 5197U, .subdevice = 16653U, .driver_data = 32UL}, {.vendor = 5772U, .device = 50U, .subvendor = 5197U, .subdevice = 16654U, .driver_data = 32UL}, {.vendor = 5772U, .device = 50U, .subvendor = 5197U, .subdevice = 16655U, .driver_data = 32UL}, {.vendor = 5772U, .device = 50U, .subvendor = 5197U, .subdevice = 50950U, .driver_data = 32UL}, {.vendor = 5772U, .device = 50U, .subvendor = 5197U, .subdevice = 50816U, .driver_data = 32UL}, {.vendor = 5772U, .device = 50U, .subvendor = 5197U, .subdevice = 50952U, .driver_data = 32UL}, {.vendor = 5772U, .device = 50U, .subvendor = 6058U, .subdevice = 12824U, .driver_data = 32UL}, {.vendor = 5772U, .device = 50U, .subvendor = 6058U, .subdevice = 12825U, .driver_data = 32UL}, {.vendor = 5772U, .device = 50U, .subvendor = 6715U, .subdevice = 11415U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 6715U, .subdevice = 8448U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 7254U, .subdevice = 16385U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 4525U, .subdevice = 26151U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 4525U, .subdevice = 26152U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 4187U, .subdevice = 57422U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 4187U, .subdevice = 57423U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 5199U, .subdevice = 29079U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 7066U, .subdevice = 8192U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 7066U, .subdevice = 8193U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 6715U, .subdevice = 4486U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 6715U, .subdevice = 8070U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 6715U, .subdevice = 4501U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 6715U, .subdevice = 8085U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 7066U, .subdevice = 7168U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 7066U, .subdevice = 7169U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 4163U, .subdevice = 34061U, .driver_data = 512UL}, {.vendor = 5772U, .device = 50U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 51U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 52U, .subvendor = 6715U, .subdevice = 8470U, .driver_data = 4UL}, {.vendor = 5772U, .device = 52U, .subvendor = 4525U, .subdevice = 26209U, .driver_data = 4UL}, {.vendor = 5772U, .device = 52U, .subvendor = 5772U, .subdevice = 12567U, .driver_data = 16UL}, {.vendor = 5772U, .device = 52U, .subvendor = 6058U, .subdevice = 12820U, .driver_data = 16UL}, {.vendor = 5772U, .device = 52U, .subvendor = 6505U, .subdevice = 145U, .driver_data = 16UL}, {.vendor = 5772U, .device = 52U, .subvendor = 6715U, .subdevice = 8464U, .driver_data = 16UL}, {.vendor = 5772U, .device = 52U, .subvendor = 4163U, .subdevice = 34062U, .driver_data = 16UL}, {.vendor = 5772U, .device = 52U, .subvendor = 4525U, .subdevice = 26161U, .driver_data = 16UL}, {.vendor = 5772U, .device = 52U, .subvendor = 4525U, .subdevice = 26177U, .driver_data = 16UL}, {.vendor = 5772U, .device = 52U, .subvendor = 4156U, .subdevice = 6244U, .driver_data = 16UL}, {.vendor = 5772U, .device = 52U, .subvendor = 5325U, .subdevice = 99U, .driver_data = 16UL}, {.vendor = 5772U, .device = 52U, .subvendor = 5325U, .subdevice = 100U, .driver_data = 16UL}, {.vendor = 5772U, .device = 52U, .subvendor = 4303U, .subdevice = 6019U, .driver_data = 16UL}, {.vendor = 5772U, .device = 52U, .subvendor = 4136U, .subdevice = 523U, .driver_data = 16UL}, {.vendor = 5772U, .device = 52U, .subvendor = 4136U, .subdevice = 768U, .driver_data = 16UL}, {.vendor = 5772U, .device = 48U, .subvendor = 6742U, .subdevice = 8195U, .driver_data = 1024UL}, {.vendor = 5772U, .device = 52U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 55U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 54U, .subvendor = 5772U, .subdevice = 12328U, .driver_data = 296UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6715U, .subdevice = 8566U, .driver_data = 296UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4187U, .subdevice = 57448U, .driver_data = 128UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6239U, .subdevice = 41241U, .driver_data = 128UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 1586U, .driver_data = 128UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 1714U, .driver_data = 128UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 2114U, .driver_data = 128UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 6210U, .driver_data = 128UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 26225U, .driver_data = 128UL}, {.vendor = 5772U, .device = 54U, .subvendor = 7066U, .subdevice = 10257U, .driver_data = 128UL}, {.vendor = 5772U, .device = 54U, .subvendor = 7066U, .subdevice = 10258U, .driver_data = 128UL}, {.vendor = 5772U, .device = 54U, .subvendor = 7066U, .subdevice = 10401U, .driver_data = 128UL}, {.vendor = 5772U, .device = 54U, .subvendor = 7066U, .subdevice = 10403U, .driver_data = 128UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6715U, .subdevice = 8586U, .driver_data = 128UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6715U, .subdevice = 12170U, .driver_data = 128UL}, {.vendor = 5772U, .device = 54U, .subvendor = 5772U, .subdevice = 12325U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 5772U, .subdevice = 12326U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 5772U, .subdevice = 12331U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4187U, .subdevice = 57449U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6239U, .subdevice = 12328U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 1570U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 1650U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 1634U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 1698U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 1666U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6715U, .subdevice = 8506U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6715U, .subdevice = 8508U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4156U, .subdevice = 6371U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4156U, .subdevice = 8575U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4156U, .subdevice = 8197U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4136U, .subdevice = 524U, .driver_data = 160UL}, {.vendor = 5772U, .device = 54U, .subvendor = 5197U, .subdevice = 16666U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 5197U, .subdevice = 16667U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 5197U, .subdevice = 16668U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 5197U, .subdevice = 16669U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 5197U, .subdevice = 16670U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 5197U, .subdevice = 16681U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 5197U, .subdevice = 16682U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 5772U, .subdevice = 12327U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 5772U, .subdevice = 12332U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 1602U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 1618U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 1554U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 2098U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 6194U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 1682U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 2051U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4525U, .subdevice = 2067U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6715U, .subdevice = 8496U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6715U, .subdevice = 8507U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6715U, .subdevice = 8578U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6715U, .subdevice = 8587U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6715U, .subdevice = 8588U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6715U, .subdevice = 12162U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 5199U, .subdevice = 29186U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 7066U, .subdevice = 10256U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 7066U, .subdevice = 10259U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 7066U, .subdevice = 10402U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 7066U, .subdevice = 10404U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6239U, .subdevice = 12327U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6239U, .subdevice = 41248U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4187U, .subdevice = 57471U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4187U, .subdevice = 57487U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4187U, .subdevice = 57473U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4187U, .subdevice = 57489U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4187U, .subdevice = 57497U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6058U, .subdevice = 12326U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 6058U, .subdevice = 16422U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4163U, .subdevice = 34290U, .driver_data = 288UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4136U, .subdevice = 526U, .driver_data = 2336UL}, {.vendor = 5772U, .device = 54U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 32UL}};
#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
static void ath_pci_read_cachesize(struct ath_common *common, int *csz)
{
  #line 787 
  void *__mptr;
  #line 785 
  u8 u8tmp;
  #line 784 
  struct ath_softc *sc = (struct ath_softc *)common->priv;
  #line 787 
  __mptr = (void *)sc->dev;
  #line 787 
  pci_read_config_byte(((struct pci_dev *)(__mptr + 18446744073709551440U)),12,& u8tmp);
  #line 788 
  *csz = (int)u8tmp;
  #line 796 
  if (*csz == 0) 
                 #line 797 
                 *csz = 8;
  #line 798 
  return;
}

#line 800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
static bool ath_pci_eeprom_read(struct ath_common *common, u32 off, u16 *data)
{
  #line 807 
  unsigned int tmp;
  #line 814 
  unsigned int tmp_2;
  #line 806 
  unsigned int tmp_0;
  #line 814 
  unsigned int tmp_3;
  #line 802 
  struct ath_hw *ah = (struct ath_hw *)common->ah;
  #line 804 
  (*((common->ops)->read))((void *)ah,(off << 2) + 8192U);
  #line 806 
  if (ah->hw_version.macVersion != 768U) {
    #line 807 
    if (ah->hw_version.macVersion > 447U) 
                                          #line 807 
                                          tmp = 16516U; else 
                                                             #line 807 
                                                             tmp = 16508U;
    #line 806 
    tmp_0 = tmp;
  }
  else 
       #line 806 
       tmp_0 = 16584U;
  #line 806 
  ;
  #line 806 
  if (! ath9k_hw_wait(ah,tmp_0,327680U,0U,100000U)) 
                                                    #line 811 
                                                    return (_Bool)0;
  #line 814 
  if (ah->hw_version.macVersion != 768U) {
    #line 814 
    if (ah->hw_version.macVersion > 447U) 
                                          #line 814 
                                          tmp_2 = 16516U; else 
                                                               #line 814 
                                                               tmp_2 = 16508U;
    #line 814 
    tmp_3 = tmp_2;
  }
  else 
       #line 814 
       tmp_3 = 16584U;
  #line 814 
  ;
  #line 814 
  *data = (unsigned short)(*((common->ops)->read))((void *)ah,tmp_3);
  #line 817 
  return (_Bool)1;
}

#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
static void ath_pci_aspm_init(struct ath_common *common)
{
  #line 825 
  void *__mptr;
  #line 826 
  struct pci_dev *parent;
  #line 827 
  u16 aspm;
  #line 823 
  struct ath_softc *sc = (struct ath_softc *)common->priv;
  #line 824 
  struct ath_hw *ah = sc->sc_ah;
  #line 825 
  __mptr = (void *)sc->dev;
  #line 825 
  struct pci_dev *pdev = ((struct pci_dev *)(__mptr + 18446744073709551440U));
  #line 829 
  if (! ah->is_pciexpress) 
                           #line 830 
                           return;
  #line 832 
  parent = (pdev->bus)->self;
  #line 833 
  if (parent == (struct pci_dev *)0) 
                                     #line 834 
                                     return;
  #line 836 
  if (ath9k_hw_get_btcoex_scheme(ah) != (unsigned int)ATH_BTCOEX_CFG_NONE) 
    #line 836 
    if (ah->hw_version.macVersion == 192U) {
      #line 839 
      pcie_capability_clear_word(pdev,16,(unsigned short)3);
      #line 846 
      pcie_capability_clear_word(parent,16,(unsigned short)3);
      #line 849 
      ath_printk((char *)"\001",common,(char *)"Disabling ASPM since BTCOEX is enabled\n");
      #line 850 
      return;
    }
  #line 866 
  if (ah->hw_version.macVersion == 640U) 
                                         #line 867 
                                         pci_read_config_dword(pdev,1804,& ah->config.aspm_l1_fix);
  #line 869 
  pcie_capability_read_word(parent,16,& aspm);
  #line 870 
  if (((int)aspm & 3) != 0) {
    #line 871 
    ah->aspm_enabled = (_Bool)1;
    #line 873 
    ath9k_hw_configpcipowersave(ah,(_Bool)0);
    #line 874 
    ath_printk((char *)"\001",common,(char *)"ASPM enabled: 0x%x\n",(int)aspm);
  }
  #line 876 
  return;
}

#line 878  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
static struct ath_bus_ops ath_pci_bus_ops = {.read_cachesize = & ath_pci_read_cachesize, .eeprom_read = & ath_pci_eeprom_read, .aspm_init = & ath_pci_aspm_init};
#line 885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
static int ath_pci_probe(struct pci_dev *pdev, struct pci_device_id *id)
{
  #line 887 
  struct ath_softc *sc;
  #line 888 
  struct ieee80211_hw *hw;
  #line 889 
  u8 csz;
  #line 890 
  u32 val;
  #line 892 
  char hw_name[64U];
  #line 891 
  int ret = 0;
  #line 893 
  int msi_enabled = 0;
  #line 895 
  if (pcim_enable_device(pdev) != 0) 
                                     #line 896 
                                     return -5;
  #line 898 
  ret = pci_set_dma_mask(pdev,4294967295ULL);
  #line 899 
  if (ret != 0) {
    #line 900 
    printk((char *)"\001");
    #line 901 
    return ret;
  }
  #line 904 
  ret = pci_set_consistent_dma_mask(pdev,4294967295ULL);
  #line 905 
  if (ret != 0) {
    #line 906 
    printk((char *)"\001");
    #line 907 
    return ret;
  }
  #line 914 
  pci_read_config_byte(pdev,12,& csz);
  #line 915 
  if ((unsigned int)csz == 0U) {
    #line 923 
    csz = (unsigned char)16U;
    #line 924 
    pci_write_config_byte(pdev,12,(unsigned char)((int)csz));
  }
  #line 931 
  pci_write_config_byte(pdev,13,(unsigned char)168);
  #line 933 
  pci_set_master(pdev);
  #line 939 
  pci_read_config_dword(pdev,64,& val);
  #line 940 
  if ((val & 65280U) != 0U) 
                            #line 941 
                            pci_write_config_dword(pdev,64,val & 4294902015U);
  #line 943 
  ret = pcim_iomap_regions(pdev,1,(char *)"ath9k");
  #line 944 
  if (ret != 0) {
    #line 945 
    _dev_err(& pdev->dev,(char *)"PCI memory region reserve error\n");
    #line 946 
    return -19;
  }
  #line 949 
  ath9k_fill_chanctx_ops();
  #line 950 
  hw = cif_ieee80211_alloc_hw_0(16840UL,& ath9k_ops);
  #line 951 
  if (hw == (struct ieee80211_hw *)0) {
    #line 952 
    _dev_err(& pdev->dev,(char *)"No memory for ieee80211_hw\n");
    #line 953 
    return -12;
  }
  #line 956 
  SET_IEEE80211_DEV(hw,& pdev->dev);
  #line 957 
  pci_set_drvdata(pdev,(void *)hw);
  #line 959 
  sc = (struct ath_softc *)hw->priv;
  #line 960 
  sc->hw = hw;
  #line 961 
  sc->dev = & pdev->dev;
  #line 962 
  sc->mem = *pcim_iomap_table(pdev);
  #line 963 
  sc->driver_data = id->driver_data;
  #line 965 
  if (ath9k_use_msi != 0) {
    #line 966 
    if (pci_enable_msi(pdev) == 0) {
      #line 967 
      msi_enabled = 1;
      #line 968 
      _dev_err(& pdev->dev,(char *)"Using MSI\n");
    }
    else 
         #line 970 
         _dev_err(& pdev->dev,(char *)"Using INTx\n");
  }
  #line 974 
  if (msi_enabled == 0) 
                        #line 975 
                        ret = cif_request_irq_0(pdev->irq,& ath_isr,128UL,(char *)"ath9k",(void *)sc); else 
                                                                    #line 977 
                                                                    ret = cif_request_irq_0(pdev->irq,& ath_isr,0UL,(char *)"ath9k",(void *)sc);
  #line 979 
  if (ret != 0) {
    #line 980 
    _dev_err(& pdev->dev,(char *)"request_irq failed\n");
    #line 981 
    goto err_irq;
  }
  #line 984 
  sc->irq = (int)pdev->irq;
  #line 986 
  ret = ath9k_init_device((unsigned short)((int)((unsigned short)id->device)),sc,& ath_pci_bus_ops);
  #line 987 
  if (ret != 0) {
    #line 988 
    _dev_err(& pdev->dev,(char *)"Failed to initialize device\n");
    #line 989 
    goto err_init;
  }
  #line 992 
  (sc->sc_ah)->msi_enabled = (_Bool)(msi_enabled != 0);
  #line 993 
  (sc->sc_ah)->msi_reg = 0U;
  #line 995 
  ath9k_hw_name(sc->sc_ah,(char *)(& hw_name),64UL);
  #line 996 
  _dev_info(& (hw->wiphy)->dev,(char *)"%s mem=0x%lx, irq=%d\n",(char *)(& hw_name),(unsigned long)sc->mem,pdev->irq);
  #line 999 
  return 0;
  #line 1001 
  err_init: 
            #line 1001 
  ;
  #line 1002 
  cif_free_irq_0((unsigned int)sc->irq,(void *)sc);
  #line 1003 
  err_irq: 
           #line 1003 
  ;
  #line 1004 
  cif_ieee80211_free_hw_0(hw);
  #line 1005 
  return ret;
}

#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
static void ath_pci_remove(struct pci_dev *pdev)
{
  #line 1010 
  struct ieee80211_hw *hw = pci_get_drvdata(pdev);
  #line 1011 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1013 
  if (! is_ath9k_unloaded) 
                           #line 1014 
                           (sc->sc_ah)->ah_flags |= 2U;
  #line 1015 
  ath9k_deinit_device(sc);
  #line 1016 
  cif_free_irq_0((unsigned int)sc->irq,(void *)sc);
  #line 1017 
  cif_ieee80211_free_hw_0(sc->hw);
  #line 1018 
  return;
}

#line 1022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
static int ath_pci_suspend(struct device *device)
{
  #line 1024 
  struct ieee80211_hw *hw = dev_get_drvdata(device);
  #line 1025 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1026 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 1028 
  if ((int)test_bit(7L,& common->op_flags) != 0) {
    #line 1029 
    _dev_info(device,(char *)"WOW is enabled, bypassing PCI suspend\n");
    #line 1030 
    return 0;
  }
  #line 1037 
  ath9k_stop_btcoex(sc);
  #line 1038 
  ath9k_hw_disable(sc->sc_ah);
  #line 1039 
  cif_del_timer_sync_3(& sc->sleep_timer);
  #line 1040 
  ath9k_hw_setpower(sc->sc_ah,(enum ath9k_power_mode)ATH9K_PM_FULL_SLEEP);
  #line 1042 
  return 0;
}

#line 1045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
static int ath_pci_resume(struct device *device)
{
  #line 1047 
  void *__mptr;
  #line 1052 
  u32 val;
  #line 1047 
  __mptr = (void *)device;
  #line 1047 
  struct pci_dev *pdev = ((struct pci_dev *)(__mptr + 18446744073709551440U));
  #line 1048 
  struct ieee80211_hw *hw = pci_get_drvdata(pdev);
  #line 1049 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1050 
  struct ath_hw *ah = sc->sc_ah;
  #line 1051 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 1059 
  pci_read_config_dword(pdev,64,& val);
  #line 1060 
  if ((val & 65280U) != 0U) 
                            #line 1061 
                            pci_write_config_dword(pdev,64,val & 4294902015U);
  #line 1063 
  ath_pci_aspm_init(common);
  #line 1064 
  ah->reset_power_on = (_Bool)0;
  #line 1066 
  return 0;
}

#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
static struct dev_pm_ops ath9k_pm_ops = {.suspend = & ath_pci_suspend, .resume = & ath_pci_resume, .freeze = & ath_pci_suspend, .thaw = & ath_pci_resume, .poweroff = & ath_pci_suspend, .restore = & ath_pci_resume};
#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
struct pci_device_id __mod_pci__ath_pci_id_table_device_table[152U];
#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
static struct pci_driver ath_pci_driver = {.name = (char *)"ath9k", .id_table = (struct pci_device_id *)(& ath_pci_id_table), .probe = & ath_pci_probe, .remove = & ath_pci_remove, .driver = {.pm = & ath9k_pm_ops}};
#line 1090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
int ath_pci_init(void)
{
  #line 1092 
  return cif___pci_register_driver(& ath_pci_driver,& __this_module,
                                (char *)"ath9k");
}

#line 1095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/pci.c"
void ath_pci_exit(void)
{
  #line 1097 
  cif_pci_unregister_driver(& ath_pci_driver);
  #line 1098 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
struct dev_pm_ops *emg_alias_ath9k_pm_ops = & ath9k_pm_ops;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
struct pci_driver *emg_alias_ath_pci_driver = & ath_pci_driver;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
struct pci_device_id (*emg_alias_ath_pci_id_table)[152U] = & ath_pci_id_table;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 107 
#line 107 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
int emg_wrapper_ath_pci_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 115 
  return ath_pci_probe(arg0,arg1);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
void emg_wrapper_ath_pci_remove(struct pci_dev *arg0)
{
  #line 120 
  ath_pci_remove(arg0);
  #line 121 
  return;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
int emg_wrapper_ath_pci_resume(struct device *arg0)
{
  #line 125 
  return ath_pci_resume(arg0);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
int emg_wrapper_ath_pci_suspend(struct device *arg0)
{
  #line 130 
  return ath_pci_suspend(arg0);
}

#line 838  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static struct ieee80211_hw *cif_ieee80211_alloc_hw_0(size_t priv_data_len, struct ieee80211_ops *ops)
{
  #line 842 
  return emg_ieee80211_alloc_hw(priv_data_len,ops);
}

#line 846  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static int cif_request_irq_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 850 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 854  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static void *cif_free_irq_0(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 858 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 862  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static void cif_ieee80211_free_hw_0(struct ieee80211_hw *hw)
{
  #line 866 
  emg_ieee80211_free_hw(hw);
  #line 867 
  return;
}

#line 870  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static int cif_del_timer_sync_3(struct timer_list *timer)
{
  #line 874 
  return emg_del_timer_sync(timer);
}

#line 878  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 882 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 886  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 890 
  emg_pci_unregister_driver(dev);
  #line 891 
  return;
}

/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 326 
int kstrtoull(char *, unsigned int, unsigned long long *);
#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
__inline static int kstrtoul(char *s, unsigned int base, unsigned long *res)
{
  #line 352 
  return kstrtoull(s,base,(unsigned long long *)res);
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 3013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
#line 3013 
loff_t default_llseek(struct file *, loff_t, int);
#line 3300 
#line 3300 
int simple_open(struct inode *, struct file *);
#line 3337 
#line 3337 
ssize_t simple_read_from_buffer(void *, size_t, loff_t *, void *, size_t);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 830  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/dfs_debug.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 441  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/dfs_debug.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs_debug.h"
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs_debug.c"
void ath9k_dfs_init_debug(struct ath_softc *sc);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs_debug.c"
static struct ath_dfs_pool_stats dfs_pool_stats = {.pool_reference = 0U, .pulse_allocated = 0U, .pulse_alloc_error = 0U, .pulse_used = 0U, .pseq_allocated = 0U, .pseq_alloc_error = 0U, .pseq_used = 0U};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs_debug.c"
static ssize_t read_file_dfs(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 39 
  char *buf;
  #line 49 
  char *tmp_0;
  #line 37 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 38 
  struct ath9k_hw_version *hw_ver = & (sc->sc_ah)->hw_version;
  #line 40 
  unsigned int len = 0U;
  #line 40 
  unsigned int size = 8000U;
  #line 41 
  ssize_t retval = 0L;
  #line 43 
  buf = (char *)kzalloc_0((unsigned long)size,3264U);
  #line 44 
  if (buf == (char *)0) 
                        #line 45 
                        return -12L;
  #line 49 
  if (((sc->sc_ah)->caps.hw_caps & 262144U) != 0U) 
                                                   #line 49 
                                                   tmp_0 = (char *)"enabled"; else 
                                                                    #line 49 
                                                                    tmp_0 = (char *)"disabled";
  #line 47 
  ;
  #line 47 
  ;
  #line 47 
  ;
  #line 47 
  ;
  #line 51 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"DFS support for ",hw_ver->macVersion,
                  (int)hw_ver->macRev,tmp_0) + len;
  #line 53 
  if (sc->dfs_detector == (struct dfs_pattern_detector *)0) {
    #line 55 
    len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"DFS detector not enabled\n") + len;
    #line 56 
    goto exit;
  }
  #line 59 
  dfs_pool_stats = (*((sc->dfs_detector)->get_stats))(sc->dfs_detector);
  #line 61 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"Pulse detector statistics:\n") + len;
  #line 62 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%28s : %10u\n",(char *)"pulse events reported   ",
                  sc->debug.stats.dfs_stats.pulses_total) + len;
  #line 63 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%28s : %10u\n",(char *)"invalid pulse events    ",
                  sc->debug.stats.dfs_stats.pulses_no_dfs) + len;
  #line 64 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%28s : %10u\n",(char *)"DFS pulses detected     ",
                  sc->debug.stats.dfs_stats.pulses_detected) + len;
  #line 65 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%28s : %10u\n",(char *)"Datalen discards        ",
                  sc->debug.stats.dfs_stats.datalen_discards) + len;
  #line 66 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%28s : %10u\n",(char *)"RSSI discards           ",
                  sc->debug.stats.dfs_stats.rssi_discards) + len;
  #line 67 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%28s : %10u\n",(char *)"BW info discards        ",
                  sc->debug.stats.dfs_stats.bwinfo_discards) + len;
  #line 68 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%28s : %10u\n",
                   (char *)"Primary channel pulses  ",
                   sc->debug.stats.dfs_stats.pri_phy_errors) + len;
  #line 69 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%28s : %10u\n",
                   (char *)"Secondary channel pulses",
                   sc->debug.stats.dfs_stats.ext_phy_errors) + len;
  #line 70 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%28s : %10u\n",
                   (char *)"Dual channel pulses     ",
                   sc->debug.stats.dfs_stats.dc_phy_errors) + len;
  #line 73 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"Radar detector statistics ",
                   (unsigned int)(sc->dfs_detector)->region) + len;
  #line 74 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%28s : %10u\n",
                   (char *)"Pulse events processed  ",
                   sc->debug.stats.dfs_stats.pulses_processed) + len;
  #line 75 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%28s : %10u\n",
                   (char *)"Radars detected         ",
                   sc->debug.stats.dfs_stats.radar_detected) + len;
  #line 76 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"Global Pool statistics:\n") + len;
  #line 77 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%28s : %10u\n",
                   (char *)"Pool references         ",
                   dfs_pool_stats.pool_reference) + len;
  #line 78 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%28s : %10u\n",
                   (char *)"Pulses allocated        ",
                   dfs_pool_stats.pulse_allocated) + len;
  #line 79 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%28s : %10u\n",
                   (char *)"Pulses alloc error      ",
                   dfs_pool_stats.pulse_alloc_error) + len;
  #line 80 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%28s : %10u\n",
                   (char *)"Pulses in use           ",
                   dfs_pool_stats.pulse_used) + len;
  #line 81 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%28s : %10u\n",
                   (char *)"Seqs. allocated         ",
                   dfs_pool_stats.pseq_allocated) + len;
  #line 82 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%28s : %10u\n",
                   (char *)"Seqs. alloc error       ",
                   dfs_pool_stats.pseq_alloc_error) + len;
  #line 83 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%28s : %10u\n",
                   (char *)"Seqs. in use            ",
                   dfs_pool_stats.pseq_used) + len;
  #line 85 
  exit: 
        #line 85 
  ;
  #line 86 
  if (len > size) 
                  #line 87 
                  len = size;
  #line 89 
  retval = simple_read_from_buffer((void *)user_buf,count,ppos,(void *)buf,(unsigned long)len);
  #line 90 
  kfree((void *)buf);
  #line 92 
  return retval;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs_debug.c"
static ssize_t write_file_dfs(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 105 
  size_t __UNIQUE_ID___x555;
  #line 105 
  unsigned long tmp;
  #line 101 
  unsigned long val;
  #line 102 
  char buf[32U];
  #line 103 
  ssize_t len;
  #line 100 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  {
    #line 105 
    __UNIQUE_ID___x555 = count;
    #line 105 
    unsigned long __UNIQUE_ID___y556 = 31UL;
    #line 105 
    if (__UNIQUE_ID___x555 < __UNIQUE_ID___y556) 
                                                 #line 105 
                                                 tmp = __UNIQUE_ID___x555; else 
                                                                    #line 105 
                                                                    tmp = __UNIQUE_ID___y556;
    }
  #line 105 
  len = (long)tmp;
  #line 106 
  if (copy_from_user((void *)(& buf),(void *)user_buf,(unsigned long)len) != 0UL) 
    #line 107 
    return -14L;
  #line 109 
  buf[len] = (char)0;
  #line 110 
  if (kstrtoul((char *)(& buf),0U,& val) != 0) 
                                               #line 111 
                                               return -22L;
  #line 113 
  if (val == 2147483648UL) 
                           #line 114 
                           memset((void *)(& sc->debug.stats.dfs_stats),0,44UL);
  #line 116 
  return (long)count;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs_debug.c"
static ssize_t write_file_simulate_radar(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 123 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 125 
  ieee80211_radar_detected(sc->hw);
  #line 127 
  return (long)count;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs_debug.c"
static struct file_operations fops_simulate_radar = {.owner = & __this_module, .llseek = & default_llseek, .write = & write_file_simulate_radar, .open = & simple_open};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs_debug.c"
static struct file_operations fops_dfs_stats = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_dfs, .write = & write_file_dfs, .open = & simple_open};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/dfs_debug.c"
void ath9k_dfs_init_debug(struct ath_softc *sc)
{
  #line 147 
  cif_debugfs_create_file((char *)"dfs_stats",(unsigned short)256,sc->debug.debugfs_phy,(void *)sc,& fops_dfs_stats);
  #line 149 
  cif_debugfs_create_file((char *)"dfs_simulate_radar",(unsigned short)128,sc->debug.debugfs_phy,(void *)sc,& fops_simulate_radar);
  #line 151 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/dfs_debug.i.aux"
struct file_operations *emg_alias_fops_dfs_stats = & fops_dfs_stats;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/dfs_debug.i.aux"
struct file_operations *emg_alias_fops_simulate_radar = & fops_simulate_radar;
#line 98 
#line 98 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/dfs_debug.i.aux"
long emg_wrapper_read_file_dfs(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 112 
  return read_file_dfs(arg0,arg1,arg2,arg3);
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/dfs_debug.i.aux"
long emg_wrapper_write_file_dfs(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 117 
  return write_file_dfs(arg0,arg1,arg2,arg3);
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/dfs_debug.i.aux"
long emg_wrapper_write_file_simulate_radar(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 122 
  return write_file_simulate_radar(arg0,arg1,arg2,arg3);
}

#line 441  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/dfs_debug.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 444 
  return ldv_kzalloc(size,flags);
}

#line 830  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/dfs_debug.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 834 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 412 
int kstrtobool(char *, bool *);
#line 422 
#line 422 
int kstrtou8_from_user(char *, size_t, unsigned int, u8 *);
#line 469 
#line 469 
int sprintf(char *, char * , ...);
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
__inline static int strtobool(char *s, bool *res)
{
  #line 194 
  return kstrtobool(s,res);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/tx99.i.aux"
#line 835 
static void cif_mutex_lock_mutex_of_ath_softc_2(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 842  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/tx99.i.aux"
static void cif_mutex_unlock_mutex_of_ath_softc_2(struct mutex *lock);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 849  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/tx99.i.aux"
static struct dentry *cif_debugfs_create_file_0(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw-ops.h"
__inline static void ath9k_hw_tx99_stop(struct ath_hw *ah)
{
  #line 94 
  (*(ath9k_hw_ops(ah)->tx99_stop))(ah);
  #line 95 
  return;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw-ops.h"
__inline static void ath9k_hw_tx99_set_txpower(struct ath_hw *ah, u8 power)
{
  #line 99 
  ;
  #line 99 
  if (ath9k_hw_ops(ah)->tx99_set_txpower != (void (*)(struct ath_hw *, u8 ))0) {
    #line 100 
    (*(ath9k_hw_ops(ah)->tx99_set_txpower))(ah,(unsigned char)((int)power));
  }
  #line 101 
  return;
}

#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/tx99.c"
void ath9k_tx99_init_debug(struct ath_softc *sc);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/tx99.c"
static void ath9k_tx99_stop(struct ath_softc *sc)
{
  #line 21 
  struct ath_hw *ah = sc->sc_ah;
  #line 22 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 24 
  ath_drain_all_txq(sc);
  #line 25 
  ath_startrecv(sc);
  #line 27 
  ath9k_hw_set_interrupts(ah);
  #line 28 
  ath9k_hw_enable_interrupts(ah);
  #line 30 
  ieee80211_wake_queues(sc->hw);
  #line 32 
  kfree_skb(sc->tx99_skb);
  #line 33 
  sc->tx99_skb = (struct sk_buff *)0;
  #line 34 
  sc->tx99_state = (_Bool)0;
  #line 36 
  ath9k_hw_tx99_stop(sc->sc_ah);
  #line 37 
  if ((common->debug_mask & 128) != 0) 
                                       #line 37 
                                       ath_printk((char *)"\001",common,(char *)"TX99 stopped\n");
  #line 38 
  return;
}

#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/tx99.c"
static struct sk_buff *ath9k_build_tx99_skb(struct ath_softc *sc)
{
  #line 51 
  struct ieee80211_tx_rate *rate;
  #line 54 
  struct ieee80211_hdr *hdr;
  #line 55 
  struct ieee80211_tx_info *tx_info;
  #line 56 
  struct sk_buff *skb;
  #line 57 
  struct ath_vif *avp;
  #line 42 
  u8 PN9Data[64U] = {(unsigned char)255U, (unsigned char)135U, (unsigned char)184U, (unsigned char)89U, (unsigned char)183U, (unsigned char)161U, (unsigned char)204U, (unsigned char)36U, (unsigned char)87U, (unsigned char)94U, (unsigned char)75U, (unsigned char)156U, (unsigned char)14U, (unsigned char)233U, (unsigned char)234U, (unsigned char)80U, (unsigned char)42U, (unsigned char)190U, (unsigned char)180U, (unsigned char)27U, (unsigned char)182U, (unsigned char)176U, (unsigned char)93U, (unsigned char)241U, (unsigned char)230U, (unsigned char)154U, (unsigned char)227U, (unsigned char)69U, (unsigned char)253U, (unsigned char)44U, (unsigned char)83U, (unsigned char)24U, (unsigned char)12U, (unsigned char)202U, (unsigned char)201U, (unsigned char)251U, (unsigned char)73U, (unsigned char)55U, (unsigned char)229U, (unsigned char)168U, (unsigned char)81U, (unsigned char)59U, (unsigned char)47U, (unsigned char)97U, (unsigned char)170U, (unsigned char)114U, (unsigned char)24U, (unsigned char)132U, (unsigned char)2U, (unsigned char)35U, (unsigned char)35U, (unsigned char)171U, (unsigned char)99U, (unsigned char)137U, (unsigned char)81U, (unsigned char)179U, (unsigned char)231U, (unsigned char)139U, (unsigned char)114U, (unsigned char)144U, (unsigned char)76U, (unsigned char)232U, (unsigned char)251U, (unsigned char)192U};
  #line 50 
  u32 len = 1200U;
  #line 52 
  struct ieee80211_hw *hw = sc->hw;
  #line 53 
  struct ath_hw *ah = sc->sc_ah;
  #line 59 
  skb = alloc_skb(len,3264U);
  #line 60 
  if (skb == (struct sk_buff *)0) 
                                  #line 61 
                                  return (struct sk_buff *)0;
  #line 63 
  skb_put(skb,len);
  #line 65 
  memset((void *)skb->data,0,(unsigned long)len);
  #line 67 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 68 
  hdr->frame_control = (unsigned short)8U;
  #line 69 
  hdr->duration_id = (unsigned short)0U;
  #line 71 
  memcpy((void *)(& hdr->addr1),(void *)(& (hw->wiphy)->perm_addr),6UL);
  #line 72 
  memcpy((void *)(& hdr->addr2),(void *)(& (hw->wiphy)->perm_addr),6UL);
  #line 73 
  memcpy((void *)(& hdr->addr3),(void *)(& (hw->wiphy)->perm_addr),6UL);
  #line 75 
  if (sc->tx99_vif != (struct ieee80211_vif *)0) {
    #line 76 
    avp = (struct ath_vif *)(& (sc->tx99_vif)->drv_priv);
    #line 77 
    hdr->seq_ctrl = (unsigned short)((int)hdr->seq_ctrl | (int)avp->seq_no);
  }
  #line 80 
  tx_info = IEEE80211_SKB_CB(skb);
  #line 81 
  memset((void *)tx_info,0,48UL);
  #line 82 
  rate = & tx_info->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_3075_193.__anonCompField___anonunion_3076_192.rates[0];
  #line 83 
  tx_info->band = (unsigned char)((sc->cur_chan)->chandef.chan)->band;
  #line 84 
  tx_info->flags = 4U;
  #line 85 
  tx_info->__anonCompField_ieee80211_tx_info_195.control.vif = sc->tx99_vif;
  #line 86 
  rate->count = (unsigned short)1U;
  #line 87 
  if (ah->curchan != (struct ath9k_channel *)0 && ((unsigned long)(ah->curchan)->channelFlags & 8UL) != 0UL) {
    #line 88 
    rate->flags = (unsigned short)((unsigned int)rate->flags | 8U);
    #line 89 
    if (((unsigned long)(ah->curchan)->channelFlags & 48UL) != 0UL) 
                                                                    #line 90 
                                                                    rate->flags = (unsigned short)((unsigned int)rate->flags | 32U);
  }
  #line 93 
  memcpy((void *)(skb->data + 30UL),(void *)(& PN9Data),64UL);
  #line 95 
  return skb;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/tx99.c"
static void ath9k_tx99_deinit(struct ath_softc *sc)
{
  #line 100 
  ath_reset(sc,(struct ath9k_channel *)0);
  #line 102 
  ath9k_ps_wakeup(sc);
  #line 103 
  ath9k_tx99_stop(sc);
  #line 104 
  ath9k_ps_restore(sc);
  #line 105 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/tx99.c"
static int ath9k_tx99_init(struct ath_softc *sc)
{
  #line 112 
  struct ath_tx_control txctl;
  #line 113 
  int r;
  #line 109 
  struct ieee80211_hw *hw = sc->hw;
  #line 110 
  struct ath_hw *ah = sc->sc_ah;
  #line 111 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 115 
  if ((int)test_bit(0L,& common->op_flags) != 0) {
    #line 116 
    ath_printk((char *)"\001",common,(char *)"driver is in invalid state unable to use TX99");
    #line 118 
    return -22;
  }
  #line 121 
  sc->tx99_skb = ath9k_build_tx99_skb(sc);
  #line 122 
  if (sc->tx99_skb == (struct sk_buff *)0) 
                                           #line 123 
                                           return -12;
  #line 125 
  memset((void *)(& txctl),0,32UL);
  #line 126 
  txctl.txq = sc->tx.txq_map[0];
  #line 128 
  ath_reset(sc,(struct ath9k_channel *)0);
  #line 130 
  ath9k_ps_wakeup(sc);
  #line 132 
  ath9k_hw_disable_interrupts(ah);
  #line 133 
  ath_drain_all_txq(sc);
  #line 134 
  ath_stoprecv(sc);
  #line 136 
  sc->tx99_state = (_Bool)1;
  #line 138 
  ieee80211_stop_queues(hw);
  #line 140 
  if ((int)sc->tx99_power == 64) 
                                 #line 141 
                                 sc->tx99_power = (short)63;
  #line 143 
  ath9k_hw_tx99_set_txpower(ah,(unsigned char)((int)((unsigned char)sc->tx99_power)));
  #line 144 
  r = ath9k_tx99_send(sc,sc->tx99_skb,& txctl);
  #line 145 
  if (r != 0) {
    #line 146 
    if ((common->debug_mask & 128) != 0) 
                                         #line 146 
                                         ath_printk((char *)"\001",common,(char *)"Failed to xmit TX99 skb\n");
    #line 147 
    return r;
  }
  #line 150 
  if ((common->debug_mask & 128) != 0) 
                                       #line 150 
                                       ath_printk((char *)"\001",common,(char *)"TX99 xmit started using %d ( %ddBm)\n",(int)sc->tx99_power,(int)sc->tx99_power / 2);
  #line 156 
  return 0;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/tx99.c"
static ssize_t read_file_tx99(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 163 
  char buf[3U];
  #line 164 
  unsigned int len;
  #line 162 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 166 
  len = (unsigned int)sprintf((char *)(& buf),(char *)"%d\n",(int)sc->tx99_state);
  #line 167 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                (unsigned long)len);
}

#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/tx99.c"
static ssize_t write_file_tx99(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 186 
  size_t __UNIQUE_ID___x555;
  #line 186 
  unsigned long tmp_0;
  #line 175 
  char buf[32U];
  #line 176 
  bool start;
  #line 177 
  ssize_t len;
  #line 178 
  int r;
  #line 173 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 174 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 180 
  if (count == 0UL) 
                    #line 181 
                    return -22L;
  #line 183 
  if ((int)(sc->cur_chan)->nvifs > 1) 
                                      #line 184 
                                      return -95L;
  {
    #line 186 
    __UNIQUE_ID___x555 = count;
    #line 186 
    unsigned long __UNIQUE_ID___y556 = 31UL;
    #line 186 
    if (__UNIQUE_ID___x555 < __UNIQUE_ID___y556) 
                                                 #line 186 
                                                 tmp_0 = __UNIQUE_ID___x555; else 
                                                                    #line 186 
                                                                    tmp_0 = __UNIQUE_ID___y556;
    }
  #line 186 
  len = (long)tmp_0;
  #line 187 
  if (copy_from_user((void *)(& buf),(void *)user_buf,(unsigned long)len) != 0UL) 
    #line 188 
    return -14L;
  #line 190 
  buf[len] = (char)0;
  #line 192 
  if (strtobool((char *)(& buf),& start) != 0) 
                                               #line 193 
                                               return -22L;
  #line 195 
  cif_mutex_lock_mutex_of_ath_softc_2(& sc->mutex);
  #line 197 
  if ((int)sc->tx99_state == (int)start) {
    #line 198 
    if (! start) 
                 #line 199 
                 goto out;
    #line 200 
    if ((common->debug_mask & 128) != 0) 
                                         #line 200 
                                         ath_printk((char *)"\001",common,(char *)"Resetting TX99\n");
    #line 201 
    ath9k_tx99_deinit(sc);
  }
  #line 204 
  if (! start) {
    #line 205 
    ath9k_tx99_deinit(sc);
    #line 206 
    goto out;
  }
  #line 209 
  r = ath9k_tx99_init(sc);
  #line 210 
  if (r != 0) {
    #line 211 
    cif_mutex_unlock_mutex_of_ath_softc_2(& sc->mutex);
    #line 212 
    return (long)r;
  }
  #line 214 
  out: 
       #line 214 
  ;
  #line 215 
  cif_mutex_unlock_mutex_of_ath_softc_2(& sc->mutex);
  #line 216 
  return (long)count;
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/tx99.c"
static struct file_operations fops_tx99 = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_tx99, .write = & write_file_tx99, .open = & simple_open};
#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/tx99.c"
static ssize_t read_file_tx99_power(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 232 
  char buf[32U];
  #line 233 
  unsigned int len;
  #line 231 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 235 
  len = (unsigned int)sprintf((char *)(& buf),(char *)"%d (%d dBm)\n",(int)sc->tx99_power,
              (int)sc->tx99_power / 2);
  #line 239 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                (unsigned long)len);
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/tx99.c"
static ssize_t write_file_tx99_power(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 247 
  int r;
  #line 248 
  u8 tx_power;
  #line 246 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 250 
  r = kstrtou8_from_user(user_buf,count,0U,& tx_power);
  #line 251 
  if (r != 0) 
              #line 252 
              return (long)r;
  #line 254 
  if ((unsigned int)tx_power > 63U) 
                                    #line 255 
                                    return -22L;
  #line 257 
  sc->tx99_power = (short)tx_power;
  #line 259 
  ath9k_ps_wakeup(sc);
  #line 260 
  ath9k_hw_tx99_set_txpower(sc->sc_ah,(unsigned char)((int)((unsigned char)sc->tx99_power)));
  #line 261 
  ath9k_ps_restore(sc);
  #line 263 
  return (long)count;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/tx99.c"
static struct file_operations fops_tx99_power = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_tx99_power, .write = & write_file_tx99_power, .open = & simple_open};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/tx99.c"
void ath9k_tx99_init_debug(struct ath_softc *sc)
{
  #line 276 
  if ((sc->sc_ah)->hw_version.macVersion <= 127U) 
                                                  #line 277 
                                                  return;
  #line 279 
  cif_debugfs_create_file_0((char *)"tx99",(unsigned short)384,sc->debug.debugfs_phy,(void *)sc,& fops_tx99);
  #line 282 
  cif_debugfs_create_file_0((char *)"tx99_power",(unsigned short)384,sc->debug.debugfs_phy,(void *)sc,& fops_tx99_power);
  #line 285 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/tx99.i.aux"
struct file_operations *emg_alias_fops_tx99 = & fops_tx99;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/tx99.i.aux"
struct file_operations *emg_alias_fops_tx99_power = & fops_tx99_power;
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/tx99.i.aux"
long emg_wrapper_read_file_tx99(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 112 
  return read_file_tx99(arg0,arg1,arg2,arg3);
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/tx99.i.aux"
long emg_wrapper_read_file_tx99_power(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 117 
  return read_file_tx99_power(arg0,arg1,arg2,arg3);
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/tx99.i.aux"
long emg_wrapper_write_file_tx99(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 122 
  return write_file_tx99(arg0,arg1,arg2,arg3);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/tx99.i.aux"
long emg_wrapper_write_file_tx99_power(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 127 
  return write_file_tx99_power(arg0,arg1,arg2,arg3);
}

#line 835  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/tx99.i.aux"
static void cif_mutex_lock_mutex_of_ath_softc_2(struct mutex *lock)
{
  #line 838 
  ldv_mutex_model_lock(lock,(char *)"mutex_of_ath_softc");
  #line 839 
  return;
}

#line 842  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/tx99.i.aux"
static void cif_mutex_unlock_mutex_of_ath_softc_2(struct mutex *lock)
{
  #line 845 
  ldv_mutex_model_unlock(lock,(char *)"mutex_of_ath_softc");
  #line 846 
  return;
}

#line 849  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/tx99.i.aux"
static struct dentry *cif_debugfs_create_file_0(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 853 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_4(struct list_head *head)
{
  #line 269 
  union __anonunion___u_15543 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_6(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 807  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug_sta.i.aux"
static void cif_spin_lock_bh_axq_lock_of_ath_txq_2(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_6(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug_sta.i.aux"
static void cif_spin_unlock_bh_axq_lock_of_ath_txq_2(spinlock_t *lock);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 436  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug_sta.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug_sta.i.aux"
static struct dentry *cif_debugfs_create_file_1(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
__inline static void ath_txq_lock_1(struct ath_softc *sc, struct ath_txq *txq)
{
  #line 567 
  cif_spin_lock_bh_axq_lock_of_ath_txq_2(& txq->axq_lock);
  #line 568 
  return;
}

#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
__inline static void ath_txq_unlock_1(struct ath_softc *sc, struct ath_txq *txq)
{
  #line 571 
  cif_spin_unlock_bh_axq_lock_of_ath_txq_2(& txq->axq_lock);
  #line 572 
  return;
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug_sta.c"
static ssize_t read_file_node_aggr(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 28 
  struct ath_atx_tid *tid;
  #line 29 
  struct ath_txq *txq;
  #line 31 
  char *buf;
  #line 32 
  size_t retval;
  #line 33 
  int tidno;
  #line 26 
  struct ath_node *an = (struct ath_node *)file->private_data;
  #line 27 
  struct ath_softc *sc = an->sc;
  #line 30 
  u32 len = 0U;
  #line 30 
  u32 size = 4096U;
  #line 35 
  buf = (char *)kzalloc_1((unsigned long)size,3264U);
  #line 36 
  if (buf == (char *)0) 
                        #line 37 
                        return -12L;
  #line 39 
  if (! (an->sta)->ht_cap.ht_supported) {
    #line 40 
    len = (unsigned int)scnprintf(buf,(unsigned long)size,(char *)"%s\n",
                  (char *)"HT not supported");
    #line 42 
    goto exit;
  }
  #line 45 
  len = (unsigned int)scnprintf(buf,(unsigned long)size,(char *)"Max-AMPDU: %d\n",
                  (int)an->maxampdu);
  #line 48 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"MPDU Density: %d\n\n",(int)an->mpdudensity) + len;
  #line 53 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"\n%3s%11s%10s%10s%10s%10s%9s%6s%8s\n",
                  (char *)"TID",(char *)"SEQ_START",(char *)"SEQ_NEXT",
                  (char *)"BAW_SIZE",(char *)"BAW_HEAD",(char *)"BAW_TAIL",
                  (char *)"BAR_IDX",(char *)"SCHED",(char *)"PAUSED") + len;
  #line 55 
  tidno = 0;
  #line 55 
  while (tidno <= 15) {
    #line 56 
    tid = ath_node_to_tid(an,(unsigned char)((int)((unsigned char)tidno)));
    #line 57 
    txq = tid->txq;
    #line 58 
    ath_txq_lock_1(sc,txq);
    #line 59 
    if ((int)tid->active != 0) {
      #line 60 
      ;
      #line 60 
      ;
      #line 60 
      ;
      #line 60 
      ;
      #line 60 
      ;
      #line 60 
      ;
      #line 60 
      ;
      #line 60 
      ;
      #line 60 
      ;
      #line 69 
      len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%3d%11d%10d%10d%10d%10d%9d%6d\n",(int)tid->tidno,
                  (int)tid->seq_start,(int)tid->seq_next,(int)tid->baw_size,
                  tid->baw_head,tid->baw_tail,(int)tid->bar_index,
                  list_empty_4(& tid->list) == 0) + len;
    }
    #line 71 
    ath_txq_unlock_1(sc,txq);
    #line 55 
    tidno ++;
  }
  #line 73 
  exit: 
        #line 73 
  ;
  #line 74 
  retval = (unsigned long)simple_read_from_buffer((void *)user_buf,count,ppos,(void *)buf,
                                (unsigned long)len);
  #line 75 
  kfree((void *)buf);
  #line 77 
  return (long)retval;
}

#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug_sta.c"
static struct file_operations fops_node_aggr = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_node_aggr, .open = & simple_open};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug_sta.c"
void ath_debug_rate_stats(struct ath_softc *sc, struct ath_rx_status *rs, struct sk_buff *skb)
{
  #line 97 
  struct ieee80211_rx_status *rxs;
  #line 98 
  struct ath_rx_rate_stats *rstats;
  #line 99 
  struct ieee80211_sta *sta;
  #line 100 
  struct ath_node *an;
  #line 95 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 96 
  struct ath_hw *ah = sc->sc_ah;
  #line 102 
  if (! ieee80211_is_data((unsigned short)((int)hdr->frame_control))) 
    #line 103 
    return;
  #line 105 
  rcu_read_lock();
  #line 107 
  sta = ieee80211_find_sta_by_ifaddr(sc->hw,(u8 *)(& hdr->addr2),(u8 *)0U);
  #line 108 
  if (sta == (struct ieee80211_sta *)0) 
                                        #line 109 
                                        goto exit;
  #line 111 
  an = (struct ath_node *)(& sta->drv_priv);
  #line 112 
  rstats = & an->rx_rate_stats;
  #line 113 
  rxs = IEEE80211_SKB_RXCB(skb);
  #line 115 
  if (((int)rs->rs_rate & 128) != 0) {
    #line 116 
    if ((unsigned int)rxs->rate_idx > 23U) 
                                           #line 117 
                                           goto exit;
    #line 119 
    if ((unsigned int)rxs->bw == 3U) 
                                     #line 120 
                                     (rstats->ht_stats[(int)rxs->rate_idx].ht40_cnt) ++; else 
                                                                    #line 122 
                                                                    (rstats->ht_stats[(int)rxs->rate_idx].ht20_cnt) ++;
    #line 124 
    if (((int)rxs->enc_flags & 4) != 0) 
                                        #line 125 
                                        (rstats->ht_stats[(int)rxs->rate_idx].sgi_cnt) ++; else 
                                                                    #line 127 
                                                                    (rstats->ht_stats[(int)rxs->rate_idx].lgi_cnt) ++;
    #line 129 
    goto exit;
  }
  #line 132 
  if ((unsigned int)rs->rs_rate + 232U <= 6U) {
    #line 133 
    if (((int)rxs->enc_flags & 1) != 0) 
                                        #line 134 
                                        (rstats->cck_stats[(int)rxs->rate_idx].cck_sp_cnt) ++; else 
                                                                    #line 136 
                                                                    (rstats->cck_stats[(int)rxs->rate_idx].cck_lp_cnt) ++;
    #line 138 
    goto exit;
  }
  #line 141 
  if ((unsigned int)rs->rs_rate + 248U <= 7U) 
    #line 142 
    if (((ah->curchan)->chan)->band == (unsigned int)NL80211_BAND_2GHZ) 
      #line 143 
      (rstats->ofdm_stats[(int)rxs->rate_idx + -4].ofdm_cnt) ++; else 
                                                                   #line 145 
                                                                   (rstats->ofdm_stats[(int)rxs->rate_idx].ofdm_cnt) ++;
  #line 147 
  exit: 
        #line 147 
  ;
  #line 148 
  rcu_read_unlock();
  #line 149 
  return;
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug_sta.c"
static ssize_t read_file_node_recv(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 174 
  struct ath_rx_rate_stats *rstats;
  #line 176 
  enum nl80211_band band;
  #line 178 
  char *buf;
  #line 179 
  size_t retval;
  #line 180 
  int i;
  #line 171 
  struct ath_node *an = (struct ath_node *)file->private_data;
  #line 172 
  struct ath_softc *sc = an->sc;
  #line 173 
  struct ath_hw *ah = sc->sc_ah;
  #line 175 
  struct ieee80211_sta *sta = an->sta;
  #line 177 
  u32 len = 0U;
  #line 177 
  u32 size = 4096U;
  #line 182 
  buf = (char *)kzalloc_1((unsigned long)size,3264U);
  #line 183 
  if (buf == (char *)0) 
                        #line 184 
                        return -12L;
  #line 186 
  band = ((ah->curchan)->chan)->band;
  #line 187 
  rstats = & an->rx_rate_stats;
  #line 189 
  if (! sta->ht_cap.ht_supported) 
                                  #line 190 
                                  goto legacy;
  #line 194 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%24s%10s%10s%10s\n",(char *)"HT20",(char *)"HT40",
                  (char *)"SGI",(char *)"LGI") + len;
  #line 196 
  i = 0;
  #line 196 
  while (i <= 23) {
    #line 203 
    len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%8s%3u : %10u%10u%10u%10u\n",(char *)"MCS",i,
                  rstats->ht_stats[i].ht20_cnt,rstats->ht_stats[i].ht40_cnt,
                  rstats->ht_stats[i].sgi_cnt,rstats->ht_stats[i].lgi_cnt) + len;
    #line 196 
    i ++;
  }
  #line 206 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"\n") + len;
  #line 208 
  legacy: 
          #line 208 
  ;
  #line 209 
  if (band == (unsigned int)NL80211_BAND_2GHZ) {
    #line 210 
    len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%11s : %10u\n",(char *)"CCK-1M/LP",
                  rstats->cck_stats[0].cck_lp_cnt) + len;
    #line 211 
    len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%11s : %10u\n",(char *)"CCK-2M/LP",
                  rstats->cck_stats[1].cck_lp_cnt) + len;
    #line 212 
    len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%11s : %10u\n",(char *)"CCK-5.5M/LP",
                  rstats->cck_stats[2].cck_lp_cnt) + len;
    #line 213 
    len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%11s : %10u\n",(char *)"CCK-11M/LP",
                  rstats->cck_stats[3].cck_lp_cnt) + len;
    #line 215 
    len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%11s : %10u\n",(char *)"CCK-2M/SP",
                  rstats->cck_stats[1].cck_sp_cnt) + len;
    #line 216 
    len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%11s : %10u\n",(char *)"CCK-5.5M/SP",
                  rstats->cck_stats[2].cck_sp_cnt) + len;
    #line 217 
    len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%11s : %10u\n",(char *)"CCK-11M/SP",
                  rstats->cck_stats[3].cck_sp_cnt) + len;
  }
  #line 220 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%11s : %10u\n",(char *)"OFDM-6M",
                   rstats->ofdm_stats[0].ofdm_cnt) + len;
  #line 221 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%11s : %10u\n",(char *)"OFDM-9M",
                   rstats->ofdm_stats[1].ofdm_cnt) + len;
  #line 222 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%11s : %10u\n",(char *)"OFDM-12M",
                   rstats->ofdm_stats[2].ofdm_cnt) + len;
  #line 223 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%11s : %10u\n",(char *)"OFDM-18M",
                   rstats->ofdm_stats[3].ofdm_cnt) + len;
  #line 224 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%11s : %10u\n",(char *)"OFDM-24M",
                   rstats->ofdm_stats[4].ofdm_cnt) + len;
  #line 225 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%11s : %10u\n",(char *)"OFDM-36M",
                   rstats->ofdm_stats[5].ofdm_cnt) + len;
  #line 226 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%11s : %10u\n",(char *)"OFDM-48M",
                   rstats->ofdm_stats[6].ofdm_cnt) + len;
  #line 227 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                   (char *)"%11s : %10u\n",(char *)"OFDM-54M",
                   rstats->ofdm_stats[7].ofdm_cnt) + len;
  #line 229 
  retval = (unsigned long)simple_read_from_buffer((void *)user_buf,count,ppos,(void *)buf,
                                 (unsigned long)len);
  #line 230 
  kfree((void *)buf);
  #line 232 
  return (long)retval;
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug_sta.c"
static struct file_operations fops_node_recv = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_node_recv, .open = & simple_open};
#line 245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug_sta.c"
void ath9k_sta_add_debugfs(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_sta *sta, struct dentry *dir)
{
  #line 250 
  struct ath_node *an = (struct ath_node *)(& sta->drv_priv);
  #line 252 
  cif_debugfs_create_file_1((char *)"node_aggr",(unsigned short)292,dir,(void *)an,& fops_node_aggr);
  #line 253 
  cif_debugfs_create_file_1((char *)"node_recv",(unsigned short)292,dir,(void *)an,& fops_node_recv);
  #line 254 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug_sta.i.aux"
struct file_operations *emg_alias_fops_node_aggr = & fops_node_aggr;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug_sta.i.aux"
struct file_operations *emg_alias_fops_node_recv = & fops_node_recv;
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug_sta.i.aux"
long emg_wrapper_read_file_node_aggr(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 112 
  return read_file_node_aggr(arg0,arg1,arg2,arg3);
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug_sta.i.aux"
long emg_wrapper_read_file_node_recv(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 117 
  return read_file_node_recv(arg0,arg1,arg2,arg3);
}

#line 436  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug_sta.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 439 
  return ldv_kzalloc(size,flags);
}

#line 807  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug_sta.i.aux"
static void cif_spin_lock_bh_axq_lock_of_ath_txq_2(spinlock_t *lock)
{
  #line 810 
  ldv_spin_model_lock((char *)"axq_lock_of_ath_txq");
  #line 812 
  spin_lock_bh_6(lock);
  #line 813 
  return;
}

#line 816  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug_sta.i.aux"
static void cif_spin_unlock_bh_axq_lock_of_ath_txq_2(spinlock_t *lock)
{
  #line 819 
  ldv_spin_model_unlock((char *)"axq_lock_of_ath_txq");
  #line 821 
  spin_unlock_bh_6(lock);
  #line 822 
  return;
}

#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug_sta.i.aux"
static struct dentry *cif_debugfs_create_file_1(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 829 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_set_bit_4(long nr, unsigned long *addr);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void INIT_LIST_HEAD_4(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_3(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_16574 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_3(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_3(new,head->prev,head);
  #line 94 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static bool IS_ERR_0(void *ptr);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_5(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 863  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_spin_unlock_irqrestore_sc_serial_rw_of_ath_softc(spinlock_t *lock, unsigned long flags);
#line 35 
#line 854 
static void cif___ldv_spin_lock_sc_serial_rw_of_ath_softc(spinlock_t *lock);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
#line 103 
void wait_for_completion(struct completion *);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 894  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static int cif_del_timer_sync_4(struct timer_list *timer);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 32 
unsigned int ioread32(void *);
#line 53 
#line 53 
void iowrite32(u32, void *);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 872  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags);
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
#line 304 
struct property *of_find_property(struct device_node *, char *, int *);
#line 347 
#line 347 
bool of_device_is_available(struct device_node *);
#line 1174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
__inline static bool of_property_read_bool(struct device_node *np, char *propname)
{
  #line 1177 
  struct property *prop = of_find_property(np,propname,(int *)0);
  #line 1179 
  return (_Bool)(prop != (struct property *)0);
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_net.h"
#line 16 
void *of_get_mac_address(struct device_node *);
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dmi.h"
#line 100 
int dmi_check_system(struct dmi_system_id *);
#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 886  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data);
#line 5490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
#line 5490 
int regulatory_hint(struct wiphy *, char *);
#line 6094 
#line 6094 
void wiphy_rfkill_stop_polling(struct wiphy *);
#line 7322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static void wiphy_ext_feature_set(struct wiphy *wiphy, enum nl80211_ext_feature_index ftidx)
{
  #line 7325 
  u8 *ft_byte;
  #line 7327 
  ft_byte = & wiphy->ext_features[(unsigned int)ftidx / 8U];
  #line 7328 
  *ft_byte = (unsigned char)((int)*ft_byte | (int)((unsigned char)(1UL << ((unsigned int)ftidx & 7U))));
  #line 7329 
  return;
}

#line 2533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void _ieee80211_hw_set(struct ieee80211_hw *hw, enum ieee80211_hw_flags flg)
{
  #line 2536 
  __set_bit((long)flg,(unsigned long *)(& hw->flags));
  #line 2537 
  return;
}

#line 2591 
#line 2591 
struct ieee80211_hw *wiphy_to_ieee80211_hw(struct wiphy *);
#line 2610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void SET_IEEE80211_PERM_ADDR(struct ieee80211_hw *hw, u8 *addr)
{
  #line 2612 
  memcpy((void *)(& (hw->wiphy)->perm_addr),(void *)addr,6UL);
  #line 2613 
  return;
}

#line 4135 
#line 4135 
int ieee80211_register_hw(struct ieee80211_hw *);
#line 4167 
#line 4167 
char *__ieee80211_create_tpt_led_trigger(struct ieee80211_hw *, unsigned int, struct ieee80211_tpt_blink *, unsigned int);
#line 4269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static char *ieee80211_create_tpt_led_trigger(struct ieee80211_hw *hw, unsigned int flags, struct ieee80211_tpt_blink *blink_table, unsigned int blink_table_len)
{
  #line 4274 
  return __ieee80211_create_tpt_led_trigger(hw,flags,blink_table,
                                         blink_table_len);
}

#line 4289 
#line 4289 
void ieee80211_unregister_hw(struct ieee80211_hw *);
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
#line 328 
extern char *ath_bus_type_strings[];
#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
__inline static char *ath_bus_type_to_string(enum ath_bus_type bustype)
{
  #line 331 
  return ath_bus_type_strings[(unsigned int)bustype];
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 47 
int request_firmware_nowait(struct module *, bool, char *, struct device *, gfp_t, void *, void (*)(struct firmware *, void *));
#line 57 
#line 879  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
#line 740 
int ath9k_hw_beaconq_setup(struct ath_hw *);
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/regd.h"
#line 260 
bool ath_is_world_regd(struct ath_regulatory *);
#line 263 
#line 263 
int ath_regd_init(struct ath_regulatory *, struct wiphy *, void (*)(struct wiphy *, struct regulatory_request *));
#line 268 
#line 268 
void ath_reg_notifier_apply(struct wiphy *, struct regulatory_request *, struct ath_regulatory *);
#line 1022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
#line 1022 
void ath9k_hw_deinit(struct ath_hw *);
#line 1023 
#line 1023 
int ath9k_hw_init(struct ath_hw *);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/common-init.h"
#line 17 
int ath9k_cmn_init_channels_rates(struct ath_common *);
#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.h"
#line 254 
int ath9k_init_debug(struct ath_hw *ah);
#line 255 
#line 255 
void ath9k_deinit_debug(struct ath_softc *sc);
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/dfs_pattern_detector.h"
#line 120 
struct dfs_pattern_detector *dfs_pattern_detector_init(struct ath_common *, enum nl80211_dfs_regions);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
int ath9k_modparam_nohwcrypt;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
int ath9k_led_blink;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
bool is_ath9k_unloaded;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
int ath9k_use_chanctx;
#line 716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 716 
void ath9k_beacon_tasklet(unsigned long data);
#line 1115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
__inline static void ath_read_cachesize(struct ath_common *common, int *csz)
{
  #line 1117 
  (*((common->bus_ops)->read_cachesize))(common,csz);
  #line 1118 
  return;
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static char *dev_info = (char *)"ath9k";
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static unsigned int ath9k_debug = 1024U;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static int ath9k_led_active_high = -1;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static int ath9k_btcoex_enable;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static int ath9k_bt_ant_diversity;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static int ath9k_ps_enable;
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
int ath9k_use_msi;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static struct ieee80211_tpt_blink ath9k_tpt_blink[10U] = {{.blink_time = 334}, {.throughput = 1024, .blink_time = 260}, {.throughput = 5120, .blink_time = 220}, {.throughput = 10240, .blink_time = 190}, {.throughput = 20480, .blink_time = 170}, {.throughput = 51200, .blink_time = 150}, {.throughput = 71680, .blink_time = 130}, {.throughput = 102400, .blink_time = 110}, {.throughput = 204800, .blink_time = 80}, {.throughput = 307200, .blink_time = 50}};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static int set_use_msi(struct dmi_system_id *dmi)
{
  #line 102 
  ath9k_use_msi = 1;
  #line 103 
  return 1;
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static struct dmi_system_id ath9k_quirks[6U] = {{.callback = & set_use_msi, .ident = (char *)"Dell Inspiron 24-3460", .matches = {{.slot = (unsigned char)4U, .substr = {(char)'D', (char)'e', (char)'l', (char)'l', (char)' ', (char)'I', (char)'n', (char)'c', (char)'.'}}, {.slot = (unsigned char)5U, .substr = {(char)'I', (char)'n', (char)'s', (char)'p', (char)'i', (char)'r', (char)'o', (char)'n', (char)' ', (char)'2', (char)'4', (char)'-', (char)'3', (char)'4', (char)'6', (char)'0'}}}}, {.callback = & set_use_msi, .ident = (char *)"Dell Vostro 3262", .matches = {{.slot = (unsigned char)4U, .substr = {(char)'D', (char)'e', (char)'l', (char)'l', (char)' ', (char)'I', (char)'n', (char)'c', (char)'.'}}, {.slot = (unsigned char)5U, .substr = {(char)'V', (char)'o', (char)'s', (char)'t', (char)'r', (char)'o', (char)' ', (char)'3', (char)'2', (char)'6', (char)'2'}}}}, {.callback = & set_use_msi, .ident = (char *)"Dell Inspiron 3472", .matches = {{.slot = (unsigned char)4U, .substr = {(char)'D', (char)'e', (char)'l', (char)'l', (char)' ', (char)'I', (char)'n', (char)'c', (char)'.'}}, {.slot = (unsigned char)5U, .substr = {(char)'I', (char)'n', (char)'s', (char)'p', (char)'i', (char)'r', (char)'o', (char)'n', (char)' ', (char)'3', (char)'4', (char)'7', (char)'2'}}}}, {.callback = & set_use_msi, .ident = (char *)"Dell Vostro 15-3572", .matches = {{.slot = (unsigned char)4U, .substr = {(char)'D', (char)'e', (char)'l', (char)'l', (char)' ', (char)'I', (char)'n', (char)'c', (char)'.'}}, {.slot = (unsigned char)5U, .substr = {(char)'V', (char)'o', (char)'s', (char)'t', (char)'r', (char)'o', (char)' ', (char)'1', (char)'5', (char)'-', (char)'3', (char)'5', (char)'7', (char)'2'}}}}, {.callback = & set_use_msi, .ident = (char *)"Dell Inspiron 14-3473", .matches = {{.slot = (unsigned char)4U, .substr = {(char)'D', (char)'e', (char)'l', (char)'l', (char)' ', (char)'I', (char)'n', (char)'c', (char)'.'}}, {.slot = (unsigned char)5U, .substr = {(char)'I', (char)'n', (char)'s', (char)'p', (char)'i', (char)'r', (char)'o', (char)'n', (char)' ', (char)'1', (char)'4', (char)'-', (char)'3', (char)'4', (char)'7', (char)'3'}}}}};
#line 150 
#line 1100 
static void ath9k_deinit_softc(struct ath_softc *sc);
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static void ath9k_op_ps_wakeup(struct ath_common *common)
{
  #line 154 
  ath9k_ps_wakeup((struct ath_softc *)common->priv);
  #line 155 
  return;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static void ath9k_op_ps_restore(struct ath_common *common)
{
  #line 159 
  ath9k_ps_restore((struct ath_softc *)common->priv);
  #line 160 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static struct ath_ps_ops ath9k_ps_ops = {.wakeup = & ath9k_op_ps_wakeup, .restore = & ath9k_op_ps_restore};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static void ath9k_iowrite32(void *hw_priv, u32 val, u32 reg_offset)
{
  #line 175 
  struct ath_hw *ah = (struct ath_hw *)hw_priv;
  #line 176 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 177 
  struct ath_softc *sc = (struct ath_softc *)common->priv;
  #line 179 
  if (ah->config.serialize_regmode == 1) {
    #line 180 
    unsigned long flags;
    #line 181 
    cif___ldv_spin_lock_sc_serial_rw_of_ath_softc(& sc->sc_serial_rw);
    #line 182 
    iowrite32(val,sc->mem + (unsigned long)reg_offset);
    #line 183 
    cif_spin_unlock_irqrestore_sc_serial_rw_of_ath_softc(& sc->sc_serial_rw,flags);
  }
  else 
       #line 185 
       iowrite32(val,sc->mem + (unsigned long)reg_offset);
  #line 186 
  return;
}

#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static unsigned int ath9k_ioread32(void *hw_priv, u32 reg_offset)
{
  #line 193 
  u32 val;
  #line 190 
  struct ath_hw *ah = (struct ath_hw *)hw_priv;
  #line 191 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 192 
  struct ath_softc *sc = (struct ath_softc *)common->priv;
  #line 195 
  if (ah->config.serialize_regmode == 1) {
    #line 196 
    unsigned long flags;
    #line 197 
    cif___ldv_spin_lock_sc_serial_rw_of_ath_softc(& sc->sc_serial_rw);
    #line 198 
    val = ioread32(sc->mem + (unsigned long)reg_offset);
    #line 199 
    cif_spin_unlock_irqrestore_sc_serial_rw_of_ath_softc(& sc->sc_serial_rw,flags);
  }
  else 
       #line 201 
       val = ioread32(sc->mem + (unsigned long)reg_offset);
  #line 202 
  return val;
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static void ath9k_multi_ioread32(void *hw_priv, u32 *addr, u32 *val, u16 count)
{
  #line 208 
  int i;
  #line 210 
  i = 0;
  #line 210 
  while ((int)count > i) {
    #line 211 
    *(val + (unsigned long)i) = ath9k_ioread32(hw_priv,*(addr + (unsigned long)i));
    #line 210 
    i ++;
  }
  #line 212 
  return;
}

#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static unsigned int __ath9k_reg_rmw(struct ath_softc *sc, u32 reg_offset, u32 set, u32 clr)
{
  #line 218 
  u32 val;
  #line 220 
  val = ioread32(sc->mem + (unsigned long)reg_offset);
  #line 221 
  val = ~ clr & val;
  #line 222 
  val |= set;
  #line 223 
  iowrite32(val,sc->mem + (unsigned long)reg_offset);
  #line 225 
  return val;
}

#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static unsigned int ath9k_reg_rmw(void *hw_priv, u32 reg_offset, u32 set, u32 clr)
{
  #line 234 
  u32 val;
  #line 230 
  struct ath_hw *ah = (struct ath_hw *)hw_priv;
  #line 231 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 232 
  struct ath_softc *sc = (struct ath_softc *)common->priv;
  #line 233 
  unsigned long flags = flags;
  #line 236 
  if (ah->config.serialize_regmode == 1) {
    #line 237 
    cif___ldv_spin_lock_sc_serial_rw_of_ath_softc(& sc->sc_serial_rw);
    #line 238 
    val = __ath9k_reg_rmw(sc,reg_offset,set,clr);
    #line 239 
    cif_spin_unlock_irqrestore_sc_serial_rw_of_ath_softc(& sc->sc_serial_rw,flags);
  }
  else 
       #line 241 
       val = __ath9k_reg_rmw(sc,reg_offset,set,clr);
  #line 243 
  return val;
}

#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static void ath9k_reg_notifier(struct wiphy *wiphy, struct regulatory_request *request)
{
  #line 253 
  struct ieee80211_hw *hw = wiphy_to_ieee80211_hw(wiphy);
  #line 254 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 255 
  struct ath_hw *ah = sc->sc_ah;
  #line 256 
  struct ath_regulatory *reg = ath9k_hw_regulatory(ah);
  #line 258 
  ath_reg_notifier_apply(wiphy,request,reg);
  #line 261 
  if (sc->dfs_detector != (struct dfs_pattern_detector *)0) 
                                                            #line 262 
                                                            (*((sc->dfs_detector)->set_dfs_domain))(sc->dfs_detector,request->dfs_region);
  #line 266 
  if (ah->curchan == (struct ath9k_channel *)0) 
                                                #line 267 
                                                return;
  #line 269 
  (sc->cur_chan)->txpower = (unsigned short)((unsigned int)((unsigned short)((ah->curchan)->chan)->max_power) * 2U);
  #line 270 
  ath9k_ps_wakeup(sc);
  #line 271 
  ath9k_hw_set_txpowerlimit(ah,(unsigned int)(sc->cur_chan)->txpower,(_Bool)0);
  #line 272 
  ath9k_cmn_update_txpow(ah,(unsigned short)((int)(sc->cur_chan)->cur_txpower),(unsigned short)((int)(sc->cur_chan)->txpower),& (sc->cur_chan)->cur_txpower);
  #line 275 
  ath9k_ps_restore(sc);
  #line 276 
  return;
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
int ath_descdma_setup(struct ath_softc *sc, struct ath_descdma *dd, struct list_head *head, char *name, int nbuf, int ndesc, bool is_tx)
{
  #line 288 
  u8 *ds;
  #line 289 
  int i;
  #line 289 
  int bsize;
  #line 289 
  int desc_len;
  #line 287 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 291 
  if ((common->debug_mask & 512) != 0) 
                                       #line 291 
                                       ath_printk((char *)"\001",common,(char *)"%s DMA: %u buffers %u desc/buf\n",name,nbuf,ndesc);
  #line 294 
  INIT_LIST_HEAD_4(head);
  #line 296 
  if ((int)is_tx != 0) 
                       #line 297 
                       desc_len = (int)(sc->sc_ah)->caps.tx_desc_len; else 
                                                                    #line 299 
                                                                    desc_len = 104;
  #line 302 
  if (((unsigned int)desc_len & 3U) != 0U) {
    #line 303 
    ath_printk((char *)"\001",common,(char *)"ath_desc not DWORD aligned\n");
    #line 304 
    if ((long)(((unsigned int)desc_len & 3U) != 0U) != 0L) {
      #line 305 
      ldv_inline_asm();
      #line 306 
      ldv_inline_asm();
      #line 307 
      ldv_inline_asm();
      #line 304 
      ;
    }
    #line 305 
    return -12;
  }
  #line 308 
  dd->dd_desc_len = (unsigned int)((desc_len * nbuf) * ndesc);
  #line 315 
  if (((sc->sc_ah)->caps.hw_caps & 8U) == 0U) {
    #line 318 
    u32 dma_len;
    #line 316 
    u32 ndesc_skipped = dd->dd_desc_len / 4096U;
    #line 320 
    while (ndesc_skipped != 0U) {
      #line 321 
      dma_len = ndesc_skipped * (unsigned int)desc_len;
      #line 322 
      dd->dd_desc_len += dma_len;
      #line 324 
      ndesc_skipped = dma_len / 4096U;
    }
  }
  #line 329 
  dd->dd_desc = dmam_alloc_coherent(sc->dev,(unsigned long)dd->dd_desc_len,& dd->dd_desc_paddr,3264U);
  #line 331 
  if (dd->dd_desc == (void *)0) 
                                #line 332 
                                return -12;
  #line 334 
  ds = (u8 *)dd->dd_desc;
  #line 335 
  if ((common->debug_mask & 512) != 0) 
                                       #line 335 
                                       ath_printk((char *)"\001",common,(char *)"%s DMA map: %p (%u) -> %llx (%u)\n",name,ds,dd->dd_desc_len,dd->dd_desc_paddr,dd->dd_desc_len);
  #line 340 
  if ((int)is_tx != 0) {
    #line 341 
    struct ath_buf *bf;
    #line 343 
    bsize = (int)((unsigned long)nbuf * (unsigned long)96U);
    #line 344 
    bf = (struct ath_buf *)cif_devm_kzalloc_0(sc->dev,(unsigned long)bsize,3264U);
    #line 345 
    if (bf == (struct ath_buf *)0) 
                                   #line 346 
                                   return -12;
    #line 348 
    i = 0;
    #line 348 
    while (i < nbuf) {
      #line 349 
      bf->bf_desc = (void *)ds;
      #line 350 
      bf->bf_daddr = dd->dd_desc_paddr + (unsigned long long)((char *)ds - (char *)dd->dd_desc);
      #line 352 
      if (((sc->sc_ah)->caps.hw_caps & 8U) == 0U) 
        #line 359 
        while ((bf->bf_daddr & 4095ULL) > 3967ULL) {
          #line 360 
          if ((long)((char *)bf->bf_desc >= (char *)dd->dd_desc + (unsigned long)dd->dd_desc_len) != 0L) {
            #line 361 
            ldv_inline_asm();
            #line 362 
            ldv_inline_asm();
            #line 363 
            ldv_inline_asm();
            #line 360 
            ;
          }
          #line 364 
          ds += (unsigned long)(desc_len * ndesc);
          #line 365 
          bf->bf_desc = (void *)ds;
          #line 366 
          bf->bf_daddr = dd->dd_desc_paddr + (unsigned long long)((char *)ds - (char *)dd->dd_desc);
        }
      #line 369 
      list_add_tail_3(& bf->list,head);
      #line 348 
      i ++;
      #line 348 
      bf ++;
      #line 348 
      ds += (unsigned long)(desc_len * ndesc);
    }
  }
  else {
    #line 372 
    struct ath_rxbuf *bf_0;
    #line 374 
    bsize = (int)((unsigned long)nbuf * (unsigned long)48U);
    #line 375 
    bf_0 = (struct ath_rxbuf *)cif_devm_kzalloc_0(sc->dev,(unsigned long)bsize,3264U);
    #line 376 
    if (bf_0 == (struct ath_rxbuf *)0) 
                                       #line 377 
                                       return -12;
    #line 379 
    i = 0;
    #line 379 
    while (i < nbuf) {
      #line 380 
      bf_0->bf_desc = (void *)ds;
      #line 381 
      bf_0->bf_daddr = dd->dd_desc_paddr + (unsigned long long)((char *)ds - (char *)dd->dd_desc);
      #line 383 
      if (((sc->sc_ah)->caps.hw_caps & 8U) == 0U) 
        #line 390 
        while ((bf_0->bf_daddr & 4095ULL) > 3967ULL) {
          #line 391 
          if ((long)((char *)bf_0->bf_desc >= (char *)dd->dd_desc + (unsigned long)dd->dd_desc_len) != 0L) {
            #line 392 
            ldv_inline_asm();
            #line 393 
            ldv_inline_asm();
            #line 394 
            ldv_inline_asm();
            #line 391 
            ;
          }
          #line 395 
          ds += (unsigned long)(desc_len * ndesc);
          #line 396 
          bf_0->bf_desc = (void *)ds;
          #line 397 
          bf_0->bf_daddr = dd->dd_desc_paddr + (unsigned long long)((char *)ds - (char *)dd->dd_desc);
        }
      #line 400 
      list_add_tail_3(& bf_0->list,head);
      #line 379 
      i ++;
      #line 379 
      bf_0 ++;
      #line 379 
      ds += (unsigned long)(desc_len * ndesc);
    }
  }
  #line 403 
  return 0;
}

#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static int ath9k_init_queues(struct ath_softc *sc)
{
  #line 408 
  int i = 0;
  #line 410 
  sc->beacon.beaconq = (unsigned int)ath9k_hw_beaconq_setup(sc->sc_ah);
  #line 411 
  sc->beacon.cabq = ath_txq_setup(sc,3,0);
  #line 412 
  ath_cabq_update(sc);
  #line 414 
  sc->tx.uapsdq = ath_txq_setup(sc,4,0);
  #line 416 
  i = 0;
  #line 416 
  while (i <= 3) {
    #line 417 
    sc->tx.txq_map[i] = ath_txq_setup(sc,1,i);
    #line 418 
    (sc->tx.txq_map[i])->mac80211_qnum = i;
    #line 416 
    i ++;
  }
  #line 420 
  return 0;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static void ath9k_init_misc(struct ath_softc *sc)
{
  #line 425 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 426 
  int i = 0;
  {
    #line 428 
    struct lock_class_key __key;
    #line 428 
    init_timer_key(& common->ani.timer,& ath_ani_calibrate,0U,(char *)"(&common->ani.timer)",& __key);
  }
  #line 430 
  common->last_rssi = 127;
  #line 431 
  eth_broadcast_addr((u8 *)(& common->bssidmask));
  #line 432 
  sc->beacon.slottime = 9;
  #line 434 
  i = 0;
  #line 434 
  while ((unsigned int)i <= 7U) {
    #line 435 
    sc->beacon.bslot[i] = (struct ieee80211_vif *)0;
    #line 434 
    i ++;
  }
  #line 437 
  if (((sc->sc_ah)->caps.hw_caps & 1024U) != 0U) 
                                                 #line 438 
                                                 sc->ant_comb.count = (unsigned short)95U;
  #line 440 
  sc->spec_priv.ah = sc->sc_ah;
  #line 441 
  sc->spec_priv.spec_config.enabled = (_Bool)0;
  #line 442 
  sc->spec_priv.spec_config.short_repeat = (_Bool)1;
  #line 443 
  sc->spec_priv.spec_config.count = (unsigned char)8U;
  #line 444 
  sc->spec_priv.spec_config.endless = (_Bool)0;
  #line 445 
  sc->spec_priv.spec_config.period = (unsigned char)255U;
  #line 446 
  sc->spec_priv.spec_config.fft_period = (unsigned char)15U;
  #line 447 
  return;
}

#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static void ath9k_init_pcoem_platform(struct ath_softc *sc)
{
  #line 451 
  struct ath_hw *ah = sc->sc_ah;
  #line 452 
  struct ath9k_hw_capabilities *pCap = & ah->caps;
  #line 453 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 458 
  if ((common->bus_ops)->ath_bus_type != (unsigned int)ATH_PCI) 
                                                                #line 459 
                                                                return;
  #line 461 
  if ((sc->driver_data & 3UL) != 0UL) {
    #line 470 
    char *tmp_0;
    #line 463 
    ah->config.xlna_gpio = 9U;
    #line 464 
    ah->config.xatten_margin_cfg = (_Bool)1;
    #line 465 
    ah->config.alt_mingainidx = (_Bool)1;
    #line 466 
    ah->config.ant_ctrl_comm2g_switch_enable = 768904U;
    #line 467 
    sc->ant_comb.low_rssi_thresh = 20;
    #line 468 
    sc->ant_comb.fast_div_bias = 3;
    #line 470 
    if ((sc->driver_data & 1UL) != 0UL) 
                                        #line 470 
                                        tmp_0 = (char *)"CUS198"; else 
                                                                    #line 470 
                                                                    tmp_0 = (char *)"CUS230";
    #line 470 
    ;
    #line 470 
    ath_printk((char *)"\001",common,(char *)"Set parameters for %s\n",tmp_0);
  }
  #line 475 
  if ((sc->driver_data & 4UL) != 0UL) 
                                      #line 476 
                                      ath_printk((char *)"\001",common,(char *)"CUS217 card detected\n");
  #line 478 
  if ((sc->driver_data & 8UL) != 0UL) 
                                      #line 479 
                                      ath_printk((char *)"\001",common,(char *)"CUS252 card detected\n");
  #line 481 
  if ((sc->driver_data & 128UL) != 0UL) 
                                        #line 482 
                                        ath_printk((char *)"\001",common,(char *)"WB335 1-ANT card detected\n");
  #line 484 
  if ((sc->driver_data & 256UL) != 0UL) 
                                        #line 485 
                                        ath_printk((char *)"\001",common,(char *)"WB335 2-ANT card detected\n");
  #line 487 
  if ((sc->driver_data & 1024UL) != 0UL) 
                                         #line 488 
                                         ath_printk((char *)"\001",common,(char *)"Killer Wireless card detected\n");
  #line 496 
  if ((sc->driver_data & 384UL) != 0UL) 
    #line 497 
    if ((sc->driver_data & 32UL) == 0UL) 
                                         #line 498 
                                         pCap->hw_caps &= 4294966271U;
  #line 501 
  if ((sc->driver_data & 32UL) != 0UL) {
    #line 502 
    pCap->hw_caps |= 131072U;
    #line 503 
    ath_printk((char *)"\001",common,(char *)"Set BT/WLAN RX diversity capability\n");
  }
  #line 506 
  if ((sc->driver_data & 64UL) != 0UL) {
    #line 507 
    ah->config.pcie_waen = 4212539U;
    #line 508 
    ath_printk((char *)"\001",common,(char *)"Enable WAR for ASPM D3/L1\n");
  }
  #line 516 
  ah->config.pll_pwrsave = (unsigned char)1U;
  #line 518 
  if ((sc->driver_data & 512UL) != 0UL) {
    #line 519 
    ah->config.pll_pwrsave = (unsigned char)0U;
    #line 520 
    ath_printk((char *)"\001",common,(char *)"Disable PLL PowerSave\n");
  }
  #line 523 
  if ((sc->driver_data & 2048UL) != 0UL) 
                                         #line 524 
                                         ah->config.led_active_high = (_Bool)1;
  #line 525 
  return;
}

#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static void ath9k_eeprom_request_cb(struct firmware *eeprom_blob, void *ctx)
{
  #line 530 
  struct ath9k_eeprom_ctx *ec = (struct ath9k_eeprom_ctx *)ctx;
  #line 532 
  if (eeprom_blob != (struct firmware *)0) 
                                           #line 533 
                                           (ec->ah)->eeprom_blob = eeprom_blob;
  #line 535 
  complete(& ec->complete);
  #line 536 
  return;
}

#line 538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static int ath9k_eeprom_request(struct ath_softc *sc, char *name)
{
  #line 540 
  struct ath9k_eeprom_ctx ec;
  #line 542 
  int err;
  #line 541 
  struct ath_hw *ah = sc->sc_ah;
  #line 545 
  __init_completion(& ec.complete);
  #line 546 
  ec.ah = sc->sc_ah;
  #line 548 
  err = request_firmware_nowait(& __this_module,(_Bool)1,name,sc->dev,3264U,(void *)(& ec),& ath9k_eeprom_request_cb);
  #line 550 
  if (err < 0) {
    #line 551 
    ath_printk((char *)"\001",ath9k_hw_common(ah),(char *)"EEPROM request failed\n");
    #line 553 
    return err;
  }
  #line 556 
  wait_for_completion(& ec.complete);
  #line 558 
  if (ah->eeprom_blob == (struct firmware *)0) {
    #line 559 
    ;
    #line 559 
    ath_printk((char *)"\001",ath9k_hw_common(ah),(char *)"Unable to load EEPROM file %s\n",name);
    #line 561 
    return -22;
  }
  #line 564 
  return 0;
}

#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static void ath9k_eeprom_release(struct ath_softc *sc)
{
  #line 569 
  cif_release_firmware((sc->sc_ah)->eeprom_blob);
  #line 570 
  return;
}

#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static int ath9k_init_platform(struct ath_softc *sc)
{
  #line 577 
  int ret;
  #line 574 
  struct ath9k_platform_data *pdata = (struct ath9k_platform_data *)(sc->dev)->platform_data;
  #line 575 
  struct ath_hw *ah = sc->sc_ah;
  #line 576 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 579 
  if (pdata == (struct ath9k_platform_data *)0) 
                                                #line 580 
                                                return 0;
  #line 582 
  if (! pdata->use_eeprom) {
    #line 583 
    ah->ah_flags &= 4294967294U;
    #line 584 
    ah->gpio_mask = pdata->gpio_mask;
    #line 585 
    ah->gpio_val = pdata->gpio_val;
    #line 586 
    ah->led_pin = pdata->led_pin;
    #line 587 
    ah->is_clk_25mhz = pdata->is_clk_25mhz;
    #line 588 
    ah->get_mac_revision = pdata->get_mac_revision;
    #line 589 
    ah->external_reset = pdata->external_reset;
    #line 590 
    ah->disable_2ghz = pdata->disable_2ghz;
    #line 591 
    ah->disable_5ghz = pdata->disable_5ghz;
    #line 593 
    if (! pdata->endian_check) 
                               #line 594 
                               ah->ah_flags |= 8U;
  }
  #line 597 
  if (pdata->eeprom_name != (char *)0) {
    #line 598 
    ret = ath9k_eeprom_request(sc,pdata->eeprom_name);
    #line 599 
    if (ret != 0) 
                  #line 600 
                  return ret;
  }
  #line 603 
  if ((int)pdata->led_active_high != 0) 
                                        #line 604 
                                        ah->config.led_active_high = (_Bool)1;
  #line 606 
  if ((int)pdata->tx_gain_buffalo != 0) 
                                        #line 607 
                                        ah->config.tx_gain_buffalo = (_Bool)1;
  #line 609 
  if (pdata->macaddr != (u8 *)0U) 
                                  #line 610 
                                  ether_addr_copy((u8 *)(& common->macaddr),pdata->macaddr);
  #line 612 
  return 0;
}

#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static int ath9k_of_init(struct ath_softc *sc)
{
  #line 621 
  char *mac;
  #line 622 
  char eeprom_name[100U];
  #line 623 
  int ret;
  #line 617 
  struct device_node *np = (sc->dev)->of_node;
  #line 618 
  struct ath_hw *ah = sc->sc_ah;
  #line 619 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 620 
  enum ath_bus_type bus_type = (common->bus_ops)->ath_bus_type;
  #line 625 
  if (! of_device_is_available(np)) 
                                    #line 626 
                                    return 0;
  #line 628 
  if ((common->debug_mask & 512) != 0) 
                                       #line 628 
                                       ath_printk((char *)"\001",common,(char *)"parsing configuration from OF node\n");
  #line 630 
  if ((int)of_property_read_bool(np,(char *)"qca,no-eeprom") != 0) {
    #line 632 
    scnprintf((char *)(& eeprom_name),100UL,(char *)"ath9k-eeprom-%s-%s.bin",ath_bus_type_to_string(bus_type),dev_name(ah->dev));
    #line 636 
    ret = ath9k_eeprom_request(sc,(char *)(& eeprom_name));
    #line 637 
    if (ret != 0) 
                  #line 638 
                  return ret;
    #line 640 
    ah->ah_flags &= 4294967294U;
    #line 641 
    ah->ah_flags |= 8U;
  }
  #line 644 
  mac = (char *)of_get_mac_address(np);
  #line 645 
  if (! IS_ERR_0((void *)mac)) 
                               #line 646 
                               ether_addr_copy((u8 *)(& common->macaddr),(u8 *)mac);
  #line 648 
  return 0;
}

#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static int ath9k_init_softc(u16 devid, struct ath_softc *sc, struct ath_bus_ops *bus_ops)
{
  #line 655 
  struct ath9k_hw_capabilities *pCap;
  #line 656 
  struct ath_common *common;
  #line 657 
  int i;
  #line 654 
  struct ath_hw *ah = (struct ath_hw *)0;
  #line 657 
  int ret = 0;
  #line 658 
  int csz = 0;
  #line 660 
  ah = (struct ath_hw *)cif_devm_kzalloc_0(sc->dev,9592UL,3264U);
  #line 661 
  if (ah == (struct ath_hw *)0) 
                                #line 662 
                                return -12;
  #line 664 
  ah->dev = sc->dev;
  #line 665 
  ah->hw = sc->hw;
  #line 666 
  ah->hw_version.devid = devid;
  #line 667 
  ah->ah_flags |= 1U;
  #line 668 
  ah->led_pin = -1;
  #line 669 
  ah->reg_ops.read = & ath9k_ioread32;
  #line 670 
  ah->reg_ops.multi_read = & ath9k_multi_ioread32;
  #line 671 
  ah->reg_ops.write = & ath9k_iowrite32;
  #line 672 
  ah->reg_ops.rmw = & ath9k_reg_rmw;
  #line 673 
  pCap = & ah->caps;
  #line 675 
  common = ath9k_hw_common(ah);
  #line 678 
  cif_set_bit_4(0L,& common->op_flags);
  #line 680 
  sc->sc_ah = ah;
  #line 681 
  sc->dfs_detector = dfs_pattern_detector_init(common,(enum nl80211_dfs_regions)NL80211_DFS_UNSET);
  #line 682 
  sc->tx99_power = (short)64;
  {
    #line 683 
    struct lock_class_key __key;
    #line 683 
    __init_waitqueue_head(& sc->tx_wait,(char *)"&sc->tx_wait",& __key);
  }
  #line 684 
  sc->cur_chan = & sc->chanctx[0];
  #line 685 
  if (! ath9k_is_chanctx_enabled()) 
                                    #line 686 
                                    (sc->cur_chan)->hw_queue_base = 0;
  #line 688 
  common->ops = & ah->reg_ops;
  #line 689 
  common->bus_ops = bus_ops;
  #line 690 
  common->ps_ops = & ath9k_ps_ops;
  #line 691 
  common->ah = (void *)ah;
  #line 692 
  common->hw = sc->hw;
  #line 693 
  common->priv = (void *)sc;
  #line 694 
  common->debug_mask = (int)ath9k_debug;
  #line 695 
  common->btcoex_enabled = (_Bool)(ath9k_btcoex_enable == 1);
  #line 696 
  common->disable_ani = (_Bool)0;
  #line 701 
  ath9k_init_pcoem_platform(sc);
  #line 703 
  ret = ath9k_init_platform(sc);
  #line 704 
  if (ret != 0) 
                #line 705 
                return ret;
  #line 707 
  ret = ath9k_of_init(sc);
  #line 708 
  if (ret != 0) 
                #line 709 
                return ret;
  #line 711 
  if (ath9k_led_active_high != -1) 
                                   #line 712 
                                   ah->config.led_active_high = (_Bool)(ath9k_led_active_high == 1);
  #line 721 
  if ((! common->btcoex_enabled && ath9k_bt_ant_diversity != 0) && (pCap->hw_caps & 131072U) != 0U) 
    #line 723 
    common->bt_ant_diversity = (_Bool)1;
  #line 725 
  spinlock_check(& common->cc_lock);
  {
    #line 725 
    struct lock_class_key __key_0;
    #line 725 
    __raw_spin_lock_init(& common->cc_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&common->cc_lock)->rlock",& __key_0);
  }
  #line 726 
  spinlock_check(& sc->intr_lock);
  {
    #line 726 
    struct lock_class_key __key_1;
    #line 726 
    __raw_spin_lock_init(& sc->intr_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&sc->intr_lock)->rlock",& __key_1);
  }
  #line 727 
  spinlock_check(& sc->sc_serial_rw);
  {
    #line 727 
    struct lock_class_key __key_2;
    #line 727 
    __raw_spin_lock_init(& sc->sc_serial_rw.__anonCompField_spinlock_25.rlock,(char *)"&(&sc->sc_serial_rw)->rlock",& __key_2);
  }
  #line 728 
  spinlock_check(& sc->sc_pm_lock);
  {
    #line 728 
    struct lock_class_key __key_3;
    #line 728 
    __raw_spin_lock_init(& sc->sc_pm_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&sc->sc_pm_lock)->rlock",& __key_3);
  }
  #line 729 
  spinlock_check(& sc->chan_lock);
  {
    #line 729 
    struct lock_class_key __key_4;
    #line 729 
    __raw_spin_lock_init(& sc->chan_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&sc->chan_lock)->rlock",& __key_4);
  }
  {
    #line 730 
    struct lock_class_key __key_5;
    #line 730 
    __mutex_init(& sc->mutex,(char *)"&sc->mutex",& __key_5);
  }
  #line 731 
  cif_tasklet_init(& sc->intr_tq,& ath9k_tasklet,(unsigned long)sc);
  #line 732 
  cif_tasklet_init(& sc->bcon_tasklet,& ath9k_beacon_tasklet,(unsigned long)sc);
  {
    #line 735 
    struct lock_class_key __key_6;
    #line 735 
    init_timer_key(& sc->sleep_timer,& ath_ps_full_sleep,0U,(char *)"(&sc->sleep_timer)",& __key_6);
  }
  {
    #line 736 
    struct lock_class_key __key_7;
    #line 736 
    __init_work(& sc->hw_reset_work,0);
    #line 736 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 736 
    sc->hw_reset_work.data = __constr_expr_41;
    #line 736 
    lockdep_init_map(& sc->hw_reset_work.lockdep_map,(char *)"(work_completion)",& __key_7,0);
    #line 736 
    INIT_LIST_HEAD_4(& sc->hw_reset_work.entry);
    #line 736 
    sc->hw_reset_work.func = & ath_reset_work;
  }
  {
    #line 737 
    struct lock_class_key __key_8;
    #line 737 
    __init_work(& sc->paprd_work,0);
    #line 737 
    atomic_long_t __constr_expr_42 = {.counter = 137438953408LL};
    #line 737 
    sc->paprd_work.data = __constr_expr_42;
    #line 737 
    lockdep_init_map(& sc->paprd_work.lockdep_map,(char *)"(work_completion)",& __key_8,0);
    #line 737 
    INIT_LIST_HEAD_4(& sc->paprd_work.entry);
    #line 737 
    sc->paprd_work.func = & ath_paprd_calibrate;
  }
  {
    #line 738 
    struct lock_class_key __key_9;
    #line 738 
    __init_work(& sc->hw_pll_work.work,0);
    #line 738 
    atomic_long_t __constr_expr_43 = {.counter = 137438953408LL};
    #line 738 
    sc->hw_pll_work.work.data = __constr_expr_43;
    #line 738 
    lockdep_init_map(& sc->hw_pll_work.work.lockdep_map,(char *)"(work_completion)",& __key_9,0);
    #line 738 
    INIT_LIST_HEAD_4(& sc->hw_pll_work.work.entry);
    #line 738 
    sc->hw_pll_work.work.func = & ath_hw_pll_work;
  }
  {
    #line 738 
    struct lock_class_key __key_10;
    #line 738 
    init_timer_key(& sc->hw_pll_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&sc->hw_pll_work)->timer",& __key_10);
  }
  {
    #line 739 
    struct lock_class_key __key_11;
    #line 739 
    __init_work(& sc->hw_check_work.work,0);
    #line 739 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 739 
    sc->hw_check_work.work.data = __constr_expr_44;
    #line 739 
    lockdep_init_map(& sc->hw_check_work.work.lockdep_map,(char *)"(work_completion)",& __key_11,0);
    #line 739 
    INIT_LIST_HEAD_4(& sc->hw_check_work.work.entry);
    #line 739 
    sc->hw_check_work.work.func = & ath_hw_check_work;
  }
  {
    #line 739 
    struct lock_class_key __key_12;
    #line 739 
    init_timer_key(& sc->hw_check_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&sc->hw_check_work)->timer",& __key_12);
  }
  #line 741 
  ath9k_init_channel_context(sc);
  #line 747 
  ath_read_cachesize(common,& csz);
  #line 748 
  common->cachelsz = (unsigned short)((int)((unsigned short)csz) << 2U);
  #line 751 
  ret = ath9k_hw_init(ah);
  #line 752 
  if (ret != 0) 
                #line 753 
                goto err_hw;
  #line 755 
  ret = ath9k_init_queues(sc);
  #line 756 
  if (ret != 0) 
                #line 757 
                goto err_queues;
  #line 759 
  ret = ath9k_init_btcoex(sc);
  #line 760 
  if (ret != 0) 
                #line 761 
                goto err_btcoex;
  #line 763 
  ret = ath9k_cmn_init_channels_rates(common);
  #line 764 
  if (ret != 0) 
                #line 765 
                goto err_btcoex;
  #line 767 
  ret = ath9k_init_p2p(sc);
  #line 768 
  if (ret != 0) 
                #line 769 
                goto err_btcoex;
  #line 771 
  ath9k_cmn_init_crypto(sc->sc_ah);
  #line 772 
  ath9k_init_misc(sc);
  #line 773 
  ath_chanctx_init(sc);
  #line 774 
  ath9k_offchannel_init(sc);
  #line 776 
  if ((common->bus_ops)->aspm_init != (void (*)(struct ath_common *))0) 
    #line 777 
    (*((common->bus_ops)->aspm_init))(common);
  #line 779 
  return 0;
  #line 781 
  err_btcoex: 
              #line 781 
  ;
  #line 782 
  i = 0;
  #line 782 
  while (i <= 9) {
    #line 783 
    if ((sc->tx.txqsetup & (unsigned int)(1 << i)) != 0U) 
                                                          #line 784 
                                                          ath_tx_cleanupq(sc,& sc->tx.txq[i]);
    #line 782 
    i ++;
  }
  #line 785 
  err_queues: 
              #line 785 
  ;
  #line 786 
  ath9k_hw_deinit(ah);
  #line 787 
  err_hw: 
          #line 787 
  ;
  #line 788 
  ath9k_eeprom_release(sc);
  #line 789 
  dev_kfree_skb_any(sc->tx99_skb);
  #line 790 
  return ret;
}

#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static void ath9k_init_band_txpower(struct ath_softc *sc, int band)
{
  #line 795 
  struct ieee80211_supported_band *sband;
  #line 796 
  struct ieee80211_channel *chan;
  #line 799 
  struct cfg80211_chan_def chandef;
  #line 800 
  int i;
  #line 797 
  struct ath_hw *ah = sc->sc_ah;
  #line 798 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 802 
  sband = & common->sbands[band];
  #line 803 
  i = 0;
  #line 803 
  while (sband->n_channels > i) {
    #line 804 
    chan = sband->channels + (unsigned long)i;
    #line 805 
    ah->curchan = & ah->channels[(int)chan->hw_value];
    #line 806 
    cfg80211_chandef_create(& chandef,chan,(enum nl80211_channel_type)NL80211_CHAN_HT20);
    #line 807 
    ath9k_cmn_get_channel(sc->hw,ah,& chandef);
    #line 808 
    ath9k_hw_set_txpowerlimit(ah,254U,(_Bool)1);
    #line 803 
    i ++;
  }
  #line 810 
  return;
}

#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static void ath9k_init_txpower_limits(struct ath_softc *sc)
{
  #line 814 
  struct ath_hw *ah = sc->sc_ah;
  #line 815 
  struct ath9k_channel *curchan = ah->curchan;
  #line 817 
  if ((ah->caps.hw_caps & 2048U) != 0U) 
                                        #line 818 
                                        ath9k_init_band_txpower(sc,0);
  #line 819 
  if ((ah->caps.hw_caps & 4096U) != 0U) 
                                        #line 820 
                                        ath9k_init_band_txpower(sc,1);
  #line 822 
  ah->curchan = curchan;
  #line 823 
  return;
}

#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static struct ieee80211_iface_limit if_limits_multi[3U] = {{.max = (unsigned short)2U, .types = (unsigned short)780U}, {.max = (unsigned short)1U, .types = (unsigned short)2U}, {.max = (unsigned short)1U, .types = (unsigned short)1024U}};
#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static struct ieee80211_iface_combination if_comb_multi[1U] = {{.limits = (struct ieee80211_iface_limit *)(& if_limits_multi), .num_different_channels = 2U, .max_interfaces = (unsigned short)3U, .n_limits = (unsigned char)3U, .beacon_int_infra_match = (_Bool)1}};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static void ath9k_set_mcc_capab(struct ath_softc *sc, struct ieee80211_hw *hw)
{
  #line 892 
  struct ath_hw *ah = sc->sc_ah;
  #line 893 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 895 
  if (! ath9k_is_chanctx_enabled()) 
                                    #line 896 
                                    return;
  #line 898 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_QUEUE_CONTROL);
  #line 899 
  hw->queues = (unsigned short)10U;
  #line 900 
  hw->offchannel_tx_hw_queue = (unsigned char)((unsigned int)((unsigned char)hw->queues) + 255U);
  #line 901 
  (hw->wiphy)->interface_modes = (unsigned short)((unsigned int)(hw->wiphy)->interface_modes & 65503U);
  #line 902 
  (hw->wiphy)->iface_combinations = (struct ieee80211_iface_combination *)(& if_comb_multi);
  #line 903 
  (hw->wiphy)->n_iface_combinations = 1;
  #line 904 
  (hw->wiphy)->max_scan_ssids = (unsigned char)255U;
  #line 905 
  (hw->wiphy)->max_scan_ie_len = (unsigned short)2304U;
  #line 906 
  (hw->wiphy)->max_remain_on_channel_duration = (unsigned short)10000U;
  #line 907 
  hw->chanctx_data_size = 8;
  #line 908 
  hw->extra_beacon_tailroom = 63U;
  #line 911 
  if ((common->debug_mask & 262144) != 0) 
                                          #line 911 
                                          ath_printk((char *)"\001",common,(char *)"Use channel contexts\n");
  #line 912 
  return;
}

#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static void ath9k_set_hw_capab(struct ath_softc *sc, struct ieee80211_hw *hw)
{
  #line 917 
  struct ath_hw *ah = sc->sc_ah;
  #line 918 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 920 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_SUPPORTS_HT_CCK_RATES);
  #line 921 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_SUPPORTS_RC_TABLE);
  #line 922 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_REPORTS_TX_ACK_STATUS);
  #line 923 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_SPECTRUM_MGMT);
  #line 924 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_PS_NULLFUNC_STACK);
  #line 925 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_SIGNAL_DBM);
  #line 926 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_RX_INCLUDES_FCS);
  #line 927 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_HOST_BROADCAST_PS_BUFFERING);
  #line 928 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_SUPPORT_FAST_XMIT);
  #line 929 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_SUPPORTS_CLONED_SKBS);
  #line 931 
  if (ath9k_ps_enable != 0) 
                            #line 932 
                            _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_SUPPORTS_PS);
  #line 934 
  if (((sc->sc_ah)->caps.hw_caps & 1U) != 0U) {
    #line 935 
    _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_AMPDU_AGGREGATION);
    #line 937 
    if (ah->hw_version.macVersion > 127U) 
                                          #line 938 
                                          hw->radiotap_mcs_details = (unsigned char)((unsigned int)hw->radiotap_mcs_details | 32U);
  }
  #line 942 
  if ((sc->sc_ah)->hw_version.macVersion > 63U || ath9k_modparam_nohwcrypt != 0) 
    #line 943 
    _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_MFP_CAPABLE);
  #line 945 
  (hw->wiphy)->features |= 395264U;
  #line 970 
  (hw->wiphy)->flags &= 4294967279U;
  #line 972 
  (hw->wiphy)->flags |= 256U;
  #line 973 
  (hw->wiphy)->flags |= 32768U;
  #line 974 
  (hw->wiphy)->flags |= 2097152U;
  #line 975 
  (hw->wiphy)->flags |= 4194304U;
  #line 976 
  (hw->wiphy)->flags |= 8388608U;
  #line 977 
  (hw->wiphy)->flags |= 16384U;
  #line 979 
  hw->queues = (unsigned short)4U;
  #line 980 
  hw->max_rates = (unsigned char)4U;
  #line 981 
  hw->max_listen_interval = (unsigned short)10U;
  #line 982 
  hw->max_rate_tries = (unsigned char)10U;
  #line 983 
  hw->sta_data_size = 504;
  #line 984 
  hw->vif_data_size = 664;
  #line 985 
  hw->txq_data_size = 168;
  #line 986 
  hw->extra_tx_headroom = 4U;
  #line 988 
  (hw->wiphy)->available_antennas_rx = (unsigned int)(1UL << (int)ah->caps.max_rxchains) + 4294967295U;
  #line 989 
  (hw->wiphy)->available_antennas_tx = (unsigned int)(1UL << (int)ah->caps.max_txchains) + 4294967295U;
  #line 992 
  if ((ah->caps.hw_caps & 1024U) != 0U) 
                                        #line 993 
                                        (hw->wiphy)->available_antennas_rx = 3U;
  #line 995 
  sc->ant_rx = (unsigned char)(hw->wiphy)->available_antennas_rx;
  #line 996 
  sc->ant_tx = (unsigned char)(hw->wiphy)->available_antennas_tx;
  #line 998 
  if (((sc->sc_ah)->caps.hw_caps & 2048U) != 0U) 
                                                 #line 999 
                                                 (hw->wiphy)->bands[0] = & common->sbands[0];
  #line 1001 
  if (((sc->sc_ah)->caps.hw_caps & 4096U) != 0U) 
                                                 #line 1002 
                                                 (hw->wiphy)->bands[1] = & common->sbands[1];
  #line 1006 
  ath9k_set_mcc_capab(sc,hw);
  #line 1008 
  ath9k_init_wow(hw);
  #line 1009 
  ath9k_cmn_reload_chainmask(ah);
  #line 1011 
  SET_IEEE80211_PERM_ADDR(hw,(u8 *)(& common->macaddr));
  #line 1013 
  wiphy_ext_feature_set(hw->wiphy,(enum nl80211_ext_feature_index)NL80211_EXT_FEATURE_CQM_RSSI_LIST);
  #line 1014 
  wiphy_ext_feature_set(hw->wiphy,(enum nl80211_ext_feature_index)NL80211_EXT_FEATURE_AIRTIME_FAIRNESS);
  #line 1015 
  return;
}

#line 1017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
int ath9k_init_device(u16 devid, struct ath_softc *sc, struct ath_bus_ops *bus_ops)
{
  #line 1021 
  struct ath_common *common;
  #line 1022 
  struct ath_hw *ah;
  #line 1024 
  struct ath_regulatory *reg;
  #line 1020 
  struct ieee80211_hw *hw = sc->hw;
  #line 1023 
  int error = 0;
  #line 1027 
  error = ath9k_init_softc((unsigned short)((int)devid),sc,bus_ops);
  #line 1028 
  if (error != 0) 
                  #line 1029 
                  return error;
  #line 1031 
  ah = sc->sc_ah;
  #line 1032 
  common = ath9k_hw_common(ah);
  #line 1033 
  ath9k_set_hw_capab(sc,hw);
  #line 1036 
  error = ath_regd_init(& common->regulatory,(sc->hw)->wiphy,& ath9k_reg_notifier);
  #line 1038 
  if (error != 0) 
                  #line 1039 
                  goto deinit;
  #line 1041 
  reg = & common->regulatory;
  #line 1044 
  error = ath_tx_init(sc,512);
  #line 1045 
  if (error != 0) 
                  #line 1046 
                  goto deinit;
  #line 1049 
  error = ath_rx_init(sc,512);
  #line 1050 
  if (error != 0) 
                  #line 1051 
                  goto deinit;
  #line 1053 
  ath9k_init_txpower_limits(sc);
  #line 1057 
  sc->led_cdev.default_trigger = ieee80211_create_tpt_led_trigger(sc->hw,1U,(struct ieee80211_tpt_blink *)(& ath9k_tpt_blink),10U);
  #line 1063 
  error = ieee80211_register_hw(hw);
  #line 1064 
  if (error != 0) 
                  #line 1065 
                  goto rx_cleanup;
  #line 1067 
  error = ath9k_init_debug(ah);
  #line 1068 
  if (error != 0) {
    #line 1069 
    ath_printk((char *)"\001",common,(char *)"Unable to create debugfs files\n");
    #line 1070 
    goto unregister;
  }
  #line 1074 
  if (! ath_is_world_regd(reg)) {
    #line 1075 
    error = regulatory_hint(hw->wiphy,(char *)(& reg->alpha2));
    #line 1076 
    if (error != 0) 
                    #line 1077 
                    goto debug_cleanup;
  }
  #line 1080 
  ath_init_leds(sc);
  #line 1081 
  ath_start_rfkill_poll(sc);
  #line 1083 
  return 0;
  #line 1085 
  debug_cleanup: 
                 #line 1085 
  ;
  #line 1086 
  ath9k_deinit_debug(sc);
  #line 1087 
  unregister: 
              #line 1087 
  ;
  #line 1088 
  ieee80211_unregister_hw(hw);
  #line 1089 
  rx_cleanup: 
              #line 1089 
  ;
  #line 1090 
  ath_rx_cleanup(sc);
  #line 1091 
  deinit: 
          #line 1091 
  ;
  #line 1092 
  ath9k_deinit_softc(sc);
  #line 1093 
  return error;
}

#line 1100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static void ath9k_deinit_softc(struct ath_softc *sc)
{
  #line 1102 
  int i = 0;
  #line 1104 
  ath9k_deinit_p2p(sc);
  #line 1105 
  ath9k_deinit_btcoex(sc);
  #line 1107 
  i = 0;
  #line 1107 
  while (i <= 9) {
    #line 1108 
    if ((sc->tx.txqsetup & (unsigned int)(1 << i)) != 0U) 
                                                          #line 1109 
                                                          ath_tx_cleanupq(sc,& sc->tx.txq[i]);
    #line 1107 
    i ++;
  }
  #line 1111 
  cif_del_timer_sync_4(& sc->sleep_timer);
  #line 1112 
  ath9k_hw_deinit(sc->sc_ah);
  #line 1113 
  if (sc->dfs_detector != (struct dfs_pattern_detector *)0) 
                                                            #line 1114 
                                                            (*((sc->dfs_detector)->exit))(sc->dfs_detector);
  #line 1116 
  ath9k_eeprom_release(sc);
  #line 1117 
  return;
}

#line 1119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
void ath9k_deinit_device(struct ath_softc *sc)
{
  #line 1121 
  struct ieee80211_hw *hw = sc->hw;
  #line 1123 
  ath9k_ps_wakeup(sc);
  #line 1125 
  wiphy_rfkill_stop_polling((sc->hw)->wiphy);
  #line 1126 
  ath_deinit_leds(sc);
  #line 1128 
  ath9k_ps_restore(sc);
  #line 1130 
  ath9k_deinit_debug(sc);
  #line 1131 
  ath9k_deinit_wow(hw);
  #line 1132 
  ieee80211_unregister_hw(hw);
  #line 1133 
  ath_rx_cleanup(sc);
  #line 1134 
  ath9k_deinit_softc(sc);
  #line 1135 
  return;
}

#line 1141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static int ath9k_init(void)
{
  #line 1143 
  int error;
  #line 1145 
  error = ath_pci_init();
  #line 1146 
  if (error < 0) {
    #line 1147 
    printk((char *)"\001");
    #line 1148 
    error = -19;
    #line 1149 
    goto err_out;
  }
  #line 1152 
  error = ath_ahb_init();
  #line 1153 
  if (error < 0) {
    #line 1154 
    error = -19;
    #line 1155 
    goto err_pci_exit;
  }
  #line 1158 
  dmi_check_system((struct dmi_system_id *)(& ath9k_quirks));
  #line 1160 
  return 0;
  #line 1162 
  err_pci_exit: 
                #line 1162 
  ;
  #line 1163 
  ath_pci_exit();
  #line 1164 
  err_out: 
           #line 1164 
  ;
  #line 1165 
  return error;
}

#line 1169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/init.c"
static void ath9k_exit(void)
{
  #line 1171 
  is_ath9k_unloaded = (_Bool)1;
  #line 1172 
  ath_ahb_exit();
  #line 1173 
  ath_pci_exit();
  #line 1174 
  printk((char *)"\001",dev_info);
  #line 1175 
  return;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
#line 102 
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2);
#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
void emg_ath9k_exit(void)
{
  #line 108 
  ath9k_exit();
  #line 109 
  return;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
int emg_ath9k_init(void)
{
  #line 112 
  return ath9k_init();
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_set_bit_4(long nr, unsigned long *addr)
{
  #line 133 
  ldv_set_bit(nr,addr);
  #line 134 
  return;
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void INIT_LIST_HEAD_4(struct list_head *list)
{
  #line 147 
  ldv_init_list_head(list);
  #line 148 
  return;
}

#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static bool IS_ERR_0(void *ptr)
{
  #line 231 
  return ldv_is_err(ptr);
}

#line 854  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif___ldv_spin_lock_sc_serial_rw_of_ath_softc(spinlock_t *lock)
{
  #line 857 
  ldv_spin_model_lock((char *)"sc_serial_rw_of_ath_softc");
  #line 859 
  __ldv_spin_lock(lock);
  #line 860 
  return;
}

#line 863  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_spin_unlock_irqrestore_sc_serial_rw_of_ath_softc(spinlock_t *lock, unsigned long flags)
{
  #line 866 
  ldv_spin_model_unlock((char *)"sc_serial_rw_of_ath_softc");
  #line 868 
  spin_unlock_irqrestore_5(lock,flags);
  #line 869 
  return;
}

#line 872  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags)
{
  #line 875 
  return ldv_devm_kzalloc(size,flags);
}

#line 879  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 882 
  ldv_release_firmware(fw);
  #line 883 
  return;
}

#line 886  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data)
{
  #line 890 
  emg_tasklet_init(t,func,data);
  #line 891 
  return;
}

#line 894  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static int cif_del_timer_sync_4(struct timer_list *timer)
{
  #line 898 
  return emg_del_timer_sync(timer);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/beacon.i.aux"
static void cif_set_bit_5(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/beacon.i.aux"
static void cif_clear_bit_4(long nr, unsigned long *addr);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_4(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_17617 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_4(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_4(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_3(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_17619 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_3(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_3(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_3(struct list_head *entry)
{
  #line 139 
  __list_del_entry_3(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/beacon.i.aux"
static void atomic_inc_0(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/beacon.i.aux"
static void atomic_dec_0(atomic_t *v);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_7(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 791  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/beacon.i.aux"
static void cif_spin_lock_bh_axq_lock_of_ath_txq_3(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_7(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/beacon.i.aux"
static void cif_spin_unlock_bh_axq_lock_of_ath_txq_3(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_6(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/beacon.i.aux"
static void cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_5(spinlock_t *lock, unsigned long flags);
#line 35 
#line 809 
static void cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_5(spinlock_t *lock);
#line 664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static void tasklet_disable_nosync_0(struct tasklet_struct *t)
{
  #line 666 
  atomic_inc_0(& t->count);
  #line 670 
  return;
}

#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static void tasklet_disable_0(struct tasklet_struct *t)
{
  #line 672 
  tasklet_disable_nosync_0(t);
  #line 673 
  tasklet_unlock_wait(t);
  #line 674 
  ldv_inline_asm();
  #line 675 
  return;
}

#line 677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static void tasklet_enable_0(struct tasklet_struct *t)
{
  #line 680 
  atomic_dec_0(& t->count);
  #line 681 
  return;
}

#line 4737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 4737 
struct sk_buff *ieee80211_beacon_get_tim(struct ieee80211_hw *, struct ieee80211_vif *, u16 *, u16 *);
#line 4750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static struct sk_buff *ieee80211_beacon_get(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 4753 
  return ieee80211_beacon_get_tim(hw,vif,(u16 *)0U,(u16 *)0U);
}

#line 4791 
#line 4791 
void ieee80211_csa_finish(struct ieee80211_vif *);
#line 4799 
#line 4799 
bool ieee80211_csa_is_complete(struct ieee80211_vif *);
#line 721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/mac.h"
#line 721 
bool ath9k_hw_stop_dma_queue(struct ath_hw *, u32);
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/calib.h"
#line 116 
void ath9k_hw_bstuck_nfcal(struct ath_hw *);
#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw.h"
#line 1069 
void ath9k_hw_beaconinit(struct ath_hw *, u32, u32);
#line 1070 
#line 1070 
void ath9k_hw_set_sta_beacon_timers(struct ath_hw *, struct ath9k_beacon_state *);
#line 1072 
#line 1072 
void ath9k_hw_check_nav(struct ath_hw *);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/common-beacon.h"
#line 19 
int ath9k_cmn_beacon_config_sta(struct ath_hw *, struct ath_beacon_config *, struct ath9k_beacon_state *);
#line 22 
#line 22 
void ath9k_cmn_beacon_config_adhoc(struct ath_hw *, struct ath_beacon_config *);
#line 24 
#line 24 
void ath9k_cmn_beacon_config_ap(struct ath_hw *, struct ath_beacon_config *, unsigned int);
#line 723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
bool ath9k_csa_is_finished(struct ath_softc *sc, struct ieee80211_vif *vif);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
static void ath9k_reset_beacon_status(struct ath_softc *sc)
{
  #line 24 
  sc->beacon.tx_processed = (_Bool)0;
  #line 25 
  sc->beacon.tx_last = (_Bool)0;
  #line 26 
  return;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
static void ath9k_beaconq_config(struct ath_softc *sc)
{
  #line 37 
  struct ath9k_tx_queue_info qi;
  #line 37 
  struct ath9k_tx_queue_info qi_be;
  #line 38 
  struct ath_txq *txq;
  #line 35 
  struct ath_hw *ah = sc->sc_ah;
  #line 36 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 40 
  ath9k_hw_get_txq_props(ah,(int)sc->beacon.beaconq,& qi);
  #line 42 
  if ((sc->sc_ah)->opmode == (unsigned int)NL80211_IFTYPE_AP || (sc->sc_ah)->opmode == (unsigned int)NL80211_IFTYPE_MESH_POINT) {
    #line 45 
    qi.tqi_aifs = 1U;
    #line 46 
    qi.tqi_cwmin = 0U;
    #line 47 
    qi.tqi_cwmax = 0U;
  }
  else {
    #line 50 
    txq = sc->tx.txq_map[2];
    #line 51 
    ath9k_hw_get_txq_props(ah,(int)txq->axq_qnum,& qi_be);
    #line 52 
    qi.tqi_aifs = qi_be.tqi_aifs;
    #line 53 
    if (ah->slottime == 20U) 
                             #line 54 
                             qi.tqi_cwmin = qi_be.tqi_cwmin * 2U; else 
                                                                    #line 56 
                                                                    qi.tqi_cwmin = qi_be.tqi_cwmin * 4U;
    #line 57 
    qi.tqi_cwmax = qi_be.tqi_cwmax;
  }
  #line 60 
  if (ath9k_hw_set_txq_props(ah,(int)sc->beacon.beaconq,& qi)) 
                                                               #line 63 
                                                               ath9k_hw_resettxqueue(ah,sc->beacon.beaconq); else 
                                                                    #line 61 
                                                                    ath_printk((char *)"\001",common,(char *)"Unable to update h/w beacon queue parameters\n");
  #line 64 
  return;
}

#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
static void ath9k_beacon_setup(struct ath_softc *sc, struct ieee80211_vif *vif, struct ath_buf *bf, int rateidx)
{
  #line 98 
  int __y;
  #line 78 
  struct ath_tx_info info;
  #line 79 
  struct ieee80211_supported_band *sband;
  #line 81 
  u8 i;
  #line 75 
  struct sk_buff *skb = bf->bf_mpdu;
  #line 76 
  struct ath_hw *ah = sc->sc_ah;
  #line 77 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 80 
  u8 chainmask = ah->txchainmask;
  #line 81 
  u8 rate = (unsigned char)0U;
  #line 83 
  sband = & common->sbands[(unsigned int)(sc->cur_chandef.chan)->band];
  #line 84 
  rate = (unsigned char)(sband->bitrates + (unsigned long)rateidx)->hw_value;
  #line 85 
  if ((int)vif->bss_conf.use_short_preamble != 0) 
                                                  #line 86 
                                                  rate = (unsigned char)((int)((unsigned char)(sband->bitrates + (unsigned long)rateidx)->hw_value_short) | (int)rate);
  #line 88 
  memset((void *)(& info),0,184UL);
  #line 89 
  info.pkt_len = (int)(skb->len + 4U);
  #line 90 
  info.type = ATH9K_PKT_TYPE_BEACON;
  #line 91 
  i = (unsigned char)0U;
  #line 91 
  while ((unsigned int)i <= 3U) {
    #line 92 
    info.txpower[(int)i] = (unsigned char)63U;
    #line 91 
    i = (u8)((int)i + 1);
  }
  #line 93 
  info.keyix = (unsigned char)255U;
  #line 94 
  info.keytype = ATH9K_KEY_TYPE_CLEAR;
  #line 95 
  info.flags = 4098U;
  #line 97 
  info.buf_addr[0] = bf->bf_buf_addr;
  #line 98 
  __y = 4;
  #line 98 
  info.buf_len[0] = (int)((((skb->len + (unsigned int)__y) + 4294967295U) / (unsigned int)__y) * (unsigned int)__y);
  #line 100 
  info.is_first = (_Bool)1;
  #line 101 
  info.is_last = (_Bool)1;
  #line 103 
  info.qcu = (unsigned char)sc->beacon.beaconq;
  #line 105 
  info.rates[0].Tries = 1U;
  #line 106 
  info.rates[0].Rate = (unsigned int)rate;
  #line 107 
  info.rates[0].ChSel = (unsigned int)ath_txchainmask_reduction(sc,(unsigned char)((int)chainmask),
                                  (unsigned int)rate);
  #line 109 
  ath9k_hw_set_txdesc(ah,bf->bf_desc,& info);
  #line 110 
  return;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
static struct ath_buf *ath9k_beacon_generate(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 117 
  struct ath_buf *bf;
  #line 119 
  struct sk_buff *skb;
  #line 121 
  struct ieee80211_tx_info *info;
  #line 122 
  struct ieee80211_mgmt *mgmt_hdr;
  #line 123 
  int cabq_depth;
  #line 115 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 116 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 118 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 120 
  struct ath_txq *cabq = sc->beacon.cabq;
  #line 125 
  if (avp->av_bcbuf == (struct ath_buf *)0) 
                                            #line 126 
                                            return (struct ath_buf *)0;
  #line 128 
  bf = avp->av_bcbuf;
  #line 129 
  skb = bf->bf_mpdu;
  #line 130 
  if (skb != (struct sk_buff *)0) {
    #line 131 
    dma_unmap_single_attrs(sc->dev,bf->bf_buf_addr,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 133 
    dev_kfree_skb_any(skb);
    #line 134 
    bf->bf_buf_addr = 0ULL;
    #line 135 
    bf->bf_mpdu = (struct sk_buff *)0;
  }
  #line 138 
  skb = ieee80211_beacon_get(hw,vif);
  #line 139 
  if (skb == (struct sk_buff *)0) 
                                  #line 140 
                                  return (struct ath_buf *)0;
  #line 142 
  bf->bf_mpdu = skb;
  #line 144 
  mgmt_hdr = (struct ieee80211_mgmt *)skb->data;
  #line 145 
  mgmt_hdr->u.beacon.timestamp = avp->tsf_adjust;
  #line 147 
  info = IEEE80211_SKB_CB(skb);
  #line 149 
  ath_assign_seq(common,skb);
  #line 152 
  if ((int)ath9k_is_chanctx_enabled() != 0) 
                                            #line 153 
                                            ath9k_beacon_add_noa(sc,avp,skb);
  #line 155 
  bf->bf_buf_addr = dma_map_single_attrs(sc->dev,(void *)skb->data,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 157 
  if ((long)(dma_mapping_error(sc->dev,bf->bf_buf_addr) != 0) != 0L) {
    #line 158 
    dev_kfree_skb_any(skb);
    #line 159 
    bf->bf_mpdu = (struct sk_buff *)0;
    #line 160 
    bf->bf_buf_addr = 0ULL;
    #line 161 
    ath_printk((char *)"\001",common,(char *)"dma_mapping_error on beaconing\n");
    #line 162 
    return (struct ath_buf *)0;
  }
  #line 165 
  skb = ieee80211_get_buffered_bc(hw,vif);
  #line 175 
  cif_spin_lock_bh_axq_lock_of_ath_txq_3(& cabq->axq_lock);
  #line 176 
  cabq_depth = (int)cabq->axq_depth;
  #line 177 
  cif_spin_unlock_bh_axq_lock_of_ath_txq_3(& cabq->axq_lock);
  #line 179 
  if (skb != (struct sk_buff *)0 && cabq_depth != 0) 
    #line 180 
    if ((int)(sc->cur_chan)->nvifs > 1) {
      #line 181 
      if ((common->debug_mask & 256) != 0) 
                                           #line 181 
                                           ath_printk((char *)"\001",common,(char *)"Flushing previous cabq traffic\n");
      #line 183 
      ath_draintxq(sc,cabq);
    }
  #line 187 
  ath9k_beacon_setup(sc,vif,bf,(int)info->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_3075_193.__anonCompField___anonunion_3076_192.rates[0].idx);
  #line 189 
  if (skb != (struct sk_buff *)0) 
                                  #line 190 
                                  ath_tx_cabq(hw,vif,skb);
  #line 192 
  return bf;
}

#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
void ath9k_beacon_assign_slot(struct ath_softc *sc, struct ieee80211_vif *vif)
{
  #line 201 
  void *__mptr;
  #line 199 
  int slot;
  #line 197 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 198 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 201 
  __mptr = (void *)sc->beacon.bbuf.next;
  #line 201 
  avp->av_bcbuf = ((struct ath_buf *)__mptr);
  #line 202 
  list_del_3(& (avp->av_bcbuf)->list);
  #line 204 
  slot = 0;
  #line 204 
  while (slot <= 7) {
    #line 205 
    if (sc->beacon.bslot[slot] == (struct ieee80211_vif *)0) {
      #line 206 
      avp->av_bslot = slot;
      #line 207 
      break;
    }
    #line 204 
    slot ++;
  }
  #line 211 
  sc->beacon.bslot[avp->av_bslot] = vif;
  #line 213 
  if ((common->debug_mask & 512) != 0) 
                                       #line 213 
                                       ath_printk((char *)"\001",common,(char *)"Added interface at beacon slot: %d\n",avp->av_bslot);
  #line 214 
  return;
}

#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
void ath9k_beacon_remove_slot(struct ath_softc *sc, struct ieee80211_vif *vif)
{
  #line 219 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 220 
  struct ath_vif *avp = (struct ath_vif *)(& vif->drv_priv);
  #line 221 
  struct ath_buf *bf = avp->av_bcbuf;
  #line 223 
  if ((common->debug_mask & 512) != 0) 
                                       #line 223 
                                       ath_printk((char *)"\001",common,(char *)"Removing interface at beacon slot: %d\n",avp->av_bslot);
  #line 226 
  tasklet_disable_0(& sc->bcon_tasklet);
  #line 228 
  if (bf != (struct ath_buf *)0 && bf->bf_mpdu != (struct sk_buff *)0) {
    #line 229 
    struct sk_buff *skb = bf->bf_mpdu;
    #line 230 
    dma_unmap_single_attrs(sc->dev,bf->bf_buf_addr,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 232 
    dev_kfree_skb_any(skb);
    #line 233 
    bf->bf_mpdu = (struct sk_buff *)0;
    #line 234 
    bf->bf_buf_addr = 0ULL;
  }
  #line 237 
  avp->av_bcbuf = (struct ath_buf *)0;
  #line 238 
  sc->beacon.bslot[avp->av_bslot] = (struct ieee80211_vif *)0;
  #line 239 
  list_add_tail_4(& bf->list,& sc->beacon.bbuf);
  #line 241 
  tasklet_enable_0(& sc->bcon_tasklet);
  #line 242 
  return;
}

#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
void ath9k_beacon_ensure_primary_slot(struct ath_softc *sc)
{
  #line 282 
  int __ret_warn_on;
  #line 247 
  struct ieee80211_vif *vif;
  #line 248 
  struct ath_vif *avp;
  #line 249 
  s64 tsfadjust;
  #line 250 
  u32 offset;
  #line 252 
  int slot;
  #line 246 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 251 
  int first_slot = 8;
  #line 254 
  tasklet_disable_0(& sc->bcon_tasklet);
  #line 257 
  slot = 0;
  #line 257 
  while (slot <= 7) {
    #line 258 
    if (sc->beacon.bslot[slot] != (struct ieee80211_vif *)0) {
      #line 259 
      first_slot = slot;
      #line 260 
      break;
    }
    #line 257 
    slot ++;
  }
  #line 263 
  if (first_slot == 0) 
                       #line 264 
                       goto out;
  #line 267 
  slot = 0;
  #line 267 
  while (slot <= 7) {
    #line 268 
    if (slot + first_slot <= 7) {
      #line 269 
      vif = sc->beacon.bslot[slot + first_slot];
      #line 270 
      sc->beacon.bslot[slot] = vif;
      #line 272 
      if (vif != (struct ieee80211_vif *)0) {
        #line 273 
        avp = (struct ath_vif *)(& vif->drv_priv);
        #line 274 
        avp->av_bslot = slot;
      }
    }
    else 
         #line 277 
         sc->beacon.bslot[slot] = (struct ieee80211_vif *)0;
    #line 267 
    slot ++;
  }
  #line 281 
  vif = sc->beacon.bslot[0];
  #line 282 
  __ret_warn_on = vif == (struct ieee80211_vif *)0;
  #line 282 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
  }
  #line 282 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 283 
                                                goto out;
  #line 286 
  avp = (struct ath_vif *)(& vif->drv_priv);
  #line 287 
  tsfadjust = (long long)avp->tsf_adjust;
  #line 289 
  if ((common->debug_mask & 512) != 0) 
                                       #line 289 
                                       ath_printk((char *)"\001",common,(char *)"Adjusting global TSF after beacon slot reassignment: %lld\n",tsfadjust);
  #line 294 
  (avp->chanctx)->tsf_val += (unsigned long long)tsfadjust;
  #line 295 
  if (sc->cur_chan == avp->chanctx) {
    #line 296 
    offset = ath9k_hw_get_tsf_offset(& (avp->chanctx)->tsf_ts,(struct timespec64 *)0);
    #line 297 
    ath9k_hw_settsf64(sc->sc_ah,(avp->chanctx)->tsf_val + (unsigned long long)offset);
  }
  #line 302 
  out: 
       #line 302 
  ;
  #line 303 
  tasklet_enable_0(& sc->bcon_tasklet);
  #line 304 
  return;
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
static int ath9k_beacon_choose_slot(struct ath_softc *sc)
{
  #line 310 
  u16 intval;
  #line 311 
  u32 tsftu;
  #line 312 
  u64 tsf;
  #line 313 
  int slot;
  #line 308 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 309 
  struct ath_beacon_config *cur_conf = & (sc->cur_chan)->beacon;
  #line 315 
  if ((sc->sc_ah)->opmode != (unsigned int)NL80211_IFTYPE_AP && (sc->sc_ah)->opmode != (unsigned int)NL80211_IFTYPE_MESH_POINT) {
    #line 317 
    if ((common->debug_mask & 256) != 0) {
      #line 317 
      ;
      #line 317 
      ath_printk((char *)"\001",common,(char *)"slot 0, tsf: %llu\n",ath9k_hw_gettsf64(sc->sc_ah));
    }
    #line 319 
    return 0;
  }
  #line 322 
  if (cur_conf->beacon_interval != 0) 
                                      #line 322 
                                      intval = (unsigned short)cur_conf->beacon_interval; else 
                                                                    #line 322 
                                                                    intval = (unsigned short)100U;
  #line 323 
  tsf = ath9k_hw_gettsf64(sc->sc_ah);
  #line 324 
  tsf = (unsigned long long)((sc->sc_ah)->config.sw_beacon_response_time << 10) + tsf;
  #line 325 
  tsftu = ((unsigned int)(tsf * 8ULL >> 32) << 22) | ((unsigned int)tsf * 8U >> 10);
  #line 326 
  slot = (int)((tsftu % (unsigned int)((int)intval * 8)) / (unsigned int)intval);
  #line 328 
  if ((common->debug_mask & 256) != 0) 
                                       #line 328 
                                       ath_printk((char *)"\001",common,(char *)"slot: %d tsf: %llu tsftu: %u\n",slot,tsf,tsftu / 8U);
  #line 331 
  return slot;
}

#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
static void ath9k_set_tsfadjust(struct ath_softc *sc, struct ath_beacon_config *cur_conf)
{
  #line 338 
  s64 tsfadjust;
  #line 339 
  int slot;
  #line 337 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 341 
  slot = 0;
  #line 341 
  while (slot <= 7) {
    {
      #line 342 
      struct ath_vif *avp;
      #line 344 
      if (sc->beacon.bslot[slot] == (struct ieee80211_vif *)0) 
                                                               #line 345 
                                                               goto __Cont;
      #line 347 
      avp = (struct ath_vif *)(& (sc->beacon.bslot[slot])->drv_priv);
      #line 354 
      tsfadjust = (long long)(cur_conf->beacon_interval * avp->av_bslot);
      #line 355 
      tsfadjust = (tsfadjust << 10) / -8LL;
      #line 356 
      avp->tsf_adjust = (unsigned long long)tsfadjust;
      #line 358 
      if ((common->debug_mask & 512) != 0) 
                                           #line 358 
                                           ath_printk((char *)"\001",common,(char *)"tsfadjust is: %lld for bslot: %d\n",tsfadjust,avp->av_bslot);
    }
    #line 341 
    __Cont: 
            #line 341 
    slot ++;
  }
  #line 360 
  return;
}

#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
bool ath9k_csa_is_finished(struct ath_softc *sc, struct ieee80211_vif *vif)
{
  #line 365 
  if (vif == (struct ieee80211_vif *)0 || ! vif->csa_active) 
                                                             #line 366 
                                                             return (_Bool)0;
  #line 368 
  if (! ieee80211_csa_is_complete(vif)) 
                                        #line 369 
                                        return (_Bool)0;
  #line 371 
  ieee80211_csa_finish(vif);
  #line 372 
  return (_Bool)1;
}

#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
static void ath9k_csa_update_vif(void *data, u8 *mac, struct ieee80211_vif *vif)
{
  #line 377 
  struct ath_softc *sc = (struct ath_softc *)data;
  #line 378 
  ath9k_csa_is_finished(sc,vif);
  #line 379 
  return;
}

#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
void ath9k_csa_update(struct ath_softc *sc)
{
  #line 383 
  ieee80211_iterate_active_interfaces_atomic(sc->hw,0U,& ath9k_csa_update_vif,(void *)sc);
  #line 386 
  return;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
void ath9k_beacon_tasklet(unsigned long data)
{
  #line 394 
  struct ieee80211_vif *vif;
  #line 396 
  int slot;
  #line 390 
  struct ath_softc *sc = (struct ath_softc *)data;
  #line 391 
  struct ath_hw *ah = sc->sc_ah;
  #line 392 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 393 
  struct ath_buf *bf = (struct ath_buf *)0;
  #line 395 
  bool edma = (_Bool)((ah->caps.hw_caps & 16U) != 0U);
  #line 398 
  if ((int)test_bit(4L,& common->op_flags) != 0) {
    #line 399 
    if ((common->debug_mask & 1) != 0) 
                                       #line 399 
                                       ath_printk((char *)"\001",common,(char *)"reset work is pending, skip beaconing now\n");
    #line 401 
    return;
  }
  #line 411 
  if (ath9k_hw_numtxpending(ah,sc->beacon.beaconq) != 0U) {
    #line 412 
    (sc->beacon.bmisscnt) ++;
    #line 414 
    ath9k_hw_check_nav(ah);
    #line 422 
    if (! ath_hw_check(sc)) 
                            #line 423 
                            return;
    #line 425 
    if (sc->beacon.bmisscnt < (unsigned int)((int)sc->nbcnvifs * 9)) {
      #line 426 
      if ((common->debug_mask & 16384) != 0) 
                                             #line 426 
                                             ath_printk((char *)"\001",common,(char *)"missed %u consecutive beacons\n",sc->beacon.bmisscnt);
      #line 429 
      ath9k_hw_stop_dma_queue(ah,sc->beacon.beaconq);
      #line 430 
      if (sc->beacon.bmisscnt > 3U) 
                                    #line 431 
                                    ath9k_hw_bstuck_nfcal(ah);
    }
    else 
      #line 432 
      if (sc->beacon.bmisscnt > 8U) {
        #line 433 
        if ((common->debug_mask & 16384) != 0) 
                                               #line 433 
                                               ath_printk((char *)"\001",common,(char *)"beacon is officially stuck\n");
        #line 434 
        sc->beacon.bmisscnt = 0U;
        #line 435 
        ath9k_queue_reset(sc,(enum ath_reset_type)RESET_TYPE_BEACON_STUCK);
      }
    #line 438 
    return;
  }
  #line 441 
  slot = ath9k_beacon_choose_slot(sc);
  #line 442 
  vif = sc->beacon.bslot[slot];
  #line 445 
  if (! edma) {
    #line 446 
    if ((int)ath9k_is_chanctx_enabled() != 0) 
                                              #line 447 
                                              ath_chanctx_beacon_sent_ev(sc,(enum ath_chanctx_event)ATH_CHANCTX_EVENT_BEACON_SENT);
    #line 451 
    if ((int)ath9k_csa_is_finished(sc,vif) != 0) 
                                                 #line 452 
                                                 return;
  }
  #line 455 
  if (vif == (struct ieee80211_vif *)0 || ! vif->bss_conf.enable_beacon) 
    #line 456 
    return;
  #line 458 
  if ((int)ath9k_is_chanctx_enabled() != 0) 
                                            #line 459 
                                            ath_chanctx_event(sc,vif,(enum ath_chanctx_event)ATH_CHANCTX_EVENT_BEACON_PREPARE);
  #line 462 
  bf = ath9k_beacon_generate(sc->hw,vif);
  #line 464 
  if (sc->beacon.bmisscnt != 0U) {
    #line 465 
    if ((common->debug_mask & 16384) != 0) 
                                           #line 465 
                                           ath_printk((char *)"\001",common,(char *)"resume beacon xmit after %u misses\n",sc->beacon.bmisscnt);
    #line 467 
    sc->beacon.bmisscnt = 0U;
  }
  #line 486 
  if (sc->beacon.updateslot == (unsigned int)UPDATE) {
    #line 487 
    sc->beacon.updateslot = COMMIT;
    #line 488 
    sc->beacon.slotupdate = slot;
  }
  else 
    #line 489 
    if (sc->beacon.updateslot == (unsigned int)COMMIT && sc->beacon.slotupdate == slot) {
      #line 491 
      ah->slottime = (unsigned int)sc->beacon.slottime;
      #line 492 
      ath9k_hw_init_global_settings(ah);
      #line 493 
      sc->beacon.updateslot = OK;
    }
  #line 496 
  if (bf != (struct ath_buf *)0) {
    #line 497 
    ath9k_reset_beacon_status(sc);
    #line 499 
    if ((common->debug_mask & 256) != 0) 
                                         #line 499 
                                         ath_printk((char *)"\001",common,(char *)"Transmitting beacon for slot: %d\n",slot);
    #line 503 
    ath9k_hw_puttxbuf(ah,sc->beacon.beaconq,(unsigned int)bf->bf_daddr);
    #line 505 
    if (! edma) 
                #line 506 
                ath9k_hw_txstart(ah,sc->beacon.beaconq);
  }
  #line 508 
  return;
}

#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
static void ath9k_beacon_init(struct ath_softc *sc, u32 nexttbtt, u32 intval)
{
  #line 516 
  struct ath_hw *ah = sc->sc_ah;
  #line 518 
  ath9k_hw_disable_interrupts(ah);
  #line 519 
  ath9k_beaconq_config(sc);
  #line 520 
  ath9k_hw_beaconinit(ah,nexttbtt,intval);
  #line 521 
  ah->imask = (enum ath9k_int)((unsigned int)ah->imask | 65536U);
  #line 522 
  sc->beacon.bmisscnt = 0U;
  #line 523 
  ath9k_hw_set_interrupts(ah);
  #line 524 
  ath9k_hw_enable_interrupts(ah);
  #line 525 
  return;
}

#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
static void ath9k_beacon_stop(struct ath_softc *sc)
{
  #line 529 
  ath9k_hw_disable_interrupts(sc->sc_ah);
  #line 530 
  (sc->sc_ah)->imask = (enum ath9k_int)((unsigned int)(sc->sc_ah)->imask & 4294639615U);
  #line 531 
  sc->beacon.bmisscnt = 0U;
  #line 532 
  ath9k_hw_set_interrupts(sc->sc_ah);
  #line 533 
  ath9k_hw_enable_interrupts(sc->sc_ah);
  #line 534 
  return;
}

#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
static void ath9k_beacon_config_ap(struct ath_softc *sc, struct ath_beacon_config *conf)
{
  #line 544 
  struct ath_hw *ah = sc->sc_ah;
  #line 546 
  ath9k_cmn_beacon_config_ap(ah,conf,8U);
  #line 547 
  ath9k_beacon_init(sc,conf->nexttbtt,conf->intval);
  #line 548 
  return;
}

#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
static void ath9k_beacon_config_sta(struct ath_hw *ah, struct ath_beacon_config *conf)
{
  #line 553 
  struct ath9k_beacon_state bs;
  #line 555 
  if (ath9k_cmn_beacon_config_sta(ah,conf,& bs) == -1) 
                                                       #line 556 
                                                       return;
  #line 558 
  ath9k_hw_disable_interrupts(ah);
  #line 559 
  ath9k_hw_set_sta_beacon_timers(ah,& bs);
  #line 560 
  ah->imask = (enum ath9k_int)((unsigned int)ah->imask | 262144U);
  #line 562 
  ath9k_hw_set_interrupts(ah);
  #line 563 
  ath9k_hw_enable_interrupts(ah);
  #line 564 
  return;
}

#line 566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
static void ath9k_beacon_config_adhoc(struct ath_softc *sc, struct ath_beacon_config *conf)
{
  #line 569 
  struct ath_hw *ah = sc->sc_ah;
  #line 570 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 572 
  ath9k_reset_beacon_status(sc);
  #line 574 
  ath9k_cmn_beacon_config_adhoc(ah,conf);
  #line 576 
  ath9k_beacon_init(sc,conf->nexttbtt,conf->intval);
  #line 582 
  if (! conf->ibss_creator && (unsigned int)conf->enable_beacon != 0U) 
    #line 583 
    cif_set_bit_5(1L,& common->op_flags);
  #line 584 
  return;
}

#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
static void ath9k_cache_beacon_config(struct ath_softc *sc, struct ath_chanctx *ctx, struct ieee80211_bss_conf *bss_conf)
{
  #line 590 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 591 
  struct ath_beacon_config *cur_conf = & ctx->beacon;
  #line 593 
  if ((common->debug_mask & 256) != 0) 
                                       #line 593 
                                       ath_printk((char *)"\001",common,(char *)"Caching beacon data for BSS: %pM\n",bss_conf->bssid);
  #line 596 
  cur_conf->beacon_interval = (int)bss_conf->beacon_int;
  #line 597 
  cur_conf->dtim_period = (unsigned short)bss_conf->dtim_period;
  #line 598 
  cur_conf->dtim_count = (unsigned char)1U;
  #line 599 
  cur_conf->ibss_creator = bss_conf->ibss_creator;
  #line 607 
  if (cur_conf->beacon_interval == 0) 
                                      #line 608 
                                      cur_conf->beacon_interval = 100;
  #line 610 
  cur_conf->bmiss_timeout = (unsigned short)((unsigned int)((unsigned short)cur_conf->beacon_interval) * 10U);
  #line 618 
  if ((unsigned int)cur_conf->dtim_period == 0U) 
                                                 #line 619 
                                                 cur_conf->dtim_period = (unsigned short)1U;
  #line 621 
  ath9k_set_tsfadjust(sc,cur_conf);
  #line 622 
  return;
}

#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
void ath9k_beacon_config(struct ath_softc *sc, struct ieee80211_vif *main_vif, bool beacons)
{
  #line 642 
  int __ret_warn_on;
  #line 629 
  struct ath_vif *avp;
  #line 630 
  struct ath_chanctx *ctx;
  #line 631 
  struct ath_beacon_config *cur_conf;
  #line 632 
  unsigned long flags;
  #line 633 
  bool enabled;
  #line 627 
  struct ath_hw *ah = sc->sc_ah;
  #line 628 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 634 
  bool skip_beacon = (_Bool)0;
  #line 636 
  if (! beacons) {
    #line 637 
    cif_clear_bit_4(1L,& common->op_flags);
    #line 638 
    ath9k_beacon_stop(sc);
    #line 639 
    return;
  }
  #line 642 
  __ret_warn_on = main_vif == (struct ieee80211_vif *)0;
  #line 642 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 643 
    ldv_inline_asm();
    #line 644 
    ldv_inline_asm();
  }
  #line 642 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 643 
                                                return;
  #line 645 
  avp = (struct ath_vif *)(& main_vif->drv_priv);
  #line 646 
  ctx = avp->chanctx;
  #line 647 
  cur_conf = & ctx->beacon;
  #line 648 
  enabled = (_Bool)((unsigned int)cur_conf->enable_beacon != 0U);
  #line 649 
  cur_conf->enable_beacon = (unsigned char)beacons;
  #line 651 
  if ((sc->sc_ah)->opmode == (unsigned int)NL80211_IFTYPE_STATION) {
    #line 652 
    ath9k_cache_beacon_config(sc,ctx,& main_vif->bss_conf);
    #line 654 
    ath9k_set_beacon(sc);
    #line 655 
    cif_set_bit_5(1L,& common->op_flags);
    #line 656 
    return;
  }
  #line 660 
  ath9k_cache_beacon_config(sc,ctx,& main_vif->bss_conf);
  #line 666 
  if (cur_conf->beacon_interval != 0) {
    #line 672 
    if (((sc->sc_ah)->opmode == (unsigned int)NL80211_IFTYPE_ADHOC && (! enabled && (int)beacons != 0)) && ! main_vif->bss_conf.ibss_creator) {
      #line 674 
      cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_5(& sc->sc_pm_lock);
      #line 675 
      sc->ps_flags = (unsigned short)((unsigned int)sc->ps_flags | 17U);
      #line 676 
      cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_5(& sc->sc_pm_lock,flags);
      #line 677 
      skip_beacon = (_Bool)1;
    }
    #line 684 
    if ((int)beacons != 0 && ! skip_beacon) {
      #line 685 
      cif_set_bit_5(1L,& common->op_flags);
      #line 686 
      ath9k_set_beacon(sc);
    }
    else {
      #line 688 
      cif_clear_bit_4(1L,& common->op_flags);
      #line 689 
      ath9k_beacon_stop(sc);
    }
  }
  else {
    #line 692 
    cif_clear_bit_4(1L,& common->op_flags);
    #line 693 
    ath9k_beacon_stop(sc);
  }
  #line 695 
  return;
}

#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/beacon.c"
void ath9k_set_beacon(struct ath_softc *sc)
{
  #line 699 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 700 
  struct ath_beacon_config *cur_conf = & (sc->cur_chan)->beacon;
  #line 702 
  switch ((unsigned int)(sc->sc_ah)->opmode) {
    #line 703 
    case (unsigned int)3: 
                          #line 703 
    ;
    #line 704 
    case (unsigned int)7: 
                          #line 704 
    ;
    #line 705 
    ath9k_beacon_config_ap(sc,cur_conf);
    #line 706 
    break;
    #line 707 
    case (unsigned int)1: 
                          #line 707 
    ;
    #line 708 
    ath9k_beacon_config_adhoc(sc,cur_conf);
    #line 709 
    break;
    #line 710 
    case (unsigned int)2: 
                          #line 710 
    ;
    #line 711 
    ath9k_beacon_config_sta(sc->sc_ah,cur_conf);
    #line 712 
    break;
    #line 713 
    default: 
             #line 713 
    ;
    #line 714 
    if ((common->debug_mask & 512) != 0) 
                                         #line 714 
                                         ath_printk((char *)"\001",common,(char *)"Unsupported beaconing mode\n");
    #line 715 
    return;
  }
  #line 717 
  return;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/beacon.i.aux"
static void cif_set_bit_5(long nr, unsigned long *addr)
{
  #line 123 
  ldv_set_bit(nr,addr);
  #line 124 
  return;
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/beacon.i.aux"
static void cif_clear_bit_4(long nr, unsigned long *addr)
{
  #line 130 
  ldv_clear_bit(nr,addr);
  #line 131 
  return;
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/beacon.i.aux"
static void atomic_inc_0(atomic_t *v)
{
  #line 186 
  ldv_atomic_inc(v);
  #line 187 
  return;
}

#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/beacon.i.aux"
static void atomic_dec_0(atomic_t *v)
{
  #line 193 
  ldv_atomic_dec(v);
  #line 194 
  return;
}

#line 791  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/beacon.i.aux"
static void cif_spin_lock_bh_axq_lock_of_ath_txq_3(spinlock_t *lock)
{
  #line 794 
  ldv_spin_model_lock((char *)"axq_lock_of_ath_txq");
  #line 796 
  spin_lock_bh_7(lock);
  #line 797 
  return;
}

#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/beacon.i.aux"
static void cif_spin_unlock_bh_axq_lock_of_ath_txq_3(spinlock_t *lock)
{
  #line 803 
  ldv_spin_model_unlock((char *)"axq_lock_of_ath_txq");
  #line 805 
  spin_unlock_bh_7(lock);
  #line 806 
  return;
}

#line 809  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/beacon.i.aux"
static void cif___ldv_spin_lock_sc_pm_lock_of_ath_softc_5(spinlock_t *lock)
{
  #line 812 
  ldv_spin_model_lock((char *)"sc_pm_lock_of_ath_softc");
  #line 814 
  __ldv_spin_lock(lock);
  #line 815 
  return;
}

#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/beacon.i.aux"
static void cif_spin_unlock_irqrestore_sc_pm_lock_of_ath_softc_5(spinlock_t *lock, unsigned long flags)
{
  #line 821 
  ldv_spin_model_unlock((char *)"sc_pm_lock_of_ath_softc");
  #line 823 
  spin_unlock_irqrestore_6(lock,flags);
  #line 824 
  return;
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 254  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_clear_bit_5(long nr, unsigned long *addr);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 327 
int kstrtoll(char *, unsigned int, long long *);
#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
__inline static int kstrtol(char *s, unsigned int base, long *res)
{
  #line 380 
  return kstrtoll(s,base,(long long *)res);
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_5(struct list_head *head)
{
  #line 269 
  union __anonunion___u_18655 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 268  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 275  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static size_t cif_strlen(char *s);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_8(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 918  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_spin_lock_bh_axq_lock_of_ath_txq_4(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_8(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 927  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_spin_unlock_bh_axq_lock_of_ath_txq_4(spinlock_t *lock);
#line 26 
#line 950 
static void cif_mutex_lock_mutex_of_ath_softc_3(struct mutex *lock);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 27 
#line 27 
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 21 
void *ldv_vmalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 957  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_mutex_unlock_mutex_of_ath_softc_3(struct mutex *lock);
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 943  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void *cif_vmalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 936  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_vfree(void *addr);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 484  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags);
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 118 
void seq_printf(struct seq_file *, char * , ...);
#line 120 
#line 120 
void seq_puts(struct seq_file *, char *);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 972  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static struct dentry *cif_debugfs_create_file_2(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 964  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 100 
void debugfs_create_u8(char *, umode_t, struct dentry *, u8 *);
#line 104 
#line 104 
struct dentry *debugfs_create_u32(char *, umode_t, struct dentry *, u32 *);
#line 122 
#line 122 
struct dentry *debugfs_create_bool(char *, umode_t, struct dentry *, bool *);
#line 139 
#line 139 
struct dentry *debugfs_create_devm_seqfile(struct device *, char *, struct dentry *, int (*)(struct seq_file *, void *));
#line 6078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static bool conf_is_ht40(struct ieee80211_conf *conf)
{
  #line 6080 
  return (_Bool)(conf->chandef.width == (unsigned int)NL80211_CHAN_WIDTH_40);
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
#line 320 
char *ath_opmode_to_string(enum nl80211_iftype);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/calib.h"
#line 112 
int ath9k_hw_loadnf(struct ath_hw *, struct ath9k_channel *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/hw-ops.h"
__inline static void ath9k_hw_set_bt_ant_diversity(struct ath_hw *ah, bool enable)
{
  #line 107 
  ;
  #line 107 
  if (ath9k_hw_ops(ah)->set_bt_ant_diversity != (void (*)(struct ath_hw *, bool ))0) {
    #line 108 
    (*(ath9k_hw_ops(ah)->set_bt_ant_diversity))(ah,(_Bool)((bool)((int)enable) != 0));
  }
  #line 109 
  return;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/common-debug.h"
#line 68 
void ath9k_cmn_debug_modal_eeprom(struct dentry *, struct ath_hw *);
#line 70 
#line 70 
void ath9k_cmn_debug_base_eeprom(struct dentry *, struct ath_hw *);
#line 72 
#line 72 
void ath9k_cmn_debug_stat_rx(struct ath_rx_stats *, struct ath_rx_status *);
#line 74 
#line 74 
void ath9k_cmn_debug_recv(struct dentry *, struct ath_rx_stats *);
#line 76 
#line 76 
void ath9k_cmn_debug_phy_err(struct dentry *, struct ath_rx_stats *);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/common-spectral.h"
#line 172 
void ath9k_cmn_spectral_init_debug(struct ath_spec_scan_priv *, struct dentry *);
#line 173 
#line 173 
void ath9k_cmn_spectral_deinit_debug(struct ath_spec_scan_priv *);
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
__inline static void ath_txq_lock_2(struct ath_softc *sc, struct ath_txq *txq)
{
  #line 567 
  cif_spin_lock_bh_axq_lock_of_ath_txq_4(& txq->axq_lock);
  #line 568 
  return;
}

#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/ath9k.h"
__inline static void ath_txq_unlock_2(struct ath_softc *sc, struct ath_txq *txq)
{
  #line 571 
  cif_spin_unlock_bh_axq_lock_of_ath_txq_4(& txq->axq_lock);
  #line 572 
  return;
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
void ath9k_debug_sync_cause(struct ath_softc *sc, u32 sync_cause)
{
  #line 31 
  if (sync_cause != 0U) 
                        #line 32 
                        (sc->debug.stats.istats.sync_cause_all) ++;
  #line 33 
  if ((sync_cause & 1U) != 0U) 
                               #line 34 
                               (sc->debug.stats.istats.sync_rtc_irq) ++;
  #line 35 
  if ((sync_cause & 2U) != 0U) 
                               #line 36 
                               (sc->debug.stats.istats.sync_mac_irq) ++;
  #line 37 
  if ((sync_cause & 4U) != 0U) 
                               #line 38 
                               (sc->debug.stats.istats.eeprom_illegal_access) ++;
  #line 39 
  if ((sync_cause & 8U) != 0U) 
                               #line 40 
                               (sc->debug.stats.istats.apb_timeout) ++;
  #line 41 
  if ((sync_cause & 16U) != 0U) 
                                #line 42 
                                (sc->debug.stats.istats.pci_mode_conflict) ++;
  #line 43 
  if ((sync_cause & 32U) != 0U) 
                                #line 44 
                                (sc->debug.stats.istats.host1_fatal) ++;
  #line 45 
  if ((sync_cause & 64U) != 0U) 
                                #line 46 
                                (sc->debug.stats.istats.host1_perr) ++;
  #line 47 
  if ((sync_cause & 128U) != 0U) 
                                 #line 48 
                                 (sc->debug.stats.istats.trcv_fifo_perr) ++;
  #line 49 
  if ((sync_cause & 256U) != 0U) 
                                 #line 50 
                                 (sc->debug.stats.istats.radm_cpl_ep) ++;
  #line 51 
  if ((sync_cause & 512U) != 0U) 
                                 #line 52 
                                 (sc->debug.stats.istats.radm_cpl_dllp_abort) ++;
  #line 53 
  if ((sync_cause & 1024U) != 0U) 
                                  #line 54 
                                  (sc->debug.stats.istats.radm_cpl_tlp_abort) ++;
  #line 55 
  if ((sync_cause & 2048U) != 0U) 
                                  #line 56 
                                  (sc->debug.stats.istats.radm_cpl_ecrc_err) ++;
  #line 57 
  if ((sync_cause & 4096U) != 0U) 
                                  #line 58 
                                  (sc->debug.stats.istats.radm_cpl_timeout) ++;
  #line 59 
  if ((sync_cause & 8192U) != 0U) 
                                  #line 60 
                                  (sc->debug.stats.istats.local_timeout) ++;
  #line 61 
  if ((sync_cause & 16384U) != 0U) 
                                   #line 62 
                                   (sc->debug.stats.istats.pm_access) ++;
  #line 63 
  if ((sync_cause & 32768U) != 0U) 
                                   #line 64 
                                   (sc->debug.stats.istats.mac_awake) ++;
  #line 65 
  if ((sync_cause & 65536U) != 0U) 
                                   #line 66 
                                   (sc->debug.stats.istats.mac_asleep) ++;
  #line 67 
  if ((sync_cause & 131072U) != 0U) 
                                    #line 68 
                                    (sc->debug.stats.istats.mac_sleep_access) ++;
  #line 69 
  return;
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t ath9k_debugfs_read_buf(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 74 
  u8 *buf = (u8 *)file->private_data;
  #line 75 
  ;
  #line 75 
  ;
  #line 75 
  ;
  #line 75 
  ;
  #line 75 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)buf,
                                cif_strlen((char *)buf));
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static int ath9k_debugfs_release_buf(struct inode *inode, struct file *file)
{
  #line 80 
  cif_vfree(file->private_data);
  #line 81 
  return 0;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t read_file_debug(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 91 
  char buf[32U];
  #line 92 
  unsigned int len;
  #line 89 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 90 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 94 
  len = (unsigned int)sprintf((char *)(& buf),(char *)"0x%08x\n",common->debug_mask);
  #line 95 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                (unsigned long)len);
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t write_file_debug(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 107 
  unsigned long tmp_0;
  #line 107 
  size_t __UNIQUE_ID___x555;
  #line 103 
  unsigned long mask;
  #line 104 
  char buf[32U];
  #line 105 
  ssize_t len;
  #line 101 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 102 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  {
    #line 107 
    __UNIQUE_ID___x555 = count;
    #line 107 
    unsigned long __UNIQUE_ID___y556 = 31UL;
    #line 107 
    if (__UNIQUE_ID___x555 < __UNIQUE_ID___y556) 
                                                 #line 107 
                                                 tmp_0 = __UNIQUE_ID___x555; else 
                                                                    #line 107 
                                                                    tmp_0 = __UNIQUE_ID___y556;
    }
  #line 107 
  len = (long)tmp_0;
  #line 108 
  if (copy_from_user((void *)(& buf),(void *)user_buf,(unsigned long)len) != 0UL) 
    #line 109 
    return -14L;
  #line 111 
  buf[len] = (char)0;
  #line 112 
  if (kstrtoul((char *)(& buf),0U,& mask) != 0) 
                                                #line 113 
                                                return -22L;
  #line 115 
  common->debug_mask = (int)mask;
  #line 116 
  return (long)count;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static struct file_operations fops_debug = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_debug, .write = & write_file_debug, .open = & simple_open};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t read_file_ani(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 141 
  char *buf;
  #line 142 
  int i;
  #line 167 
  char *tmp_1;
  #line 135 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 136 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 137 
  struct ath_hw *ah = sc->sc_ah;
  #line 138 
  unsigned int len = 0U;
  #line 139 
  unsigned int size = 1024U;
  #line 140 
  ssize_t retval = 0L;
  #line 146 
  struct __anonstruct_ani_info_19675 ani_info[14U] = {{.name = (char *)"ANI RESET", .val = ah->stats.ast_ani_reset}, {.name = (char *)"OFDM LEVEL", .val = (unsigned int)ah->ani.ofdmNoiseImmunityLevel}, {.name = (char *)"CCK LEVEL", .val = (unsigned int)ah->ani.cckNoiseImmunityLevel}, {.name = (char *)"SPUR UP", .val = ah->stats.ast_ani_spurup}, {.name = (char *)"SPUR DOWN", .val = ah->stats.ast_ani_spurdown}, {.name = (char *)"OFDM WS-DET ON", .val = ah->stats.ast_ani_ofdmon}, {.name = (char *)"OFDM WS-DET OFF", .val = ah->stats.ast_ani_ofdmoff}, {.name = (char *)"MRC-CCK ON", .val = ah->stats.ast_ani_ccklow}, {.name = (char *)"MRC-CCK OFF", .val = ah->stats.ast_ani_cckhigh}, {.name = (char *)"FIR-STEP UP", .val = ah->stats.ast_ani_stepup}, {.name = (char *)"FIR-STEP DOWN", .val = ah->stats.ast_ani_stepdown}, {.name = (char *)"INV LISTENTIME", .val = ah->stats.ast_ani_lneg_or_lzero}, {.name = (char *)"OFDM ERRORS", .val = ah->stats.ast_ani_ofdmerrs}, {.name = (char *)"CCK ERRORS", .val = ah->stats.ast_ani_cckerrs}};
  #line 163 
  buf = (char *)kzalloc_2(1024UL,3264U);
  #line 164 
  if (buf == (char *)0) 
                        #line 165 
                        return -12L;
  #line 167 
  if ((int)common->disable_ani != 0) 
                                     #line 167 
                                     tmp_1 = (char *)"DISABLED"; else 
                                                                   #line 167 
                                                                   tmp_1 = (char *)"ENABLED";
  #line 167 
  ;
  #line 168 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                  (char *)"%15s: %s\n",(char *)"ANI",tmp_1) + len;
  #line 170 
  if ((int)common->disable_ani != 0) 
                                     #line 171 
                                     goto exit;
  #line 173 
  i = 0;
  #line 173 
  while ((unsigned int)i <= 13U) {
    #line 175 
    len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                  (char *)"%15s: %u\n",ani_info[i].name,ani_info[i].val) + len;
    #line 173 
    i ++;
  }
  #line 177 
  exit: 
        #line 177 
  ;
  #line 178 
  if (len > 1024U) 
                   #line 179 
                   len = 1024U;
  #line 181 
  retval = simple_read_from_buffer((void *)user_buf,count,ppos,(void *)buf,(unsigned long)len);
  #line 182 
  kfree((void *)buf);
  #line 184 
  return retval;
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t write_file_ani(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 197 
  size_t __UNIQUE_ID___x557;
  #line 197 
  unsigned long tmp_0;
  #line 193 
  unsigned long ani;
  #line 194 
  char buf[32U];
  #line 195 
  ssize_t len;
  #line 191 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 192 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  {
    #line 197 
    __UNIQUE_ID___x557 = count;
    #line 197 
    unsigned long __UNIQUE_ID___y558 = 31UL;
    #line 197 
    if (__UNIQUE_ID___x557 < __UNIQUE_ID___y558) 
                                                 #line 197 
                                                 tmp_0 = __UNIQUE_ID___x557; else 
                                                                    #line 197 
                                                                    tmp_0 = __UNIQUE_ID___y558;
    }
  #line 197 
  len = (long)tmp_0;
  #line 198 
  if (copy_from_user((void *)(& buf),(void *)user_buf,(unsigned long)len) != 0UL) 
    #line 199 
    return -14L;
  #line 201 
  buf[len] = (char)0;
  #line 202 
  if (kstrtoul((char *)(& buf),0U,& ani) != 0) 
                                               #line 203 
                                               return -22L;
  #line 205 
  if (ani > 1UL) 
                 #line 206 
                 return -22L;
  #line 208 
  common->disable_ani = (_Bool)(ani == 0UL);
  #line 210 
  if ((int)common->disable_ani != 0) {
    #line 211 
    cif_clear_bit_5(2L,& common->op_flags);
    #line 212 
    ath_stop_ani(sc);
  }
  else 
       #line 214 
       ath_check_ani(sc);
  #line 217 
  return (long)count;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static struct file_operations fops_ani = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_ani, .write = & write_file_ani, .open = & simple_open};
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t read_file_bt_ant_diversity(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 236 
  char buf[32U];
  #line 237 
  unsigned int len;
  #line 234 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 235 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 239 
  len = (unsigned int)sprintf((char *)(& buf),(char *)"%d\n",(int)common->bt_ant_diversity);
  #line 240 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                (unsigned long)len);
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t write_file_bt_ant_diversity(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 254 
  size_t __UNIQUE_ID___x559;
  #line 254 
  unsigned long tmp_0;
  #line 250 
  unsigned long bt_ant_diversity;
  #line 251 
  char buf[32U];
  #line 252 
  ssize_t len;
  #line 247 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 248 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 249 
  struct ath9k_hw_capabilities *pCap = & (sc->sc_ah)->caps;
  {
    #line 254 
    __UNIQUE_ID___x559 = count;
    #line 254 
    unsigned long __UNIQUE_ID___y560 = 31UL;
    #line 254 
    if (__UNIQUE_ID___x559 < __UNIQUE_ID___y560) 
                                                 #line 254 
                                                 tmp_0 = __UNIQUE_ID___x559; else 
                                                                    #line 254 
                                                                    tmp_0 = __UNIQUE_ID___y560;
    }
  #line 254 
  len = (long)tmp_0;
  #line 255 
  if (copy_from_user((void *)(& buf),(void *)user_buf,(unsigned long)len) != 0UL) 
    #line 256 
    return -14L;
  #line 258 
  if ((pCap->hw_caps & 131072U) == 0U) 
                                       #line 259 
                                       goto exit;
  #line 261 
  buf[len] = (char)0;
  #line 262 
  if (kstrtoul((char *)(& buf),0U,& bt_ant_diversity) != 0) 
                                                            #line 263 
                                                            return -22L;
  #line 265 
  common->bt_ant_diversity = (_Bool)(bt_ant_diversity != 0UL);
  #line 266 
  ath9k_ps_wakeup(sc);
  #line 267 
  ath9k_hw_set_bt_ant_diversity(sc->sc_ah,(_Bool)((bool)((int)common->bt_ant_diversity) != 0));
  #line 268 
  if ((common->debug_mask & 512) != 0) 
                                       #line 268 
                                       ath_printk((char *)"\001",common,(char *)"Enable WLAN/BT RX Antenna diversity: %d\n",(int)common->bt_ant_diversity);
  #line 270 
  ath9k_ps_restore(sc);
  #line 271 
  exit: 
        #line 271 
  ;
  #line 272 
  return (long)count;
}

#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static struct file_operations fops_bt_ant_diversity = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_bt_ant_diversity, .write = & write_file_bt_ant_diversity, .open = & simple_open};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
void ath9k_debug_stat_ant(struct ath_softc *sc, struct ath_hw_antcomb_conf *div_ant_conf, int main_rssi_avg, int alt_rssi_avg)
{
  #line 289 
  struct ath_antenna_stats *as_main = & sc->debug.stats.ant_stats[0];
  #line 290 
  struct ath_antenna_stats *as_alt = & sc->debug.stats.ant_stats[1];
  #line 292 
  (as_main->lna_attempt_cnt[(int)div_ant_conf->main_lna_conf]) ++;
  #line 293 
  (as_alt->lna_attempt_cnt[(int)div_ant_conf->alt_lna_conf]) ++;
  #line 295 
  as_main->rssi_avg = (unsigned int)main_rssi_avg;
  #line 296 
  as_alt->rssi_avg = (unsigned int)alt_rssi_avg;
  #line 297 
  return;
}

#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t read_file_antenna_diversity(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 308 
  struct ath_hw_antcomb_conf div_ant_conf;
  #line 312 
  char *buf;
  #line 303 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 304 
  struct ath_hw *ah = sc->sc_ah;
  #line 305 
  struct ath9k_hw_capabilities *pCap = & ah->caps;
  #line 306 
  struct ath_antenna_stats *as_main = & sc->debug.stats.ant_stats[0];
  #line 307 
  struct ath_antenna_stats *as_alt = & sc->debug.stats.ant_stats[1];
  #line 309 
  unsigned int len = 0U;
  #line 310 
  unsigned int size = 1024U;
  #line 311 
  ssize_t retval = 0L;
  #line 313 
  char *lna_conf_str[4U] = {(char *)"LNA1_MINUS_LNA2", (char *)"LNA2", (char *)"LNA1", (char *)"LNA1_PLUS_LNA2"};
  #line 317 
  buf = (char *)kzalloc_2(1024UL,3264U);
  #line 318 
  if (buf == (char *)0) 
                        #line 319 
                        return -12L;
  #line 321 
  if ((pCap->hw_caps & 1024U) == 0U) {
    #line 323 
    len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                  (char *)"%s\n",
                  (char *)"Antenna Diversity Combining is disabled") + len;
    #line 324 
    goto exit;
  }
  #line 327 
  ath9k_ps_wakeup(sc);
  #line 328 
  ath9k_hw_antdiv_comb_conf_get(ah,& div_ant_conf);
  #line 330 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                  (char *)"Current MAIN config : %s\n",
                  lna_conf_str[(int)div_ant_conf.main_lna_conf]) + len;
  #line 332 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                  (char *)"Current ALT config  : %s\n",
                  lna_conf_str[(int)div_ant_conf.alt_lna_conf]) + len;
  #line 334 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                  (char *)"Average MAIN RSSI   : %d\n",as_main->rssi_avg) + len;
  #line 336 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                  (char *)"Average ALT RSSI    : %d\n\n",as_alt->rssi_avg) + len;
  #line 337 
  ath9k_ps_restore(sc);
  #line 339 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                  (char *)"Packet Receive Cnt:\n") + len;
  #line 340 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                  (char *)"-------------------\n") + len;
  #line 343 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                  (char *)"%30s%15s\n",(char *)"MAIN",(char *)"ALT") + len;
  #line 347 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                  (char *)"%-14s:%15d%15d\n",(char *)"TOTAL COUNT",
                  as_main->recv_cnt,as_alt->recv_cnt) + len;
  #line 351 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                  (char *)"%-14s:%15d%15d\n",(char *)"LNA1",
                  as_main->lna_recv_cnt[2],as_alt->lna_recv_cnt[2]) + len;
  #line 355 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                   (char *)"%-14s:%15d%15d\n",(char *)"LNA2",
                   as_main->lna_recv_cnt[1],as_alt->lna_recv_cnt[1]) + len;
  #line 359 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                   (char *)"%-14s:%15d%15d\n",(char *)"LNA1 + LNA2",
                   as_main->lna_recv_cnt[3],as_alt->lna_recv_cnt[3]) + len;
  #line 363 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                   (char *)"%-14s:%15d%15d\n",(char *)"LNA1 - LNA2",
                   as_main->lna_recv_cnt[0],as_alt->lna_recv_cnt[0]) + len;
  #line 365 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                   (char *)"\nLNA Config Attempts:\n") + len;
  #line 366 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                   (char *)"--------------------\n") + len;
  #line 369 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                   (char *)"%30s%15s\n",(char *)"MAIN",(char *)"ALT") + len;
  #line 373 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                   (char *)"%-14s:%15d%15d\n",(char *)"LNA1",
                   as_main->lna_attempt_cnt[2],as_alt->lna_attempt_cnt[2]) + len;
  #line 377 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                   (char *)"%-14s:%15d%15d\n",(char *)"LNA2",
                   as_main->lna_attempt_cnt[1],as_alt->lna_attempt_cnt[1]) + len;
  #line 381 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                   (char *)"%-14s:%15d%15d\n",(char *)"LNA1 + LNA2",
                   as_main->lna_attempt_cnt[3],as_alt->lna_attempt_cnt[3]) + len;
  #line 385 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(1024U - len),
                   (char *)"%-14s:%15d%15d\n",(char *)"LNA1 - LNA2",
                   as_main->lna_attempt_cnt[0],as_alt->lna_attempt_cnt[0]) + len;
  #line 387 
  exit: 
        #line 387 
  ;
  #line 388 
  if (len > 1024U) 
                   #line 389 
                   len = 1024U;
  #line 391 
  retval = simple_read_from_buffer((void *)user_buf,count,ppos,(void *)buf,(unsigned long)len);
  #line 392 
  kfree((void *)buf);
  #line 394 
  return retval;
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static struct file_operations fops_antenna_diversity = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_antenna_diversity, .open = & simple_open};
#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static int read_file_dma(struct seq_file *file, void *data)
{
  #line 409 
  u32 val[8U];
  #line 410 
  int i;
  #line 406 
  struct ieee80211_hw *hw = dev_get_drvdata((struct device *)file->private);
  #line 407 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 408 
  struct ath_hw *ah = sc->sc_ah;
  #line 410 
  int qcuOffset = 0;
  #line 410 
  int dcuOffset = 0;
  #line 411 
  u32 *qcuBase = val;
  #line 411 
  u32 *dcuBase = & val[4];
  #line 413 
  ath9k_ps_wakeup(sc);
  #line 415 
  (*((ath9k_hw_common(ah)->ops)->write))((void *)ah,33024U,88U);
  #line 420 
  seq_puts(file,(char *)"Raw DMA Debug values:\n");
  #line 422 
  i = 0;
  #line 422 
  while (i <= 7) {
    {
      #line 423 
      if (((unsigned int)i & 3U) == 0U) 
                                        #line 424 
                                        seq_puts(file,(char *)"\n");
      #line 426 
      val[i] = (*((ath9k_hw_common(ah)->ops)->read))((void *)ah,(unsigned int)((unsigned long)i + 56UL) * 4U);
      #line 427 
      seq_printf(file,(char *)"%d: %08x ",i,val[i]);
    }
    #line 422 
    i ++;
  }
  #line 430 
  seq_puts(file,(char *)"\n\n");
  #line 431 
  seq_puts(file,(char *)"Num QCU: chain_st fsp_ok fsp_st DCU: chain_st\n");
  #line 433 
  i = 0;
  #line 433 
  while (i <= 9) {
    #line 434 
    if (i == 8) {
      #line 435 
      qcuOffset = 0;
      #line 436 
      qcuBase ++;
    }
    #line 439 
    if (i == 6) {
      #line 440 
      dcuOffset = 0;
      #line 441 
      dcuBase ++;
    }
    #line 444 
    seq_printf(file,(char *)"%2d          %2x      %1x     %2x           %2x\n",i,(*qcuBase & (unsigned int)(7 << qcuOffset)) >> qcuOffset,(*qcuBase & (unsigned int)(8 << qcuOffset)) >> (qcuOffset + 3),(val[2] & (unsigned int)(7 << i * 3)) >> i * 3,(*dcuBase & (unsigned int)(31 << dcuOffset)) >> dcuOffset);
    #line 433 
    i ++;
    #line 433 
    qcuOffset += 4;
    #line 433 
    dcuOffset += 5;
  }
  #line 451 
  seq_puts(file,(char *)"\n");
  #line 453 
  seq_printf(file,(char *)"qcu_stitch state:   %2x    qcu_fetch state:        %2x\n",(val[3] >> 18) & 15U,(val[3] >> 22) & 15U);
  #line 455 
  seq_printf(file,(char *)"qcu_complete state: %2x    dcu_complete state:     %2x\n",(val[3] >> 26) & 7U,val[6] & 3U);
  #line 457 
  seq_printf(file,(char *)"dcu_arb state:      %2x    dcu_fp state:           %2x\n",(val[5] >> 25) & 3U,(val[5] >> 27) & 7U);
  #line 459 
  seq_printf(file,(char *)"chan_idle_dur:     %3d    chan_idle_dur_valid:     %1d\n",(val[6] >> 2) & 255U,(val[6] >> 10) & 1U);
  #line 461 
  seq_printf(file,(char *)"txfifo_valid_0:      %1d    txfifo_valid_1:          %1d\n",(val[6] >> 11) & 1U,(val[6] >> 12) & 1U);
  #line 463 
  seq_printf(file,(char *)"txfifo_dcu_num_0:   %2d    txfifo_dcu_num_1:       %2d\n",(val[6] >> 13) & 15U,(val[6] >> 17) & 15U);
  #line 466 
  ;
  #line 466 
  seq_printf(file,(char *)"pcu observe: 0x%x\n",(*((ath9k_hw_common(ah)->ops)->read))((void *)ah,32876U));
  #line 467 
  ;
  #line 467 
  seq_printf(file,(char *)"AR_CR: 0x%x\n",(*((ath9k_hw_common(ah)->ops)->read))((void *)ah,8U));
  #line 469 
  ath9k_ps_restore(sc);
  #line 471 
  return 0;
}

#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
void ath_debug_stat_interrupt(struct ath_softc *sc, enum ath9k_int status)
{
  #line 476 
  if (status != (unsigned int)0) 
                                 #line 477 
                                 (sc->debug.stats.istats.total) ++;
  #line 478 
  if (((sc->sc_ah)->caps.hw_caps & 16U) != 0U) {
    #line 479 
    if (((unsigned int)status & 2U) != 0U) 
                                           #line 480 
                                           (sc->debug.stats.istats.rxlp) ++;
    #line 481 
    if (((unsigned int)status & 1U) != 0U) 
                                           #line 482 
                                           (sc->debug.stats.istats.rxhp) ++;
    #line 483 
    if (((unsigned int)status & 1024U) != 0U) 
                                              #line 484 
                                              (sc->debug.stats.istats.bb_watchdog) ++;
  }
  else 
    #line 486 
    if (((unsigned int)status & 1U) != 0U) 
                                           #line 487 
                                           (sc->debug.stats.istats.rxok) ++;
  #line 489 
  if (((unsigned int)status & 16U) != 0U) 
                                          #line 490 
                                          (sc->debug.stats.istats.rxeol) ++;
  #line 491 
  if (((unsigned int)status & 32U) != 0U) 
                                          #line 492 
                                          (sc->debug.stats.istats.rxorn) ++;
  #line 493 
  if (((unsigned int)status & 64U) != 0U) 
                                          #line 494 
                                          (sc->debug.stats.istats.txok) ++;
  #line 495 
  if (((unsigned int)status & 2048U) != 0U) 
                                            #line 496 
                                            (sc->debug.stats.istats.txurn) ++;
  #line 497 
  if (((unsigned int)status & 16384U) != 0U) 
                                             #line 498 
                                             (sc->debug.stats.istats.rxphyerr) ++;
  #line 499 
  if (((unsigned int)status & 32768U) != 0U) 
                                             #line 500 
                                             (sc->debug.stats.istats.rx_keycache_miss) ++;
  #line 501 
  if (((unsigned int)status & 65536U) != 0U) 
                                             #line 502 
                                             (sc->debug.stats.istats.swba) ++;
  #line 503 
  if (((unsigned int)status & 262144U) != 0U) 
                                              #line 504 
                                              (sc->debug.stats.istats.bmiss) ++;
  #line 505 
  if (((unsigned int)status & 1048576U) != 0U) 
                                               #line 506 
                                               (sc->debug.stats.istats.bnr) ++;
  #line 507 
  if (((unsigned int)status & 268435456U) != 0U) 
                                                 #line 508 
                                                 (sc->debug.stats.istats.cst) ++;
  #line 509 
  if (((unsigned int)status & 536870912U) != 0U) 
                                                 #line 510 
                                                 (sc->debug.stats.istats.gtt) ++;
  #line 511 
  if (((unsigned int)status & 2097152U) != 0U) 
                                               #line 512 
                                               (sc->debug.stats.istats.tim) ++;
  #line 513 
  if (((unsigned int)status & 33554432U) != 0U) 
                                                #line 514 
                                                (sc->debug.stats.istats.cabend) ++;
  #line 515 
  if (((unsigned int)status & 8388608U) != 0U) 
                                               #line 516 
                                               (sc->debug.stats.istats.dtimsync) ++;
  #line 517 
  if (((unsigned int)status & 4194304U) != 0U) 
                                               #line 518 
                                               (sc->debug.stats.istats.dtim) ++;
  #line 519 
  if (((unsigned int)status & 67108864U) != 0U) 
                                                #line 520 
                                                (sc->debug.stats.istats.tsfoor) ++;
  #line 521 
  if (((unsigned int)status & 512U) != 0U) 
                                           #line 522 
                                           (sc->debug.stats.istats.mci) ++;
  #line 523 
  if (((unsigned int)status & 134217728U) != 0U) 
                                                 #line 524 
                                                 (sc->debug.stats.istats.gen_timer) ++;
  #line 525 
  return;
}

#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static int read_file_interrupt(struct seq_file *file, void *data)
{
  #line 529 
  struct ieee80211_hw *hw = dev_get_drvdata((struct device *)file->private);
  #line 530 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 538 
  if (((sc->sc_ah)->caps.hw_caps & 16U) != 0U) {
    #line 539 
    seq_printf(file,(char *)"%21s: %10u\n",(char *)"RXLP",sc->debug.stats.istats.rxlp);
    #line 540 
    seq_printf(file,(char *)"%21s: %10u\n",(char *)"RXHP",sc->debug.stats.istats.rxhp);
    #line 541 
    seq_printf(file,(char *)"%21s: %10u\n",(char *)"WATCHDOG",sc->debug.stats.istats.bb_watchdog);
  }
  else 
       #line 543 
       seq_printf(file,(char *)"%21s: %10u\n",(char *)"RX",sc->debug.stats.istats.rxok);
  #line 545 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"RXEOL",sc->debug.stats.istats.rxeol);
  #line 546 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"RXORN",sc->debug.stats.istats.rxorn);
  #line 547 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"TX",sc->debug.stats.istats.txok);
  #line 548 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"TXURN",sc->debug.stats.istats.txurn);
  #line 549 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"MIB",sc->debug.stats.istats.mib);
  #line 550 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"RXPHY",sc->debug.stats.istats.rxphyerr);
  #line 551 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"RXKCM",sc->debug.stats.istats.rx_keycache_miss);
  #line 552 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"SWBA",sc->debug.stats.istats.swba);
  #line 553 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"BMISS",sc->debug.stats.istats.bmiss);
  #line 554 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"BNR",sc->debug.stats.istats.bnr);
  #line 555 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"CST",sc->debug.stats.istats.cst);
  #line 556 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"GTT",sc->debug.stats.istats.gtt);
  #line 557 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"TIM",sc->debug.stats.istats.tim);
  #line 558 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"CABEND",sc->debug.stats.istats.cabend);
  #line 559 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"DTIMSYNC",sc->debug.stats.istats.dtimsync);
  #line 560 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"DTIM",sc->debug.stats.istats.dtim);
  #line 561 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"TSFOOR",sc->debug.stats.istats.tsfoor);
  #line 562 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"MCI",sc->debug.stats.istats.mci);
  #line 563 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"GENTIMER",sc->debug.stats.istats.gen_timer);
  #line 564 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"TOTAL",sc->debug.stats.istats.total);
  #line 566 
  seq_puts(file,(char *)"SYNC_CAUSE stats:\n");
  #line 568 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"Sync-All",sc->debug.stats.istats.sync_cause_all);
  #line 569 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"RTC-IRQ",sc->debug.stats.istats.sync_rtc_irq);
  #line 570 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"MAC-IRQ",sc->debug.stats.istats.sync_mac_irq);
  #line 571 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"EEPROM-Illegal-Access",sc->debug.stats.istats.eeprom_illegal_access);
  #line 572 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"APB-Timeout",sc->debug.stats.istats.apb_timeout);
  #line 573 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"PCI-Mode-Conflict",sc->debug.stats.istats.pci_mode_conflict);
  #line 574 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"HOST1-Fatal",sc->debug.stats.istats.host1_fatal);
  #line 575 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"HOST1-Perr",sc->debug.stats.istats.host1_perr);
  #line 576 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"TRCV-FIFO-Perr",sc->debug.stats.istats.trcv_fifo_perr);
  #line 577 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"RADM-CPL-EP",sc->debug.stats.istats.radm_cpl_ep);
  #line 578 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"RADM-CPL-DLLP-Abort",sc->debug.stats.istats.radm_cpl_dllp_abort);
  #line 579 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"RADM-CPL-TLP-Abort",sc->debug.stats.istats.radm_cpl_tlp_abort);
  #line 580 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"RADM-CPL-ECRC-Err",sc->debug.stats.istats.radm_cpl_ecrc_err);
  #line 581 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"RADM-CPL-Timeout",sc->debug.stats.istats.radm_cpl_timeout);
  #line 582 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"Local-Bus-Timeout",sc->debug.stats.istats.local_timeout);
  #line 583 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"PM-Access",sc->debug.stats.istats.pm_access);
  #line 584 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"MAC-Awake",sc->debug.stats.istats.mac_awake);
  #line 585 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"MAC-Asleep",sc->debug.stats.istats.mac_asleep);
  #line 586 
  seq_printf(file,(char *)"%21s: %10u\n",(char *)"MAC-Sleep-Access",sc->debug.stats.istats.mac_sleep_access);
  #line 588 
  return 0;
}

#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static int read_file_xmit(struct seq_file *file, void *data)
{
  #line 593 
  struct ieee80211_hw *hw = dev_get_drvdata((struct device *)file->private);
  #line 594 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 596 
  seq_printf(file,(char *)"%30s %10s%10s%10s\n\n",(char *)"BE",(char *)"BK",(char *)"VI",(char *)"VO");
  #line 598 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"MPDUs Queued:    ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].queued,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].queued,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].queued,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].queued);
  #line 599 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"MPDUs Completed: ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].completed,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].completed,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].completed,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].completed);
  #line 600 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"MPDUs XRetried:  ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].xretries,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].xretries,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].xretries,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].xretries);
  #line 601 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"Aggregates:      ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].a_aggr,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].a_aggr,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].a_aggr,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].a_aggr);
  #line 602 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"AMPDUs Queued HW:",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].a_queued_hw,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].a_queued_hw,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].a_queued_hw,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].a_queued_hw);
  #line 603 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"AMPDUs Completed:",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].a_completed,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].a_completed,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].a_completed,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].a_completed);
  #line 604 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"AMPDUs Retried:  ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].a_retries,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].a_retries,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].a_retries,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].a_retries);
  #line 605 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"AMPDUs XRetried: ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].a_xretries,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].a_xretries,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].a_xretries,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].a_xretries);
  #line 606 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"TXERR Filtered:  ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].txerr_filtered,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].txerr_filtered,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].txerr_filtered,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].txerr_filtered);
  #line 607 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"FIFO Underrun:   ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].fifo_underrun,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].fifo_underrun,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].fifo_underrun,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].fifo_underrun);
  #line 608 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"TXOP Exceeded:   ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].xtxop,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].xtxop,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].xtxop,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].xtxop);
  #line 609 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"TXTIMER Expiry:  ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].timer_exp,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].timer_exp,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].timer_exp,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].timer_exp);
  #line 610 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"DESC CFG Error:  ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].desc_cfg_err,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].desc_cfg_err,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].desc_cfg_err,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].desc_cfg_err);
  #line 611 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"DATA Underrun:   ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].data_underrun,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].data_underrun,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].data_underrun,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].data_underrun);
  #line 612 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"DELIM Underrun:  ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].delim_underrun,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].delim_underrun,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].delim_underrun,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].delim_underrun);
  #line 613 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"TX-Pkts-All:     ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].tx_pkts_all,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].tx_pkts_all,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].tx_pkts_all,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].tx_pkts_all);
  #line 614 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"TX-Bytes-All:    ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].tx_bytes_all,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].tx_bytes_all,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].tx_bytes_all,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].tx_bytes_all);
  #line 615 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"HW-put-tx-buf:   ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].puttxbuf,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].puttxbuf,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].puttxbuf,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].puttxbuf);
  #line 616 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"HW-tx-start:     ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].txstart,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].txstart,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].txstart,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].txstart);
  #line 617 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"HW-tx-proc-desc: ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].txprocdesc,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].txprocdesc,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].txprocdesc,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].txprocdesc);
  #line 618 
  seq_printf(file,(char *)"%s%13u%11u%10u%10u\n",(char *)"TX-Failed:       ",sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].txfailed,sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].txfailed,sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].txfailed,sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].txfailed);
  #line 620 
  return 0;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static void print_queue(struct ath_softc *sc, struct ath_txq *txq, struct seq_file *file)
{
  #line 626 
  ath_txq_lock_2(sc,txq);
  #line 628 
  seq_printf(file,(char *)"%s: %d ",(char *)"qnum",txq->axq_qnum);
  #line 629 
  seq_printf(file,(char *)"%s: %2d ",(char *)"qdepth",txq->axq_depth);
  #line 630 
  seq_printf(file,(char *)"%s: %2d ",(char *)"ampdu-depth",txq->axq_ampdu_depth);
  #line 631 
  seq_printf(file,(char *)"%s: %3d\n",(char *)"pending",txq->pending_frames);
  #line 633 
  ath_txq_unlock_2(sc,txq);
  #line 634 
  return;
}

#line 636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static int read_file_queues(struct seq_file *file, void *data)
{
  #line 640 
  struct ath_txq *txq;
  #line 641 
  int i;
  #line 638 
  struct ieee80211_hw *hw = dev_get_drvdata((struct device *)file->private);
  #line 639 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 642 
  char *qname[4U] = {(char *)"VO", (char *)"VI", (char *)"BE", (char *)"BK"};
  #line 646 
  i = 0;
  #line 646 
  while (i <= 3) {
    #line 647 
    txq = sc->tx.txq_map[i];
    #line 648 
    seq_printf(file,(char *)"(%s):  ",qname[i]);
    #line 649 
    print_queue(sc,txq,file);
    #line 646 
    i ++;
  }
  #line 652 
  seq_puts(file,(char *)"(CAB): ");
  #line 653 
  print_queue(sc,sc->beacon.cabq,file);
  #line 655 
  return 0;
}

#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static int read_file_misc(struct seq_file *file, void *data)
{
  #line 663 
  struct ath9k_vif_iter_data iter_data;
  #line 664 
  struct ath_chanctx *ctx;
  #line 665 
  unsigned int reg;
  #line 666 
  u32 rxfilter;
  #line 666 
  u32 i;
  #line 660 
  struct ieee80211_hw *hw = dev_get_drvdata((struct device *)file->private);
  #line 661 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 662 
  struct ath_common *common = ath9k_hw_common(sc->sc_ah);
  #line 668 
  seq_printf(file,(char *)"BSSID: %pM\n",(u8 *)(& common->curbssid));
  #line 669 
  seq_printf(file,(char *)"BSSID-MASK: %pM\n",(u8 *)(& common->bssidmask));
  #line 670 
  ;
  #line 670 
  seq_printf(file,(char *)"OPMODE: %s\n",ath_opmode_to_string((sc->sc_ah)->opmode));
  #line 673 
  ath9k_ps_wakeup(sc);
  #line 674 
  rxfilter = ath9k_hw_getrxfilter(sc->sc_ah);
  #line 675 
  ath9k_ps_restore(sc);
  #line 677 
  seq_printf(file,(char *)"RXFILTER: 0x%x",rxfilter);
  #line 679 
  if ((rxfilter & 1U) != 0U) 
                             #line 680 
                             seq_puts(file,(char *)" UCAST");
  #line 681 
  if ((rxfilter & 2U) != 0U) 
                             #line 682 
                             seq_puts(file,(char *)" MCAST");
  #line 683 
  if ((rxfilter & 4U) != 0U) 
                             #line 684 
                             seq_puts(file,(char *)" BCAST");
  #line 685 
  if ((rxfilter & 8U) != 0U) 
                             #line 686 
                             seq_puts(file,(char *)" CONTROL");
  #line 687 
  if ((rxfilter & 16U) != 0U) 
                              #line 688 
                              seq_puts(file,(char *)" BEACON");
  #line 689 
  if ((rxfilter & 32U) != 0U) 
                              #line 690 
                              seq_puts(file,(char *)" PROM");
  #line 691 
  if ((rxfilter & 128U) != 0U) 
                               #line 692 
                               seq_puts(file,(char *)" PROBEREQ");
  #line 693 
  if ((rxfilter & 256U) != 0U) 
                               #line 694 
                               seq_puts(file,(char *)" PHYERR");
  #line 695 
  if ((rxfilter & 512U) != 0U) 
                               #line 696 
                               seq_puts(file,(char *)" MYBEACON");
  #line 697 
  if ((rxfilter & 1024U) != 0U) 
                                #line 698 
                                seq_puts(file,(char *)" COMP_BAR");
  #line 699 
  if ((rxfilter & 16384U) != 0U) 
                                 #line 700 
                                 seq_puts(file,(char *)" PSPOLL");
  #line 701 
  if ((rxfilter & 8192U) != 0U) 
                                #line 702 
                                seq_puts(file,(char *)" PHYRADAR");
  #line 703 
  if ((rxfilter & 32768U) != 0U) 
                                 #line 704 
                                 seq_puts(file,(char *)" MCAST_BCAST_ALL");
  #line 705 
  if ((rxfilter & 524288U) != 0U) 
                                  #line 706 
                                  seq_puts(file,(char *)" CONTROL_WRAPPER");
  #line 708 
  seq_puts(file,(char *)"\n");
  #line 710 
  reg = (unsigned int)(sc->sc_ah)->imask;
  #line 712 
  seq_printf(file,(char *)"INTERRUPT-MASK: 0x%x",reg);
  #line 714 
  if ((reg & 65536U) != 0U) 
                            #line 715 
                            seq_puts(file,(char *)" SWBA");
  #line 716 
  if ((reg & 262144U) != 0U) 
                             #line 717 
                             seq_puts(file,(char *)" BMISS");
  #line 718 
  if ((reg & 268435456U) != 0U) 
                                #line 719 
                                seq_puts(file,(char *)" CST");
  #line 720 
  if ((reg & 1U) != 0U) 
                        #line 721 
                        seq_puts(file,(char *)" RX");
  #line 722 
  if ((reg & 1U) != 0U) 
                        #line 723 
                        seq_puts(file,(char *)" RXHP");
  #line 724 
  if ((reg & 2U) != 0U) 
                        #line 725 
                        seq_puts(file,(char *)" RXLP");
  #line 726 
  if ((reg & 1024U) != 0U) 
                           #line 727 
                           seq_puts(file,(char *)" BB_WATCHDOG");
  #line 729 
  seq_puts(file,(char *)"\n");
  #line 731 
  i = 0U;
  #line 732 
  ctx = & sc->chanctx[0];
  #line 732 
  while (& sc->chanctx[1UL] >= ctx) {
    {
      #line 738 
      u32 tmp_3;
      #line 733 
      if (list_empty_5(& ctx->vifs) != 0) 
                                          #line 734 
                                          goto __Cont;
      #line 735 
      ath9k_calculate_iter_data(sc,ctx,& iter_data);
      #line 737 
      ;
      #line 737 
      ;
      #line 737 
      ;
      #line 737 
      ;
      #line 737 
      ;
      #line 738 
      tmp_3 = i;
      #line 738 
      i ++;
      #line 737 
      ;
      #line 737 
      ;
      #line 737 
      seq_printf(file,(char *)"VIFS: CTX %i(%i) AP: %i STA: %i MESH: %i WDS: %i",tmp_3,(int)ctx->assigned,iter_data.naps,iter_data.nstations,iter_data.nmeshes,iter_data.nwds);
      #line 742 
      seq_printf(file,(char *)" ADHOC: %i OCB: %i TOTAL: %hi BEACON-VIF: %hi\n",iter_data.nadhocs,iter_data.nocbs,(int)(sc->cur_chan)->nvifs,(int)sc->nbcnvifs);
    }
    #line 732 
    __Cont: 
            #line 732 
    ctx ++;
  }
  #line 747 
  return 0;
}

#line 750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static int read_file_reset(struct seq_file *file, void *data)
{
  #line 769 
  int i;
  #line 752 
  struct ieee80211_hw *hw = dev_get_drvdata((struct device *)file->private);
  #line 753 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 754 
  char *reset_cause[13U] = {(char *)"Baseband Hang", (char *)"Baseband Watchdog", (char *)"Fatal HW Error", (char *)"TX HW error", (char *)"Transmit timeout", (char *)"TX Path Hang", (char *)"PLL RX Hang", (char *)"MAC Hang", (char *)"Stuck Beacon", (char *)"MCI Reset", (char *)"Calibration error", (char *)"Tx DMA stop error", (char *)"Rx DMA stop error"};
  #line 771 
  i = 0;
  #line 771 
  while ((unsigned int)i <= 12U) {
    #line 772 
    if (reset_cause[i] == (char *)0) 
                                     #line 773 
                                     goto __Cont;
    #line 775 
    seq_printf(file,(char *)"%17s: %2d\n",reset_cause[i],sc->debug.stats.reset[i]);
    #line 771 
    __Cont: 
            #line 771 
    i ++;
  }
  #line 779 
  return 0;
}

#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
void ath_debug_stat_tx(struct ath_softc *sc, struct ath_buf *bf, struct ath_tx_status *ts, struct ath_txq *txq, unsigned int flags)
{
  #line 786 
  int qnum = (int)txq->axq_qnum;
  #line 788 
  (sc->debug.stats.txstats[qnum].tx_pkts_all) ++;
  #line 789 
  sc->debug.stats.txstats[qnum].tx_bytes_all += (bf->bf_mpdu)->len;
  #line 791 
  if (((int)bf->bf_state.bf_type & 1) != 0) 
    #line 792 
    if ((flags & 1U) != 0U) 
                            #line 793 
                            (sc->debug.stats.txstats[qnum].a_xretries) ++; else 
                                                                    #line 795 
                                                                    (sc->debug.stats.txstats[qnum].a_completed) ++;
  else 
    #line 797 
    if (((int)ts->ts_status & 1) != 0) 
                                       #line 798 
                                       (sc->debug.stats.txstats[qnum].xretries) ++; else 
                                                                    #line 800 
                                                                    (sc->debug.stats.txstats[qnum].completed) ++;
  #line 803 
  if (((int)ts->ts_status & 2) != 0) 
                                     #line 804 
                                     (sc->debug.stats.txstats[qnum].txerr_filtered) ++;
  #line 805 
  if (((int)ts->ts_status & 4) != 0) 
                                     #line 806 
                                     (sc->debug.stats.txstats[qnum].fifo_underrun) ++;
  #line 807 
  if (((int)ts->ts_status & 8) != 0) 
                                     #line 808 
                                     (sc->debug.stats.txstats[qnum].xtxop) ++;
  #line 809 
  if (((int)ts->ts_status & 16) != 0) 
                                      #line 810 
                                      (sc->debug.stats.txstats[qnum].timer_exp) ++;
  #line 811 
  if (((int)ts->ts_flags & 4) != 0) 
                                    #line 812 
                                    (sc->debug.stats.txstats[qnum].desc_cfg_err) ++;
  #line 813 
  if (((int)ts->ts_flags & 8) != 0) 
                                    #line 814 
                                    (sc->debug.stats.txstats[qnum].data_underrun) ++;
  #line 815 
  if (((int)ts->ts_flags & 16) != 0) 
                                     #line 816 
                                     (sc->debug.stats.txstats[qnum].delim_underrun) ++;
  #line 817 
  return;
}

#line 819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
void ath_debug_stat_rx(struct ath_softc *sc, struct ath_rx_status *rs)
{
  #line 821 
  ath9k_cmn_debug_stat_rx(& sc->debug.stats.rxstats,rs);
  #line 822 
  return;
}

#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t read_file_regidx(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 828 
  char buf[32U];
  #line 829 
  unsigned int len;
  #line 827 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 831 
  len = (unsigned int)sprintf((char *)(& buf),(char *)"0x%08x\n",sc->debug.regidx);
  #line 832 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                (unsigned long)len);
}

#line 835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t write_file_regidx(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 843 
  size_t __UNIQUE_ID___x561;
  #line 843 
  unsigned long tmp;
  #line 839 
  unsigned long regidx;
  #line 840 
  char buf[32U];
  #line 841 
  ssize_t len;
  #line 838 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  {
    #line 843 
    __UNIQUE_ID___x561 = count;
    #line 843 
    unsigned long __UNIQUE_ID___y562 = 31UL;
    #line 843 
    if (__UNIQUE_ID___x561 < __UNIQUE_ID___y562) 
                                                 #line 843 
                                                 tmp = __UNIQUE_ID___x561; else 
                                                                    #line 843 
                                                                    tmp = __UNIQUE_ID___y562;
    }
  #line 843 
  len = (long)tmp;
  #line 844 
  if (copy_from_user((void *)(& buf),(void *)user_buf,(unsigned long)len) != 0UL) 
    #line 845 
    return -14L;
  #line 847 
  buf[len] = (char)0;
  #line 848 
  if (kstrtoul((char *)(& buf),0U,& regidx) != 0) 
                                                  #line 849 
                                                  return -22L;
  #line 851 
  sc->debug.regidx = (unsigned int)regidx;
  #line 852 
  return (long)count;
}

#line 855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static struct file_operations fops_regidx = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_regidx, .write = & write_file_regidx, .open = & simple_open};
#line 863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t read_file_regval(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 868 
  char buf[32U];
  #line 869 
  unsigned int len;
  #line 870 
  u32 regval;
  #line 866 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 867 
  struct ath_hw *ah = sc->sc_ah;
  #line 872 
  ath9k_ps_wakeup(sc);
  #line 873 
  regval = (*((ath9k_hw_common(ah)->ops)->read))((void *)ah,sc->debug.regidx);
  #line 874 
  ath9k_ps_restore(sc);
  #line 875 
  len = (unsigned int)sprintf((char *)(& buf),(char *)"0x%08x\n",regval);
  #line 876 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                (unsigned long)len);
}

#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t write_file_regval(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 888 
  size_t __UNIQUE_ID___x563;
  #line 888 
  unsigned long tmp;
  #line 884 
  unsigned long regval;
  #line 885 
  char buf[32U];
  #line 886 
  ssize_t len;
  #line 882 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 883 
  struct ath_hw *ah = sc->sc_ah;
  {
    #line 888 
    __UNIQUE_ID___x563 = count;
    #line 888 
    unsigned long __UNIQUE_ID___y564 = 31UL;
    #line 888 
    if (__UNIQUE_ID___x563 < __UNIQUE_ID___y564) 
                                                 #line 888 
                                                 tmp = __UNIQUE_ID___x563; else 
                                                                    #line 888 
                                                                    tmp = __UNIQUE_ID___y564;
    }
  #line 888 
  len = (long)tmp;
  #line 889 
  if (copy_from_user((void *)(& buf),(void *)user_buf,(unsigned long)len) != 0UL) 
    #line 890 
    return -14L;
  #line 892 
  buf[len] = (char)0;
  #line 893 
  if (kstrtoul((char *)(& buf),0U,& regval) != 0) 
                                                  #line 894 
                                                  return -22L;
  #line 896 
  ath9k_ps_wakeup(sc);
  #line 897 
  (*((ath9k_hw_common(ah)->ops)->write))((void *)ah,(unsigned int)regval,sc->debug.regidx);
  #line 898 
  ath9k_ps_restore(sc);
  #line 899 
  return (long)count;
}

#line 902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static struct file_operations fops_regval = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_regval, .write = & write_file_regval, .open = & simple_open};
#line 912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static int open_file_regdump(struct inode *inode, struct file *file)
{
  #line 916 
  u8 *buf;
  #line 917 
  int i;
  #line 918 
  unsigned long num_regs;
  #line 918 
  unsigned long regdump_len;
  #line 918 
  unsigned long max_reg_offset;
  #line 914 
  struct ath_softc *sc = (struct ath_softc *)inode->i_private;
  #line 915 
  unsigned int len = 0U;
  #line 917 
  int j = 0;
  #line 922 
  struct reg_hole reg_hole_list[6U] = {{.start = 512U, .end = 2044U}, {.start = 3072U, .end = 4092U}, {.start = 8192U, .end = 16380U}, {.start = 16640U, .end = 28668U}, {.start = 28764U, .end = 32764U}, {.start = 0U, .end = 0U}};
  #line 931 
  if ((sc->sc_ah)->hw_version.macVersion > 447U) 
                                                 #line 931 
                                                 max_reg_offset = 34816UL; else 
                                                                    #line 931 
                                                                    max_reg_offset = 46336UL;
  #line 932 
  num_regs = max_reg_offset / 4UL + 1UL;
  #line 933 
  regdump_len = num_regs * 20UL + 1UL;
  #line 934 
  buf = (u8 *)cif_vmalloc(regdump_len);
  #line 935 
  if (buf == (u8 *)0U) 
                       #line 936 
                       return -12;
  #line 938 
  ath9k_ps_wakeup(sc);
  #line 939 
  i = 0;
  #line 939 
  while ((unsigned long)i < num_regs) {
    {
      #line 940 
      if (reg_hole_list[j].start == (unsigned int)(i << 2)) {
        #line 941 
        i = (int)(reg_hole_list[j].end >> 2);
        #line 942 
        j ++;
        #line 943 
        goto __Cont;
      }
      #line 946 
      ;
      #line 946 
      ;
      #line 946 
      ;
      #line 947 
      len = (unsigned int)scnprintf((char *)(buf + (unsigned long)len),
                  regdump_len - (unsigned long)len,(char *)"0x%06x 0x%08x\n",
                  i << 2,
                  (*((sc->sc_ah)->reg_ops.read))((void *)sc->sc_ah,
                                       (unsigned int)(i << 2))) + len;
    }
    #line 939 
    __Cont: 
            #line 939 
    i ++;
  }
  #line 949 
  ath9k_ps_restore(sc);
  #line 951 
  file->private_data = (void *)buf;
  #line 953 
  return 0;
}

#line 956  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static struct file_operations fops_regdump = {.owner = & __this_module, .llseek = & default_llseek, .read = & ath9k_debugfs_read_buf, .open = & open_file_regdump, .release = & ath9k_debugfs_release_buf};
#line 964  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static int read_file_dump_nfcal(struct seq_file *file, void *data)
{
  #line 972 
  u32 i;
  #line 972 
  u32 j;
  #line 974 
  u8 nread;
  #line 966 
  struct ieee80211_hw *hw = dev_get_drvdata((struct device *)file->private);
  #line 967 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 968 
  struct ath_hw *ah = sc->sc_ah;
  #line 969 
  struct ath9k_nfcal_hist *h = (struct ath9k_nfcal_hist *)(& (sc->cur_chan)->caldata.nfCalHist);
  #line 970 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 971 
  struct ieee80211_conf *conf = & (common->hw)->conf;
  #line 973 
  u8 chainmask = (unsigned char)(((int)ah->rxchainmask << 3) | (int)ah->rxchainmask);
  #line 976 
  seq_printf(file,(char *)"Channel Noise Floor : %d\n",(int)ah->noise);
  #line 977 
  seq_puts(file,(char *)"Chain | privNF | # Readings | NF Readings\n");
  #line 978 
  i = 0U;
  #line 978 
  while (i <= 5U) {
    #line 979 
    if ((((int)chainmask >> i) & 1) == 0) 
                                          #line 981 
                                          goto __Cont;
    else 
      #line 979 
      if (i > 2U) {
        #line 980 
        if (! conf_is_ht40(conf)) 
                                  #line 981 
                                  goto __Cont;
      }
    #line 983 
    nread = (unsigned char)(5U - (unsigned int)(h + (unsigned long)i)->invalidNFcount);
    #line 984 
    seq_printf(file,(char *)" %d\t %d\t %d\t\t",i,(int)(h + (unsigned long)i)->privNF,(int)nread);
    #line 985 
    j = 0U;
    #line 985 
    while ((unsigned int)nread > j) {
      #line 986 
      seq_printf(file,(char *)" %d",(int)(h + (unsigned long)i)->nfCalBuffer[j]);
      #line 985 
      j ++;
    }
    #line 987 
    seq_puts(file,(char *)"\n");
    #line 978 
    __Cont: 
            #line 978 
    i ++;
  }
  #line 990 
  return 0;
}

#line 994  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t read_file_btcoex(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 999 
  char *buf;
  #line 1000 
  size_t retval;
  #line 997 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 998 
  u32 len = 0U;
  #line 998 
  u32 size = 1500U;
  #line 1002 
  buf = (char *)kzalloc_2((unsigned long)size,3264U);
  #line 1003 
  if (buf == (char *)0) 
                        #line 1004 
                        return -12L;
  #line 1006 
  if (! (sc->sc_ah)->common.btcoex_enabled) {
    #line 1007 
    len = (unsigned int)scnprintf(buf,(unsigned long)size,(char *)"%s\n",
                  (char *)"BTCOEX is disabled");
    #line 1009 
    goto exit;
  }
  #line 1012 
  len = (unsigned int)ath9k_dump_btcoex(sc,(u8 *)buf,size);
  #line 1013 
  exit: 
        #line 1013 
  ;
  #line 1014 
  retval = (unsigned long)simple_read_from_buffer((void *)user_buf,count,ppos,(void *)buf,
                                (unsigned long)len);
  #line 1015 
  kfree((void *)buf);
  #line 1017 
  return (long)retval;
}

#line 1020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static struct file_operations fops_btcoex = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_btcoex, .open = & simple_open};
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t read_file_ackto(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 1034 
  char buf[32U];
  #line 1035 
  unsigned int len;
  #line 1037 
  int tmp;
  #line 1032 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 1033 
  struct ath_hw *ah = sc->sc_ah;
  #line 1037 
  if ((int)ah->dynack.enabled != 0) 
                                    #line 1037 
                                    tmp = 65; else 
                                                   #line 1037 
                                                   tmp = 83;
  #line 1037 
  ;
  #line 1037 
  len = (unsigned int)sprintf((char *)(& buf),(char *)"%u %c\n",ah->dynack.ackto,tmp);
  #line 1040 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                (unsigned long)len);
}

#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static struct file_operations fops_ackto = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_ackto, .open = & simple_open};
#line 1053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t read_file_wow(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 1058 
  ssize_t retval;
  #line 1059 
  char *buf;
  #line 1065 
  char *tmp_0;
  #line 1056 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 1057 
  unsigned int len = 0U;
  #line 1057 
  unsigned int size = 32U;
  #line 1061 
  buf = (char *)kzalloc_2((unsigned long)size,3264U);
  #line 1062 
  if (buf == (char *)0) 
                        #line 1063 
                        return -12L;
  #line 1065 
  if ((int)sc->force_wow != 0) 
                               #line 1065 
                               tmp_0 = (char *)"ENABLED"; else 
                                                               #line 1065 
                                                               tmp_0 = (char *)"DISABLED";
  #line 1065 
  ;
  #line 1065 
  ;
  #line 1066 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"WOW: %s\n",tmp_0) + len;
  #line 1068 
  if (len > size) 
                  #line 1069 
                  len = size;
  #line 1071 
  retval = simple_read_from_buffer((void *)user_buf,count,ppos,(void *)buf,(unsigned long)len);
  #line 1072 
  kfree((void *)buf);
  #line 1074 
  return retval;
}

#line 1077  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t write_file_wow(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 1085 
  size_t __UNIQUE_ID___x565;
  #line 1085 
  unsigned long tmp;
  #line 1081 
  unsigned long val;
  #line 1082 
  char buf[32U];
  #line 1083 
  ssize_t len;
  #line 1080 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  {
    #line 1085 
    __UNIQUE_ID___x565 = count;
    #line 1085 
    unsigned long __UNIQUE_ID___y566 = 31UL;
    #line 1085 
    if (__UNIQUE_ID___x565 < __UNIQUE_ID___y566) 
                                                 #line 1085 
                                                 tmp = __UNIQUE_ID___x565; else 
                                                                    #line 1085 
                                                                    tmp = __UNIQUE_ID___y566;
    }
  #line 1085 
  len = (long)tmp;
  #line 1086 
  if (copy_from_user((void *)(& buf),(void *)user_buf,(unsigned long)len) != 0UL) 
    #line 1087 
    return -14L;
  #line 1089 
  buf[len] = (char)0;
  #line 1090 
  if (kstrtoul((char *)(& buf),0U,& val) != 0) 
                                               #line 1091 
                                               return -22L;
  #line 1093 
  if (val != 1UL) 
                  #line 1094 
                  return -22L;
  #line 1096 
  if (! sc->force_wow) {
    #line 1097 
    sc->force_wow = (_Bool)1;
    #line 1098 
    ath9k_init_wow(sc->hw);
  }
  #line 1101 
  return (long)count;
}

#line 1104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static struct file_operations fops_wow = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_wow, .write = & write_file_wow, .open = & simple_open};
#line 1114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t read_file_tpc(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 1120 
  ssize_t retval;
  #line 1121 
  char *buf;
  #line 1127 
  char *tmp_0;
  #line 1117 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 1118 
  struct ath_hw *ah = sc->sc_ah;
  #line 1119 
  unsigned int len = 0U;
  #line 1119 
  unsigned int size = 32U;
  #line 1123 
  buf = (char *)kzalloc_2((unsigned long)size,3264U);
  #line 1124 
  if (buf == (char *)0) 
                        #line 1125 
                        return -12L;
  #line 1127 
  if ((int)ah->tpc_enabled != 0) 
                                 #line 1127 
                                 tmp_0 = (char *)"ENABLED"; else 
                                                                 #line 1127 
                                                                 tmp_0 = (char *)"DISABLED";
  #line 1127 
  ;
  #line 1127 
  ;
  #line 1128 
  len = (unsigned int)scnprintf(buf + (unsigned long)len,(unsigned long)(size - len),
                  (char *)"%s\n",tmp_0) + len;
  #line 1130 
  if (len > size) 
                  #line 1131 
                  len = size;
  #line 1133 
  retval = simple_read_from_buffer((void *)user_buf,count,ppos,(void *)buf,(unsigned long)len);
  #line 1134 
  kfree((void *)buf);
  #line 1136 
  return retval;
}

#line 1139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t write_file_tpc(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 1149 
  unsigned long tmp;
  #line 1149 
  size_t __UNIQUE_ID___x567;
  #line 1144 
  unsigned long val;
  #line 1145 
  char buf[32U];
  #line 1146 
  ssize_t len;
  #line 1147 
  bool tpc_enabled;
  #line 1142 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 1143 
  struct ath_hw *ah = sc->sc_ah;
  {
    #line 1149 
    __UNIQUE_ID___x567 = count;
    #line 1149 
    unsigned long __UNIQUE_ID___y568 = 31UL;
    #line 1149 
    if (__UNIQUE_ID___x567 < __UNIQUE_ID___y568) 
                                                 #line 1149 
                                                 tmp = __UNIQUE_ID___x567; else 
                                                                    #line 1149 
                                                                    tmp = __UNIQUE_ID___y568;
    }
  #line 1149 
  len = (long)tmp;
  #line 1150 
  if (copy_from_user((void *)(& buf),(void *)user_buf,(unsigned long)len) != 0UL) 
    #line 1151 
    return -14L;
  #line 1153 
  buf[len] = (char)0;
  #line 1154 
  if (kstrtoul((char *)(& buf),0U,& val) != 0) 
                                               #line 1155 
                                               return -22L;
  #line 1157 
  if (val > 1UL) 
                 #line 1158 
                 return -22L;
  #line 1160 
  tpc_enabled = (_Bool)(val != 0UL);
  #line 1162 
  if ((int)ah->tpc_enabled != (int)tpc_enabled) {
    #line 1163 
    ah->tpc_enabled = tpc_enabled;
    #line 1165 
    cif_mutex_lock_mutex_of_ath_softc_3(& sc->mutex);
    #line 1166 
    ath9k_set_txpower(sc,(struct ieee80211_vif *)0);
    #line 1167 
    cif_mutex_unlock_mutex_of_ath_softc_3(& sc->mutex);
  }
  #line 1170 
  return (long)count;
}

#line 1173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static struct file_operations fops_tpc = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_tpc, .write = & write_file_tpc, .open = & simple_open};
#line 1181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t read_file_nf_override(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 1187 
  char buf[32U];
  #line 1188 
  unsigned int len;
  #line 1185 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 1186 
  struct ath_hw *ah = sc->sc_ah;
  #line 1190 
  if ((int)ah->nf_override == 0) {
    #line 1191 
    len = (unsigned int)sprintf((char *)(& buf),(char *)"off\n");
  }
  else {
    #line 1193 
    len = (unsigned int)sprintf((char *)(& buf),(char *)"%d\n",(int)ah->nf_override);
  }
  #line 1195 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                (unsigned long)len);
}

#line 1198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static ssize_t write_file_nf_override(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 1208 
  size_t __UNIQUE_ID___x569;
  #line 1208 
  unsigned long tmp;
  #line 1204 
  long val;
  #line 1205 
  char buf[32U];
  #line 1206 
  ssize_t len;
  #line 1202 
  struct ath_softc *sc = (struct ath_softc *)file->private_data;
  #line 1203 
  struct ath_hw *ah = sc->sc_ah;
  {
    #line 1208 
    __UNIQUE_ID___x569 = count;
    #line 1208 
    unsigned long __UNIQUE_ID___y570 = 31UL;
    #line 1208 
    if (__UNIQUE_ID___x569 < __UNIQUE_ID___y570) 
                                                 #line 1208 
                                                 tmp = __UNIQUE_ID___x569; else 
                                                                    #line 1208 
                                                                    tmp = __UNIQUE_ID___y570;
    }
  #line 1208 
  len = (long)tmp;
  #line 1209 
  if (copy_from_user((void *)(& buf),(void *)user_buf,(unsigned long)len) != 0UL) 
    #line 1210 
    return -14L;
  #line 1212 
  buf[len] = (char)0;
  #line 1213 
  if (cif_strncmp((char *)"off",(char *)(& buf),3UL) == 0) 
                                                           #line 1214 
                                                           val = 0L;
  else {
    #line 1215 
    if (kstrtol((char *)(& buf),0U,& val) != 0) 
                                                #line 1216 
                                                return -22L;
  }
  #line 1218 
  if (val > 0L) 
                #line 1219 
                return -22L;
  #line 1221 
  if (val < -120L) 
                   #line 1222 
                   return -22L;
  #line 1224 
  ah->nf_override = (short)val;
  #line 1226 
  if (ah->curchan != (struct ath9k_channel *)0) 
                                                #line 1227 
                                                ath9k_hw_loadnf(ah,ah->curchan);
  #line 1229 
  return (long)count;
}

#line 1232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static struct file_operations fops_nf_override = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_nf_override, .write = & write_file_nf_override, .open = & simple_open};
#line 1243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
static char ath9k_gstrings_stats[78U][32U] = {{(char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'n', (char)'i', (char)'c'}, {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'n', (char)'i', (char)'c'}, {(char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'n', (char)'i', (char)'c'}, {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'n', (char)'i', (char)'c'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'e', (char)'t', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'e', (char)'t', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'e', (char)'t', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'e', (char)'t', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'p', (char)'d', (char)'u', (char)'_', (char)'x', (char)'r', (char)'e', (char)'t', (char)'r', (char)'i', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'p', (char)'d', (char)'u', (char)'_', (char)'x', (char)'r', (char)'e', (char)'t', (char)'r', (char)'i', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'p', (char)'d', (char)'u', (char)'_', (char)'x', (char)'r', (char)'e', (char)'t', (char)'r', (char)'i', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'p', (char)'d', (char)'u', (char)'_', (char)'x', (char)'r', (char)'e', (char)'t', (char)'r', (char)'i', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'g', (char)'g', (char)'r', (char)'e', (char)'g', (char)'a', (char)'t', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'g', (char)'g', (char)'r', (char)'e', (char)'g', (char)'a', (char)'t', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'g', (char)'g', (char)'r', (char)'e', (char)'g', (char)'a', (char)'t', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'g', (char)'g', (char)'r', (char)'e', (char)'g', (char)'a', (char)'t', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'d', (char)'_', (char)'h', (char)'w'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'d', (char)'_', (char)'h', (char)'w'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'d', (char)'_', (char)'h', (char)'w'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'d', (char)'_', (char)'h', (char)'w'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'e', (char)'t', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'e', (char)'t', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'e', (char)'t', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'s', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'e', (char)'t', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'_', (char)'r', (char)'e', (char)'t', (char)'r', (char)'i', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'_', (char)'r', (char)'e', (char)'t', (char)'r', (char)'i', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'_', (char)'r', (char)'e', (char)'t', (char)'r', (char)'i', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'_', (char)'r', (char)'e', (char)'t', (char)'r', (char)'i', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'_', (char)'x', (char)'r', (char)'e', (char)'t', (char)'r', (char)'i', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'_', (char)'x', (char)'r', (char)'e', (char)'t', (char)'r', (char)'i', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'_', (char)'x', (char)'r', (char)'e', (char)'t', (char)'r', (char)'i', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'a', (char)'m', (char)'p', (char)'d', (char)'u', (char)'_', (char)'x', (char)'r', (char)'e', (char)'t', (char)'r', (char)'i', (char)'e', (char)'s'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'o', (char)'p', (char)'_', (char)'e', (char)'x', (char)'c', (char)'e', (char)'e', (char)'d', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'o', (char)'p', (char)'_', (char)'e', (char)'x', (char)'c', (char)'e', (char)'e', (char)'d', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'o', (char)'p', (char)'_', (char)'e', (char)'x', (char)'c', (char)'e', (char)'e', (char)'d', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'o', (char)'p', (char)'_', (char)'e', (char)'x', (char)'c', (char)'e', (char)'e', (char)'d', (char)'e', (char)'d'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'r', (char)'_', (char)'e', (char)'x', (char)'p', (char)'i', (char)'r', (char)'y'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'r', (char)'_', (char)'e', (char)'x', (char)'p', (char)'i', (char)'r', (char)'y'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'r', (char)'_', (char)'e', (char)'x', (char)'p', (char)'i', (char)'r', (char)'y'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'r', (char)'_', (char)'e', (char)'x', (char)'p', (char)'i', (char)'r', (char)'y'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c', (char)'_', (char)'c', (char)'f', (char)'g', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c', (char)'_', (char)'c', (char)'f', (char)'g', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c', (char)'_', (char)'c', (char)'f', (char)'g', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c', (char)'_', (char)'c', (char)'f', (char)'g', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'a', (char)'t', (char)'a', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'a', (char)'t', (char)'a', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'a', (char)'t', (char)'a', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'a', (char)'t', (char)'a', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'l', (char)'i', (char)'m', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'l', (char)'i', (char)'m', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'l', (char)'i', (char)'m', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, {(char)'d', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'l', (char)'i', (char)'m', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, {(char)'d', (char)'_', (char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'d', (char)'_', (char)'r', (char)'x', (char)'_', (char)'d', (char)'e', (char)'c', (char)'r', (char)'y', (char)'p', (char)'t', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'d', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'h', (char)'y', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'d', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'i', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'d', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'r', (char)'e', (char)'_', (char)'d', (char)'e', (char)'l', (char)'i', (char)'m', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'d', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'o', (char)'s', (char)'t', (char)'_', (char)'d', (char)'e', (char)'l', (char)'i', (char)'m', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'d', (char)'_', (char)'r', (char)'x', (char)'_', (char)'d', (char)'e', (char)'c', (char)'r', (char)'y', (char)'p', (char)'t', (char)'_', (char)'b', (char)'u', (char)'s', (char)'y', (char)'_', (char)'e', (char)'r', (char)'r'}, {(char)'d', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'h', (char)'y', (char)'e', (char)'r', (char)'r', (char)'_', (char)'r', (char)'a', (char)'d', (char)'a', (char)'r'}, {(char)'d', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'h', (char)'y', (char)'e', (char)'r', (char)'r', (char)'_', (char)'o', (char)'f', (char)'d', (char)'m', (char)'_', (char)'t', (char)'i', (char)'m', (char)'i', (char)'n', (char)'g'}, {(char)'d', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'h', (char)'y', (char)'e', (char)'r', (char)'r', (char)'_', (char)'c', (char)'c', (char)'k', (char)'_', (char)'t', (char)'i', (char)'m', (char)'i', (char)'n', (char)'g'}};
#line 1279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
void ath9k_get_et_strings(struct ieee80211_hw *hw, struct ieee80211_vif *vif, u32 sset, u8 *data)
{
  #line 1283 
  if (sset == 1U) 
                  #line 1284 
                  memcpy((void *)data,(void *)(& ath9k_gstrings_stats),2496UL);
  #line 1285 
  return;
}

#line 1288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
int ath9k_get_et_sset_count(struct ieee80211_hw *hw, struct ieee80211_vif *vif, int sset)
{
  #line 1291 
  if (sset == 1) 
                 #line 1292 
                 return 78;
  #line 1293 
  return 0;
}

#line 1309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
void ath9k_get_et_stats(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ethtool_stats *stats, u64 *data)
{
  #line 1316 
  int tmp;
  #line 1320 
  int tmp_0;
  #line 1324 
  int tmp_1;
  #line 1325 
  int tmp_2;
  #line 1344 
  int tmp_67;
  #line 1345 
  int tmp_68;
  #line 1346 
  int tmp_69;
  #line 1347 
  int tmp_70;
  #line 1348 
  int tmp_71;
  #line 1349 
  int tmp_72;
  #line 1350 
  int tmp_73;
  #line 1352 
  int tmp_74;
  #line 1353 
  int tmp_75;
  #line 1354 
  int tmp_76;
  #line 1313 
  struct ath_softc *sc = (struct ath_softc *)hw->priv;
  #line 1314 
  int i = 0;
  #line 1316 
  tmp = i;
  #line 1316 
  i ++;
  #line 1316 
  *(data + (unsigned long)tmp) = (unsigned long long)(((sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].tx_pkts_all + sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].tx_pkts_all) + sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].tx_pkts_all) + sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].tx_pkts_all);
  #line 1320 
  tmp_0 = i;
  #line 1320 
  i ++;
  #line 1320 
  *(data + (unsigned long)tmp_0) = (unsigned long long)(((sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].tx_bytes_all + sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].tx_bytes_all) + sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].tx_bytes_all) + sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].tx_bytes_all);
  #line 1324 
  tmp_1 = i;
  #line 1324 
  i ++;
  #line 1324 
  *(data + (unsigned long)tmp_1) = (unsigned long long)sc->debug.stats.rxstats.rx_pkts_all;
  #line 1325 
  tmp_2 = i;
  #line 1325 
  i ++;
  #line 1325 
  *(data + (unsigned long)tmp_2) = (unsigned long long)sc->debug.stats.rxstats.rx_bytes_all;
  {
    #line 1327 
    int tmp_3;
    #line 1327 
    int tmp_4;
    #line 1327 
    int tmp_5;
    #line 1327 
    int tmp_6;
    #line 1327 
    tmp_3 = i;
    #line 1327 
    i ++;
    #line 1327 
    *(data + (unsigned long)tmp_3) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].tx_pkts_all;
    #line 1327 
    tmp_4 = i;
    #line 1327 
    i ++;
    #line 1327 
    *(data + (unsigned long)tmp_4) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].tx_pkts_all;
    #line 1327 
    tmp_5 = i;
    #line 1327 
    i ++;
    #line 1327 
    *(data + (unsigned long)tmp_5) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].tx_pkts_all;
    #line 1327 
    tmp_6 = i;
    #line 1327 
    i ++;
    #line 1327 
    *(data + (unsigned long)tmp_6) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].tx_pkts_all;
  }
  {
    #line 1328 
    int tmp_7;
    #line 1328 
    int tmp_8;
    #line 1328 
    int tmp_9;
    #line 1328 
    int tmp_10;
    #line 1328 
    tmp_7 = i;
    #line 1328 
    i ++;
    #line 1328 
    *(data + (unsigned long)tmp_7) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].tx_bytes_all;
    #line 1328 
    tmp_8 = i;
    #line 1328 
    i ++;
    #line 1328 
    *(data + (unsigned long)tmp_8) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].tx_bytes_all;
    #line 1328 
    tmp_9 = i;
    #line 1328 
    i ++;
    #line 1328 
    *(data + (unsigned long)tmp_9) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].tx_bytes_all;
    #line 1328 
    tmp_10 = i;
    #line 1328 
    i ++;
    #line 1328 
    *(data + (unsigned long)tmp_10) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].tx_bytes_all;
  }
  {
    #line 1329 
    int tmp_11;
    #line 1329 
    int tmp_12;
    #line 1329 
    int tmp_13;
    #line 1329 
    int tmp_14;
    #line 1329 
    tmp_11 = i;
    #line 1329 
    i ++;
    #line 1329 
    *(data + (unsigned long)tmp_11) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].queued;
    #line 1329 
    tmp_12 = i;
    #line 1329 
    i ++;
    #line 1329 
    *(data + (unsigned long)tmp_12) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].queued;
    #line 1329 
    tmp_13 = i;
    #line 1329 
    i ++;
    #line 1329 
    *(data + (unsigned long)tmp_13) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].queued;
    #line 1329 
    tmp_14 = i;
    #line 1329 
    i ++;
    #line 1329 
    *(data + (unsigned long)tmp_14) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].queued;
  }
  {
    #line 1330 
    int tmp_15;
    #line 1330 
    int tmp_16;
    #line 1330 
    int tmp_17;
    #line 1330 
    int tmp_18;
    #line 1330 
    tmp_15 = i;
    #line 1330 
    i ++;
    #line 1330 
    *(data + (unsigned long)tmp_15) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].completed;
    #line 1330 
    tmp_16 = i;
    #line 1330 
    i ++;
    #line 1330 
    *(data + (unsigned long)tmp_16) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].completed;
    #line 1330 
    tmp_17 = i;
    #line 1330 
    i ++;
    #line 1330 
    *(data + (unsigned long)tmp_17) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].completed;
    #line 1330 
    tmp_18 = i;
    #line 1330 
    i ++;
    #line 1330 
    *(data + (unsigned long)tmp_18) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].completed;
  }
  {
    #line 1331 
    int tmp_19;
    #line 1331 
    int tmp_20;
    #line 1331 
    int tmp_21;
    #line 1331 
    int tmp_22;
    #line 1331 
    tmp_19 = i;
    #line 1331 
    i ++;
    #line 1331 
    *(data + (unsigned long)tmp_19) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].xretries;
    #line 1331 
    tmp_20 = i;
    #line 1331 
    i ++;
    #line 1331 
    *(data + (unsigned long)tmp_20) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].xretries;
    #line 1331 
    tmp_21 = i;
    #line 1331 
    i ++;
    #line 1331 
    *(data + (unsigned long)tmp_21) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].xretries;
    #line 1331 
    tmp_22 = i;
    #line 1331 
    i ++;
    #line 1331 
    *(data + (unsigned long)tmp_22) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].xretries;
  }
  {
    #line 1332 
    int tmp_23;
    #line 1332 
    int tmp_24;
    #line 1332 
    int tmp_25;
    #line 1332 
    int tmp_26;
    #line 1332 
    tmp_23 = i;
    #line 1332 
    i ++;
    #line 1332 
    *(data + (unsigned long)tmp_23) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].a_aggr;
    #line 1332 
    tmp_24 = i;
    #line 1332 
    i ++;
    #line 1332 
    *(data + (unsigned long)tmp_24) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].a_aggr;
    #line 1332 
    tmp_25 = i;
    #line 1332 
    i ++;
    #line 1332 
    *(data + (unsigned long)tmp_25) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].a_aggr;
    #line 1332 
    tmp_26 = i;
    #line 1332 
    i ++;
    #line 1332 
    *(data + (unsigned long)tmp_26) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].a_aggr;
  }
  {
    #line 1333 
    int tmp_27;
    #line 1333 
    int tmp_28;
    #line 1333 
    int tmp_29;
    #line 1333 
    int tmp_30;
    #line 1333 
    tmp_27 = i;
    #line 1333 
    i ++;
    #line 1333 
    *(data + (unsigned long)tmp_27) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].a_queued_hw;
    #line 1333 
    tmp_28 = i;
    #line 1333 
    i ++;
    #line 1333 
    *(data + (unsigned long)tmp_28) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].a_queued_hw;
    #line 1333 
    tmp_29 = i;
    #line 1333 
    i ++;
    #line 1333 
    *(data + (unsigned long)tmp_29) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].a_queued_hw;
    #line 1333 
    tmp_30 = i;
    #line 1333 
    i ++;
    #line 1333 
    *(data + (unsigned long)tmp_30) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].a_queued_hw;
  }
  {
    #line 1334 
    int tmp_31;
    #line 1334 
    int tmp_32;
    #line 1334 
    int tmp_33;
    #line 1334 
    int tmp_34;
    #line 1334 
    tmp_31 = i;
    #line 1334 
    i ++;
    #line 1334 
    *(data + (unsigned long)tmp_31) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].a_completed;
    #line 1334 
    tmp_32 = i;
    #line 1334 
    i ++;
    #line 1334 
    *(data + (unsigned long)tmp_32) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].a_completed;
    #line 1334 
    tmp_33 = i;
    #line 1334 
    i ++;
    #line 1334 
    *(data + (unsigned long)tmp_33) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].a_completed;
    #line 1334 
    tmp_34 = i;
    #line 1334 
    i ++;
    #line 1334 
    *(data + (unsigned long)tmp_34) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].a_completed;
  }
  {
    #line 1335 
    int tmp_35;
    #line 1335 
    int tmp_36;
    #line 1335 
    int tmp_37;
    #line 1335 
    int tmp_38;
    #line 1335 
    tmp_35 = i;
    #line 1335 
    i ++;
    #line 1335 
    *(data + (unsigned long)tmp_35) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].a_retries;
    #line 1335 
    tmp_36 = i;
    #line 1335 
    i ++;
    #line 1335 
    *(data + (unsigned long)tmp_36) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].a_retries;
    #line 1335 
    tmp_37 = i;
    #line 1335 
    i ++;
    #line 1335 
    *(data + (unsigned long)tmp_37) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].a_retries;
    #line 1335 
    tmp_38 = i;
    #line 1335 
    i ++;
    #line 1335 
    *(data + (unsigned long)tmp_38) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].a_retries;
  }
  {
    #line 1336 
    int tmp_39;
    #line 1336 
    int tmp_40;
    #line 1336 
    int tmp_41;
    #line 1336 
    int tmp_42;
    #line 1336 
    tmp_39 = i;
    #line 1336 
    i ++;
    #line 1336 
    *(data + (unsigned long)tmp_39) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].a_xretries;
    #line 1336 
    tmp_40 = i;
    #line 1336 
    i ++;
    #line 1336 
    *(data + (unsigned long)tmp_40) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].a_xretries;
    #line 1336 
    tmp_41 = i;
    #line 1336 
    i ++;
    #line 1336 
    *(data + (unsigned long)tmp_41) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].a_xretries;
    #line 1336 
    tmp_42 = i;
    #line 1336 
    i ++;
    #line 1336 
    *(data + (unsigned long)tmp_42) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].a_xretries;
  }
  {
    #line 1337 
    int tmp_43;
    #line 1337 
    int tmp_44;
    #line 1337 
    int tmp_45;
    #line 1337 
    int tmp_46;
    #line 1337 
    tmp_43 = i;
    #line 1337 
    i ++;
    #line 1337 
    *(data + (unsigned long)tmp_43) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].fifo_underrun;
    #line 1337 
    tmp_44 = i;
    #line 1337 
    i ++;
    #line 1337 
    *(data + (unsigned long)tmp_44) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].fifo_underrun;
    #line 1337 
    tmp_45 = i;
    #line 1337 
    i ++;
    #line 1337 
    *(data + (unsigned long)tmp_45) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].fifo_underrun;
    #line 1337 
    tmp_46 = i;
    #line 1337 
    i ++;
    #line 1337 
    *(data + (unsigned long)tmp_46) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].fifo_underrun;
  }
  {
    #line 1338 
    int tmp_47;
    #line 1338 
    int tmp_48;
    #line 1338 
    int tmp_49;
    #line 1338 
    int tmp_50;
    #line 1338 
    tmp_47 = i;
    #line 1338 
    i ++;
    #line 1338 
    *(data + (unsigned long)tmp_47) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].xtxop;
    #line 1338 
    tmp_48 = i;
    #line 1338 
    i ++;
    #line 1338 
    *(data + (unsigned long)tmp_48) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].xtxop;
    #line 1338 
    tmp_49 = i;
    #line 1338 
    i ++;
    #line 1338 
    *(data + (unsigned long)tmp_49) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].xtxop;
    #line 1338 
    tmp_50 = i;
    #line 1338 
    i ++;
    #line 1338 
    *(data + (unsigned long)tmp_50) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].xtxop;
  }
  {
    #line 1339 
    int tmp_51;
    #line 1339 
    int tmp_52;
    #line 1339 
    int tmp_53;
    #line 1339 
    int tmp_54;
    #line 1339 
    tmp_51 = i;
    #line 1339 
    i ++;
    #line 1339 
    *(data + (unsigned long)tmp_51) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].timer_exp;
    #line 1339 
    tmp_52 = i;
    #line 1339 
    i ++;
    #line 1339 
    *(data + (unsigned long)tmp_52) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].timer_exp;
    #line 1339 
    tmp_53 = i;
    #line 1339 
    i ++;
    #line 1339 
    *(data + (unsigned long)tmp_53) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].timer_exp;
    #line 1339 
    tmp_54 = i;
    #line 1339 
    i ++;
    #line 1339 
    *(data + (unsigned long)tmp_54) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].timer_exp;
  }
  {
    #line 1340 
    int tmp_55;
    #line 1340 
    int tmp_56;
    #line 1340 
    int tmp_57;
    #line 1340 
    int tmp_58;
    #line 1340 
    tmp_55 = i;
    #line 1340 
    i ++;
    #line 1340 
    *(data + (unsigned long)tmp_55) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].desc_cfg_err;
    #line 1340 
    tmp_56 = i;
    #line 1340 
    i ++;
    #line 1340 
    *(data + (unsigned long)tmp_56) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].desc_cfg_err;
    #line 1340 
    tmp_57 = i;
    #line 1340 
    i ++;
    #line 1340 
    *(data + (unsigned long)tmp_57) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].desc_cfg_err;
    #line 1340 
    tmp_58 = i;
    #line 1340 
    i ++;
    #line 1340 
    *(data + (unsigned long)tmp_58) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].desc_cfg_err;
  }
  {
    #line 1341 
    int tmp_59;
    #line 1341 
    int tmp_60;
    #line 1341 
    int tmp_61;
    #line 1341 
    int tmp_62;
    #line 1341 
    tmp_59 = i;
    #line 1341 
    i ++;
    #line 1341 
    *(data + (unsigned long)tmp_59) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].data_underrun;
    #line 1341 
    tmp_60 = i;
    #line 1341 
    i ++;
    #line 1341 
    *(data + (unsigned long)tmp_60) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].data_underrun;
    #line 1341 
    tmp_61 = i;
    #line 1341 
    i ++;
    #line 1341 
    *(data + (unsigned long)tmp_61) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].data_underrun;
    #line 1341 
    tmp_62 = i;
    #line 1341 
    i ++;
    #line 1341 
    *(data + (unsigned long)tmp_62) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].data_underrun;
  }
  {
    #line 1342 
    int tmp_63;
    #line 1342 
    int tmp_64;
    #line 1342 
    int tmp_65;
    #line 1342 
    int tmp_66;
    #line 1342 
    tmp_63 = i;
    #line 1342 
    i ++;
    #line 1342 
    *(data + (unsigned long)tmp_63) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[2])->axq_qnum].delim_underrun;
    #line 1342 
    tmp_64 = i;
    #line 1342 
    i ++;
    #line 1342 
    *(data + (unsigned long)tmp_64) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[3])->axq_qnum].delim_underrun;
    #line 1342 
    tmp_65 = i;
    #line 1342 
    i ++;
    #line 1342 
    *(data + (unsigned long)tmp_65) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[1])->axq_qnum].delim_underrun;
    #line 1342 
    tmp_66 = i;
    #line 1342 
    i ++;
    #line 1342 
    *(data + (unsigned long)tmp_66) = (unsigned long long)sc->debug.stats.txstats[(sc->tx.txq_map[0])->axq_qnum].delim_underrun;
  }
  #line 1344 
  tmp_67 = i;
  #line 1344 
  i ++;
  #line 1344 
  *(data + (unsigned long)tmp_67) = (unsigned long long)sc->debug.stats.rxstats.crc_err;
  #line 1345 
  tmp_68 = i;
  #line 1345 
  i ++;
  #line 1345 
  *(data + (unsigned long)tmp_68) = (unsigned long long)sc->debug.stats.rxstats.decrypt_crc_err;
  #line 1346 
  tmp_69 = i;
  #line 1346 
  i ++;
  #line 1346 
  *(data + (unsigned long)tmp_69) = (unsigned long long)sc->debug.stats.rxstats.phy_err;
  #line 1347 
  tmp_70 = i;
  #line 1347 
  i ++;
  #line 1347 
  *(data + (unsigned long)tmp_70) = (unsigned long long)sc->debug.stats.rxstats.mic_err;
  #line 1348 
  tmp_71 = i;
  #line 1348 
  i ++;
  #line 1348 
  *(data + (unsigned long)tmp_71) = (unsigned long long)sc->debug.stats.rxstats.pre_delim_crc_err;
  #line 1349 
  tmp_72 = i;
  #line 1349 
  i ++;
  #line 1349 
  *(data + (unsigned long)tmp_72) = (unsigned long long)sc->debug.stats.rxstats.post_delim_crc_err;
  #line 1350 
  tmp_73 = i;
  #line 1350 
  i ++;
  #line 1350 
  *(data + (unsigned long)tmp_73) = (unsigned long long)sc->debug.stats.rxstats.decrypt_busy_err;
  #line 1352 
  tmp_74 = i;
  #line 1352 
  i ++;
  #line 1352 
  *(data + (unsigned long)tmp_74) = (unsigned long long)sc->debug.stats.rxstats.phy_err_stats[5];
  #line 1353 
  tmp_75 = i;
  #line 1353 
  i ++;
  #line 1353 
  *(data + (unsigned long)tmp_75) = (unsigned long long)sc->debug.stats.rxstats.phy_err_stats[17];
  #line 1354 
  tmp_76 = i;
  #line 1354 
  i ++;
  #line 1354 
  *(data + (unsigned long)tmp_76) = (unsigned long long)sc->debug.stats.rxstats.phy_err_stats[25];
  {
    #line 1356 
    int __ret_warn_on = i != 78;
    #line 1356 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1357 
      ldv_inline_asm();
      #line 1358 
      ldv_inline_asm();
    }
    #line 1356 
    long tmp_77 = (long)(__ret_warn_on != 0);
  }
  #line 1358 
  return;
}

#line 1359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
void ath9k_deinit_debug(struct ath_softc *sc)
{
  #line 1361 
  ath9k_cmn_spectral_deinit_debug(& sc->spec_priv);
  #line 1362 
  return;
}

#line 1364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath9k/debug.c"
int ath9k_init_debug(struct ath_hw *ah)
{
  #line 1366 
  struct ath_common *common = ath9k_hw_common(ah);
  #line 1367 
  struct ath_softc *sc = (struct ath_softc *)common->priv;
  #line 1369 
  sc->debug.debugfs_phy = cif_debugfs_create_dir((char *)"ath9k",((sc->hw)->wiphy)->debugfsdir);
  #line 1371 
  if (sc->debug.debugfs_phy == (struct dentry *)0) 
                                                   #line 1372 
                                                   return -12;
  #line 1375 
  cif_debugfs_create_file_2((char *)"debug",(unsigned short)384,sc->debug.debugfs_phy,(void *)sc,& fops_debug);
  #line 1379 
  ath9k_dfs_init_debug(sc);
  #line 1380 
  ath9k_tx99_init_debug(sc);
  #line 1381 
  ath9k_cmn_spectral_init_debug(& sc->spec_priv,sc->debug.debugfs_phy);
  #line 1383 
  debugfs_create_devm_seqfile(sc->dev,(char *)"dma",sc->debug.debugfs_phy,& read_file_dma);
  #line 1385 
  debugfs_create_devm_seqfile(sc->dev,(char *)"interrupt",sc->debug.debugfs_phy,& read_file_interrupt);
  #line 1387 
  debugfs_create_devm_seqfile(sc->dev,(char *)"xmit",sc->debug.debugfs_phy,& read_file_xmit);
  #line 1389 
  debugfs_create_devm_seqfile(sc->dev,(char *)"queues",sc->debug.debugfs_phy,& read_file_queues);
  #line 1391 
  debugfs_create_devm_seqfile(sc->dev,(char *)"misc",sc->debug.debugfs_phy,& read_file_misc);
  #line 1393 
  debugfs_create_devm_seqfile(sc->dev,(char *)"reset",sc->debug.debugfs_phy,& read_file_reset);
  #line 1396 
  ath9k_cmn_debug_recv(sc->debug.debugfs_phy,& sc->debug.stats.rxstats);
  #line 1397 
  ath9k_cmn_debug_phy_err(sc->debug.debugfs_phy,& sc->debug.stats.rxstats);
  #line 1399 
  debugfs_create_u8((char *)"rx_chainmask",(unsigned short)256,sc->debug.debugfs_phy,& ah->rxchainmask);
  #line 1401 
  debugfs_create_u8((char *)"tx_chainmask",(unsigned short)256,sc->debug.debugfs_phy,& ah->txchainmask);
  #line 1403 
  cif_debugfs_create_file_2((char *)"ani",(unsigned short)384,sc->debug.debugfs_phy,(void *)sc,& fops_ani);
  #line 1405 
  debugfs_create_bool((char *)"paprd",(unsigned short)384,sc->debug.debugfs_phy,& (sc->sc_ah)->config.enable_paprd);
  #line 1407 
  cif_debugfs_create_file_2((char *)"regidx",(unsigned short)384,sc->debug.debugfs_phy,(void *)sc,& fops_regidx);
  #line 1409 
  cif_debugfs_create_file_2((char *)"regval",(unsigned short)384,sc->debug.debugfs_phy,(void *)sc,& fops_regval);
  #line 1411 
  debugfs_create_bool((char *)"ignore_extcca",(unsigned short)384,sc->debug.debugfs_phy,& ah->config.cwm_ignore_extcca);
  #line 1414 
  cif_debugfs_create_file_2((char *)"regdump",(unsigned short)256,sc->debug.debugfs_phy,(void *)sc,& fops_regdump);
  #line 1416 
  debugfs_create_devm_seqfile(sc->dev,(char *)"dump_nfcal",sc->debug.debugfs_phy,& read_file_dump_nfcal);
  #line 1420 
  ath9k_cmn_debug_base_eeprom(sc->debug.debugfs_phy,sc->sc_ah);
  #line 1421 
  ath9k_cmn_debug_modal_eeprom(sc->debug.debugfs_phy,sc->sc_ah);
  #line 1423 
  debugfs_create_u32((char *)"gpio_mask",(unsigned short)384,sc->debug.debugfs_phy,& (sc->sc_ah)->gpio_mask);
  #line 1425 
  debugfs_create_u32((char *)"gpio_val",(unsigned short)384,sc->debug.debugfs_phy,& (sc->sc_ah)->gpio_val);
  #line 1427 
  cif_debugfs_create_file_2((char *)"antenna_diversity",(unsigned short)256,sc->debug.debugfs_phy,(void *)sc,& fops_antenna_diversity);
  #line 1430 
  cif_debugfs_create_file_2((char *)"bt_ant_diversity",(unsigned short)384,sc->debug.debugfs_phy,(void *)sc,& fops_bt_ant_diversity);
  #line 1432 
  cif_debugfs_create_file_2((char *)"btcoex",(unsigned short)256,sc->debug.debugfs_phy,(void *)sc,& fops_btcoex);
  #line 1437 
  cif_debugfs_create_file_2((char *)"wow",(unsigned short)384,sc->debug.debugfs_phy,(void *)sc,& fops_wow);
  #line 1441 
  cif_debugfs_create_file_2((char *)"ack_to",(unsigned short)256,sc->debug.debugfs_phy,(void *)sc,& fops_ackto);
  #line 1444 
  cif_debugfs_create_file_2((char *)"tpc",(unsigned short)384,sc->debug.debugfs_phy,(void *)sc,& fops_tpc);
  #line 1446 
  cif_debugfs_create_file_2((char *)"nf_override",(unsigned short)384,sc->debug.debugfs_phy,(void *)sc,& fops_nf_override);
  #line 1449 
  return 0;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_ackto = & fops_ackto;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_ani = & fops_ani;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_antenna_diversity = & fops_antenna_diversity;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_bt_ant_diversity = & fops_bt_ant_diversity;
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_btcoex = & fops_btcoex;
#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_debug = & fops_debug;
#line 99  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_nf_override = & fops_nf_override;
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_regdump = & fops_regdump;
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_regidx = & fops_regidx;
#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_regval = & fops_regval;
#line 103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_tpc = & fops_tpc;
#line 104  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_wow = & fops_wow;
#line 105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
int (*emg_alias_simple_open)(struct inode *, struct file *) = & simple_open;
#line 108 
#line 108 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_ath9k_debugfs_read_buf(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 123 
  return ath9k_debugfs_read_buf(arg0,arg1,arg2,arg3);
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
int emg_wrapper_ath9k_debugfs_release_buf(struct inode *arg0, struct file *arg1)
{
  #line 128 
  return ath9k_debugfs_release_buf(arg0,arg1);
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
int emg_wrapper_open_file_regdump(struct inode *arg0, struct file *arg1)
{
  #line 133 
  return open_file_regdump(arg0,arg1);
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_ackto(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 138 
  return read_file_ackto(arg0,arg1,arg2,arg3);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_ani(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 143 
  return read_file_ani(arg0,arg1,arg2,arg3);
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_antenna_diversity(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 148 
  return read_file_antenna_diversity(arg0,arg1,arg2,arg3);
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_bt_ant_diversity(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 153 
  return read_file_bt_ant_diversity(arg0,arg1,arg2,arg3);
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_btcoex(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 158 
  return read_file_btcoex(arg0,arg1,arg2,arg3);
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_debug(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 163 
  return read_file_debug(arg0,arg1,arg2,arg3);
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_nf_override(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 168 
  return read_file_nf_override(arg0,arg1,arg2,arg3);
}

#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_regidx(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 173 
  return read_file_regidx(arg0,arg1,arg2,arg3);
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_regval(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 178 
  return read_file_regval(arg0,arg1,arg2,arg3);
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_tpc(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 183 
  return read_file_tpc(arg0,arg1,arg2,arg3);
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_wow(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 188 
  return read_file_wow(arg0,arg1,arg2,arg3);
}

#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_ani(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 193 
  return write_file_ani(arg0,arg1,arg2,arg3);
}

#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_bt_ant_diversity(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 198 
  return write_file_bt_ant_diversity(arg0,arg1,arg2,arg3);
}

#line 202  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_debug(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 203 
  return write_file_debug(arg0,arg1,arg2,arg3);
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_nf_override(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 208 
  return write_file_nf_override(arg0,arg1,arg2,arg3);
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_regidx(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 213 
  return write_file_regidx(arg0,arg1,arg2,arg3);
}

#line 217  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_regval(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 218 
  return write_file_regval(arg0,arg1,arg2,arg3);
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_tpc(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 223 
  return write_file_tpc(arg0,arg1,arg2,arg3);
}

#line 227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_wow(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 228 
  return write_file_wow(arg0,arg1,arg2,arg3);
}

#line 254  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_clear_bit_5(long nr, unsigned long *addr)
{
  #line 257 
  ldv_clear_bit(nr,addr);
  #line 258 
  return;
}

#line 268  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 271 
  return ldv_strncmp(cs,ct,count);
}

#line 275  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static size_t cif_strlen(char *s)
{
  #line 278 
  return ldv_strlen(s);
}

#line 484  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags)
{
  #line 487 
  return ldv_kzalloc(size,flags);
}

#line 918  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_spin_lock_bh_axq_lock_of_ath_txq_4(spinlock_t *lock)
{
  #line 921 
  ldv_spin_model_lock((char *)"axq_lock_of_ath_txq");
  #line 923 
  spin_lock_bh_8(lock);
  #line 924 
  return;
}

#line 927  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_spin_unlock_bh_axq_lock_of_ath_txq_4(spinlock_t *lock)
{
  #line 930 
  ldv_spin_model_unlock((char *)"axq_lock_of_ath_txq");
  #line 932 
  spin_unlock_bh_8(lock);
  #line 933 
  return;
}

#line 936  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_vfree(void *addr)
{
  #line 939 
  ldv_vfree(addr);
  #line 940 
  return;
}

#line 943  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void *cif_vmalloc(unsigned long size)
{
  #line 946 
  return ldv_vmalloc(size);
}

#line 950  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_mutex_lock_mutex_of_ath_softc_3(struct mutex *lock)
{
  #line 953 
  ldv_mutex_model_lock(lock,(char *)"mutex_of_ath_softc");
  #line 954 
  return;
}

#line 957  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_mutex_unlock_mutex_of_ath_softc_3(struct mutex *lock)
{
  #line 960 
  ldv_mutex_model_unlock(lock,(char *)"mutex_of_ath_softc");
  #line 961 
  return;
}

#line 964  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 968 
  return emg_debugfs_create_dir(name,parent);
}

#line 972  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static struct dentry *cif_debugfs_create_file_2(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 976 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR(long error)
{
  #line 26 
  return (void *)error;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_enabled = 0;
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_lowpower = 1;
#line 175 
#line 496 
void emg_dispatch_deregister_12(struct pci_driver *arg0);
#line 176 
#line 505 
void emg_dispatch_deregister_13(struct platform_driver *arg0);
#line 177 
#line 476 
void emg_dispatch_deregister_9(struct ieee80211_hw *arg0);
#line 178 
#line 447 
void emg_dispatch_instance_deregister_6(struct timer_list *arg0);
#line 179 
#line 485 
void emg_dispatch_instance_register_11(struct timer_list *arg0);
#line 180 
#line 456 
void emg_dispatch_irq_deregister_7(int arg0);
#line 181 
#line 514 
void emg_dispatch_irq_register_14(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 182 
#line 253 
void emg_dispatch_pm_deregister_38(void);
#line 183 
#line 262 
void emg_dispatch_pm_register_38(void);
#line 184 
#line 272 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 185 
#line 283 
void emg_dispatch_register_3(struct platform_driver *arg0);
#line 186 
#line 294 
void emg_dispatch_register_5(struct file_operations *arg0);
#line 187 
#line 465 
void emg_dispatch_register_8(struct ieee80211_hw *arg0);
#line 188 
#line 6207 
void *emg_entry_point_insmod(void *arg0);
#line 189 
#line 528 
void *emg_file_operations_character_driver_scenario_fops_ackto(void *arg0);
#line 190 
#line 707 
void *emg_file_operations_character_driver_scenario_fops_ani(void *arg0);
#line 191 
#line 884 
void *emg_file_operations_character_driver_scenario_fops_antenna_diversity(void *arg0);
#line 192 
#line 1063 
void *emg_file_operations_character_driver_scenario_fops_bt_ant_diversity(void *arg0);
#line 193 
#line 1240 
void *emg_file_operations_character_driver_scenario_fops_btcoex(void *arg0);
#line 194 
#line 1419 
void *emg_file_operations_character_driver_scenario_fops_debug(void *arg0);
#line 195 
#line 1596 
void *emg_file_operations_character_driver_scenario_fops_dfs_stats(void *arg0);
#line 196 
#line 1773 
void *emg_file_operations_character_driver_scenario_fops_nf_override(void *arg0);
#line 197 
#line 1950 
void *emg_file_operations_character_driver_scenario_fops_node_aggr(void *arg0);
#line 198 
#line 2129 
void *emg_file_operations_character_driver_scenario_fops_node_recv(void *arg0);
#line 199 
#line 2308 
void *emg_file_operations_character_driver_scenario_fops_regdump(void *arg0);
#line 200 
#line 2485 
void *emg_file_operations_character_driver_scenario_fops_regidx(void *arg0);
#line 201 
#line 2662 
void *emg_file_operations_character_driver_scenario_fops_regval(void *arg0);
#line 202 
#line 2839 
void *emg_file_operations_character_driver_scenario_fops_simulate_radar(void *arg0);
#line 203 
#line 2992 
void *emg_file_operations_character_driver_scenario_fops_tpc(void *arg0);
#line 204 
#line 3169 
void *emg_file_operations_character_driver_scenario_fops_tx99(void *arg0);
#line 205 
#line 3346 
void *emg_file_operations_character_driver_scenario_fops_tx99_power(void *arg0);
#line 206 
#line 3523 
void *emg_file_operations_character_driver_scenario_fops_wow(void *arg0);
#line 210 
#line 3700 
void *emg_ieee80211_ieee80211_scenario_ath9k_ops(void *arg0);
#line 211 
#line 4389 
void *emg_interrupt_interrupt_scenario_ath_isr(void *arg0);
#line 214 
#line 4452 
void *emg_pci_pci_scenario_ath_pci_driver(void *arg0);
#line 217 
#line 4630 
void *emg_platform_platform_instance_ath_ahb_driver(void *arg0);
#line 218 
#line 4807 
void *emg_pm_pm_ops_scenario_ath9k_pm_ops(void *arg0);
#line 222 
#line 5802 
void *emg_timer_timer_scenario_23(void *arg0);
#line 223 
#line 6236 
int main(void);
#line 226  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 227  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 229  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 230  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 231  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_22;
#line 232  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_23;
#line 233  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_24;
#line 234  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_25;
#line 235  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_26;
#line 236  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_27;
#line 237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_28;
#line 238  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_29;
#line 239  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_30;
#line 240  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_31;
#line 241  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_32;
#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_33;
#line 243  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_34;
#line 244  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_35;
#line 245  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_36;
#line 246  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_37;
#line 247  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_38;
#line 248  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_39;
#line 249  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_40;
#line 253  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_pm_deregister_38(void)
{
  #line 254 
  int ret;
  #line 255 
  struct emg_struct_platform_instance_ath_ahb_driver_38 *cf_arg_39;
  #line 256 
  ret = pthread_join(emg_thread_39,(void **)0);
  #line 257 
  __VERIFIER_assume(ret == 0);
  #line 258 
  return;
}

#line 262  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_pm_register_38(void)
{
  #line 263 
  int ret;
  #line 264 
  struct emg_struct_platform_instance_ath_ahb_driver_38 *cf_arg_39;
  #line 265 
  cf_arg_39 = (struct emg_struct_platform_instance_ath_ahb_driver_38 *)ldv_xmalloc(16UL);
  #line 266 
  ret = pthread_create(& emg_thread_39,(pthread_attr_t *)0,& emg_pm_pm_ops_scenario_ath9k_pm_ops,(void *)cf_arg_39);
  #line 267 
  __VERIFIER_assume(ret == 0);
  #line 268 
  return;
}

#line 272  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 273 
  int ret;
  #line 274 
  struct emg_struct_pci_scenario_ath_pci_driver_37 *cf_arg_37;
  #line 275 
  cf_arg_37 = (struct emg_struct_pci_scenario_ath_pci_driver_37 *)ldv_xmalloc(16UL);
  #line 276 
  cf_arg_37->arg0 = arg0;
  #line 277 
  ret = pthread_create(& emg_thread_37,(pthread_attr_t *)0,& emg_pci_pci_scenario_ath_pci_driver,(void *)cf_arg_37);
  #line 278 
  __VERIFIER_assume(ret == 0);
  #line 279 
  return;
}

#line 283  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_3(struct platform_driver *arg0)
{
  #line 284 
  int ret;
  #line 285 
  struct emg_struct_platform_instance_ath_ahb_driver_38 *cf_arg_38;
  #line 286 
  cf_arg_38 = (struct emg_struct_platform_instance_ath_ahb_driver_38 *)ldv_xmalloc(16UL);
  #line 287 
  cf_arg_38->arg0 = arg0;
  #line 288 
  ret = pthread_create(& emg_thread_38,(pthread_attr_t *)0,& emg_platform_platform_instance_ath_ahb_driver,(void *)cf_arg_38);
  #line 289 
  __VERIFIER_assume(ret == 0);
  #line 290 
  return;
}

#line 294  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_5(struct file_operations *arg0)
{
  #line 295 
  int ret;
  #line 296 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_17;
  #line 297 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_18;
  #line 298 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_19;
  #line 299 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_20;
  #line 300 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_21;
  #line 301 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_22;
  #line 302 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_23;
  #line 303 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_24;
  #line 304 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_25;
  #line 305 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_26;
  #line 306 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_27;
  #line 307 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_28;
  #line 308 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_29;
  #line 309 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_30;
  #line 310 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_31;
  #line 311 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_32;
  #line 312 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_33;
  #line 313 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *cf_arg_34;
  #line 314 
  switch (ldv_undef_int()) {
    #line 315 
    case 0: 
            #line 315 
    ;
    #line 316 
    cf_arg_17 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 317 
    cf_arg_17->arg0 = arg0;
    #line 318 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_ackto,(void *)cf_arg_17);
    #line 319 
    __VERIFIER_assume(ret == 0);
    #line 320 
    break;
    #line 322 
    case 1: 
            #line 322 
    ;
    #line 323 
    cf_arg_18 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 324 
    cf_arg_18->arg0 = arg0;
    #line 325 
    ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_ani,(void *)cf_arg_18);
    #line 326 
    __VERIFIER_assume(ret == 0);
    #line 327 
    break;
    #line 329 
    case 2: 
            #line 329 
    ;
    #line 330 
    cf_arg_19 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 331 
    cf_arg_19->arg0 = arg0;
    #line 332 
    ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_antenna_diversity,(void *)cf_arg_19);
    #line 333 
    __VERIFIER_assume(ret == 0);
    #line 334 
    break;
    #line 336 
    case 3: 
            #line 336 
    ;
    #line 337 
    cf_arg_20 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 338 
    cf_arg_20->arg0 = arg0;
    #line 339 
    ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_bt_ant_diversity,(void *)cf_arg_20);
    #line 340 
    __VERIFIER_assume(ret == 0);
    #line 341 
    break;
    #line 343 
    case 4: 
            #line 343 
    ;
    #line 344 
    cf_arg_21 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 345 
    cf_arg_21->arg0 = arg0;
    #line 346 
    ret = pthread_create(& emg_thread_21,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_btcoex,(void *)cf_arg_21);
    #line 347 
    __VERIFIER_assume(ret == 0);
    #line 348 
    break;
    #line 350 
    case 5: 
            #line 350 
    ;
    #line 351 
    cf_arg_22 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 352 
    cf_arg_22->arg0 = arg0;
    #line 353 
    ret = pthread_create(& emg_thread_22,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_debug,(void *)cf_arg_22);
    #line 354 
    __VERIFIER_assume(ret == 0);
    #line 355 
    break;
    #line 357 
    case 6: 
            #line 357 
    ;
    #line 358 
    cf_arg_23 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 359 
    cf_arg_23->arg0 = arg0;
    #line 360 
    ret = pthread_create(& emg_thread_23,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_dfs_stats,(void *)cf_arg_23);
    #line 361 
    __VERIFIER_assume(ret == 0);
    #line 362 
    break;
    #line 364 
    case 7: 
            #line 364 
    ;
    #line 365 
    cf_arg_24 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 366 
    cf_arg_24->arg0 = arg0;
    #line 367 
    ret = pthread_create(& emg_thread_24,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_nf_override,(void *)cf_arg_24);
    #line 368 
    __VERIFIER_assume(ret == 0);
    #line 369 
    break;
    #line 371 
    case 8: 
            #line 371 
    ;
    #line 372 
    cf_arg_25 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 373 
    cf_arg_25->arg0 = arg0;
    #line 374 
    ret = pthread_create(& emg_thread_25,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_node_aggr,(void *)cf_arg_25);
    #line 375 
    __VERIFIER_assume(ret == 0);
    #line 376 
    break;
    #line 378 
    case 9: 
            #line 378 
    ;
    #line 379 
    cf_arg_26 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 380 
    cf_arg_26->arg0 = arg0;
    #line 381 
    ret = pthread_create(& emg_thread_26,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_node_recv,(void *)cf_arg_26);
    #line 382 
    __VERIFIER_assume(ret == 0);
    #line 383 
    break;
    #line 385 
    case 10: 
             #line 385 
    ;
    #line 386 
    cf_arg_27 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 387 
    cf_arg_27->arg0 = arg0;
    #line 388 
    ret = pthread_create(& emg_thread_27,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_regdump,(void *)cf_arg_27);
    #line 389 
    __VERIFIER_assume(ret == 0);
    #line 390 
    break;
    #line 392 
    case 11: 
             #line 392 
    ;
    #line 393 
    cf_arg_28 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 394 
    cf_arg_28->arg0 = arg0;
    #line 395 
    ret = pthread_create(& emg_thread_28,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_regidx,(void *)cf_arg_28);
    #line 396 
    __VERIFIER_assume(ret == 0);
    #line 397 
    break;
    #line 399 
    case 12: 
             #line 399 
    ;
    #line 400 
    cf_arg_29 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 401 
    cf_arg_29->arg0 = arg0;
    #line 402 
    ret = pthread_create(& emg_thread_29,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_regval,(void *)cf_arg_29);
    #line 403 
    __VERIFIER_assume(ret == 0);
    #line 404 
    break;
    #line 406 
    case 13: 
             #line 406 
    ;
    #line 407 
    cf_arg_30 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 408 
    cf_arg_30->arg0 = arg0;
    #line 409 
    ret = pthread_create(& emg_thread_30,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_simulate_radar,(void *)cf_arg_30);
    #line 410 
    __VERIFIER_assume(ret == 0);
    #line 411 
    break;
    #line 413 
    case 14: 
             #line 413 
    ;
    #line 414 
    cf_arg_31 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 415 
    cf_arg_31->arg0 = arg0;
    #line 416 
    ret = pthread_create(& emg_thread_31,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_tpc,(void *)cf_arg_31);
    #line 417 
    __VERIFIER_assume(ret == 0);
    #line 418 
    break;
    #line 420 
    case 15: 
             #line 420 
    ;
    #line 421 
    cf_arg_32 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 422 
    cf_arg_32->arg0 = arg0;
    #line 423 
    ret = pthread_create(& emg_thread_32,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_tx99,(void *)cf_arg_32);
    #line 424 
    __VERIFIER_assume(ret == 0);
    #line 425 
    break;
    #line 427 
    case 16: 
             #line 427 
    ;
    #line 428 
    cf_arg_33 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 429 
    cf_arg_33->arg0 = arg0;
    #line 430 
    ret = pthread_create(& emg_thread_33,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_tx99_power,(void *)cf_arg_33);
    #line 431 
    __VERIFIER_assume(ret == 0);
    #line 432 
    break;
    #line 434 
    case 17: 
             #line 434 
    ;
    #line 435 
    cf_arg_34 = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)ldv_xmalloc(16UL);
    #line 436 
    cf_arg_34->arg0 = arg0;
    #line 437 
    ret = pthread_create(& emg_thread_34,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_wow,(void *)cf_arg_34);
    #line 438 
    __VERIFIER_assume(ret == 0);
    #line 439 
    break;
    #line 441 
    default: 
             #line 441 
    ;
    #line 441 
    __VERIFIER_assume(0);
  }
  #line 443 
  return;
}

#line 447  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_6(struct timer_list *arg0)
{
  #line 448 
  int ret;
  #line 449 
  struct emg_struct_timer_scenario_23_40 *cf_arg_40;
  #line 450 
  ret = pthread_join(emg_thread_40,(void **)0);
  #line 451 
  __VERIFIER_assume(ret == 0);
  #line 452 
  return;
}

#line 456  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_7(int arg0)
{
  #line 457 
  int ret;
  #line 458 
  struct emg_struct_free_irq_7 *cf_arg_36;
  #line 459 
  ret = pthread_join(emg_thread_36,(void **)0);
  #line 460 
  __VERIFIER_assume(ret == 0);
  #line 461 
  return;
}

#line 465  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_8(struct ieee80211_hw *arg0)
{
  #line 466 
  int ret;
  #line 467 
  struct emg_struct_ieee80211_scenario_ath9k_ops_35 *cf_arg_35;
  #line 468 
  cf_arg_35 = (struct emg_struct_ieee80211_scenario_ath9k_ops_35 *)ldv_xmalloc(16UL);
  #line 469 
  cf_arg_35->arg0 = arg0;
  #line 470 
  ret = pthread_create(& emg_thread_35,(pthread_attr_t *)0,& emg_ieee80211_ieee80211_scenario_ath9k_ops,(void *)cf_arg_35);
  #line 471 
  __VERIFIER_assume(ret == 0);
  #line 472 
  return;
}

#line 476  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_9(struct ieee80211_hw *arg0)
{
  #line 477 
  int ret;
  #line 478 
  struct emg_struct_ieee80211_scenario_ath9k_ops_35 *cf_arg_35;
  #line 479 
  ret = pthread_join(emg_thread_35,(void **)0);
  #line 480 
  __VERIFIER_assume(ret == 0);
  #line 481 
  return;
}

#line 485  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_11(struct timer_list *arg0)
{
  #line 486 
  int ret;
  #line 487 
  struct emg_struct_timer_scenario_23_40 *cf_arg_40;
  #line 488 
  cf_arg_40 = (struct emg_struct_timer_scenario_23_40 *)ldv_xmalloc(16UL);
  #line 489 
  cf_arg_40->arg0 = arg0;
  #line 490 
  ret = pthread_create(& emg_thread_40,(pthread_attr_t *)0,& emg_timer_timer_scenario_23,(void *)cf_arg_40);
  #line 491 
  __VERIFIER_assume(ret == 0);
  #line 492 
  return;
}

#line 496  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_12(struct pci_driver *arg0)
{
  #line 497 
  int ret;
  #line 498 
  struct emg_struct_pci_scenario_ath_pci_driver_37 *cf_arg_37;
  #line 499 
  ret = pthread_join(emg_thread_37,(void **)0);
  #line 500 
  __VERIFIER_assume(ret == 0);
  #line 501 
  return;
}

#line 505  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_13(struct platform_driver *arg0)
{
  #line 506 
  int ret;
  #line 507 
  struct emg_struct_platform_instance_ath_ahb_driver_38 *cf_arg_38;
  #line 508 
  ret = pthread_join(emg_thread_38,(void **)0);
  #line 509 
  __VERIFIER_assume(ret == 0);
  #line 510 
  return;
}

#line 514  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_14(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 515 
  int ret;
  #line 516 
  struct emg_struct_interrupt_scenario_ath_isr_36 *cf_arg_36;
  #line 517 
  cf_arg_36 = (struct emg_struct_interrupt_scenario_ath_isr_36 *)ldv_xmalloc(40UL);
  #line 518 
  cf_arg_36->arg0 = arg0;
  #line 519 
  cf_arg_36->arg1 = arg1;
  #line 520 
  cf_arg_36->arg2 = arg2;
  #line 521 
  cf_arg_36->arg3 = arg3;
  #line 522 
  ret = pthread_create(& emg_thread_36,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_ath_isr,(void *)cf_arg_36);
  #line 523 
  __VERIFIER_assume(ret == 0);
  #line 524 
  return;
}

#line 528  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_ackto(void *arg0)
{
  #line 531 
  struct file_operations *emg_17_container;
  #line 532 
  long long emg_17_emg_param_1_0;
  #line 533 
  char *emg_17_emg_param_1_2;
  #line 534 
  char *emg_17_emg_param_1_4;
  #line 535 
  int emg_17_emg_param_2_1;
  #line 536 
  long long *emg_17_emg_param_3_3;
  #line 537 
  long long *emg_17_emg_param_3_5;
  #line 538 
  struct file *emg_17_resource_0;
  #line 539 
  struct inode *emg_17_resource_1;
  #line 540 
  int emg_17_ret;
  #line 541 
  unsigned long emg_17_size_cnt;
  #line 542 
  int emg_repeat_cnt_call_17 = 1;
  #line 543 
  int emg_repeat_cnt_main_17_0 = 1;
  #line 544 
  int emg_repeat_cnt_main_17_1 = 1;
  #line 546 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 550 
  emg_17_ret = ldv_undef_int();
  #line 551 
  emg_17_container = emg_alias_fops_ackto;
  #line 552 
  emg_17_ret = ldv_undef_int();
  #line 554 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_ackto);
  #line 556 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 557 
    emg_17_container = data->arg0;
    #line 558 
    ldv_free((void *)data);
  }
  #line 563 
  emg_17_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 564 
  emg_17_size_cnt = (unsigned long)ldv_undef_int();
  #line 568 
  goto emg_main_17;
  #line 572 
  return (void *)0;
  #line 575 
  emg_call_17: 
               #line 575 
  ;
  #line 576 
  if (ldv_undef_int() != 0) {
    #line 577 
    switch (ldv_undef_int()) {
      #line 578 
      case 0: 
              #line 578 
      ;
      #line 580 
      emg_17_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 580 
      emg_17_emg_param_1_2 = emg_17_emg_param_1_2;
      #line 581 
      emg_17_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 581 
      emg_17_emg_param_3_3 = emg_17_emg_param_3_3;
      #line 585 
      emg_wrapper_read_file_ackto(emg_17_resource_0,emg_17_emg_param_1_2,emg_17_size_cnt,emg_17_emg_param_3_3);
      #line 589 
      ldv_free((void *)emg_17_emg_param_1_2);
      #line 590 
      ldv_free((void *)emg_17_emg_param_3_3);
      #line 592 
      break;
      #line 594 
      case 1: 
              #line 594 
      ;
      #line 596 
      default_llseek(emg_17_resource_0,emg_17_emg_param_1_0,emg_17_emg_param_2_1);
      #line 598 
      break;
      #line 600 
      case 2: 
              #line 600 
      ;
      #line 607 
      __VERIFIER_assume(emg_17_size_cnt <= 2147479552UL);
      #line 608 
      emg_17_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 608 
      emg_17_emg_param_1_4 = emg_17_emg_param_1_4;
      #line 609 
      emg_17_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 609 
      emg_17_emg_param_3_5 = emg_17_emg_param_3_5;
      #line 613 
      if (emg_17_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 614 
        (*(emg_17_container->write))(emg_17_resource_0,emg_17_emg_param_1_4,emg_17_size_cnt,emg_17_emg_param_3_5);
      #line 619 
      ldv_free((void *)emg_17_emg_param_1_4);
      #line 620 
      ldv_free((void *)emg_17_emg_param_3_5);
      #line 622 
      break;
      #line 624 
      default: 
               #line 624 
      ;
      #line 624 
      __VERIFIER_assume(0);
    }
    #line 627 
    if (emg_repeat_cnt_call_17 > 0) {
      #line 628 
      emg_repeat_cnt_call_17 --;
      #line 630 
      goto emg_call_17;
    }
    else 
         #line 632 
         __VERIFIER_assume(0);
  }
  else {
    #line 638 
    if (emg_17_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 639 
      (*(emg_17_container->release))(emg_17_resource_1,emg_17_resource_0);
    #line 643 
    if (emg_repeat_cnt_main_17_1 > 0) {
      #line 644 
      emg_repeat_cnt_main_17_1 --;
      #line 646 
      goto emg_main_17;
    }
    else 
         #line 648 
         __VERIFIER_assume(0);
  }
  #line 654 
  return (void *)0;
  #line 657 
  emg_main_17: 
               #line 657 
  ;
  #line 658 
  if (ldv_undef_int() != 0) {
    #line 660 
    emg_17_ret = (*emg_alias_simple_open)(emg_17_resource_1,emg_17_resource_0);
    #line 665 
    emg_17_ret = ldv_filter_err_code(emg_17_ret);
    #line 668 
    if (ldv_undef_int() != 0) {
      #line 670 
      __VERIFIER_assume(emg_17_ret == 0);
      #line 674 
      goto emg_call_17;
    }
    else {
      #line 679 
      __VERIFIER_assume(emg_17_ret != 0);
      #line 682 
      if (emg_repeat_cnt_main_17_0 > 0) {
        #line 683 
        emg_repeat_cnt_main_17_0 --;
        #line 685 
        goto emg_main_17;
      }
      else 
           #line 687 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 694 
       ldv_free((void *)emg_17_resource_0);
  #line 702 
  return (void *)0;
}

#line 707  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_ani(void *arg0)
{
  #line 710 
  struct file_operations *emg_18_container;
  #line 711 
  long long emg_18_emg_param_1_0;
  #line 712 
  char *emg_18_emg_param_1_2;
  #line 713 
  char *emg_18_emg_param_1_4;
  #line 714 
  int emg_18_emg_param_2_1;
  #line 715 
  long long *emg_18_emg_param_3_3;
  #line 716 
  long long *emg_18_emg_param_3_5;
  #line 717 
  struct file *emg_18_resource_0;
  #line 718 
  struct inode *emg_18_resource_1;
  #line 719 
  int emg_18_ret;
  #line 720 
  unsigned long emg_18_size_cnt;
  #line 721 
  int emg_repeat_cnt_main_18_0 = 1;
  #line 722 
  int emg_repeat_cnt_main_18_1 = 1;
  #line 723 
  int emg_repeat_cnt_call_18 = 1;
  #line 725 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 729 
  emg_18_ret = ldv_undef_int();
  #line 730 
  emg_18_container = emg_alias_fops_ani;
  #line 731 
  emg_18_ret = ldv_undef_int();
  #line 733 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_ani);
  #line 735 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 736 
    emg_18_container = data->arg0;
    #line 737 
    ldv_free((void *)data);
  }
  #line 742 
  emg_18_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 743 
  emg_18_size_cnt = (unsigned long)ldv_undef_int();
  #line 747 
  goto emg_main_18;
  #line 751 
  return (void *)0;
  #line 754 
  emg_call_18: 
               #line 754 
  ;
  #line 755 
  if (ldv_undef_int() != 0) {
    #line 756 
    switch (ldv_undef_int()) {
      #line 757 
      case 0: 
              #line 757 
      ;
      #line 759 
      emg_18_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 759 
      emg_18_emg_param_1_2 = emg_18_emg_param_1_2;
      #line 760 
      emg_18_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 760 
      emg_18_emg_param_3_3 = emg_18_emg_param_3_3;
      #line 764 
      emg_wrapper_read_file_ani(emg_18_resource_0,emg_18_emg_param_1_2,emg_18_size_cnt,emg_18_emg_param_3_3);
      #line 768 
      ldv_free((void *)emg_18_emg_param_1_2);
      #line 769 
      ldv_free((void *)emg_18_emg_param_3_3);
      #line 771 
      break;
      #line 773 
      case 1: 
              #line 773 
      ;
      #line 775 
      default_llseek(emg_18_resource_0,emg_18_emg_param_1_0,emg_18_emg_param_2_1);
      #line 777 
      break;
      #line 779 
      case 2: 
              #line 779 
      ;
      #line 786 
      __VERIFIER_assume(emg_18_size_cnt <= 2147479552UL);
      #line 787 
      emg_18_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 787 
      emg_18_emg_param_1_4 = emg_18_emg_param_1_4;
      #line 788 
      emg_18_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 788 
      emg_18_emg_param_3_5 = emg_18_emg_param_3_5;
      #line 792 
      emg_wrapper_write_file_ani(emg_18_resource_0,emg_18_emg_param_1_4,emg_18_size_cnt,emg_18_emg_param_3_5);
      #line 796 
      ldv_free((void *)emg_18_emg_param_1_4);
      #line 797 
      ldv_free((void *)emg_18_emg_param_3_5);
      #line 799 
      break;
      #line 801 
      default: 
               #line 801 
      ;
      #line 801 
      __VERIFIER_assume(0);
    }
    #line 804 
    if (emg_repeat_cnt_call_18 > 0) {
      #line 805 
      emg_repeat_cnt_call_18 --;
      #line 807 
      goto emg_call_18;
    }
    else 
         #line 809 
         __VERIFIER_assume(0);
  }
  else {
    #line 815 
    if (emg_18_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 816 
      (*(emg_18_container->release))(emg_18_resource_1,emg_18_resource_0);
    #line 820 
    if (emg_repeat_cnt_main_18_1 > 0) {
      #line 821 
      emg_repeat_cnt_main_18_1 --;
      #line 823 
      goto emg_main_18;
    }
    else 
         #line 825 
         __VERIFIER_assume(0);
  }
  #line 831 
  return (void *)0;
  #line 834 
  emg_main_18: 
               #line 834 
  ;
  #line 835 
  if (ldv_undef_int() != 0) {
    #line 837 
    emg_18_ret = (*emg_alias_simple_open)(emg_18_resource_1,emg_18_resource_0);
    #line 842 
    emg_18_ret = ldv_filter_err_code(emg_18_ret);
    #line 845 
    if (ldv_undef_int() != 0) {
      #line 847 
      __VERIFIER_assume(emg_18_ret == 0);
      #line 851 
      goto emg_call_18;
    }
    else {
      #line 856 
      __VERIFIER_assume(emg_18_ret != 0);
      #line 859 
      if (emg_repeat_cnt_main_18_0 > 0) {
        #line 860 
        emg_repeat_cnt_main_18_0 --;
        #line 862 
        goto emg_main_18;
      }
      else 
           #line 864 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 871 
       ldv_free((void *)emg_18_resource_0);
  #line 879 
  return (void *)0;
}

#line 884  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_antenna_diversity(void *arg0)
{
  #line 887 
  struct file_operations *emg_19_container;
  #line 888 
  long long emg_19_emg_param_1_0;
  #line 889 
  char *emg_19_emg_param_1_2;
  #line 890 
  char *emg_19_emg_param_1_4;
  #line 891 
  int emg_19_emg_param_2_1;
  #line 892 
  long long *emg_19_emg_param_3_3;
  #line 893 
  long long *emg_19_emg_param_3_5;
  #line 894 
  struct file *emg_19_resource_0;
  #line 895 
  struct inode *emg_19_resource_1;
  #line 896 
  int emg_19_ret;
  #line 897 
  unsigned long emg_19_size_cnt;
  #line 898 
  int emg_repeat_cnt_call_19 = 1;
  #line 899 
  int emg_repeat_cnt_main_19_1 = 1;
  #line 900 
  int emg_repeat_cnt_main_19_0 = 1;
  #line 902 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 906 
  emg_19_ret = ldv_undef_int();
  #line 907 
  emg_19_container = emg_alias_fops_antenna_diversity;
  #line 908 
  emg_19_ret = ldv_undef_int();
  #line 910 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_antenna_diversity);
  #line 912 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 913 
    emg_19_container = data->arg0;
    #line 914 
    ldv_free((void *)data);
  }
  #line 919 
  emg_19_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 920 
  emg_19_size_cnt = (unsigned long)ldv_undef_int();
  #line 924 
  goto emg_main_19;
  #line 928 
  return (void *)0;
  #line 931 
  emg_call_19: 
               #line 931 
  ;
  #line 932 
  if (ldv_undef_int() != 0) {
    #line 933 
    switch (ldv_undef_int()) {
      #line 934 
      case 0: 
              #line 934 
      ;
      #line 936 
      emg_19_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 936 
      emg_19_emg_param_1_2 = emg_19_emg_param_1_2;
      #line 937 
      emg_19_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 937 
      emg_19_emg_param_3_3 = emg_19_emg_param_3_3;
      #line 941 
      emg_wrapper_read_file_antenna_diversity(emg_19_resource_0,emg_19_emg_param_1_2,emg_19_size_cnt,emg_19_emg_param_3_3);
      #line 945 
      ldv_free((void *)emg_19_emg_param_1_2);
      #line 946 
      ldv_free((void *)emg_19_emg_param_3_3);
      #line 948 
      break;
      #line 950 
      case 1: 
              #line 950 
      ;
      #line 952 
      default_llseek(emg_19_resource_0,emg_19_emg_param_1_0,emg_19_emg_param_2_1);
      #line 954 
      break;
      #line 956 
      case 2: 
              #line 956 
      ;
      #line 963 
      __VERIFIER_assume(emg_19_size_cnt <= 2147479552UL);
      #line 964 
      emg_19_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 964 
      emg_19_emg_param_1_4 = emg_19_emg_param_1_4;
      #line 965 
      emg_19_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 965 
      emg_19_emg_param_3_5 = emg_19_emg_param_3_5;
      #line 969 
      if (emg_19_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 970 
        (*(emg_19_container->write))(emg_19_resource_0,emg_19_emg_param_1_4,emg_19_size_cnt,emg_19_emg_param_3_5);
      #line 975 
      ldv_free((void *)emg_19_emg_param_1_4);
      #line 976 
      ldv_free((void *)emg_19_emg_param_3_5);
      #line 978 
      break;
      #line 980 
      default: 
               #line 980 
      ;
      #line 980 
      __VERIFIER_assume(0);
    }
    #line 983 
    if (emg_repeat_cnt_call_19 > 0) {
      #line 984 
      emg_repeat_cnt_call_19 --;
      #line 986 
      goto emg_call_19;
    }
    else 
         #line 988 
         __VERIFIER_assume(0);
  }
  else {
    #line 994 
    if (emg_19_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 995 
      (*(emg_19_container->release))(emg_19_resource_1,emg_19_resource_0);
    #line 999 
    if (emg_repeat_cnt_main_19_1 > 0) {
      #line 1000 
      emg_repeat_cnt_main_19_1 --;
      #line 1002 
      goto emg_main_19;
    }
    else 
         #line 1004 
         __VERIFIER_assume(0);
  }
  #line 1010 
  return (void *)0;
  #line 1013 
  emg_main_19: 
               #line 1013 
  ;
  #line 1014 
  if (ldv_undef_int() != 0) {
    #line 1016 
    emg_19_ret = (*emg_alias_simple_open)(emg_19_resource_1,emg_19_resource_0);
    #line 1021 
    emg_19_ret = ldv_filter_err_code(emg_19_ret);
    #line 1024 
    if (ldv_undef_int() != 0) {
      #line 1026 
      __VERIFIER_assume(emg_19_ret == 0);
      #line 1030 
      goto emg_call_19;
    }
    else {
      #line 1035 
      __VERIFIER_assume(emg_19_ret != 0);
      #line 1038 
      if (emg_repeat_cnt_main_19_0 > 0) {
        #line 1039 
        emg_repeat_cnt_main_19_0 --;
        #line 1041 
        goto emg_main_19;
      }
      else 
           #line 1043 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1050 
       ldv_free((void *)emg_19_resource_0);
  #line 1058 
  return (void *)0;
}

#line 1063  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_bt_ant_diversity(void *arg0)
{
  #line 1066 
  struct file_operations *emg_20_container;
  #line 1067 
  long long emg_20_emg_param_1_0;
  #line 1068 
  char *emg_20_emg_param_1_2;
  #line 1069 
  char *emg_20_emg_param_1_4;
  #line 1070 
  int emg_20_emg_param_2_1;
  #line 1071 
  long long *emg_20_emg_param_3_3;
  #line 1072 
  long long *emg_20_emg_param_3_5;
  #line 1073 
  struct file *emg_20_resource_0;
  #line 1074 
  struct inode *emg_20_resource_1;
  #line 1075 
  int emg_20_ret;
  #line 1076 
  unsigned long emg_20_size_cnt;
  #line 1077 
  int emg_repeat_cnt_main_20_0 = 1;
  #line 1078 
  int emg_repeat_cnt_call_20 = 1;
  #line 1079 
  int emg_repeat_cnt_main_20_1 = 1;
  #line 1081 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 1085 
  emg_20_ret = ldv_undef_int();
  #line 1086 
  emg_20_container = emg_alias_fops_bt_ant_diversity;
  #line 1087 
  emg_20_ret = ldv_undef_int();
  #line 1089 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_bt_ant_diversity);
  #line 1091 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 1092 
    emg_20_container = data->arg0;
    #line 1093 
    ldv_free((void *)data);
  }
  #line 1098 
  emg_20_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1099 
  emg_20_size_cnt = (unsigned long)ldv_undef_int();
  #line 1103 
  goto emg_main_20;
  #line 1107 
  return (void *)0;
  #line 1110 
  emg_call_20: 
               #line 1110 
  ;
  #line 1111 
  if (ldv_undef_int() != 0) {
    #line 1112 
    switch (ldv_undef_int()) {
      #line 1113 
      case 0: 
              #line 1113 
      ;
      #line 1115 
      emg_20_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1115 
      emg_20_emg_param_1_2 = emg_20_emg_param_1_2;
      #line 1116 
      emg_20_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1116 
      emg_20_emg_param_3_3 = emg_20_emg_param_3_3;
      #line 1120 
      emg_wrapper_read_file_bt_ant_diversity(emg_20_resource_0,emg_20_emg_param_1_2,emg_20_size_cnt,emg_20_emg_param_3_3);
      #line 1124 
      ldv_free((void *)emg_20_emg_param_1_2);
      #line 1125 
      ldv_free((void *)emg_20_emg_param_3_3);
      #line 1127 
      break;
      #line 1129 
      case 1: 
              #line 1129 
      ;
      #line 1131 
      default_llseek(emg_20_resource_0,emg_20_emg_param_1_0,emg_20_emg_param_2_1);
      #line 1133 
      break;
      #line 1135 
      case 2: 
              #line 1135 
      ;
      #line 1142 
      __VERIFIER_assume(emg_20_size_cnt <= 2147479552UL);
      #line 1143 
      emg_20_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1143 
      emg_20_emg_param_1_4 = emg_20_emg_param_1_4;
      #line 1144 
      emg_20_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1144 
      emg_20_emg_param_3_5 = emg_20_emg_param_3_5;
      #line 1148 
      emg_wrapper_write_file_bt_ant_diversity(emg_20_resource_0,emg_20_emg_param_1_4,emg_20_size_cnt,emg_20_emg_param_3_5);
      #line 1152 
      ldv_free((void *)emg_20_emg_param_1_4);
      #line 1153 
      ldv_free((void *)emg_20_emg_param_3_5);
      #line 1155 
      break;
      #line 1157 
      default: 
               #line 1157 
      ;
      #line 1157 
      __VERIFIER_assume(0);
    }
    #line 1160 
    if (emg_repeat_cnt_call_20 > 0) {
      #line 1161 
      emg_repeat_cnt_call_20 --;
      #line 1163 
      goto emg_call_20;
    }
    else 
         #line 1165 
         __VERIFIER_assume(0);
  }
  else {
    #line 1171 
    if (emg_20_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1172 
      (*(emg_20_container->release))(emg_20_resource_1,emg_20_resource_0);
    #line 1176 
    if (emg_repeat_cnt_main_20_0 > 0) {
      #line 1177 
      emg_repeat_cnt_main_20_0 --;
      #line 1179 
      goto emg_main_20;
    }
    else 
         #line 1181 
         __VERIFIER_assume(0);
  }
  #line 1187 
  return (void *)0;
  #line 1190 
  emg_main_20: 
               #line 1190 
  ;
  #line 1191 
  if (ldv_undef_int() != 0) {
    #line 1193 
    emg_20_ret = (*emg_alias_simple_open)(emg_20_resource_1,emg_20_resource_0);
    #line 1198 
    emg_20_ret = ldv_filter_err_code(emg_20_ret);
    #line 1201 
    if (ldv_undef_int() != 0) {
      #line 1203 
      __VERIFIER_assume(emg_20_ret == 0);
      #line 1207 
      goto emg_call_20;
    }
    else {
      #line 1212 
      __VERIFIER_assume(emg_20_ret != 0);
      #line 1215 
      if (emg_repeat_cnt_main_20_1 > 0) {
        #line 1216 
        emg_repeat_cnt_main_20_1 --;
        #line 1218 
        goto emg_main_20;
      }
      else 
           #line 1220 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1227 
       ldv_free((void *)emg_20_resource_0);
  #line 1235 
  return (void *)0;
}

#line 1240  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_btcoex(void *arg0)
{
  #line 1243 
  struct file_operations *emg_21_container;
  #line 1244 
  long long emg_21_emg_param_1_0;
  #line 1245 
  char *emg_21_emg_param_1_2;
  #line 1246 
  char *emg_21_emg_param_1_4;
  #line 1247 
  int emg_21_emg_param_2_1;
  #line 1248 
  long long *emg_21_emg_param_3_3;
  #line 1249 
  long long *emg_21_emg_param_3_5;
  #line 1250 
  struct file *emg_21_resource_0;
  #line 1251 
  struct inode *emg_21_resource_1;
  #line 1252 
  int emg_21_ret;
  #line 1253 
  unsigned long emg_21_size_cnt;
  #line 1254 
  int emg_repeat_cnt_main_21_1 = 1;
  #line 1255 
  int emg_repeat_cnt_main_21_0 = 1;
  #line 1256 
  int emg_repeat_cnt_call_21 = 1;
  #line 1258 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 1262 
  emg_21_ret = ldv_undef_int();
  #line 1263 
  emg_21_container = emg_alias_fops_btcoex;
  #line 1264 
  emg_21_ret = ldv_undef_int();
  #line 1266 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_btcoex);
  #line 1268 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 1269 
    emg_21_container = data->arg0;
    #line 1270 
    ldv_free((void *)data);
  }
  #line 1275 
  emg_21_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1276 
  emg_21_size_cnt = (unsigned long)ldv_undef_int();
  #line 1280 
  goto emg_main_21;
  #line 1284 
  return (void *)0;
  #line 1287 
  emg_call_21: 
               #line 1287 
  ;
  #line 1288 
  if (ldv_undef_int() != 0) {
    #line 1289 
    switch (ldv_undef_int()) {
      #line 1290 
      case 0: 
              #line 1290 
      ;
      #line 1292 
      emg_21_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1292 
      emg_21_emg_param_1_2 = emg_21_emg_param_1_2;
      #line 1293 
      emg_21_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1293 
      emg_21_emg_param_3_3 = emg_21_emg_param_3_3;
      #line 1297 
      emg_wrapper_read_file_btcoex(emg_21_resource_0,emg_21_emg_param_1_2,emg_21_size_cnt,emg_21_emg_param_3_3);
      #line 1301 
      ldv_free((void *)emg_21_emg_param_1_2);
      #line 1302 
      ldv_free((void *)emg_21_emg_param_3_3);
      #line 1304 
      break;
      #line 1306 
      case 1: 
              #line 1306 
      ;
      #line 1308 
      default_llseek(emg_21_resource_0,emg_21_emg_param_1_0,emg_21_emg_param_2_1);
      #line 1310 
      break;
      #line 1312 
      case 2: 
              #line 1312 
      ;
      #line 1319 
      __VERIFIER_assume(emg_21_size_cnt <= 2147479552UL);
      #line 1320 
      emg_21_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1320 
      emg_21_emg_param_1_4 = emg_21_emg_param_1_4;
      #line 1321 
      emg_21_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1321 
      emg_21_emg_param_3_5 = emg_21_emg_param_3_5;
      #line 1325 
      if (emg_21_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1326 
        (*(emg_21_container->write))(emg_21_resource_0,emg_21_emg_param_1_4,emg_21_size_cnt,emg_21_emg_param_3_5);
      #line 1331 
      ldv_free((void *)emg_21_emg_param_1_4);
      #line 1332 
      ldv_free((void *)emg_21_emg_param_3_5);
      #line 1334 
      break;
      #line 1336 
      default: 
               #line 1336 
      ;
      #line 1336 
      __VERIFIER_assume(0);
    }
    #line 1339 
    if (emg_repeat_cnt_call_21 > 0) {
      #line 1340 
      emg_repeat_cnt_call_21 --;
      #line 1342 
      goto emg_call_21;
    }
    else 
         #line 1344 
         __VERIFIER_assume(0);
  }
  else {
    #line 1350 
    if (emg_21_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1351 
      (*(emg_21_container->release))(emg_21_resource_1,emg_21_resource_0);
    #line 1355 
    if (emg_repeat_cnt_main_21_1 > 0) {
      #line 1356 
      emg_repeat_cnt_main_21_1 --;
      #line 1358 
      goto emg_main_21;
    }
    else 
         #line 1360 
         __VERIFIER_assume(0);
  }
  #line 1366 
  return (void *)0;
  #line 1369 
  emg_main_21: 
               #line 1369 
  ;
  #line 1370 
  if (ldv_undef_int() != 0) {
    #line 1372 
    emg_21_ret = (*emg_alias_simple_open)(emg_21_resource_1,emg_21_resource_0);
    #line 1377 
    emg_21_ret = ldv_filter_err_code(emg_21_ret);
    #line 1380 
    if (ldv_undef_int() != 0) {
      #line 1382 
      __VERIFIER_assume(emg_21_ret == 0);
      #line 1386 
      goto emg_call_21;
    }
    else {
      #line 1391 
      __VERIFIER_assume(emg_21_ret != 0);
      #line 1394 
      if (emg_repeat_cnt_main_21_0 > 0) {
        #line 1395 
        emg_repeat_cnt_main_21_0 --;
        #line 1397 
        goto emg_main_21;
      }
      else 
           #line 1399 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1406 
       ldv_free((void *)emg_21_resource_0);
  #line 1414 
  return (void *)0;
}

#line 1419  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_debug(void *arg0)
{
  #line 1422 
  struct file_operations *emg_22_container;
  #line 1423 
  long long emg_22_emg_param_1_0;
  #line 1424 
  char *emg_22_emg_param_1_2;
  #line 1425 
  char *emg_22_emg_param_1_4;
  #line 1426 
  int emg_22_emg_param_2_1;
  #line 1427 
  long long *emg_22_emg_param_3_3;
  #line 1428 
  long long *emg_22_emg_param_3_5;
  #line 1429 
  struct file *emg_22_resource_0;
  #line 1430 
  struct inode *emg_22_resource_1;
  #line 1431 
  int emg_22_ret;
  #line 1432 
  unsigned long emg_22_size_cnt;
  #line 1433 
  int emg_repeat_cnt_main_22_0 = 1;
  #line 1434 
  int emg_repeat_cnt_call_22 = 1;
  #line 1435 
  int emg_repeat_cnt_main_22_1 = 1;
  #line 1437 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 1441 
  emg_22_ret = ldv_undef_int();
  #line 1442 
  emg_22_container = emg_alias_fops_debug;
  #line 1443 
  emg_22_ret = ldv_undef_int();
  #line 1445 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_debug);
  #line 1447 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 1448 
    emg_22_container = data->arg0;
    #line 1449 
    ldv_free((void *)data);
  }
  #line 1454 
  emg_22_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1455 
  emg_22_size_cnt = (unsigned long)ldv_undef_int();
  #line 1459 
  goto emg_main_22;
  #line 1463 
  return (void *)0;
  #line 1466 
  emg_call_22: 
               #line 1466 
  ;
  #line 1467 
  if (ldv_undef_int() != 0) {
    #line 1468 
    switch (ldv_undef_int()) {
      #line 1469 
      case 0: 
              #line 1469 
      ;
      #line 1471 
      emg_22_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1471 
      emg_22_emg_param_1_2 = emg_22_emg_param_1_2;
      #line 1472 
      emg_22_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1472 
      emg_22_emg_param_3_3 = emg_22_emg_param_3_3;
      #line 1476 
      emg_wrapper_read_file_debug(emg_22_resource_0,emg_22_emg_param_1_2,emg_22_size_cnt,emg_22_emg_param_3_3);
      #line 1480 
      ldv_free((void *)emg_22_emg_param_1_2);
      #line 1481 
      ldv_free((void *)emg_22_emg_param_3_3);
      #line 1483 
      break;
      #line 1485 
      case 1: 
              #line 1485 
      ;
      #line 1487 
      default_llseek(emg_22_resource_0,emg_22_emg_param_1_0,emg_22_emg_param_2_1);
      #line 1489 
      break;
      #line 1491 
      case 2: 
              #line 1491 
      ;
      #line 1498 
      __VERIFIER_assume(emg_22_size_cnt <= 2147479552UL);
      #line 1499 
      emg_22_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1499 
      emg_22_emg_param_1_4 = emg_22_emg_param_1_4;
      #line 1500 
      emg_22_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1500 
      emg_22_emg_param_3_5 = emg_22_emg_param_3_5;
      #line 1504 
      emg_wrapper_write_file_debug(emg_22_resource_0,emg_22_emg_param_1_4,emg_22_size_cnt,emg_22_emg_param_3_5);
      #line 1508 
      ldv_free((void *)emg_22_emg_param_1_4);
      #line 1509 
      ldv_free((void *)emg_22_emg_param_3_5);
      #line 1511 
      break;
      #line 1513 
      default: 
               #line 1513 
      ;
      #line 1513 
      __VERIFIER_assume(0);
    }
    #line 1516 
    if (emg_repeat_cnt_call_22 > 0) {
      #line 1517 
      emg_repeat_cnt_call_22 --;
      #line 1519 
      goto emg_call_22;
    }
    else 
         #line 1521 
         __VERIFIER_assume(0);
  }
  else {
    #line 1527 
    if (emg_22_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1528 
      (*(emg_22_container->release))(emg_22_resource_1,emg_22_resource_0);
    #line 1532 
    if (emg_repeat_cnt_main_22_0 > 0) {
      #line 1533 
      emg_repeat_cnt_main_22_0 --;
      #line 1535 
      goto emg_main_22;
    }
    else 
         #line 1537 
         __VERIFIER_assume(0);
  }
  #line 1543 
  return (void *)0;
  #line 1546 
  emg_main_22: 
               #line 1546 
  ;
  #line 1547 
  if (ldv_undef_int() != 0) {
    #line 1549 
    emg_22_ret = (*emg_alias_simple_open)(emg_22_resource_1,emg_22_resource_0);
    #line 1554 
    emg_22_ret = ldv_filter_err_code(emg_22_ret);
    #line 1557 
    if (ldv_undef_int() != 0) {
      #line 1559 
      __VERIFIER_assume(emg_22_ret == 0);
      #line 1563 
      goto emg_call_22;
    }
    else {
      #line 1568 
      __VERIFIER_assume(emg_22_ret != 0);
      #line 1571 
      if (emg_repeat_cnt_main_22_1 > 0) {
        #line 1572 
        emg_repeat_cnt_main_22_1 --;
        #line 1574 
        goto emg_main_22;
      }
      else 
           #line 1576 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1583 
       ldv_free((void *)emg_22_resource_0);
  #line 1591 
  return (void *)0;
}

#line 1596  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_dfs_stats(void *arg0)
{
  #line 1599 
  struct file_operations *emg_23_container;
  #line 1600 
  long long emg_23_emg_param_1_0;
  #line 1601 
  char *emg_23_emg_param_1_2;
  #line 1602 
  char *emg_23_emg_param_1_4;
  #line 1603 
  int emg_23_emg_param_2_1;
  #line 1604 
  long long *emg_23_emg_param_3_3;
  #line 1605 
  long long *emg_23_emg_param_3_5;
  #line 1606 
  struct file *emg_23_resource_0;
  #line 1607 
  struct inode *emg_23_resource_1;
  #line 1608 
  int emg_23_ret;
  #line 1609 
  unsigned long emg_23_size_cnt;
  #line 1610 
  int emg_repeat_cnt_main_23_1 = 1;
  #line 1611 
  int emg_repeat_cnt_call_23 = 1;
  #line 1612 
  int emg_repeat_cnt_main_23_0 = 1;
  #line 1614 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 1618 
  emg_23_ret = ldv_undef_int();
  #line 1619 
  emg_23_container = emg_alias_fops_dfs_stats;
  #line 1620 
  emg_23_ret = ldv_undef_int();
  #line 1622 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_dfs_stats);
  #line 1624 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 1625 
    emg_23_container = data->arg0;
    #line 1626 
    ldv_free((void *)data);
  }
  #line 1631 
  emg_23_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1632 
  emg_23_size_cnt = (unsigned long)ldv_undef_int();
  #line 1636 
  goto emg_main_23;
  #line 1640 
  return (void *)0;
  #line 1643 
  emg_call_23: 
               #line 1643 
  ;
  #line 1644 
  if (ldv_undef_int() != 0) {
    #line 1645 
    switch (ldv_undef_int()) {
      #line 1646 
      case 0: 
              #line 1646 
      ;
      #line 1648 
      emg_23_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1648 
      emg_23_emg_param_1_2 = emg_23_emg_param_1_2;
      #line 1649 
      emg_23_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1649 
      emg_23_emg_param_3_3 = emg_23_emg_param_3_3;
      #line 1653 
      emg_wrapper_read_file_dfs(emg_23_resource_0,emg_23_emg_param_1_2,emg_23_size_cnt,emg_23_emg_param_3_3);
      #line 1657 
      ldv_free((void *)emg_23_emg_param_1_2);
      #line 1658 
      ldv_free((void *)emg_23_emg_param_3_3);
      #line 1660 
      break;
      #line 1662 
      case 1: 
              #line 1662 
      ;
      #line 1664 
      default_llseek(emg_23_resource_0,emg_23_emg_param_1_0,emg_23_emg_param_2_1);
      #line 1666 
      break;
      #line 1668 
      case 2: 
              #line 1668 
      ;
      #line 1675 
      __VERIFIER_assume(emg_23_size_cnt <= 2147479552UL);
      #line 1676 
      emg_23_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1676 
      emg_23_emg_param_1_4 = emg_23_emg_param_1_4;
      #line 1677 
      emg_23_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1677 
      emg_23_emg_param_3_5 = emg_23_emg_param_3_5;
      #line 1681 
      emg_wrapper_write_file_dfs(emg_23_resource_0,emg_23_emg_param_1_4,emg_23_size_cnt,emg_23_emg_param_3_5);
      #line 1685 
      ldv_free((void *)emg_23_emg_param_1_4);
      #line 1686 
      ldv_free((void *)emg_23_emg_param_3_5);
      #line 1688 
      break;
      #line 1690 
      default: 
               #line 1690 
      ;
      #line 1690 
      __VERIFIER_assume(0);
    }
    #line 1693 
    if (emg_repeat_cnt_call_23 > 0) {
      #line 1694 
      emg_repeat_cnt_call_23 --;
      #line 1696 
      goto emg_call_23;
    }
    else 
         #line 1698 
         __VERIFIER_assume(0);
  }
  else {
    #line 1704 
    if (emg_23_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1705 
      (*(emg_23_container->release))(emg_23_resource_1,emg_23_resource_0);
    #line 1709 
    if (emg_repeat_cnt_main_23_1 > 0) {
      #line 1710 
      emg_repeat_cnt_main_23_1 --;
      #line 1712 
      goto emg_main_23;
    }
    else 
         #line 1714 
         __VERIFIER_assume(0);
  }
  #line 1720 
  return (void *)0;
  #line 1723 
  emg_main_23: 
               #line 1723 
  ;
  #line 1724 
  if (ldv_undef_int() != 0) {
    #line 1726 
    emg_23_ret = (*emg_alias_simple_open)(emg_23_resource_1,emg_23_resource_0);
    #line 1731 
    emg_23_ret = ldv_filter_err_code(emg_23_ret);
    #line 1734 
    if (ldv_undef_int() != 0) {
      #line 1736 
      __VERIFIER_assume(emg_23_ret == 0);
      #line 1740 
      goto emg_call_23;
    }
    else {
      #line 1745 
      __VERIFIER_assume(emg_23_ret != 0);
      #line 1748 
      if (emg_repeat_cnt_main_23_0 > 0) {
        #line 1749 
        emg_repeat_cnt_main_23_0 --;
        #line 1751 
        goto emg_main_23;
      }
      else 
           #line 1753 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1760 
       ldv_free((void *)emg_23_resource_0);
  #line 1768 
  return (void *)0;
}

#line 1773  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_nf_override(void *arg0)
{
  #line 1776 
  struct file_operations *emg_24_container;
  #line 1777 
  long long emg_24_emg_param_1_0;
  #line 1778 
  char *emg_24_emg_param_1_2;
  #line 1779 
  char *emg_24_emg_param_1_4;
  #line 1780 
  int emg_24_emg_param_2_1;
  #line 1781 
  long long *emg_24_emg_param_3_3;
  #line 1782 
  long long *emg_24_emg_param_3_5;
  #line 1783 
  struct file *emg_24_resource_0;
  #line 1784 
  struct inode *emg_24_resource_1;
  #line 1785 
  int emg_24_ret;
  #line 1786 
  unsigned long emg_24_size_cnt;
  #line 1787 
  int emg_repeat_cnt_main_24_0 = 1;
  #line 1788 
  int emg_repeat_cnt_main_24_1 = 1;
  #line 1789 
  int emg_repeat_cnt_call_24 = 1;
  #line 1791 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 1795 
  emg_24_ret = ldv_undef_int();
  #line 1796 
  emg_24_container = emg_alias_fops_nf_override;
  #line 1797 
  emg_24_ret = ldv_undef_int();
  #line 1799 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_nf_override);
  #line 1801 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 1802 
    emg_24_container = data->arg0;
    #line 1803 
    ldv_free((void *)data);
  }
  #line 1808 
  emg_24_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1809 
  emg_24_size_cnt = (unsigned long)ldv_undef_int();
  #line 1813 
  goto emg_main_24;
  #line 1817 
  return (void *)0;
  #line 1820 
  emg_call_24: 
               #line 1820 
  ;
  #line 1821 
  if (ldv_undef_int() != 0) {
    #line 1822 
    switch (ldv_undef_int()) {
      #line 1823 
      case 0: 
              #line 1823 
      ;
      #line 1825 
      emg_24_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1825 
      emg_24_emg_param_1_2 = emg_24_emg_param_1_2;
      #line 1826 
      emg_24_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1826 
      emg_24_emg_param_3_3 = emg_24_emg_param_3_3;
      #line 1830 
      emg_wrapper_read_file_nf_override(emg_24_resource_0,emg_24_emg_param_1_2,emg_24_size_cnt,emg_24_emg_param_3_3);
      #line 1834 
      ldv_free((void *)emg_24_emg_param_1_2);
      #line 1835 
      ldv_free((void *)emg_24_emg_param_3_3);
      #line 1837 
      break;
      #line 1839 
      case 1: 
              #line 1839 
      ;
      #line 1841 
      default_llseek(emg_24_resource_0,emg_24_emg_param_1_0,emg_24_emg_param_2_1);
      #line 1843 
      break;
      #line 1845 
      case 2: 
              #line 1845 
      ;
      #line 1852 
      __VERIFIER_assume(emg_24_size_cnt <= 2147479552UL);
      #line 1853 
      emg_24_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1853 
      emg_24_emg_param_1_4 = emg_24_emg_param_1_4;
      #line 1854 
      emg_24_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1854 
      emg_24_emg_param_3_5 = emg_24_emg_param_3_5;
      #line 1858 
      emg_wrapper_write_file_nf_override(emg_24_resource_0,emg_24_emg_param_1_4,emg_24_size_cnt,emg_24_emg_param_3_5);
      #line 1862 
      ldv_free((void *)emg_24_emg_param_1_4);
      #line 1863 
      ldv_free((void *)emg_24_emg_param_3_5);
      #line 1865 
      break;
      #line 1867 
      default: 
               #line 1867 
      ;
      #line 1867 
      __VERIFIER_assume(0);
    }
    #line 1870 
    if (emg_repeat_cnt_call_24 > 0) {
      #line 1871 
      emg_repeat_cnt_call_24 --;
      #line 1873 
      goto emg_call_24;
    }
    else 
         #line 1875 
         __VERIFIER_assume(0);
  }
  else {
    #line 1881 
    if (emg_24_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1882 
      (*(emg_24_container->release))(emg_24_resource_1,emg_24_resource_0);
    #line 1886 
    if (emg_repeat_cnt_main_24_1 > 0) {
      #line 1887 
      emg_repeat_cnt_main_24_1 --;
      #line 1889 
      goto emg_main_24;
    }
    else 
         #line 1891 
         __VERIFIER_assume(0);
  }
  #line 1897 
  return (void *)0;
  #line 1900 
  emg_main_24: 
               #line 1900 
  ;
  #line 1901 
  if (ldv_undef_int() != 0) {
    #line 1903 
    emg_24_ret = (*emg_alias_simple_open)(emg_24_resource_1,emg_24_resource_0);
    #line 1908 
    emg_24_ret = ldv_filter_err_code(emg_24_ret);
    #line 1911 
    if (ldv_undef_int() != 0) {
      #line 1913 
      __VERIFIER_assume(emg_24_ret == 0);
      #line 1917 
      goto emg_call_24;
    }
    else {
      #line 1922 
      __VERIFIER_assume(emg_24_ret != 0);
      #line 1925 
      if (emg_repeat_cnt_main_24_0 > 0) {
        #line 1926 
        emg_repeat_cnt_main_24_0 --;
        #line 1928 
        goto emg_main_24;
      }
      else 
           #line 1930 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1937 
       ldv_free((void *)emg_24_resource_0);
  #line 1945 
  return (void *)0;
}

#line 1950  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_node_aggr(void *arg0)
{
  #line 1953 
  struct file_operations *emg_25_container;
  #line 1954 
  long long emg_25_emg_param_1_0;
  #line 1955 
  char *emg_25_emg_param_1_2;
  #line 1956 
  char *emg_25_emg_param_1_4;
  #line 1957 
  int emg_25_emg_param_2_1;
  #line 1958 
  long long *emg_25_emg_param_3_3;
  #line 1959 
  long long *emg_25_emg_param_3_5;
  #line 1960 
  struct file *emg_25_resource_0;
  #line 1961 
  struct inode *emg_25_resource_1;
  #line 1962 
  int emg_25_ret;
  #line 1963 
  unsigned long emg_25_size_cnt;
  #line 1964 
  int emg_repeat_cnt_call_25 = 1;
  #line 1965 
  int emg_repeat_cnt_main_25_0 = 1;
  #line 1966 
  int emg_repeat_cnt_main_25_1 = 1;
  #line 1968 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 1972 
  emg_25_ret = ldv_undef_int();
  #line 1973 
  emg_25_container = emg_alias_fops_node_aggr;
  #line 1974 
  emg_25_ret = ldv_undef_int();
  #line 1976 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_node_aggr);
  #line 1978 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 1979 
    emg_25_container = data->arg0;
    #line 1980 
    ldv_free((void *)data);
  }
  #line 1985 
  emg_25_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1986 
  emg_25_size_cnt = (unsigned long)ldv_undef_int();
  #line 1990 
  goto emg_main_25;
  #line 1994 
  return (void *)0;
  #line 1997 
  emg_call_25: 
               #line 1997 
  ;
  #line 1998 
  if (ldv_undef_int() != 0) {
    #line 1999 
    switch (ldv_undef_int()) {
      #line 2000 
      case 0: 
              #line 2000 
      ;
      #line 2002 
      emg_25_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2002 
      emg_25_emg_param_1_2 = emg_25_emg_param_1_2;
      #line 2003 
      emg_25_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2003 
      emg_25_emg_param_3_3 = emg_25_emg_param_3_3;
      #line 2007 
      emg_wrapper_read_file_node_aggr(emg_25_resource_0,emg_25_emg_param_1_2,emg_25_size_cnt,emg_25_emg_param_3_3);
      #line 2011 
      ldv_free((void *)emg_25_emg_param_1_2);
      #line 2012 
      ldv_free((void *)emg_25_emg_param_3_3);
      #line 2014 
      break;
      #line 2016 
      case 1: 
              #line 2016 
      ;
      #line 2018 
      default_llseek(emg_25_resource_0,emg_25_emg_param_1_0,emg_25_emg_param_2_1);
      #line 2020 
      break;
      #line 2022 
      case 2: 
              #line 2022 
      ;
      #line 2029 
      __VERIFIER_assume(emg_25_size_cnt <= 2147479552UL);
      #line 2030 
      emg_25_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2030 
      emg_25_emg_param_1_4 = emg_25_emg_param_1_4;
      #line 2031 
      emg_25_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2031 
      emg_25_emg_param_3_5 = emg_25_emg_param_3_5;
      #line 2035 
      if (emg_25_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2036 
        (*(emg_25_container->write))(emg_25_resource_0,emg_25_emg_param_1_4,emg_25_size_cnt,emg_25_emg_param_3_5);
      #line 2041 
      ldv_free((void *)emg_25_emg_param_1_4);
      #line 2042 
      ldv_free((void *)emg_25_emg_param_3_5);
      #line 2044 
      break;
      #line 2046 
      default: 
               #line 2046 
      ;
      #line 2046 
      __VERIFIER_assume(0);
    }
    #line 2049 
    if (emg_repeat_cnt_call_25 > 0) {
      #line 2050 
      emg_repeat_cnt_call_25 --;
      #line 2052 
      goto emg_call_25;
    }
    else 
         #line 2054 
         __VERIFIER_assume(0);
  }
  else {
    #line 2060 
    if (emg_25_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2061 
      (*(emg_25_container->release))(emg_25_resource_1,emg_25_resource_0);
    #line 2065 
    if (emg_repeat_cnt_main_25_0 > 0) {
      #line 2066 
      emg_repeat_cnt_main_25_0 --;
      #line 2068 
      goto emg_main_25;
    }
    else 
         #line 2070 
         __VERIFIER_assume(0);
  }
  #line 2076 
  return (void *)0;
  #line 2079 
  emg_main_25: 
               #line 2079 
  ;
  #line 2080 
  if (ldv_undef_int() != 0) {
    #line 2082 
    emg_25_ret = (*emg_alias_simple_open)(emg_25_resource_1,emg_25_resource_0);
    #line 2087 
    emg_25_ret = ldv_filter_err_code(emg_25_ret);
    #line 2090 
    if (ldv_undef_int() != 0) {
      #line 2092 
      __VERIFIER_assume(emg_25_ret == 0);
      #line 2096 
      goto emg_call_25;
    }
    else {
      #line 2101 
      __VERIFIER_assume(emg_25_ret != 0);
      #line 2104 
      if (emg_repeat_cnt_main_25_1 > 0) {
        #line 2105 
        emg_repeat_cnt_main_25_1 --;
        #line 2107 
        goto emg_main_25;
      }
      else 
           #line 2109 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2116 
       ldv_free((void *)emg_25_resource_0);
  #line 2124 
  return (void *)0;
}

#line 2129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_node_recv(void *arg0)
{
  #line 2132 
  struct file_operations *emg_26_container;
  #line 2133 
  long long emg_26_emg_param_1_0;
  #line 2134 
  char *emg_26_emg_param_1_2;
  #line 2135 
  char *emg_26_emg_param_1_4;
  #line 2136 
  int emg_26_emg_param_2_1;
  #line 2137 
  long long *emg_26_emg_param_3_3;
  #line 2138 
  long long *emg_26_emg_param_3_5;
  #line 2139 
  struct file *emg_26_resource_0;
  #line 2140 
  struct inode *emg_26_resource_1;
  #line 2141 
  int emg_26_ret;
  #line 2142 
  unsigned long emg_26_size_cnt;
  #line 2143 
  int emg_repeat_cnt_call_26 = 1;
  #line 2144 
  int emg_repeat_cnt_main_26_1 = 1;
  #line 2145 
  int emg_repeat_cnt_main_26_0 = 1;
  #line 2147 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 2151 
  emg_26_ret = ldv_undef_int();
  #line 2152 
  emg_26_container = emg_alias_fops_node_recv;
  #line 2153 
  emg_26_ret = ldv_undef_int();
  #line 2155 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_node_recv);
  #line 2157 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 2158 
    emg_26_container = data->arg0;
    #line 2159 
    ldv_free((void *)data);
  }
  #line 2164 
  emg_26_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2165 
  emg_26_size_cnt = (unsigned long)ldv_undef_int();
  #line 2169 
  goto emg_main_26;
  #line 2173 
  return (void *)0;
  #line 2176 
  emg_call_26: 
               #line 2176 
  ;
  #line 2177 
  if (ldv_undef_int() != 0) {
    #line 2178 
    switch (ldv_undef_int()) {
      #line 2179 
      case 0: 
              #line 2179 
      ;
      #line 2181 
      emg_26_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2181 
      emg_26_emg_param_1_2 = emg_26_emg_param_1_2;
      #line 2182 
      emg_26_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2182 
      emg_26_emg_param_3_3 = emg_26_emg_param_3_3;
      #line 2186 
      emg_wrapper_read_file_node_recv(emg_26_resource_0,emg_26_emg_param_1_2,emg_26_size_cnt,emg_26_emg_param_3_3);
      #line 2190 
      ldv_free((void *)emg_26_emg_param_1_2);
      #line 2191 
      ldv_free((void *)emg_26_emg_param_3_3);
      #line 2193 
      break;
      #line 2195 
      case 1: 
              #line 2195 
      ;
      #line 2197 
      default_llseek(emg_26_resource_0,emg_26_emg_param_1_0,emg_26_emg_param_2_1);
      #line 2199 
      break;
      #line 2201 
      case 2: 
              #line 2201 
      ;
      #line 2208 
      __VERIFIER_assume(emg_26_size_cnt <= 2147479552UL);
      #line 2209 
      emg_26_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2209 
      emg_26_emg_param_1_4 = emg_26_emg_param_1_4;
      #line 2210 
      emg_26_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2210 
      emg_26_emg_param_3_5 = emg_26_emg_param_3_5;
      #line 2214 
      if (emg_26_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2215 
        (*(emg_26_container->write))(emg_26_resource_0,emg_26_emg_param_1_4,emg_26_size_cnt,emg_26_emg_param_3_5);
      #line 2220 
      ldv_free((void *)emg_26_emg_param_1_4);
      #line 2221 
      ldv_free((void *)emg_26_emg_param_3_5);
      #line 2223 
      break;
      #line 2225 
      default: 
               #line 2225 
      ;
      #line 2225 
      __VERIFIER_assume(0);
    }
    #line 2228 
    if (emg_repeat_cnt_call_26 > 0) {
      #line 2229 
      emg_repeat_cnt_call_26 --;
      #line 2231 
      goto emg_call_26;
    }
    else 
         #line 2233 
         __VERIFIER_assume(0);
  }
  else {
    #line 2239 
    if (emg_26_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2240 
      (*(emg_26_container->release))(emg_26_resource_1,emg_26_resource_0);
    #line 2244 
    if (emg_repeat_cnt_main_26_1 > 0) {
      #line 2245 
      emg_repeat_cnt_main_26_1 --;
      #line 2247 
      goto emg_main_26;
    }
    else 
         #line 2249 
         __VERIFIER_assume(0);
  }
  #line 2255 
  return (void *)0;
  #line 2258 
  emg_main_26: 
               #line 2258 
  ;
  #line 2259 
  if (ldv_undef_int() != 0) {
    #line 2261 
    emg_26_ret = (*emg_alias_simple_open)(emg_26_resource_1,emg_26_resource_0);
    #line 2266 
    emg_26_ret = ldv_filter_err_code(emg_26_ret);
    #line 2269 
    if (ldv_undef_int() != 0) {
      #line 2271 
      __VERIFIER_assume(emg_26_ret == 0);
      #line 2275 
      goto emg_call_26;
    }
    else {
      #line 2280 
      __VERIFIER_assume(emg_26_ret != 0);
      #line 2283 
      if (emg_repeat_cnt_main_26_0 > 0) {
        #line 2284 
        emg_repeat_cnt_main_26_0 --;
        #line 2286 
        goto emg_main_26;
      }
      else 
           #line 2288 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2295 
       ldv_free((void *)emg_26_resource_0);
  #line 2303 
  return (void *)0;
}

#line 2308  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_regdump(void *arg0)
{
  #line 2311 
  struct file_operations *emg_27_container;
  #line 2312 
  long long emg_27_emg_param_1_0;
  #line 2313 
  char *emg_27_emg_param_1_2;
  #line 2314 
  char *emg_27_emg_param_1_4;
  #line 2315 
  int emg_27_emg_param_2_1;
  #line 2316 
  long long *emg_27_emg_param_3_3;
  #line 2317 
  long long *emg_27_emg_param_3_5;
  #line 2318 
  struct file *emg_27_resource_0;
  #line 2319 
  struct inode *emg_27_resource_1;
  #line 2320 
  int emg_27_ret;
  #line 2321 
  unsigned long emg_27_size_cnt;
  #line 2322 
  int emg_repeat_cnt_main_27_0 = 1;
  #line 2323 
  int emg_repeat_cnt_main_27_1 = 1;
  #line 2324 
  int emg_repeat_cnt_call_27 = 1;
  #line 2326 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 2330 
  emg_27_ret = ldv_undef_int();
  #line 2331 
  emg_27_container = emg_alias_fops_regdump;
  #line 2332 
  emg_27_ret = ldv_undef_int();
  #line 2334 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_regdump);
  #line 2336 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 2337 
    emg_27_container = data->arg0;
    #line 2338 
    ldv_free((void *)data);
  }
  #line 2343 
  emg_27_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2344 
  emg_27_size_cnt = (unsigned long)ldv_undef_int();
  #line 2348 
  goto emg_main_27;
  #line 2352 
  return (void *)0;
  #line 2355 
  emg_call_27: 
               #line 2355 
  ;
  #line 2356 
  if (ldv_undef_int() != 0) {
    #line 2357 
    switch (ldv_undef_int()) {
      #line 2358 
      case 0: 
              #line 2358 
      ;
      #line 2360 
      emg_27_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2360 
      emg_27_emg_param_1_2 = emg_27_emg_param_1_2;
      #line 2361 
      emg_27_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2361 
      emg_27_emg_param_3_3 = emg_27_emg_param_3_3;
      #line 2365 
      emg_wrapper_ath9k_debugfs_read_buf(emg_27_resource_0,emg_27_emg_param_1_2,emg_27_size_cnt,emg_27_emg_param_3_3);
      #line 2369 
      ldv_free((void *)emg_27_emg_param_1_2);
      #line 2370 
      ldv_free((void *)emg_27_emg_param_3_3);
      #line 2372 
      break;
      #line 2374 
      case 1: 
              #line 2374 
      ;
      #line 2376 
      default_llseek(emg_27_resource_0,emg_27_emg_param_1_0,emg_27_emg_param_2_1);
      #line 2378 
      break;
      #line 2380 
      case 2: 
              #line 2380 
      ;
      #line 2387 
      __VERIFIER_assume(emg_27_size_cnt <= 2147479552UL);
      #line 2388 
      emg_27_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2388 
      emg_27_emg_param_1_4 = emg_27_emg_param_1_4;
      #line 2389 
      emg_27_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2389 
      emg_27_emg_param_3_5 = emg_27_emg_param_3_5;
      #line 2393 
      if (emg_27_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2394 
        (*(emg_27_container->write))(emg_27_resource_0,emg_27_emg_param_1_4,emg_27_size_cnt,emg_27_emg_param_3_5);
      #line 2399 
      ldv_free((void *)emg_27_emg_param_1_4);
      #line 2400 
      ldv_free((void *)emg_27_emg_param_3_5);
      #line 2402 
      break;
      #line 2404 
      default: 
               #line 2404 
      ;
      #line 2404 
      __VERIFIER_assume(0);
    }
    #line 2407 
    if (emg_repeat_cnt_call_27 > 0) {
      #line 2408 
      emg_repeat_cnt_call_27 --;
      #line 2410 
      goto emg_call_27;
    }
    else 
         #line 2412 
         __VERIFIER_assume(0);
  }
  else {
    #line 2418 
    emg_wrapper_ath9k_debugfs_release_buf(emg_27_resource_1,emg_27_resource_0);
    #line 2421 
    if (emg_repeat_cnt_main_27_1 > 0) {
      #line 2422 
      emg_repeat_cnt_main_27_1 --;
      #line 2424 
      goto emg_main_27;
    }
    else 
         #line 2426 
         __VERIFIER_assume(0);
  }
  #line 2432 
  return (void *)0;
  #line 2435 
  emg_main_27: 
               #line 2435 
  ;
  #line 2436 
  if (ldv_undef_int() != 0) {
    #line 2438 
    emg_27_ret = emg_wrapper_open_file_regdump(emg_27_resource_1,emg_27_resource_0);
    #line 2443 
    emg_27_ret = ldv_filter_err_code(emg_27_ret);
    #line 2446 
    if (ldv_undef_int() != 0) {
      #line 2448 
      __VERIFIER_assume(emg_27_ret == 0);
      #line 2452 
      goto emg_call_27;
    }
    else {
      #line 2457 
      __VERIFIER_assume(emg_27_ret != 0);
      #line 2460 
      if (emg_repeat_cnt_main_27_0 > 0) {
        #line 2461 
        emg_repeat_cnt_main_27_0 --;
        #line 2463 
        goto emg_main_27;
      }
      else 
           #line 2465 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2472 
       ldv_free((void *)emg_27_resource_0);
  #line 2480 
  return (void *)0;
}

#line 2485  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_regidx(void *arg0)
{
  #line 2488 
  struct file_operations *emg_28_container;
  #line 2489 
  long long emg_28_emg_param_1_0;
  #line 2490 
  char *emg_28_emg_param_1_2;
  #line 2491 
  char *emg_28_emg_param_1_4;
  #line 2492 
  int emg_28_emg_param_2_1;
  #line 2493 
  long long *emg_28_emg_param_3_3;
  #line 2494 
  long long *emg_28_emg_param_3_5;
  #line 2495 
  struct file *emg_28_resource_0;
  #line 2496 
  struct inode *emg_28_resource_1;
  #line 2497 
  int emg_28_ret;
  #line 2498 
  unsigned long emg_28_size_cnt;
  #line 2499 
  int emg_repeat_cnt_main_28_0 = 1;
  #line 2500 
  int emg_repeat_cnt_main_28_1 = 1;
  #line 2501 
  int emg_repeat_cnt_call_28 = 1;
  #line 2503 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 2507 
  emg_28_ret = ldv_undef_int();
  #line 2508 
  emg_28_container = emg_alias_fops_regidx;
  #line 2509 
  emg_28_ret = ldv_undef_int();
  #line 2511 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_regidx);
  #line 2513 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 2514 
    emg_28_container = data->arg0;
    #line 2515 
    ldv_free((void *)data);
  }
  #line 2520 
  emg_28_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2521 
  emg_28_size_cnt = (unsigned long)ldv_undef_int();
  #line 2525 
  goto emg_main_28;
  #line 2529 
  return (void *)0;
  #line 2532 
  emg_call_28: 
               #line 2532 
  ;
  #line 2533 
  if (ldv_undef_int() != 0) {
    #line 2534 
    switch (ldv_undef_int()) {
      #line 2535 
      case 0: 
              #line 2535 
      ;
      #line 2537 
      emg_28_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2537 
      emg_28_emg_param_1_2 = emg_28_emg_param_1_2;
      #line 2538 
      emg_28_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2538 
      emg_28_emg_param_3_3 = emg_28_emg_param_3_3;
      #line 2542 
      emg_wrapper_read_file_regidx(emg_28_resource_0,emg_28_emg_param_1_2,emg_28_size_cnt,emg_28_emg_param_3_3);
      #line 2546 
      ldv_free((void *)emg_28_emg_param_1_2);
      #line 2547 
      ldv_free((void *)emg_28_emg_param_3_3);
      #line 2549 
      break;
      #line 2551 
      case 1: 
              #line 2551 
      ;
      #line 2553 
      default_llseek(emg_28_resource_0,emg_28_emg_param_1_0,emg_28_emg_param_2_1);
      #line 2555 
      break;
      #line 2557 
      case 2: 
              #line 2557 
      ;
      #line 2564 
      __VERIFIER_assume(emg_28_size_cnt <= 2147479552UL);
      #line 2565 
      emg_28_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2565 
      emg_28_emg_param_1_4 = emg_28_emg_param_1_4;
      #line 2566 
      emg_28_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2566 
      emg_28_emg_param_3_5 = emg_28_emg_param_3_5;
      #line 2570 
      emg_wrapper_write_file_regidx(emg_28_resource_0,emg_28_emg_param_1_4,emg_28_size_cnt,emg_28_emg_param_3_5);
      #line 2574 
      ldv_free((void *)emg_28_emg_param_1_4);
      #line 2575 
      ldv_free((void *)emg_28_emg_param_3_5);
      #line 2577 
      break;
      #line 2579 
      default: 
               #line 2579 
      ;
      #line 2579 
      __VERIFIER_assume(0);
    }
    #line 2582 
    if (emg_repeat_cnt_call_28 > 0) {
      #line 2583 
      emg_repeat_cnt_call_28 --;
      #line 2585 
      goto emg_call_28;
    }
    else 
         #line 2587 
         __VERIFIER_assume(0);
  }
  else {
    #line 2593 
    if (emg_28_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2594 
      (*(emg_28_container->release))(emg_28_resource_1,emg_28_resource_0);
    #line 2598 
    if (emg_repeat_cnt_main_28_0 > 0) {
      #line 2599 
      emg_repeat_cnt_main_28_0 --;
      #line 2601 
      goto emg_main_28;
    }
    else 
         #line 2603 
         __VERIFIER_assume(0);
  }
  #line 2609 
  return (void *)0;
  #line 2612 
  emg_main_28: 
               #line 2612 
  ;
  #line 2613 
  if (ldv_undef_int() != 0) {
    #line 2615 
    emg_28_ret = (*emg_alias_simple_open)(emg_28_resource_1,emg_28_resource_0);
    #line 2620 
    emg_28_ret = ldv_filter_err_code(emg_28_ret);
    #line 2623 
    if (ldv_undef_int() != 0) {
      #line 2625 
      __VERIFIER_assume(emg_28_ret == 0);
      #line 2629 
      goto emg_call_28;
    }
    else {
      #line 2634 
      __VERIFIER_assume(emg_28_ret != 0);
      #line 2637 
      if (emg_repeat_cnt_main_28_1 > 0) {
        #line 2638 
        emg_repeat_cnt_main_28_1 --;
        #line 2640 
        goto emg_main_28;
      }
      else 
           #line 2642 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2649 
       ldv_free((void *)emg_28_resource_0);
  #line 2657 
  return (void *)0;
}

#line 2662  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_regval(void *arg0)
{
  #line 2665 
  struct file_operations *emg_29_container;
  #line 2666 
  long long emg_29_emg_param_1_0;
  #line 2667 
  char *emg_29_emg_param_1_2;
  #line 2668 
  char *emg_29_emg_param_1_4;
  #line 2669 
  int emg_29_emg_param_2_1;
  #line 2670 
  long long *emg_29_emg_param_3_3;
  #line 2671 
  long long *emg_29_emg_param_3_5;
  #line 2672 
  struct file *emg_29_resource_0;
  #line 2673 
  struct inode *emg_29_resource_1;
  #line 2674 
  int emg_29_ret;
  #line 2675 
  unsigned long emg_29_size_cnt;
  #line 2676 
  int emg_repeat_cnt_main_29_0 = 1;
  #line 2677 
  int emg_repeat_cnt_call_29 = 1;
  #line 2678 
  int emg_repeat_cnt_main_29_1 = 1;
  #line 2680 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 2684 
  emg_29_ret = ldv_undef_int();
  #line 2685 
  emg_29_container = emg_alias_fops_regval;
  #line 2686 
  emg_29_ret = ldv_undef_int();
  #line 2688 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_regval);
  #line 2690 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 2691 
    emg_29_container = data->arg0;
    #line 2692 
    ldv_free((void *)data);
  }
  #line 2697 
  emg_29_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2698 
  emg_29_size_cnt = (unsigned long)ldv_undef_int();
  #line 2702 
  goto emg_main_29;
  #line 2706 
  return (void *)0;
  #line 2709 
  emg_call_29: 
               #line 2709 
  ;
  #line 2710 
  if (ldv_undef_int() != 0) {
    #line 2711 
    switch (ldv_undef_int()) {
      #line 2712 
      case 0: 
              #line 2712 
      ;
      #line 2714 
      emg_29_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2714 
      emg_29_emg_param_1_2 = emg_29_emg_param_1_2;
      #line 2715 
      emg_29_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2715 
      emg_29_emg_param_3_3 = emg_29_emg_param_3_3;
      #line 2719 
      emg_wrapper_read_file_regval(emg_29_resource_0,emg_29_emg_param_1_2,emg_29_size_cnt,emg_29_emg_param_3_3);
      #line 2723 
      ldv_free((void *)emg_29_emg_param_1_2);
      #line 2724 
      ldv_free((void *)emg_29_emg_param_3_3);
      #line 2726 
      break;
      #line 2728 
      case 1: 
              #line 2728 
      ;
      #line 2730 
      default_llseek(emg_29_resource_0,emg_29_emg_param_1_0,emg_29_emg_param_2_1);
      #line 2732 
      break;
      #line 2734 
      case 2: 
              #line 2734 
      ;
      #line 2741 
      __VERIFIER_assume(emg_29_size_cnt <= 2147479552UL);
      #line 2742 
      emg_29_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2742 
      emg_29_emg_param_1_4 = emg_29_emg_param_1_4;
      #line 2743 
      emg_29_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2743 
      emg_29_emg_param_3_5 = emg_29_emg_param_3_5;
      #line 2747 
      emg_wrapper_write_file_regval(emg_29_resource_0,emg_29_emg_param_1_4,emg_29_size_cnt,emg_29_emg_param_3_5);
      #line 2751 
      ldv_free((void *)emg_29_emg_param_1_4);
      #line 2752 
      ldv_free((void *)emg_29_emg_param_3_5);
      #line 2754 
      break;
      #line 2756 
      default: 
               #line 2756 
      ;
      #line 2756 
      __VERIFIER_assume(0);
    }
    #line 2759 
    if (emg_repeat_cnt_call_29 > 0) {
      #line 2760 
      emg_repeat_cnt_call_29 --;
      #line 2762 
      goto emg_call_29;
    }
    else 
         #line 2764 
         __VERIFIER_assume(0);
  }
  else {
    #line 2770 
    if (emg_29_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2771 
      (*(emg_29_container->release))(emg_29_resource_1,emg_29_resource_0);
    #line 2775 
    if (emg_repeat_cnt_main_29_0 > 0) {
      #line 2776 
      emg_repeat_cnt_main_29_0 --;
      #line 2778 
      goto emg_main_29;
    }
    else 
         #line 2780 
         __VERIFIER_assume(0);
  }
  #line 2786 
  return (void *)0;
  #line 2789 
  emg_main_29: 
               #line 2789 
  ;
  #line 2790 
  if (ldv_undef_int() != 0) {
    #line 2792 
    emg_29_ret = (*emg_alias_simple_open)(emg_29_resource_1,emg_29_resource_0);
    #line 2797 
    emg_29_ret = ldv_filter_err_code(emg_29_ret);
    #line 2800 
    if (ldv_undef_int() != 0) {
      #line 2802 
      __VERIFIER_assume(emg_29_ret == 0);
      #line 2806 
      goto emg_call_29;
    }
    else {
      #line 2811 
      __VERIFIER_assume(emg_29_ret != 0);
      #line 2814 
      if (emg_repeat_cnt_main_29_1 > 0) {
        #line 2815 
        emg_repeat_cnt_main_29_1 --;
        #line 2817 
        goto emg_main_29;
      }
      else 
           #line 2819 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2826 
       ldv_free((void *)emg_29_resource_0);
  #line 2834 
  return (void *)0;
}

#line 2839  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_simulate_radar(void *arg0)
{
  #line 2842 
  struct file_operations *emg_30_container;
  #line 2843 
  long long emg_30_emg_param_1_0;
  #line 2844 
  char *emg_30_emg_param_1_2;
  #line 2845 
  int emg_30_emg_param_2_1;
  #line 2846 
  long long *emg_30_emg_param_3_3;
  #line 2847 
  struct file *emg_30_resource_0;
  #line 2848 
  struct inode *emg_30_resource_1;
  #line 2849 
  int emg_30_ret;
  #line 2850 
  unsigned long emg_30_size_cnt;
  #line 2851 
  int emg_repeat_cnt_main_30_1 = 1;
  #line 2852 
  int emg_repeat_cnt_main_30_0 = 1;
  #line 2853 
  int emg_repeat_cnt_call_30 = 1;
  #line 2855 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 2859 
  emg_30_ret = ldv_undef_int();
  #line 2860 
  emg_30_container = emg_alias_fops_simulate_radar;
  #line 2861 
  emg_30_ret = ldv_undef_int();
  #line 2863 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_simulate_radar);
  #line 2865 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 2866 
    emg_30_container = data->arg0;
    #line 2867 
    ldv_free((void *)data);
  }
  #line 2872 
  emg_30_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2873 
  emg_30_size_cnt = (unsigned long)ldv_undef_int();
  #line 2877 
  goto emg_main_30;
  #line 2881 
  return (void *)0;
  #line 2884 
  emg_call_30: 
               #line 2884 
  ;
  #line 2885 
  if (ldv_undef_int() != 0) {
    #line 2886 
    if (ldv_undef_int() != 0) 
                              #line 2888 
                              default_llseek(emg_30_resource_0,emg_30_emg_param_1_0,emg_30_emg_param_2_1);
    else {
      #line 2897 
      __VERIFIER_assume(emg_30_size_cnt <= 2147479552UL);
      #line 2898 
      emg_30_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2898 
      emg_30_emg_param_1_2 = emg_30_emg_param_1_2;
      #line 2899 
      emg_30_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2899 
      emg_30_emg_param_3_3 = emg_30_emg_param_3_3;
      #line 2903 
      emg_wrapper_write_file_simulate_radar(emg_30_resource_0,emg_30_emg_param_1_2,emg_30_size_cnt,emg_30_emg_param_3_3);
      #line 2907 
      ldv_free((void *)emg_30_emg_param_1_2);
      #line 2908 
      ldv_free((void *)emg_30_emg_param_3_3);
    }
    #line 2912 
    if (emg_repeat_cnt_call_30 > 0) {
      #line 2913 
      emg_repeat_cnt_call_30 --;
      #line 2915 
      goto emg_call_30;
    }
    else 
         #line 2917 
         __VERIFIER_assume(0);
  }
  else {
    #line 2923 
    if (emg_30_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2924 
      (*(emg_30_container->release))(emg_30_resource_1,emg_30_resource_0);
    #line 2928 
    if (emg_repeat_cnt_main_30_0 > 0) {
      #line 2929 
      emg_repeat_cnt_main_30_0 --;
      #line 2931 
      goto emg_main_30;
    }
    else 
         #line 2933 
         __VERIFIER_assume(0);
  }
  #line 2939 
  return (void *)0;
  #line 2942 
  emg_main_30: 
               #line 2942 
  ;
  #line 2943 
  if (ldv_undef_int() != 0) {
    #line 2945 
    emg_30_ret = (*emg_alias_simple_open)(emg_30_resource_1,emg_30_resource_0);
    #line 2950 
    emg_30_ret = ldv_filter_err_code(emg_30_ret);
    #line 2953 
    if (ldv_undef_int() != 0) {
      #line 2955 
      __VERIFIER_assume(emg_30_ret == 0);
      #line 2959 
      goto emg_call_30;
    }
    else {
      #line 2964 
      __VERIFIER_assume(emg_30_ret != 0);
      #line 2967 
      if (emg_repeat_cnt_main_30_1 > 0) {
        #line 2968 
        emg_repeat_cnt_main_30_1 --;
        #line 2970 
        goto emg_main_30;
      }
      else 
           #line 2972 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2979 
       ldv_free((void *)emg_30_resource_0);
  #line 2987 
  return (void *)0;
}

#line 2992  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_tpc(void *arg0)
{
  #line 2995 
  struct file_operations *emg_31_container;
  #line 2996 
  long long emg_31_emg_param_1_0;
  #line 2997 
  char *emg_31_emg_param_1_2;
  #line 2998 
  char *emg_31_emg_param_1_4;
  #line 2999 
  int emg_31_emg_param_2_1;
  #line 3000 
  long long *emg_31_emg_param_3_3;
  #line 3001 
  long long *emg_31_emg_param_3_5;
  #line 3002 
  struct file *emg_31_resource_0;
  #line 3003 
  struct inode *emg_31_resource_1;
  #line 3004 
  int emg_31_ret;
  #line 3005 
  unsigned long emg_31_size_cnt;
  #line 3006 
  int emg_repeat_cnt_call_31 = 1;
  #line 3007 
  int emg_repeat_cnt_main_31_1 = 1;
  #line 3008 
  int emg_repeat_cnt_main_31_0 = 1;
  #line 3010 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 3014 
  emg_31_ret = ldv_undef_int();
  #line 3015 
  emg_31_container = emg_alias_fops_tpc;
  #line 3016 
  emg_31_ret = ldv_undef_int();
  #line 3018 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_tpc);
  #line 3020 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 3021 
    emg_31_container = data->arg0;
    #line 3022 
    ldv_free((void *)data);
  }
  #line 3027 
  emg_31_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3028 
  emg_31_size_cnt = (unsigned long)ldv_undef_int();
  #line 3032 
  goto emg_main_31;
  #line 3036 
  return (void *)0;
  #line 3039 
  emg_call_31: 
               #line 3039 
  ;
  #line 3040 
  if (ldv_undef_int() != 0) {
    #line 3041 
    switch (ldv_undef_int()) {
      #line 3042 
      case 0: 
              #line 3042 
      ;
      #line 3044 
      emg_31_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3044 
      emg_31_emg_param_1_2 = emg_31_emg_param_1_2;
      #line 3045 
      emg_31_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3045 
      emg_31_emg_param_3_3 = emg_31_emg_param_3_3;
      #line 3049 
      emg_wrapper_read_file_tpc(emg_31_resource_0,emg_31_emg_param_1_2,emg_31_size_cnt,emg_31_emg_param_3_3);
      #line 3053 
      ldv_free((void *)emg_31_emg_param_1_2);
      #line 3054 
      ldv_free((void *)emg_31_emg_param_3_3);
      #line 3056 
      break;
      #line 3058 
      case 1: 
              #line 3058 
      ;
      #line 3060 
      default_llseek(emg_31_resource_0,emg_31_emg_param_1_0,emg_31_emg_param_2_1);
      #line 3062 
      break;
      #line 3064 
      case 2: 
              #line 3064 
      ;
      #line 3071 
      __VERIFIER_assume(emg_31_size_cnt <= 2147479552UL);
      #line 3072 
      emg_31_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3072 
      emg_31_emg_param_1_4 = emg_31_emg_param_1_4;
      #line 3073 
      emg_31_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3073 
      emg_31_emg_param_3_5 = emg_31_emg_param_3_5;
      #line 3077 
      emg_wrapper_write_file_tpc(emg_31_resource_0,emg_31_emg_param_1_4,emg_31_size_cnt,emg_31_emg_param_3_5);
      #line 3081 
      ldv_free((void *)emg_31_emg_param_1_4);
      #line 3082 
      ldv_free((void *)emg_31_emg_param_3_5);
      #line 3084 
      break;
      #line 3086 
      default: 
               #line 3086 
      ;
      #line 3086 
      __VERIFIER_assume(0);
    }
    #line 3089 
    if (emg_repeat_cnt_call_31 > 0) {
      #line 3090 
      emg_repeat_cnt_call_31 --;
      #line 3092 
      goto emg_call_31;
    }
    else 
         #line 3094 
         __VERIFIER_assume(0);
  }
  else {
    #line 3100 
    if (emg_31_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3101 
      (*(emg_31_container->release))(emg_31_resource_1,emg_31_resource_0);
    #line 3105 
    if (emg_repeat_cnt_main_31_0 > 0) {
      #line 3106 
      emg_repeat_cnt_main_31_0 --;
      #line 3108 
      goto emg_main_31;
    }
    else 
         #line 3110 
         __VERIFIER_assume(0);
  }
  #line 3116 
  return (void *)0;
  #line 3119 
  emg_main_31: 
               #line 3119 
  ;
  #line 3120 
  if (ldv_undef_int() != 0) {
    #line 3122 
    emg_31_ret = (*emg_alias_simple_open)(emg_31_resource_1,emg_31_resource_0);
    #line 3127 
    emg_31_ret = ldv_filter_err_code(emg_31_ret);
    #line 3130 
    if (ldv_undef_int() != 0) {
      #line 3132 
      __VERIFIER_assume(emg_31_ret == 0);
      #line 3136 
      goto emg_call_31;
    }
    else {
      #line 3141 
      __VERIFIER_assume(emg_31_ret != 0);
      #line 3144 
      if (emg_repeat_cnt_main_31_1 > 0) {
        #line 3145 
        emg_repeat_cnt_main_31_1 --;
        #line 3147 
        goto emg_main_31;
      }
      else 
           #line 3149 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3156 
       ldv_free((void *)emg_31_resource_0);
  #line 3164 
  return (void *)0;
}

#line 3169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_tx99(void *arg0)
{
  #line 3172 
  struct file_operations *emg_32_container;
  #line 3173 
  long long emg_32_emg_param_1_0;
  #line 3174 
  char *emg_32_emg_param_1_2;
  #line 3175 
  char *emg_32_emg_param_1_4;
  #line 3176 
  int emg_32_emg_param_2_1;
  #line 3177 
  long long *emg_32_emg_param_3_3;
  #line 3178 
  long long *emg_32_emg_param_3_5;
  #line 3179 
  struct file *emg_32_resource_0;
  #line 3180 
  struct inode *emg_32_resource_1;
  #line 3181 
  int emg_32_ret;
  #line 3182 
  unsigned long emg_32_size_cnt;
  #line 3183 
  int emg_repeat_cnt_call_32 = 1;
  #line 3184 
  int emg_repeat_cnt_main_32_0 = 1;
  #line 3185 
  int emg_repeat_cnt_main_32_1 = 1;
  #line 3187 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 3191 
  emg_32_ret = ldv_undef_int();
  #line 3192 
  emg_32_container = emg_alias_fops_tx99;
  #line 3193 
  emg_32_ret = ldv_undef_int();
  #line 3195 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_tx99);
  #line 3197 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 3198 
    emg_32_container = data->arg0;
    #line 3199 
    ldv_free((void *)data);
  }
  #line 3204 
  emg_32_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3205 
  emg_32_size_cnt = (unsigned long)ldv_undef_int();
  #line 3209 
  goto emg_main_32;
  #line 3213 
  return (void *)0;
  #line 3216 
  emg_call_32: 
               #line 3216 
  ;
  #line 3217 
  if (ldv_undef_int() != 0) {
    #line 3218 
    switch (ldv_undef_int()) {
      #line 3219 
      case 0: 
              #line 3219 
      ;
      #line 3221 
      emg_32_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3221 
      emg_32_emg_param_1_2 = emg_32_emg_param_1_2;
      #line 3222 
      emg_32_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3222 
      emg_32_emg_param_3_3 = emg_32_emg_param_3_3;
      #line 3226 
      emg_wrapper_read_file_tx99(emg_32_resource_0,emg_32_emg_param_1_2,emg_32_size_cnt,emg_32_emg_param_3_3);
      #line 3230 
      ldv_free((void *)emg_32_emg_param_1_2);
      #line 3231 
      ldv_free((void *)emg_32_emg_param_3_3);
      #line 3233 
      break;
      #line 3235 
      case 1: 
              #line 3235 
      ;
      #line 3237 
      default_llseek(emg_32_resource_0,emg_32_emg_param_1_0,emg_32_emg_param_2_1);
      #line 3239 
      break;
      #line 3241 
      case 2: 
              #line 3241 
      ;
      #line 3248 
      __VERIFIER_assume(emg_32_size_cnt <= 2147479552UL);
      #line 3249 
      emg_32_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3249 
      emg_32_emg_param_1_4 = emg_32_emg_param_1_4;
      #line 3250 
      emg_32_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3250 
      emg_32_emg_param_3_5 = emg_32_emg_param_3_5;
      #line 3254 
      emg_wrapper_write_file_tx99(emg_32_resource_0,emg_32_emg_param_1_4,emg_32_size_cnt,emg_32_emg_param_3_5);
      #line 3258 
      ldv_free((void *)emg_32_emg_param_1_4);
      #line 3259 
      ldv_free((void *)emg_32_emg_param_3_5);
      #line 3261 
      break;
      #line 3263 
      default: 
               #line 3263 
      ;
      #line 3263 
      __VERIFIER_assume(0);
    }
    #line 3266 
    if (emg_repeat_cnt_call_32 > 0) {
      #line 3267 
      emg_repeat_cnt_call_32 --;
      #line 3269 
      goto emg_call_32;
    }
    else 
         #line 3271 
         __VERIFIER_assume(0);
  }
  else {
    #line 3277 
    if (emg_32_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3278 
      (*(emg_32_container->release))(emg_32_resource_1,emg_32_resource_0);
    #line 3282 
    if (emg_repeat_cnt_main_32_0 > 0) {
      #line 3283 
      emg_repeat_cnt_main_32_0 --;
      #line 3285 
      goto emg_main_32;
    }
    else 
         #line 3287 
         __VERIFIER_assume(0);
  }
  #line 3293 
  return (void *)0;
  #line 3296 
  emg_main_32: 
               #line 3296 
  ;
  #line 3297 
  if (ldv_undef_int() != 0) {
    #line 3299 
    emg_32_ret = (*emg_alias_simple_open)(emg_32_resource_1,emg_32_resource_0);
    #line 3304 
    emg_32_ret = ldv_filter_err_code(emg_32_ret);
    #line 3307 
    if (ldv_undef_int() != 0) {
      #line 3309 
      __VERIFIER_assume(emg_32_ret == 0);
      #line 3313 
      goto emg_call_32;
    }
    else {
      #line 3318 
      __VERIFIER_assume(emg_32_ret != 0);
      #line 3321 
      if (emg_repeat_cnt_main_32_1 > 0) {
        #line 3322 
        emg_repeat_cnt_main_32_1 --;
        #line 3324 
        goto emg_main_32;
      }
      else 
           #line 3326 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3333 
       ldv_free((void *)emg_32_resource_0);
  #line 3341 
  return (void *)0;
}

#line 3346  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_tx99_power(void *arg0)
{
  #line 3349 
  struct file_operations *emg_33_container;
  #line 3350 
  long long emg_33_emg_param_1_0;
  #line 3351 
  char *emg_33_emg_param_1_2;
  #line 3352 
  char *emg_33_emg_param_1_4;
  #line 3353 
  int emg_33_emg_param_2_1;
  #line 3354 
  long long *emg_33_emg_param_3_3;
  #line 3355 
  long long *emg_33_emg_param_3_5;
  #line 3356 
  struct file *emg_33_resource_0;
  #line 3357 
  struct inode *emg_33_resource_1;
  #line 3358 
  int emg_33_ret;
  #line 3359 
  unsigned long emg_33_size_cnt;
  #line 3360 
  int emg_repeat_cnt_main_33_0 = 1;
  #line 3361 
  int emg_repeat_cnt_main_33_1 = 1;
  #line 3362 
  int emg_repeat_cnt_call_33 = 1;
  #line 3364 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 3368 
  emg_33_ret = ldv_undef_int();
  #line 3369 
  emg_33_container = emg_alias_fops_tx99_power;
  #line 3370 
  emg_33_ret = ldv_undef_int();
  #line 3372 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_tx99_power);
  #line 3374 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 3375 
    emg_33_container = data->arg0;
    #line 3376 
    ldv_free((void *)data);
  }
  #line 3381 
  emg_33_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3382 
  emg_33_size_cnt = (unsigned long)ldv_undef_int();
  #line 3386 
  goto emg_main_33;
  #line 3390 
  return (void *)0;
  #line 3393 
  emg_call_33: 
               #line 3393 
  ;
  #line 3394 
  if (ldv_undef_int() != 0) {
    #line 3395 
    switch (ldv_undef_int()) {
      #line 3396 
      case 0: 
              #line 3396 
      ;
      #line 3398 
      emg_33_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3398 
      emg_33_emg_param_1_2 = emg_33_emg_param_1_2;
      #line 3399 
      emg_33_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3399 
      emg_33_emg_param_3_3 = emg_33_emg_param_3_3;
      #line 3403 
      emg_wrapper_read_file_tx99_power(emg_33_resource_0,emg_33_emg_param_1_2,emg_33_size_cnt,emg_33_emg_param_3_3);
      #line 3407 
      ldv_free((void *)emg_33_emg_param_1_2);
      #line 3408 
      ldv_free((void *)emg_33_emg_param_3_3);
      #line 3410 
      break;
      #line 3412 
      case 1: 
              #line 3412 
      ;
      #line 3414 
      default_llseek(emg_33_resource_0,emg_33_emg_param_1_0,emg_33_emg_param_2_1);
      #line 3416 
      break;
      #line 3418 
      case 2: 
              #line 3418 
      ;
      #line 3425 
      __VERIFIER_assume(emg_33_size_cnt <= 2147479552UL);
      #line 3426 
      emg_33_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3426 
      emg_33_emg_param_1_4 = emg_33_emg_param_1_4;
      #line 3427 
      emg_33_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3427 
      emg_33_emg_param_3_5 = emg_33_emg_param_3_5;
      #line 3431 
      emg_wrapper_write_file_tx99_power(emg_33_resource_0,emg_33_emg_param_1_4,emg_33_size_cnt,emg_33_emg_param_3_5);
      #line 3435 
      ldv_free((void *)emg_33_emg_param_1_4);
      #line 3436 
      ldv_free((void *)emg_33_emg_param_3_5);
      #line 3438 
      break;
      #line 3440 
      default: 
               #line 3440 
      ;
      #line 3440 
      __VERIFIER_assume(0);
    }
    #line 3443 
    if (emg_repeat_cnt_call_33 > 0) {
      #line 3444 
      emg_repeat_cnt_call_33 --;
      #line 3446 
      goto emg_call_33;
    }
    else 
         #line 3448 
         __VERIFIER_assume(0);
  }
  else {
    #line 3454 
    if (emg_33_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3455 
      (*(emg_33_container->release))(emg_33_resource_1,emg_33_resource_0);
    #line 3459 
    if (emg_repeat_cnt_main_33_0 > 0) {
      #line 3460 
      emg_repeat_cnt_main_33_0 --;
      #line 3462 
      goto emg_main_33;
    }
    else 
         #line 3464 
         __VERIFIER_assume(0);
  }
  #line 3470 
  return (void *)0;
  #line 3473 
  emg_main_33: 
               #line 3473 
  ;
  #line 3474 
  if (ldv_undef_int() != 0) {
    #line 3476 
    emg_33_ret = (*emg_alias_simple_open)(emg_33_resource_1,emg_33_resource_0);
    #line 3481 
    emg_33_ret = ldv_filter_err_code(emg_33_ret);
    #line 3484 
    if (ldv_undef_int() != 0) {
      #line 3486 
      __VERIFIER_assume(emg_33_ret == 0);
      #line 3490 
      goto emg_call_33;
    }
    else {
      #line 3495 
      __VERIFIER_assume(emg_33_ret != 0);
      #line 3498 
      if (emg_repeat_cnt_main_33_1 > 0) {
        #line 3499 
        emg_repeat_cnt_main_33_1 --;
        #line 3501 
        goto emg_main_33;
      }
      else 
           #line 3503 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3510 
       ldv_free((void *)emg_33_resource_0);
  #line 3518 
  return (void *)0;
}

#line 3523  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_wow(void *arg0)
{
  #line 3526 
  struct file_operations *emg_34_container;
  #line 3527 
  long long emg_34_emg_param_1_0;
  #line 3528 
  char *emg_34_emg_param_1_2;
  #line 3529 
  char *emg_34_emg_param_1_4;
  #line 3530 
  int emg_34_emg_param_2_1;
  #line 3531 
  long long *emg_34_emg_param_3_3;
  #line 3532 
  long long *emg_34_emg_param_3_5;
  #line 3533 
  struct file *emg_34_resource_0;
  #line 3534 
  struct inode *emg_34_resource_1;
  #line 3535 
  int emg_34_ret;
  #line 3536 
  unsigned long emg_34_size_cnt;
  #line 3537 
  int emg_repeat_cnt_call_34 = 1;
  #line 3538 
  int emg_repeat_cnt_main_34_1 = 1;
  #line 3539 
  int emg_repeat_cnt_main_34_0 = 1;
  #line 3541 
  struct emg_struct_character_driver_scenario_fops_ackto_17 *data = (struct emg_struct_character_driver_scenario_fops_ackto_17 *)arg0;
  #line 3545 
  emg_34_ret = ldv_undef_int();
  #line 3546 
  emg_34_container = emg_alias_fops_wow;
  #line 3547 
  emg_34_ret = ldv_undef_int();
  #line 3549 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_wow);
  #line 3551 
  if (data != (struct emg_struct_character_driver_scenario_fops_ackto_17 *)0) {
    #line 3552 
    emg_34_container = data->arg0;
    #line 3553 
    ldv_free((void *)data);
  }
  #line 3558 
  emg_34_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3559 
  emg_34_size_cnt = (unsigned long)ldv_undef_int();
  #line 3563 
  goto emg_main_34;
  #line 3567 
  return (void *)0;
  #line 3570 
  emg_call_34: 
               #line 3570 
  ;
  #line 3571 
  if (ldv_undef_int() != 0) {
    #line 3572 
    switch (ldv_undef_int()) {
      #line 3573 
      case 0: 
              #line 3573 
      ;
      #line 3575 
      emg_34_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3575 
      emg_34_emg_param_1_2 = emg_34_emg_param_1_2;
      #line 3576 
      emg_34_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3576 
      emg_34_emg_param_3_3 = emg_34_emg_param_3_3;
      #line 3580 
      emg_wrapper_read_file_wow(emg_34_resource_0,emg_34_emg_param_1_2,emg_34_size_cnt,emg_34_emg_param_3_3);
      #line 3584 
      ldv_free((void *)emg_34_emg_param_1_2);
      #line 3585 
      ldv_free((void *)emg_34_emg_param_3_3);
      #line 3587 
      break;
      #line 3589 
      case 1: 
              #line 3589 
      ;
      #line 3591 
      default_llseek(emg_34_resource_0,emg_34_emg_param_1_0,emg_34_emg_param_2_1);
      #line 3593 
      break;
      #line 3595 
      case 2: 
              #line 3595 
      ;
      #line 3602 
      __VERIFIER_assume(emg_34_size_cnt <= 2147479552UL);
      #line 3603 
      emg_34_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3603 
      emg_34_emg_param_1_4 = emg_34_emg_param_1_4;
      #line 3604 
      emg_34_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3604 
      emg_34_emg_param_3_5 = emg_34_emg_param_3_5;
      #line 3608 
      emg_wrapper_write_file_wow(emg_34_resource_0,emg_34_emg_param_1_4,emg_34_size_cnt,emg_34_emg_param_3_5);
      #line 3612 
      ldv_free((void *)emg_34_emg_param_1_4);
      #line 3613 
      ldv_free((void *)emg_34_emg_param_3_5);
      #line 3615 
      break;
      #line 3617 
      default: 
               #line 3617 
      ;
      #line 3617 
      __VERIFIER_assume(0);
    }
    #line 3620 
    if (emg_repeat_cnt_call_34 > 0) {
      #line 3621 
      emg_repeat_cnt_call_34 --;
      #line 3623 
      goto emg_call_34;
    }
    else 
         #line 3625 
         __VERIFIER_assume(0);
  }
  else {
    #line 3631 
    if (emg_34_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 3632 
      (*(emg_34_container->release))(emg_34_resource_1,emg_34_resource_0);
    #line 3636 
    if (emg_repeat_cnt_main_34_0 > 0) {
      #line 3637 
      emg_repeat_cnt_main_34_0 --;
      #line 3639 
      goto emg_main_34;
    }
    else 
         #line 3641 
         __VERIFIER_assume(0);
  }
  #line 3647 
  return (void *)0;
  #line 3650 
  emg_main_34: 
               #line 3650 
  ;
  #line 3651 
  if (ldv_undef_int() != 0) {
    #line 3653 
    emg_34_ret = (*emg_alias_simple_open)(emg_34_resource_1,emg_34_resource_0);
    #line 3658 
    emg_34_ret = ldv_filter_err_code(emg_34_ret);
    #line 3661 
    if (ldv_undef_int() != 0) {
      #line 3663 
      __VERIFIER_assume(emg_34_ret == 0);
      #line 3667 
      goto emg_call_34;
    }
    else {
      #line 3672 
      __VERIFIER_assume(emg_34_ret != 0);
      #line 3675 
      if (emg_repeat_cnt_main_34_1 > 0) {
        #line 3676 
        emg_repeat_cnt_main_34_1 --;
        #line 3678 
        goto emg_main_34;
      }
      else 
           #line 3680 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3687 
       ldv_free((void *)emg_34_resource_0);
  #line 3695 
  return (void *)0;
}

#line 3700  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_ieee80211_ieee80211_scenario_ath9k_ops(void *arg0)
{
  #line 3703 
  struct ieee80211_vif *emg_35_emg_param_1_0;
  #line 3704 
  struct ieee80211_vif *emg_35_emg_param_1_1;
  #line 3705 
  unsigned int emg_35_emg_param_1_12;
  #line 3706 
  unsigned int emg_35_emg_param_1_13;
  #line 3707 
  struct ieee80211_vif *emg_35_emg_param_1_16;
  #line 3708 
  unsigned int *emg_35_emg_param_1_19;
  #line 3709 
  struct ieee80211_vif *emg_35_emg_param_1_21;
  #line 3710 
  struct ieee80211_vif *emg_35_emg_param_1_23;
  #line 3711 
  struct ieee80211_vif *emg_35_emg_param_1_26;
  #line 3712 
  struct ieee80211_low_level_stats *emg_35_emg_param_1_29;
  #line 3713 
  struct ieee80211_vif *emg_35_emg_param_1_3;
  #line 3714 
  int emg_35_emg_param_1_30;
  #line 3715 
  struct ieee80211_vif *emg_35_emg_param_1_32;
  #line 3716 
  struct ieee80211_vif *emg_35_emg_param_1_33;
  #line 3717 
  struct ieee80211_sta *emg_35_emg_param_1_35;
  #line 3718 
  struct ieee80211_vif *emg_35_emg_param_1_40;
  #line 3719 
  struct ieee80211_vif *emg_35_emg_param_1_41;
  #line 3720 
  unsigned int emg_35_emg_param_1_42;
  #line 3721 
  short emg_35_emg_param_1_44;
  #line 3722 
  enum set_key_cmd *emg_35_emg_param_1_45;
  #line 3723 
  struct ieee80211_vif *emg_35_emg_param_1_49;
  #line 3724 
  _Bool emg_35_emg_param_1_51;
  #line 3725 
  struct ieee80211_vif *emg_35_emg_param_1_52;
  #line 3726 
  struct ieee80211_vif *emg_35_emg_param_1_55;
  #line 3727 
  struct ieee80211_vif *emg_35_emg_param_1_58;
  #line 3728 
  struct ieee80211_vif *emg_35_emg_param_1_6;
  #line 3729 
  struct ieee80211_vif *emg_35_emg_param_1_62;
  #line 3730 
  struct ieee80211_vif *emg_35_emg_param_1_63;
  #line 3731 
  struct ieee80211_tx_control *emg_35_emg_param_1_65;
  #line 3732 
  struct ieee80211_txq *emg_35_emg_param_1_67;
  #line 3733 
  struct cfg80211_wowlan *emg_35_emg_param_1_68;
  #line 3734 
  struct ieee80211_vif *emg_35_emg_param_1_9;
  #line 3735 
  unsigned short emg_35_emg_param_2_10;
  #line 3736 
  unsigned int *emg_35_emg_param_2_14;
  #line 3737 
  unsigned int emg_35_emg_param_2_17;
  #line 3738 
  struct ieee80211_ampdu_params *emg_35_emg_param_2_2;
  #line 3739 
  unsigned int *emg_35_emg_param_2_20;
  #line 3740 
  int emg_35_emg_param_2_22;
  #line 3741 
  struct ethtool_stats *emg_35_emg_param_2_24;
  #line 3742 
  unsigned int emg_35_emg_param_2_27;
  #line 3743 
  struct survey_info *emg_35_emg_param_2_31;
  #line 3744 
  int *emg_35_emg_param_2_34;
  #line 3745 
  unsigned short emg_35_emg_param_2_36;
  #line 3746 
  struct ieee80211_bss_conf *emg_35_emg_param_2_4;
  #line 3747 
  unsigned int emg_35_emg_param_2_43;
  #line 3748 
  struct ieee80211_vif *emg_35_emg_param_2_46;
  #line 3749 
  unsigned long long emg_35_emg_param_2_50;
  #line 3750 
  struct ieee80211_sta *emg_35_emg_param_2_53;
  #line 3751 
  enum sta_notify_cmd *emg_35_emg_param_2_56;
  #line 3752 
  struct ieee80211_sta *emg_35_emg_param_2_59;
  #line 3753 
  unsigned char *emg_35_emg_param_2_64;
  #line 3754 
  struct sk_buff *emg_35_emg_param_2_66;
  #line 3755 
  enum nl80211_iftype *emg_35_emg_param_2_7;
  #line 3756 
  struct ieee80211_tx_queue_params *emg_35_emg_param_3_11;
  #line 3757 
  unsigned long long emg_35_emg_param_3_15;
  #line 3758 
  _Bool emg_35_emg_param_3_18;
  #line 3759 
  unsigned long long *emg_35_emg_param_3_25;
  #line 3760 
  unsigned char *emg_35_emg_param_3_28;
  #line 3761 
  int emg_35_emg_param_3_37;
  #line 3762 
  struct ieee80211_sta *emg_35_emg_param_3_47;
  #line 3763 
  unsigned int emg_35_emg_param_3_5;
  #line 3764 
  struct dentry *emg_35_emg_param_3_54;
  #line 3765 
  struct ieee80211_sta *emg_35_emg_param_3_57;
  #line 3766 
  enum ieee80211_sta_state *emg_35_emg_param_3_60;
  #line 3767 
  _Bool emg_35_emg_param_3_8;
  #line 3768 
  enum ieee80211_frame_release_type *emg_35_emg_param_4_38;
  #line 3769 
  struct ieee80211_key_conf *emg_35_emg_param_4_48;
  #line 3770 
  enum ieee80211_sta_state *emg_35_emg_param_4_61;
  #line 3771 
  _Bool emg_35_emg_param_5_39;
  #line 3772 
  struct ieee80211_hw *emg_35_resource;
  #line 3773 
  int emg_35_ret;
  #line 3774 
  int emg_repeat_cnt_main_35_1 = 1;
  #line 3775 
  int emg_repeat_cnt_started_35_1 = 1;
  #line 3776 
  int emg_repeat_cnt_started_35_0 = 1;
  #line 3777 
  int emg_repeat_cnt_main_35_0 = 1;
  #line 3779 
  struct emg_struct_ieee80211_scenario_ath9k_ops_35 *data = (struct emg_struct_ieee80211_scenario_ath9k_ops_35 *)arg0;
  #line 3783 
  emg_35_ret = ldv_undef_int();
  #line 3784 
  emg_35_ret = ldv_undef_int();
  #line 3787 
  if (data != (struct emg_struct_ieee80211_scenario_ath9k_ops_35 *)0) {
    #line 3788 
    emg_35_resource = data->arg0;
    #line 3789 
    ldv_free((void *)data);
  }
  #line 3794 
  goto emg_main_35;
  #line 3798 
  return (void *)0;
  #line 3801 
  emg_main_35: 
               #line 3801 
  ;
  #line 3802 
  if (ldv_undef_int() != 0) {
    #line 3805 
    rtnl_lock();
    #line 3809 
    emg_35_ret = emg_wrapper_ath9k_start(emg_35_resource);
    #line 3814 
    emg_35_ret = ldv_filter_err_code(emg_35_ret);
    #line 3815 
    rtnl_unlock();
    #line 3818 
    if (ldv_undef_int() != 0) {
      #line 3820 
      __VERIFIER_assume(emg_35_ret == 0);
      #line 3824 
      goto emg_started_35;
    }
    else 
         #line 3829 
         __VERIFIER_assume(emg_35_ret != 0);
    #line 3833 
    if (emg_repeat_cnt_main_35_1 > 0) {
      #line 3834 
      emg_repeat_cnt_main_35_1 --;
      #line 3836 
      goto emg_main_35;
    }
    else 
         #line 3838 
         __VERIFIER_assume(0);
  }
  #line 3848 
  return (void *)0;
  #line 3851 
  emg_started_35: 
                  #line 3851 
  ;
  #line 3852 
  switch (ldv_undef_int()) {
    #line 3853 
    case 0: 
            #line 3853 
    ;
    #line 3855 
    emg_35_emg_param_1_67 = (struct ieee80211_txq *)ldv_xmalloc_unknown_size(0UL);
    #line 3855 
    emg_35_emg_param_1_67 = emg_35_emg_param_1_67;
    #line 3859 
    ath9k_wake_tx_queue(emg_35_resource,emg_35_emg_param_1_67);
    #line 3863 
    ldv_free((void *)emg_35_emg_param_1_67);
    #line 3865 
    break;
    #line 3867 
    case 1: 
            #line 3867 
    ;
    #line 3869 
    emg_wrapper_ath9k_tx_last_beacon(emg_35_resource);
    #line 3871 
    break;
    #line 3873 
    case 2: 
            #line 3873 
    ;
    #line 3875 
    emg_wrapper_ath9k_tx_frames_pending(emg_35_resource);
    #line 3877 
    break;
    #line 3879 
    case 3: 
            #line 3879 
    ;
    #line 3881 
    emg_35_emg_param_1_65 = (struct ieee80211_tx_control *)ldv_xmalloc_unknown_size(0UL);
    #line 3881 
    emg_35_emg_param_1_65 = emg_35_emg_param_1_65;
    #line 3882 
    emg_35_emg_param_2_66 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 3882 
    emg_35_emg_param_2_66 = emg_35_emg_param_2_66;
    #line 3886 
    emg_wrapper_ath9k_tx(emg_35_resource,emg_35_emg_param_1_65,emg_35_emg_param_2_66);
    #line 3890 
    ldv_free((void *)emg_35_emg_param_1_65);
    #line 3891 
    ldv_free((void *)emg_35_emg_param_2_66);
    #line 3893 
    break;
    #line 3895 
    case 4: 
            #line 3895 
    ;
    #line 3897 
    emg_35_emg_param_1_63 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 3897 
    emg_35_emg_param_1_63 = emg_35_emg_param_1_63;
    #line 3898 
    emg_35_emg_param_2_64 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 3898 
    emg_35_emg_param_2_64 = emg_35_emg_param_2_64;
    #line 3902 
    emg_wrapper_ath9k_sw_scan_start(emg_35_resource,emg_35_emg_param_1_63,emg_35_emg_param_2_64);
    #line 3906 
    ldv_free((void *)emg_35_emg_param_1_63);
    #line 3907 
    ldv_free((void *)emg_35_emg_param_2_64);
    #line 3909 
    break;
    #line 3911 
    case 5: 
            #line 3911 
    ;
    #line 3913 
    emg_35_emg_param_1_62 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 3913 
    emg_35_emg_param_1_62 = emg_35_emg_param_1_62;
    #line 3917 
    emg_wrapper_ath9k_sw_scan_complete(emg_35_resource,emg_35_emg_param_1_62);
    #line 3921 
    ldv_free((void *)emg_35_emg_param_1_62);
    #line 3923 
    break;
    #line 3925 
    case 6: 
            #line 3925 
    ;
    #line 3927 
    emg_35_emg_param_1_58 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 3927 
    emg_35_emg_param_1_58 = emg_35_emg_param_1_58;
    #line 3928 
    emg_35_emg_param_2_59 = (struct ieee80211_sta *)ldv_xmalloc_unknown_size(0UL);
    #line 3928 
    emg_35_emg_param_2_59 = emg_35_emg_param_2_59;
    #line 3929 
    emg_35_emg_param_3_60 = (enum ieee80211_sta_state *)ldv_xmalloc_unknown_size(0UL);
    #line 3929 
    emg_35_emg_param_3_60 = emg_35_emg_param_3_60;
    #line 3930 
    emg_35_emg_param_4_61 = (enum ieee80211_sta_state *)ldv_xmalloc_unknown_size(0UL);
    #line 3930 
    emg_35_emg_param_4_61 = emg_35_emg_param_4_61;
    #line 3934 
    emg_wrapper_ath9k_sta_state(emg_35_resource,emg_35_emg_param_1_58,emg_35_emg_param_2_59,*emg_35_emg_param_3_60,*emg_35_emg_param_4_61);
    #line 3938 
    ldv_free((void *)emg_35_emg_param_1_58);
    #line 3939 
    ldv_free((void *)emg_35_emg_param_2_59);
    #line 3940 
    ldv_free((void *)emg_35_emg_param_3_60);
    #line 3941 
    ldv_free((void *)emg_35_emg_param_4_61);
    #line 3943 
    break;
    #line 3945 
    case 7: 
            #line 3945 
    ;
    #line 3947 
    emg_35_emg_param_1_55 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 3947 
    emg_35_emg_param_1_55 = emg_35_emg_param_1_55;
    #line 3948 
    emg_35_emg_param_2_56 = (enum sta_notify_cmd *)ldv_xmalloc_unknown_size(0UL);
    #line 3948 
    emg_35_emg_param_2_56 = emg_35_emg_param_2_56;
    #line 3949 
    emg_35_emg_param_3_57 = (struct ieee80211_sta *)ldv_xmalloc_unknown_size(0UL);
    #line 3949 
    emg_35_emg_param_3_57 = emg_35_emg_param_3_57;
    #line 3953 
    emg_wrapper_ath9k_sta_notify(emg_35_resource,emg_35_emg_param_1_55,*emg_35_emg_param_2_56,emg_35_emg_param_3_57);
    #line 3957 
    ldv_free((void *)emg_35_emg_param_1_55);
    #line 3958 
    ldv_free((void *)emg_35_emg_param_2_56);
    #line 3959 
    ldv_free((void *)emg_35_emg_param_3_57);
    #line 3961 
    break;
    #line 3963 
    case 8: 
            #line 3963 
    ;
    #line 3965 
    emg_35_emg_param_1_52 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 3965 
    emg_35_emg_param_1_52 = emg_35_emg_param_1_52;
    #line 3966 
    emg_35_emg_param_2_53 = (struct ieee80211_sta *)ldv_xmalloc_unknown_size(0UL);
    #line 3966 
    emg_35_emg_param_2_53 = emg_35_emg_param_2_53;
    #line 3967 
    emg_35_emg_param_3_54 = (struct dentry *)ldv_xmalloc_unknown_size(0UL);
    #line 3967 
    emg_35_emg_param_3_54 = emg_35_emg_param_3_54;
    #line 3971 
    ath9k_sta_add_debugfs(emg_35_resource,emg_35_emg_param_1_52,emg_35_emg_param_2_53,emg_35_emg_param_3_54);
    #line 3975 
    ldv_free((void *)emg_35_emg_param_1_52);
    #line 3976 
    ldv_free((void *)emg_35_emg_param_2_53);
    #line 3977 
    ldv_free((void *)emg_35_emg_param_3_54);
    #line 3979 
    break;
    #line 3981 
    case 9: 
            #line 3981 
    ;
    #line 3983 
    ath9k_set_wakeup(emg_35_resource,(_Bool)((bool)((int)emg_35_emg_param_1_51) != 0));
    #line 3985 
    break;
    #line 3987 
    case 10: 
             #line 3987 
    ;
    #line 3989 
    emg_35_emg_param_1_49 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 3989 
    emg_35_emg_param_1_49 = emg_35_emg_param_1_49;
    #line 3993 
    emg_wrapper_ath9k_set_tsf(emg_35_resource,emg_35_emg_param_1_49,emg_35_emg_param_2_50);
    #line 3997 
    ldv_free((void *)emg_35_emg_param_1_49);
    #line 3999 
    break;
    #line 4001 
    case 11: 
             #line 4001 
    ;
    #line 4003 
    emg_35_emg_param_1_45 = (enum set_key_cmd *)ldv_xmalloc_unknown_size(0UL);
    #line 4003 
    emg_35_emg_param_1_45 = emg_35_emg_param_1_45;
    #line 4004 
    emg_35_emg_param_2_46 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 4004 
    emg_35_emg_param_2_46 = emg_35_emg_param_2_46;
    #line 4005 
    emg_35_emg_param_3_47 = (struct ieee80211_sta *)ldv_xmalloc_unknown_size(0UL);
    #line 4005 
    emg_35_emg_param_3_47 = emg_35_emg_param_3_47;
    #line 4006 
    emg_35_emg_param_4_48 = (struct ieee80211_key_conf *)ldv_xmalloc_unknown_size(0UL);
    #line 4006 
    emg_35_emg_param_4_48 = emg_35_emg_param_4_48;
    #line 4010 
    emg_wrapper_ath9k_set_key(emg_35_resource,*emg_35_emg_param_1_45,emg_35_emg_param_2_46,emg_35_emg_param_3_47,emg_35_emg_param_4_48);
    #line 4014 
    ldv_free((void *)emg_35_emg_param_1_45);
    #line 4015 
    ldv_free((void *)emg_35_emg_param_2_46);
    #line 4016 
    ldv_free((void *)emg_35_emg_param_3_47);
    #line 4017 
    ldv_free((void *)emg_35_emg_param_4_48);
    #line 4019 
    break;
    #line 4021 
    case 12: 
             #line 4021 
    ;
    #line 4023 
    emg_wrapper_ath9k_set_coverage_class(emg_35_resource,(short)((int)emg_35_emg_param_1_44));
    #line 4025 
    break;
    #line 4027 
    case 13: 
             #line 4027 
    ;
    #line 4029 
    emg_wrapper_ath9k_set_antenna(emg_35_resource,emg_35_emg_param_1_42,emg_35_emg_param_2_43);
    #line 4031 
    break;
    #line 4033 
    case 14: 
             #line 4033 
    ;
    #line 4035 
    ath9k_rfkill_poll_state(emg_35_resource);
    #line 4037 
    break;
    #line 4039 
    case 15: 
             #line 4039 
    ;
    #line 4041 
    emg_35_emg_param_1_41 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 4041 
    emg_35_emg_param_1_41 = emg_35_emg_param_1_41;
    #line 4045 
    emg_wrapper_ath9k_reset_tsf(emg_35_resource,emg_35_emg_param_1_41);
    #line 4049 
    ldv_free((void *)emg_35_emg_param_1_41);
    #line 4051 
    break;
    #line 4053 
    case 16: 
             #line 4053 
    ;
    #line 4055 
    emg_35_emg_param_1_40 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 4055 
    emg_35_emg_param_1_40 = emg_35_emg_param_1_40;
    #line 4059 
    emg_wrapper_ath9k_remove_interface(emg_35_resource,emg_35_emg_param_1_40);
    #line 4063 
    ldv_free((void *)emg_35_emg_param_1_40);
    #line 4065 
    break;
    #line 4067 
    case 17: 
             #line 4067 
    ;
    #line 4069 
    emg_35_emg_param_1_35 = (struct ieee80211_sta *)ldv_xmalloc_unknown_size(0UL);
    #line 4069 
    emg_35_emg_param_1_35 = emg_35_emg_param_1_35;
    #line 4070 
    emg_35_emg_param_4_38 = (enum ieee80211_frame_release_type *)ldv_xmalloc_unknown_size(0UL);
    #line 4070 
    emg_35_emg_param_4_38 = emg_35_emg_param_4_38;
    #line 4074 
    ath9k_release_buffered_frames(emg_35_resource,emg_35_emg_param_1_35,(unsigned short)((int)emg_35_emg_param_2_36),emg_35_emg_param_3_37,*emg_35_emg_param_4_38,(_Bool)((bool)((int)emg_35_emg_param_5_39) != 0));
    #line 4078 
    ldv_free((void *)emg_35_emg_param_1_35);
    #line 4079 
    ldv_free((void *)emg_35_emg_param_4_38);
    #line 4081 
    break;
    #line 4083 
    case 18: 
             #line 4083 
    ;
    #line 4085 
    emg_35_emg_param_1_33 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 4085 
    emg_35_emg_param_1_33 = emg_35_emg_param_1_33;
    #line 4086 
    emg_35_emg_param_2_34 = (int *)ldv_xmalloc_unknown_size(0UL);
    #line 4086 
    emg_35_emg_param_2_34 = emg_35_emg_param_2_34;
    #line 4090 
    emg_wrapper_ath9k_get_txpower(emg_35_resource,emg_35_emg_param_1_33,emg_35_emg_param_2_34);
    #line 4094 
    ldv_free((void *)emg_35_emg_param_1_33);
    #line 4095 
    ldv_free((void *)emg_35_emg_param_2_34);
    #line 4097 
    break;
    #line 4099 
    case 19: 
             #line 4099 
    ;
    #line 4101 
    emg_35_emg_param_1_32 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 4101 
    emg_35_emg_param_1_32 = emg_35_emg_param_1_32;
    #line 4105 
    emg_wrapper_ath9k_get_tsf(emg_35_resource,emg_35_emg_param_1_32);
    #line 4109 
    ldv_free((void *)emg_35_emg_param_1_32);
    #line 4111 
    break;
    #line 4113 
    case 20: 
             #line 4113 
    ;
    #line 4115 
    emg_35_emg_param_2_31 = (struct survey_info *)ldv_xmalloc_unknown_size(0UL);
    #line 4115 
    emg_35_emg_param_2_31 = emg_35_emg_param_2_31;
    #line 4119 
    emg_wrapper_ath9k_get_survey(emg_35_resource,emg_35_emg_param_1_30,emg_35_emg_param_2_31);
    #line 4123 
    ldv_free((void *)emg_35_emg_param_2_31);
    #line 4125 
    break;
    #line 4127 
    case 21: 
             #line 4127 
    ;
    #line 4129 
    emg_35_emg_param_1_29 = (struct ieee80211_low_level_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 4129 
    emg_35_emg_param_1_29 = emg_35_emg_param_1_29;
    #line 4133 
    emg_wrapper_ath9k_get_stats(emg_35_resource,emg_35_emg_param_1_29);
    #line 4137 
    ldv_free((void *)emg_35_emg_param_1_29);
    #line 4139 
    break;
    #line 4141 
    case 22: 
             #line 4141 
    ;
    #line 4143 
    emg_35_emg_param_1_26 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 4143 
    emg_35_emg_param_1_26 = emg_35_emg_param_1_26;
    #line 4144 
    emg_35_emg_param_3_28 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 4144 
    emg_35_emg_param_3_28 = emg_35_emg_param_3_28;
    #line 4148 
    ath9k_get_et_strings(emg_35_resource,emg_35_emg_param_1_26,emg_35_emg_param_2_27,emg_35_emg_param_3_28);
    #line 4152 
    ldv_free((void *)emg_35_emg_param_1_26);
    #line 4153 
    ldv_free((void *)emg_35_emg_param_3_28);
    #line 4155 
    break;
    #line 4157 
    case 23: 
             #line 4157 
    ;
    #line 4159 
    emg_35_emg_param_1_23 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 4159 
    emg_35_emg_param_1_23 = emg_35_emg_param_1_23;
    #line 4160 
    emg_35_emg_param_2_24 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 4160 
    emg_35_emg_param_2_24 = emg_35_emg_param_2_24;
    #line 4161 
    emg_35_emg_param_3_25 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 4161 
    emg_35_emg_param_3_25 = emg_35_emg_param_3_25;
    #line 4165 
    ath9k_get_et_stats(emg_35_resource,emg_35_emg_param_1_23,emg_35_emg_param_2_24,emg_35_emg_param_3_25);
    #line 4169 
    ldv_free((void *)emg_35_emg_param_1_23);
    #line 4170 
    ldv_free((void *)emg_35_emg_param_2_24);
    #line 4171 
    ldv_free((void *)emg_35_emg_param_3_25);
    #line 4173 
    break;
    #line 4175 
    case 24: 
             #line 4175 
    ;
    #line 4177 
    emg_35_emg_param_1_21 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 4177 
    emg_35_emg_param_1_21 = emg_35_emg_param_1_21;
    #line 4181 
    ath9k_get_et_sset_count(emg_35_resource,emg_35_emg_param_1_21,emg_35_emg_param_2_22);
    #line 4185 
    ldv_free((void *)emg_35_emg_param_1_21);
    #line 4187 
    break;
    #line 4189 
    case 25: 
             #line 4189 
    ;
    #line 4191 
    emg_35_emg_param_1_19 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 4191 
    emg_35_emg_param_1_19 = emg_35_emg_param_1_19;
    #line 4192 
    emg_35_emg_param_2_20 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 4192 
    emg_35_emg_param_2_20 = emg_35_emg_param_2_20;
    #line 4196 
    emg_wrapper_ath9k_get_antenna(emg_35_resource,emg_35_emg_param_1_19,emg_35_emg_param_2_20);
    #line 4200 
    ldv_free((void *)emg_35_emg_param_1_19);
    #line 4201 
    ldv_free((void *)emg_35_emg_param_2_20);
    #line 4203 
    break;
    #line 4205 
    case 26: 
             #line 4205 
    ;
    #line 4207 
    emg_35_emg_param_1_16 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 4207 
    emg_35_emg_param_1_16 = emg_35_emg_param_1_16;
    #line 4211 
    emg_wrapper_ath9k_flush(emg_35_resource,emg_35_emg_param_1_16,emg_35_emg_param_2_17,(_Bool)((_Bool)((int)emg_35_emg_param_3_18) != 0));
    #line 4215 
    ldv_free((void *)emg_35_emg_param_1_16);
    #line 4217 
    break;
    #line 4219 
    case 27: 
             #line 4219 
    ;
    #line 4221 
    emg_35_emg_param_2_14 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 4221 
    emg_35_emg_param_2_14 = emg_35_emg_param_2_14;
    #line 4225 
    emg_wrapper_ath9k_configure_filter(emg_35_resource,emg_35_emg_param_1_13,emg_35_emg_param_2_14,emg_35_emg_param_3_15);
    #line 4229 
    ldv_free((void *)emg_35_emg_param_2_14);
    #line 4231 
    break;
    #line 4233 
    case 28: 
             #line 4233 
    ;
    #line 4235 
    emg_wrapper_ath9k_config(emg_35_resource,emg_35_emg_param_1_12);
    #line 4237 
    break;
    #line 4239 
    case 29: 
             #line 4239 
    ;
    #line 4241 
    emg_35_emg_param_1_9 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 4241 
    emg_35_emg_param_1_9 = emg_35_emg_param_1_9;
    #line 4242 
    emg_35_emg_param_3_11 = (struct ieee80211_tx_queue_params *)ldv_xmalloc_unknown_size(0UL);
    #line 4242 
    emg_35_emg_param_3_11 = emg_35_emg_param_3_11;
    #line 4246 
    emg_wrapper_ath9k_conf_tx(emg_35_resource,emg_35_emg_param_1_9,(unsigned short)((int)emg_35_emg_param_2_10),emg_35_emg_param_3_11);
    #line 4250 
    ldv_free((void *)emg_35_emg_param_1_9);
    #line 4251 
    ldv_free((void *)emg_35_emg_param_3_11);
    #line 4253 
    break;
    #line 4255 
    case 30: 
             #line 4255 
    ;
    #line 4257 
    emg_35_emg_param_1_6 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 4257 
    emg_35_emg_param_1_6 = emg_35_emg_param_1_6;
    #line 4258 
    emg_35_emg_param_2_7 = (enum nl80211_iftype *)ldv_xmalloc_unknown_size(0UL);
    #line 4258 
    emg_35_emg_param_2_7 = emg_35_emg_param_2_7;
    #line 4262 
    emg_wrapper_ath9k_change_interface(emg_35_resource,emg_35_emg_param_1_6,*emg_35_emg_param_2_7,(_Bool)((_Bool)((int)emg_35_emg_param_3_8) != 0));
    #line 4266 
    ldv_free((void *)emg_35_emg_param_1_6);
    #line 4267 
    ldv_free((void *)emg_35_emg_param_2_7);
    #line 4269 
    break;
    #line 4271 
    case 31: 
             #line 4271 
    ;
    #line 4273 
    emg_35_emg_param_1_3 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 4273 
    emg_35_emg_param_1_3 = emg_35_emg_param_1_3;
    #line 4274 
    emg_35_emg_param_2_4 = (struct ieee80211_bss_conf *)ldv_xmalloc_unknown_size(0UL);
    #line 4274 
    emg_35_emg_param_2_4 = emg_35_emg_param_2_4;
    #line 4278 
    emg_wrapper_ath9k_bss_info_changed(emg_35_resource,emg_35_emg_param_1_3,emg_35_emg_param_2_4,emg_35_emg_param_3_5);
    #line 4282 
    ldv_free((void *)emg_35_emg_param_1_3);
    #line 4283 
    ldv_free((void *)emg_35_emg_param_2_4);
    #line 4285 
    break;
    #line 4287 
    case 32: 
             #line 4287 
    ;
    #line 4289 
    emg_35_emg_param_1_1 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 4289 
    emg_35_emg_param_1_1 = emg_35_emg_param_1_1;
    #line 4290 
    emg_35_emg_param_2_2 = (struct ieee80211_ampdu_params *)ldv_xmalloc_unknown_size(0UL);
    #line 4290 
    emg_35_emg_param_2_2 = emg_35_emg_param_2_2;
    #line 4294 
    emg_wrapper_ath9k_ampdu_action(emg_35_resource,emg_35_emg_param_1_1,emg_35_emg_param_2_2);
    #line 4298 
    ldv_free((void *)emg_35_emg_param_1_1);
    #line 4299 
    ldv_free((void *)emg_35_emg_param_2_2);
    #line 4301 
    break;
    #line 4303 
    case 33: 
             #line 4303 
    ;
    #line 4305 
    emg_35_emg_param_1_68 = (struct cfg80211_wowlan *)ldv_xmalloc_unknown_size(0UL);
    #line 4305 
    emg_35_emg_param_1_68 = emg_35_emg_param_1_68;
    #line 4309 
    ath9k_suspend(emg_35_resource,emg_35_emg_param_1_68);
    #line 4313 
    ldv_free((void *)emg_35_emg_param_1_68);
    #line 4317 
    ath9k_resume(emg_35_resource);
    #line 4320 
    if (emg_repeat_cnt_started_35_0 > 0) {
      #line 4321 
      emg_repeat_cnt_started_35_0 --;
      #line 4323 
      goto emg_started_35;
    }
    else 
         #line 4325 
         __VERIFIER_assume(0);
    #line 4329 
    break;
    #line 4331 
    case 34: 
             #line 4331 
    ;
    #line 4333 
    emg_35_emg_param_1_0 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 4333 
    emg_35_emg_param_1_0 = emg_35_emg_param_1_0;
    #line 4337 
    emg_wrapper_ath9k_add_interface(emg_35_resource,emg_35_emg_param_1_0);
    #line 4341 
    ldv_free((void *)emg_35_emg_param_1_0);
    #line 4344 
    if (emg_repeat_cnt_started_35_1 > 0) {
      #line 4345 
      emg_repeat_cnt_started_35_1 --;
      #line 4347 
      goto emg_started_35;
    }
    else 
         #line 4349 
         __VERIFIER_assume(0);
    #line 4353 
    break;
    #line 4355 
    case 35: 
             #line 4355 
    ;
    #line 4358 
    rtnl_lock();
    #line 4362 
    emg_wrapper_ath9k_stop(emg_35_resource);
    #line 4367 
    rtnl_unlock();
    #line 4370 
    if (emg_repeat_cnt_main_35_0 > 0) {
      #line 4371 
      emg_repeat_cnt_main_35_0 --;
      #line 4373 
      goto emg_main_35;
    }
    else 
         #line 4375 
         __VERIFIER_assume(0);
    #line 4379 
    break;
    #line 4381 
    default: 
             #line 4381 
    ;
    #line 4381 
    __VERIFIER_assume(0);
  }
  #line 4384 
  return (void *)0;
}

#line 4389  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_ath_isr(void *arg0)
{
  #line 4392 
  enum irqreturn (*emg_36_callback)(int , void *);
  #line 4393 
  void *emg_36_data;
  #line 4394 
  int emg_36_line;
  #line 4395 
  enum irqreturn emg_36_ret_val;
  #line 4396 
  enum irqreturn (*emg_36_thread)(int , void *);
  #line 4398 
  struct emg_struct_interrupt_scenario_ath_isr_36 *data = (struct emg_struct_interrupt_scenario_ath_isr_36 *)arg0;
  #line 4401 
  emg_36_callback = & ath_isr;
  #line 4404 
  if (data != (struct emg_struct_interrupt_scenario_ath_isr_36 *)0) {
    #line 4405 
    emg_36_line = data->arg0;
    #line 4406 
    emg_36_callback = data->arg1;
    #line 4407 
    emg_36_thread = data->arg2;
    #line 4408 
    emg_36_data = data->arg3;
    #line 4409 
    ldv_free((void *)data);
  }
  #line 4415 
  ldv_switch_to_interrupt_context();
  #line 4419 
  emg_36_ret_val = ath_isr(emg_36_line,emg_36_data);
  #line 4424 
  ldv_switch_to_process_context();
  #line 4427 
  if (ldv_undef_int() != 0) {
    #line 4429 
    __VERIFIER_assume(emg_36_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 4433 
    if (emg_36_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 4434 
                                                              (*emg_36_thread)(emg_36_line,emg_36_data);
  }
  else 
       #line 4439 
       __VERIFIER_assume(emg_36_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 4447 
  return (void *)0;
}

#line 4452  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_ath_pci_driver(void *arg0)
{
  #line 4455 
  int emg_37_choice;
  #line 4456 
  struct pci_driver *emg_37_container;
  #line 4457 
  struct pci_device_id *emg_37_device_id;
  #line 4458 
  struct pci_dev *emg_37_resource_0;
  #line 4459 
  struct pm_message emg_37_resource_1;
  #line 4460 
  int emg_37_ret;
  #line 4461 
  int emg_repeat_cnt_main_37_0 = 1;
  #line 4462 
  int emg_repeat_cnt_call_37_1 = 1;
  #line 4463 
  int emg_repeat_cnt_call_37_0 = 1;
  #line 4464 
  int emg_repeat_cnt_main_37_1 = 1;
  #line 4466 
  struct emg_struct_pci_scenario_ath_pci_driver_37 *data = (struct emg_struct_pci_scenario_ath_pci_driver_37 *)arg0;
  #line 4470 
  emg_37_choice = 0;
  #line 4471 
  emg_37_ret = ldv_undef_int();
  #line 4472 
  emg_37_choice = 0;
  #line 4473 
  emg_37_container = emg_alias_ath_pci_driver;
  #line 4474 
  emg_37_ret = ldv_undef_int();
  #line 4476 
  __VERIFIER_assume(data->arg0 == emg_alias_ath_pci_driver);
  #line 4478 
  if (data != (struct emg_struct_pci_scenario_ath_pci_driver_37 *)0) {
    #line 4479 
    emg_37_container = data->arg0;
    #line 4480 
    ldv_free((void *)data);
  }
  #line 4485 
  emg_37_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 4486 
  emg_37_choice = __ldv_undef_int_range(0,151);
  #line 4487 
  emg_37_device_id = emg_37_container->id_table + (unsigned long)emg_37_choice;
  #line 4491 
  goto emg_main_37;
  #line 4495 
  return (void *)0;
  #line 4498 
  emg_call_37: 
               #line 4498 
  ;
  #line 4499 
  switch (ldv_undef_int()) {
    #line 4500 
    case 0: 
            #line 4500 
    ;
    #line 4505 
    if (emg_repeat_cnt_call_37_1 > 0) {
      #line 4506 
      emg_repeat_cnt_call_37_1 --;
      #line 4508 
      goto emg_call_37;
    }
    else 
         #line 4510 
         __VERIFIER_assume(0);
    #line 4514 
    break;
    #line 4516 
    case 1: 
            #line 4516 
    ;
    #line 4518 
    if (emg_37_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 4519 
      emg_37_ret = (*(emg_37_container->suspend))(emg_37_resource_0,emg_37_resource_1); else 
                                                                    #line 4521 
                                                                    emg_37_ret = ldv_undef_int();
    #line 4527 
    emg_37_ret = ldv_filter_err_code(emg_37_ret);
    #line 4531 
    if (emg_37_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 4532 
                                                                  (*(emg_37_container->resume))(emg_37_resource_0);
    #line 4536 
    if (emg_repeat_cnt_call_37_0 > 0) {
      #line 4537 
      emg_repeat_cnt_call_37_0 --;
      #line 4539 
      goto emg_call_37;
    }
    else 
         #line 4541 
         __VERIFIER_assume(0);
    #line 4545 
    break;
    #line 4547 
    case 2: 
            #line 4547 
    ;
    #line 4549 
    if (emg_37_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 4550 
      (*(emg_37_container->shutdown))(emg_37_resource_0);
    #line 4555 
    emg_wrapper_ath_pci_remove(emg_37_resource_0);
    #line 4558 
    if (emg_repeat_cnt_main_37_1 > 0) {
      #line 4559 
      emg_repeat_cnt_main_37_1 --;
      #line 4561 
      goto emg_main_37;
    }
    else 
         #line 4563 
         __VERIFIER_assume(0);
    #line 4567 
    break;
    #line 4569 
    default: 
             #line 4569 
    ;
    #line 4569 
    __VERIFIER_assume(0);
  }
  #line 4572 
  return (void *)0;
  #line 4575 
  emg_main_37: 
               #line 4575 
  ;
  #line 4576 
  if (ldv_undef_int() != 0) {
    #line 4579 
    ldv_pre_probe();
    #line 4583 
    emg_37_ret = emg_wrapper_ath_pci_probe(emg_37_resource_0,emg_37_device_id);
    #line 4588 
    emg_37_ret = ldv_post_probe(emg_37_ret);
    #line 4591 
    if (ldv_undef_int() != 0) {
      #line 4593 
      __VERIFIER_assume(emg_37_ret == 0);
      #line 4597 
      goto emg_call_37;
    }
    else 
         #line 4602 
         __VERIFIER_assume(emg_37_ret != 0);
    #line 4606 
    if (emg_repeat_cnt_main_37_0 > 0) {
      #line 4607 
      emg_repeat_cnt_main_37_0 --;
      #line 4609 
      goto emg_main_37;
    }
    else 
         #line 4611 
         __VERIFIER_assume(0);
  }
  else 
       #line 4617 
       ldv_free((void *)emg_37_resource_0);
  #line 4625 
  return (void *)0;
}

#line 4630  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_platform_platform_instance_ath_ahb_driver(void *arg0)
{
  #line 4633 
  struct platform_driver *emg_38_container;
  #line 4634 
  struct pm_message *emg_38_emg_param_1_0;
  #line 4635 
  int emg_38_probed;
  #line 4636 
  struct platform_device *emg_38_resource;
  #line 4637 
  int emg_repeat_cnt_main_38_1 = 1;
  #line 4638 
  int emg_repeat_cnt_call_38 = 1;
  #line 4639 
  int emg_repeat_cnt_main_38_0 = 1;
  #line 4641 
  struct emg_struct_platform_instance_ath_ahb_driver_38 *data = (struct emg_struct_platform_instance_ath_ahb_driver_38 *)arg0;
  #line 4645 
  emg_38_probed = 1;
  #line 4646 
  emg_38_container = emg_alias_ath_ahb_driver;
  #line 4647 
  emg_38_probed = 1;
  #line 4649 
  __VERIFIER_assume(data->arg0 == emg_alias_ath_ahb_driver);
  #line 4651 
  if (data != (struct emg_struct_platform_instance_ath_ahb_driver_38 *)0) {
    #line 4652 
    emg_38_container = data->arg0;
    #line 4653 
    ldv_free((void *)data);
  }
  #line 4658 
  emg_38_resource = (struct platform_device *)ldv_xmalloc(1632UL);
  #line 4659 
  emg_38_resource->id_entry = emg_38_container->id_table;
  #line 4660 
  emg_38_resource->dev.platform_data = ldv_xmalloc_unknown_size(0UL);
  #line 4664 
  goto emg_main_38;
  #line 4668 
  return (void *)0;
  #line 4671 
  emg_call_38: 
               #line 4671 
  ;
  #line 4672 
  if (ldv_undef_int() != 0) {
    #line 4673 
    switch (ldv_undef_int()) {
      #line 4674 
      case 0: 
              #line 4674 
      ;
      #line 4676 
      emg_38_emg_param_1_0 = (struct pm_message *)ldv_xmalloc_unknown_size(0UL);
      #line 4676 
      emg_38_emg_param_1_0 = emg_38_emg_param_1_0;
      #line 4680 
      if (emg_38_container->suspend != (int (*)(struct platform_device *, pm_message_t ))0) 
        #line 4681 
        (*(emg_38_container->suspend))(emg_38_resource,*emg_38_emg_param_1_0);
      #line 4686 
      ldv_free((void *)emg_38_emg_param_1_0);
      #line 4690 
      if (emg_38_container->resume != (int (*)(struct platform_device *))0) 
        #line 4691 
        (*(emg_38_container->resume))(emg_38_resource);
      #line 4694 
      break;
      #line 4696 
      case 1: 
              #line 4696 
      ;
      #line 4698 
      emg_dispatch_pm_register_38();
      #line 4702 
      emg_dispatch_pm_deregister_38();
      #line 4704 
      break;
      #line 4706 
      case 2: 
              #line 4706 
      ;
      #line 4709 
      break;
      #line 4711 
      default: 
               #line 4711 
      ;
      #line 4711 
      __VERIFIER_assume(0);
    }
    #line 4714 
    if (emg_repeat_cnt_call_38 > 0) {
      #line 4715 
      emg_repeat_cnt_call_38 --;
      #line 4717 
      goto emg_call_38;
    }
    else 
         #line 4719 
         __VERIFIER_assume(0);
  }
  else {
    #line 4725 
    if (emg_38_container->shutdown != (void (*)(struct platform_device *))0) 
      #line 4726 
      (*(emg_38_container->shutdown))(emg_38_resource);
    #line 4731 
    emg_wrapper_ath_ahb_remove(emg_38_resource);
    #line 4735 
    emg_38_probed = 1;
    #line 4738 
    if (emg_repeat_cnt_main_38_1 > 0) {
      #line 4739 
      emg_repeat_cnt_main_38_1 --;
      #line 4741 
      goto emg_main_38;
    }
    else 
         #line 4743 
         __VERIFIER_assume(0);
  }
  #line 4749 
  return (void *)0;
  #line 4752 
  emg_main_38: 
               #line 4752 
  ;
  #line 4753 
  if (ldv_undef_int() != 0) {
    #line 4756 
    ldv_pre_probe();
    #line 4760 
    emg_38_probed = emg_wrapper_ath_ahb_probe(emg_38_resource);
    #line 4765 
    emg_38_probed = ldv_post_probe(emg_38_probed);
    #line 4768 
    if (ldv_undef_int() != 0) {
      #line 4770 
      __VERIFIER_assume(emg_38_probed == 0);
      #line 4774 
      goto emg_call_38;
    }
    else {
      #line 4779 
      __VERIFIER_assume(emg_38_probed != 0);
      #line 4782 
      if (emg_repeat_cnt_main_38_0 > 0) {
        #line 4783 
        emg_repeat_cnt_main_38_0 --;
        #line 4785 
        goto emg_main_38;
      }
      else 
           #line 4787 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4794 
       ldv_free((void *)emg_38_resource);
  #line 4802 
  return (void *)0;
}

#line 4807  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pm_pm_ops_scenario_ath9k_pm_ops(void *arg0)
{
  #line 4810 
  struct device *emg_39_device;
  #line 4811 
  struct dev_pm_ops *emg_39_pm_ops;
  #line 4812 
  int emg_39_ret;
  #line 4813 
  int emg_repeat_cnt_th_39 = 1;
  #line 4814 
  int emg_repeat_cnt_restnoirq_39 = 1;
  #line 4815 
  int emg_repeat_cnt_reste_39 = 1;
  #line 4816 
  int emg_repeat_cnt_pno_irq_39 = 1;
  #line 4817 
  int emg_repeat_cnt_reslate_39 = 1;
  #line 4818 
  int emg_repeat_cnt_fr_39 = 1;
  #line 4819 
  int emg_repeat_cnt_poff_39 = 1;
  #line 4820 
  int emg_repeat_cnt_resnoirq_39 = 1;
  #line 4821 
  int emg_repeat_cnt_res_39 = 1;
  #line 4822 
  int emg_repeat_cnt_rest_39 = 1;
  #line 4823 
  int emg_repeat_cnt_thlate_39 = 1;
  #line 4824 
  int emg_repeat_cnt_run_resume_39 = 1;
  #line 4825 
  int emg_repeat_cnt_fnoirq_39 = 1;
  #line 4826 
  int emg_repeat_cnt_no_irq_39 = 1;
  #line 4827 
  int emg_repeat_cnt_tnoirq_39 = 1;
  #line 4828 
  int emg_repeat_cnt_flate_39 = 1;
  #line 4829 
  int emg_repeat_cnt_slate_39 = 1;
  #line 4830 
  int emg_repeat_cnt_plate_39 = 1;
  #line 4831 
  int emg_repeat_cnt_sus_39 = 1;
  #line 4834 
  emg_39_ret = ldv_undef_int();
  #line 4835 
  emg_39_pm_ops = emg_alias_ath9k_pm_ops;
  #line 4836 
  emg_39_ret = ldv_undef_int();
  #line 4838 
  ldv_free(arg0);
  #line 4842 
  goto emg_do_39;
  #line 4846 
  return (void *)0;
  #line 4849 
  emg_compl_39: 
                #line 4849 
  ;
  #line 4851 
  if (emg_39_pm_ops->complete != (void (*)(struct device *))0) 
                                                               #line 4852 
                                                               (*(emg_39_pm_ops->complete))(emg_39_device);
  #line 4860 
  return (void *)0;
  #line 4863 
  emg_do_39: 
             #line 4863 
  ;
  #line 4864 
  switch (ldv_undef_int()) {
    #line 4865 
    case 0: 
            #line 4865 
    ;
    #line 4867 
    __VERIFIER_assume((emg_runtime_enabled == 1 && emg_runtime_lowpower == 1) != 0);
    #line 4871 
    goto emg_runt_39;
    #line 4876 
    case 1: 
            #line 4876 
    ;
    #line 4878 
    goto emg_normal_39;
    #line 4883 
    case 2: 
            #line 4883 
    ;
    #line 4887 
    break;
    #line 4889 
    default: 
             #line 4889 
    ;
    #line 4889 
    __VERIFIER_assume(0);
  }
  #line 4892 
  return (void *)0;
  #line 4895 
  emg_flate_39: 
                #line 4895 
  ;
  #line 4897 
  if (emg_39_pm_ops->freeze_late != (int (*)(struct device *))0) 
                                                                 #line 4898 
                                                                 emg_39_ret = (*(emg_39_pm_ops->freeze_late))(emg_39_device); else 
                                                                    #line 4900 
                                                                    emg_39_ret = ldv_undef_int();
  #line 4906 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 4909 
  if (ldv_undef_int() != 0) {
    #line 4911 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 4915 
    goto emg_thlate_39;
  }
  else 
       #line 4920 
       __VERIFIER_assume(emg_39_ret != 0);
  #line 4924 
  if (emg_repeat_cnt_flate_39 > 0) {
    #line 4925 
    emg_repeat_cnt_flate_39 --;
    #line 4927 
    goto emg_flate_39;
  }
  else 
       #line 4929 
       __VERIFIER_assume(0);
  #line 4934 
  return (void *)0;
  #line 4937 
  emg_fnoirq_39: 
                 #line 4937 
  ;
  #line 4939 
  if (emg_39_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
                                                                  #line 4940 
                                                                  emg_39_ret = (*(emg_39_pm_ops->freeze_noirq))(emg_39_device); else 
                                                                    #line 4942 
                                                                    emg_39_ret = ldv_undef_int();
  #line 4948 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 4951 
  if (ldv_undef_int() != 0) {
    #line 4953 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 4957 
    goto emg_tnoirq_39;
  }
  else 
       #line 4962 
       __VERIFIER_assume(emg_39_ret != 0);
  #line 4966 
  if (emg_repeat_cnt_fnoirq_39 > 0) {
    #line 4967 
    emg_repeat_cnt_fnoirq_39 --;
    #line 4969 
    goto emg_fnoirq_39;
  }
  else 
       #line 4971 
       __VERIFIER_assume(0);
  #line 4976 
  return (void *)0;
  #line 4979 
  emg_fr_39: 
             #line 4979 
  ;
  #line 4981 
  emg_39_ret = emg_wrapper_ath_pci_suspend(emg_39_device);
  #line 4986 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 4989 
  if (ldv_undef_int() != 0) {
    #line 4991 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 4994 
    if (ldv_undef_int() != 0) 
                              #line 4996 
                              goto emg_fnoirq_39; else 
                                                       #line 5001 
                                                       goto emg_flate_39;
  }
  else {
    #line 5007 
    __VERIFIER_assume(emg_39_ret != 0);
    #line 5010 
    if (emg_repeat_cnt_fr_39 > 0) {
      #line 5011 
      emg_repeat_cnt_fr_39 --;
      #line 5013 
      goto emg_fr_39;
    }
    else 
         #line 5015 
         __VERIFIER_assume(0);
  }
  #line 5021 
  return (void *)0;
  #line 5024 
  emg_no_irq_39: 
                 #line 5024 
  ;
  #line 5026 
  if (emg_39_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
                                                                   #line 5027 
                                                                   emg_39_ret = (*(emg_39_pm_ops->suspend_noirq))(emg_39_device); else 
                                                                    #line 5029 
                                                                    emg_39_ret = ldv_undef_int();
  #line 5035 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5038 
  if (ldv_undef_int() != 0) {
    #line 5040 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5044 
    goto emg_resnoirq_39;
  }
  else 
       #line 5049 
       __VERIFIER_assume(emg_39_ret != 0);
  #line 5053 
  if (emg_repeat_cnt_no_irq_39 > 0) {
    #line 5054 
    emg_repeat_cnt_no_irq_39 --;
    #line 5056 
    goto emg_no_irq_39;
  }
  else 
       #line 5058 
       __VERIFIER_assume(0);
  #line 5063 
  return (void *)0;
  #line 5066 
  emg_normal_39: 
                 #line 5066 
  ;
  #line 5068 
  if (emg_39_pm_ops->prepare != (int (*)(struct device *))0) 
                                                             #line 5069 
                                                             emg_39_ret = (*(emg_39_pm_ops->prepare))(emg_39_device); else 
                                                                    #line 5071 
                                                                    emg_39_ret = ldv_undef_int();
  #line 5077 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5080 
  if (ldv_undef_int() != 0) {
    #line 5082 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5085 
    switch (ldv_undef_int()) {
      #line 5086 
      case 0: 
              #line 5086 
      ;
      #line 5088 
      goto emg_sus_39;
      #line 5093 
      case 1: 
              #line 5093 
      ;
      #line 5095 
      goto emg_fr_39;
      #line 5100 
      case 2: 
              #line 5100 
      ;
      #line 5102 
      goto emg_poff_39;
      #line 5107 
      default: 
               #line 5107 
      ;
      #line 5107 
      __VERIFIER_assume(0);
    }
  }
  else 
       #line 5111 
       __VERIFIER_assume(emg_39_ret != 0);
  #line 5119 
  return (void *)0;
  #line 5122 
  emg_plate_39: 
                #line 5122 
  ;
  #line 5124 
  if (emg_39_pm_ops->poweroff_late != (int (*)(struct device *))0) 
                                                                   #line 5125 
                                                                   emg_39_ret = (*(emg_39_pm_ops->poweroff_late))(emg_39_device); else 
                                                                    #line 5127 
                                                                    emg_39_ret = ldv_undef_int();
  #line 5133 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5136 
  if (ldv_undef_int() != 0) {
    #line 5138 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5142 
    goto emg_reste_39;
  }
  else 
       #line 5147 
       __VERIFIER_assume(emg_39_ret != 0);
  #line 5151 
  if (emg_repeat_cnt_plate_39 > 0) {
    #line 5152 
    emg_repeat_cnt_plate_39 --;
    #line 5154 
    goto emg_plate_39;
  }
  else 
       #line 5156 
       __VERIFIER_assume(0);
  #line 5161 
  return (void *)0;
  #line 5164 
  emg_pno_irq_39: 
                  #line 5164 
  ;
  #line 5166 
  if (emg_39_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
                                                                    #line 5167 
                                                                    emg_39_ret = (*(emg_39_pm_ops->poweroff_noirq))(emg_39_device); else 
                                                                    #line 5169 
                                                                    emg_39_ret = ldv_undef_int();
  #line 5175 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5178 
  if (ldv_undef_int() != 0) {
    #line 5180 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5184 
    goto emg_restnoirq_39;
  }
  else 
       #line 5189 
       __VERIFIER_assume(emg_39_ret != 0);
  #line 5193 
  if (emg_repeat_cnt_pno_irq_39 > 0) {
    #line 5194 
    emg_repeat_cnt_pno_irq_39 --;
    #line 5196 
    goto emg_pno_irq_39;
  }
  else 
       #line 5198 
       __VERIFIER_assume(0);
  #line 5203 
  return (void *)0;
  #line 5206 
  emg_poff_39: 
               #line 5206 
  ;
  #line 5208 
  emg_39_ret = emg_wrapper_ath_pci_suspend(emg_39_device);
  #line 5213 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5216 
  if (ldv_undef_int() != 0) {
    #line 5218 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5221 
    if (ldv_undef_int() != 0) 
                              #line 5223 
                              goto emg_pno_irq_39; else 
                                                        #line 5228 
                                                        goto emg_plate_39;
  }
  else {
    #line 5234 
    __VERIFIER_assume(emg_39_ret != 0);
    #line 5237 
    if (emg_repeat_cnt_poff_39 > 0) {
      #line 5238 
      emg_repeat_cnt_poff_39 --;
      #line 5240 
      goto emg_poff_39;
    }
    else 
         #line 5242 
         __VERIFIER_assume(0);
  }
  #line 5248 
  return (void *)0;
  #line 5251 
  emg_res_39: 
              #line 5251 
  ;
  #line 5253 
  emg_39_ret = emg_wrapper_ath_pci_resume(emg_39_device);
  #line 5258 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5261 
  if (ldv_undef_int() != 0) {
    #line 5263 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5267 
    goto emg_compl_39;
  }
  else {
    #line 5272 
    __VERIFIER_assume(emg_39_ret != 0);
    #line 5275 
    if (emg_repeat_cnt_res_39 > 0) {
      #line 5276 
      emg_repeat_cnt_res_39 --;
      #line 5278 
      goto emg_res_39;
    }
    else 
         #line 5280 
         __VERIFIER_assume(0);
  }
  #line 5286 
  return (void *)0;
  #line 5289 
  emg_reslate_39: 
                  #line 5289 
  ;
  #line 5291 
  if (emg_39_pm_ops->resume_early != (int (*)(struct device *))0) 
                                                                  #line 5292 
                                                                  emg_39_ret = (*(emg_39_pm_ops->resume_early))(emg_39_device); else 
                                                                    #line 5294 
                                                                    emg_39_ret = ldv_undef_int();
  #line 5300 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5303 
  if (ldv_undef_int() != 0) {
    #line 5305 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5309 
    goto emg_res_39;
  }
  else 
       #line 5314 
       __VERIFIER_assume(emg_39_ret != 0);
  #line 5318 
  if (emg_repeat_cnt_reslate_39 > 0) {
    #line 5319 
    emg_repeat_cnt_reslate_39 --;
    #line 5321 
    goto emg_reslate_39;
  }
  else 
       #line 5323 
       __VERIFIER_assume(0);
  #line 5328 
  return (void *)0;
  #line 5331 
  emg_resnoirq_39: 
                   #line 5331 
  ;
  #line 5333 
  if (emg_39_pm_ops->resume_noirq != (int (*)(struct device *))0) 
                                                                  #line 5334 
                                                                  emg_39_ret = (*(emg_39_pm_ops->resume_noirq))(emg_39_device); else 
                                                                    #line 5336 
                                                                    emg_39_ret = ldv_undef_int();
  #line 5342 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5345 
  if (ldv_undef_int() != 0) {
    #line 5347 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5351 
    goto emg_res_39;
  }
  else 
       #line 5356 
       __VERIFIER_assume(emg_39_ret != 0);
  #line 5360 
  if (emg_repeat_cnt_resnoirq_39 > 0) {
    #line 5361 
    emg_repeat_cnt_resnoirq_39 --;
    #line 5363 
    goto emg_resnoirq_39;
  }
  else 
       #line 5365 
       __VERIFIER_assume(0);
  #line 5370 
  return (void *)0;
  #line 5373 
  emg_rest_39: 
               #line 5373 
  ;
  #line 5375 
  emg_39_ret = emg_wrapper_ath_pci_resume(emg_39_device);
  #line 5380 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5383 
  if (ldv_undef_int() != 0) {
    #line 5385 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5389 
    goto emg_compl_39;
  }
  else {
    #line 5394 
    __VERIFIER_assume(emg_39_ret != 0);
    #line 5397 
    if (emg_repeat_cnt_rest_39 > 0) {
      #line 5398 
      emg_repeat_cnt_rest_39 --;
      #line 5400 
      goto emg_rest_39;
    }
    else 
         #line 5402 
         __VERIFIER_assume(0);
  }
  #line 5408 
  return (void *)0;
  #line 5411 
  emg_reste_39: 
                #line 5411 
  ;
  #line 5413 
  if (emg_39_pm_ops->restore_early != (int (*)(struct device *))0) 
                                                                   #line 5414 
                                                                   emg_39_ret = (*(emg_39_pm_ops->restore_early))(emg_39_device); else 
                                                                    #line 5416 
                                                                    emg_39_ret = ldv_undef_int();
  #line 5422 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5425 
  if (ldv_undef_int() != 0) {
    #line 5427 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5431 
    goto emg_rest_39;
  }
  else 
       #line 5436 
       __VERIFIER_assume(emg_39_ret != 0);
  #line 5440 
  if (emg_repeat_cnt_reste_39 > 0) {
    #line 5441 
    emg_repeat_cnt_reste_39 --;
    #line 5443 
    goto emg_reste_39;
  }
  else 
       #line 5445 
       __VERIFIER_assume(0);
  #line 5450 
  return (void *)0;
  #line 5453 
  emg_restnoirq_39: 
                    #line 5453 
  ;
  #line 5455 
  if (emg_39_pm_ops->restore_noirq != (int (*)(struct device *))0) 
                                                                   #line 5456 
                                                                   emg_39_ret = (*(emg_39_pm_ops->restore_noirq))(emg_39_device); else 
                                                                    #line 5458 
                                                                    emg_39_ret = ldv_undef_int();
  #line 5464 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5467 
  if (ldv_undef_int() != 0) {
    #line 5469 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5473 
    goto emg_rest_39;
  }
  else 
       #line 5478 
       __VERIFIER_assume(emg_39_ret != 0);
  #line 5482 
  if (emg_repeat_cnt_restnoirq_39 > 0) {
    #line 5483 
    emg_repeat_cnt_restnoirq_39 --;
    #line 5485 
    goto emg_restnoirq_39;
  }
  else 
       #line 5487 
       __VERIFIER_assume(0);
  #line 5492 
  return (void *)0;
  #line 5495 
  emg_run_resume_39: 
                     #line 5495 
  ;
  #line 5497 
  if (emg_39_pm_ops->runtime_resume != (int (*)(struct device *))0) 
                                                                    #line 5498 
                                                                    emg_39_ret = (*(emg_39_pm_ops->runtime_resume))(emg_39_device); else 
                                                                    #line 5500 
                                                                    emg_39_ret = ldv_undef_int();
  #line 5506 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5507 
  if (emg_39_ret != 0) 
                       #line 5508 
                       emg_runtime_lowpower = 0;
  #line 5511 
  if (ldv_undef_int() != 0) 
                            #line 5513 
                            __VERIFIER_assume(emg_39_ret == 0);
  else {
    #line 5517 
    __VERIFIER_assume(emg_39_ret != 0);
    #line 5520 
    if (emg_repeat_cnt_run_resume_39 > 0) {
      #line 5521 
      emg_repeat_cnt_run_resume_39 --;
      #line 5523 
      goto emg_run_resume_39;
    }
    else 
         #line 5525 
         __VERIFIER_assume(0);
  }
  #line 5535 
  return (void *)0;
  #line 5538 
  emg_runt_39: 
               #line 5538 
  ;
  #line 5539 
  if (ldv_undef_int() != 0) {
    #line 5541 
    if (emg_39_pm_ops->runtime_idle != (int (*)(struct device *))0) 
                                                                    #line 5542 
                                                                    emg_39_ret = (*(emg_39_pm_ops->runtime_idle))(emg_39_device); else 
                                                                    #line 5544 
                                                                    emg_39_ret = ldv_undef_int();
    #line 5550 
    emg_39_ret = ldv_post_probe(emg_39_ret);
  }
  else {
    #line 5554 
    if (emg_39_pm_ops->runtime_suspend != (int (*)(struct device *))0) 
      #line 5555 
      emg_39_ret = (*(emg_39_pm_ops->runtime_suspend))(emg_39_device); else 
                                                                    #line 5557 
                                                                    emg_39_ret = ldv_undef_int();
    #line 5563 
    emg_39_ret = ldv_post_probe(emg_39_ret);
    #line 5564 
    if (emg_39_ret != 0) 
                         #line 5565 
                         emg_runtime_lowpower = 1;
    #line 5568 
    if (ldv_undef_int() != 0) {
      #line 5570 
      __VERIFIER_assume(emg_39_ret == 0);
      #line 5574 
      goto emg_run_resume_39;
    }
    else 
         #line 5579 
         __VERIFIER_assume(emg_39_ret != 0);
  }
  #line 5588 
  return (void *)0;
  #line 5591 
  emg_slate_39: 
                #line 5591 
  ;
  #line 5593 
  if (emg_39_pm_ops->suspend_late != (int (*)(struct device *))0) 
                                                                  #line 5594 
                                                                  emg_39_ret = (*(emg_39_pm_ops->suspend_late))(emg_39_device); else 
                                                                    #line 5596 
                                                                    emg_39_ret = ldv_undef_int();
  #line 5602 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5605 
  if (ldv_undef_int() != 0) {
    #line 5607 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5611 
    goto emg_reslate_39;
  }
  else 
       #line 5616 
       __VERIFIER_assume(emg_39_ret != 0);
  #line 5620 
  if (emg_repeat_cnt_slate_39 > 0) {
    #line 5621 
    emg_repeat_cnt_slate_39 --;
    #line 5623 
    goto emg_slate_39;
  }
  else 
       #line 5625 
       __VERIFIER_assume(0);
  #line 5630 
  return (void *)0;
  #line 5633 
  emg_sus_39: 
              #line 5633 
  ;
  #line 5635 
  emg_39_ret = emg_wrapper_ath_pci_suspend(emg_39_device);
  #line 5640 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5643 
  if (ldv_undef_int() != 0) {
    #line 5645 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5648 
    if (ldv_undef_int() != 0) 
                              #line 5650 
                              goto emg_no_irq_39; else 
                                                       #line 5655 
                                                       goto emg_slate_39;
  }
  else {
    #line 5661 
    __VERIFIER_assume(emg_39_ret != 0);
    #line 5664 
    if (emg_repeat_cnt_sus_39 > 0) {
      #line 5665 
      emg_repeat_cnt_sus_39 --;
      #line 5667 
      goto emg_sus_39;
    }
    else 
         #line 5669 
         __VERIFIER_assume(0);
  }
  #line 5675 
  return (void *)0;
  #line 5678 
  emg_th_39: 
             #line 5678 
  ;
  #line 5680 
  emg_39_ret = emg_wrapper_ath_pci_resume(emg_39_device);
  #line 5685 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5688 
  if (ldv_undef_int() != 0) {
    #line 5690 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5694 
    goto emg_compl_39;
  }
  else {
    #line 5699 
    __VERIFIER_assume(emg_39_ret != 0);
    #line 5702 
    if (emg_repeat_cnt_th_39 > 0) {
      #line 5703 
      emg_repeat_cnt_th_39 --;
      #line 5705 
      goto emg_th_39;
    }
    else 
         #line 5707 
         __VERIFIER_assume(0);
  }
  #line 5713 
  return (void *)0;
  #line 5716 
  emg_thlate_39: 
                 #line 5716 
  ;
  #line 5718 
  if (emg_39_pm_ops->thaw_early != (int (*)(struct device *))0) 
                                                                #line 5719 
                                                                emg_39_ret = (*(emg_39_pm_ops->thaw_early))(emg_39_device); else 
                                                                    #line 5721 
                                                                    emg_39_ret = ldv_undef_int();
  #line 5727 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5730 
  if (ldv_undef_int() != 0) {
    #line 5732 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5736 
    goto emg_th_39;
  }
  else 
       #line 5741 
       __VERIFIER_assume(emg_39_ret != 0);
  #line 5745 
  if (emg_repeat_cnt_thlate_39 > 0) {
    #line 5746 
    emg_repeat_cnt_thlate_39 --;
    #line 5748 
    goto emg_thlate_39;
  }
  else 
       #line 5750 
       __VERIFIER_assume(0);
  #line 5755 
  return (void *)0;
  #line 5758 
  emg_tnoirq_39: 
                 #line 5758 
  ;
  #line 5760 
  if (emg_39_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
                                                                #line 5761 
                                                                emg_39_ret = (*(emg_39_pm_ops->thaw_noirq))(emg_39_device); else 
                                                                    #line 5763 
                                                                    emg_39_ret = ldv_undef_int();
  #line 5769 
  emg_39_ret = ldv_post_probe(emg_39_ret);
  #line 5772 
  if (ldv_undef_int() != 0) {
    #line 5774 
    __VERIFIER_assume(emg_39_ret == 0);
    #line 5778 
    goto emg_th_39;
  }
  else 
       #line 5783 
       __VERIFIER_assume(emg_39_ret != 0);
  #line 5787 
  if (emg_repeat_cnt_tnoirq_39 > 0) {
    #line 5788 
    emg_repeat_cnt_tnoirq_39 --;
    #line 5790 
    goto emg_tnoirq_39;
  }
  else 
       #line 5792 
       __VERIFIER_assume(0);
  #line 5797 
  return (void *)0;
}

#line 5802  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_23(void *arg0)
{
  #line 5805 
  struct timer_list *emg_40_container;
  #line 5806 
  unsigned long emg_40_emg_param_0_0;
  #line 5808 
  struct emg_struct_timer_scenario_23_40 *data = (struct emg_struct_timer_scenario_23_40 *)arg0;
  #line 5813 
  if (data != (struct emg_struct_timer_scenario_23_40 *)0) {
    #line 5814 
    emg_40_container = data->arg0;
    #line 5815 
    ldv_free((void *)data);
  }
  #line 5821 
  ldv_switch_to_interrupt_context();
  #line 5825 
  if (emg_40_container->function != (void (*)(struct timer_list *))0) 
    #line 5826 
    (*(emg_40_container->function))((struct timer_list *)emg_40_emg_param_0_0);
  #line 5832 
  ldv_switch_to_process_context();
  #line 5839 
  return (void *)0;
}

#line 5844  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 5847 
  struct pci_driver *emg_2_pci_driver;
  #line 5849 
  emg_2_pci_driver = emg_alias_ath_pci_driver;
  #line 5850 
  if (ldv_undef_int() != 0) {
    #line 5852 
    emg_2_pci_driver = arg0;
    #line 5856 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 5860 
    return 0;
  }
  else {
    #line 5864 
    return ldv_undef_int_negative();
  }
}

#line 5872  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1)
{
  #line 5875 
  struct platform_driver *emg_3_platform_driver;
  #line 5877 
  emg_3_platform_driver = emg_alias_ath_ahb_driver;
  #line 5878 
  if (ldv_undef_int() != 0) {
    #line 5880 
    emg_3_platform_driver = arg0;
    #line 5884 
    emg_dispatch_register_3(emg_3_platform_driver);
    #line 5888 
    return 0;
  }
  else {
    #line 5892 
    return ldv_undef_int_negative();
  }
}

#line 5900  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 5903 
  struct dentry *emg_4_dentry;
  #line 5904 
  struct inode *emg_4_inode;
  #line 5906 
  if (ldv_undef_int() != 0) {
    #line 5908 
    emg_4_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 5909 
    emg_4_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 5910 
    emg_4_inode->i_mode = (unsigned short)16877U;
    #line 5911 
    emg_4_dentry->d_parent = arg1;
    #line 5912 
    emg_4_dentry->d_inode = emg_4_inode;
    #line 5913 
    return emg_4_dentry;
  }
  else {
    #line 5917 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 5925  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 5928 
  struct dentry *emg_5_dentry;
  #line 5929 
  struct file_operations *emg_5_file_operations;
  #line 5930 
  struct inode *emg_5_inode;
  #line 5932 
  if (ldv_undef_int() != 0) {
    #line 5934 
    emg_5_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 5935 
    emg_5_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 5936 
    emg_5_inode->i_mode = arg1;
    #line 5937 
    emg_5_dentry->d_parent = arg2;
    #line 5938 
    emg_5_inode->i_private = arg3;
    #line 5939 
    emg_5_file_operations = arg4;
    #line 5940 
    emg_5_dentry->d_inode = emg_5_inode;
    #line 5941 
    ldv_save_allocated_memory_to_list((void *)emg_5_dentry);
    #line 5945 
    emg_dispatch_register_5(emg_5_file_operations);
    #line 5949 
    return emg_5_dentry;
  }
  else {
    #line 5953 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 5961  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 5964 
  struct timer_list *emg_6_timer_list;
  #line 5967 
  emg_6_timer_list = arg0;
  #line 5971 
  emg_dispatch_instance_deregister_6(emg_6_timer_list);
  #line 5972 
  ;
  #line 5972 
  return 0;
}

#line 5978  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 5981 
  int emg_7_line;
  #line 5984 
  emg_7_line = (int)arg0;
  #line 5988 
  emg_dispatch_irq_deregister_7(emg_7_line);
  #line 5989 
  ;
  #line 5989 
  return (void *)0;
}

#line 5995  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
struct ieee80211_hw *emg_ieee80211_alloc_hw(unsigned long arg0, struct ieee80211_ops *arg1)
{
  #line 5998 
  struct ieee80211_hw *emg_8_ieee80211_hw;
  #line 5999 
  struct ieee80211_ops *emg_8_ieee80211_ops;
  #line 6001 
  emg_8_ieee80211_ops = & ath9k_ops;
  #line 6002 
  if (ldv_undef_int() != 0) {
    #line 6004 
    emg_8_ieee80211_ops = arg1;
    #line 6005 
    emg_8_ieee80211_hw = (struct ieee80211_hw *)ldv_xmalloc(184UL);
    #line 6009 
    emg_dispatch_register_8(emg_8_ieee80211_hw);
    #line 6013 
    return emg_8_ieee80211_hw;
  }
  else 
       #line 6017 
       return (struct ieee80211_hw *)0;
}

#line 6025  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_ieee80211_free_hw(struct ieee80211_hw *arg0)
{
  #line 6028 
  struct ieee80211_hw *emg_9_ieee80211_hw;
  #line 6031 
  emg_dispatch_deregister_9(emg_9_ieee80211_hw);
  #line 6035 
  ldv_free((void *)emg_9_ieee80211_hw);
  #line 6038 
  return;
}

#line 6043  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
struct task_struct *emg_kthread_create_on_node(int (*arg0)(void *), void *arg1, int arg2, char *arg3 , ...)
{
  #line 6046 
  void *emg_10_data;
  #line 6047 
  void *emg_10_ptr;
  #line 6048 
  int (*emg_10_threadfn)(void *);
  #line 6050 
  emg_10_threadfn = & emg_wrapper_ath9k_rng_kthread;
  #line 6052 
  emg_10_data = arg1;
  #line 6053 
  emg_10_threadfn = arg0;
  #line 6057 
  emg_wrapper_ath9k_rng_kthread(emg_10_data);
  #line 6061 
  emg_10_ptr = ldv_undef_ptr();
  #line 6062 
  __VERIFIER_assume((int)ldv_is_err(emg_10_ptr));
  #line 6063 
  return (struct task_struct *)emg_10_ptr;
}

#line 6070  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 6073 
  struct timer_list *emg_11_timer_list;
  #line 6075 
  if (ldv_undef_int() != 0) {
    #line 6077 
    emg_11_timer_list = arg0;
    #line 6081 
    emg_dispatch_instance_register_11(emg_11_timer_list);
    #line 6085 
    return 1;
  }
  else 
       #line 6089 
       return 0;
}

#line 6097  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 6100 
  struct pci_driver *emg_12_pci_driver;
  #line 6102 
  emg_12_pci_driver = emg_alias_ath_pci_driver;
  #line 6104 
  emg_12_pci_driver = arg0;
  #line 6108 
  emg_dispatch_deregister_12(emg_12_pci_driver);
  #line 6111 
  return;
}

#line 6116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_platform_driver_unregister(struct platform_driver *arg0)
{
  #line 6119 
  struct platform_driver *emg_13_platform_driver;
  #line 6121 
  emg_13_platform_driver = emg_alias_ath_ahb_driver;
  #line 6123 
  emg_13_platform_driver = arg0;
  #line 6127 
  emg_dispatch_deregister_13(emg_13_platform_driver);
  #line 6130 
  return;
}

#line 6135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 6138 
  enum irqreturn (*emg_14_callback)(int , void *);
  #line 6139 
  void *emg_14_data;
  #line 6140 
  int emg_14_line;
  #line 6141 
  enum irqreturn (*emg_14_thread)(int , void *);
  #line 6143 
  emg_14_callback = & ath_isr;
  #line 6144 
  if (ldv_undef_int() != 0) {
    #line 6146 
    emg_14_line = (int)arg0;
    #line 6147 
    emg_14_callback = arg1;
    #line 6148 
    emg_14_thread = (enum irqreturn (*)(int , void *))0;
    #line 6149 
    emg_14_data = arg4;
    #line 6153 
    emg_dispatch_irq_register_14(emg_14_line,emg_14_callback,emg_14_thread,emg_14_data);
    #line 6157 
    return 0;
  }
  else {
    #line 6161 
    return ldv_undef_int_negative();
  }
}

#line 6169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2)
{
  #line 6174 
  arg0->func = arg1;
  #line 6175 
  arg0->data = arg2;
  #line 6176 
  arg0->count.counter = 0;
  #line 6179 
  return;
}

#line 6184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_schedule(struct tasklet_struct *arg0)
{
  #line 6187 
  unsigned long emg_16_emg_param_0_0;
  #line 6188 
  struct tasklet_struct *emg_16_tasklet_struct;
  #line 6191 
  emg_16_tasklet_struct = arg0;
  #line 6195 
  if (emg_16_tasklet_struct->count.counter == 0) 
    #line 6196 
    if (emg_16_tasklet_struct->func != (void (*)(unsigned long ))0) 
                                                                    #line 6197 
                                                                    (*(emg_16_tasklet_struct->func))(emg_16_emg_param_0_0);
  #line 6202 
  return;
}

#line 6207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 6210 
  int emg_1_ret;
  #line 6213 
  emg_1_ret = emg_ath9k_init();
  #line 6214 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 6217 
  if (ldv_undef_int() != 0) {
    #line 6219 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 6223 
    emg_ath9k_exit();
  }
  else 
       #line 6227 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 6231 
  return (void *)0;
}

#line 6236  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath9k/ath9k.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 6238 
  ldv_initialize();
  #line 6240 
  emg_entry_point_insmod((void *)0);
  #line 6242 
  return 0;
}

