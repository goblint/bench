/* Generated by Frama-C */
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_sl.i.aux"
struct task_struct;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_9 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_9 key ;
} __attribute__((__aligned__(8)));
#line 59 
struct device;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_nodemask_t_122 {
   unsigned long bits[16U] ;
};
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_nodemask_t_122 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_130 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_128 {
   struct __anonstruct_129 __anonCompField___anonunion_128_29 ;
   struct __anonstruct_130 __anonCompField___anonunion_128_30 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_128 __anonCompField_uprobe_task_31 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_131 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_131 mm_context_t;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_136 {
   struct list_head slab_list ;
   struct __anonstruct_137 __anonCompField___anonunion_136_34 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_138 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_139 __anonCompField___anonunion_138_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_135 {
   union __anonunion_136 __anonCompField___anonstruct_135_35 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_138 __anonCompField___anonstruct_135_37 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_143 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_142 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_143 __anonCompField___anonstruct_142_41 ;
   spinlock_t *ptl ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_144 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_132 {
   struct __anonstruct_133 __anonCompField___anonunion_132_32 ;
   struct __anonstruct_134 __anonCompField___anonunion_132_33 ;
   struct __anonstruct_135 __anonCompField___anonunion_132_38 ;
   struct __anonstruct_140 __anonCompField___anonunion_132_39 ;
   struct __anonstruct_141 __anonCompField___anonunion_132_40 ;
   struct __anonstruct_142 __anonCompField___anonunion_132_42 ;
   struct __anonstruct_144 __anonCompField___anonunion_132_43 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_145 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_132 __anonCompField_page_44 ;
   union __anonunion_145 __anonCompField_page_45 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_146 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_146 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_147 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_147 __anonCompField_mm_struct_46 ;
   unsigned long cpu_bitmap[] ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_248 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_248 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_249 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_249 kgid_t;
#line 146 
struct kernfs_open_node;
#line 147 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_250 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_250 __anonCompField_kernfs_node_49 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_291 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_291 sigset_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_292 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_293 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_294 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_295 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_298 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_299 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_297 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_298 _addr_bnd ;
   struct __anonstruct__addr_pkey_299 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_296 {
   void *_addr ;
   union __anonunion_297 __anonCompField___anonstruct__sigfault_296_50 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_300 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_301 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_292 _kill ;
   struct __anonstruct__timer_293 _timer ;
   struct __anonstruct__rt_294 _rt ;
   struct __anonstruct__sigchld_295 _sigchld ;
   struct __anonstruct__sigfault_296 _sigfault ;
   struct __anonstruct__sigpoll_300 _sigpoll ;
   struct __anonstruct__sigsys_301 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_306 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_306 __anonCompField_kernel_siginfo_53 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_311 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_311 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 155 
struct nameidata;
#line 157 
struct perf_event_context;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_313 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_313 __anonCompField_task_struct_55 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
enum cpsw_sl_regs {
    CPSW_SL_IDVER = 0,
    CPSW_SL_MACCONTROL = 1,
    CPSW_SL_MACSTATUS = 2,
    CPSW_SL_SOFT_RESET = 3,
    CPSW_SL_RX_MAXLEN = 4,
    CPSW_SL_BOFFTEST = 5,
    CPSW_SL_RX_PAUSE = 6,
    CPSW_SL_TX_PAUSE = 7,
    CPSW_SL_EMCONTROL = 8,
    CPSW_SL_RX_PRI_MAP = 9,
    CPSW_SL_TX_GAP = 10
};
#line 1955 
struct cpsw_sl;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
struct cpsw_sl {
   struct device *dev ;
   void *sl_base ;
   u16 *regs ;
   u32 control_features ;
   u32 idle_mask ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
struct cpsw_sl_dev_id {
   char *device_id ;
   u16 *regs ;
   u32 control_features ;
   u32 regs_offset ;
   u32 idle_mask ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long uintptr_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_372 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_372 pte_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_375 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_375 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_376 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_376 pmd_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_381 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_380 {
   atomic_t cnts ;
   struct __anonstruct_381 __anonCompField___anonunion_380_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_380 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_418 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_418 rwlock_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct inode;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct vmem_altmap;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct dentry;
#line 141 
struct iattr;
#line 142 
struct super_block;
#line 144 
struct fs_context;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_645 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_645 __anonCompField_kernel_param_58 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 892 
struct percpu_ref;
#line 893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_735 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_734 {
   struct __anonstruct_735 __anonCompField___anonunion_734_59 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_734 __anonCompField_lockref_60 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_737 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_736 {
   struct __anonstruct_737 __anonCompField___anonunion_736_61 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_736 __anonCompField_qstr_62 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_738 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_739 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_738 __anonCompField_dentry_63 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_739 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_747 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_747 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_748 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_749 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_748 __anonCompField_io_cq_64 ;
   union __anonunion_749 __anonCompField_io_cq_65 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_750 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_750 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_751 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_751 __anonCompField_kqid_66 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_756 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_757 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_758 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_759 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_756 __anonCompField_inode_67 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_757 __anonCompField_inode_68 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_758 __anonCompField_inode_69 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_759 __anonCompField_inode_70 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_760 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_760 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_762 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_761 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_762 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_761 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
struct gen_pool;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genalloc.h"
struct gen_pool {
   spinlock_t lock ;
   struct list_head chunks ;
   int min_alloc_order ;
   unsigned long (*algo)(unsigned long *, unsigned long , unsigned long , unsigned int , void *, struct gen_pool *, unsigned long ) ;
   void *data ;
   char *name ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
struct cpdma_params {
   struct device *dev ;
   void *dmaregs ;
   void *txhdp ;
   void *rxhdp ;
   void *txcp ;
   void *rxcp ;
   void *rxthresh ;
   void *rxfree ;
   int num_chan ;
   bool has_soft_reset ;
   int min_packet_size ;
   dma_addr_t desc_mem_phys ;
   dma_addr_t desc_hw_addr ;
   int desc_mem_size ;
   int desc_align ;
   u32 bus_freq_mhz ;
   u32 descs_pool_size ;
   bool has_ext_regs ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
struct cpdma_chan_stats {
   u32 head_enqueue ;
   u32 tail_enqueue ;
   u32 pad_enqueue ;
   u32 misqueued ;
   u32 desc_alloc_fail ;
   u32 pad_alloc_fail ;
   u32 runt_receive_buff ;
   u32 runt_transmit_buff ;
   u32 empty_dequeue ;
   u32 busy_dequeue ;
   u32 good_dequeue ;
   u32 requeue ;
   u32 teardown_dequeue ;
};
#line 60 
struct cpdma_ctlr;
#line 61 
struct cpdma_chan;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
struct cpdma_desc {
   u32 hw_next ;
   u32 hw_buffer ;
   u32 hw_len ;
   u32 hw_mode ;
   void *sw_token ;
   u32 sw_buffer ;
   u32 sw_len ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
struct cpdma_desc_pool {
   phys_addr_t phys ;
   dma_addr_t hw_addr ;
   void *iomap ;
   void *cpumap ;
   int desc_size ;
   int mem_size ;
   int num_desc ;
   struct device *dev ;
   struct gen_pool *gen_pool ;
};
#line 89 
enum cpdma_state {
    CPDMA_STATE_IDLE = 0,
    CPDMA_STATE_ACTIVE = 1,
    CPDMA_STATE_TEARDOWN = 2
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
struct cpdma_ctlr {
   enum cpdma_state state ;
   struct cpdma_params params ;
   struct device *dev ;
   struct cpdma_desc_pool *pool ;
   spinlock_t lock ;
   struct cpdma_chan *channels[128U] ;
   int chan_num ;
   int num_rx_desc ;
   int num_tx_desc ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
struct cpdma_chan {
   struct cpdma_desc *head ;
   struct cpdma_desc *tail ;
   void *hdp ;
   void *cp ;
   void *rxfree ;
   enum cpdma_state state ;
   struct cpdma_ctlr *ctlr ;
   int chan_num ;
   spinlock_t lock ;
   int count ;
   u32 desc_num ;
   u32 mask ;
   void (*handler)(void *, int , int ) ;
   enum dma_data_direction dir ;
   struct cpdma_chan_stats stats ;
   int int_set ;
   int int_clear ;
   int td ;
   int weight ;
   u32 rate_factor ;
   u32 rate ;
};
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
struct cpdma_control_info {
   u32 reg ;
   u32 shift ;
   u32 mask ;
   int access ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
struct submit_info {
   struct cpdma_chan *chan ;
   int directed ;
   void *token ;
   void *data_virt ;
   dma_addr_t data_dma ;
   int len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct net_device;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_846 {
   int __val ;
   char __c[1U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_884 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_886 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_885 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_886 __anonCompField___anonstruct_885_28 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_887 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_888 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_889 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_890 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_892 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_891 {
   union __anonunion_892 __anonCompField___anonstruct_891_33 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_893 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_894 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_895 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_896 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_897 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_884 __anonCompField_bpf_attr_27 ;
   struct __anonstruct_885 __anonCompField_bpf_attr_29 ;
   struct __anonstruct_887 __anonCompField_bpf_attr_30 ;
   struct __anonstruct_888 __anonCompField_bpf_attr_31 ;
   struct __anonstruct_889 __anonCompField_bpf_attr_32 ;
   struct __anonstruct_test_890 test ;
   struct __anonstruct_891 __anonCompField_bpf_attr_34 ;
   struct __anonstruct_info_893 info ;
   struct __anonstruct_query_894 query ;
   struct __anonstruct_raw_tracepoint_895 raw_tracepoint ;
   struct __anonstruct_896 __anonCompField_bpf_attr_35 ;
   struct __anonstruct_task_fd_query_897 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_929 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_929 seqlock_t;
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
struct system_device_crosststamp {
   ktime_t device ;
   ktime_t sys_realtime ;
   ktime_t sys_monoraw ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
struct notifier_block;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct u64_stats_sync {
   };
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct __anonstruct_local_t_1035 {
   atomic_long_t a ;
};
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
typedef struct __anonstruct_local_t_1035 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_1036 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_1036 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_1037 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_1037 u64_stats_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct bpf_prog;
#line 308 
struct bpf_prog_aux;
#line 309 
struct bpf_map;
#line 311 
struct btf;
#line 312 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82 
struct user_struct;
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_1041 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_1041 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_1043 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_1042 {
   struct __anonstruct_tail_call_1043 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_1042 __anonCompField_bpf_jit_poke_descriptor_81 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_1044 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_1044 __anonCompField_bpf_prog_aux_82 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 893 
struct xdp_buff;
#line 894 
struct sk_buff;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_1215 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_1217 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_1216 {
   unsigned long nr_segs ;
   struct __anonstruct_1217 __anonCompField___anonunion_1216_91 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_1215 __anonCompField_iov_iter_90 ;
   union __anonunion_1216 __anonCompField_iov_iter_92 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_1220 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_1220 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_1221 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_1221 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_1222 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_1222 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_1223 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_1223 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_1224 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_1224 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_1225 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_1225 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_1226 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_1226 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_1227 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_1227 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_1228 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_1229 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_1228 ifr_ifrn ;
   union __anonunion_ifr_ifru_1229 ifr_ifru ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 1052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct net;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_1332 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_1332 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_1333 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_1333 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1355 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_1354 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_1355 __anonCompField___anonstruct_1354_123 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1353 {
   struct __anonstruct_1354 __anonCompField___anonunion_1353_124 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1356 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1357 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_1359 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1358 {
   struct __anonstruct_1359 __anonCompField___anonunion_1358_128 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_1361 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1360 {
   __wsum csum ;
   struct __anonstruct_1361 __anonCompField___anonunion_1360_130 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1362 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1363 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_1364 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_1353 __anonCompField_sk_buff_125 ;
   union __anonunion_1356 __anonCompField_sk_buff_126 ;
   union __anonunion_1357 __anonCompField_sk_buff_127 ;
   char cb[48U] ;
   union __anonunion_1358 __anonCompField_sk_buff_129 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_1360 __anonCompField_sk_buff_131 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_1362 __anonCompField_sk_buff_132 ;
   __u32 secmark ;
   union __anonunion_1363 __anonCompField_sk_buff_133 ;
   union __anonunion_1364 __anonCompField_sk_buff_134 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_1390 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_1390 __anonCompField_ethtool_rxnfc_136 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_1393 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_1393 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_1395 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_1394 {
   struct __anonstruct_1395 __anonCompField___anonunion_1394_137 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_1394 __anonCompField_ctl_table_header_138 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_1396 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_1396 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_1398 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_1398 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_1411 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_1410 {
   struct __anonstruct_1411 __anonCompField___anonunion_1410_139 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_1410 __anonCompField_keyring_index_key_140 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_1412 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_1413 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_1415 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_1414 {
   struct keyring_index_key index_key ;
   struct __anonstruct_1415 __anonCompField___anonunion_1414_143 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_1417 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_1416 {
   union key_payload payload ;
   struct __anonstruct_1417 __anonCompField___anonunion_1416_145 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_1412 __anonCompField_key_141 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_1413 __anonCompField_key_142 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_1414 __anonCompField_key_144 ;
   union __anonunion_1416 __anonCompField_key_146 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_1420 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_1420 __anonCompField_cred_147 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_1421 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_1421 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_1423 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_1422 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_1423 __anonCompField___anonunion_1422_148 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_1422 __anonCompField_uid_gid_map_149 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 139 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel_stat.h"
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_1424 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_1424 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 41 
enum xdp_mem_type {
    MEM_TYPE_PAGE_SHARED = 0,
    MEM_TYPE_PAGE_ORDER0 = 1,
    MEM_TYPE_PAGE_POOL = 2,
    MEM_TYPE_ZERO_COPY = 3,
    MEM_TYPE_MAX = 4
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 52 
struct page_pool;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_buff {
   void *data ;
   void *data_end ;
   void *data_meta ;
   void *data_hard_start ;
   unsigned long handle ;
   struct xdp_rxq_info *rxq ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_attachment_info {
   struct bpf_prog *prog ;
   u32 flags ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_1449 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_1449 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_mqprio_qopt {
   __u8 num_tc ;
   __u8 prio_tc_map[16U] ;
   __u8 hw ;
   __u16 count[16U] ;
   __u16 offset[16U] ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_1454 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_1455 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_1456 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_1457 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_1453 {
   struct __anonstruct_1454 __anonCompField___anonunion_1453_155 ;
   struct __anonstruct_1455 __anonCompField___anonunion_1453_156 ;
   struct __anonstruct_1456 __anonCompField___anonunion_1453_157 ;
   struct __anonstruct_xsk_1457 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_1453 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 925 
struct devlink;
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14504 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14505 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_1458 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_1459 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_1458 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14504 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14505 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_1459 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_1481 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_1480 {
   void *validation_data ;
   struct __anonstruct_1481 __anonCompField___anonunion_1480_161 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_1480 __anonCompField_nla_policy_162 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_1555 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_1556 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_1554 {
   struct __anonstruct_1555 __anonCompField___anonunion_1554_164 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_1556 __anonCompField___anonunion_1554_165 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_1554 __anonCompField_tcf_result_166 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_1558 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_1558 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_1571 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_1571 __anonCompField_bpf_prog_168 ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint.h"
struct trace_eval_map {
   char *system ;
   char *eval_string ;
   unsigned long eval_value ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/trace/events/xdp.h"
union __anonunion___u_1574 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/trace/events/xdp.h"
union __anonunion___u_1576 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/net_tstamp.h"
struct hwtstamp_config {
   int flags ;
   int tx_type ;
   int rx_filter ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/net_tstamp.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mdio.h"
struct gpio_desc;
#line 327 
struct mii_bus;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct reset_control;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_device {
   struct device dev ;
   struct mii_bus *bus ;
   char modalias[32U] ;
   int (*bus_match)(struct device *, struct device_driver *) ;
   void (*device_free)(struct mdio_device *) ;
   void (*device_remove)(struct mdio_device *) ;
   int addr ;
   int flags ;
   struct gpio_desc *reset_gpio ;
   struct reset_control *reset_ctrl ;
   unsigned int reset_assert_delay ;
   unsigned int reset_deassert_delay ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_driver_common {
   struct device_driver driver ;
   int flags ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
enum ldv_16946 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_INTERNAL = 1,
    PHY_INTERFACE_MODE_MII = 2,
    PHY_INTERFACE_MODE_GMII = 3,
    PHY_INTERFACE_MODE_SGMII = 4,
    PHY_INTERFACE_MODE_TBI = 5,
    PHY_INTERFACE_MODE_REVMII = 6,
    PHY_INTERFACE_MODE_RMII = 7,
    PHY_INTERFACE_MODE_RGMII = 8,
    PHY_INTERFACE_MODE_RGMII_ID = 9,
    PHY_INTERFACE_MODE_RGMII_RXID = 10,
    PHY_INTERFACE_MODE_RGMII_TXID = 11,
    PHY_INTERFACE_MODE_RTBI = 12,
    PHY_INTERFACE_MODE_SMII = 13,
    PHY_INTERFACE_MODE_XGMII = 14,
    PHY_INTERFACE_MODE_MOCA = 15,
    PHY_INTERFACE_MODE_QSGMII = 16,
    PHY_INTERFACE_MODE_TRGMII = 17,
    PHY_INTERFACE_MODE_1000BASEX = 18,
    PHY_INTERFACE_MODE_2500BASEX = 19,
    PHY_INTERFACE_MODE_RXAUI = 20,
    PHY_INTERFACE_MODE_XAUI = 21,
    PHY_INTERFACE_MODE_10GKR = 22,
    PHY_INTERFACE_MODE_USXGMII = 23,
    PHY_INTERFACE_MODE_MAX = 24
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
typedef enum ldv_16946 phy_interface_t;
#line 186 
struct phylink;
#line 188 
enum ldv_16961 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct mii_bus {
   struct module *owner ;
   char *name ;
   char id[61U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_16961 state ;
   struct device dev ;
   struct mdio_device *mdio_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int irq[32U] ;
   int reset_delay_us ;
   struct gpio_desc *reset_gpiod ;
};
#line 278 
enum phy_state {
    PHY_DOWN = 0,
    PHY_READY = 1,
    PHY_HALTED = 2,
    PHY_UP = 3,
    PHY_RUNNING = 4,
    PHY_NOLINK = 5
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};
#line 363 
struct phy_driver;
#line 363 
struct phy_led_trigger;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_device {
   struct mdio_device mdio ;
   struct phy_driver *drv ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   unsigned int is_c45 : 1 ;
   unsigned int is_internal : 1 ;
   unsigned int is_pseudo_fixed_link : 1 ;
   unsigned int is_gigabit_capable : 1 ;
   unsigned int has_fixups : 1 ;
   unsigned int suspended : 1 ;
   unsigned int sysfs_links : 1 ;
   unsigned int loopback_enabled : 1 ;
   unsigned int autoneg : 1 ;
   unsigned int link : 1 ;
   unsigned int autoneg_complete : 1 ;
   unsigned int interrupts : 1 ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   unsigned long adv_old[2U] ;
   u32 eee_broken_modes ;
   struct phy_led_trigger *phy_led_triggers ;
   unsigned int phy_num_led_triggers ;
   struct phy_led_trigger *last_triggered ;
   struct phy_led_trigger *led_link_trigger ;
   int irq ;
   void *priv ;
   struct delayed_work state_queue ;
   struct mutex lock ;
   bool sfp_bus_attached ;
   struct sfp_bus *sfp_bus ;
   struct phylink *phylink ;
   struct net_device *attached_dev ;
   u8 mdix ;
   u8 mdix_ctrl ;
   void (*phy_link_change)(struct phy_device *, bool , bool ) ;
   void (*adjust_link)(struct net_device *) ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_driver {
   struct mdio_driver_common mdiodrv ;
   u32 phy_id ;
   char *name ;
   u32 phy_id_mask ;
   unsigned long *features ;
   u32 flags ;
   void *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*get_features)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   int (*handle_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd)(struct phy_device *, int , u16 ) ;
   int (*write_mmd)(struct phy_device *, int , u16 , u16 ) ;
   int (*read_page)(struct phy_device *) ;
   int (*write_page)(struct phy_device *, int ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_sset_count)(struct phy_device *) ;
   void (*get_strings)(struct phy_device *, u8 *) ;
   void (*get_stats)(struct phy_device *, struct ethtool_stats *, u64 *) ;
   int (*get_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_loopback)(struct phy_device *, bool ) ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptr_ring.h"
struct ptr_ring {
   int producer ;
   spinlock_t producer_lock ;
   int consumer_head ;
   int consumer_tail ;
   spinlock_t consumer_lock ;
   int size ;
   int batch ;
   void **queue ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
struct pp_alloc_cache {
   u32 count ;
   void *cache[128U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
struct page_pool_params {
   unsigned int flags ;
   unsigned int order ;
   unsigned int pool_size ;
   int nid ;
   struct device *dev ;
   enum dma_data_direction dma_dir ;
   unsigned int max_len ;
   unsigned int offset ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
struct page_pool {
   struct page_pool_params p ;
   struct delayed_work release_dw ;
   void (*disconnect)(void *) ;
   unsigned long defer_start ;
   unsigned long defer_warn ;
   u32 pages_state_hold_cnt ;
   struct pp_alloc_cache alloc ;
   struct ptr_ring ring ;
   atomic_t pages_state_release_cnt ;
   refcount_t user_cnt ;
   u64 destroy_cnt ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct tc_cbs_qopt_offload {
   u8 enable ;
   s32 queue ;
   s32 hicredit ;
   s32 locredit ;
   s32 idleslope ;
   s32 sendslope ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct __anonstruct_s_1638 {
   unsigned int len ;
   struct callback_head rcu ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
union __anonunion_1637 {
   struct __anonstruct_s_1638 s ;
   void *ptr[0U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct net_generic {
   union __anonunion_1637 __anonCompField_net_generic_172 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
struct tcf_walker {
   int stop ;
   int skip ;
   int count ;
   bool nonempty ;
   unsigned long cookie ;
   int (*fn)(struct tcf_proto *, void *, struct tcf_walker *) ;
};
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_cls.h"
struct tc_mqprio_qopt_offload {
   struct tc_mqprio_qopt qopt ;
   u16 mode ;
   u16 shaper ;
   u32 flags ;
   u64 min_rate[16U] ;
   u64 max_rate[16U] ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.h"
struct clk;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_clock_time {
   __s64 sec ;
   __u32 nsec ;
   __u32 reserved ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_extts_request {
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[2U] ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_perout_request {
   struct ptp_clock_time start ;
   struct ptp_clock_time period ;
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[4U] ;
};
#line 138 
enum ptp_pin_function {
    PTP_PF_NONE = 0,
    PTP_PF_EXTTS = 1,
    PTP_PF_PEROUT = 2,
    PTP_PF_PHYSYNC = 3
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ptp_clock.h"
struct ptp_pin_desc {
   char name[64U] ;
   unsigned int index ;
   unsigned int func ;
   unsigned int chan ;
   unsigned int rsv[5U] ;
};
#line 205 
enum ldv_17730 {
    PTP_CLK_REQ_EXTTS = 0,
    PTP_CLK_REQ_PEROUT = 1,
    PTP_CLK_REQ_PPS = 2
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
union __anonunion_1646 {
   struct ptp_extts_request extts ;
   struct ptp_perout_request perout ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_request {
   enum ldv_17730 type ;
   union __anonunion_1646 __anonCompField_ptp_clock_request_178 ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_clock_info {
   struct module *owner ;
   char name[16U] ;
   s32 max_adj ;
   int n_alarm ;
   int n_ext_ts ;
   int n_per_out ;
   int n_pins ;
   int pps ;
   struct ptp_pin_desc *pin_config ;
   int (*adjfine)(struct ptp_clock_info *, long ) ;
   int (*adjfreq)(struct ptp_clock_info *, s32 ) ;
   int (*adjtime)(struct ptp_clock_info *, s64 ) ;
   int (*gettime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*gettimex64)(struct ptp_clock_info *, struct timespec64 *, struct ptp_system_timestamp *) ;
   int (*getcrosststamp)(struct ptp_clock_info *, struct system_device_crosststamp *) ;
   int (*settime64)(struct ptp_clock_info *, struct timespec64 *) ;
   int (*enable)(struct ptp_clock_info *, struct ptp_clock_request *, int ) ;
   int (*verify)(struct ptp_clock_info *, unsigned int , enum ptp_pin_function , unsigned int ) ;
   long (*do_aux_work)(struct ptp_clock_info *) ;
};
#line 144 
struct ptp_clock;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
struct cyclecounter {
   u64 (*read)(struct cyclecounter *) ;
   u64 mask ;
   u32 mult ;
   u32 shift ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timecounter.h"
struct timecounter {
   struct cyclecounter *cc ;
   u64 cycle_last ;
   u64 nsec ;
   u64 mask ;
   u64 frac ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpts.h"
struct cpsw_cpts {
   u32 idver ;
   u32 control ;
   u32 rftclk_sel ;
   u32 ts_push ;
   u32 ts_load_val ;
   u32 ts_load_en ;
   u32 res2[2U] ;
   u32 intstat_raw ;
   u32 intstat_masked ;
   u32 int_enable ;
   u32 res3 ;
   u32 event_pop ;
   u32 event_low ;
   u32 event_high ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpts.h"
struct cpts_event {
   struct list_head list ;
   unsigned long tmo ;
   u32 high ;
   u32 low ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpts.h"
struct cpts {
   struct device *dev ;
   struct cpsw_cpts *reg ;
   int tx_enable ;
   int rx_enable ;
   struct ptp_clock_info info ;
   struct ptp_clock *clock ;
   spinlock_t lock ;
   u32 cc_mult ;
   struct cyclecounter cc ;
   struct timecounter tc ;
   int phc_index ;
   struct clk *refclk ;
   struct list_head events ;
   struct list_head pool ;
   struct cpts_event pool_data[32U] ;
   unsigned long ov_check_period ;
   struct sk_buff_head txq ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.h"
struct cpsw_ale_params {
   struct device *dev ;
   void *ale_regs ;
   unsigned long ale_ageout ;
   unsigned long ale_entries ;
   unsigned long ale_ports ;
   bool nu_switch_ale ;
   u32 major_ver_mask ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.h"
struct cpsw_ale {
   struct cpsw_ale_params params ;
   struct timer_list timer ;
   unsigned long ageout ;
   u32 version ;
   u32 port_mask_bits ;
   u32 port_num_bits ;
   u32 vlan_field_bits ;
   unsigned long *p0_untag_vid_mask ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
struct cpsw_wr_regs {
   u32 id_ver ;
   u32 soft_reset ;
   u32 control ;
   u32 int_control ;
   u32 rx_thresh_en ;
   u32 rx_en ;
   u32 tx_en ;
   u32 misc_en ;
   u32 mem_allign1[8U] ;
   u32 rx_thresh_stat ;
   u32 rx_stat ;
   u32 tx_stat ;
   u32 misc_stat ;
   u32 mem_allign2[8U] ;
   u32 rx_imax ;
   u32 tx_imax ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
struct cpsw_ss_regs {
   u32 id_ver ;
   u32 control ;
   u32 soft_reset ;
   u32 stat_port_en ;
   u32 ptype ;
   u32 soft_idle ;
   u32 thru_rate ;
   u32 gap_thresh ;
   u32 tx_start_wds ;
   u32 flow_control ;
   u32 vlan_ltype ;
   u32 ts_ltype ;
   u32 dlr_ltype ;
};
#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
struct cpsw_host_regs {
   u32 max_blks ;
   u32 blk_cnt ;
   u32 tx_in_ctl ;
   u32 port_vlan ;
   u32 tx_pri_map ;
   u32 cpdma_tx_pri_map ;
   u32 cpdma_rx_chan_map ;
};
#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
struct cpsw_slave_data {
   struct device_node *slave_node ;
   struct device_node *phy_node ;
   char phy_id[61U] ;
   phy_interface_t phy_if ;
   u8 mac_addr[6U] ;
   u16 dual_emac_res_vlan ;
   struct phy *ifphy ;
   bool disabled ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
struct cpsw_platform_data {
   struct cpsw_slave_data *slave_data ;
   u32 ss_reg_ofs ;
   u32 channels ;
   u32 slaves ;
   u32 active_slave ;
   u32 ale_entries ;
   u32 bd_ram_size ;
   u32 mac_control ;
   u16 default_vlan ;
   bool dual_emac ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
struct cpsw_slave {
   void *regs ;
   int slave_num ;
   u32 mac_control ;
   struct cpsw_slave_data *data ;
   struct phy_device *phy ;
   struct net_device *ndev ;
   u32 port_vlan ;
   struct cpsw_sl *mac_sl ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
struct cpsw_vector {
   struct cpdma_chan *ch ;
   int budget ;
};
#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
struct cpsw_common {
   struct device *dev ;
   struct cpsw_platform_data data ;
   struct napi_struct napi_rx ;
   struct napi_struct napi_tx ;
   struct cpsw_ss_regs *regs ;
   struct cpsw_wr_regs *wr_regs ;
   u8 *hw_stats ;
   struct cpsw_host_regs *host_port_regs ;
   u32 version ;
   u32 coal_intvl ;
   u32 bus_freq_mhz ;
   int rx_packet_max ;
   int descs_pool_size ;
   struct cpsw_slave *slaves ;
   struct cpdma_ctlr *dma ;
   struct cpsw_vector txv[8U] ;
   struct cpsw_vector rxv[8U] ;
   struct cpsw_ale *ale ;
   bool quirk_irq ;
   bool rx_irq_disabled ;
   bool tx_irq_disabled ;
   u32 irqs_table[2U] ;
   struct cpts *cpts ;
   struct devlink *devlink ;
   int rx_ch_num ;
   int tx_ch_num ;
   int speed ;
   int usage_count ;
   struct page_pool *page_pool[8U] ;
   u8 br_members ;
   struct net_device *hw_bridge_dev ;
   bool ale_bypass ;
   u8 base_mac[6U] ;
};
#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
struct cpsw_priv {
   struct net_device *ndev ;
   struct device *dev ;
   u32 msg_enable ;
   u8 mac_addr[6U] ;
   bool rx_pause ;
   bool tx_pause ;
   bool mqprio_hw ;
   int fifo_bw[4U] ;
   int shp_cfg_speed ;
   int tx_ts_enabled ;
   int rx_ts_enabled ;
   struct bpf_prog *xdp_prog ;
   struct xdp_rxq_info xdp_rxq[8U] ;
   struct xdp_attachment_info xdpi ;
   u32 emac_port ;
   struct cpsw_common *cpsw ;
   int offload_fwd_mark ;
};
#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
struct cpsw_meta_xdp {
   struct net_device *ndev ;
   int ch ;
} __attribute__((__aligned__(8)));
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
union __anonunion___u_1649 {
   struct bpf_prog *__val ;
   char __c[1U] ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
union __anonunion___u_1651 {
   struct bpf_prog *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_1718 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
struct cpsw_stats {
   char stat_string[32U] ;
   int type ;
   int sizeof_stat ;
   int stat_offset ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_2434 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct pdev_archdata {
   };
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct mfd_cell;
#line 1915 
struct platform_device_id;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_device {
   char *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u64 dma_mask ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id *id_entry ;
   char *driver_override ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_driver {
   int (*probe)(struct platform_device *) ;
   int (*remove)(struct platform_device *) ;
   void (*shutdown)(struct platform_device *) ;
   int (*suspend)(struct platform_device *, pm_message_t ) ;
   int (*resume)(struct platform_device *) ;
   struct device_driver driver ;
   struct platform_device_id *id_table ;
   bool prevent_deferred_probe ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/regulator/consumer.h"
struct regulator;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy/phy-mipi-dphy.h"
struct phy_configure_opts_mipi_dphy {
   unsigned int clk_miss ;
   unsigned int clk_post ;
   unsigned int clk_pre ;
   unsigned int clk_prepare ;
   unsigned int clk_settle ;
   unsigned int clk_term_en ;
   unsigned int clk_trail ;
   unsigned int clk_zero ;
   unsigned int d_term_en ;
   unsigned int eot ;
   unsigned int hs_exit ;
   unsigned int hs_prepare ;
   unsigned int hs_settle ;
   unsigned int hs_skip ;
   unsigned int hs_trail ;
   unsigned int hs_zero ;
   unsigned int init ;
   unsigned int lpx ;
   unsigned int ta_get ;
   unsigned int ta_go ;
   unsigned int ta_sure ;
   unsigned int wakeup ;
   unsigned long hs_clk_rate ;
   unsigned long lp_clk_rate ;
   unsigned char lanes ;
};
#line 284 
enum phy_mode {
    PHY_MODE_INVALID = 0,
    PHY_MODE_USB_HOST = 1,
    PHY_MODE_USB_HOST_LS = 2,
    PHY_MODE_USB_HOST_FS = 3,
    PHY_MODE_USB_HOST_HS = 4,
    PHY_MODE_USB_HOST_SS = 5,
    PHY_MODE_USB_DEVICE = 6,
    PHY_MODE_USB_DEVICE_LS = 7,
    PHY_MODE_USB_DEVICE_FS = 8,
    PHY_MODE_USB_DEVICE_HS = 9,
    PHY_MODE_USB_DEVICE_SS = 10,
    PHY_MODE_USB_OTG = 11,
    PHY_MODE_UFS_HS_A = 12,
    PHY_MODE_UFS_HS_B = 13,
    PHY_MODE_PCIE = 14,
    PHY_MODE_ETHERNET = 15,
    PHY_MODE_MIPI_DPHY = 16,
    PHY_MODE_SATA = 17,
    PHY_MODE_LVDS = 18
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy/phy.h"
union phy_configure_opts {
   struct phy_configure_opts_mipi_dphy mipi_dphy ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy/phy.h"
struct phy_ops {
   int (*init)(struct phy *) ;
   int (*exit)(struct phy *) ;
   int (*power_on)(struct phy *) ;
   int (*power_off)(struct phy *) ;
   int (*set_mode)(struct phy *, enum phy_mode , int ) ;
   int (*configure)(struct phy *, union phy_configure_opts *) ;
   int (*validate)(struct phy *, enum phy_mode , int , union phy_configure_opts *) ;
   int (*reset)(struct phy *) ;
   int (*calibrate)(struct phy *) ;
   void (*release)(struct phy *) ;
   struct module *owner ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy/phy.h"
struct phy_attrs {
   u32 bus_width ;
   enum phy_mode mode ;
};
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy/phy.h"
struct phy {
   struct device dev ;
   int id ;
   struct phy_ops *ops ;
   struct mutex mutex ;
   int init_count ;
   int power_count ;
   struct phy_attrs attrs ;
   struct regulator *pwr ;
};
#line 261 
struct gpio_array;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gpio/consumer.h"
struct gpio_descs {
   struct gpio_array *info ;
   unsigned int ndescs ;
   struct gpio_desc *desc[] ;
};
#line 37 
enum gpiod_flags {
    GPIOD_ASIS = 0,
    GPIOD_IN = 1,
    GPIOD_OUT_LOW = 3,
    GPIOD_OUT_HIGH = 7,
    GPIOD_OUT_LOW_OPEN_DRAIN = 11,
    GPIOD_OUT_HIGH_OPEN_DRAIN = 15
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_platform.h"
struct of_dev_auxdata {
   char *compatible ;
   resource_size_t phys_addr ;
   char *name ;
   void *platform_data ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sys_soc.h"
struct soc_device_attribute {
   char *machine ;
   char *family ;
   char *revision ;
   char *serial_number ;
   char *soc_id ;
   void *data ;
   struct attribute_group *custom_attr_group ;
};
#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
struct addr_sync_ctx {
   struct net_device *ndev ;
   u8 *addr ;
   int consumed ;
   int flush ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
struct ale_control_info {
   char *name ;
   int offset ;
   int port_offset ;
   int shift ;
   int port_shift ;
   int bits ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_5716 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_5716 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_5717 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_5717 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_5733 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_5733 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_5737 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_5737 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_5738 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_5739 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_5738 __anonCompField_media_link_90 ;
   union __anonunion_5739 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_5741 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_5740 {
   struct __anonstruct_dev_5741 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_5740 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_5755 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_5756 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_5754 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_5755 i2c ;
   struct __anonstruct_custom_5756 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_5754 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_6657 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_6657 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 15  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_platform_instance_cpsw_driver_10 {
   struct platform_driver *arg0 ;
   int signal_pending ;
};
#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_cpsw_ethtool_op_begin_9 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 432  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_sl.i.aux"
static int cif_strcmp(char *cs, char *ct);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_sl.i.aux"
static void *ERR_PTR(long error);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25 
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 26 
int ldv_strcmp(char *cs, char *ct);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 439  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_sl.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 1712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.h"
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
struct cpsw_sl *cpsw_sl_get(char *device_id, struct device *dev, void *sl_base);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.h"
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
void cpsw_sl_reset(struct cpsw_sl *sl, unsigned long tmo);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.h"
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
u32 cpsw_sl_ctl_set(struct cpsw_sl *sl, u32 ctl_funcs);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.h"
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
u32 cpsw_sl_ctl_clr(struct cpsw_sl *sl, u32 ctl_funcs);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.h"
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
void cpsw_sl_ctl_reset(struct cpsw_sl *sl);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.h"
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
int cpsw_sl_wait_for_idle(struct cpsw_sl *sl, unsigned long tmo);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.h"
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
u32 cpsw_sl_reg_read(struct cpsw_sl *sl, enum cpsw_sl_regs reg);
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.h"
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
void cpsw_sl_reg_write(struct cpsw_sl *sl, enum cpsw_sl_regs reg, u32 val);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
static u16 cpsw_sl_reg_map_cpsw[11U] = {[1] = (unsigned short)4U, (unsigned short)8U, (unsigned short)12U, (unsigned short)16U, (unsigned short)20U, (unsigned short)24U, (unsigned short)28U, (unsigned short)32U, (unsigned short)36U, (unsigned short)40U};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
static u16 cpsw_sl_reg_map_66ak2hk[11U] = {[1] = (unsigned short)4U, (unsigned short)8U, (unsigned short)12U, (unsigned short)16U, (unsigned short)65535U, (unsigned short)24U, (unsigned short)28U, (unsigned short)32U, (unsigned short)36U, (unsigned short)65535U};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
static u16 cpsw_sl_reg_map_66ak2x_xgbe[11U] = {[1] = (unsigned short)4U, (unsigned short)8U, (unsigned short)12U, (unsigned short)16U, (unsigned short)65535U, (unsigned short)24U, (unsigned short)28U, (unsigned short)32U, (unsigned short)65535U, (unsigned short)40U};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
static u16 cpsw_sl_reg_map_66ak2elg_am65[11U] = {(unsigned short)65535U, [2] = (unsigned short)4U, (unsigned short)8U, (unsigned short)65535U, (unsigned short)12U, (unsigned short)16U, (unsigned short)64U, (unsigned short)112U, (unsigned short)65535U, (unsigned short)116U};
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
static struct cpsw_sl_dev_id cpsw_sl_id_match[7U] = {{.device_id = (char *)"cpsw", .regs = (u16 *)(& cpsw_sl_reg_map_cpsw), .control_features = 31952127U, .idle_mask = 2147483648U}, {.device_id = (char *)"66ak2hk", .regs = (u16 *)(& cpsw_sl_reg_map_66ak2hk), .control_features = 29854971U, .idle_mask = 2147483648U}, {.device_id = (char *)"66ak2x_xgbe", .regs = (u16 *)(& cpsw_sl_reg_map_66ak2x_xgbe), .control_features = 29867515U, .idle_mask = 2147483648U}, {.device_id = (char *)"66ak2el", .regs = (u16 *)(& cpsw_sl_reg_map_66ak2elg_am65), .control_features = 33529087U, .regs_offset = 816U, .idle_mask = 2147483648U}, {.device_id = (char *)"66ak2g", .regs = (u16 *)(& cpsw_sl_reg_map_66ak2elg_am65), .control_features = 31430911U, .regs_offset = 816U}, {.device_id = (char *)"am65", .regs = (u16 *)(& cpsw_sl_reg_map_66ak2elg_am65), .control_features = 67091967U, .regs_offset = 816U, .idle_mask = 4026531840U}};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
u32 cpsw_sl_reg_read(struct cpsw_sl *sl, enum cpsw_sl_regs reg)
{
  #line 191 
  int val;
  #line 193 
  if ((unsigned int)*(sl->regs + (unsigned long)reg) == 65535U) {
    #line 194 
    _dev_err(sl->dev,(char *)"cpsw_sl: not sup r reg: %04X\n",(int)*(sl->regs + (unsigned long)reg));
    #line 196 
    return 0U;
  }
  #line 199 
  val = (int)readl(sl->sl_base + (unsigned long)*(sl->regs + (unsigned long)reg));
  {
    #line 200 
    bool branch;
    #line 200 
    struct _ddebug __UNIQUE_ID_ddebug343 = {.modname = (char *)"ti_cpsw:ti_cpsw_new", .function = (char *)"cpsw_sl_reg_read", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c", .format = (char *)"cpsw_sl: reg: %04X r 0x%08X\n", .lineno = (unsigned int)200U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 200 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug343.key.dd_key_false.key,(_Bool)0);
    #line 200 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 200 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug343,sl->dev,(char *)"cpsw_sl: reg: %04X r 0x%08X\n",(int)*(sl->regs + (unsigned long)reg),val);
  }
  #line 201 
  return (unsigned int)val;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
void cpsw_sl_reg_write(struct cpsw_sl *sl, enum cpsw_sl_regs reg, u32 val)
{
  #line 206 
  if ((unsigned int)*(sl->regs + (unsigned long)reg) == 65535U) {
    #line 207 
    _dev_err(sl->dev,(char *)"cpsw_sl: not sup w reg: %04X\n",(int)*(sl->regs + (unsigned long)reg));
    #line 209 
    return;
  }
  {
    #line 212 
    bool branch;
    #line 212 
    struct _ddebug __UNIQUE_ID_ddebug344 = {.modname = (char *)"ti_cpsw:ti_cpsw_new", .function = (char *)"cpsw_sl_reg_write", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c", .format = (char *)"cpsw_sl: reg: %04X w 0x%08X\n", .lineno = (unsigned int)212U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 212 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug344.key.dd_key_false.key,(_Bool)0);
    #line 212 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 212 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug344,sl->dev,(char *)"cpsw_sl: reg: %04X w 0x%08X\n",(int)*(sl->regs + (unsigned long)reg),val);
  }
  #line 213 
  writel(val,sl->sl_base + (unsigned long)*(sl->regs + (unsigned long)reg));
  #line 214 
  return;
}

#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
static struct cpsw_sl_dev_id *cpsw_sl_match_id(struct cpsw_sl_dev_id *id, char *device_id)
{
  #line 220 
  if (id == (struct cpsw_sl_dev_id *)0 || device_id == (char *)0) 
                                                                  #line 221 
                                                                  return (struct cpsw_sl_dev_id *)0;
  #line 223 
  while (id->device_id != (char *)0) {
    #line 224 
    if (cif_strcmp(device_id,id->device_id) == 0) 
                                                  #line 225 
                                                  return id;
    #line 226 
    id ++;
  }
  #line 228 
  return (struct cpsw_sl_dev_id *)0;
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
struct cpsw_sl *cpsw_sl_get(char *device_id, struct device *dev, void *sl_base)
{
  #line 234 
  struct cpsw_sl_dev_id *sl_dev_id;
  #line 235 
  struct cpsw_sl *sl;
  #line 237 
  sl = (struct cpsw_sl *)cif_devm_kzalloc(dev,32UL,3264U);
  #line 238 
  if (sl == (struct cpsw_sl *)0) {
    #line 239 
    return (struct cpsw_sl *)ERR_PTR(-12L);
  }
  #line 240 
  sl->dev = dev;
  #line 241 
  sl->sl_base = sl_base;
  #line 243 
  sl_dev_id = cpsw_sl_match_id((struct cpsw_sl_dev_id *)(& cpsw_sl_id_match),device_id);
  #line 244 
  if (sl_dev_id == (struct cpsw_sl_dev_id *)0) {
    #line 245 
    _dev_err(sl->dev,(char *)"cpsw_sl: dev_id %s not found.\n",device_id);
    #line 246 
    return (struct cpsw_sl *)ERR_PTR(-22L);
  }
  #line 248 
  sl->regs = sl_dev_id->regs;
  #line 249 
  sl->control_features = sl_dev_id->control_features;
  #line 250 
  sl->idle_mask = sl_dev_id->idle_mask;
  #line 251 
  sl->sl_base += (unsigned long)sl_dev_id->regs_offset;
  #line 253 
  return sl;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
void cpsw_sl_reset(struct cpsw_sl *sl, unsigned long tmo)
{
  #line 258 
  unsigned long timeout = msecs_to_jiffies((unsigned int)tmo) + jiffies;
  #line 261 
  cpsw_sl_reg_write(sl,(enum cpsw_sl_regs)CPSW_SL_SOFT_RESET,1U);
  #line 264 
  while (1) {
    #line 265 
    usleep_range(100UL,200UL);
    {
      #line 268 
      unsigned long __dummy;
      #line 268 
      unsigned long __dummy2;
      }
    #line 265 
    if (1 != 0) {
      {
        #line 268 
        unsigned long __dummy_0;
        #line 268 
        unsigned long __dummy2_0;
        }
      #line 268 
      if (1 != 0) 
        #line 268 
        if ((long)(jiffies - timeout) < 0L) {
          #line 267 
          if (! (((unsigned long)cpsw_sl_reg_read(sl,(enum cpsw_sl_regs)CPSW_SL_SOFT_RESET) & 1UL) != 0UL)) 
            #line 264 
            break;
        }
        else 
             #line 264 
             break;
      else 
           #line 264 
           break;
    }
    else 
         #line 264 
         break;
  }
  #line 270 
  if (((unsigned long)cpsw_sl_reg_read(sl,(enum cpsw_sl_regs)CPSW_SL_SOFT_RESET) & 1UL) != 0UL) 
    #line 271 
    _dev_err(sl->dev,(char *)"cpsw_sl failed to soft-reset.\n");
  #line 272 
  return;
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
u32 cpsw_sl_ctl_set(struct cpsw_sl *sl, u32 ctl_funcs)
{
  #line 276 
  u32 val;
  #line 278 
  if ((~ sl->control_features & ctl_funcs) != 0U) {
    #line 279 
    _dev_err(sl->dev,(char *)"cpsw_sl: unsupported func 0x%08X\n",~ sl->control_features & ctl_funcs);
    #line 281 
    return 4294967274U;
  }
  #line 284 
  val = cpsw_sl_reg_read(sl,(enum cpsw_sl_regs)CPSW_SL_MACCONTROL);
  #line 285 
  val |= ctl_funcs;
  #line 286 
  cpsw_sl_reg_write(sl,(enum cpsw_sl_regs)CPSW_SL_MACCONTROL,val);
  #line 288 
  return 0U;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
u32 cpsw_sl_ctl_clr(struct cpsw_sl *sl, u32 ctl_funcs)
{
  #line 293 
  u32 val;
  #line 295 
  if ((~ sl->control_features & ctl_funcs) != 0U) {
    #line 296 
    _dev_err(sl->dev,(char *)"cpsw_sl: unsupported func 0x%08X\n",~ sl->control_features & ctl_funcs);
    #line 298 
    return 4294967274U;
  }
  #line 301 
  val = cpsw_sl_reg_read(sl,(enum cpsw_sl_regs)CPSW_SL_MACCONTROL);
  #line 302 
  val = ~ ctl_funcs & val;
  #line 303 
  cpsw_sl_reg_write(sl,(enum cpsw_sl_regs)CPSW_SL_MACCONTROL,val);
  #line 305 
  return 0U;
}

#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
void cpsw_sl_ctl_reset(struct cpsw_sl *sl)
{
  #line 310 
  cpsw_sl_reg_write(sl,(enum cpsw_sl_regs)CPSW_SL_MACCONTROL,0U);
  #line 311 
  return;
}

#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_sl.c"
int cpsw_sl_wait_for_idle(struct cpsw_sl *sl, unsigned long tmo)
{
  #line 315 
  unsigned long timeout = msecs_to_jiffies((unsigned int)tmo) + jiffies;
  #line 317 
  while (1) {
    #line 318 
    usleep_range(100UL,200UL);
    {
      #line 320 
      unsigned long __dummy;
      #line 320 
      unsigned long __dummy2;
      }
    #line 318 
    if (1 != 0) {
      {
        #line 320 
        unsigned long __dummy_0;
        #line 320 
        unsigned long __dummy2_0;
        }
      #line 320 
      if (1 != 0) 
        #line 320 
        if ((long)(jiffies - timeout) < 0L) {
          #line 320 
          ;
          #line 320 
          if (! ((cpsw_sl_reg_read(sl,(enum cpsw_sl_regs)CPSW_SL_MACSTATUS) & sl->idle_mask) == 0U)) 
            #line 317 
            break;
        }
        else 
             #line 317 
             break;
      else 
           #line 317 
           break;
    }
    else 
         #line 317 
         break;
  }
  #line 322 
  ;
  #line 322 
  if ((cpsw_sl_reg_read(sl,(enum cpsw_sl_regs)CPSW_SL_MACSTATUS) & sl->idle_mask) == 0U) {
    #line 323 
    _dev_err(sl->dev,(char *)"cpsw_sl failed to soft-reset.\n");
    #line 324 
    return -110;
  }
  #line 327 
  return 0;
}

#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_sl.i.aux"
static void *ERR_PTR(long error)
{
  #line 197 
  return ldv_err_ptr(error);
}

#line 432  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_sl.i.aux"
static int cif_strcmp(char *cs, char *ct)
{
  #line 435 
  return ldv_strcmp(cs,ct);
}

#line 439  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_sl.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 442 
  return ldv_devm_kzalloc(size,flags);
}

/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/davinci_cpdma.i.aux"
static void *ERR_PTR_0(long error);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/davinci_cpdma.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/davinci_cpdma.i.aux"
static bool IS_ERR(void *ptr);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 499  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/davinci_cpdma.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_cpdma_chan(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 517  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/davinci_cpdma.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 490 
static void cif___ldv_spin_lock_lock_of_cpdma_chan(spinlock_t *lock);
#line 35 
#line 508 
static void cif___ldv_spin_lock_lock_of_cpdma_ctlr(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 483  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/davinci_cpdma.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 952 
void devm_kfree(struct device *, void *);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
#line 65 
void *devm_ioremap(struct device *, resource_size_t, resource_size_t);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genalloc.h"
#line 98 
int gen_pool_add_owner(struct gen_pool *, unsigned long, phys_addr_t, size_t, int, void *);
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genalloc.h"
__inline static int gen_pool_add_virt(struct gen_pool *pool, unsigned long addr, phys_addr_t phys, size_t size, int nid)
{
  #line 104 
  return gen_pool_add_owner(pool,addr,phys,size,nid,(void *)0);
}

#line 125 
#line 125 
unsigned long gen_pool_alloc_algo_owner(struct gen_pool *, size_t, unsigned long (*)(unsigned long *, unsigned long , unsigned long , unsigned int , void *, struct gen_pool *, unsigned long ), void *, void **);
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genalloc.h"
__inline static unsigned long gen_pool_alloc_algo(struct gen_pool *pool, size_t size, unsigned long (*algo)(unsigned long *, unsigned long , unsigned long , unsigned int , void *, struct gen_pool *, unsigned long ), void *data)
{
  #line 138 
  return gen_pool_alloc_algo_owner(pool,size,algo,data,(void **)0);
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genalloc.h"
__inline static unsigned long gen_pool_alloc(struct gen_pool *pool, size_t size)
{
  #line 153 
  return gen_pool_alloc_algo(pool,size,pool->algo,pool->data);
}

#line 167 
#line 167 
void gen_pool_free_owner(struct gen_pool *, unsigned long, size_t, void **);
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genalloc.h"
__inline static void gen_pool_free(struct gen_pool *pool, unsigned long addr, size_t size)
{
  #line 172 
  gen_pool_free_owner(pool,addr,size,(void **)0);
  #line 173 
  return;
}

#line 177 
#line 177 
size_t gen_pool_avail(struct gen_pool *);
#line 178 
#line 178 
size_t gen_pool_size(struct gen_pool *);
#line 205 
#line 205 
struct gen_pool *devm_gen_pool_create(struct device *, int, int, char *);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
struct cpdma_ctlr *cpdma_ctlr_create(struct cpdma_params *params);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_ctlr_destroy(struct cpdma_ctlr *ctlr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_ctlr_start(struct cpdma_ctlr *ctlr);
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_ctlr_stop(struct cpdma_ctlr *ctlr);
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
struct cpdma_chan *cpdma_chan_create(struct cpdma_ctlr *ctlr, int chan_num, void (*handler)(void *, int , int ), int rx_type);
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_get_rx_buf_num(struct cpdma_chan *chan);
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 947  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_destroy(struct cpdma_chan *chan);
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 1293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_start(struct cpdma_chan *chan);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 1312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_stop(struct cpdma_chan *chan);
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_get_stats(struct cpdma_chan *chan, struct cpdma_chan_stats *stats);
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 1154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_submit_mapped(struct cpdma_chan *chan, void *token, dma_addr_t data, int len, int directed);
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 1129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_submit(struct cpdma_chan *chan, void *token, void *data, int len, int directed);
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 1104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_idle_submit_mapped(struct cpdma_chan *chan, void *token, dma_addr_t data, int len, int directed);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_idle_submit(struct cpdma_chan *chan, void *token, void *data, int len, int directed);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 1277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_process(struct cpdma_chan *chan, int quota);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_ctlr_int_ctrl(struct cpdma_ctlr *ctlr, bool enable);
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
void cpdma_ctlr_eoi(struct cpdma_ctlr *ctlr, u32 value);
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 1374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_int_ctrl(struct cpdma_chan *chan, bool enable);
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
u32 cpdma_ctrl_rxchs_state(struct cpdma_ctlr *ctlr);
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
u32 cpdma_ctrl_txchs_state(struct cpdma_ctlr *ctlr);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 1179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
bool cpdma_check_free_tx_desc(struct cpdma_chan *chan);
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_set_weight(struct cpdma_chan *ch, int weight);
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 825  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_set_rate(struct cpdma_chan *ch, u32 rate);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
u32 cpdma_chan_get_rate(struct cpdma_chan *ch);
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
u32 cpdma_chan_get_min_rate(struct cpdma_ctlr *ctlr);
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 1391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_control_get(struct cpdma_ctlr *ctlr, int control);
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 1403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_control_set(struct cpdma_ctlr *ctlr, int control, int value);
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 1415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_get_num_rx_descs(struct cpdma_ctlr *ctlr);
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 1425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_set_num_rx_descs(struct cpdma_ctlr *ctlr, int num_rx_desc);
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.h"
#line 1420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_get_num_tx_descs(struct cpdma_ctlr *ctlr);
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static struct cpdma_control_info controls[12U] = {{.reg = 32U, .shift = 8U, .mask = 65535U, .access = 3}, {.reg = 32U, .shift = 3U, .mask = 1U, .access = 2}, {.reg = 32U, .shift = 4U, .mask = 1U, .access = 3}, {.reg = 32U, .shift = 2U, .mask = 1U, .access = 3}, {.reg = 32U, .shift = 1U, .mask = 1U, .access = 3}, {.reg = 32U, .mask = 1U, .access = 3}, {.reg = 36U, .shift = 31U, .mask = 1U, .access = 1}, {.reg = 36U, .shift = 16U, .mask = 7U, .access = 3}, {.reg = 36U, .shift = 20U, .mask = 15U, .access = 3}, {.reg = 36U, .shift = 8U, .mask = 7U, .access = 3}, {.reg = 36U, .shift = 12U, .mask = 15U, .access = 3}, {.reg = 40U, .mask = 65535U, .access = 3}};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static void cpdma_desc_pool_destroy(struct cpdma_ctlr *ctlr)
{
  #line 192 
  struct cpdma_desc_pool *pool = ctlr->pool;
  #line 194 
  if (pool == (struct cpdma_desc_pool *)0) 
                                           #line 195 
                                           return;
  {
    #line 197 
    int __ret_warn_on = gen_pool_size(pool->gen_pool) != gen_pool_avail(pool->gen_pool);
    #line 197 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 197 
      __warn_printk((char *)"cpdma_desc_pool size %zd != avail %zd",gen_pool_size(pool->gen_pool),gen_pool_avail(pool->gen_pool));
      #line 198 
      ldv_inline_asm();
      #line 199 
      ldv_inline_asm();
    }
    #line 197 
    long tmp_3 = (long)(__ret_warn_on != 0);
  }
  #line 201 
  if (pool->cpumap != (void *)0) 
                                 #line 202 
                                 dma_free_coherent(ctlr->dev,(unsigned long)pool->mem_size,pool->cpumap,pool->phys);
  #line 204 
  return;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static int cpdma_desc_pool_create(struct cpdma_ctlr *ctlr)
{
  #line 240 
  int tmp_36;
  #line 240 
  int tmp_4;
  #line 240 
  int tmp_5;
  #line 240 
  int tmp_37;
  #line 240 
  int tmp_38;
  #line 240 
  int tmp_6;
  #line 240 
  int tmp_7;
  #line 240 
  int tmp_39;
  #line 240 
  int tmp_40;
  #line 240 
  int tmp_8;
  #line 240 
  int tmp_9;
  #line 240 
  int tmp_41;
  #line 240 
  int tmp_42;
  #line 240 
  int tmp_10;
  #line 240 
  int tmp_11;
  #line 240 
  int tmp_43;
  #line 240 
  int tmp_44;
  #line 240 
  int tmp_12;
  #line 240 
  int tmp_13;
  #line 240 
  int tmp_45;
  #line 240 
  int tmp_46;
  #line 240 
  int tmp_14;
  #line 240 
  int tmp_15;
  #line 240 
  int tmp_47;
  #line 240 
  int tmp_48;
  #line 240 
  int tmp_16;
  #line 240 
  int tmp_17;
  #line 240 
  int tmp_49;
  #line 240 
  int tmp_50;
  #line 240 
  int tmp_18;
  #line 240 
  int tmp_19;
  #line 240 
  int tmp_51;
  #line 240 
  int tmp_52;
  #line 240 
  int tmp_20;
  #line 240 
  int tmp_21;
  #line 240 
  int tmp_53;
  #line 240 
  int tmp_54;
  #line 240 
  int tmp_22;
  #line 240 
  int tmp_23;
  #line 240 
  int tmp_55;
  #line 240 
  int tmp_56;
  #line 240 
  int tmp_24;
  #line 240 
  int tmp_25;
  #line 240 
  int tmp_57;
  #line 240 
  int tmp_58;
  #line 240 
  int tmp_26;
  #line 240 
  int tmp_27;
  #line 240 
  int tmp_59;
  #line 240 
  int tmp_60;
  #line 240 
  int tmp_28;
  #line 240 
  int tmp_29;
  #line 240 
  int tmp_61;
  #line 240 
  int tmp_62;
  #line 240 
  int tmp_30;
  #line 240 
  int tmp_31;
  #line 240 
  int tmp_32;
  #line 240 
  int tmp_0;
  #line 240 
  int tmp_1;
  #line 240 
  int tmp_33;
  #line 240 
  int tmp_34;
  #line 240 
  int tmp_2;
  #line 240 
  int tmp_3;
  #line 240 
  int tmp_35;
  #line 215 
  struct cpdma_desc_pool *pool;
  #line 240 
  int tmp_64;
  #line 214 
  struct cpdma_params *cpdma_params = & ctlr->params;
  #line 216 
  int ret = -12;
  #line 218 
  pool = (struct cpdma_desc_pool *)cif_devm_kzalloc_0(ctlr->dev,64UL,3264U);
  #line 219 
  if (pool == (struct cpdma_desc_pool *)0) 
                                           #line 220 
                                           goto gen_pool_create_fail;
  #line 221 
  ctlr->pool = pool;
  #line 223 
  pool->mem_size = cpdma_params->desc_mem_size;
  #line 224 
  pool->desc_size = (int)(((unsigned int)cpdma_params->desc_align + 31U) & (unsigned int)(- cpdma_params->desc_align));
  #line 226 
  pool->num_desc = pool->mem_size / pool->desc_size;
  #line 228 
  if (cpdma_params->descs_pool_size != 0U) {
    #line 234 
    pool->num_desc = (int)cpdma_params->descs_pool_size;
    #line 235 
    pool->mem_size = pool->desc_size * pool->num_desc;
    #line 236 
    if (pool->mem_size > cpdma_params->desc_mem_size) 
                                                      #line 237 
                                                      cpdma_params->desc_mem_phys = 0ULL;
  }
  #line 240 
  if (0 != 0) {
    #line 240 
    if (pool->desc_size > 1) {
      #line 240 
      if (((unsigned long long)pool->desc_size & 9223372036854775808ULL) == 0ULL) {
        #line 240 
        if (((unsigned long long)pool->desc_size & 4611686018427387904ULL) == 0ULL) {
          #line 240 
          if (((unsigned long long)pool->desc_size & 2305843009213693952ULL) == 0ULL) {
            #line 240 
            if (((unsigned long long)pool->desc_size & 1152921504606846976ULL) == 0ULL) {
              #line 240 
              if (((unsigned long long)pool->desc_size & 576460752303423488ULL) == 0ULL) {
                #line 240 
                if (((unsigned long long)pool->desc_size & 288230376151711744ULL) == 0ULL) {
                  #line 240 
                  if (((unsigned long long)pool->desc_size & 144115188075855872ULL) == 0ULL) {
                    #line 240 
                    if (((unsigned long long)pool->desc_size & 72057594037927936ULL) == 0ULL) {
                      #line 240 
                      if (((unsigned long long)pool->desc_size & 36028797018963968ULL) == 0ULL) {
                        #line 240 
                        if (((unsigned long long)pool->desc_size & 18014398509481984ULL) == 0ULL) {
                          #line 240 
                          if (((unsigned long long)pool->desc_size & 9007199254740992ULL) == 0ULL) {
                            #line 240 
                            if (((unsigned long long)pool->desc_size & 4503599627370496ULL) == 0ULL) {
                              #line 240 
                              if (((unsigned long long)pool->desc_size & 2251799813685248ULL) == 0ULL) {
                                #line 240 
                                if (((unsigned long long)pool->desc_size & 1125899906842624ULL) == 0ULL) {
                                  #line 240 
                                  if (((unsigned long long)pool->desc_size & 562949953421312ULL) == 0ULL) {
                                    #line 240 
                                    if (((unsigned long long)pool->desc_size & 281474976710656ULL) == 0ULL) {
                                      #line 240 
                                      if (((unsigned long long)pool->desc_size & 140737488355328ULL) == 0ULL) {
                                        #line 240 
                                        if (((unsigned long long)pool->desc_size & 70368744177664ULL) == 0ULL) {
                                          #line 240 
                                          if (((unsigned long long)pool->desc_size & 35184372088832ULL) == 0ULL) {
                                            #line 240 
                                            if (((unsigned long long)pool->desc_size & 17592186044416ULL) == 0ULL) {
                                              #line 240 
                                              if (((unsigned long long)pool->desc_size & 8796093022208ULL) == 0ULL) {
                                                #line 240 
                                                if (((unsigned long long)pool->desc_size & 4398046511104ULL) == 0ULL) {
                                                  #line 240 
                                                  if (((unsigned long long)pool->desc_size & 2199023255552ULL) == 0ULL) {
                                                    #line 240 
                                                    if (((unsigned long long)pool->desc_size & 1099511627776ULL) == 0ULL) {
                                                      #line 240 
                                                      if (((unsigned long long)pool->desc_size & 549755813888ULL) == 0ULL) {
                                                        #line 240 
                                                        if (((unsigned long long)pool->desc_size & 274877906944ULL) == 0ULL) {
                                                          #line 240 
                                                          if (((unsigned long long)pool->desc_size & 137438953472ULL) == 0ULL) {
                                                            #line 240 
                                                            if (((unsigned long long)pool->desc_size & 68719476736ULL) == 0ULL) {
                                                              #line 240 
                                                              if (((unsigned long long)pool->desc_size & 34359738368ULL) == 0ULL) {
                                                                #line 240 
                                                                if (((unsigned long long)pool->desc_size & 17179869184ULL) == 0ULL) {
                                                                  #line 240 
                                                                  if (
                                                                    ((unsigned long long)pool->desc_size & 8589934592ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 4294967296ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 2147483648ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 1073741824ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 536870912ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 268435456ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 134217728ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 67108864ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 33554432ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 16777216ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 8388608ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 4194304ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 2097152ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 1048576ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 524288ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 262144ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 131072ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 65536ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 32768ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 16384ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 8192ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 4096ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 2048ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 1024ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 512ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 256ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 128ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 64ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 32ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 16ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 8ULL) == 0ULL) {
                                                                    #line 240 
                                                                    if (
                                                                    ((unsigned long long)pool->desc_size & 4ULL) != 0ULL) 
                                                                    #line 240 
                                                                    tmp_0 = 2; else 
                                                                    #line 240 
                                                                    tmp_0 = 1;
                                                                    #line 240 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_1 = 3;
                                                                    #line 240 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_2 = 4;
                                                                    #line 240 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_3 = 5;
                                                                    #line 240 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_4 = 6;
                                                                    #line 240 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_5 = 7;
                                                                    #line 240 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_6 = 8;
                                                                    #line 240 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_7 = 9;
                                                                    #line 240 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_8 = 10;
                                                                    #line 240 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_9 = 11;
                                                                    #line 240 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_10 = 12;
                                                                    #line 240 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_11 = 13;
                                                                    #line 240 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_12 = 14;
                                                                    #line 240 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_13 = 15;
                                                                    #line 240 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_14 = 16;
                                                                    #line 240 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_15 = 17;
                                                                    #line 240 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_16 = 18;
                                                                    #line 240 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_17 = 19;
                                                                    #line 240 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_18 = 20;
                                                                    #line 240 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_19 = 21;
                                                                    #line 240 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_20 = 22;
                                                                    #line 240 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_21 = 23;
                                                                    #line 240 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_22 = 24;
                                                                    #line 240 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_23 = 25;
                                                                    #line 240 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_24 = 26;
                                                                    #line 240 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_25 = 27;
                                                                    #line 240 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_26 = 28;
                                                                    #line 240 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_27 = 29;
                                                                    #line 240 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_28 = 30;
                                                                    #line 240 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_29 = 31;
                                                                    #line 240 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 240 
                                                                    tmp_30 = 32;
                                                                    #line 240 
                                                                    tmp_31 = tmp_30;
                                                                  }
                                                                  else 
                                                                    #line 240 
                                                                    tmp_31 = 33;
                                                                  #line 240 
                                                                  tmp_32 = tmp_31;
                                                                }
                                                                else 
                                                                  #line 240 
                                                                  tmp_32 = 34;
                                                                #line 240 
                                                                tmp_33 = tmp_32;
                                                              }
                                                              else 
                                                                   #line 240 
                                                                   tmp_33 = 35;
                                                              #line 240 
                                                              tmp_34 = tmp_33;
                                                            }
                                                            else 
                                                                 #line 240 
                                                                 tmp_34 = 36;
                                                            #line 240 
                                                            tmp_35 = tmp_34;
                                                          }
                                                          else 
                                                               #line 240 
                                                               tmp_35 = 37;
                                                          #line 240 
                                                          tmp_36 = tmp_35;
                                                        }
                                                        else 
                                                             #line 240 
                                                             tmp_36 = 38;
                                                        #line 240 
                                                        tmp_37 = tmp_36;
                                                      }
                                                      else 
                                                           #line 240 
                                                           tmp_37 = 39;
                                                      #line 240 
                                                      tmp_38 = tmp_37;
                                                    }
                                                    else 
                                                         #line 240 
                                                         tmp_38 = 40;
                                                    #line 240 
                                                    tmp_39 = tmp_38;
                                                  }
                                                  else 
                                                       #line 240 
                                                       tmp_39 = 41;
                                                  #line 240 
                                                  tmp_40 = tmp_39;
                                                }
                                                else 
                                                     #line 240 
                                                     tmp_40 = 42;
                                                #line 240 
                                                tmp_41 = tmp_40;
                                              }
                                              else 
                                                   #line 240 
                                                   tmp_41 = 43;
                                              #line 240 
                                              tmp_42 = tmp_41;
                                            }
                                            else 
                                                 #line 240 
                                                 tmp_42 = 44;
                                            #line 240 
                                            tmp_43 = tmp_42;
                                          }
                                          else 
                                               #line 240 
                                               tmp_43 = 45;
                                          #line 240 
                                          tmp_44 = tmp_43;
                                        }
                                        else 
                                             #line 240 
                                             tmp_44 = 46;
                                        #line 240 
                                        tmp_45 = tmp_44;
                                      }
                                      else 
                                           #line 240 
                                           tmp_45 = 47;
                                      #line 240 
                                      tmp_46 = tmp_45;
                                    }
                                    else 
                                         #line 240 
                                         tmp_46 = 48;
                                    #line 240 
                                    tmp_47 = tmp_46;
                                  }
                                  else 
                                       #line 240 
                                       tmp_47 = 49;
                                  #line 240 
                                  tmp_48 = tmp_47;
                                }
                                else 
                                     #line 240 
                                     tmp_48 = 50;
                                #line 240 
                                tmp_49 = tmp_48;
                              }
                              else 
                                   #line 240 
                                   tmp_49 = 51;
                              #line 240 
                              tmp_50 = tmp_49;
                            }
                            else 
                                 #line 240 
                                 tmp_50 = 52;
                            #line 240 
                            tmp_51 = tmp_50;
                          }
                          else 
                               #line 240 
                               tmp_51 = 53;
                          #line 240 
                          tmp_52 = tmp_51;
                        }
                        else 
                             #line 240 
                             tmp_52 = 54;
                        #line 240 
                        tmp_53 = tmp_52;
                      }
                      else 
                           #line 240 
                           tmp_53 = 55;
                      #line 240 
                      tmp_54 = tmp_53;
                    }
                    else 
                         #line 240 
                         tmp_54 = 56;
                    #line 240 
                    tmp_55 = tmp_54;
                  }
                  else 
                       #line 240 
                       tmp_55 = 57;
                  #line 240 
                  tmp_56 = tmp_55;
                }
                else 
                     #line 240 
                     tmp_56 = 58;
                #line 240 
                tmp_57 = tmp_56;
              }
              else 
                   #line 240 
                   tmp_57 = 59;
              #line 240 
              tmp_58 = tmp_57;
            }
            else 
                 #line 240 
                 tmp_58 = 60;
            #line 240 
            tmp_59 = tmp_58;
          }
          else 
               #line 240 
               tmp_59 = 61;
          #line 240 
          tmp_60 = tmp_59;
        }
        else 
             #line 240 
             tmp_60 = 62;
        #line 240 
        tmp_61 = tmp_60;
      }
      else 
           #line 240 
           tmp_61 = 63;
      #line 240 
      tmp_62 = tmp_61;
    }
    else 
         #line 240 
         tmp_62 = 0;
    #line 240 
    tmp_64 = tmp_62;
  }
  else 
       #line 240 
       tmp_64 = __ilog2_u32((unsigned int)pool->desc_size);
  #line 240 
  ;
  #line 240 
  pool->gen_pool = devm_gen_pool_create(ctlr->dev,tmp_64,-1,(char *)"cpdma");
  #line 242 
  if ((int)IS_ERR((void *)pool->gen_pool) != 0) {
    #line 243 
    ret = (int)PTR_ERR((void *)pool->gen_pool);
    #line 244 
    _dev_err(ctlr->dev,(char *)"pool create failed %d\n",ret);
    #line 245 
    goto gen_pool_create_fail;
  }
  #line 248 
  if (cpdma_params->desc_mem_phys != 0ULL) {
    #line 249 
    pool->phys = cpdma_params->desc_mem_phys;
    #line 250 
    pool->iomap = devm_ioremap(ctlr->dev,pool->phys,(unsigned long long)pool->mem_size);
    #line 252 
    pool->hw_addr = cpdma_params->desc_hw_addr;
  }
  else {
    #line 254 
    pool->cpumap = dma_alloc_coherent(ctlr->dev,(unsigned long)pool->mem_size,& pool->hw_addr,3264U);
    #line 256 
    pool->iomap = pool->cpumap;
    #line 257 
    pool->phys = pool->hw_addr;
  }
  #line 260 
  if (pool->iomap == (void *)0) 
                                #line 261 
                                goto gen_pool_create_fail;
  #line 263 
  ret = gen_pool_add_virt(pool->gen_pool,(unsigned long)pool->iomap,pool->phys,(unsigned long)pool->mem_size,-1);
  #line 265 
  if (ret < 0) {
    #line 266 
    _dev_err(ctlr->dev,(char *)"pool add failed %d\n",ret);
    #line 267 
    goto gen_pool_add_virt_fail;
  }
  #line 270 
  return 0;
  #line 272 
  gen_pool_add_virt_fail: 
                          #line 272 
  ;
  #line 273 
  cpdma_desc_pool_destroy(ctlr);
  #line 274 
  gen_pool_create_fail: 
                        #line 274 
  ;
  #line 275 
  ctlr->pool = (struct cpdma_desc_pool *)0;
  #line 276 
  return ret;
}

#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
__inline static dma_addr_t desc_phys(struct cpdma_desc_pool *pool, struct cpdma_desc *desc)
{
  #line 282 
  if (desc == (struct cpdma_desc *)0) 
                                      #line 283 
                                      return 0ULL;
  #line 284 
  return (pool->hw_addr + (unsigned long long)desc) - (unsigned long long)pool->iomap;
}

#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
__inline static struct cpdma_desc *desc_from_phys(struct cpdma_desc_pool *pool, dma_addr_t dma)
{
  #line 290 
  struct cpdma_desc *tmp;
  #line 290 
  if (dma != 0ULL) 
                   #line 290 
                   tmp = (struct cpdma_desc *)(pool->iomap + (dma - pool->hw_addr)); else 
                                                                    #line 290 
                                                                    tmp = (struct cpdma_desc *)0;
  #line 290 
  return tmp;
}

#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static struct cpdma_desc *cpdma_desc_alloc(struct cpdma_desc_pool *pool)
{
  #line 296 
  return (struct cpdma_desc *)gen_pool_alloc(pool->gen_pool,(unsigned long)pool->desc_size);
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static void cpdma_desc_free(struct cpdma_desc_pool *pool, struct cpdma_desc *desc, int num_desc)
{
  #line 303 
  gen_pool_free(pool->gen_pool,(unsigned long)desc,(unsigned long)pool->desc_size);
  #line 304 
  return;
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static int _cpdma_control_set(struct cpdma_ctlr *ctlr, int control, int value)
{
  #line 309 
  u32 val;
  #line 308 
  struct cpdma_control_info *info = & controls[control];
  #line 311 
  if (! ctlr->params.has_ext_regs) 
                                   #line 312 
                                   return -524;
  #line 314 
  if (ctlr->state != (unsigned int)CPDMA_STATE_ACTIVE) 
                                                       #line 315 
                                                       return -22;
  #line 317 
  if ((unsigned int)control > 11U) 
                                   #line 318 
                                   return -2;
  #line 320 
  if (((unsigned long)info->access & 2UL) == 0UL) 
                                                  #line 321 
                                                  return -1;
  #line 323 
  val = readl(ctlr->params.dmaregs + (unsigned long)info->reg);
  #line 324 
  val = ~ (info->mask << info->shift) & val;
  #line 325 
  val = ((info->mask & (unsigned int)value) << info->shift) | val;
  #line 326 
  writel(val,ctlr->params.dmaregs + (unsigned long)info->reg);
  #line 328 
  return 0;
}

#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static int _cpdma_control_get(struct cpdma_ctlr *ctlr, int control)
{
  #line 334 
  int ret;
  #line 333 
  struct cpdma_control_info *info = & controls[control];
  #line 336 
  if (! ctlr->params.has_ext_regs) 
                                   #line 337 
                                   return -524;
  #line 339 
  if (ctlr->state != (unsigned int)CPDMA_STATE_ACTIVE) 
                                                       #line 340 
                                                       return -22;
  #line 342 
  if ((unsigned int)control > 11U) 
                                   #line 343 
                                   return -2;
  #line 345 
  if (((unsigned long)info->access & 1UL) == 0UL) 
                                                  #line 346 
                                                  return -1;
  #line 348 
  ret = (int)((readl(ctlr->params.dmaregs + (unsigned long)info->reg) >> info->shift) & info->mask);
  #line 349 
  return ret;
}

#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static int cpdma_chan_set_chan_shaper(struct cpdma_chan *chan)
{
  #line 358 
  u32 rate_reg;
  #line 359 
  u32 rmask;
  #line 360 
  int ret;
  #line 357 
  struct cpdma_ctlr *ctlr = chan->ctlr;
  #line 362 
  if (chan->rate == 0U) 
                        #line 363 
                        return 0;
  #line 365 
  rate_reg = (unsigned int)((chan->chan_num + 12) * 4);
  #line 366 
  writel(chan->rate_factor,ctlr->params.dmaregs + (unsigned long)rate_reg);
  #line 368 
  rmask = (unsigned int)_cpdma_control_get(ctlr,0);
  #line 369 
  rmask = chan->mask | rmask;
  #line 371 
  ret = _cpdma_control_set(ctlr,0,(int)rmask);
  #line 372 
  return ret;
}

#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static int cpdma_chan_on(struct cpdma_chan *chan)
{
  #line 379 
  unsigned long flags;
  #line 377 
  struct cpdma_ctlr *ctlr = chan->ctlr;
  #line 378 
  struct cpdma_desc_pool *pool = ctlr->pool;
  #line 381 
  cif___ldv_spin_lock_lock_of_cpdma_chan(& chan->lock);
  #line 382 
  if (chan->state != (unsigned int)CPDMA_STATE_IDLE) {
    #line 383 
    cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
    #line 384 
    return -16;
  }
  #line 386 
  if (ctlr->state != (unsigned int)CPDMA_STATE_ACTIVE) {
    #line 387 
    cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
    #line 388 
    return -22;
  }
  #line 390 
  writel(chan->mask,ctlr->params.dmaregs + (unsigned long)chan->int_set);
  #line 391 
  chan->state = CPDMA_STATE_ACTIVE;
  #line 392 
  if (chan->head != (struct cpdma_desc *)0) {
    #line 393 
    ;
    #line 393 
    writel((unsigned int)desc_phys(pool,chan->head),chan->hdp);
    #line 394 
    if (chan->rxfree != (void *)0) 
                                   #line 395 
                                   writel((unsigned int)chan->count,chan->rxfree);
  }
  #line 398 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
  #line 399 
  return 0;
}

#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static int cpdma_chan_fit_rate(struct cpdma_chan *ch, u32 rate, u32 *rmask, int *prio_mode)
{
  #line 410 
  struct cpdma_chan *chan;
  #line 414 
  int i;
  #line 409 
  struct cpdma_ctlr *ctlr = ch->ctlr;
  #line 411 
  u32 old_rate = ch->rate;
  #line 412 
  u32 new_rmask = 0U;
  #line 413 
  int rlim = 0;
  #line 416 
  i = 0;
  #line 416 
  while (i <= 63) {
    #line 417 
    chan = ctlr->channels[i];
    #line 418 
    if (chan == (struct cpdma_chan *)0) 
                                        #line 419 
                                        goto __Cont;
    #line 421 
    if (chan == ch) 
                    #line 422 
                    chan->rate = rate;
    #line 424 
    if (chan->rate != 0U) {
      #line 425 
      rlim = 1;
      #line 426 
      new_rmask = chan->mask | new_rmask;
      #line 427 
      goto __Cont;
    }
    #line 430 
    if (rlim != 0) 
                   #line 431 
                   goto err;
    #line 416 
    __Cont: 
            #line 416 
    i ++;
  }
  #line 434 
  *rmask = new_rmask;
  #line 435 
  *prio_mode = rlim;
  #line 436 
  return 0;
  #line 438 
  err: 
       #line 438 
  ;
  #line 439 
  ch->rate = old_rate;
  #line 440 
  _dev_err(ctlr->dev,(char *)"Upper cpdma ch%d is not rate limited\n",chan->chan_num);
  #line 442 
  return -22;
}

#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static u32 cpdma_chan_set_factors(struct cpdma_ctlr *ctlr, struct cpdma_chan *ch)
{
  #line 450 
  u32 new_rate;
  #line 450 
  u32 rate_reg;
  #line 451 
  u64 send_cnt;
  #line 451 
  u64 idle_cnt;
  #line 452 
  u32 min_send_cnt;
  #line 452 
  u32 freq;
  #line 453 
  u64 divident;
  #line 453 
  u64 divisor;
  #line 448 
  u32 delta = 4294967295U;
  #line 448 
  u32 prev_delta = 4294967295U;
  #line 448 
  u32 best_delta = 4294967295U;
  #line 449 
  u32 best_send_cnt = 0U;
  #line 449 
  u32 best_idle_cnt = 0U;
  #line 450 
  u32 best_rate = 0U;
  #line 455 
  if (ch->rate == 0U) {
    #line 456 
    ch->rate_factor = 0U;
    #line 457 
    goto set_factor;
  }
  #line 460 
  freq = ctlr->params.bus_freq_mhz * 32000U;
  #line 461 
  if (freq == 0U) {
    #line 462 
    _dev_err(ctlr->dev,(char *)"The bus frequency is not set\n");
    #line 463 
    return 4294967274U;
  }
  #line 466 
  min_send_cnt = freq - ch->rate;
  #line 467 
  send_cnt = (unsigned long long)(((ch->rate + min_send_cnt) + 4294967295U) / ch->rate);
  #line 468 
  while (send_cnt <= 16384ULL) {
    #line 475 
    unsigned long long _tmp_0;
    #line 471 
    unsigned long long _tmp;
    #line 496 
    unsigned long long _tmp_1;
    #line 469 
    divident = (unsigned long long)ch->rate * send_cnt;
    #line 470 
    divisor = (unsigned long long)min_send_cnt;
    {
      #line 471 
      u64 __d = divisor;
      #line 471 
      _tmp = __d / 2ULL + divident;
      {
        #line 471 
        uint32_t __rem;
        #line 471 
        uint32_t __base = (unsigned int)__d;
        #line 471 
        __rem = (unsigned int)(_tmp % (unsigned long long)__base);
        #line 471 
        _tmp /= (unsigned long long)__base;
        #line 471 
        uint32_t tmp = __rem;
      }
      }
    #line 471 
    idle_cnt = _tmp;
    #line 473 
    divident = (unsigned long long)freq * idle_cnt;
    #line 474 
    divisor = idle_cnt + send_cnt;
    {
      #line 475 
      u64 __d_0 = divisor;
      #line 475 
      _tmp_0 = __d_0 / 2ULL + divident;
      {
        #line 475 
        uint32_t __rem_0;
        #line 475 
        uint32_t __base_0 = (unsigned int)__d_0;
        #line 475 
        __rem_0 = (unsigned int)(_tmp_0 % (unsigned long long)__base_0);
        #line 475 
        _tmp_0 /= (unsigned long long)__base_0;
        #line 475 
        uint32_t tmp_3 = __rem_0;
      }
      }
    #line 475 
    new_rate = (unsigned int)_tmp_0;
    #line 477 
    if (ch->rate <= new_rate) 
                              #line 477 
                              delta = new_rate - ch->rate; else 
                                                                #line 477 
                                                                delta = delta;
    #line 478 
    if (delta < best_delta) {
      #line 479 
      best_delta = delta;
      #line 480 
      best_send_cnt = (unsigned int)send_cnt;
      #line 481 
      best_idle_cnt = (unsigned int)idle_cnt;
      #line 482 
      best_rate = new_rate;
      #line 484 
      if (delta == 0U) 
                       #line 485 
                       break;
    }
    #line 488 
    if (prev_delta >= delta) {
      #line 489 
      prev_delta = delta;
      #line 490 
      send_cnt ++;
      #line 491 
      continue;
    }
    #line 494 
    idle_cnt ++;
    #line 495 
    divident = (unsigned long long)freq * idle_cnt;
    {
      #line 496 
      u32 __d_1 = ch->rate;
      #line 496 
      _tmp_1 = (unsigned long long)(__d_1 / 2U) + divident;
      {
        #line 496 
        uint32_t __rem_1;
        #line 496 
        uint32_t __base_1 = __d_1;
        #line 496 
        __rem_1 = (unsigned int)(_tmp_1 % (unsigned long long)__base_1);
        #line 496 
        _tmp_1 /= (unsigned long long)__base_1;
        #line 496 
        uint32_t tmp_5 = __rem_1;
      }
      }
    #line 496 
    send_cnt = _tmp_1;
    #line 497 
    send_cnt -= idle_cnt;
    #line 498 
    prev_delta = 4294967295U;
  }
  #line 501 
  ch->rate = best_rate;
  #line 502 
  ch->rate_factor = (best_idle_cnt << 16) | best_send_cnt;
  #line 504 
  set_factor: 
              #line 504 
  ;
  #line 505 
  rate_reg = (unsigned int)((ch->chan_num + 12) * 4);
  #line 506 
  writel(ch->rate_factor,ctlr->params.dmaregs + (unsigned long)rate_reg);
  #line 507 
  return 0U;
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
struct cpdma_ctlr *cpdma_ctlr_create(struct cpdma_params *params)
{
  #line 530 
  int __ret_warn_on;
  #line 512 
  struct cpdma_ctlr *ctlr;
  #line 514 
  ctlr = (struct cpdma_ctlr *)cif_devm_kzalloc_0(params->dev,1256UL,3264U);
  #line 515 
  if (ctlr == (struct cpdma_ctlr *)0) 
                                      #line 516 
                                      return (struct cpdma_ctlr *)0;
  #line 518 
  ctlr->state = CPDMA_STATE_IDLE;
  #line 519 
  ctlr->params = *params;
  #line 520 
  ctlr->dev = params->dev;
  #line 521 
  ctlr->chan_num = 0;
  #line 522 
  spinlock_check(& ctlr->lock);
  {
    #line 522 
    struct lock_class_key __key;
    #line 522 
    __raw_spin_lock_init(& ctlr->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&ctlr->lock)->rlock",& __key);
  }
  #line 524 
  if (cpdma_desc_pool_create(ctlr) != 0) 
                                         #line 525 
                                         return (struct cpdma_ctlr *)0;
  #line 527 
  ctlr->num_tx_desc = (ctlr->pool)->num_desc / 2;
  #line 528 
  ctlr->num_rx_desc = (ctlr->pool)->num_desc - ctlr->num_tx_desc;
  #line 530 
  __ret_warn_on = ctlr->params.num_chan > 64;
  #line 530 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 531 
    ldv_inline_asm();
    #line 532 
    ldv_inline_asm();
  }
  #line 530 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 531 
                                                ctlr->params.num_chan = 64;
  #line 532 
  return ctlr;
}

#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_ctlr_start(struct cpdma_ctlr *ctlr)
{
  #line 537 
  struct cpdma_chan *chan;
  #line 538 
  unsigned long flags;
  #line 539 
  int i;
  #line 539 
  int prio_mode;
  #line 541 
  cif___ldv_spin_lock_lock_of_cpdma_ctlr(& ctlr->lock);
  #line 542 
  if (ctlr->state != (unsigned int)CPDMA_STATE_IDLE) {
    #line 543 
    cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
    #line 544 
    return -16;
  }
  #line 547 
  if ((int)ctlr->params.has_soft_reset != 0) {
    #line 548 
    unsigned int timeout = 1000U;
    #line 550 
    writel(1U,ctlr->params.dmaregs + 28U);
    #line 551 
    while (timeout != 0U) {
      #line 552 
      if (readl(ctlr->params.dmaregs + 28U) == 0U) 
                                                   #line 553 
                                                   break;
      #line 554 
      __const_udelay(42950UL);
      #line 555 
      timeout --;
    }
    {
      #line 557 
      int __ret_warn_on = timeout == 0U;
      #line 557 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 558 
        ldv_inline_asm();
        #line 559 
        ldv_inline_asm();
      }
      #line 557 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
  }
  #line 560 
  i = 0;
  #line 560 
  while (ctlr->params.num_chan > i) {
    #line 561 
    writel(0U,ctlr->params.txhdp + (unsigned long)(i * 4));
    #line 562 
    writel(0U,ctlr->params.rxhdp + (unsigned long)(i * 4));
    #line 563 
    writel(0U,ctlr->params.txcp + (unsigned long)(i * 4));
    #line 564 
    writel(0U,ctlr->params.rxcp + (unsigned long)(i * 4));
    #line 560 
    i ++;
  }
  #line 567 
  writel(4294967295U,ctlr->params.dmaregs + 172U);
  #line 568 
  writel(4294967295U,ctlr->params.dmaregs + 140U);
  #line 570 
  writel(1U,ctlr->params.dmaregs + 4U);
  #line 571 
  writel(1U,ctlr->params.dmaregs + 20U);
  #line 573 
  ctlr->state = CPDMA_STATE_ACTIVE;
  #line 575 
  prio_mode = 0;
  #line 576 
  i = 0;
  #line 576 
  while ((unsigned int)i <= 127U) {
    #line 577 
    chan = ctlr->channels[i];
    #line 578 
    if (chan != (struct cpdma_chan *)0) {
      #line 579 
      cpdma_chan_set_chan_shaper(chan);
      #line 580 
      cpdma_chan_on(chan);
      #line 583 
      if (chan->chan_num <= 63 && chan->rate == 0U) 
                                                    #line 584 
                                                    prio_mode = 1;
    }
    #line 576 
    i ++;
  }
  #line 588 
  _cpdma_control_set(ctlr,5,prio_mode);
  #line 589 
  _cpdma_control_set(ctlr,11,0);
  #line 591 
  cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
  #line 592 
  return 0;
}

#line 595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_ctlr_stop(struct cpdma_ctlr *ctlr)
{
  #line 597 
  unsigned long flags;
  #line 598 
  int i;
  #line 600 
  cif___ldv_spin_lock_lock_of_cpdma_ctlr(& ctlr->lock);
  #line 601 
  if (ctlr->state != (unsigned int)CPDMA_STATE_ACTIVE) {
    #line 602 
    cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
    #line 603 
    return -22;
  }
  #line 606 
  ctlr->state = CPDMA_STATE_TEARDOWN;
  #line 607 
  cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
  #line 609 
  i = 0;
  #line 609 
  while ((unsigned int)i <= 127U) {
    #line 610 
    if (ctlr->channels[i] != (struct cpdma_chan *)0) 
                                                     #line 611 
                                                     cpdma_chan_stop(ctlr->channels[i]);
    #line 609 
    i ++;
  }
  #line 614 
  cif___ldv_spin_lock_lock_of_cpdma_ctlr(& ctlr->lock);
  #line 615 
  writel(4294967295U,ctlr->params.dmaregs + 172U);
  #line 616 
  writel(4294967295U,ctlr->params.dmaregs + 140U);
  #line 618 
  writel(0U,ctlr->params.dmaregs + 4U);
  #line 619 
  writel(0U,ctlr->params.dmaregs + 20U);
  #line 621 
  ctlr->state = CPDMA_STATE_IDLE;
  #line 623 
  cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
  #line 624 
  return 0;
}

#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_ctlr_destroy(struct cpdma_ctlr *ctlr)
{
  #line 629 
  int i;
  #line 629 
  int ret = 0;
  #line 631 
  if (ctlr == (struct cpdma_ctlr *)0) 
                                      #line 632 
                                      return -22;
  #line 634 
  if (ctlr->state != (unsigned int)CPDMA_STATE_IDLE) 
                                                     #line 635 
                                                     cpdma_ctlr_stop(ctlr);
  #line 637 
  i = 0;
  #line 637 
  while ((unsigned int)i <= 127U) {
    #line 638 
    cpdma_chan_destroy(ctlr->channels[i]);
    #line 637 
    i ++;
  }
  #line 640 
  cpdma_desc_pool_destroy(ctlr);
  #line 641 
  return ret;
}

#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_ctlr_int_ctrl(struct cpdma_ctlr *ctlr, bool enable)
{
  #line 646 
  unsigned long flags;
  #line 647 
  int i;
  #line 649 
  cif___ldv_spin_lock_lock_of_cpdma_ctlr(& ctlr->lock);
  #line 650 
  if (ctlr->state != (unsigned int)CPDMA_STATE_ACTIVE) {
    #line 651 
    cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
    #line 652 
    return -22;
  }
  #line 655 
  i = 0;
  #line 655 
  while ((unsigned int)i <= 127U) {
    #line 656 
    if (ctlr->channels[i] != (struct cpdma_chan *)0) 
                                                     #line 657 
                                                     cpdma_chan_int_ctrl(ctlr->channels[i],(_Bool)((bool)((int)enable) != 0));
    #line 655 
    i ++;
  }
  #line 660 
  cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
  #line 661 
  return 0;
}

#line 664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
void cpdma_ctlr_eoi(struct cpdma_ctlr *ctlr, u32 value)
{
  #line 666 
  writel(value,ctlr->params.dmaregs + 148U);
  #line 667 
  return;
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
u32 cpdma_ctrl_rxchs_state(struct cpdma_ctlr *ctlr)
{
  #line 671 
  return readl(ctlr->params.dmaregs + 164U);
}

#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
u32 cpdma_ctrl_txchs_state(struct cpdma_ctlr *ctlr)
{
  #line 676 
  return readl(ctlr->params.dmaregs + 132U);
}

#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static void cpdma_chan_set_descs(struct cpdma_ctlr *ctlr, int rx, int desc_num, int per_ch_desc)
{
  #line 683 
  struct cpdma_chan *chan;
  #line 686 
  int min;
  #line 686 
  int max;
  #line 686 
  int i;
  #line 683 
  struct cpdma_chan *most_chan = (struct cpdma_chan *)0;
  #line 684 
  int desc_cnt = desc_num;
  #line 685 
  int most_dnum = 0;
  #line 688 
  if (desc_num == 0) 
                     #line 689 
                     return;
  #line 691 
  if (rx != 0) {
    #line 692 
    min = 64;
    #line 693 
    max = 128;
  }
  else {
    #line 695 
    min = 0;
    #line 696 
    max = 64;
  }
  #line 699 
  i = min;
  #line 699 
  while (i < max) {
    #line 700 
    chan = ctlr->channels[i];
    #line 701 
    if (chan == (struct cpdma_chan *)0) 
                                        #line 702 
                                        goto __Cont;
    #line 704 
    if (chan->weight != 0) 
                           #line 705 
                           chan->desc_num = (unsigned int)((chan->weight * desc_num) / 100); else 
                                                                    #line 707 
                                                                    chan->desc_num = (unsigned int)per_ch_desc;
    #line 709 
    desc_cnt = (int)((unsigned int)desc_cnt - chan->desc_num);
    #line 711 
    if (chan->desc_num > (unsigned int)most_dnum) {
      #line 712 
      most_dnum = (int)chan->desc_num;
      #line 713 
      most_chan = chan;
    }
    #line 699 
    __Cont: 
            #line 699 
    i ++;
  }
  #line 717 
  if (most_chan != (struct cpdma_chan *)0) 
                                           #line 718 
                                           most_chan->desc_num += (unsigned int)desc_cnt;
  #line 719 
  return;
}

#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static int cpdma_chan_split_pool(struct cpdma_ctlr *ctlr)
{
  #line 730 
  int tx_desc_num;
  #line 730 
  int rx_desc_num;
  #line 731 
  struct cpdma_chan *chan;
  #line 732 
  int i;
  #line 727 
  int tx_per_ch_desc = 0;
  #line 727 
  int rx_per_ch_desc = 0;
  #line 728 
  int free_rx_num = 0;
  #line 728 
  int free_tx_num = 0;
  #line 729 
  int rx_weight = 0;
  #line 729 
  int tx_weight = 0;
  #line 734 
  if (ctlr->chan_num == 0) 
                           #line 735 
                           return 0;
  #line 737 
  i = 0;
  #line 737 
  while ((unsigned int)i <= 127U) {
    #line 738 
    chan = ctlr->channels[i];
    #line 739 
    if (chan == (struct cpdma_chan *)0) 
                                        #line 740 
                                        goto __Cont;
    #line 742 
    if (chan->chan_num > 63) {
      #line 743 
      if (chan->weight == 0) 
                             #line 744 
                             free_rx_num ++;
      #line 745 
      rx_weight = chan->weight + rx_weight;
    }
    else {
      #line 747 
      if (chan->weight == 0) 
                             #line 748 
                             free_tx_num ++;
      #line 749 
      tx_weight = chan->weight + tx_weight;
    }
    #line 737 
    __Cont: 
            #line 737 
    i ++;
  }
  #line 753 
  if (rx_weight > 100 || tx_weight > 100) 
                                          #line 754 
                                          return -22;
  #line 756 
  tx_desc_num = ctlr->num_tx_desc;
  #line 757 
  rx_desc_num = ctlr->num_rx_desc;
  #line 759 
  if (free_tx_num != 0) {
    #line 760 
    tx_per_ch_desc = (tx_weight * tx_desc_num) / -100 + tx_desc_num;
    #line 761 
    tx_per_ch_desc /= free_tx_num;
  }
  #line 763 
  if (free_rx_num != 0) {
    #line 764 
    rx_per_ch_desc = (rx_weight * rx_desc_num) / -100 + rx_desc_num;
    #line 765 
    rx_per_ch_desc /= free_rx_num;
  }
  #line 768 
  cpdma_chan_set_descs(ctlr,0,tx_desc_num,tx_per_ch_desc);
  #line 769 
  cpdma_chan_set_descs(ctlr,1,rx_desc_num,rx_per_ch_desc);
  #line 771 
  return 0;
}

#line 784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_set_weight(struct cpdma_chan *ch, int weight)
{
  #line 787 
  unsigned long flags;
  #line 787 
  unsigned long ch_flags;
  #line 788 
  int ret;
  #line 786 
  struct cpdma_ctlr *ctlr = ch->ctlr;
  #line 790 
  cif___ldv_spin_lock_lock_of_cpdma_ctlr(& ctlr->lock);
  #line 791 
  cif___ldv_spin_lock_lock_of_cpdma_chan(& ch->lock);
  #line 792 
  if (ch->weight == weight) {
    #line 793 
    cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& ch->lock,ch_flags);
    #line 794 
    cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
    #line 795 
    return 0;
  }
  #line 797 
  ch->weight = weight;
  #line 798 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& ch->lock,ch_flags);
  #line 801 
  ret = cpdma_chan_split_pool(ctlr);
  #line 802 
  cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
  #line 803 
  return ret;
}

#line 810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
u32 cpdma_chan_get_min_rate(struct cpdma_ctlr *ctlr)
{
  #line 812 
  unsigned int divident;
  #line 812 
  unsigned int divisor;
  #line 814 
  divident = ctlr->params.bus_freq_mhz * 32000U;
  #line 815 
  divisor = 16385U;
  #line 817 
  return ((divident + divisor) + 4294967295U) / divisor;
}

#line 825  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_set_rate(struct cpdma_chan *ch, u32 rate)
{
  #line 827 
  unsigned long flags;
  #line 827 
  unsigned long ch_flags;
  #line 828 
  struct cpdma_ctlr *ctlr;
  #line 829 
  int ret;
  #line 829 
  int prio_mode;
  #line 830 
  u32 rmask;
  #line 832 
  if (ch == (struct cpdma_chan *)0 || ch->chan_num > 63) 
                                                         #line 833 
                                                         return -22;
  #line 835 
  if (ch->rate == rate) 
                        #line 836 
                        return (int)rate;
  #line 838 
  ctlr = ch->ctlr;
  #line 839 
  cif___ldv_spin_lock_lock_of_cpdma_ctlr(& ctlr->lock);
  #line 840 
  cif___ldv_spin_lock_lock_of_cpdma_chan(& ch->lock);
  #line 842 
  ret = cpdma_chan_fit_rate(ch,rate,& rmask,& prio_mode);
  #line 843 
  if (ret != 0) 
                #line 844 
                goto err;
  #line 846 
  ret = (int)cpdma_chan_set_factors(ctlr,ch);
  #line 847 
  if (ret != 0) 
                #line 848 
                goto err;
  #line 850 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& ch->lock,ch_flags);
  #line 853 
  _cpdma_control_set(ctlr,0,(int)rmask);
  #line 854 
  _cpdma_control_set(ctlr,5,prio_mode);
  #line 855 
  cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
  #line 856 
  return ret;
  #line 858 
  err: 
       #line 858 
  ;
  #line 859 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& ch->lock,ch_flags);
  #line 860 
  cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
  #line 861 
  return ret;
}

#line 864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
u32 cpdma_chan_get_rate(struct cpdma_chan *ch)
{
  #line 866 
  unsigned long flags;
  #line 867 
  u32 rate;
  #line 869 
  cif___ldv_spin_lock_lock_of_cpdma_chan(& ch->lock);
  #line 870 
  rate = ch->rate;
  #line 871 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& ch->lock,flags);
  #line 873 
  return rate;
}

#line 876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
struct cpdma_chan *cpdma_chan_create(struct cpdma_ctlr *ctlr, int chan_num, void (*handler)(void *, int , int ), int rx_type)
{
  #line 880 
  struct cpdma_chan *chan;
  #line 881 
  unsigned long flags;
  #line 879 
  int offset = chan_num * 4;
  #line 883 
  if (rx_type != 0) 
                    #line 883 
                    chan_num += 64; else 
                                         #line 883 
                                         chan_num = chan_num;
  #line 885 
  if ((chan_num & 63) >= ctlr->params.num_chan) {
    #line 886 
    return (struct cpdma_chan *)ERR_PTR_0(-22L);
  }
  #line 888 
  chan = (struct cpdma_chan *)cif_devm_kzalloc_0(ctlr->dev,240UL,3264U);
  #line 889 
  if (chan == (struct cpdma_chan *)0) {
    #line 890 
    return (struct cpdma_chan *)ERR_PTR_0(-12L);
  }
  #line 892 
  cif___ldv_spin_lock_lock_of_cpdma_ctlr(& ctlr->lock);
  #line 893 
  if (ctlr->channels[chan_num] != (struct cpdma_chan *)0) {
    #line 894 
    cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
    #line 895 
    devm_kfree(ctlr->dev,(void *)chan);
    #line 896 
    return (struct cpdma_chan *)ERR_PTR_0(-16L);
  }
  #line 899 
  chan->ctlr = ctlr;
  #line 900 
  chan->state = CPDMA_STATE_IDLE;
  #line 901 
  chan->chan_num = chan_num;
  #line 902 
  chan->handler = handler;
  #line 903 
  chan->rate = 0U;
  #line 904 
  chan->weight = 0;
  #line 906 
  if (chan->chan_num > 63) {
    #line 907 
    chan->hdp = ctlr->params.rxhdp + (unsigned long)offset;
    #line 908 
    chan->cp = ctlr->params.rxcp + (unsigned long)offset;
    #line 909 
    chan->rxfree = ctlr->params.rxfree + (unsigned long)offset;
    #line 910 
    chan->int_set = 168;
    #line 911 
    chan->int_clear = 172;
    #line 912 
    chan->td = 24;
    #line 913 
    chan->dir = DMA_FROM_DEVICE;
  }
  else {
    #line 915 
    chan->hdp = ctlr->params.txhdp + (unsigned long)offset;
    #line 916 
    chan->cp = ctlr->params.txcp + (unsigned long)offset;
    #line 917 
    chan->int_set = 136;
    #line 918 
    chan->int_clear = 140;
    #line 919 
    chan->td = 8;
    #line 920 
    chan->dir = DMA_TO_DEVICE;
  }
  #line 922 
  chan->mask = (unsigned int)(1UL << (chan->chan_num & 63));
  #line 924 
  spinlock_check(& chan->lock);
  {
    #line 924 
    struct lock_class_key __key;
    #line 924 
    __raw_spin_lock_init(& chan->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&chan->lock)->rlock",& __key);
  }
  #line 926 
  ctlr->channels[chan_num] = chan;
  #line 927 
  (ctlr->chan_num) ++;
  #line 929 
  cpdma_chan_split_pool(ctlr);
  #line 931 
  cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
  #line 932 
  return chan;
}

#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_get_rx_buf_num(struct cpdma_chan *chan)
{
  #line 937 
  unsigned long flags;
  #line 938 
  int desc_num;
  #line 940 
  cif___ldv_spin_lock_lock_of_cpdma_chan(& chan->lock);
  #line 941 
  desc_num = (int)chan->desc_num;
  #line 942 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
  #line 944 
  return desc_num;
}

#line 947  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_destroy(struct cpdma_chan *chan)
{
  #line 949 
  struct cpdma_ctlr *ctlr;
  #line 950 
  unsigned long flags;
  #line 952 
  if (chan == (struct cpdma_chan *)0) 
                                      #line 953 
                                      return -22;
  #line 954 
  ctlr = chan->ctlr;
  #line 956 
  cif___ldv_spin_lock_lock_of_cpdma_ctlr(& ctlr->lock);
  #line 957 
  if (chan->state != (unsigned int)CPDMA_STATE_IDLE) 
                                                     #line 958 
                                                     cpdma_chan_stop(chan);
  #line 959 
  ctlr->channels[chan->chan_num] = (struct cpdma_chan *)0;
  #line 960 
  (ctlr->chan_num) --;
  #line 961 
  devm_kfree(ctlr->dev,(void *)chan);
  #line 962 
  cpdma_chan_split_pool(ctlr);
  #line 964 
  cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
  #line 965 
  return 0;
}

#line 968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_get_stats(struct cpdma_chan *chan, struct cpdma_chan_stats *stats)
{
  #line 971 
  unsigned long flags;
  #line 972 
  if (chan == (struct cpdma_chan *)0) 
                                      #line 973 
                                      return -22;
  #line 974 
  cif___ldv_spin_lock_lock_of_cpdma_chan(& chan->lock);
  #line 975 
  memcpy((void *)stats,(void *)(& chan->stats),52UL);
  #line 976 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
  #line 977 
  return 0;
}

#line 980  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static void __cpdma_chan_submit(struct cpdma_chan *chan, struct cpdma_desc *desc)
{
  #line 986 
  dma_addr_t desc_dma;
  #line 987 
  u32 mode;
  #line 983 
  struct cpdma_ctlr *ctlr = chan->ctlr;
  #line 984 
  struct cpdma_desc *prev = chan->tail;
  #line 985 
  struct cpdma_desc_pool *pool = ctlr->pool;
  #line 989 
  desc_dma = desc_phys(pool,desc);
  #line 992 
  if (chan->head == (struct cpdma_desc *)0) {
    #line 993 
    (chan->stats.head_enqueue) ++;
    #line 994 
    chan->head = desc;
    #line 995 
    chan->tail = desc;
    #line 996 
    if (chan->state == (unsigned int)CPDMA_STATE_ACTIVE) 
                                                         #line 997 
                                                         writel((unsigned int)desc_dma,chan->hdp);
    #line 998 
    return;
  }
  #line 1002 
  writel((unsigned int)desc_dma,(void *)(& prev->hw_next));
  #line 1003 
  chan->tail = desc;
  #line 1004 
  (chan->stats.tail_enqueue) ++;
  #line 1007 
  mode = readl((void *)(& prev->hw_mode));
  #line 1008 
  if (((unsigned long)mode & 805306368UL) == 268435456UL && chan->state == (unsigned int)CPDMA_STATE_ACTIVE) {
    #line 1010 
    writel(mode & 4026531839U,(void *)(& prev->hw_mode));
    #line 1011 
    writel((unsigned int)desc_dma,chan->hdp);
    #line 1012 
    (chan->stats.misqueued) ++;
  }
  #line 1014 
  return;
}

#line 1016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static int cpdma_chan_submit_si(struct submit_info *si)
{
  #line 1021 
  struct cpdma_desc *desc;
  #line 1022 
  dma_addr_t buffer;
  #line 1023 
  u32 mode;
  #line 1024 
  int ret;
  #line 1066 
  unsigned int tmp;
  #line 1018 
  struct cpdma_chan *chan = si->chan;
  #line 1019 
  struct cpdma_ctlr *ctlr = chan->ctlr;
  #line 1020 
  int len = si->len;
  #line 1026 
  if ((unsigned int)chan->count >= chan->desc_num) {
    #line 1027 
    (chan->stats.desc_alloc_fail) ++;
    #line 1028 
    return -12;
  }
  #line 1031 
  desc = cpdma_desc_alloc(ctlr->pool);
  #line 1032 
  if (desc == (struct cpdma_desc *)0) {
    #line 1033 
    (chan->stats.desc_alloc_fail) ++;
    #line 1034 
    return -12;
  }
  #line 1037 
  if (ctlr->params.min_packet_size > len) {
    #line 1038 
    len = ctlr->params.min_packet_size;
    #line 1039 
    (chan->stats.runt_transmit_buff) ++;
  }
  #line 1042 
  mode = 3758096384U;
  #line 1043 
  if (chan->chan_num <= 63 && (unsigned int)si->directed + 4294967295U <= 1U) 
    #line 1043 
    mode = ((unsigned int)(si->directed << 16) | mode) | 1048576U;
  #line 1045 
  if (si->data_dma != 0ULL) {
    #line 1046 
    buffer = si->data_dma;
    #line 1047 
    dma_sync_single_for_device(ctlr->dev,buffer,(unsigned long)len,chan->dir);
  }
  else {
    #line 1049 
    buffer = dma_map_single_attrs(ctlr->dev,si->data_virt,(unsigned long)len,chan->dir,0UL);
    #line 1050 
    ret = dma_mapping_error(ctlr->dev,buffer);
    #line 1051 
    if (ret != 0) {
      #line 1052 
      cpdma_desc_free(ctlr->pool,desc,1);
      #line 1053 
      return -22;
    }
  }
  #line 1060 
  writel(0U,(void *)(& desc->hw_next));
  #line 1061 
  writel((unsigned int)buffer,(void *)(& desc->hw_buffer));
  #line 1062 
  writel((unsigned int)len,(void *)(& desc->hw_len));
  #line 1063 
  writel(mode | (unsigned int)len,(void *)(& desc->hw_mode));
  #line 1064 
  writel((unsigned int)((long)si->token),(void *)(& desc->sw_token));
  #line 1065 
  writel((unsigned int)buffer,(void *)(& desc->sw_buffer));
  #line 1066 
  ;
  #line 1066 
  if (si->data_dma != 0ULL) 
                            #line 1066 
                            tmp = (unsigned int)(len | 65536); else 
                                                                    #line 1066 
                                                                    tmp = (unsigned int)len;
  #line 1066 
  writel(tmp,(void *)(& desc->sw_len));
  #line 1068 
  readl((void *)(& desc->sw_len));
  #line 1070 
  __cpdma_chan_submit(chan,desc);
  #line 1072 
  if (chan->state == (unsigned int)CPDMA_STATE_ACTIVE && chan->rxfree != (void *)0) 
    #line 1073 
    writel(1U,chan->rxfree);
  #line 1075 
  (chan->count) ++;
  #line 1076 
  return 0;
}

#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_idle_submit(struct cpdma_chan *chan, void *token, void *data, int len, int directed)
{
  #line 1082 
  struct submit_info si;
  #line 1083 
  unsigned long flags;
  #line 1084 
  int ret;
  #line 1086 
  si.chan = chan;
  #line 1087 
  si.token = token;
  #line 1088 
  si.data_virt = data;
  #line 1089 
  si.data_dma = 0ULL;
  #line 1090 
  si.len = len;
  #line 1091 
  si.directed = directed;
  #line 1093 
  cif___ldv_spin_lock_lock_of_cpdma_chan(& chan->lock);
  #line 1094 
  if (chan->state == (unsigned int)CPDMA_STATE_TEARDOWN) {
    #line 1095 
    cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
    #line 1096 
    return -22;
  }
  #line 1099 
  ret = cpdma_chan_submit_si(& si);
  #line 1100 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
  #line 1101 
  return ret;
}

#line 1104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_idle_submit_mapped(struct cpdma_chan *chan, void *token, dma_addr_t data, int len, int directed)
{
  #line 1107 
  struct submit_info si;
  #line 1108 
  unsigned long flags;
  #line 1109 
  int ret;
  #line 1111 
  si.chan = chan;
  #line 1112 
  si.token = token;
  #line 1113 
  si.data_virt = (void *)0;
  #line 1114 
  si.data_dma = data;
  #line 1115 
  si.len = len;
  #line 1116 
  si.directed = directed;
  #line 1118 
  cif___ldv_spin_lock_lock_of_cpdma_chan(& chan->lock);
  #line 1119 
  if (chan->state == (unsigned int)CPDMA_STATE_TEARDOWN) {
    #line 1120 
    cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
    #line 1121 
    return -22;
  }
  #line 1124 
  ret = cpdma_chan_submit_si(& si);
  #line 1125 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
  #line 1126 
  return ret;
}

#line 1129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_submit(struct cpdma_chan *chan, void *token, void *data, int len, int directed)
{
  #line 1132 
  struct submit_info si;
  #line 1133 
  unsigned long flags;
  #line 1134 
  int ret;
  #line 1136 
  si.chan = chan;
  #line 1137 
  si.token = token;
  #line 1138 
  si.data_virt = data;
  #line 1139 
  si.data_dma = 0ULL;
  #line 1140 
  si.len = len;
  #line 1141 
  si.directed = directed;
  #line 1143 
  cif___ldv_spin_lock_lock_of_cpdma_chan(& chan->lock);
  #line 1144 
  if (chan->state != (unsigned int)CPDMA_STATE_ACTIVE) {
    #line 1145 
    cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
    #line 1146 
    return -22;
  }
  #line 1149 
  ret = cpdma_chan_submit_si(& si);
  #line 1150 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
  #line 1151 
  return ret;
}

#line 1154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_submit_mapped(struct cpdma_chan *chan, void *token, dma_addr_t data, int len, int directed)
{
  #line 1157 
  struct submit_info si;
  #line 1158 
  unsigned long flags;
  #line 1159 
  int ret;
  #line 1161 
  si.chan = chan;
  #line 1162 
  si.token = token;
  #line 1163 
  si.data_virt = (void *)0;
  #line 1164 
  si.data_dma = data;
  #line 1165 
  si.len = len;
  #line 1166 
  si.directed = directed;
  #line 1168 
  cif___ldv_spin_lock_lock_of_cpdma_chan(& chan->lock);
  #line 1169 
  if (chan->state != (unsigned int)CPDMA_STATE_ACTIVE) {
    #line 1170 
    cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
    #line 1171 
    return -22;
  }
  #line 1174 
  ret = cpdma_chan_submit_si(& si);
  #line 1175 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
  #line 1176 
  return ret;
}

#line 1179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
bool cpdma_check_free_tx_desc(struct cpdma_chan *chan)
{
  #line 1183 
  bool free_tx_desc;
  #line 1184 
  unsigned long flags;
  #line 1187 
  int tmp_0;
  #line 1181 
  struct cpdma_ctlr *ctlr = chan->ctlr;
  #line 1182 
  struct cpdma_desc_pool *pool = ctlr->pool;
  #line 1186 
  cif___ldv_spin_lock_lock_of_cpdma_chan(& chan->lock);
  #line 1187 
  if ((unsigned int)chan->count < chan->desc_num) {
    #line 1187 
    if (gen_pool_avail(pool->gen_pool) != 0UL) 
                                               #line 1187 
                                               tmp_0 = 1; else 
                                                               #line 1187 
                                                               tmp_0 = 0;
  }
  else 
       #line 1187 
       tmp_0 = 0;
  #line 1187 
  free_tx_desc = (_Bool)(tmp_0 != 0);
  #line 1189 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
  #line 1190 
  return free_tx_desc;
}

#line 1193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static void __cpdma_chan_free(struct cpdma_chan *chan, struct cpdma_desc *desc, int outlen, int status)
{
  #line 1199 
  dma_addr_t buff_dma;
  #line 1200 
  int origlen;
  #line 1201 
  uintptr_t token;
  #line 1197 
  struct cpdma_ctlr *ctlr = chan->ctlr;
  #line 1198 
  struct cpdma_desc_pool *pool = ctlr->pool;
  #line 1203 
  token = (unsigned long)readl((void *)(& desc->sw_token));
  #line 1204 
  origlen = (int)readl((void *)(& desc->sw_len));
  #line 1206 
  buff_dma = (unsigned long long)readl((void *)(& desc->sw_buffer));
  #line 1207 
  if (((unsigned long)origlen & 65536UL) != 0UL) {
    #line 1208 
    origlen &= -65537;
    #line 1209 
    dma_sync_single_for_cpu(ctlr->dev,buff_dma,(unsigned long)origlen,chan->dir);
  }
  else 
       #line 1212 
       dma_unmap_single_attrs(ctlr->dev,buff_dma,(unsigned long)origlen,chan->dir,0UL);
  #line 1215 
  cpdma_desc_free(pool,desc,1);
  #line 1216 
  (*(chan->handler))((void *)token,outlen,status);
  #line 1217 
  return;
}

#line 1219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
static int __cpdma_chan_process(struct cpdma_chan *chan)
{
  #line 1222 
  struct cpdma_desc *desc;
  #line 1223 
  int status;
  #line 1223 
  int outlen;
  #line 1226 
  dma_addr_t desc_dma;
  #line 1227 
  unsigned long flags;
  #line 1221 
  struct cpdma_ctlr *ctlr = chan->ctlr;
  #line 1224 
  int cb_status = 0;
  #line 1225 
  struct cpdma_desc_pool *pool = ctlr->pool;
  #line 1229 
  cif___ldv_spin_lock_lock_of_cpdma_chan(& chan->lock);
  #line 1231 
  desc = chan->head;
  #line 1232 
  if (desc == (struct cpdma_desc *)0) {
    #line 1233 
    (chan->stats.empty_dequeue) ++;
    #line 1234 
    status = -2;
    #line 1235 
    goto unlock_ret;
  }
  #line 1237 
  desc_dma = desc_phys(pool,desc);
  #line 1239 
  status = (int)readl((void *)(& desc->hw_mode));
  #line 1240 
  outlen = status & 2047;
  #line 1241 
  if (((unsigned long)status & 536870912UL) != 0UL) {
    #line 1242 
    (chan->stats.busy_dequeue) ++;
    #line 1243 
    status = -16;
    #line 1244 
    goto unlock_ret;
  }
  #line 1247 
  if (((unsigned long)status & 67108864UL) != 0UL) 
                                                   #line 1248 
                                                   outlen += -4;
  #line 1250 
  status &= 403636224;
  #line 1253 
  ;
  #line 1253 
  chan->head = desc_from_phys(pool,(unsigned long long)readl((void *)(& desc->hw_next)));
  #line 1254 
  writel((unsigned int)desc_dma,chan->cp);
  #line 1255 
  (chan->count) --;
  #line 1256 
  (chan->stats.good_dequeue) ++;
  #line 1258 
  if (((unsigned long)status & 268435456UL) != 0UL && chan->head != (struct cpdma_desc *)0) {
    #line 1259 
    (chan->stats.requeue) ++;
    #line 1260 
    ;
    #line 1260 
    writel((unsigned int)desc_phys(pool,chan->head),chan->hdp);
  }
  #line 1263 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
  #line 1264 
  if ((long)(((unsigned long)status & 134217728UL) != 0UL) != 0L) 
                                                                  #line 1265 
                                                                  cb_status = -38; else 
                                                                    #line 1267 
                                                                    cb_status = status;
  #line 1269 
  __cpdma_chan_free(chan,desc,outlen,cb_status);
  #line 1270 
  return status;
  #line 1272 
  unlock_ret: 
              #line 1272 
  ;
  #line 1273 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
  #line 1274 
  return status;
}

#line 1277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_process(struct cpdma_chan *chan, int quota)
{
  #line 1279 
  int used = 0;
  #line 1279 
  int ret = 0;
  #line 1281 
  if (chan->state != (unsigned int)CPDMA_STATE_ACTIVE) 
                                                       #line 1282 
                                                       return -22;
  #line 1284 
  while (used < quota) {
    #line 1285 
    ret = __cpdma_chan_process(chan);
    #line 1286 
    if (ret < 0) 
                 #line 1287 
                 break;
    #line 1288 
    used ++;
  }
  #line 1290 
  return used;
}

#line 1293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_start(struct cpdma_chan *chan)
{
  #line 1296 
  unsigned long flags;
  #line 1297 
  int ret;
  #line 1295 
  struct cpdma_ctlr *ctlr = chan->ctlr;
  #line 1299 
  cif___ldv_spin_lock_lock_of_cpdma_ctlr(& ctlr->lock);
  #line 1300 
  ret = cpdma_chan_set_chan_shaper(chan);
  #line 1301 
  cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
  #line 1302 
  if (ret != 0) 
                #line 1303 
                return ret;
  #line 1305 
  ret = cpdma_chan_on(chan);
  #line 1306 
  if (ret != 0) 
                #line 1307 
                return ret;
  #line 1309 
  return 0;
}

#line 1312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_stop(struct cpdma_chan *chan)
{
  #line 1316 
  unsigned long flags;
  #line 1317 
  int ret;
  #line 1318 
  unsigned int timeout;
  #line 1314 
  struct cpdma_ctlr *ctlr = chan->ctlr;
  #line 1315 
  struct cpdma_desc_pool *pool = ctlr->pool;
  #line 1320 
  cif___ldv_spin_lock_lock_of_cpdma_chan(& chan->lock);
  #line 1321 
  if (chan->state == (unsigned int)CPDMA_STATE_TEARDOWN) {
    #line 1322 
    cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
    #line 1323 
    return -22;
  }
  #line 1326 
  chan->state = CPDMA_STATE_TEARDOWN;
  #line 1327 
  writel(chan->mask,ctlr->params.dmaregs + (unsigned long)chan->int_clear);
  #line 1330 
  writel((unsigned int)chan->chan_num & 63U,ctlr->params.dmaregs + (unsigned long)chan->td);
  #line 1333 
  timeout = 10000U;
  #line 1334 
  while (timeout != 0U) {
    #line 1335 
    u32 cp = readl(chan->cp);
    #line 1336 
    if ((cp & 4294967292U) == 4294967292U) 
                                           #line 1337 
                                           break;
    #line 1338 
    __const_udelay(42950UL);
    #line 1339 
    timeout --;
  }
  {
    #line 1341 
    int __ret_warn_on = timeout == 0U;
    #line 1341 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1342 
      ldv_inline_asm();
      #line 1343 
      ldv_inline_asm();
    }
    #line 1341 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 1342 
  writel(4294967292U,chan->cp);
  #line 1345 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
  #line 1346 
  while (1) {
    #line 1347 
    ret = __cpdma_chan_process(chan);
    #line 1348 
    if (ret < 0) 
                 #line 1349 
                 break;
    #line 1350 
    if (! (((unsigned long)ret & 134217728UL) == 0UL)) 
                                                       #line 1346 
                                                       break;
  }
  #line 1351 
  cif___ldv_spin_lock_lock_of_cpdma_chan(& chan->lock);
  #line 1354 
  while (chan->head != (struct cpdma_desc *)0) {
    #line 1356 
    dma_addr_t next_dma;
    #line 1355 
    struct cpdma_desc *desc = chan->head;
    #line 1358 
    next_dma = (unsigned long long)readl((void *)(& desc->hw_next));
    #line 1359 
    chan->head = desc_from_phys(pool,next_dma);
    #line 1360 
    (chan->count) --;
    #line 1361 
    (chan->stats.teardown_dequeue) ++;
    #line 1364 
    cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
    #line 1365 
    __cpdma_chan_free(chan,desc,0,-38);
    #line 1366 
    cif___ldv_spin_lock_lock_of_cpdma_chan(& chan->lock);
  }
  #line 1369 
  chan->state = CPDMA_STATE_IDLE;
  #line 1370 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
  #line 1371 
  return 0;
}

#line 1374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_chan_int_ctrl(struct cpdma_chan *chan, bool enable)
{
  #line 1376 
  unsigned long flags;
  #line 1384 
  int tmp;
  #line 1378 
  cif___ldv_spin_lock_lock_of_cpdma_chan(& chan->lock);
  #line 1379 
  if (chan->state != (unsigned int)CPDMA_STATE_ACTIVE) {
    #line 1380 
    cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
    #line 1381 
    return -22;
  }
  #line 1384 
  if ((int)enable != 0) 
                        #line 1384 
                        tmp = chan->int_set; else 
                                                  #line 1384 
                                                  tmp = chan->int_clear;
  #line 1384 
  ;
  #line 1384 
  ;
  #line 1384 
  writel(chan->mask,(chan->ctlr)->params.dmaregs + (unsigned long)tmp);
  #line 1386 
  cif_spin_unlock_irqrestore_lock_of_cpdma_chan(& chan->lock,flags);
  #line 1388 
  return 0;
}

#line 1391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_control_get(struct cpdma_ctlr *ctlr, int control)
{
  #line 1393 
  unsigned long flags;
  #line 1394 
  int ret;
  #line 1396 
  cif___ldv_spin_lock_lock_of_cpdma_ctlr(& ctlr->lock);
  #line 1397 
  ret = _cpdma_control_get(ctlr,control);
  #line 1398 
  cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
  #line 1400 
  return ret;
}

#line 1403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_control_set(struct cpdma_ctlr *ctlr, int control, int value)
{
  #line 1405 
  unsigned long flags;
  #line 1406 
  int ret;
  #line 1408 
  cif___ldv_spin_lock_lock_of_cpdma_ctlr(& ctlr->lock);
  #line 1409 
  ret = _cpdma_control_set(ctlr,control,value);
  #line 1410 
  cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
  #line 1412 
  return ret;
}

#line 1415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_get_num_rx_descs(struct cpdma_ctlr *ctlr)
{
  #line 1417 
  return ctlr->num_rx_desc;
}

#line 1420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_get_num_tx_descs(struct cpdma_ctlr *ctlr)
{
  #line 1422 
  return ctlr->num_tx_desc;
}

#line 1425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/davinci_cpdma.c"
int cpdma_set_num_rx_descs(struct cpdma_ctlr *ctlr, int num_rx_desc)
{
  #line 1427 
  unsigned long flags;
  #line 1428 
  int temp;
  #line 1428 
  int ret;
  #line 1430 
  cif___ldv_spin_lock_lock_of_cpdma_ctlr(& ctlr->lock);
  #line 1432 
  temp = ctlr->num_rx_desc;
  #line 1433 
  ctlr->num_rx_desc = num_rx_desc;
  #line 1434 
  ctlr->num_tx_desc = (ctlr->pool)->num_desc - ctlr->num_rx_desc;
  #line 1435 
  ret = cpdma_chan_split_pool(ctlr);
  #line 1436 
  if (ret != 0) {
    #line 1437 
    ctlr->num_rx_desc = temp;
    #line 1438 
    ctlr->num_tx_desc = (ctlr->pool)->num_desc - ctlr->num_rx_desc;
  }
  #line 1441 
  cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(& ctlr->lock,flags);
  #line 1443 
  return ret;
}

#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/davinci_cpdma.i.aux"
static void *ERR_PTR_0(long error)
{
  #line 197 
  return ldv_err_ptr(error);
}

#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/davinci_cpdma.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 204 
  return ldv_ptr_err(ptr);
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/davinci_cpdma.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 211 
  return ldv_is_err(ptr);
}

#line 483  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/davinci_cpdma.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags)
{
  #line 486 
  return ldv_devm_kzalloc(size,flags);
}

#line 490  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/davinci_cpdma.i.aux"
static void cif___ldv_spin_lock_lock_of_cpdma_chan(spinlock_t *lock)
{
  #line 493 
  ldv_spin_model_lock((char *)"lock_of_cpdma_chan");
  #line 495 
  __ldv_spin_lock(lock);
  #line 496 
  return;
}

#line 499  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/davinci_cpdma.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_cpdma_chan(spinlock_t *lock, unsigned long flags)
{
  #line 502 
  ldv_spin_model_unlock((char *)"lock_of_cpdma_chan");
  #line 504 
  spin_unlock_irqrestore(lock,flags);
  #line 505 
  return;
}

#line 508  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/davinci_cpdma.i.aux"
static void cif___ldv_spin_lock_lock_of_cpdma_ctlr(spinlock_t *lock)
{
  #line 511 
  ldv_spin_model_lock((char *)"lock_of_cpdma_ctlr");
  #line 513 
  __ldv_spin_lock(lock);
  #line 514 
  return;
}

#line 517  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/davinci_cpdma.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_cpdma_ctlr(spinlock_t *lock, unsigned long flags)
{
  #line 520 
  ldv_spin_model_unlock((char *)"lock_of_cpdma_ctlr");
  #line 522 
  spin_unlock_irqrestore(lock,flags);
  #line 523 
  return;
}

/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 205 
void __cant_sleep(char *, int, int);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 59 
#line 59 
void *__memmove(void *, void *, size_t);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 15 
void __cmpxchg_wrong_size(void);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_846 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
  #line 200 
  bool success;
  {
    #line 200 
    int *_old = old;
    #line 200 
    int __old = *_old;
    #line 200 
    int __new = new;
    #line 200 
    switch (4UL) {
      #line 200 
      case (unsigned long)1: 
                             #line 200 
      ;
      {
        #line 200 
        u8 *__ptr = (u8 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      case (unsigned long)2: 
                             #line 200 
      ;
      {
        #line 200 
        u16 *__ptr_0 = (u16 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      case (unsigned long)4: 
                             #line 200 
      ;
      {
        #line 200 
        u32 *__ptr_1 = (u32 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      case (unsigned long)8: 
                             #line 200 
      ;
      {
        #line 200 
        u64 *__ptr_2 = (u64 *)(& v->counter);
        #line 201 
        ldv_inline_asm();
        #line 200 
        break;
      }
      #line 200 
      default: 
               #line 200 
      ;
      #line 200 
      __cmpxchg_wrong_size();
    }
    #line 200 
    if ((long)(! success) != 0L) 
                                 #line 200 
                                 *_old = __old;
    }
  #line 200 
  return (_Bool)((long)((long)((int)success != 0)) != 0L);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
  #line 693 
  kasan_check_read((void *)v,4U);
  #line 694 
  kasan_check_read((void *)old,4U);
  #line 695 
  return arch_atomic_try_cmpxchg(v,old,new);
}

#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static int atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
  #line 1086 
  int c = atomic_read(v);
  #line 1088 
  while (! ((long)(c == u) != 0L)) {
    #line 1091 
    if (atomic_try_cmpxchg(v,& c,c + a)) 
                                         #line 1088 
                                         break;
  }
  #line 1093 
  return c;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static bool atomic_add_unless(atomic_t *v, int a, int u)
{
  #line 1111 
  ;
  #line 1111 
  return (_Bool)(atomic_fetch_add_unless(v,a,u) != u);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 91 
#line 91 
extern struct cpumask __cpu_online_mask;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static int cpumask_test_cpu(int cpu, struct cpumask *cpumask)
{
  #line 360 
  ;
  #line 360 
  return (int)test_bit((long)cpumask_check((unsigned int)cpu),
                 (unsigned long *)(& cpumask->bits));
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_priv.i.aux"
static long PTR_ERR_0(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_priv.i.aux"
static bool IS_ERR_0(void *ptr);
#line 677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
__inline static void rep_nop(void)
{
  #line 679 
  ldv_inline_asm();
  #line 680 
  return;
}

#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
__inline static void cpu_relax(void)
{
  #line 684 
  rep_nop();
  #line 685 
  return;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 223 
#line 223 
int rcu_read_lock_sched_held(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_update_begin(struct u64_stats_sync *syncp)
{
  #line 124 
  return;
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 137 
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
#line 244 
int net_ratelimit(void);
#line 1714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/clock.h"
#line 15 
unsigned long long sched_clock(void);
#line 2253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 235 
void disable_irq_nosync(unsigned int);
#line 239 
#line 239 
void enable_irq(unsigned int);
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
#line 94 
struct xdp_frame *xdp_convert_zc_to_xdp_frame(struct xdp_buff *);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
__inline static struct xdp_frame *convert_to_xdp_frame(struct xdp_buff *xdp)
{
  #line 100 
  struct xdp_frame *xdp_frame;
  #line 101 
  int metasize;
  #line 102 
  int headroom;
  #line 104 
  if ((xdp->rxq)->mem.type == 3U) {
    #line 105 
    return xdp_convert_zc_to_xdp_frame(xdp);
  }
  #line 108 
  headroom = (int)(xdp->data - xdp->data_hard_start);
  #line 109 
  metasize = (int)(xdp->data - xdp->data_meta);
  #line 110 
  if (0 > metasize) 
                    #line 110 
                    metasize = 0; else 
                                       #line 110 
                                       metasize = metasize;
  #line 111 
  if ((long)((unsigned int)(headroom - metasize) <= 31U) != 0L) 
                                                                #line 112 
                                                                return (struct xdp_frame *)0;
  #line 115 
  xdp_frame = (struct xdp_frame *)xdp->data_hard_start;
  #line 117 
  xdp_frame->data = xdp->data;
  #line 118 
  xdp_frame->len = (unsigned short)(xdp->data_end - xdp->data);
  #line 119 
  xdp_frame->headroom = (unsigned short)((unsigned int)((unsigned short)headroom) + 65504U);
  #line 120 
  xdp_frame->metasize = (unsigned short)metasize;
  #line 123 
  xdp_frame->mem = (xdp->rxq)->mem;
  #line 125 
  return xdp_frame;
}

#line 128 
#line 128 
void xdp_return_frame(struct xdp_frame *);
#line 129 
#line 129 
void xdp_return_frame_rx_napi(struct xdp_frame *);
#line 147 
#line 147 
int xdp_rxq_info_reg(struct xdp_rxq_info *, struct net_device *, u32);
#line 149 
#line 149 
void xdp_rxq_info_unreg(struct xdp_rxq_info *);
#line 151 
#line 151 
bool xdp_rxq_info_is_reg(struct xdp_rxq_info *);
#line 152 
#line 152 
int xdp_rxq_info_reg_mem_model(struct xdp_rxq_info *, enum xdp_mem_type, void *);
#line 177 
#line 177 
int xdp_attachment_query(struct xdp_attachment_info *, struct netdev_bpf *);
#line 179 
#line 179 
bool xdp_attachment_flags_ok(struct xdp_attachment_info *, struct netdev_bpf *);
#line 181 
#line 181 
void xdp_attachment_setup(struct xdp_attachment_info *, struct netdev_bpf *);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool napi_complete(struct napi_struct *n)
{
  #line 479 
  return napi_complete_done(n,0);
}

#line 2094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int netdev_get_prio_tc_map(struct net_device *dev, u32 prio)
{
  #line 2096 
  return (int)dev->prio_tc_map[prio & 15U];
}

#line 2109 
#line 2109 
int netdev_txq_to_tc(struct net_device *, unsigned int);
#line 2110 
#line 2110 
void netdev_reset_tc(struct net_device *);
#line 2111 
#line 2111 
int netdev_set_tc_queue(struct net_device *, u8, u16, u16);
#line 2112 
#line 2112 
int netdev_set_num_tc(struct net_device *, u8);
#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  #line 3146 
  unsigned int i;
  #line 3148 
  i = 0U;
  #line 3148 
  while (dev->num_tx_queues > i) {
    {
      #line 3149 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3150 
      netif_tx_wake_queue(txq);
    }
    #line 3148 
    i ++;
  }
  #line 3152 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_trans_update(struct net_device *dev)
{
  #line 3986 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,0U);
  #line 3988 
  if (txq->trans_start != jiffies) 
                                   #line 3989 
                                   txq->trans_start = jiffies;
  #line 3990 
  return;
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
#line 560 
extern struct static_key_false bpf_stats_enabled_key;
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
__inline static u32 bpf_prog_run_xdp(struct bpf_prog *prog, struct xdp_buff *xdp)
{
  #line 711 
  u32 ret;
  #line 711 
  __cant_sleep((char *)"./include/linux/filter.h",711,0);
  {
    #line 711 
    bool branch;
    #line 711 
    branch = arch_static_branch(& bpf_stats_enabled_key.key,(_Bool)0);
    #line 711 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 711 
      unsigned long tcp_ptr__;
      #line 711 
      struct bpf_prog_stats *stats;
      #line 711 
      u64 start = sched_clock();
      #line 711 
      ret = (*(prog->bpf_func))((void *)xdp,(struct bpf_insn *)(& prog->__anonCompField_bpf_prog_168.insnsi));
      {
        #line 711 
        void *__vpp_verify = (void *)0;
        #line 711 
        void *tmp_2 = __vpp_verify;
      }
      #line 712 
      ldv_inline_asm();
      #line 711 
      stats = ((struct bpf_prog_stats *)tcp_ptr__);
      #line 711 
      u64_stats_update_begin(& stats->syncp);
      #line 711 
      (stats->cnt) ++;
      #line 711 
      stats->nsecs += sched_clock() - start;
      #line 711 
      u64_stats_update_begin(& stats->syncp);
    }
    else 
         #line 711 
         ret = (*(prog->bpf_func))((void *)xdp,(struct bpf_insn *)(& prog->__anonCompField_bpf_prog_168.insnsi));
  }
  #line 711 
  return ret;
}

#line 920 
#line 920 
int xdp_do_redirect(struct net_device *, struct xdp_buff *, struct bpf_prog *);
#line 923 
#line 923 
void xdp_do_flush_map(void);
#line 925 
#line 925 
void bpf_warn_invalid_xdp_action(u32);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/trace/events/xdp.h"
#line 28 
extern struct tracepoint __tracepoint_xdp_exception;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/trace/events/xdp.h"
__inline static void trace_xdp_exception(struct net_device *dev, struct bpf_prog *xdp, u32 act)
{
  #line 28 
  int pscr_ret___0;
  #line 28 
  if ((int)static_key_false(& __tracepoint_xdp_exception.key) != 0) {
    #line 28 
    int pscr_ret__;
    #line 28 
    struct tracepoint_func *________p1;
    #line 28 
    struct tracepoint_func *it_func_ptr;
    #line 28 
    void *it_func;
    #line 28 
    void *__data;
    #line 28 
    int __idx = 0;
    {
      #line 28 
      void *__vpp_verify = (void *)0;
      #line 28 
      void *tmp = __vpp_verify;
    }
    #line 28 
    switch (4UL) {
      #line 28 
      int pfo_ret___1;
      #line 28 
      int pfo_ret___2;
      #line 28 
      int pfo_ret__;
      #line 28 
      int pfo_ret___0;
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret__;
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret___0;
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret___1;
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 28 
      switch (4UL) {
        #line 28 
        case (unsigned long)1: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)2: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)4: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        case (unsigned long)8: 
                               #line 28 
        ;
        #line 29 
        ldv_inline_asm();
        #line 28 
        break;
        #line 28 
        default: 
                 #line 28 
        ;
        #line 28 
        __bad_percpu_size();
      }
      #line 28 
      pscr_ret__ = pfo_ret___2;
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_size_call_parameter();
      #line 28 
      break;
    }
    #line 28 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 28 
                                                               return;
    {
      #line 28 
      int __ret_warn_on = 0;
      #line 28 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 29 
        ldv_inline_asm();
        #line 30 
        ldv_inline_asm();
      }
      #line 28 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 28 
    __preempt_count_add(1);
    #line 29 
    ldv_inline_asm();
    {
      #line 29 
      union __anonunion___u_1574 __u;
      #line 28 
      __read_once_size((void *)(& __tracepoint_xdp_exception.funcs),(void *)(& __u.__c),8);
      #line 28 
      ________p1 = (__u.__val);
      }
    #line 28 
    it_func_ptr = ________p1;
    #line 28 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 28 
      while (1) {
        #line 28 
        it_func = it_func_ptr->func;
        #line 28 
        __data = it_func_ptr->data;
        #line 28 
        (*((void (*)(void *, struct net_device *, struct bpf_prog *, u32 ))it_func))(__data,dev,xdp,act);
        #line 28 
        it_func_ptr ++;
        #line 29 
        ;
        #line 29 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 28 
                                                break;
      }
    #line 30 
    ldv_inline_asm();
    #line 28 
    __preempt_count_sub(1);
  }
  {
    #line 28 
    void *__vpp_verify_0 = (void *)0;
    #line 28 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 28 
  switch (4UL) {
    #line 28 
    int pfo_ret___3;
    #line 28 
    int pfo_ret___4;
    #line 28 
    int pfo_ret___5;
    #line 28 
    int pfo_ret___6;
    #line 28 
    case (unsigned long)1: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___3;
    #line 28 
    break;
    #line 28 
    case (unsigned long)2: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___4;
    #line 28 
    break;
    #line 28 
    case (unsigned long)4: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___5;
    #line 28 
    break;
    #line 28 
    case (unsigned long)8: 
                           #line 28 
    ;
    #line 28 
    switch (4UL) {
      #line 28 
      case (unsigned long)1: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)2: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)4: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      case (unsigned long)8: 
                             #line 28 
      ;
      #line 29 
      ldv_inline_asm();
      #line 28 
      break;
      #line 28 
      default: 
               #line 28 
      ;
      #line 28 
      __bad_percpu_size();
    }
    #line 28 
    pscr_ret___0 = pfo_ret___6;
    #line 28 
    break;
    #line 28 
    default: 
             #line 28 
    ;
    #line 28 
    __bad_size_call_parameter();
    #line 28 
    break;
  }
  #line 28 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 28 
    __rcu_read_lock();
    {
      #line 29 
      union __anonunion___u_1576 __u_0;
      #line 28 
      __read_once_size((void *)(& __tracepoint_xdp_exception.funcs),(void *)(& __u_0.__c),8);
      #line 28 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 28 
        bool __warned;
        #line 28 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 28 
          if (! __warned) {
            #line 28 
            if (rcu_read_lock_sched_held() == 0) {
              #line 28 
              __warned = (_Bool)1;
              #line 28 
              lockdep_rcu_suspicious((char *)"./include/trace/events/xdp.h",28,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 28 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 28 
    __rcu_read_unlock();
  }
  #line 30 
  return;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
#line 122 
void of_node_put(struct device_node *);
#line 295 
#line 295 
struct device_node *of_get_child_by_name(struct device_node *, char *);
#line 1177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
#line 1177 
int phy_mii_ioctl(struct phy_device *, struct ifreq *, int);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
#line 38 
int __pm_runtime_idle(struct device *, int);
#line 40 
#line 40 
int __pm_runtime_resume(struct device *, int);
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static void pm_runtime_put_noidle(struct device *dev)
{
  #line 75 
  atomic_add_unless(& dev->power.usage_count,-1,0);
  #line 76 
  return;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_get_sync(struct device *dev)
{
  #line 226 
  return __pm_runtime_resume(dev,4);
}

#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_put(struct device *dev)
{
  #line 231 
  return __pm_runtime_idle(dev,5);
}

#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static int pm_runtime_put_sync(struct device *dev)
{
  #line 242 
  return __pm_runtime_idle(dev,4);
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
#line 131 
struct page *page_pool_alloc_pages(struct page_pool *, gfp_t);
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
__inline static struct page *page_pool_dev_alloc_pages(struct page_pool *pool)
{
  #line 135 
  gfp_t gfp = 10784U;
  #line 137 
  return page_pool_alloc_pages(pool,gfp);
}

#line 149 
#line 149 
struct page_pool *page_pool_create(struct page_pool_params *);
#line 152 
#line 152 
void page_pool_destroy(struct page_pool *);
#line 166 
#line 166 
void __page_pool_put_page(struct page_pool *, struct page *, unsigned int, bool);
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
__inline static void page_pool_recycle_direct(struct page_pool *pool, struct page *page)
{
  #line 183 
  __page_pool_put_page(pool,page,4294967295U,(_Bool)1);
  #line 184 
  return;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
__inline static dma_addr_t page_pool_get_dma_addr(struct page *page)
{
  #line 202 
  return page->__anonCompField_page_44.__anonCompField___anonunion_132_33.dma_addr;
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpts.h"
#line 120 
void cpts_tx_timestamp(struct cpts *, struct sk_buff *);
#line 123 
#line 123 
struct cpts *cpts_create(struct device *, void *, struct device_node *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.h"
#line 95 
struct cpsw_ale *cpsw_ale_create(struct cpsw_ale_params *params);
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.h"
__inline static int cpsw_ale_get_vlan_p0_untag(struct cpsw_ale *ale, u16 vid)
{
  #line 121 
  return (int)test_bit((long)vid,ale->p0_untag_vid_mask);
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
__inline static u32 slave_read(struct cpsw_slave *slave, u32 offset)
{
  #line 317 
  return readl(slave->regs + (unsigned long)offset);
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
__inline static void slave_write(struct cpsw_slave *slave, u32 val, u32 offset)
{
  #line 322 
  writel(val,slave->regs + (unsigned long)offset);
  #line 323 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int (*cpsw_slave_index)(struct cpsw_common *, struct cpsw_priv *);
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
__inline static int cpsw_is_xdpf_handle(void *handle)
{
  #line 415 
  return (int)((long)handle) & 1;
}

#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
__inline static void *cpsw_xdpf_to_handle(struct xdp_frame *xdpf)
{
  #line 420 
  return (void *)((unsigned long)xdpf | 1UL);
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
__inline static struct xdp_frame *cpsw_handle_to_xdpf(void *handle)
{
  #line 425 
  return (struct xdp_frame *)((unsigned long)handle & 18446744073709551614UL);
}

#line 428 
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_init_common(struct cpsw_common *cpsw, void *ss_regs, int ale_ageout_0, phys_addr_t desc_mem_phys, int descs_pool_size_0);
#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_split_res(struct cpsw_common *cpsw);
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 1087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_fill_rx_channels(struct cpsw_priv *priv);
#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_intr_enable(struct cpsw_common *cpsw);
#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_intr_disable(struct cpsw_common *cpsw);
#line 435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_tx_handler(void *token, int len, int status);
#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 1217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_create_xdp_rxqs(struct cpsw_common *cpsw);
#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 1198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_destroy_xdp_rxqs(struct cpsw_common *cpsw);
#line 438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 1266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_ndo_bpf(struct net_device *ndev, struct netdev_bpf *bpf);
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 1282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_xdp_tx_frame(struct cpsw_priv *priv, struct xdp_frame *xdpf, struct page *page, int port);
#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 1319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_run_xdp(struct cpsw_priv *priv, int ch, struct xdp_buff *xdp, struct page *page, int port);
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
irqreturn_t cpsw_tx_interrupt(int irq, void *dev_id);
#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
irqreturn_t cpsw_rx_interrupt(int irq, void *dev_id);
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_tx_mq_poll(struct napi_struct *napi_tx, int budget);
#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_tx_poll(struct napi_struct *napi_tx, int budget);
#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_rx_mq_poll(struct napi_struct *napi_rx, int budget);
#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_rx_poll(struct napi_struct *napi_rx, int budget);
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_rx_vlan_encap(struct sk_buff *skb);
#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void soft_reset(char *module, void *reg);
#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_set_slave_mac(struct cpsw_slave *slave, struct cpsw_priv *priv);
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_ndo_tx_timeout(struct net_device *ndev);
#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_need_resplit(struct cpsw_common *cpsw);
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_ndo_ioctl(struct net_device *dev, struct ifreq *req, int cmd);
#line 455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_ndo_set_tx_maxrate(struct net_device *ndev, int queue, u32 rate);
#line 456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 1037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_ndo_setup_tc(struct net_device *ndev, enum tc_setup_type type, void *type_data);
#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
bool cpsw_shp_is_off(struct cpsw_priv *priv);
#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 1052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_cbs_resume(struct cpsw_slave *slave, struct cpsw_priv *priv);
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 1065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_mqprio_resume(struct cpsw_slave *slave, struct cpsw_priv *priv);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_intr_enable(struct cpsw_common *cpsw)
{
  #line 35 
  writel(255U,(void *)(& (cpsw->wr_regs)->tx_en));
  #line 36 
  writel(255U,(void *)(& (cpsw->wr_regs)->rx_en));
  #line 38 
  cpdma_ctlr_int_ctrl(cpsw->dma,(_Bool)1);
  #line 39 
  return;
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_intr_disable(struct cpsw_common *cpsw)
{
  #line 43 
  writel(0U,(void *)(& (cpsw->wr_regs)->tx_en));
  #line 44 
  writel(0U,(void *)(& (cpsw->wr_regs)->rx_en));
  #line 46 
  cpdma_ctlr_int_ctrl(cpsw->dma,(_Bool)0);
  #line 47 
  return;
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_tx_handler(void *token, int len, int status)
{
  #line 51 
  struct cpsw_meta_xdp *xmeta;
  #line 52 
  struct xdp_frame *xdpf;
  #line 53 
  struct net_device *ndev;
  #line 54 
  struct netdev_queue *txq;
  #line 55 
  struct sk_buff *skb;
  #line 56 
  int ch;
  #line 58 
  if (cpsw_is_xdpf_handle(token) != 0) {
    #line 59 
    xdpf = cpsw_handle_to_xdpf(token);
    #line 60 
    xmeta = (struct cpsw_meta_xdp *)((void *)xdpf + 32UL);
    #line 61 
    ndev = xmeta->ndev;
    #line 62 
    ch = xmeta->ch;
    #line 63 
    xdp_return_frame(xdpf);
  }
  else {
    #line 65 
    skb = (struct sk_buff *)token;
    #line 66 
    ndev = skb->__anonCompField_sk_buff_125.__anonCompField___anonunion_1353_124.__anonCompField___anonstruct_1354_123.dev;
    #line 67 
    ch = (int)skb_get_queue_mapping(skb);
    #line 68 
    ;
    #line 68 
    cpts_tx_timestamp((((struct cpsw_priv *)netdev_priv(ndev))->cpsw)->cpts,skb);
    #line 69 
    dev_kfree_skb_any(skb);
  }
  #line 75 
  txq = netdev_get_tx_queue(ndev,(unsigned int)ch);
  #line 76 
  if ((long)((int)netif_tx_queue_stopped(txq) != 0) != 0L) 
                                                           #line 77 
                                                           netif_tx_wake_queue(txq);
  #line 79 
  (ndev->stats.tx_packets) ++;
  #line 80 
  ndev->stats.tx_bytes += (unsigned long)len;
  #line 81 
  return;
}

#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
irqreturn_t cpsw_tx_interrupt(int irq, void *dev_id)
{
  #line 85 
  struct cpsw_common *cpsw = (struct cpsw_common *)dev_id;
  #line 87 
  writel(0U,(void *)(& (cpsw->wr_regs)->tx_en));
  #line 88 
  cpdma_ctlr_eoi(cpsw->dma,2U);
  #line 90 
  if ((int)cpsw->quirk_irq != 0) {
    #line 91 
    disable_irq_nosync(cpsw->irqs_table[1]);
    #line 92 
    cpsw->tx_irq_disabled = (_Bool)1;
  }
  #line 95 
  napi_schedule(& cpsw->napi_tx);
  #line 96 
  return IRQ_HANDLED;
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
irqreturn_t cpsw_rx_interrupt(int irq, void *dev_id)
{
  #line 101 
  struct cpsw_common *cpsw = (struct cpsw_common *)dev_id;
  #line 103 
  writel(0U,(void *)(& (cpsw->wr_regs)->rx_en));
  #line 104 
  cpdma_ctlr_eoi(cpsw->dma,1U);
  #line 106 
  if ((int)cpsw->quirk_irq != 0) {
    #line 107 
    disable_irq_nosync(cpsw->irqs_table[0]);
    #line 108 
    cpsw->rx_irq_disabled = (_Bool)1;
  }
  #line 111 
  napi_schedule(& cpsw->napi_rx);
  #line 112 
  return IRQ_HANDLED;
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_tx_mq_poll(struct napi_struct *napi_tx, int budget)
{
  #line 117 
  void *__mptr;
  #line 118 
  int num_tx;
  #line 118 
  int cur_budget;
  #line 118 
  int ch;
  #line 119 
  u32 ch_map;
  #line 120 
  struct cpsw_vector *txv;
  #line 117 
  __mptr = (void *)napi_tx;
  #line 117 
  struct cpsw_common *cpsw = ((struct cpsw_common *)(__mptr + 18446744073709551176U));
  #line 123 
  ch_map = cpdma_ctrl_txchs_state(cpsw->dma);
  #line 124 
  ch = 0;
  #line 124 
  num_tx = 0;
  #line 124 
  while ((ch_map & 255U) != 0U) {
    {
      #line 125 
      if ((ch_map & 128U) == 0U) 
                                 #line 126 
                                 goto __Cont;
      #line 128 
      txv = & cpsw->txv[ch];
      #line 129 
      if ((long)(txv->budget > budget - num_tx) != 0L) 
                                                       #line 130 
                                                       cur_budget = budget - num_tx; else 
                                                                    #line 132 
                                                                    cur_budget = txv->budget;
      #line 134 
      num_tx = cpdma_chan_process(txv->ch,cur_budget) + num_tx;
      #line 135 
      if (num_tx >= budget) 
                            #line 136 
                            break;
    }
    #line 124 
    __Cont: 
            #line 124 
    ch_map <<= 1;
    #line 124 
    ch ++;
  }
  #line 139 
  if (num_tx < budget) {
    #line 140 
    napi_complete(napi_tx);
    #line 141 
    writel(255U,(void *)(& (cpsw->wr_regs)->tx_en));
  }
  #line 144 
  return num_tx;
}

#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_tx_poll(struct napi_struct *napi_tx, int budget)
{
  #line 149 
  void *__mptr;
  #line 150 
  int num_tx;
  #line 149 
  __mptr = (void *)napi_tx;
  #line 149 
  struct cpsw_common *cpsw = ((struct cpsw_common *)(__mptr + 18446744073709551176U));
  #line 152 
  num_tx = cpdma_chan_process(cpsw->txv[0].ch,budget);
  #line 153 
  if (num_tx < budget) {
    #line 154 
    napi_complete(napi_tx);
    #line 155 
    writel(255U,(void *)(& (cpsw->wr_regs)->tx_en));
    #line 156 
    if ((int)cpsw->tx_irq_disabled != 0) {
      #line 157 
      cpsw->tx_irq_disabled = (_Bool)0;
      #line 158 
      enable_irq(cpsw->irqs_table[1]);
    }
  }
  #line 162 
  return num_tx;
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_rx_mq_poll(struct napi_struct *napi_rx, int budget)
{
  #line 167 
  void *__mptr;
  #line 168 
  int num_rx;
  #line 168 
  int cur_budget;
  #line 168 
  int ch;
  #line 169 
  u32 ch_map;
  #line 170 
  struct cpsw_vector *rxv;
  #line 167 
  __mptr = (void *)napi_rx;
  #line 167 
  struct cpsw_common *cpsw = ((struct cpsw_common *)(__mptr + 18446744073709551568U));
  #line 173 
  ch_map = cpdma_ctrl_rxchs_state(cpsw->dma);
  #line 174 
  ch = 0;
  #line 174 
  num_rx = 0;
  #line 174 
  while (ch_map != 0U) {
    {
      #line 175 
      if ((ch_map & 1U) == 0U) 
                               #line 176 
                               goto __Cont;
      #line 178 
      rxv = & cpsw->rxv[ch];
      #line 179 
      if ((long)(rxv->budget > budget - num_rx) != 0L) 
                                                       #line 180 
                                                       cur_budget = budget - num_rx; else 
                                                                    #line 182 
                                                                    cur_budget = rxv->budget;
      #line 184 
      num_rx = cpdma_chan_process(rxv->ch,cur_budget) + num_rx;
      #line 185 
      if (num_rx >= budget) 
                            #line 186 
                            break;
    }
    #line 174 
    __Cont: 
            #line 174 
    ch_map >>= 1;
    #line 174 
    ch ++;
  }
  #line 189 
  if (num_rx < budget) {
    #line 190 
    napi_complete_done(napi_rx,num_rx);
    #line 191 
    writel(255U,(void *)(& (cpsw->wr_regs)->rx_en));
  }
  #line 194 
  return num_rx;
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_rx_poll(struct napi_struct *napi_rx, int budget)
{
  #line 199 
  void *__mptr;
  #line 200 
  int num_rx;
  #line 199 
  __mptr = (void *)napi_rx;
  #line 199 
  struct cpsw_common *cpsw = ((struct cpsw_common *)(__mptr + 18446744073709551568U));
  #line 202 
  num_rx = cpdma_chan_process(cpsw->rxv[0].ch,budget);
  #line 203 
  if (num_rx < budget) {
    #line 204 
    napi_complete_done(napi_rx,num_rx);
    #line 205 
    writel(255U,(void *)(& (cpsw->wr_regs)->rx_en));
    #line 206 
    if ((int)cpsw->rx_irq_disabled != 0) {
      #line 207 
      cpsw->rx_irq_disabled = (_Bool)0;
      #line 208 
      enable_irq(cpsw->irqs_table[0]);
    }
  }
  #line 212 
  return num_rx;
}

#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_rx_vlan_encap(struct sk_buff *skb)
{
  #line 220 
  u16 vtag;
  #line 220 
  u16 vid;
  #line 220 
  u16 prio;
  #line 220 
  u16 pkt_type;
  #line 217 
  struct cpsw_priv *priv = netdev_priv(skb->__anonCompField_sk_buff_125.__anonCompField___anonunion_1353_124.__anonCompField___anonstruct_1354_123.dev);
  #line 218 
  u32 rx_vlan_encap_hdr = *((u32 *)skb->data);
  #line 219 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 223 
  skb_pull(skb,4U);
  #line 225 
  pkt_type = (unsigned short)((unsigned int)((unsigned short)(rx_vlan_encap_hdr >> 8)) & 3U);
  #line 229 
  if ((unsigned int)pkt_type + 65535U <= 1U) 
                                             #line 231 
                                             return;
  #line 233 
  vid = (unsigned short)((unsigned int)((unsigned short)(rx_vlan_encap_hdr >> 16)) & 4095U);
  #line 237 
  if ((unsigned int)vid == 0U) 
                               #line 238 
                               return;
  #line 241 
  if (cpsw_ale_get_vlan_p0_untag(cpsw->ale,(unsigned short)((int)vid)) == 0) {
    #line 242 
    prio = (unsigned short)((unsigned int)((unsigned short)(rx_vlan_encap_hdr >> 29)) & 7U);
    #line 246 
    vtag = (unsigned short)(((int)prio << 13) | (int)vid);
    #line 247 
    __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vtag));
  }
  #line 251 
  if ((unsigned int)pkt_type == 0U) {
    #line 252 
    __memmove((void *)(skb->data + 4U),(void *)skb->data,12UL);
    #line 253 
    skb_pull(skb,4U);
  }
  #line 255 
  return;
}

#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_set_slave_mac(struct cpsw_slave *slave, struct cpsw_priv *priv)
{
  #line 259 
  slave_write(slave,(unsigned int)((((int)priv->mac_addr[0] | ((int)priv->mac_addr[1] << 8)) | ((int)priv->mac_addr[2] << 16)) | ((int)priv->mac_addr[3] << 24)),36U);
  #line 260 
  slave_write(slave,(unsigned int)((int)priv->mac_addr[4] | ((int)priv->mac_addr[5] << 8)),32U);
  #line 261 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void soft_reset(char *module, void *reg)
{
  #line 265 
  unsigned long timeout = jiffies + 250UL;
  #line 267 
  writel(1U,reg);
  #line 268 
  while (1) {
    #line 269 
    cpu_relax();
    {
      #line 270 
      unsigned long __dummy;
      #line 270 
      unsigned long __dummy2;
      }
    #line 269 
    if (1 != 0) {
      {
        #line 270 
        unsigned long __dummy_0;
        #line 270 
        unsigned long __dummy2_0;
        }
      #line 270 
      if (1 != 0) 
        #line 270 
        if ((long)(jiffies - timeout) < 0L) {
          #line 270 
          if (! ((readl(reg) & 1U) != 0U)) 
                                           #line 268 
                                           break;
        }
        else 
             #line 268 
             break;
      else 
           #line 268 
           break;
    }
    else 
         #line 268 
         break;
  }
  {
    #line 272 
    int __ret_warn_on = (readl(reg) & 1U) != 0U;
    #line 272 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 272 
      __warn_printk((char *)"failed to soft-reset %s\n",module);
      #line 273 
      ldv_inline_asm();
      #line 274 
      ldv_inline_asm();
    }
    #line 272 
    long tmp_3 = (long)(__ret_warn_on != 0);
  }
  #line 274 
  return;
}

#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_ndo_tx_timeout(struct net_device *ndev)
{
  #line 279 
  int ch;
  #line 277 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 278 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 281 
  if ((priv->msg_enable & 128U) != 0U) {
    #line 281 
    if (net_ratelimit() != 0) 
                              #line 281 
                              _dev_err(priv->dev,(char *)"transmit timeout, restarting dma\n");
  }
  #line 282 
  (ndev->stats.tx_errors) ++;
  #line 283 
  cpsw_intr_disable(cpsw);
  #line 284 
  ch = 0;
  #line 284 
  while (cpsw->tx_ch_num > ch) {
    #line 285 
    cpdma_chan_stop(cpsw->txv[ch].ch);
    #line 286 
    cpdma_chan_start(cpsw->txv[ch].ch);
    #line 284 
    ch ++;
  }
  #line 289 
  cpsw_intr_enable(cpsw);
  #line 290 
  netif_trans_update(ndev);
  #line 291 
  netif_tx_wake_all_queues(ndev);
  #line 292 
  return;
}

#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static int cpsw_get_common_speed(struct cpsw_common *cpsw)
{
  #line 296 
  int i;
  #line 296 
  int speed;
  #line 298 
  i = 0;
  #line 298 
  speed = 0;
  #line 298 
  while (cpsw->data.slaves > (unsigned int)i) {
    #line 299 
    if ((cpsw->slaves + (unsigned long)i)->phy != (struct phy_device *)0 && (unsigned int)((cpsw->slaves + (unsigned long)i)->phy)->link != 0U) 
      #line 300 
      speed = ((cpsw->slaves + (unsigned long)i)->phy)->speed + speed;
    #line 298 
    i ++;
  }
  #line 302 
  return speed;
}

#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_need_resplit(struct cpsw_common *cpsw)
{
  #line 307 
  int i;
  #line 307 
  int rlim_ch_num;
  #line 308 
  int speed;
  #line 308 
  int ch_rate;
  #line 311 
  speed = cpsw_get_common_speed(cpsw);
  #line 312 
  if (cpsw->speed == speed || speed == 0) 
                                          #line 313 
                                          return 0;
  #line 315 
  cpsw->speed = speed;
  #line 317 
  i = 0;
  #line 317 
  rlim_ch_num = 0;
  #line 317 
  while (cpsw->tx_ch_num > i) {
    {
      #line 318 
      ch_rate = (int)cpdma_chan_get_rate(cpsw->txv[i].ch);
      #line 319 
      if (ch_rate == 0) 
                        #line 320 
                        break;
      #line 322 
      rlim_ch_num ++;
    }
    #line 317 
    i ++;
  }
  #line 326 
  if (rlim_ch_num == 0 || cpsw->tx_ch_num == rlim_ch_num) 
                                                          #line 327 
                                                          return 0;
  #line 329 
  return 1;
}

#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_split_res(struct cpsw_common *cpsw)
{
  #line 336 
  int i;
  #line 336 
  int ch_weight;
  #line 337 
  int budget;
  #line 338 
  u32 ch_rate;
  #line 338 
  u32 max_rate;
  #line 334 
  u32 consumed_rate = 0U;
  #line 334 
  u32 bigest_rate = 0U;
  #line 335 
  struct cpsw_vector *txv = (struct cpsw_vector *)(& cpsw->txv);
  #line 336 
  int rlim_ch_num = 0;
  #line 337 
  int bigest_rate_ch = 0;
  #line 339 
  int ch_budget = 0;
  #line 341 
  i = 0;
  #line 341 
  while (cpsw->tx_ch_num > i) {
    #line 342 
    ch_rate = cpdma_chan_get_rate((txv + (unsigned long)i)->ch);
    #line 343 
    if (ch_rate == 0U) 
                       #line 344 
                       goto __Cont;
    #line 346 
    rlim_ch_num ++;
    #line 347 
    consumed_rate += ch_rate;
    #line 341 
    __Cont: 
            #line 341 
    i ++;
  }
  #line 350 
  if (cpsw->tx_ch_num == rlim_ch_num) 
                                      #line 351 
                                      max_rate = consumed_rate;
  else 
    #line 352 
    if (rlim_ch_num == 0) {
      #line 353 
      ch_budget = 64 / cpsw->tx_ch_num;
      #line 354 
      bigest_rate = 0U;
      #line 355 
      max_rate = consumed_rate;
    }
    else {
      #line 357 
      max_rate = (unsigned int)(cpsw->speed * 1000);
      #line 362 
      if (max_rate < consumed_rate) 
                                    #line 363 
                                    max_rate *= 10U;
      #line 365 
      if (max_rate < consumed_rate) 
                                    #line 366 
                                    max_rate *= 10U;
      #line 368 
      ch_budget = (int)((consumed_rate * 64U) / max_rate);
      #line 369 
      ch_budget = (64 - ch_budget) / (cpsw->tx_ch_num - rlim_ch_num);
      #line 371 
      bigest_rate = (max_rate - consumed_rate) / (unsigned int)(cpsw->tx_ch_num - rlim_ch_num);
    }
  #line 376 
  budget = 64;
  #line 377 
  i = 0;
  #line 377 
  while (cpsw->tx_ch_num > i) {
    #line 378 
    ch_rate = cpdma_chan_get_rate((txv + (unsigned long)i)->ch);
    #line 379 
    if (ch_rate != 0U) {
      #line 380 
      (txv + (unsigned long)i)->budget = (int)((ch_rate * 64U) / max_rate);
      #line 381 
      if ((txv + (unsigned long)i)->budget == 0) 
                                                 #line 382 
                                                 ((txv + (unsigned long)i)->budget) ++;
      #line 383 
      if (ch_rate > bigest_rate) {
        #line 384 
        bigest_rate_ch = i;
        #line 385 
        bigest_rate = ch_rate;
      }
      #line 388 
      ch_weight = (int)((ch_rate * 100U) / max_rate);
      #line 389 
      if (ch_weight == 0) 
                          #line 390 
                          ch_weight ++;
      #line 391 
      cpdma_chan_set_weight(cpsw->txv[i].ch,ch_weight);
    }
    else {
      #line 393 
      (txv + (unsigned long)i)->budget = ch_budget;
      #line 394 
      if (bigest_rate_ch == 0) 
                               #line 395 
                               bigest_rate_ch = i;
      #line 396 
      cpdma_chan_set_weight(cpsw->txv[i].ch,0);
    }
    #line 399 
    budget -= (txv + (unsigned long)i)->budget;
    #line 377 
    i ++;
  }
  #line 402 
  if (budget != 0) 
                   #line 403 
                   (txv + (unsigned long)bigest_rate_ch)->budget += budget;
  #line 406 
  budget = 64;
  #line 407 
  ch_budget = budget / cpsw->rx_ch_num;
  #line 408 
  i = 0;
  #line 408 
  while (cpsw->rx_ch_num > i) {
    #line 409 
    cpsw->rxv[i].budget = ch_budget;
    #line 410 
    budget -= ch_budget;
    #line 408 
    i ++;
  }
  #line 413 
  if (budget != 0) 
                   #line 414 
                   cpsw->rxv[0].budget += budget;
  #line 415 
  return;
}

#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_init_common(struct cpsw_common *cpsw, void *ss_regs, int ale_ageout_0, phys_addr_t desc_mem_phys, int descs_pool_size_0)
{
  #line 421 
  u32 slave_offset;
  #line 421 
  u32 sliver_offset;
  #line 421 
  u32 slave_size;
  #line 422 
  struct cpsw_ale_params ale_params;
  #line 423 
  struct cpsw_platform_data *data;
  #line 424 
  struct cpdma_params dma_params;
  #line 426 
  struct device_node *cpts_node;
  #line 427 
  void *cpts_regs;
  #line 428 
  int i;
  #line 425 
  struct device *dev = cpsw->dev;
  #line 428 
  int ret = 0;
  #line 430 
  data = & cpsw->data;
  #line 431 
  cpsw->rx_ch_num = 1;
  #line 432 
  cpsw->tx_ch_num = 1;
  #line 434 
  cpsw->version = readl((void *)(& (cpsw->regs)->id_ver));
  #line 436 
  memset((void *)(& dma_params),0,120UL);
  #line 437 
  memset((void *)(& ale_params),0,48UL);
  #line 439 
  switch (cpsw->version) {
    #line 440 
    case (u32)1638666: 
                       #line 440 
    ;
    #line 441 
    cpsw->host_port_regs = (struct cpsw_host_regs *)(ss_regs + 40U);
    #line 442 
    cpts_regs = ss_regs + 1280U;
    #line 443 
    cpsw->hw_stats = (u8 *)(ss_regs + 1024U);
    #line 444 
    dma_params.dmaregs = ss_regs + 256U;
    #line 445 
    dma_params.txhdp = ss_regs + 512U;
    #line 446 
    ale_params.ale_regs = ss_regs + 1536U;
    #line 447 
    slave_offset = 80U;
    #line 448 
    slave_size = 64U;
    #line 449 
    sliver_offset = 1792U;
    #line 450 
    dma_params.desc_mem_phys = 0ULL;
    #line 451 
    break;
    #line 452 
    case (u32)1638668: 
                       #line 452 
    ;
    #line 453 
    case (u32)1638671: 
                       #line 453 
    ;
    #line 454 
    case (u32)1638674: 
                       #line 454 
    ;
    #line 455 
    cpsw->host_port_regs = (struct cpsw_host_regs *)(ss_regs + 264U);
    #line 456 
    cpts_regs = ss_regs + 3072U;
    #line 457 
    cpsw->hw_stats = (u8 *)(ss_regs + 2304U);
    #line 458 
    dma_params.dmaregs = ss_regs + 2048U;
    #line 459 
    dma_params.txhdp = ss_regs + 2560U;
    #line 460 
    ale_params.ale_regs = ss_regs + 3328U;
    #line 461 
    slave_offset = 512U;
    #line 462 
    slave_size = 256U;
    #line 463 
    sliver_offset = 3456U;
    #line 464 
    dma_params.desc_mem_phys = desc_mem_phys;
    #line 465 
    break;
    #line 466 
    default: 
             #line 466 
    ;
    #line 467 
    _dev_err(dev,(char *)"unknown version 0x%08x\n",cpsw->version);
    #line 468 
    return -19;
  }
  #line 471 
  i = 0;
  #line 471 
  while (cpsw->data.slaves > (unsigned int)i) {
    {
      #line 472 
      struct cpsw_slave *slave = cpsw->slaves + (unsigned long)i;
      #line 473 
      void *regs = (void *)cpsw->regs;
      #line 475 
      slave->slave_num = i;
      #line 476 
      slave->data = cpsw->data.slave_data + (unsigned long)i;
      #line 477 
      slave->regs = regs + (unsigned long)slave_offset;
      #line 478 
      slave->port_vlan = (unsigned int)(slave->data)->dual_emac_res_vlan;
      #line 479 
      slave->mac_sl = cpsw_sl_get((char *)"cpsw",dev,regs + (unsigned long)sliver_offset);
      #line 480 
      if ((int)IS_ERR_0((void *)slave->mac_sl) != 0) {
        #line 481 
        return (int)PTR_ERR_0((void *)slave->mac_sl);
      }
      #line 483 
      slave_offset += slave_size;
      #line 484 
      sliver_offset += 64U;
    }
    #line 471 
    i ++;
  }
  #line 487 
  ale_params.dev = dev;
  #line 488 
  ale_params.ale_ageout = (unsigned long)ale_ageout_0;
  #line 489 
  ale_params.ale_entries = (unsigned long)data->ale_entries;
  #line 490 
  ale_params.ale_ports = 3UL;
  #line 492 
  cpsw->ale = cpsw_ale_create(& ale_params);
  #line 493 
  if (cpsw->ale == (struct cpsw_ale *)0) {
    #line 494 
    _dev_err(dev,(char *)"error initializing ale engine\n");
    #line 495 
    return -19;
  }
  #line 498 
  dma_params.dev = dev;
  #line 499 
  dma_params.rxthresh = dma_params.dmaregs + 192U;
  #line 500 
  dma_params.rxfree = dma_params.dmaregs + 224U;
  #line 501 
  dma_params.rxhdp = dma_params.txhdp + 32U;
  #line 502 
  dma_params.txcp = dma_params.txhdp + 64U;
  #line 503 
  dma_params.rxcp = dma_params.txhdp + 96U;
  #line 505 
  dma_params.num_chan = (int)data->channels;
  #line 506 
  dma_params.has_soft_reset = (_Bool)1;
  #line 507 
  dma_params.min_packet_size = 64;
  #line 508 
  dma_params.desc_mem_size = (int)data->bd_ram_size;
  #line 509 
  dma_params.desc_align = 16;
  #line 510 
  dma_params.has_ext_regs = (_Bool)1;
  #line 511 
  dma_params.desc_hw_addr = dma_params.desc_mem_phys;
  #line 512 
  dma_params.bus_freq_mhz = cpsw->bus_freq_mhz;
  #line 513 
  dma_params.descs_pool_size = (unsigned int)descs_pool_size_0;
  #line 515 
  cpsw->dma = cpdma_ctlr_create(& dma_params);
  #line 516 
  if (cpsw->dma == (struct cpdma_ctlr *)0) {
    #line 517 
    _dev_err(dev,(char *)"error initializing dma\n");
    #line 518 
    return -12;
  }
  #line 521 
  cpts_node = of_get_child_by_name((cpsw->dev)->of_node,(char *)"cpts");
  #line 522 
  if (cpts_node == (struct device_node *)0) 
                                            #line 523 
                                            cpts_node = (cpsw->dev)->of_node;
  #line 525 
  cpsw->cpts = cpts_create(cpsw->dev,cpts_regs,cpts_node);
  #line 526 
  if ((int)IS_ERR_0((void *)cpsw->cpts) != 0) {
    #line 527 
    ret = (int)PTR_ERR_0((void *)cpsw->cpts);
    #line 528 
    cpdma_ctlr_destroy(cpsw->dma);
  }
  #line 530 
  of_node_put(cpts_node);
  #line 532 
  return ret;
}

#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static void cpsw_hwtstamp_v1(struct cpsw_priv *priv)
{
  #line 541 
  u32 ts_en;
  #line 541 
  u32 seq_id;
  #line 539 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 540 
  struct cpsw_slave *slave = cpsw->slaves + (unsigned long)(*cpsw_slave_index)(cpsw,priv);
  #line 543 
  if (priv->tx_ts_enabled == 0 && priv->rx_ts_enabled == 0) {
    #line 544 
    slave_write(slave,0U,20U);
    #line 545 
    return;
  }
  #line 548 
  seq_id = 2001143U;
  #line 549 
  ts_en = 983040U;
  #line 551 
  if (priv->tx_ts_enabled != 0) 
                                #line 552 
                                ts_en |= 16U;
  #line 554 
  if (priv->rx_ts_enabled != 0) 
                                #line 555 
                                ts_en |= 1U;
  #line 557 
  slave_write(slave,ts_en,20U);
  #line 558 
  slave_write(slave,seq_id,24U);
  #line 559 
  return;
}

#line 561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static void cpsw_hwtstamp_v2(struct cpsw_priv *priv)
{
  #line 564 
  struct cpsw_slave *slave;
  #line 565 
  u32 ctrl;
  #line 565 
  u32 mtype;
  #line 563 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 567 
  slave = cpsw->slaves + (unsigned long)(*cpsw_slave_index)(cpsw,priv);
  #line 569 
  ctrl = slave_read(slave,0U);
  #line 570 
  switch (cpsw->version) {
    #line 571 
    case (u32)1638668: 
                       #line 571 
    ;
    #line 572 
    ctrl &= 4293886184U;
    #line 574 
    if (priv->tx_ts_enabled != 0) 
                                  #line 575 
                                  ctrl |= 1081110U;
    #line 577 
    if (priv->rx_ts_enabled != 0) 
                                  #line 578 
                                  ctrl |= 1081109U;
    #line 579 
    break;
    #line 580 
    case (u32)1638671: 
                       #line 580 
    ;
    #line 581 
    default: 
             #line 581 
    ;
    #line 582 
    ctrl &= 4293853352U;
    #line 584 
    if (priv->tx_ts_enabled != 0) 
                                  #line 585 
                                  ctrl |= 1113942U;
    #line 587 
    if (priv->rx_ts_enabled != 0) 
                                  #line 588 
                                  ctrl |= 1113941U;
    #line 589 
    break;
  }
  #line 592 
  mtype = 1966095U;
  #line 594 
  slave_write(slave,mtype,28U);
  #line 595 
  slave_write(slave,ctrl,0U);
  #line 596 
  writel(35063U,(void *)(& (cpsw->regs)->ts_ltype));
  #line 597 
  writel(33024U,(void *)(& (cpsw->regs)->vlan_ltype));
  #line 598 
  return;
}

#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static int cpsw_hwtstamp_set(struct net_device *dev, struct ifreq *ifr)
{
  #line 604 
  struct hwtstamp_config cfg;
  #line 664 
  int tmp_2_2;
  #line 602 
  struct cpsw_priv *priv = netdev_priv(dev);
  #line 603 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 606 
  if ((cpsw->version != 1638666U && cpsw->version != 1638668U) && cpsw->version != 1638671U) 
    #line 609 
    return -95;
  #line 611 
  if (copy_from_user((void *)(& cfg),ifr->ifr_ifru.ifru_data,12UL) != 0UL) 
    #line 612 
    return -14;
  #line 615 
  if (cfg.flags != 0) 
                      #line 616 
                      return -22;
  #line 618 
  if ((unsigned int)cfg.tx_type > 1U) 
                                      #line 619 
                                      return -34;
  #line 621 
  switch (cfg.rx_filter) {
    #line 622 
    case 0: 
            #line 622 
    ;
    #line 623 
    priv->rx_ts_enabled = 0;
    #line 624 
    break;
    #line 625 
    case 1: 
            #line 625 
    ;
    #line 626 
    case 15: 
             #line 626 
    ;
    #line 627 
    return -34;
    #line 628 
    case 3: 
            #line 628 
    ;
    #line 629 
    case 4: 
            #line 629 
    ;
    #line 630 
    case 5: 
            #line 630 
    ;
    #line 631 
    priv->rx_ts_enabled = 3;
    #line 632 
    cfg.rx_filter = 3;
    #line 633 
    break;
    #line 634 
    case 6: 
            #line 634 
    ;
    #line 635 
    case 7: 
            #line 635 
    ;
    #line 636 
    case 8: 
            #line 636 
    ;
    #line 637 
    case 9: 
            #line 637 
    ;
    #line 638 
    case 10: 
             #line 638 
    ;
    #line 639 
    case 11: 
             #line 639 
    ;
    #line 640 
    case 12: 
             #line 640 
    ;
    #line 641 
    case 13: 
             #line 641 
    ;
    #line 642 
    case 14: 
             #line 642 
    ;
    #line 643 
    priv->rx_ts_enabled = 12;
    #line 644 
    cfg.rx_filter = 12;
    #line 645 
    break;
    #line 646 
    default: 
             #line 646 
    ;
    #line 647 
    return -34;
  }
  #line 650 
  priv->tx_ts_enabled = cfg.tx_type == 1;
  #line 652 
  switch (cpsw->version) {
    #line 653 
    case (u32)1638666: 
                       #line 653 
    ;
    #line 654 
    cpsw_hwtstamp_v1(priv);
    #line 655 
    break;
    #line 656 
    case (u32)1638668: 
                       #line 656 
    ;
    #line 657 
    case (u32)1638671: 
                       #line 657 
    ;
    #line 658 
    cpsw_hwtstamp_v2(priv);
    #line 659 
    break;
    #line 660 
    default: 
             #line 660 
    ;
    {
      #line 661 
      int __ret_warn_on = 1;
      #line 661 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 662 
        ldv_inline_asm();
        #line 663 
        ldv_inline_asm();
      }
      #line 661 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
  }
  #line 664 
  if (copy_to_user(ifr->ifr_ifru.ifru_data,(void *)(& cfg),12UL) != 0UL) 
    #line 664 
    tmp_2_2 = -14; else 
                        #line 664 
                        tmp_2_2 = 0;
  #line 664 
  return tmp_2_2;
}

#line 667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static int cpsw_hwtstamp_get(struct net_device *dev, struct ifreq *ifr)
{
  #line 671 
  struct hwtstamp_config cfg;
  #line 682 
  int tmp_2;
  #line 669 
  struct cpsw_common *cpsw = ((struct cpsw_priv *)netdev_priv(dev))->cpsw;
  #line 670 
  struct cpsw_priv *priv = netdev_priv(dev);
  #line 673 
  if ((cpsw->version != 1638666U && cpsw->version != 1638668U) && cpsw->version != 1638671U) 
    #line 676 
    return -95;
  #line 678 
  cfg.flags = 0;
  #line 679 
  cfg.tx_type = priv->tx_ts_enabled != 0;
  #line 680 
  cfg.rx_filter = priv->rx_ts_enabled;
  #line 682 
  if (copy_to_user(ifr->ifr_ifru.ifru_data,(void *)(& cfg),12UL) != 0UL) 
    #line 682 
    tmp_2 = -14; else 
                      #line 682 
                      tmp_2 = 0;
  #line 682 
  return tmp_2;
}

#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_ndo_ioctl(struct net_device *dev, struct ifreq *req, int cmd)
{
  #line 698 
  struct cpsw_priv *priv = netdev_priv(dev);
  #line 699 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 700 
  int slave_no = (*cpsw_slave_index)(cpsw,priv);
  #line 702 
  if (! netif_running(dev)) 
                            #line 703 
                            return -22;
  #line 705 
  switch (cmd) {
    #line 706 
    case 35248: 
                #line 706 
    ;
    #line 707 
    return cpsw_hwtstamp_set(dev,req);
    #line 708 
    case 35249: 
                #line 708 
    ;
    #line 709 
    return cpsw_hwtstamp_get(dev,req);
  }
  #line 712 
  if ((cpsw->slaves + (unsigned long)slave_no)->phy == (struct phy_device *)0) 
    #line 713 
    return -95;
  #line 714 
  return phy_mii_ioctl((cpsw->slaves + (unsigned long)slave_no)->phy,req,cmd);
}

#line 717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_ndo_set_tx_maxrate(struct net_device *ndev, int queue, u32 rate)
{
  #line 721 
  struct cpsw_slave *slave;
  #line 722 
  u32 min_rate;
  #line 723 
  u32 ch_rate;
  #line 724 
  int i;
  #line 724 
  int ret;
  #line 719 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 720 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 726 
  ch_rate = (unsigned int)netdev_get_tx_queue(ndev,(unsigned int)queue)->tx_maxrate;
  #line 727 
  if (ch_rate == rate) 
                       #line 728 
                       return 0;
  #line 730 
  ch_rate = rate * 1000U;
  #line 731 
  min_rate = cpdma_chan_get_min_rate(cpsw->dma);
  #line 732 
  if (ch_rate < min_rate && ch_rate != 0U) {
    #line 733 
    _dev_err(priv->dev,(char *)"The channel rate cannot be less than %dMbps",min_rate);
    #line 735 
    return -22;
  }
  #line 738 
  if ((unsigned int)cpsw->speed < rate) {
    #line 739 
    _dev_err(priv->dev,(char *)"The channel rate cannot be more than 2Gbps");
    #line 740 
    return -22;
  }
  #line 743 
  ret = pm_runtime_get_sync(cpsw->dev);
  #line 744 
  if (ret < 0) {
    #line 745 
    pm_runtime_put_noidle(cpsw->dev);
    #line 746 
    return ret;
  }
  #line 749 
  ret = cpdma_chan_set_rate(cpsw->txv[queue].ch,ch_rate);
  #line 750 
  pm_runtime_put(cpsw->dev);
  #line 752 
  if (ret != 0) 
                #line 753 
                return ret;
  #line 756 
  i = 0;
  #line 756 
  while (cpsw->data.slaves > (unsigned int)i) {
    {
      #line 757 
      slave = cpsw->slaves + (unsigned long)i;
      #line 758 
      if (slave->ndev == (struct net_device *)0) 
                                                 #line 759 
                                                 goto __Cont;
      #line 761 
      netdev_get_tx_queue(slave->ndev,(unsigned int)queue)->tx_maxrate = (unsigned long)rate;
    }
    #line 756 
    __Cont: 
            #line 756 
    i ++;
  }
  #line 764 
  cpsw_split_res(cpsw);
  #line 765 
  return ret;
}

#line 768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static int cpsw_tc_to_fifo(int tc, int num_tc)
{
  #line 770 
  if (num_tc + -1 == tc) 
                         #line 771 
                         return 0;
  #line 773 
  return 3 - tc;
}

#line 776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
bool cpsw_shp_is_off(struct cpsw_priv *priv)
{
  #line 779 
  struct cpsw_slave *slave;
  #line 780 
  u32 shift;
  #line 780 
  u32 mask;
  #line 780 
  u32 val;
  #line 778 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 782 
  val = readl((void *)(& (cpsw->regs)->ptype));
  #line 784 
  slave = cpsw->slaves + (unsigned long)(*cpsw_slave_index)(cpsw,priv);
  #line 785 
  shift = (unsigned int)(slave->slave_num * 3 + 16);
  #line 786 
  mask = (unsigned int)(7 << shift);
  #line 787 
  val &= mask;
  #line 789 
  return (_Bool)(val == 0U);
}

#line 792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static void cpsw_fifo_shp_on(struct cpsw_priv *priv, int fifo, int on)
{
  #line 795 
  struct cpsw_slave *slave;
  #line 796 
  u32 shift;
  #line 796 
  u32 mask;
  #line 796 
  u32 val;
  #line 794 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 798 
  val = readl((void *)(& (cpsw->regs)->ptype));
  #line 800 
  slave = cpsw->slaves + (unsigned long)(*cpsw_slave_index)(cpsw,priv);
  #line 801 
  shift = (unsigned int)(slave->slave_num * 3 + 16);
  #line 802 
  fifo --;
  #line 802 
  mask = (unsigned int)((1 << fifo) << shift);
  #line 803 
  if (on != 0) 
               #line 803 
               val |= mask; else 
                                 #line 803 
                                 val = ~ mask & val;
  #line 805 
  writel(val,(void *)(& (cpsw->regs)->ptype));
  #line 806 
  return;
}

#line 808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static int cpsw_set_fifo_bw(struct cpsw_priv *priv, int fifo, int bw)
{
  #line 859 
  u32 __x;
  #line 859 
  int __d;
  #line 811 
  u32 send_pct;
  #line 811 
  u32 shift;
  #line 812 
  struct cpsw_slave *slave;
  #line 813 
  int i;
  #line 810 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 811 
  u32 val = 0U;
  #line 813 
  int pct = 0;
  #line 815 
  if (priv->shp_cfg_speed * 1000 < bw) 
                                       #line 816 
                                       goto err;
  #line 821 
  slave = cpsw->slaves + (unsigned long)(*cpsw_slave_index)(cpsw,priv);
  #line 822 
  send_pct = slave_read(slave,40U);
  #line 823 
  i = 3;
  #line 823 
  while (i > 0) {
    #line 824 
    if (bw == 0) {
      #line 825 
      if (i >= fifo || priv->fifo_bw[i] == 0) 
                                              #line 826 
                                              goto __Cont;
      #line 828 
      _dev_warn(priv->dev,(char *)"Prev FIFO%d is shaped",i);
      #line 829 
      goto __Cont;
    }
    #line 832 
    if (priv->fifo_bw[i] == 0 && i > fifo) {
      #line 833 
      _dev_err(priv->dev,(char *)"Upper FIFO%d is not shaped",i);
      #line 834 
      return -22;
    }
    #line 837 
    shift = (unsigned int)((i + -1) * 8);
    #line 838 
    if (i == fifo) {
      #line 839 
      send_pct = (unsigned int)(~ (127 << shift)) & send_pct;
      #line 840 
      val = (unsigned int)(((priv->shp_cfg_speed * 10 + bw) + -1) / (priv->shp_cfg_speed * 10));
      #line 841 
      if (val == 0U) 
                     #line 842 
                     val = 1U;
      #line 844 
      send_pct = (val << shift) | send_pct;
      #line 845 
      pct = (int)((unsigned int)pct + val);
      #line 846 
      goto __Cont;
    }
    #line 849 
    if (priv->fifo_bw[i] != 0) 
                               #line 850 
                               pct = (int)(((send_pct >> shift) & 127U) + (unsigned int)pct);
    #line 823 
    __Cont: 
            #line 823 
    i --;
  }
  #line 853 
  if (pct > 99) 
                #line 854 
                goto err;
  #line 856 
  slave_write(slave,send_pct,40U);
  #line 857 
  priv->fifo_bw[fifo] = bw;
  #line 859 
  __x = (unsigned int)priv->shp_cfg_speed * val;
  #line 859 
  __d = 100;
  #line 859 
  ;
  #line 859 
  ;
  #line 859 
  _dev_warn(priv->dev,(char *)"set FIFO%d bw = %d\n",fifo,(((unsigned int)(__d / 2) + __x) / (unsigned int)__d));
  #line 862 
  return 0;
  #line 863 
  err: 
       #line 863 
  ;
  #line 864 
  _dev_err(priv->dev,(char *)"Bandwidth doesn\'t fit in tc configuration");
  #line 865 
  return -22;
}

#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static int cpsw_set_fifo_rlimit(struct cpsw_priv *priv, int fifo, int bw)
{
  #line 871 
  struct cpsw_slave *slave;
  #line 872 
  u32 tx_in_ctl_rg;
  #line 872 
  u32 val;
  #line 873 
  int ret;
  #line 870 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 875 
  ret = cpsw_set_fifo_bw(priv,fifo,bw);
  #line 876 
  if (ret != 0) 
                #line 877 
                return ret;
  #line 879 
  slave = cpsw->slaves + (unsigned long)(*cpsw_slave_index)(cpsw,priv);
  #line 880 
  if (cpsw->version == 1638666U) 
                                 #line 880 
                                 tx_in_ctl_rg = 8U; else 
                                                         #line 880 
                                                         tx_in_ctl_rg = 16U;
  #line 883 
  if (bw == 0) 
               #line 884 
               cpsw_fifo_shp_on(priv,fifo,bw);
  #line 886 
  val = slave_read(slave,tx_in_ctl_rg);
  #line 887 
  if ((int)cpsw_shp_is_off(priv) != 0) {
    #line 889 
    val &= 4279238655U;
    #line 892 
    val &= 4294770687U;
    #line 895 
    if (bw != 0) 
                 #line 896 
                 val |= 131072U; else 
                                      #line 898 
                                      priv->shp_cfg_speed = 0;
  }
  #line 902 
  if (bw != 0) 
               #line 903 
               val = (unsigned int)(1UL << (fifo + 20)) | val; else 
                                                                    #line 905 
                                                                    val = ~ ((unsigned int)(1UL << (fifo + 20))) & val;
  #line 906 
  slave_write(slave,val,tx_in_ctl_rg);
  #line 909 
  cpsw_fifo_shp_on(priv,fifo,bw);
  #line 910 
  return 0;
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static int cpsw_set_cbs(struct net_device *ndev, struct tc_cbs_qopt_offload *qopt)
{
  #line 923 
  struct cpsw_slave *slave;
  #line 925 
  int tc;
  #line 925 
  int ret;
  #line 925 
  int fifo;
  #line 921 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 922 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 924 
  int prev_speed = 0;
  #line 926 
  u32 bw = 0U;
  #line 928 
  tc = netdev_txq_to_tc(priv->ndev,(unsigned int)qopt->queue);
  #line 934 
  fifo = cpsw_tc_to_fifo(tc,(int)ndev->num_tc);
  #line 935 
  if (fifo == 0) {
    #line 936 
    _dev_err(priv->dev,(char *)"Last tc%d can\'t be rate limited",tc);
    #line 937 
    return -22;
  }
  #line 941 
  if ((unsigned int)qopt->enable == 0U && priv->fifo_bw[fifo] == 0) 
                                                                    #line 942 
                                                                    return 0;
  #line 945 
  slave = cpsw->slaves + (unsigned long)(*cpsw_slave_index)(cpsw,priv);
  #line 946 
  if (slave->phy != (struct phy_device *)0 && (unsigned int)(slave->phy)->link != 0U) {
    #line 947 
    if (priv->shp_cfg_speed != 0 && priv->shp_cfg_speed != (slave->phy)->speed) 
      #line 949 
      prev_speed = priv->shp_cfg_speed;
    #line 951 
    priv->shp_cfg_speed = (slave->phy)->speed;
  }
  #line 954 
  if (priv->shp_cfg_speed == 0) {
    #line 955 
    _dev_err(priv->dev,(char *)"Link speed is not known");
    #line 956 
    return -1;
  }
  #line 959 
  ret = pm_runtime_get_sync(cpsw->dev);
  #line 960 
  if (ret < 0) {
    #line 961 
    pm_runtime_put_noidle(cpsw->dev);
    #line 962 
    return ret;
  }
  #line 965 
  if ((unsigned int)qopt->enable != 0U) 
                                        #line 965 
                                        bw = (unsigned int)qopt->idleslope; else 
                                                                    #line 965 
                                                                    bw = 0U;
  #line 966 
  ret = cpsw_set_fifo_rlimit(priv,fifo,(int)bw);
  #line 967 
  if (ret != 0) {
    #line 968 
    priv->shp_cfg_speed = prev_speed;
    #line 969 
    prev_speed = 0;
  }
  #line 972 
  if (bw != 0U && prev_speed != 0) 
                                   #line 973 
                                   _dev_warn(priv->dev,(char *)"Speed was changed, CBS shaper speeds are changed!");
  #line 976 
  pm_runtime_put_sync(cpsw->dev);
  #line 977 
  return ret;
}

#line 980  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static int cpsw_set_mqprio(struct net_device *ndev, void *type_data)
{
  #line 985 
  int fifo;
  #line 985 
  int num_tc;
  #line 985 
  int count;
  #line 985 
  int offset;
  #line 986 
  struct cpsw_slave *slave;
  #line 988 
  int i;
  #line 988 
  int tc;
  #line 988 
  int ret;
  #line 982 
  struct tc_mqprio_qopt_offload *mqprio = (struct tc_mqprio_qopt_offload *)type_data;
  #line 983 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 984 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 987 
  u32 tx_prio_map = 0U;
  #line 990 
  num_tc = (int)mqprio->qopt.num_tc;
  #line 991 
  if (num_tc > 4) 
                  #line 992 
                  return -22;
  #line 994 
  if ((unsigned int)mqprio->mode != 0U) 
                                        #line 995 
                                        return -22;
  #line 997 
  ret = pm_runtime_get_sync(cpsw->dev);
  #line 998 
  if (ret < 0) {
    #line 999 
    pm_runtime_put_noidle(cpsw->dev);
    #line 1000 
    return ret;
  }
  #line 1003 
  if (num_tc != 0) {
    #line 1004 
    i = 0;
    #line 1004 
    while (i <= 7) {
      #line 1005 
      tc = (int)mqprio->qopt.prio_tc_map[i];
      #line 1006 
      fifo = cpsw_tc_to_fifo(tc,num_tc);
      #line 1007 
      tx_prio_map = (unsigned int)(fifo << i * 4) | tx_prio_map;
      #line 1004 
      i ++;
    }
    #line 1010 
    netdev_set_num_tc(ndev,(unsigned char)((int)((unsigned char)num_tc)));
    #line 1011 
    i = 0;
    #line 1011 
    while (i < num_tc) {
      #line 1012 
      count = (int)mqprio->qopt.count[i];
      #line 1013 
      offset = (int)mqprio->qopt.offset[i];
      #line 1014 
      netdev_set_tc_queue(ndev,(unsigned char)((int)((unsigned char)i)),(unsigned short)((int)((unsigned short)count)),(unsigned short)((int)((unsigned short)offset)));
      #line 1011 
      i ++;
    }
  }
  #line 1018 
  if ((unsigned int)mqprio->qopt.hw == 0U) {
    #line 1020 
    netdev_reset_tc(ndev);
    #line 1021 
    tx_prio_map = 857870592U;
  }
  #line 1024 
  priv->mqprio_hw = (_Bool)((unsigned int)mqprio->qopt.hw != 0U);
  #line 1026 
  if (cpsw->version == 1638666U) 
                                 #line 1026 
                                 offset = 16; else 
                                                   #line 1026 
                                                   offset = 24;
  #line 1029 
  slave = cpsw->slaves + (unsigned long)(*cpsw_slave_index)(cpsw,priv);
  #line 1030 
  slave_write(slave,tx_prio_map,(unsigned int)offset);
  #line 1032 
  pm_runtime_put_sync(cpsw->dev);
  #line 1034 
  return 0;
}

#line 1037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_ndo_setup_tc(struct net_device *ndev, enum tc_setup_type type, void *type_data)
{
  #line 1040 
  switch ((unsigned int)type) {
    #line 1041 
    case (unsigned int)6: 
                          #line 1041 
    ;
    #line 1042 
    return cpsw_set_cbs(ndev,(struct tc_cbs_qopt_offload *)type_data);
    #line 1044 
    case (unsigned int)0: 
                          #line 1044 
    ;
    #line 1045 
    return cpsw_set_mqprio(ndev,type_data);
    #line 1047 
    default: 
             #line 1047 
    ;
    #line 1048 
    return -95;
  }
}

#line 1052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_cbs_resume(struct cpsw_slave *slave, struct cpsw_priv *priv)
{
  #line 1054 
  int fifo;
  #line 1054 
  int bw;
  #line 1056 
  fifo = 3;
  #line 1056 
  while (fifo > 0) {
    #line 1057 
    bw = priv->fifo_bw[fifo];
    #line 1058 
    if (bw == 0) 
                 #line 1059 
                 goto __Cont;
    #line 1061 
    cpsw_set_fifo_rlimit(priv,fifo,bw);
    #line 1056 
    __Cont: 
            #line 1056 
    fifo --;
  }
  #line 1063 
  return;
}

#line 1065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_mqprio_resume(struct cpsw_slave *slave, struct cpsw_priv *priv)
{
  #line 1069 
  int i;
  #line 1069 
  int tc;
  #line 1069 
  int fifo;
  #line 1070 
  u32 tx_prio_rg;
  #line 1067 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 1068 
  u32 tx_prio_map = 0U;
  #line 1072 
  if (! priv->mqprio_hw) 
                         #line 1073 
                         return;
  #line 1075 
  i = 0;
  #line 1075 
  while (i <= 7) {
    #line 1076 
    tc = netdev_get_prio_tc_map(priv->ndev,(unsigned int)i);
    #line 1077 
    fifo = 3 - tc;
    #line 1078 
    tx_prio_map = (unsigned int)(fifo << i * 4) | tx_prio_map;
    #line 1075 
    i ++;
  }
  #line 1081 
  if (cpsw->version == 1638666U) 
                                 #line 1081 
                                 tx_prio_rg = 16U; else 
                                                        #line 1081 
                                                        tx_prio_rg = 24U;
  #line 1084 
  slave_write(slave,tx_prio_map,tx_prio_rg);
  #line 1085 
  return;
}

#line 1087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_fill_rx_channels(struct cpsw_priv *priv)
{
  #line 1090 
  struct cpsw_meta_xdp *xmeta;
  #line 1091 
  struct page_pool *pool;
  #line 1092 
  struct page *page;
  #line 1093 
  int ch_buf_num;
  #line 1094 
  int ch;
  #line 1094 
  int i;
  #line 1094 
  int ret;
  #line 1095 
  dma_addr_t dma;
  #line 1089 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 1097 
  ch = 0;
  #line 1097 
  while (cpsw->rx_ch_num > ch) {
    #line 1098 
    pool = cpsw->page_pool[ch];
    #line 1099 
    ch_buf_num = cpdma_chan_get_rx_buf_num(cpsw->rxv[ch].ch);
    #line 1100 
    i = 0;
    #line 1100 
    while (i < ch_buf_num) {
      {
        #line 1101 
        page = page_pool_dev_alloc_pages(pool);
        #line 1102 
        if (page == (struct page *)0) {
          #line 1103 
          if ((priv->msg_enable & 32U) != 0U) {
            #line 1103 
            if (net_ratelimit() != 0) 
                                      #line 1103 
                                      _dev_err(priv->dev,(char *)"allocate rx page err\n");
          }
          #line 1104 
          return -12;
        }
        #line 1107 
        xmeta = (struct cpsw_meta_xdp *)(lowmem_page_address(page) + 32UL);
        #line 1108 
        xmeta->ndev = priv->ndev;
        #line 1109 
        xmeta->ch = ch;
        #line 1111 
        dma = page_pool_get_dma_addr(page) + 256ULL;
        #line 1112 
        ret = cpdma_chan_idle_submit_mapped(cpsw->rxv[ch].ch,(void *)page,dma,cpsw->rx_packet_max,0);
        #line 1116 
        if (ret < 0) {
          #line 1117 
          if ((priv->msg_enable & 32U) != 0U) {
            #line 1117 
            if (net_ratelimit() != 0) 
                                      #line 1117 
                                      _dev_err(priv->dev,(char *)"cannot submit page to channel %d rx, error %d\n",ch,ret);
          }
          #line 1120 
          page_pool_recycle_direct(pool,page);
          #line 1121 
          return ret;
        }
      }
      #line 1100 
      i ++;
    }
    #line 1125 
    if ((priv->msg_enable & 32U) != 0U) {
      #line 1125 
      if (net_ratelimit() != 0) 
                                #line 1125 
                                _dev_info(priv->dev,(char *)"ch %d rx, submitted %d descriptors\n",ch,ch_buf_num);
    }
    #line 1097 
    ch ++;
  }
  #line 1129 
  return 0;
}

#line 1132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static struct page_pool *cpsw_create_page_pool(struct cpsw_common *cpsw, int size)
{
  #line 1135 
  struct page_pool_params pp_params;
  #line 1136 
  struct page_pool *pool;
  #line 1138 
  pp_params.order = 0U;
  #line 1139 
  pp_params.flags = 1U;
  #line 1140 
  pp_params.pool_size = (unsigned int)size;
  #line 1141 
  pp_params.nid = -1;
  #line 1142 
  pp_params.dma_dir = DMA_BIDIRECTIONAL;
  #line 1143 
  pp_params.dev = cpsw->dev;
  #line 1145 
  pool = page_pool_create(& pp_params);
  #line 1146 
  if ((int)IS_ERR_0((void *)pool) != 0) 
                                        #line 1147 
                                        _dev_err(cpsw->dev,(char *)"cannot create rx page pool\n");
  #line 1149 
  return pool;
}

#line 1152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static int cpsw_create_rx_pool(struct cpsw_common *cpsw, int ch)
{
  #line 1154 
  struct page_pool *pool;
  #line 1155 
  int pool_size;
  #line 1155 
  int ret = 0;
  #line 1157 
  pool_size = cpdma_chan_get_rx_buf_num(cpsw->rxv[ch].ch);
  #line 1158 
  pool = cpsw_create_page_pool(cpsw,pool_size);
  #line 1159 
  if ((int)IS_ERR_0((void *)pool) != 0) {
    #line 1160 
    ret = (int)PTR_ERR_0((void *)pool);
  }
  else 
       #line 1162 
       cpsw->page_pool[ch] = pool;
  #line 1164 
  return ret;
}

#line 1167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static int cpsw_ndev_create_xdp_rxq(struct cpsw_priv *priv, int ch)
{
  #line 1170 
  struct xdp_rxq_info *rxq;
  #line 1171 
  struct page_pool *pool;
  #line 1172 
  int ret;
  #line 1169 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 1174 
  pool = cpsw->page_pool[ch];
  #line 1175 
  rxq = & priv->xdp_rxq[ch];
  #line 1177 
  ret = xdp_rxq_info_reg(rxq,priv->ndev,(unsigned int)ch);
  #line 1178 
  if (ret != 0) 
                #line 1179 
                return ret;
  #line 1181 
  ret = xdp_rxq_info_reg_mem_model(rxq,(enum xdp_mem_type)MEM_TYPE_PAGE_POOL,(void *)pool);
  #line 1182 
  if (ret != 0) 
                #line 1183 
                xdp_rxq_info_unreg(rxq);
  #line 1185 
  return ret;
}

#line 1188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static void cpsw_ndev_destroy_xdp_rxq(struct cpsw_priv *priv, int ch)
{
  #line 1190 
  struct xdp_rxq_info *rxq = & priv->xdp_rxq[ch];
  #line 1192 
  if (! xdp_rxq_info_is_reg(rxq)) 
                                  #line 1193 
                                  return;
  #line 1195 
  xdp_rxq_info_unreg(rxq);
  #line 1196 
  return;
}

#line 1198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
void cpsw_destroy_xdp_rxqs(struct cpsw_common *cpsw)
{
  #line 1200 
  struct net_device *ndev;
  #line 1201 
  int i;
  #line 1201 
  int ch;
  #line 1203 
  ch = 0;
  #line 1203 
  while (cpsw->rx_ch_num > ch) {
    #line 1204 
    i = 0;
    #line 1204 
    while (cpsw->data.slaves > (unsigned int)i) {
      {
        #line 1205 
        ndev = (cpsw->slaves + (unsigned long)i)->ndev;
        #line 1206 
        if (ndev == (struct net_device *)0) 
                                            #line 1207 
                                            goto __Cont;
        #line 1209 
        ;
        #line 1209 
        cpsw_ndev_destroy_xdp_rxq((struct cpsw_priv *)netdev_priv(ndev),ch);
      }
      #line 1204 
      __Cont: 
              #line 1204 
      i ++;
    }
    #line 1212 
    page_pool_destroy(cpsw->page_pool[ch]);
    #line 1213 
    cpsw->page_pool[ch] = (struct page_pool *)0;
    #line 1203 
    ch ++;
  }
  #line 1215 
  return;
}

#line 1217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_create_xdp_rxqs(struct cpsw_common *cpsw)
{
  #line 1219 
  struct net_device *ndev;
  #line 1220 
  int i;
  #line 1220 
  int ch;
  #line 1220 
  int ret;
  #line 1222 
  ch = 0;
  #line 1222 
  while (cpsw->rx_ch_num > ch) {
    #line 1223 
    ret = cpsw_create_rx_pool(cpsw,ch);
    #line 1224 
    if (ret != 0) 
                  #line 1225 
                  goto err_cleanup;
    #line 1230 
    i = 0;
    #line 1230 
    while (cpsw->data.slaves > (unsigned int)i) {
      {
        #line 1231 
        ndev = (cpsw->slaves + (unsigned long)i)->ndev;
        #line 1232 
        if (ndev == (struct net_device *)0) 
                                            #line 1233 
                                            goto __Cont;
        #line 1235 
        ;
        #line 1235 
        ret = cpsw_ndev_create_xdp_rxq((struct cpsw_priv *)netdev_priv(ndev),ch);
        #line 1236 
        if (ret != 0) 
                      #line 1237 
                      goto err_cleanup;
      }
      #line 1230 
      __Cont: 
              #line 1230 
      i ++;
    }
    #line 1222 
    ch ++;
  }
  #line 1241 
  return 0;
  #line 1243 
  err_cleanup: 
               #line 1243 
  ;
  #line 1244 
  cpsw_destroy_xdp_rxqs(cpsw);
  #line 1246 
  return ret;
}

#line 1249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
static int cpsw_xdp_prog_setup(struct cpsw_priv *priv, struct netdev_bpf *bpf)
{
  #line 1251 
  struct bpf_prog *prog = bpf->__anonCompField_netdev_bpf_158.__anonCompField___anonunion_1453_155.prog;
  #line 1253 
  if (priv->xdpi.prog == (struct bpf_prog *)0 && prog == (struct bpf_prog *)0) 
    #line 1254 
    return 0;
  #line 1256 
  if (! xdp_attachment_flags_ok(& priv->xdpi,bpf)) 
                                                   #line 1257 
                                                   return -16;
  {
    #line 1260 
    union __anonunion___u_1649 __u = {.__val = prog};
    #line 1259 
    __write_once_size((void *)(& priv->xdp_prog),(void *)(& __u.__c),8);
    #line 1259 
    struct bpf_prog *tmp_2 = __u.__val;
  }
  #line 1261 
  xdp_attachment_setup(& priv->xdpi,bpf);
  #line 1263 
  return 0;
}

#line 1266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_ndo_bpf(struct net_device *ndev, struct netdev_bpf *bpf)
{
  #line 1268 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 1270 
  switch ((unsigned int)bpf->command) {
    #line 1271 
    case (unsigned int)0: 
                          #line 1271 
    ;
    #line 1272 
    return cpsw_xdp_prog_setup(priv,bpf);
    #line 1274 
    case (unsigned int)2: 
                          #line 1274 
    ;
    #line 1275 
    return xdp_attachment_query(& priv->xdpi,bpf);
    #line 1277 
    default: 
             #line 1277 
    ;
    #line 1278 
    return -22;
  }
}

#line 1282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_xdp_tx_frame(struct cpsw_priv *priv, struct xdp_frame *xdpf, struct page *page, int port)
{
  #line 1286 
  struct cpsw_meta_xdp *xmeta;
  #line 1287 
  struct cpdma_chan *txch;
  #line 1288 
  dma_addr_t dma;
  #line 1289 
  int ret;
  #line 1285 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 1291 
  xmeta = (struct cpsw_meta_xdp *)((void *)xdpf + 32UL);
  #line 1292 
  xmeta->ndev = priv->ndev;
  #line 1293 
  xmeta->ch = 0;
  #line 1294 
  txch = cpsw->txv[0].ch;
  #line 1296 
  if (page != (struct page *)0) {
    #line 1297 
    dma = page_pool_get_dma_addr(page);
    #line 1298 
    dma = ((unsigned long long)xdpf->headroom + dma) + 32ULL;
    #line 1299 
    ;
    #line 1299 
    ;
    #line 1299 
    ;
    #line 1299 
    ;
    #line 1299 
    ret = cpdma_chan_submit_mapped(txch,cpsw_xdpf_to_handle(xdpf),dma,(int)xdpf->len,port);
  }
  else {
    #line 1302 
    if ((unsigned int)xdpf->headroom <= 15U) {
      #line 1303 
      xdp_return_frame_rx_napi(xdpf);
      #line 1304 
      return -22;
    }
    #line 1307 
    ;
    #line 1307 
    ;
    #line 1307 
    ;
    #line 1307 
    ;
    #line 1307 
    ret = cpdma_chan_submit(txch,cpsw_xdpf_to_handle(xdpf),xdpf->data,(int)xdpf->len,port);
  }
  #line 1311 
  if (ret != 0) {
    #line 1312 
    ((priv->ndev)->stats.tx_dropped) ++;
    #line 1313 
    xdp_return_frame_rx_napi(xdpf);
  }
  #line 1316 
  return ret;
}

#line 1319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.c"
int cpsw_run_xdp(struct cpsw_priv *priv, int ch, struct xdp_buff *xdp, struct page *page, int port)
{
  #line 1332 
  union __anonunion___u_1651 __u;
  #line 1325 
  struct xdp_frame *xdpf;
  #line 1326 
  struct bpf_prog *prog;
  #line 1327 
  u32 act;
  #line 1322 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 1323 
  struct net_device *ndev = priv->ndev;
  #line 1324 
  int ret = 1;
  #line 1329 
  rcu_read_lock();
  #line 1331 
  __read_once_size((void *)(& priv->xdp_prog),(void *)(& __u.__c),8);
  #line 1331 
  prog = (__u.__val);
  #line 1332 
  if (prog == (struct bpf_prog *)0) {
    #line 1333 
    ret = 0;
    #line 1334 
    goto out;
  }
  #line 1337 
  act = bpf_prog_run_xdp(prog,xdp);
  #line 1338 
  switch (act) {
    #line 1339 
    case (u32)2: 
                 #line 1339 
    ;
    #line 1340 
    ret = 0;
    #line 1341 
    break;
    #line 1342 
    case (u32)3: 
                 #line 1342 
    ;
    #line 1343 
    xdpf = convert_to_xdp_frame(xdp);
    #line 1344 
    if ((long)(xdpf == (struct xdp_frame *)0) != 0L) 
                                                     #line 1345 
                                                     goto drop;
    #line 1347 
    cpsw_xdp_tx_frame(priv,xdpf,page,port);
    #line 1348 
    break;
    #line 1349 
    case (u32)4: 
                 #line 1349 
    ;
    #line 1350 
    if (xdp_do_redirect(ndev,xdp,prog) != 0) 
                                             #line 1351 
                                             goto drop;
    #line 1358 
    xdp_do_flush_map();
    #line 1359 
    break;
    #line 1360 
    default: 
             #line 1360 
    ;
    #line 1361 
    bpf_warn_invalid_xdp_action(act);
    #line 1363 
    case (u32)0: 
                 #line 1363 
    ;
    #line 1364 
    trace_xdp_exception(ndev,prog,act);
    #line 1366 
    case (u32)1: 
                 #line 1366 
    ;
    #line 1367 
    goto drop;
  }
  #line 1369 
  out: 
       #line 1369 
  ;
  #line 1370 
  rcu_read_unlock();
  #line 1371 
  return ret;
  #line 1372 
  drop: 
        #line 1372 
  ;
  #line 1373 
  rcu_read_unlock();
  #line 1374 
  page_pool_recycle_direct(cpsw->page_pool[ch],page);
  #line 1375 
  return ret;
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_priv.i.aux"
static long PTR_ERR_0(void *ptr)
{
  #line 210 
  return ldv_ptr_err(ptr);
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_priv.i.aux"
static bool IS_ERR_0(void *ptr)
{
  #line 217 
  return ldv_is_err(ptr);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ethtool.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_1718 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static int atomic_fetch_add_unless_0(atomic_t *v, int a, int u)
{
  #line 1086 
  int c = atomic_read_0(v);
  #line 1088 
  while (! ((long)(c == u) != 0L)) {
    #line 1091 
    if (atomic_try_cmpxchg(v,& c,c + a)) 
                                         #line 1088 
                                         break;
  }
  #line 1093 
  return c;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static bool atomic_add_unless_0(atomic_t *v, int a, int u)
{
  #line 1111 
  ;
  #line 1111 
  return (_Bool)(atomic_fetch_add_unless_0(v,a,u) != u);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 205  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ethtool.i.aux"
static long PTR_ERR_1(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ethtool.i.aux"
static bool IS_ERR_1(void *ptr);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 1716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1716 
void _dev_notice(struct device *, char * , ...);
#line 2658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 2658 
void dev_close(struct net_device *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 1096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
#line 1096 
int genphy_restart_aneg(struct phy_device *);
#line 1173 
#line 1173 
void phy_ethtool_ksettings_get(struct phy_device *, struct ethtool_link_ksettings *);
#line 1175 
#line 1175 
int phy_ethtool_ksettings_set(struct phy_device *, struct ethtool_link_ksettings *);
#line 1205 
#line 1205 
int phy_ethtool_set_eee(struct phy_device *, struct ethtool_eee *);
#line 1206 
#line 1206 
int phy_ethtool_get_eee(struct phy_device *, struct ethtool_eee *);
#line 1207 
#line 1207 
int phy_ethtool_set_wol(struct phy_device *, struct ethtool_wolinfo *);
#line 1208 
#line 1208 
void phy_ethtool_get_wol(struct phy_device *, struct ethtool_wolinfo *);
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static void pm_runtime_put_noidle_0(struct device *dev)
{
  #line 75 
  atomic_add_unless_0(& dev->power.usage_count,-1,0);
  #line 76 
  return;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.h"
#line 117 
void cpsw_ale_dump(struct cpsw_ale *ale, u32 *data);
#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
u32 cpsw_get_msglevel(struct net_device *ndev);
#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_set_msglevel(struct net_device *ndev, u32 value);
#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_get_coalesce(struct net_device *ndev, struct ethtool_coalesce *coal);
#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_set_coalesce(struct net_device *ndev, struct ethtool_coalesce *coal);
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_get_sset_count(struct net_device *ndev, int sset);
#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_get_strings(struct net_device *ndev, u32 stringset, u8 *data);
#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_get_ethtool_stats(struct net_device *ndev, struct ethtool_stats *stats, u64 *data);
#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_get_pauseparam(struct net_device *ndev, struct ethtool_pauseparam *pause);
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_get_wol(struct net_device *ndev, struct ethtool_wolinfo *wol);
#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_set_wol(struct net_device *ndev, struct ethtool_wolinfo *wol);
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_get_regs_len(struct net_device *ndev);
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_get_regs(struct net_device *ndev, struct ethtool_regs *regs, void *p);
#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_ethtool_op_begin(struct net_device *ndev);
#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_ethtool_op_complete(struct net_device *ndev);
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_get_channels(struct net_device *ndev, struct ethtool_channels *ch);
#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_get_link_ksettings(struct net_device *ndev, struct ethtool_link_ksettings *ecmd);
#line 482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_set_link_ksettings(struct net_device *ndev, struct ethtool_link_ksettings *ecmd);
#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_get_eee(struct net_device *ndev, struct ethtool_eee *edata);
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_set_eee(struct net_device *ndev, struct ethtool_eee *edata);
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_nway_reset(struct net_device *ndev);
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_get_ringparam(struct net_device *ndev, struct ethtool_ringparam *ering);
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_set_ringparam(struct net_device *ndev, struct ethtool_ringparam *ering);
#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_set_channels_common(struct net_device *ndev, struct ethtool_channels *chs, void (*rx_handler)(void *, int , int ));
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_priv.h"
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_get_ts_info(struct net_device *ndev, struct ethtool_ts_info *info);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
static struct cpsw_stats cpsw_gstrings_stats[34U] = {{.stat_string = {(char)'G', (char)'o', (char)'o', (char)'d', (char)' ', (char)'R', (char)'x', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4}, {.stat_string = {(char)'B', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'R', (char)'x', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 4}, {.stat_string = {(char)'M', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'R', (char)'x', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 8}, {.stat_string = {(char)'P', (char)'a', (char)'u', (char)'s', (char)'e', (char)' ', (char)'R', (char)'x', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 12}, {.stat_string = {(char)'R', (char)'x', (char)' ', (char)'C', (char)'R', (char)'C', (char)' ', (char)'E', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 4, .stat_offset = 16}, {.stat_string = {(char)'R', (char)'x', (char)' ', (char)'A', (char)'l', (char)'i', (char)'g', (char)'n', (char)'/', (char)'C', (char)'o', (char)'d', (char)'e', (char)' ', (char)'E', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 4, .stat_offset = 20}, {.stat_string = {(char)'O', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)' ', (char)'R', (char)'x', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 24}, {.stat_string = {(char)'R', (char)'x', (char)' ', (char)'J', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'s'}, .sizeof_stat = 4, .stat_offset = 28}, {.stat_string = {(char)'U', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)' ', (char)'(', (char)'S', (char)'h', (char)'o', (char)'r', (char)'t', (char)')', (char)' ', (char)'R', (char)'x', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 32}, {.stat_string = {(char)'R', (char)'x', (char)' ', (char)'F', (char)'r', (char)'a', (char)'g', (char)'m', (char)'e', (char)'n', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 36}, {.stat_string = {(char)'R', (char)'x', (char)' ', (char)'O', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 48}, {.stat_string = {(char)'G', (char)'o', (char)'o', (char)'d', (char)' ', (char)'T', (char)'x', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 52}, {.stat_string = {(char)'B', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'T', (char)'x', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 56}, {.stat_string = {(char)'M', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'T', (char)'x', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 60}, {.stat_string = {(char)'P', (char)'a', (char)'u', (char)'s', (char)'e', (char)' ', (char)'T', (char)'x', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 64}, {.stat_string = {(char)'D', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'e', (char)'d', (char)' ', (char)'T', (char)'x', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 68}, {.stat_string = {(char)'C', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, .sizeof_stat = 4, .stat_offset = 72}, {.stat_string = {(char)'S', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)' ', (char)'C', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)' ', (char)'T', (char)'x', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 76}, {.stat_string = {(char)'M', (char)'u', (char)'l', (char)'t', (char)'i', (char)'p', (char)'l', (char)'e', (char)' ', (char)'C', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)' ', (char)'T', (char)'x', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 80}, {.stat_string = {(char)'E', (char)'x', (char)'c', (char)'e', (char)'s', (char)'s', (char)'i', (char)'v', (char)'e', (char)' ', (char)'C', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, .sizeof_stat = 4, .stat_offset = 84}, {.stat_string = {(char)'L', (char)'a', (char)'t', (char)'e', (char)' ', (char)'C', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s'}, .sizeof_stat = 4, .stat_offset = 88}, {.stat_string = {(char)'T', (char)'x', (char)' ', (char)'U', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}, .sizeof_stat = 4, .stat_offset = 92}, {.stat_string = {(char)'C', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r', (char)' ', (char)'S', (char)'e', (char)'n', (char)'s', (char)'e', (char)' ', (char)'E', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, .sizeof_stat = 4, .stat_offset = 96}, {.stat_string = {(char)'T', (char)'x', (char)' ', (char)'O', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 100}, {.stat_string = {(char)'R', (char)'x', (char)' ', (char)'+', (char)' ', (char)'T', (char)'x', (char)' ', (char)'6', (char)'4', (char)' ', (char)'O', (char)'c', (char)'t', (char)'e', (char)'t', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 104}, {.stat_string = {(char)'R', (char)'x', (char)' ', (char)'+', (char)' ', (char)'T', (char)'x', (char)' ', (char)'6', (char)'5', (char)'-', (char)'1', (char)'2', (char)'7', (char)' ', (char)'O', (char)'c', (char)'t', (char)'e', (char)'t', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 108}, {.stat_string = {(char)'R', (char)'x', (char)' ', (char)'+', (char)' ', (char)'T', (char)'x', (char)' ', (char)'1', (char)'2', (char)'8', (char)'-', (char)'2', (char)'5', (char)'5', (char)' ', (char)'O', (char)'c', (char)'t', (char)'e', (char)'t', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 112}, {.stat_string = {(char)'R', (char)'x', (char)' ', (char)'+', (char)' ', (char)'T', (char)'x', (char)' ', (char)'2', (char)'5', (char)'6', (char)'-', (char)'5', (char)'1', (char)'1', (char)' ', (char)'O', (char)'c', (char)'t', (char)'e', (char)'t', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 116}, {.stat_string = {(char)'R', (char)'x', (char)' ', (char)'+', (char)' ', (char)'T', (char)'x', (char)' ', (char)'5', (char)'1', (char)'2', (char)'-', (char)'1', (char)'0', (char)'2', (char)'3', (char)' ', (char)'O', (char)'c', (char)'t', (char)'e', (char)'t', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 120}, {.stat_string = {(char)'R', (char)'x', (char)' ', (char)'+', (char)' ', (char)'T', (char)'x', (char)' ', (char)'1', (char)'0', (char)'2', (char)'4', (char)'-', (char)'U', (char)'p', (char)' ', (char)'O', (char)'c', (char)'t', (char)'e', (char)'t', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}, .sizeof_stat = 4, .stat_offset = 124}, {.stat_string = {(char)'N', (char)'e', (char)'t', (char)' ', (char)'O', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}, .sizeof_stat = 4, .stat_offset = 128}, {.stat_string = {(char)'R', (char)'x', (char)' ', (char)'S', (char)'t', (char)'a', (char)'r', (char)'t', (char)' ', (char)'o', (char)'f', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)' ', (char)'O', (char)'v', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n', (char)'s'}, .sizeof_stat = 4, .stat_offset = 132}, {.stat_string = {(char)'R', (char)'x', (char)' ', (char)'M', (char)'i', (char)'d', (char)'d', (char)'l', (char)'e', (char)' ', (char)'o', (char)'f', (char)' ', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)' ', (char)'O', (char)'v', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n', (char)'s'}, .sizeof_stat = 4, .stat_offset = 136}, {.stat_string = {(char)'R', (char)'x', (char)' ', (char)'D', (char)'M', (char)'A', (char)' ', (char)'O', (char)'v', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n', (char)'s'}, .sizeof_stat = 4, .stat_offset = 140}};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
static struct cpsw_stats cpsw_gstrings_ch_stats[13U] = {{.stat_string = {(char)'h', (char)'e', (char)'a', (char)'d', (char)'_', (char)'e', (char)'n', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e'}, .type = 1, .sizeof_stat = 4}, {.stat_string = {(char)'t', (char)'a', (char)'i', (char)'l', (char)'_', (char)'e', (char)'n', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e'}, .type = 1, .sizeof_stat = 4, .stat_offset = 4}, {.stat_string = {(char)'p', (char)'a', (char)'d', (char)'_', (char)'e', (char)'n', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e'}, .type = 1, .sizeof_stat = 4, .stat_offset = 8}, {.stat_string = {(char)'m', (char)'i', (char)'s', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'d'}, .type = 1, .sizeof_stat = 4, .stat_offset = 12}, {.stat_string = {(char)'d', (char)'e', (char)'s', (char)'c', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l'}, .type = 1, .sizeof_stat = 4, .stat_offset = 16}, {.stat_string = {(char)'p', (char)'a', (char)'d', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l'}, .type = 1, .sizeof_stat = 4, .stat_offset = 20}, {.stat_string = {(char)'r', (char)'u', (char)'n', (char)'t', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'_', (char)'b', (char)'u', (char)'f'}, .type = 1, .sizeof_stat = 4, .stat_offset = 24}, {.stat_string = {(char)'r', (char)'u', (char)'n', (char)'t', (char)'_', (char)'t', (char)'r', (char)'a', (char)'n', (char)'s', (char)'m', (char)'i', (char)'t', (char)'_', (char)'b', (char)'u', (char)'f'}, .type = 1, .sizeof_stat = 4, .stat_offset = 28}, {.stat_string = {(char)'e', (char)'m', (char)'p', (char)'t', (char)'y', (char)'_', (char)'d', (char)'e', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e'}, .type = 1, .sizeof_stat = 4, .stat_offset = 32}, {.stat_string = {(char)'b', (char)'u', (char)'s', (char)'y', (char)'_', (char)'d', (char)'e', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e'}, .type = 1, .sizeof_stat = 4, .stat_offset = 36}, {.stat_string = {(char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'d', (char)'e', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e'}, .type = 1, .sizeof_stat = 4, .stat_offset = 40}, {.stat_string = {(char)'r', (char)'e', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e'}, .type = 1, .sizeof_stat = 4, .stat_offset = 44}, {.stat_string = {(char)'t', (char)'e', (char)'a', (char)'r', (char)'d', (char)'o', (char)'w', (char)'n', (char)'_', (char)'d', (char)'e', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e'}, .type = 1, .sizeof_stat = 4, .stat_offset = 48}};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
u32 cpsw_get_msglevel(struct net_device *ndev)
{
  #line 143 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 145 
  return priv->msg_enable;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_set_msglevel(struct net_device *ndev, u32 value)
{
  #line 150 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 152 
  priv->msg_enable = value;
  #line 153 
  return;
}

#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_get_coalesce(struct net_device *ndev, struct ethtool_coalesce *coal)
{
  #line 157 
  struct cpsw_common *cpsw = ((struct cpsw_priv *)netdev_priv(ndev))->cpsw;
  #line 159 
  coal->rx_coalesce_usecs = cpsw->coal_intvl;
  #line 160 
  return 0;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_set_coalesce(struct net_device *ndev, struct ethtool_coalesce *coal)
{
  #line 166 
  u32 int_ctrl;
  #line 165 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 167 
  u32 num_interrupts = 0U;
  #line 168 
  u32 prescale = 0U;
  #line 169 
  u32 addnl_dvdr = 1U;
  #line 170 
  u32 coal_intvl = 0U;
  #line 171 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 173 
  coal_intvl = coal->rx_coalesce_usecs;
  #line 175 
  int_ctrl = readl((void *)(& (cpsw->wr_regs)->int_control));
  #line 176 
  prescale = cpsw->bus_freq_mhz * 4U;
  #line 178 
  if (coal->rx_coalesce_usecs == 0U) {
    #line 179 
    int_ctrl &= 4290836480U;
    #line 180 
    goto update_return;
  }
  #line 183 
  if (coal_intvl <= 15U) 
                         #line 184 
                         coal_intvl = 16U;
  #line 186 
  if (coal_intvl > 500U) {
    #line 190 
    addnl_dvdr = 2047U / prescale;
    #line 192 
    if (addnl_dvdr > 1U) {
      #line 193 
      prescale *= addnl_dvdr;
      #line 194 
      if (addnl_dvdr * 500U < coal_intvl) 
                                          #line 195 
                                          coal_intvl = addnl_dvdr * 500U;
    }
    else {
      #line 198 
      addnl_dvdr = 1U;
      #line 199 
      coal_intvl = 500U;
    }
  }
  #line 203 
  num_interrupts = (addnl_dvdr * 1000U) / coal_intvl;
  #line 204 
  writel(num_interrupts,(void *)(& (cpsw->wr_regs)->rx_imax));
  #line 205 
  writel(num_interrupts,(void *)(& (cpsw->wr_regs)->tx_imax));
  #line 207 
  int_ctrl |= 4128768U;
  #line 208 
  int_ctrl &= 4294965248U;
  #line 209 
  int_ctrl = (prescale & 2047U) | int_ctrl;
  #line 211 
  update_return: 
                 #line 211 
  ;
  #line 212 
  writel(int_ctrl,(void *)(& (cpsw->wr_regs)->int_control));
  #line 214 
  if ((priv->msg_enable & 8U) != 0U) {
    #line 214 
    if (net_ratelimit() != 0) 
                              #line 214 
                              _dev_notice(priv->dev,(char *)"Set coalesce to %d usecs.\n",coal_intvl);
  }
  #line 215 
  cpsw->coal_intvl = coal_intvl;
  #line 217 
  return 0;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_get_sset_count(struct net_device *ndev, int sset)
{
  #line 222 
  struct cpsw_common *cpsw = ((struct cpsw_priv *)netdev_priv(ndev))->cpsw;
  #line 224 
  switch (sset) {
    #line 225 
    case 1: 
            #line 225 
    ;
    #line 226 
    return (int)((unsigned long)(cpsw->rx_ch_num + cpsw->tx_ch_num) * (unsigned long)13U + (unsigned long)34U);
    #line 229 
    default: 
             #line 229 
    ;
    #line 230 
    return -95;
  }
}

#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
static void cpsw_add_ch_strings(u8 **p, int ch_num, int rx_dir)
{
  #line 236 
  int ch_stats_len;
  #line 237 
  int line;
  #line 238 
  int i;
  #line 240 
  ch_stats_len = (int)((unsigned long)ch_num * (unsigned long)13U);
  #line 241 
  i = 0;
  #line 241 
  while (i < ch_stats_len) {
    {
      #line 244 
      char *tmp;
      #line 242 
      line = (int)((unsigned long)i % 13UL);
      #line 243 
      ;
      #line 243 
      ;
      #line 244 
      if (rx_dir != 0) 
                       #line 244 
                       tmp = (char *)"Rx"; else 
                                                #line 244 
                                                tmp = (char *)"Tx";
      #line 243 
      ;
      #line 243 
      snprintf((char *)*p,32UL,(char *)"%s DMA chan %ld: %s",tmp,(long)((unsigned long)i / 13UL),(char *)(& cpsw_gstrings_ch_stats[line].stat_string));
      #line 247 
      *p += 32U;
    }
    #line 241 
    i ++;
  }
  #line 249 
  return;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_get_strings(struct net_device *ndev, u32 stringset, u8 *data)
{
  #line 255 
  int i;
  #line 253 
  struct cpsw_common *cpsw = ((struct cpsw_priv *)netdev_priv(ndev))->cpsw;
  #line 254 
  u8 *p = data;
  #line 257 
  switch (stringset) {
    #line 258 
    case (u32)1: 
                 #line 258 
    ;
    #line 259 
    i = 0;
    #line 259 
    while ((unsigned int)i <= 33U) {
      #line 260 
      memcpy((void *)p,(void *)(& cpsw_gstrings_stats[i].stat_string),32UL);
      #line 262 
      p += 32U;
      #line 259 
      i ++;
    }
    #line 265 
    cpsw_add_ch_strings(& p,cpsw->rx_ch_num,1);
    #line 266 
    cpsw_add_ch_strings(& p,cpsw->tx_ch_num,0);
    #line 267 
    break;
  }
  #line 269 
  return;
}

#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_get_ethtool_stats(struct net_device *ndev, struct ethtool_stats *stats, u64 *data)
{
  #line 274 
  u8 *p;
  #line 276 
  struct cpdma_chan_stats ch_stats;
  #line 277 
  int i;
  #line 277 
  int l;
  #line 277 
  int ch;
  #line 275 
  struct cpsw_common *cpsw = ((struct cpsw_priv *)netdev_priv(ndev))->cpsw;
  #line 280 
  l = 0;
  #line 280 
  while ((unsigned int)l <= 33U) {
    #line 281 
    *(data + (unsigned long)l) = (unsigned long long)readl((void *)(cpsw->hw_stats + (unsigned long)cpsw_gstrings_stats[l].stat_offset));
    #line 280 
    l ++;
  }
  #line 284 
  ch = 0;
  #line 284 
  while (cpsw->rx_ch_num > ch) {
    #line 285 
    cpdma_chan_get_stats(cpsw->rxv[ch].ch,& ch_stats);
    #line 286 
    i = 0;
    #line 286 
    while ((unsigned int)i <= 12U) {
      #line 287 
      p = (u8 *)(& ch_stats) + (unsigned long)cpsw_gstrings_ch_stats[i].stat_offset;
      #line 289 
      *(data + (unsigned long)l) = (unsigned long long)*((u32 *)p);
      #line 286 
      i ++;
      #line 286 
      l ++;
    }
    #line 284 
    ch ++;
  }
  #line 293 
  ch = 0;
  #line 293 
  while (cpsw->tx_ch_num > ch) {
    #line 294 
    cpdma_chan_get_stats(cpsw->txv[ch].ch,& ch_stats);
    #line 295 
    i = 0;
    #line 295 
    while ((unsigned int)i <= 12U) {
      #line 296 
      p = (u8 *)(& ch_stats) + (unsigned long)cpsw_gstrings_ch_stats[i].stat_offset;
      #line 298 
      *(data + (unsigned long)l) = (unsigned long long)*((u32 *)p);
      #line 295 
      i ++;
      #line 295 
      l ++;
    }
    #line 293 
    ch ++;
  }
  #line 301 
  return;
}

#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_get_pauseparam(struct net_device *ndev, struct ethtool_pauseparam *pause)
{
  #line 306 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 308 
  pause->autoneg = 0U;
  #line 309 
  pause->rx_pause = (unsigned int)((int)priv->rx_pause != 0);
  #line 310 
  pause->tx_pause = (unsigned int)((int)priv->tx_pause != 0);
  #line 311 
  return;
}

#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_get_wol(struct net_device *ndev, struct ethtool_wolinfo *wol)
{
  #line 315 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 316 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 317 
  int slave_no = (*cpsw_slave_index)(cpsw,priv);
  #line 319 
  wol->supported = 0U;
  #line 320 
  wol->wolopts = 0U;
  #line 322 
  if ((cpsw->slaves + (unsigned long)slave_no)->phy != (struct phy_device *)0) 
    #line 323 
    phy_ethtool_get_wol((cpsw->slaves + (unsigned long)slave_no)->phy,wol);
  #line 324 
  return;
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_set_wol(struct net_device *ndev, struct ethtool_wolinfo *wol)
{
  #line 328 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 329 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 330 
  int slave_no = (*cpsw_slave_index)(cpsw,priv);
  #line 332 
  if ((cpsw->slaves + (unsigned long)slave_no)->phy != (struct phy_device *)0) {
    #line 333 
    return phy_ethtool_set_wol((cpsw->slaves + (unsigned long)slave_no)->phy,
                            wol);
  }
  else 
       #line 335 
       return -95;
}

#line 338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_get_regs_len(struct net_device *ndev)
{
  #line 340 
  struct cpsw_common *cpsw = ((struct cpsw_priv *)netdev_priv(ndev))->cpsw;
  #line 342 
  return (int)(cpsw->data.ale_entries * 12U);
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_get_regs(struct net_device *ndev, struct ethtool_regs *regs, void *p)
{
  #line 347 
  u32 *reg = (u32 *)p;
  #line 348 
  struct cpsw_common *cpsw = ((struct cpsw_priv *)netdev_priv(ndev))->cpsw;
  #line 351 
  regs->version = cpsw->version;
  #line 353 
  cpsw_ale_dump(cpsw->ale,reg);
  #line 354 
  return;
}

#line 356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_ethtool_op_begin(struct net_device *ndev)
{
  #line 360 
  int ret;
  #line 358 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 359 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 362 
  ret = pm_runtime_get_sync(cpsw->dev);
  #line 363 
  if (ret < 0) {
    #line 364 
    if ((priv->msg_enable & 1U) != 0U) {
      #line 364 
      if (net_ratelimit() != 0) 
                                #line 364 
                                _dev_err(priv->dev,(char *)"ethtool begin failed %d\n",ret);
    }
    #line 365 
    pm_runtime_put_noidle_0(cpsw->dev);
  }
  #line 368 
  return ret;
}

#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_ethtool_op_complete(struct net_device *ndev)
{
  #line 374 
  int ret;
  #line 373 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 376 
  ret = pm_runtime_put((priv->cpsw)->dev);
  #line 377 
  if (ret < 0) 
    #line 378 
    if ((priv->msg_enable & 1U) != 0U) {
      #line 378 
      if (net_ratelimit() != 0) 
                                #line 378 
                                _dev_err(priv->dev,(char *)"ethtool complete failed %d\n",ret);
    }
  #line 379 
  return;
}

#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_get_channels(struct net_device *ndev, struct ethtool_channels *ch)
{
  #line 383 
  struct cpsw_common *cpsw = ((struct cpsw_priv *)netdev_priv(ndev))->cpsw;
  #line 385 
  if ((int)cpsw->quirk_irq != 0) 
                                 #line 385 
                                 ch->max_rx = 1U; else 
                                                       #line 385 
                                                       ch->max_rx = 8U;
  #line 386 
  if ((int)cpsw->quirk_irq != 0) 
                                 #line 386 
                                 ch->max_tx = 1U; else 
                                                       #line 386 
                                                       ch->max_tx = 8U;
  #line 387 
  ch->max_combined = 0U;
  #line 388 
  ch->max_other = 0U;
  #line 389 
  ch->other_count = 0U;
  #line 390 
  ch->rx_count = (unsigned int)cpsw->rx_ch_num;
  #line 391 
  ch->tx_count = (unsigned int)cpsw->tx_ch_num;
  #line 392 
  ch->combined_count = 0U;
  #line 393 
  return;
}

#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_get_link_ksettings(struct net_device *ndev, struct ethtool_link_ksettings *ecmd)
{
  #line 398 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 399 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 400 
  int slave_no = (*cpsw_slave_index)(cpsw,priv);
  #line 402 
  if ((cpsw->slaves + (unsigned long)slave_no)->phy == (struct phy_device *)0) 
    #line 403 
    return -95;
  #line 405 
  phy_ethtool_ksettings_get((cpsw->slaves + (unsigned long)slave_no)->phy,ecmd);
  #line 406 
  return 0;
}

#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_set_link_ksettings(struct net_device *ndev, struct ethtool_link_ksettings *ecmd)
{
  #line 412 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 413 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 414 
  int slave_no = (*cpsw_slave_index)(cpsw,priv);
  #line 416 
  if ((cpsw->slaves + (unsigned long)slave_no)->phy == (struct phy_device *)0) 
    #line 417 
    return -95;
  #line 419 
  return phy_ethtool_ksettings_set((cpsw->slaves + (unsigned long)slave_no)->phy,
                                  ecmd);
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_get_eee(struct net_device *ndev, struct ethtool_eee *edata)
{
  #line 424 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 425 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 426 
  int slave_no = (*cpsw_slave_index)(cpsw,priv);
  #line 428 
  if ((cpsw->slaves + (unsigned long)slave_no)->phy != (struct phy_device *)0) {
    #line 429 
    return phy_ethtool_get_eee((cpsw->slaves + (unsigned long)slave_no)->phy,
                            edata);
  }
  else 
       #line 431 
       return -95;
}

#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_set_eee(struct net_device *ndev, struct ethtool_eee *edata)
{
  #line 436 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 437 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 438 
  int slave_no = (*cpsw_slave_index)(cpsw,priv);
  #line 440 
  if ((cpsw->slaves + (unsigned long)slave_no)->phy != (struct phy_device *)0) {
    #line 441 
    return phy_ethtool_set_eee((cpsw->slaves + (unsigned long)slave_no)->phy,
                            edata);
  }
  else 
       #line 443 
       return -95;
}

#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_nway_reset(struct net_device *ndev)
{
  #line 448 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 449 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 450 
  int slave_no = (*cpsw_slave_index)(cpsw,priv);
  #line 452 
  if ((cpsw->slaves + (unsigned long)slave_no)->phy != (struct phy_device *)0) {
    #line 453 
    return genphy_restart_aneg((cpsw->slaves + (unsigned long)slave_no)->phy);
  }
  else 
       #line 455 
       return -95;
}

#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
static void cpsw_suspend_data_pass(struct net_device *ndev)
{
  #line 461 
  int i;
  #line 460 
  struct cpsw_common *cpsw = ((struct cpsw_priv *)netdev_priv(ndev))->cpsw;
  #line 464 
  cpsw_intr_disable(cpsw);
  #line 468 
  i = 0;
  #line 468 
  while (cpsw->data.slaves > (unsigned int)i) {
    #line 469 
    ndev = (cpsw->slaves + (unsigned long)i)->ndev;
    #line 470 
    if (ndev == (struct net_device *)0) 
                                        #line 471 
                                        goto __Cont;
    else {
      #line 470 
      if (! netif_running(ndev)) 
                                 #line 471 
                                 goto __Cont;
    }
    #line 473 
    netif_tx_stop_all_queues(ndev);
    #line 468 
    __Cont: 
            #line 468 
    i ++;
  }
  #line 480 
  cpdma_ctlr_stop(cpsw->dma);
  #line 481 
  return;
}

#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
static int cpsw_resume_data_pass(struct net_device *ndev)
{
  #line 487 
  int i;
  #line 487 
  int ret;
  #line 485 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 486 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 490 
  if (cpsw->usage_count != 0) {
    #line 491 
    ret = cpsw_fill_rx_channels(priv);
    #line 492 
    if (ret != 0) 
                  #line 493 
                  return ret;
    #line 495 
    cpdma_ctlr_start(cpsw->dma);
    #line 496 
    cpsw_intr_enable(cpsw);
  }
  #line 500 
  i = 0;
  #line 500 
  while (cpsw->data.slaves > (unsigned int)i) {
    #line 501 
    ndev = (cpsw->slaves + (unsigned long)i)->ndev;
    #line 502 
    if (ndev != (struct net_device *)0) {
      #line 502 
      if ((int)netif_running(ndev) != 0) 
                                         #line 503 
                                         netif_tx_start_all_queues(ndev);
    }
    #line 500 
    i ++;
  }
  #line 506 
  return 0;
}

#line 509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
static int cpsw_check_ch_settings(struct cpsw_common *cpsw, struct ethtool_channels *ch)
{
  #line 512 
  if ((int)cpsw->quirk_irq != 0) {
    #line 513 
    _dev_err(cpsw->dev,(char *)"Maximum one tx/rx queue is allowed");
    #line 514 
    return -95;
  }
  #line 517 
  if (ch->combined_count != 0U) 
                                #line 518 
                                return -22;
  #line 521 
  if (ch->rx_count == 0U || ch->tx_count == 0U) 
                                                #line 522 
                                                return -22;
  #line 524 
  if (ch->rx_count > cpsw->data.channels || ch->tx_count > cpsw->data.channels) 
    #line 526 
    return -22;
  #line 528 
  return 0;
}

#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
static int cpsw_update_channels_res(struct cpsw_priv *priv, int ch_num, int rx, void (*rx_handler)(void *, int , int ))
{
  #line 535 
  void (*handler)(void *, int , int );
  #line 536 
  struct netdev_queue *queue;
  #line 537 
  struct cpsw_vector *vec;
  #line 538 
  int ret;
  #line 538 
  int *ch;
  #line 538 
  int vch;
  #line 534 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 540 
  if (rx != 0) {
    #line 541 
    ch = & cpsw->rx_ch_num;
    #line 542 
    vec = (struct cpsw_vector *)(& cpsw->rxv);
    #line 543 
    handler = rx_handler;
  }
  else {
    #line 545 
    ch = & cpsw->tx_ch_num;
    #line 546 
    vec = (struct cpsw_vector *)(& cpsw->txv);
    #line 547 
    handler = & cpsw_tx_handler;
  }
  #line 550 
  while (*ch < ch_num) {
    #line 551 
    if (rx != 0) 
                 #line 551 
                 vch = *ch; else 
                                 #line 551 
                                 vch = 7 - *ch;
    #line 552 
    (vec + (unsigned long)*ch)->ch = cpdma_chan_create(cpsw->dma,vch,handler,rx);
    #line 553 
    queue = netdev_get_tx_queue(priv->ndev,(unsigned int)*ch);
    #line 554 
    queue->tx_maxrate = 0UL;
    #line 556 
    if ((int)IS_ERR_1((void *)(vec + (unsigned long)*ch)->ch) != 0) {
      #line 557 
      return (int)PTR_ERR_1((void *)(vec + (unsigned long)*ch)->ch);
    }
    #line 559 
    if ((vec + (unsigned long)*ch)->ch == (struct cpdma_chan *)0) 
                                                                  #line 560 
                                                                  return -22;
    #line 562 
    if ((priv->msg_enable & 32U) != 0U) {
      #line 562 
      if (net_ratelimit() != 0) {
        #line 562 
        char *tmp_1;
        #line 562 
        if (rx != 0) 
                     #line 562 
                     tmp_1 = (char *)"rx"; else 
                                                #line 562 
                                                tmp_1 = (char *)"tx";
        #line 562 
        ;
        #line 562 
        ;
        #line 562 
        _dev_info(priv->dev,(char *)"created new %d %s channel\n",*ch,tmp_1);
      }
    }
    #line 564 
    (*ch) ++;
  }
  #line 567 
  while (*ch > ch_num) {
    #line 568 
    (*ch) --;
    #line 570 
    ret = cpdma_chan_destroy((vec + (unsigned long)*ch)->ch);
    #line 571 
    if (ret != 0) 
                  #line 572 
                  return ret;
    #line 574 
    if ((priv->msg_enable & 32U) != 0U) {
      #line 574 
      if (net_ratelimit() != 0) {
        #line 574 
        char *tmp_3;
        #line 574 
        if (rx != 0) 
                     #line 574 
                     tmp_3 = (char *)"rx"; else 
                                                #line 574 
                                                tmp_3 = (char *)"tx";
        #line 574 
        ;
        #line 574 
        ;
        #line 574 
        _dev_info(priv->dev,(char *)"destroyed %d %s channel\n",*ch,tmp_3);
      }
    }
  }
  #line 578 
  return 0;
}

#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
static void cpsw_fail(struct cpsw_common *cpsw)
{
  #line 583 
  struct net_device *ndev;
  #line 584 
  int i;
  #line 586 
  i = 0;
  #line 586 
  while (cpsw->data.slaves > (unsigned int)i) {
    #line 587 
    ndev = (cpsw->slaves + (unsigned long)i)->ndev;
    #line 588 
    if (ndev != (struct net_device *)0) 
                                        #line 589 
                                        dev_close(ndev);
    #line 586 
    i ++;
  }
  #line 591 
  return;
}

#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_set_channels_common(struct net_device *ndev, struct ethtool_channels *chs, void (*rx_handler)(void *, int , int ))
{
  #line 599 
  struct net_device *sl_ndev;
  #line 600 
  int i;
  #line 600 
  int new_pools;
  #line 600 
  int ret;
  #line 597 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 598 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 602 
  ret = cpsw_check_ch_settings(cpsw,chs);
  #line 603 
  if (ret < 0) 
               #line 604 
               return ret;
  #line 606 
  cpsw_suspend_data_pass(ndev);
  #line 608 
  new_pools = (chs->rx_count != (unsigned int)cpsw->rx_ch_num && cpsw->usage_count != 0) != 0;
  #line 610 
  ret = cpsw_update_channels_res(priv,(int)chs->rx_count,1,rx_handler);
  #line 611 
  if (ret != 0) 
                #line 612 
                goto err;
  #line 614 
  ret = cpsw_update_channels_res(priv,(int)chs->tx_count,0,rx_handler);
  #line 615 
  if (ret != 0) 
                #line 616 
                goto err;
  #line 618 
  i = 0;
  #line 618 
  while (cpsw->data.slaves > (unsigned int)i) {
    #line 619 
    sl_ndev = (cpsw->slaves + (unsigned long)i)->ndev;
    #line 620 
    if (sl_ndev == (struct net_device *)0) 
                                           #line 621 
                                           goto __Cont;
    else {
      #line 620 
      if (! netif_running(sl_ndev)) 
                                    #line 621 
                                    goto __Cont;
    }
    #line 624 
    ret = netif_set_real_num_tx_queues(sl_ndev,(unsigned int)cpsw->tx_ch_num);
    #line 625 
    if (ret != 0) {
      #line 626 
      _dev_err(priv->dev,(char *)"cannot set real number of tx queues\n");
      #line 627 
      goto err;
    }
    #line 630 
    ret = netif_set_real_num_rx_queues(sl_ndev,(unsigned int)cpsw->rx_ch_num);
    #line 631 
    if (ret != 0) {
      #line 632 
      _dev_err(priv->dev,(char *)"cannot set real number of rx queues\n");
      #line 633 
      goto err;
    }
    #line 618 
    __Cont: 
            #line 618 
    i ++;
  }
  #line 637 
  cpsw_split_res(cpsw);
  #line 639 
  if (new_pools != 0) {
    #line 640 
    cpsw_destroy_xdp_rxqs(cpsw);
    #line 641 
    ret = cpsw_create_xdp_rxqs(cpsw);
    #line 642 
    if (ret != 0) 
                  #line 643 
                  goto err;
  }
  #line 646 
  ret = cpsw_resume_data_pass(ndev);
  #line 647 
  if (ret == 0) 
                #line 648 
                return 0;
  #line 649 
  err: 
       #line 649 
  ;
  #line 650 
  _dev_err(priv->dev,(char *)"cannot update channels number, closing device\n");
  #line 651 
  cpsw_fail(cpsw);
  #line 652 
  return ret;
}

#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
void cpsw_get_ringparam(struct net_device *ndev, struct ethtool_ringparam *ering)
{
  #line 658 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 659 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 662 
  ering->tx_max_pending = (unsigned int)(cpsw->descs_pool_size + -8);
  #line 663 
  ering->tx_pending = (unsigned int)cpdma_get_num_tx_descs(cpsw->dma);
  #line 664 
  ering->rx_max_pending = (unsigned int)(cpsw->descs_pool_size + -8);
  #line 665 
  ering->rx_pending = (unsigned int)cpdma_get_num_rx_descs(cpsw->dma);
  #line 666 
  return;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_set_ringparam(struct net_device *ndev, struct ethtool_ringparam *ering)
{
  #line 672 
  int descs_num;
  #line 672 
  int ret;
  #line 671 
  struct cpsw_common *cpsw = ((struct cpsw_priv *)netdev_priv(ndev))->cpsw;
  #line 676 
  if (((ering->rx_mini_pending != 0U || ering->rx_jumbo_pending != 0U) || ering->rx_pending <= 7U) || ering->rx_pending > (unsigned int)(cpsw->descs_pool_size + -8)) 
    #line 679 
    return -22;
  #line 681 
  descs_num = cpdma_get_num_rx_descs(cpsw->dma);
  #line 682 
  if (ering->rx_pending == (unsigned int)descs_num) 
                                                    #line 683 
                                                    return 0;
  #line 685 
  cpsw_suspend_data_pass(ndev);
  #line 687 
  ret = cpdma_set_num_rx_descs(cpsw->dma,(int)ering->rx_pending);
  #line 688 
  if (ret != 0) {
    #line 689 
    if (cpsw_resume_data_pass(ndev) != 0) 
                                          #line 690 
                                          goto err;
    #line 692 
    return ret;
  }
  #line 695 
  if (cpsw->usage_count != 0) {
    #line 696 
    cpsw_destroy_xdp_rxqs(cpsw);
    #line 697 
    ret = cpsw_create_xdp_rxqs(cpsw);
    #line 698 
    if (ret != 0) 
                  #line 699 
                  goto err;
  }
  #line 702 
  ret = cpsw_resume_data_pass(ndev);
  #line 703 
  if (ret == 0) 
                #line 704 
                return 0;
  #line 705 
  err: 
       #line 705 
  ;
  #line 706 
  cpdma_set_num_rx_descs(cpsw->dma,descs_num);
  #line 707 
  _dev_err(cpsw->dev,(char *)"cannot set ring params, closing device\n");
  #line 708 
  cpsw_fail(cpsw);
  #line 709 
  return ret;
}

#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ethtool.c"
int cpsw_get_ts_info(struct net_device *ndev, struct ethtool_ts_info *info)
{
  #line 715 
  struct cpsw_common *cpsw = ((struct cpsw_priv *)netdev_priv(ndev))->cpsw;
  #line 717 
  info->so_timestamping = 95U;
  #line 724 
  info->phc_index = (cpsw->cpts)->phc_index;
  #line 725 
  info->tx_types = 3U;
  #line 728 
  info->rx_filters = 4105U;
  #line 732 
  return 0;
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ethtool.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 124 
  ldv_clear_bit(nr,addr);
  #line 125 
  return;
}

#line 205  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ethtool.i.aux"
static long PTR_ERR_1(void *ptr)
{
  #line 208 
  return ldv_ptr_err(ptr);
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ethtool.i.aux"
static bool IS_ERR_1(void *ptr)
{
  #line 215 
  return ldv_is_err(ptr);
}

/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 226  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 233  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/swab.h"
__inline static __u32 __swab32p(__u32 *p)
{
  #line 179 
  return __builtin_bswap32(*p);
}

#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/byteorder/little_endian.h"
__inline static __u32 __be32_to_cpup(__be32 *p)
{
  #line 82 
  return __swab32p(p);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_1(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_2434 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_1(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_1(v);
}

#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static int atomic_fetch_add_unless_1(atomic_t *v, int a, int u)
{
  #line 1086 
  int c = atomic_read_1(v);
  #line 1088 
  while (! ((long)(c == u) != 0L)) {
    #line 1091 
    if (atomic_try_cmpxchg(v,& c,c + a)) 
                                         #line 1088 
                                         break;
  }
  #line 1093 
  return c;
}

#line 1109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static bool atomic_add_unless_1(atomic_t *v, int a, int u)
{
  #line 1111 
  ;
  #line 1111 
  return (_Bool)(atomic_fetch_add_unless_1(v,a,u) != u);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 317  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static long PTR_ERR_2(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 324  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static bool IS_ERR_2(void *ptr);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29 
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
#line 419 
struct clk *devm_clk_get(struct device *, char *);
#line 544 
#line 544 
unsigned long clk_get_rate(struct clk *);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1043  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void *cif_devm_kzalloc_1(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1028  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 963  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 963 
void *devm_ioremap_resource(struct device *, struct resource *);
#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1663 
#line 1663 
void put_device(struct device *);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 52 
struct resource *platform_get_resource(struct platform_device *, unsigned int, unsigned int);
#line 58 
#line 58 
void *devm_platform_ioremap_resource(struct platform_device *, unsigned int);
#line 66 
#line 66 
int platform_get_irq(struct platform_device *, unsigned int);
#line 217 
#line 1074  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2);
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 1082  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1);
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static void *platform_get_drvdata(struct platform_device *pdev)
{
  #line 228 
  return dev_get_drvdata(& pdev->dev);
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static void platform_set_drvdata(struct platform_device *pdev, void *data)
{
  #line 234 
  dev_set_drvdata(& pdev->dev,data);
  #line 235 
  return;
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 197 
int devm_request_threaded_irq(struct device *, unsigned int, irqreturn_t (*)(int , void *), irqreturn_t (*)(int , void *), unsigned long, char *, void *);
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static int devm_request_irq(struct device *dev, unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long irqflags, char *devname, void *dev_id)
{
  #line 206 
  return devm_request_threaded_irq(dev,irq,handler,
                                (irqreturn_t (*)(int , void *))0,irqflags,
                                devname,dev_id);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 1035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1035 
struct sk_buff *build_skb(void *, unsigned int);
#line 1126 
#line 1126 
int __skb_pad(struct sk_buff *, int, bool);
#line 1139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_pad(struct sk_buff *skb, int pad)
{
  #line 1141 
  return __skb_pad(skb,pad,(_Bool)1);
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 3167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_padto(struct sk_buff *skb, unsigned int len)
{
  #line 3169 
  unsigned int size = skb->len;
  #line 3170 
  if ((long)(size >= len) != 0L) 
                                 #line 3171 
                                 return 0;
  #line 3172 
  return skb_pad(skb,(int)(len - size));
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
__inline static void xdp_set_data_meta_invalid(struct xdp_buff *xdp)
{
  #line 162 
  xdp->data_meta = xdp->data + 1U;
  #line 163 
  return;
}

#line 503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit_0(0L,& n->state);
  #line 517 
  cif_clear_bit_0(3L,& n->state);
  #line 518 
  return;
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_napi_add(struct net_device *dev, struct napi_struct *napi, int (*poll)(struct napi_struct *, int ), int weight)
{
  #line 2253 
  cif_set_bit(5L,& napi->state);
  #line 2254 
  netif_napi_add(dev,napi,poll,weight);
  #line 2255 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3662 
#line 3662 
int netif_receive_skb(struct sk_buff *);
#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  #line 3926 
  if ((unsigned int)debug_value > 31U) 
                                       #line 3927 
                                       return (unsigned int)default_msg_enable_bits;
  #line 3928 
  if (debug_value == 0) 
                        #line 3929 
                        return 0U;
  #line 3931 
  return (1U << debug_value) + 4294967295U;
}

#line 4131 
#line 1035  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1058  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4142 
int __hw_addr_ref_sync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *, int ), int (*)(struct net_device *, unsigned char *, int ));
#line 4148 
#line 4148 
void __hw_addr_ref_unsync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *, int ));
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 54 
#line 54 
struct net_device *devm_alloc_etherdev_mqs(struct device *, int, unsigned int, unsigned int);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static bool phy_interface_mode_is_rgmii(phy_interface_t mode)
{
  #line 955 
  return (_Bool)((unsigned int)mode + 4294967288U <= 3U);
}

#line 978  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static bool phy_interface_is_rgmii(struct phy_device *phydev)
{
  #line 980 
  return phy_interface_mode_is_rgmii(phydev->interface);
}

#line 1042 
#line 1042 
struct phy_device *phy_connect(struct net_device *, char *, void (*)(struct net_device *), phy_interface_t);
#line 1045 
#line 1045 
void phy_disconnect(struct phy_device *);
#line 1047 
#line 1047 
void phy_start(struct phy_device *);
#line 1048 
#line 1048 
void phy_stop(struct phy_device *);
#line 1091 
#line 1091 
void phy_attached_info(struct phy_device *);
#line 1180 
#line 1180 
void phy_print_status(struct phy_device *);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
#line 121 
struct device_node *of_node_get(struct device_node *);
#line 256 
#line 256 
bool of_node_name_eq(struct device_node *, char *);
#line 285 
#line 285 
struct device_node *of_find_node_by_phandle(phandle);
#line 290 
#line 290 
struct device_node *of_get_next_available_child(struct device_node *, struct device_node *);
#line 304 
#line 304 
struct property *of_find_property(struct device_node *, char *, int *);
#line 321 
#line 321 
int of_property_read_variable_u32_array(struct device_node *, char *, u32 *, size_t, size_t);
#line 349 
#line 349 
void *of_get_property(struct device_node *, char *, int *);
#line 364 
#line 364 
struct device_node *of_parse_phandle(struct device_node *, char *, int);
#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
__inline static int of_property_read_u32_array(struct device_node *np, char *propname, u32 *out_values, size_t sz)
{
  #line 496 
  int ret = of_property_read_variable_u32_array(np,propname,out_values,sz,0UL);
  #line 498 
  if (ret >= 0) 
                #line 499 
                return 0; else 
                               #line 501 
                               return ret;
}

#line 1174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
__inline static bool of_property_read_bool(struct device_node *np, char *propname)
{
  #line 1177 
  struct property *prop = of_find_property(np,propname,(int *)0);
  #line 1179 
  return (_Bool)(prop != (struct property *)0);
}

#line 1196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
__inline static int of_property_read_u32(struct device_node *np, char *propname, u32 *out_value)
{
  #line 1200 
  return of_property_read_u32_array(np,propname,out_value,1UL);
}

#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
#line 1050  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void cif_pm_runtime_enable(struct device *dev);
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
__inline static void pm_runtime_put_noidle_1(struct device *dev)
{
  #line 74 
  atomic_add_unless_1(& dev->power.usage_count,-1,0);
  #line 75 
  return;
}

#line 269 
#line 1066  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void cif_pm_runtime_disable(struct device *dev);
#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy/phy.h"
#line 208 
int phy_set_mode_ext(struct phy *, enum phy_mode, int);
#line 233 
#line 233 
struct phy *devm_of_phy_get(struct device *, struct device_node *, char *);
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gpio/consumer.h"
#line 104 
struct gpio_descs *devm_gpiod_get_array_optional(struct device *, char *, enum gpiod_flags);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_mdio.h"
#line 18 
struct phy_device *of_phy_connect(struct net_device *, struct device_node *, void (*)(struct net_device *), u32, phy_interface_t);
#line 30 
#line 30 
int of_phy_register_fixed_link(struct device_node *);
#line 31 
#line 31 
void of_phy_deregister_fixed_link(struct device_node *);
#line 32 
#line 32 
bool of_phy_is_fixed_link(struct device_node *);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_net.h"
#line 15 
int of_get_phy_mode(struct device_node *, phy_interface_t *);
#line 16 
#line 16 
void *of_get_mac_address(struct device_node *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_platform.h"
#line 56 
struct platform_device *of_find_device_by_node(struct device_node *);
#line 74 
#line 74 
int of_platform_populate(struct device_node *, struct of_device_id *, struct of_dev_auxdata *, struct device *);
#line 81 
#line 81 
void of_platform_depopulate(struct device *);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
#line 131 
int vlan_for_each(struct net_device *, int (*)(struct net_device *, int , void *), void *);
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sys_soc.h"
#line 41 
struct soc_device_attribute *soc_device_match(struct soc_device_attribute *);
#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
#line 191 
void page_pool_unmap_page(struct page_pool *, struct page *);
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/page_pool.h"
__inline static void page_pool_release_page(struct page_pool *pool, struct page *page)
{
  #line 196 
  page_pool_unmap_page(pool,page);
  #line 197 
  return;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pinctrl/consumer.h"
#line 45 
int pinctrl_pm_select_default_state(struct device *);
#line 46 
#line 46 
int pinctrl_pm_select_sleep_state(struct device *);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.h"
#line 18 
void cpsw_phy_sel(struct device *, phy_interface_t, int);
#line 24 
#line 24 
int ti_cm_get_macid(struct device *, int, u8 *);
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.h"
#line 97 
void cpsw_ale_start(struct cpsw_ale *ale);
#line 98 
#line 98 
void cpsw_ale_stop(struct cpsw_ale *ale);
#line 100 
#line 100 
int cpsw_ale_flush_multicast(struct cpsw_ale *ale, int port_mask, int vid);
#line 101 
#line 101 
int cpsw_ale_add_ucast(struct cpsw_ale *ale, u8 *addr, int port, int flags, u16 vid);
#line 103 
#line 103 
int cpsw_ale_del_ucast(struct cpsw_ale *ale, u8 *addr, int port, int flags, u16 vid);
#line 105 
#line 105 
int cpsw_ale_add_mcast(struct cpsw_ale *ale, u8 *addr, int port_mask, int flags, u16 vid, int mcast_state);
#line 107 
#line 107 
int cpsw_ale_del_mcast(struct cpsw_ale *ale, u8 *addr, int port_mask, int flags, u16 vid);
#line 109 
#line 109 
int cpsw_ale_add_vlan(struct cpsw_ale *ale, u16 vid, int port_mask, int untag, int reg_mcast, int unreg_mcast);
#line 111 
#line 111 
int cpsw_ale_del_vlan(struct cpsw_ale *ale, u16 vid, int port_mask);
#line 112 
#line 112 
void cpsw_ale_set_allmulti(struct cpsw_ale *ale, int allmulti, int port);
#line 114 
#line 114 
int cpsw_ale_control_get(struct cpsw_ale *ale, int port, int control);
#line 115 
#line 115 
int cpsw_ale_control_set(struct cpsw_ale *ale, int port, int control, int value);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_classify.h"
#line 58 
unsigned int ptp_classify_raw(struct sk_buff *);
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpts.h"
#line 119 
void cpts_rx_timestamp(struct cpts *, struct sk_buff *);
#line 121 
#line 121 
int cpts_register(struct cpts *);
#line 122 
#line 122 
void cpts_unregister(struct cpts *);
#line 125 
#line 125 
void cpts_release(struct cpts *);
#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpts.h"
__inline static bool cpts_can_timestamp(struct cpts *cpts, struct sk_buff *skb)
{
  #line 129 
  unsigned int class = ptp_classify_raw(skb);
  #line 131 
  if (class == 0U) 
                   #line 132 
                   return (_Bool)0;
  #line 134 
  return (_Bool)1;
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int debug_level;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int ale_ageout = 10;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int rx_packet_max = 1526;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int descs_pool_size = 256;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_slave_index_priv(struct cpsw_common *cpsw, struct cpsw_priv *priv)
{
  #line 83 
  u32 tmp;
  #line 83 
  if ((int)cpsw->data.dual_emac != 0) 
                                      #line 83 
                                      tmp = priv->emac_port; else 
                                                                  #line 83 
                                                                  tmp = cpsw->data.active_slave;
  #line 83 
  return (int)tmp;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_get_slave_port(u32 slave_num)
{
  #line 88 
  return (int)(slave_num + 1U);
}

#line 91 
#line 1049 
static int cpsw_ndo_vlan_rx_add_vid(struct net_device *ndev, __be16 proto, u16 vid);
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static void cpsw_set_promiscious(struct net_device *ndev, bool enable)
{
  #line 98 
  int i;
  #line 96 
  struct cpsw_common *cpsw = ((struct cpsw_priv *)netdev_priv(ndev))->cpsw;
  #line 97 
  struct cpsw_ale *ale = cpsw->ale;
  #line 100 
  if ((int)cpsw->data.dual_emac != 0) {
    #line 101 
    bool flag = (_Bool)0;
    #line 107 
    i = 0;
    #line 107 
    while (cpsw->data.slaves > (unsigned int)i) {
      #line 108 
      if ((((cpsw->slaves + (unsigned long)i)->ndev)->flags & 256U) != 0U) 
        #line 109 
        flag = (_Bool)1;
      #line 107 
      i ++;
    }
    #line 111 
    if (! enable && (int)flag != 0) {
      #line 112 
      enable = (_Bool)1;
      #line 113 
      _dev_err(& ndev->dev,(char *)"promiscuity not disabled as the other interface is still in promiscuity mode\n");
    }
    #line 116 
    if ((int)enable != 0) {
      #line 118 
      cpsw_ale_control_set(ale,0,7,1);
      {
        #line 120 
        bool branch;
        #line 120 
        struct _ddebug __UNIQUE_ID_ddebug480 = {.modname = (char *)"ti_cpsw", .function = (char *)"cpsw_set_promiscious", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c", .format = (char *)"promiscuity enabled\n", .lineno = (unsigned int)120U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 120 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug480.key.dd_key_false.key,(_Bool)0);
        #line 120 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 120 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug480,& ndev->dev,(char *)"promiscuity enabled\n");
      }
    }
    else {
      #line 123 
      cpsw_ale_control_set(ale,0,7,0);
      {
        #line 124 
        bool branch_0;
        #line 124 
        struct _ddebug __UNIQUE_ID_ddebug481 = {.modname = (char *)"ti_cpsw", .function = (char *)"cpsw_set_promiscious", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c", .format = (char *)"promiscuity disabled\n", .lineno = (unsigned int)124U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 124 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug481.key.dd_key_false.key,(_Bool)0);
        #line 124 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 124 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug481,& ndev->dev,(char *)"promiscuity disabled\n");
      }
    }
  }
  else 
    #line 127 
    if ((int)enable != 0) {
      #line 128 
      unsigned long timeout = jiffies + 250UL;
      #line 131 
      i = 0;
      #line 131 
      while (cpsw->data.slaves >= (unsigned int)i) {
        #line 132 
        cpsw_ale_control_set(ale,i,15,1);
        #line 134 
        cpsw_ale_control_set(ale,i,16,1);
        #line 131 
        i ++;
      }
      #line 139 
      cpsw_ale_control_set(ale,0,2,1);
      #line 140 
      while (1) {
        {
          #line 141 
          cpu_relax();
          #line 142 
          if (cpsw_ale_control_get(ale,0,2) != 0) 
                                                  #line 143 
                                                  break;
        }
        {
          #line 144 
          unsigned long __dummy;
          #line 144 
          unsigned long __dummy2;
          }
        #line 144 
        if (1 != 0) {
          {
            #line 144 
            unsigned long __dummy_0;
            #line 144 
            unsigned long __dummy2_0;
            }
          #line 144 
          if (1 != 0) {
            #line 144 
            if (! ((long)(jiffies - timeout) < 0L)) 
                                                    #line 140 
                                                    break;
          }
          else 
               #line 140 
               break;
        }
        else 
             #line 140 
             break;
      }
      #line 145 
      cpsw_ale_control_set(ale,0,2,1);
      #line 148 
      cpsw_ale_flush_multicast(ale,7,-1);
      #line 149 
      __hw_addr_ref_unsync_dev(& ndev->mc,ndev,(int (*)(struct net_device *, unsigned char *, int ))0);
      #line 152 
      cpsw_ale_control_set(ale,0,3,1);
      {
        #line 153 
        bool branch_1;
        #line 153 
        struct _ddebug __UNIQUE_ID_ddebug482 = {.modname = (char *)"ti_cpsw", .function = (char *)"cpsw_set_promiscious", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c", .format = (char *)"promiscuity enabled\n", .lineno = (unsigned int)153U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 153 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug482.key.dd_key_false.key,(_Bool)0);
        #line 153 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 153 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug482,& ndev->dev,(char *)"promiscuity enabled\n");
      }
    }
    else {
      #line 156 
      cpsw_ale_control_set(ale,0,3,0);
      #line 159 
      i = 0;
      #line 159 
      while (cpsw->data.slaves >= (unsigned int)i) {
        #line 160 
        cpsw_ale_control_set(ale,i,15,0);
        #line 162 
        cpsw_ale_control_set(ale,i,16,0);
        #line 159 
        i ++;
      }
      {
        #line 165 
        bool branch_2;
        #line 165 
        struct _ddebug __UNIQUE_ID_ddebug483 = {.modname = (char *)"ti_cpsw", .function = (char *)"cpsw_set_promiscious", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c", .format = (char *)"promiscuity disabled\n", .lineno = (unsigned int)165U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 165 
        branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug483.key.dd_key_false.key,(_Bool)0);
        #line 165 
        if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                      #line 165 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug483,& ndev->dev,(char *)"promiscuity disabled\n");
      }
    }
  #line 168 
  return;
}

#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_set_mc(struct net_device *ndev, u8 *addr, int vid, int add)
{
  #line 183 
  int mask;
  #line 183 
  int flags;
  #line 183 
  int ret;
  #line 181 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 182 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 185 
  if (vid < 0) 
    #line 186 
    if ((int)cpsw->data.dual_emac != 0) 
                                        #line 187 
                                        vid = (int)(cpsw->slaves + (unsigned long)priv->emac_port)->port_vlan; else 
                                                                    #line 189 
                                                                    vid = 0;
  #line 192 
  if ((int)cpsw->data.dual_emac != 0) 
                                      #line 192 
                                      mask = 1; else 
                                                     #line 192 
                                                     mask = 7;
  #line 193 
  if (vid != 0) 
                #line 193 
                flags = 8; else 
                                #line 193 
                                flags = 0;
  #line 195 
  if (add != 0) 
                #line 196 
                ret = cpsw_ale_add_mcast(cpsw->ale,addr,mask,flags,(unsigned short)((int)((unsigned short)vid)),0); else 
                                                                    #line 198 
                                                                    ret = cpsw_ale_del_mcast(cpsw->ale,addr,0,flags,(unsigned short)((int)((unsigned short)vid)));
  #line 200 
  return ret;
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_update_vlan_mc(struct net_device *vdev, int vid, void *ctx)
{
  #line 213 
  void *__mptr;
  #line 206 
  struct netdev_hw_addr *ha;
  #line 205 
  struct addr_sync_ctx *sync_ctx = (struct addr_sync_ctx *)ctx;
  #line 207 
  int found = 0;
  #line 207 
  int ret = 0;
  #line 209 
  if (vdev == (struct net_device *)0 || (vdev->flags & 1U) == 0U) 
                                                                  #line 210 
                                                                  return 0;
  #line 213 
  __mptr = (void *)vdev->mc.list.next;
  #line 213 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 213 
  while (& ha->list != & vdev->mc.list) {
    #line 213 
    void *__mptr_0;
    #line 214 
    if ((int)ether_addr_equal((u8 *)(& ha->addr),sync_ctx->addr) != 0) {
      #line 215 
      found = ha->sync_cnt;
      #line 216 
      break;
    }
    #line 213 
    __mptr_0 = (void *)ha->list.next;
    #line 213 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 220 
  if (found != 0) 
                  #line 221 
                  (sync_ctx->consumed) ++;
  #line 223 
  if (sync_ctx->flush != 0) {
    #line 224 
    if (found == 0) 
                    #line 225 
                    cpsw_set_mc(sync_ctx->ndev,sync_ctx->addr,vid,0);
    #line 226 
    return 0;
  }
  #line 229 
  if (found != 0) 
                  #line 230 
                  ret = cpsw_set_mc(sync_ctx->ndev,sync_ctx->addr,vid,1);
  #line 232 
  return ret;
}

#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_add_mc_addr(struct net_device *ndev, u8 *addr, int num)
{
  #line 237 
  struct addr_sync_ctx sync_ctx;
  #line 238 
  int ret;
  #line 240 
  sync_ctx.consumed = 0;
  #line 241 
  sync_ctx.addr = addr;
  #line 242 
  sync_ctx.ndev = ndev;
  #line 243 
  sync_ctx.flush = 0;
  #line 245 
  ret = vlan_for_each(ndev,& cpsw_update_vlan_mc,(void *)(& sync_ctx));
  #line 246 
  if (sync_ctx.consumed < num && ret == 0) 
                                           #line 247 
                                           ret = cpsw_set_mc(ndev,addr,-1,1);
  #line 249 
  return ret;
}

#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_del_mc_addr(struct net_device *ndev, u8 *addr, int num)
{
  #line 254 
  struct addr_sync_ctx sync_ctx;
  #line 256 
  sync_ctx.consumed = 0;
  #line 257 
  sync_ctx.addr = addr;
  #line 258 
  sync_ctx.ndev = ndev;
  #line 259 
  sync_ctx.flush = 1;
  #line 261 
  vlan_for_each(ndev,& cpsw_update_vlan_mc,(void *)(& sync_ctx));
  #line 262 
  if (sync_ctx.consumed == num) 
                                #line 263 
                                cpsw_set_mc(ndev,addr,-1,0);
  #line 265 
  return 0;
}

#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_purge_vlan_mc(struct net_device *vdev, int vid, void *ctx)
{
  #line 278 
  void *__mptr;
  #line 271 
  struct netdev_hw_addr *ha;
  #line 270 
  struct addr_sync_ctx *sync_ctx = (struct addr_sync_ctx *)ctx;
  #line 272 
  int found = 0;
  #line 274 
  if (vdev == (struct net_device *)0 || (vdev->flags & 1U) == 0U) 
                                                                  #line 275 
                                                                  return 0;
  #line 278 
  __mptr = (void *)vdev->mc.list.next;
  #line 278 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 278 
  while (& ha->list != & vdev->mc.list) {
    #line 278 
    void *__mptr_0;
    #line 279 
    if ((int)ether_addr_equal((u8 *)(& ha->addr),sync_ctx->addr) != 0) {
      #line 280 
      found = ha->sync_cnt;
      #line 281 
      break;
    }
    #line 278 
    __mptr_0 = (void *)ha->list.next;
    #line 278 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 285 
  if (found == 0) 
                  #line 286 
                  return 0;
  #line 288 
  (sync_ctx->consumed) ++;
  #line 289 
  cpsw_set_mc(sync_ctx->ndev,sync_ctx->addr,vid,0);
  #line 290 
  return 0;
}

#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_purge_all_mc(struct net_device *ndev, u8 *addr, int num)
{
  #line 295 
  struct addr_sync_ctx sync_ctx;
  #line 297 
  sync_ctx.addr = addr;
  #line 298 
  sync_ctx.ndev = ndev;
  #line 299 
  sync_ctx.consumed = 0;
  #line 301 
  vlan_for_each(ndev,& cpsw_purge_vlan_mc,(void *)(& sync_ctx));
  #line 302 
  if (sync_ctx.consumed < num) 
                               #line 303 
                               cpsw_set_mc(ndev,addr,-1,0);
  #line 305 
  return 0;
}

#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static void cpsw_ndo_set_rx_mode(struct net_device *ndev)
{
  #line 310 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 311 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 312 
  int slave_port = -1;
  #line 314 
  if ((int)cpsw->data.dual_emac != 0) 
                                      #line 315 
                                      slave_port = (int)(priv->emac_port + 1U);
  #line 317 
  if ((ndev->flags & 256U) != 0U) {
    #line 319 
    cpsw_set_promiscious(ndev,(_Bool)1);
    #line 320 
    cpsw_ale_set_allmulti(cpsw->ale,512,slave_port);
    #line 321 
    return;
  }
  else 
       #line 324 
       cpsw_set_promiscious(ndev,(_Bool)0);
  #line 328 
  cpsw_ale_set_allmulti(cpsw->ale,(int)ndev->flags & 512,slave_port);
  #line 332 
  __hw_addr_ref_sync_dev(& ndev->mc,ndev,& cpsw_add_mc_addr,& cpsw_del_mc_addr);
  #line 334 
  return;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static unsigned int cpsw_rxbuf_total_len(unsigned int len)
{
  #line 338 
  len += 256U;
  #line 339 
  len += 320U;
  #line 341 
  return (len + 63U) & 4294967232U;
}

#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static void cpsw_rx_handler(void *token, int len, int status)
{
  #line 346 
  struct page *new_page;
  #line 351 
  int port;
  #line 354 
  struct cpsw_priv *priv;
  #line 355 
  struct page_pool *pool;
  #line 356 
  struct sk_buff *skb;
  #line 357 
  struct xdp_buff xdp;
  #line 358 
  dma_addr_t dma;
  #line 346 
  struct page *page = (struct page *)token;
  #line 347 
  void *pa = lowmem_page_address(page);
  #line 348 
  struct cpsw_meta_xdp *xmeta = (struct cpsw_meta_xdp *)(pa + 32UL);
  #line 349 
  struct cpsw_common *cpsw = ((struct cpsw_priv *)netdev_priv(xmeta->ndev))->cpsw;
  #line 350 
  int pkt_size = cpsw->rx_packet_max;
  #line 351 
  int ret = 0;
  #line 351 
  int ch = xmeta->ch;
  #line 352 
  int headroom = 256;
  #line 353 
  struct net_device *ndev = xmeta->ndev;
  #line 360 
  if ((int)cpsw->data.dual_emac != 0 && status >= 0) {
    #line 361 
    port = (status >> 16) & 7;
    #line 362 
    if (port != 0) {
      #line 363 
      port --;
      #line 363 
      ndev = (cpsw->slaves + (unsigned long)port)->ndev;
    }
  }
  #line 366 
  priv = (struct cpsw_priv *)netdev_priv(ndev);
  #line 367 
  pool = cpsw->page_pool[ch];
  #line 368 
  if ((long)(status < 0) != 0L) 
                                #line 368 
                                goto _LOR;
  else {
    #line 368 
    int tmp_3;
    #line 368 
    if (netif_running(ndev)) 
                             #line 368 
                             tmp_3 = 0; else 
                                             #line 368 
                                             tmp_3 = 1;
    #line 368 
    if ((long)tmp_3 != 0L) {
      #line 368 
      _LOR: {
              #line 370 
              if (((int)cpsw->data.dual_emac != 0 && cpsw->usage_count != 0) && status >= 0) {
                #line 378 
                new_page = page;
                #line 379 
                goto requeue;
              }
              #line 383 
              page_pool_recycle_direct(pool,page);
              #line 384 
              return;
            }
    }
  }
  #line 387 
  new_page = page_pool_dev_alloc_pages(pool);
  #line 388 
  if ((long)(new_page == (struct page *)0) != 0L) {
    #line 389 
    new_page = page;
    #line 390 
    (ndev->stats.rx_dropped) ++;
    #line 391 
    goto requeue;
  }
  #line 394 
  if (priv->xdp_prog != (struct bpf_prog *)0) {
    #line 395 
    if (((unsigned long)status & 524288UL) != 0UL) {
      #line 396 
      xdp.data = pa + 260U;
      #line 398 
      xdp.data_end = xdp.data + ((unsigned long)len + 18446744073709551612U);
    }
    else {
      #line 401 
      xdp.data = pa + 256U;
      #line 402 
      xdp.data_end = xdp.data + (unsigned long)len;
    }
    #line 405 
    xdp_set_data_meta_invalid(& xdp);
    #line 407 
    xdp.data_hard_start = pa;
    #line 408 
    xdp.rxq = & priv->xdp_rxq[ch];
    #line 410 
    port = (int)(priv->emac_port + (unsigned int)cpsw->data.dual_emac);
    #line 411 
    ret = cpsw_run_xdp(priv,ch,& xdp,page,port);
    #line 412 
    if (ret != 0) 
                  #line 413 
                  goto requeue;
    #line 416 
    len = (int)(xdp.data_end - xdp.data);
    #line 417 
    headroom = (int)(xdp.data - xdp.data_hard_start);
    #line 420 
    status &= -524289;
  }
  #line 424 
  ;
  #line 424 
  skb = build_skb(pa,cpsw_rxbuf_total_len((unsigned int)pkt_size));
  #line 425 
  if (skb == (struct sk_buff *)0) {
    #line 426 
    (ndev->stats.rx_dropped) ++;
    #line 427 
    page_pool_recycle_direct(pool,page);
    #line 428 
    goto requeue;
  }
  #line 431 
  skb_reserve(skb,headroom);
  #line 432 
  skb_put(skb,(unsigned int)len);
  #line 433 
  skb->__anonCompField_sk_buff_125.__anonCompField___anonunion_1353_124.__anonCompField___anonstruct_1354_123.dev = ndev;
  #line 434 
  if (((unsigned long)status & 524288UL) != 0UL) 
                                                 #line 435 
                                                 cpsw_rx_vlan_encap(skb);
  #line 436 
  if (priv->rx_ts_enabled != 0) 
                                #line 437 
                                cpts_rx_timestamp(cpsw->cpts,skb);
  #line 438 
  skb->protocol = eth_type_trans(skb,ndev);
  #line 441 
  page_pool_release_page(pool,page);
  #line 442 
  netif_receive_skb(skb);
  #line 444 
  ndev->stats.rx_bytes += (unsigned long)len;
  #line 445 
  (ndev->stats.rx_packets) ++;
  #line 447 
  requeue: 
           #line 447 
  ;
  #line 448 
  xmeta = (struct cpsw_meta_xdp *)(lowmem_page_address(new_page) + 32UL);
  #line 449 
  xmeta->ndev = ndev;
  #line 450 
  xmeta->ch = ch;
  #line 452 
  dma = page_pool_get_dma_addr(new_page) + 256ULL;
  #line 453 
  ret = cpdma_chan_submit_mapped(cpsw->rxv[ch].ch,(void *)new_page,dma,pkt_size,0);
  #line 455 
  if (ret < 0) {
    {
      #line 456 
      int __ret_warn_on = ret == -12;
      #line 456 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 457 
        ldv_inline_asm();
        #line 458 
        ldv_inline_asm();
      }
      #line 456 
      long tmp_7 = (long)(__ret_warn_on != 0);
    }
    #line 457 
    page_pool_recycle_direct(pool,new_page);
  }
  #line 459 
  return;
}

#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static void _cpsw_adjust_link(struct cpsw_slave *slave, struct cpsw_priv *priv, bool *link)
{
  #line 466 
  u32 slave_port;
  #line 464 
  struct phy_device *phy = slave->phy;
  #line 465 
  u32 mac_control = 0U;
  #line 467 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 469 
  if (phy == (struct phy_device *)0) 
                                     #line 470 
                                     return;
  #line 472 
  slave_port = (unsigned int)cpsw_get_slave_port((unsigned int)slave->slave_num);
  #line 474 
  if ((unsigned int)phy->link != 0U) {
    #line 475 
    mac_control = 32U;
    #line 477 
    if (phy->speed == 1000) 
                            #line 478 
                            mac_control |= 128U;
    #line 479 
    if (phy->duplex != 0) 
                          #line 480 
                          mac_control |= 1U;
    #line 483 
    if (phy->speed == 100) 
                           #line 484 
                           mac_control |= 32768U;
    else 
      #line 486 
      if (phy->speed == 10) {
        #line 486 
        if ((int)phy_interface_is_rgmii(phy) != 0) 
                                                   #line 487 
                                                   mac_control |= 262144U;
      }
    #line 489 
    if ((int)priv->rx_pause != 0) 
                                  #line 490 
                                  mac_control |= 8U;
    #line 492 
    if ((int)priv->tx_pause != 0) 
                                  #line 493 
                                  mac_control |= 16U;
    #line 495 
    if (slave->mac_control != mac_control) 
                                           #line 496 
                                           cpsw_sl_ctl_set(slave->mac_sl,mac_control);
    #line 499 
    cpsw_ale_control_set(cpsw->ale,(int)slave_port,12,3);
    #line 502 
    *link = (_Bool)1;
    #line 504 
    if (priv->shp_cfg_speed != 0 && priv->shp_cfg_speed != (slave->phy)->speed) {
      #line 506 
      if (! cpsw_shp_is_off(priv)) 
                                   #line 507 
                                   _dev_warn(priv->dev,(char *)"Speed was changed, CBS shaper speeds are changed!");
    }
  }
  else {
    #line 510 
    mac_control = 0U;
    #line 512 
    cpsw_ale_control_set(cpsw->ale,(int)slave_port,12,0);
    #line 515 
    cpsw_sl_wait_for_idle(slave->mac_sl,100UL);
    #line 517 
    cpsw_sl_ctl_reset(slave->mac_sl);
  }
  #line 520 
  if (slave->mac_control != mac_control) 
                                         #line 521 
                                         phy_print_status(phy);
  #line 523 
  slave->mac_control = mac_control;
  #line 524 
  return;
}

#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static void cpsw_adjust_link(struct net_device *ndev)
{
  #line 528 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 529 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 530 
  bool link = (_Bool)0;
  {
    #line 532 
    struct cpsw_slave *slave;
    #line 532 
    int n;
    #line 532 
    struct cpsw_common *cpsw_0 = priv->cpsw;
    #line 532 
    if ((int)cpsw_0->data.dual_emac != 0) 
                                          #line 532 
                                          _cpsw_adjust_link(cpsw_0->slaves + (unsigned long)priv->emac_port,priv,& link);
    else {
      #line 532 
      n = (int)cpsw_0->data.slaves;
      #line 532 
      slave = cpsw_0->slaves;
      #line 532 
      while (n != 0) {
        #line 532 
        struct cpsw_slave *tmp_0;
        #line 532 
        ;
        #line 532 
        tmp_0 = slave;
        #line 532 
        slave ++;
        #line 532 
        ;
        #line 532 
        _cpsw_adjust_link(tmp_0,priv,& link);
        #line 532 
        n --;
      }
    }
  }
  #line 534 
  if ((int)link != 0) {
    #line 535 
    if (cpsw_need_resplit(cpsw) != 0) 
                                      #line 536 
                                      cpsw_split_res(cpsw);
    #line 538 
    netif_carrier_on(ndev);
    #line 539 
    if ((int)netif_running(ndev) != 0) 
                                       #line 540 
                                       netif_tx_wake_all_queues(ndev);
  }
  else {
    #line 542 
    netif_carrier_off(ndev);
    #line 543 
    netif_tx_stop_all_queues(ndev);
  }
  #line 545 
  return;
}

#line 547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
__inline static void cpsw_add_dual_emac_def_ale_entries(struct cpsw_priv *priv, struct cpsw_slave *slave, u32 slave_port)
{
  #line 551 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 552 
  u32 port_mask = (unsigned int)((1 << slave_port) | 1);
  #line 554 
  if (cpsw->version == 1638666U) 
                                 #line 555 
                                 slave_write(slave,slave->port_vlan,12U); else 
                                                                    #line 557 
                                                                    slave_write(slave,slave->port_vlan,20U);
  #line 558 
  cpsw_ale_add_vlan(cpsw->ale,(unsigned short)((int)((unsigned short)slave->port_vlan)),(int)port_mask,(int)port_mask,(int)port_mask,0);
  #line 560 
  cpsw_ale_add_mcast(cpsw->ale,(u8 *)(& (priv->ndev)->broadcast),1,8,(unsigned short)((int)((unsigned short)slave->port_vlan)),0);
  #line 562 
  cpsw_ale_add_ucast(cpsw->ale,(u8 *)(& priv->mac_addr),0,9,(unsigned short)((int)((unsigned short)slave->port_vlan)));
  #line 565 
  cpsw_ale_control_set(cpsw->ale,(int)slave_port,14,1);
  #line 566 
  return;
}

#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static void cpsw_slave_open(struct cpsw_slave *slave, struct cpsw_priv *priv)
{
  #line 571 
  u32 slave_port;
  #line 572 
  struct phy_device *phy;
  #line 573 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 575 
  cpsw_sl_reset(slave->mac_sl,100UL);
  #line 576 
  cpsw_sl_ctl_reset(slave->mac_sl);
  #line 579 
  cpsw_sl_reg_write(slave->mac_sl,(enum cpsw_sl_regs)CPSW_SL_RX_PRI_MAP,1985229328U);
  #line 582 
  switch (cpsw->version) {
    #line 583 
    case (u32)1638666: 
                       #line 583 
    ;
    #line 584 
    slave_write(slave,857870592U,16U);
    #line 588 
    slave_write(slave,245U,0U);
    #line 591 
    break;
    #line 592 
    case (u32)1638668: 
                       #line 592 
    ;
    #line 593 
    case (u32)1638671: 
                       #line 593 
    ;
    #line 594 
    case (u32)1638674: 
                       #line 594 
    ;
    #line 595 
    slave_write(slave,857870592U,24U);
    #line 599 
    slave_write(slave,245U,8U);
    #line 602 
    break;
  }
  #line 606 
  cpsw_sl_reg_write(slave->mac_sl,(enum cpsw_sl_regs)CPSW_SL_RX_MAXLEN,(unsigned int)cpsw->rx_packet_max);
  #line 608 
  cpsw_set_slave_mac(slave,priv);
  #line 610 
  slave->mac_control = 0U;
  #line 612 
  slave_port = (unsigned int)cpsw_get_slave_port((unsigned int)slave->slave_num);
  #line 614 
  if ((int)cpsw->data.dual_emac != 0) 
                                      #line 615 
                                      cpsw_add_dual_emac_def_ale_entries(priv,slave,slave_port); else 
                                                                    #line 617 
                                                                    cpsw_ale_add_mcast(cpsw->ale,(u8 *)(& (priv->ndev)->broadcast),1 << slave_port,0,(unsigned short)0,3);
  #line 620 
  if ((slave->data)->phy_node != (struct device_node *)0) {
    #line 621 
    phy = of_phy_connect(priv->ndev,(slave->data)->phy_node,& cpsw_adjust_link,0U,(slave->data)->phy_if);
    #line 623 
    if (phy == (struct phy_device *)0) {
      #line 624 
      _dev_err(priv->dev,(char *)"phy \"%pOF\" not found on slave %d\n",(slave->data)->phy_node,slave->slave_num);
      #line 627 
      return;
    }
  }
  else {
    #line 630 
    phy = phy_connect(priv->ndev,(char *)(& (slave->data)->phy_id),& cpsw_adjust_link,(slave->data)->phy_if);
    #line 632 
    if ((int)IS_ERR_2((void *)phy) != 0) {
      #line 633 
      ;
      #line 633 
      ;
      #line 633 
      ;
      #line 633 
      _dev_err(priv->dev,(char *)"phy \"%s\" not found on slave %d, err %ld\n",(char *)(& (slave->data)->phy_id),slave->slave_num,PTR_ERR_2((void *)phy));
      #line 637 
      return;
    }
  }
  #line 641 
  slave->phy = phy;
  #line 643 
  phy_attached_info(slave->phy);
  #line 645 
  phy_start(slave->phy);
  #line 648 
  if (IS_ERR_2((void *)(slave->data)->ifphy)) 
                                              #line 652 
                                              cpsw_phy_sel(cpsw->dev,(slave->phy)->interface,slave->slave_num); else 
                                                                    #line 649 
                                                                    phy_set_mode_ext((slave->data)->ifphy,(enum phy_mode)PHY_MODE_ETHERNET,(int)(slave->data)->phy_if);
  #line 654 
  return;
}

#line 656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
__inline static void cpsw_add_default_vlan(struct cpsw_priv *priv)
{
  #line 660 
  u32 reg;
  #line 661 
  int i;
  #line 662 
  int unreg_mcast_mask;
  #line 658 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 659 
  int vlan = (int)cpsw->data.default_vlan;
  #line 664 
  if (cpsw->version == 1638666U) 
                                 #line 664 
                                 reg = 12U; else 
                                                 #line 664 
                                                 reg = 20U;
  #line 667 
  writel((unsigned int)vlan,(void *)(& (cpsw->host_port_regs)->port_vlan));
  #line 669 
  i = 0;
  #line 669 
  while (cpsw->data.slaves > (unsigned int)i) {
    #line 670 
    slave_write(cpsw->slaves + (unsigned long)i,(unsigned int)vlan,reg);
    #line 669 
    i ++;
  }
  #line 672 
  if (((priv->ndev)->flags & 512U) != 0U) 
                                          #line 673 
                                          unreg_mcast_mask = 7; else 
                                                                  #line 675 
                                                                  unreg_mcast_mask = 6;
  #line 677 
  cpsw_ale_add_vlan(cpsw->ale,(unsigned short)((int)((unsigned short)vlan)),7,7,7,unreg_mcast_mask);
  #line 678 
  return;
}

#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static void cpsw_init_host_port(struct cpsw_priv *priv)
{
  #line 684 
  u32 fifo_mode;
  #line 685 
  u32 control_reg;
  #line 686 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 689 
  soft_reset((char *)"cpsw",(void *)(& (cpsw->regs)->soft_reset));
  #line 690 
  cpsw_ale_start(cpsw->ale);
  #line 693 
  cpsw_ale_control_set(cpsw->ale,0,9,1);
  #line 695 
  control_reg = readl((void *)(& (cpsw->regs)->control));
  #line 696 
  control_reg |= 6U;
  #line 697 
  writel(control_reg,(void *)(& (cpsw->regs)->control));
  #line 698 
  if ((int)cpsw->data.dual_emac != 0) 
                                      #line 698 
                                      fifo_mode = 65536U; else 
                                                               #line 698 
                                                               fifo_mode = 0U;
  #line 700 
  writel(fifo_mode,(void *)(& (cpsw->host_port_regs)->tx_in_ctl));
  #line 703 
  writel(1985229328U,(void *)(& (cpsw->host_port_regs)->cpdma_tx_pri_map));
  #line 705 
  writel(0U,(void *)(& (cpsw->host_port_regs)->cpdma_rx_chan_map));
  #line 707 
  cpsw_ale_control_set(cpsw->ale,0,12,3);
  #line 710 
  if (! cpsw->data.dual_emac) {
    #line 711 
    cpsw_ale_add_ucast(cpsw->ale,(u8 *)(& priv->mac_addr),0,0,(unsigned short)0);
    #line 713 
    cpsw_ale_add_mcast(cpsw->ale,(u8 *)(& (priv->ndev)->broadcast),1,0,(unsigned short)0,3);
  }
  #line 715 
  return;
}

#line 718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static void cpsw_slave_stop(struct cpsw_slave *slave, struct cpsw_common *cpsw)
{
  #line 720 
  u32 slave_port;
  #line 722 
  slave_port = (unsigned int)cpsw_get_slave_port((unsigned int)slave->slave_num);
  #line 724 
  if (slave->phy == (struct phy_device *)0) 
                                            #line 725 
                                            return;
  #line 726 
  phy_stop(slave->phy);
  #line 727 
  phy_disconnect(slave->phy);
  #line 728 
  slave->phy = (struct phy_device *)0;
  #line 729 
  cpsw_ale_control_set(cpsw->ale,(int)slave_port,12,0);
  #line 731 
  cpsw_sl_reset(slave->mac_sl,100UL);
  #line 732 
  cpsw_sl_ctl_reset(slave->mac_sl);
  #line 733 
  return;
}

#line 735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_restore_vlans(struct net_device *vdev, int vid, void *arg)
{
  #line 737 
  struct cpsw_priv *priv = (struct cpsw_priv *)arg;
  #line 739 
  if (vdev == (struct net_device *)0) 
                                      #line 740 
                                      return 0;
  #line 742 
  cpsw_ndo_vlan_rx_add_vid(priv->ndev,(unsigned short)0,(unsigned short)((int)((unsigned short)vid)));
  #line 743 
  return 0;
}

#line 747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static void cpsw_restore(struct cpsw_priv *priv)
{
  #line 750 
  vlan_for_each(priv->ndev,& cpsw_restore_vlans,(void *)priv);
  {
    #line 753 
    struct cpsw_slave *slave;
    #line 753 
    int n;
    #line 753 
    struct cpsw_common *cpsw = priv->cpsw;
    #line 753 
    if ((int)cpsw->data.dual_emac != 0) 
                                        #line 753 
                                        cpsw_mqprio_resume(cpsw->slaves + (unsigned long)priv->emac_port,priv);
    else {
      #line 753 
      n = (int)cpsw->data.slaves;
      #line 753 
      slave = cpsw->slaves;
      #line 753 
      while (n != 0) {
        #line 753 
        struct cpsw_slave *tmp;
        #line 753 
        ;
        #line 753 
        tmp = slave;
        #line 753 
        slave ++;
        #line 753 
        ;
        #line 753 
        cpsw_mqprio_resume(tmp,priv);
        #line 753 
        n --;
      }
    }
  }
  {
    #line 756 
    struct cpsw_slave *slave_0;
    #line 756 
    int n_0;
    #line 756 
    struct cpsw_common *cpsw_0 = priv->cpsw;
    #line 756 
    if ((int)cpsw_0->data.dual_emac != 0) 
                                          #line 756 
                                          cpsw_cbs_resume(cpsw_0->slaves + (unsigned long)priv->emac_port,priv);
    else {
      #line 756 
      n_0 = (int)cpsw_0->data.slaves;
      #line 756 
      slave_0 = cpsw_0->slaves;
      #line 756 
      while (n_0 != 0) {
        #line 756 
        struct cpsw_slave *tmp_0;
        #line 756 
        ;
        #line 756 
        tmp_0 = slave_0;
        #line 756 
        slave_0 ++;
        #line 756 
        ;
        #line 756 
        cpsw_cbs_resume(tmp_0,priv);
        #line 756 
        n_0 --;
      }
    }
  }
  #line 759 
  return;
}

#line 759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_ndo_open(struct net_device *ndev)
{
  #line 763 
  int ret;
  #line 764 
  u32 reg;
  #line 761 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 762 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 766 
  ret = pm_runtime_get_sync(cpsw->dev);
  #line 767 
  if (ret < 0) {
    #line 768 
    pm_runtime_put_noidle_1(cpsw->dev);
    #line 769 
    return ret;
  }
  #line 772 
  netif_carrier_off(ndev);
  #line 775 
  ret = netif_set_real_num_tx_queues(ndev,(unsigned int)cpsw->tx_ch_num);
  #line 776 
  if (ret != 0) {
    #line 777 
    _dev_err(priv->dev,(char *)"cannot set real number of tx queues\n");
    #line 778 
    goto err_cleanup;
  }
  #line 781 
  ret = netif_set_real_num_rx_queues(ndev,(unsigned int)cpsw->rx_ch_num);
  #line 782 
  if (ret != 0) {
    #line 783 
    _dev_err(priv->dev,(char *)"cannot set real number of rx queues\n");
    #line 784 
    goto err_cleanup;
  }
  #line 787 
  reg = cpsw->version;
  #line 789 
  _dev_info(priv->dev,(char *)"initializing cpsw version %d.%d (%d)\n",(reg >> 8) & 7U,reg & 255U,(reg >> 11) & 31U);
  #line 794 
  if (cpsw->usage_count == 0) 
                              #line 795 
                              cpsw_init_host_port(priv);
  {
    #line 796 
    struct cpsw_slave *slave;
    #line 796 
    int n;
    #line 796 
    struct cpsw_common *cpsw_0 = priv->cpsw;
    #line 796 
    if ((int)cpsw_0->data.dual_emac != 0) 
                                          #line 796 
                                          cpsw_slave_open(cpsw_0->slaves + (unsigned long)priv->emac_port,priv);
    else {
      #line 796 
      n = (int)cpsw_0->data.slaves;
      #line 796 
      slave = cpsw_0->slaves;
      #line 796 
      while (n != 0) {
        #line 796 
        struct cpsw_slave *tmp_0;
        #line 796 
        ;
        #line 796 
        tmp_0 = slave;
        #line 796 
        slave ++;
        #line 796 
        ;
        #line 796 
        cpsw_slave_open(tmp_0,priv);
        #line 796 
        n --;
      }
    }
  }
  #line 799 
  if (! cpsw->data.dual_emac) 
                              #line 800 
                              cpsw_add_default_vlan(priv); else 
                                                                #line 802 
                                                                cpsw_ale_add_vlan(cpsw->ale,(unsigned short)((int)cpsw->data.default_vlan),7,7,0,0);
  #line 806 
  if (cpsw->usage_count == 0) {
    #line 808 
    writel(0U,(void *)(& (cpsw->regs)->ptype));
    #line 811 
    writel(7U,(void *)(& (cpsw->regs)->stat_port_en));
    #line 814 
    writel(7U,(void *)(& (cpsw->regs)->flow_control));
    #line 816 
    napi_enable(& cpsw->napi_rx);
    #line 817 
    napi_enable(& cpsw->napi_tx);
    #line 819 
    if ((int)cpsw->tx_irq_disabled != 0) {
      #line 820 
      cpsw->tx_irq_disabled = (_Bool)0;
      #line 821 
      enable_irq(cpsw->irqs_table[1]);
    }
    #line 824 
    if ((int)cpsw->rx_irq_disabled != 0) {
      #line 825 
      cpsw->rx_irq_disabled = (_Bool)0;
      #line 826 
      enable_irq(cpsw->irqs_table[0]);
    }
    #line 832 
    ret = cpsw_create_xdp_rxqs(cpsw);
    #line 833 
    if (ret < 0) 
                 #line 834 
                 goto err_cleanup;
    #line 836 
    ret = cpsw_fill_rx_channels(priv);
    #line 837 
    if (ret < 0) 
                 #line 838 
                 goto err_cleanup;
    #line 840 
    if (cpts_register(cpsw->cpts) != 0) 
                                        #line 841 
                                        _dev_err(priv->dev,(char *)"error registering cpts device\n");
  }
  #line 845 
  cpsw_restore(priv);
  #line 848 
  if (cpsw->coal_intvl != 0U) {
    #line 849 
    struct ethtool_coalesce coal;
    #line 851 
    coal.rx_coalesce_usecs = cpsw->coal_intvl;
    #line 852 
    cpsw_set_coalesce(ndev,& coal);
  }
  #line 855 
  cpdma_ctlr_start(cpsw->dma);
  #line 856 
  cpsw_intr_enable(cpsw);
  #line 857 
  (cpsw->usage_count) ++;
  #line 859 
  return 0;
  #line 861 
  err_cleanup: 
               #line 861 
  ;
  #line 862 
  if (cpsw->usage_count == 0) {
    #line 863 
    cpdma_ctlr_stop(cpsw->dma);
    #line 864 
    cpsw_destroy_xdp_rxqs(cpsw);
  }
  {
    #line 867 
    struct cpsw_slave *slave_0;
    #line 867 
    int n_0;
    #line 867 
    struct cpsw_common *cpsw_1 = priv->cpsw;
    #line 867 
    if ((int)cpsw_1->data.dual_emac != 0) 
                                          #line 867 
                                          cpsw_slave_stop(cpsw_1->slaves + (unsigned long)priv->emac_port,cpsw_1);
    else {
      #line 867 
      n_0 = (int)cpsw_1->data.slaves;
      #line 867 
      slave_0 = cpsw_1->slaves;
      #line 867 
      while (n_0 != 0) {
        #line 867 
        struct cpsw_slave *tmp_2;
        #line 867 
        ;
        #line 867 
        tmp_2 = slave_0;
        #line 867 
        slave_0 ++;
        #line 867 
        ;
        #line 867 
        cpsw_slave_stop(tmp_2,cpsw_1);
        #line 867 
        n_0 --;
      }
    }
  }
  #line 868 
  pm_runtime_put_sync(cpsw->dev);
  #line 869 
  netif_carrier_off(priv->ndev);
  #line 870 
  return ret;
}

#line 873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_ndo_stop(struct net_device *ndev)
{
  #line 875 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 876 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 878 
  if ((priv->msg_enable & 16U) != 0U) {
    #line 878 
    if (net_ratelimit() != 0) 
                              #line 878 
                              _dev_info(priv->dev,(char *)"shutting down cpsw device\n");
  }
  #line 879 
  __hw_addr_ref_unsync_dev(& ndev->mc,ndev,& cpsw_purge_all_mc);
  #line 880 
  netif_tx_stop_all_queues(priv->ndev);
  #line 881 
  netif_carrier_off(priv->ndev);
  #line 883 
  if (cpsw->usage_count <= 1) {
    #line 884 
    napi_disable(& cpsw->napi_rx);
    #line 885 
    napi_disable(& cpsw->napi_tx);
    #line 886 
    cpts_unregister(cpsw->cpts);
    #line 887 
    cpsw_intr_disable(cpsw);
    #line 888 
    cpdma_ctlr_stop(cpsw->dma);
    #line 889 
    cpsw_ale_stop(cpsw->ale);
    #line 890 
    cpsw_destroy_xdp_rxqs(cpsw);
  }
  {
    #line 892 
    struct cpsw_slave *slave;
    #line 892 
    int n;
    #line 892 
    struct cpsw_common *cpsw_0 = priv->cpsw;
    #line 892 
    if ((int)cpsw_0->data.dual_emac != 0) 
                                          #line 892 
                                          cpsw_slave_stop(cpsw_0->slaves + (unsigned long)priv->emac_port,cpsw_0);
    else {
      #line 892 
      n = (int)cpsw_0->data.slaves;
      #line 892 
      slave = cpsw_0->slaves;
      #line 892 
      while (n != 0) {
        #line 892 
        struct cpsw_slave *tmp_1;
        #line 892 
        ;
        #line 892 
        tmp_1 = slave;
        #line 892 
        slave ++;
        #line 892 
        ;
        #line 892 
        cpsw_slave_stop(tmp_1,cpsw_0);
        #line 892 
        n --;
      }
    }
  }
  #line 894 
  if (cpsw_need_resplit(cpsw) != 0) 
                                    #line 895 
                                    cpsw_split_res(cpsw);
  #line 897 
  (cpsw->usage_count) --;
  #line 898 
  pm_runtime_put_sync(cpsw->dev);
  #line 899 
  return 0;
}

#line 902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static netdev_tx_t cpsw_ndo_start_xmit(struct sk_buff *skb, struct net_device *ndev)
{
  #line 908 
  struct netdev_queue *txq;
  #line 909 
  struct cpdma_chan *txch;
  #line 910 
  int ret;
  #line 910 
  int q_idx;
  #line 939 
  int tmp_10;
  #line 905 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 906 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 907 
  struct cpts *cpts = cpsw->cpts;
  #line 912 
  if (skb_padto(skb,64U) != 0) {
    #line 913 
    if ((priv->msg_enable & 128U) != 0U) {
      #line 913 
      if (net_ratelimit() != 0) 
                                #line 913 
                                _dev_err(priv->dev,(char *)"packet pad failed\n");
    }
    #line 914 
    (ndev->stats.tx_dropped) ++;
    #line 915 
    return (enum netdev_tx)1;
  }
  #line 918 
  ;
  #line 918 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 1) != 0) 
    #line 918 
    if (priv->tx_ts_enabled != 0) {
      #line 919 
      if ((int)cpts_can_timestamp(cpts,skb) != 0) {
        #line 920 
        ((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags = (unsigned char)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags | 4U);
      }
    }
  #line 922 
  q_idx = (int)skb_get_queue_mapping(skb);
  #line 923 
  if (cpsw->tx_ch_num <= q_idx) 
                                #line 924 
                                q_idx %= cpsw->tx_ch_num;
  #line 926 
  txch = cpsw->txv[q_idx].ch;
  #line 927 
  txq = netdev_get_tx_queue(ndev,(unsigned int)q_idx);
  #line 928 
  skb_tx_timestamp(skb);
  #line 929 
  ret = cpdma_chan_submit(txch,(void *)skb,(void *)skb->data,(int)skb->len,(int)(priv->emac_port + (unsigned int)cpsw->data.dual_emac));
  #line 931 
  if ((long)(ret != 0) != 0L) {
    #line 932 
    if ((priv->msg_enable & 128U) != 0U) {
      #line 932 
      if (net_ratelimit() != 0) 
                                #line 932 
                                _dev_err(priv->dev,(char *)"desc submit failed\n");
    }
    #line 933 
    goto fail;
  }
  #line 939 
  if (cpdma_check_free_tx_desc(txch)) 
                                      #line 939 
                                      tmp_10 = 0; else 
                                                       #line 939 
                                                       tmp_10 = 1;
  #line 939 
  if ((long)tmp_10 != 0L) {
    #line 940 
    netif_tx_stop_queue(txq);
    #line 945 
    if ((int)cpdma_check_free_tx_desc(txch) != 0) 
                                                  #line 946 
                                                  netif_tx_wake_queue(txq);
  }
  #line 949 
  return NETDEV_TX_OK;
  #line 950 
  fail: 
        #line 950 
  ;
  #line 951 
  (ndev->stats.tx_dropped) ++;
  #line 952 
  netif_tx_stop_queue(txq);
  #line 957 
  if ((int)cpdma_check_free_tx_desc(txch) != 0) 
                                                #line 958 
                                                netif_tx_wake_queue(txq);
  #line 960 
  return NETDEV_TX_BUSY;
}

#line 963  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_ndo_set_mac_address(struct net_device *ndev, void *p)
{
  #line 970 
  int ret;
  #line 965 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 966 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 967 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 968 
  int flags = 0;
  #line 969 
  u16 vid = (unsigned short)0U;
  #line 972 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 973 
                                                      return -99;
  #line 975 
  ret = pm_runtime_get_sync(cpsw->dev);
  #line 976 
  if (ret < 0) {
    #line 977 
    pm_runtime_put_noidle_1(cpsw->dev);
    #line 978 
    return ret;
  }
  #line 981 
  if ((int)cpsw->data.dual_emac != 0) {
    #line 982 
    vid = (unsigned short)(cpsw->slaves + (unsigned long)priv->emac_port)->port_vlan;
    #line 983 
    flags = 8;
  }
  #line 986 
  cpsw_ale_del_ucast(cpsw->ale,(u8 *)(& priv->mac_addr),0,flags,(unsigned short)((int)vid));
  #line 988 
  cpsw_ale_add_ucast(cpsw->ale,(u8 *)(& addr->sa_data),0,flags,(unsigned short)((int)vid));
  #line 991 
  memcpy((void *)(& priv->mac_addr),(void *)(& addr->sa_data),6UL);
  #line 992 
  memcpy((void *)ndev->dev_addr,(void *)(& priv->mac_addr),6UL);
  {
    #line 993 
    struct cpsw_slave *slave;
    #line 993 
    int n;
    #line 993 
    struct cpsw_common *cpsw_0 = priv->cpsw;
    #line 993 
    if ((int)cpsw_0->data.dual_emac != 0) 
                                          #line 993 
                                          cpsw_set_slave_mac(cpsw_0->slaves + (unsigned long)priv->emac_port,priv);
    else {
      #line 993 
      n = (int)cpsw_0->data.slaves;
      #line 993 
      slave = cpsw_0->slaves;
      #line 993 
      while (n != 0) {
        #line 993 
        struct cpsw_slave *tmp_1;
        #line 993 
        ;
        #line 993 
        tmp_1 = slave;
        #line 993 
        slave ++;
        #line 993 
        ;
        #line 993 
        cpsw_set_slave_mac(tmp_1,priv);
        #line 993 
        n --;
      }
    }
  }
  #line 995 
  pm_runtime_put(cpsw->dev);
  #line 997 
  return 0;
}

#line 1000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
__inline static int cpsw_add_vlan_ale_entry(struct cpsw_priv *priv, unsigned short vid)
{
  #line 1003 
  int ret;
  #line 1005 
  int mcast_mask;
  #line 1006 
  u32 port_mask;
  #line 1004 
  int unreg_mcast_mask = 0;
  #line 1007 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 1009 
  if ((int)cpsw->data.dual_emac != 0) {
    #line 1010 
    port_mask = (unsigned int)((1 << (priv->emac_port + 1U)) | 1);
    #line 1012 
    mcast_mask = 1;
    #line 1013 
    if (((priv->ndev)->flags & 512U) != 0U) 
                                            #line 1014 
                                            unreg_mcast_mask = mcast_mask;
  }
  else {
    #line 1016 
    port_mask = 7U;
    #line 1017 
    mcast_mask = (int)port_mask;
    #line 1019 
    if (((priv->ndev)->flags & 512U) != 0U) 
                                            #line 1020 
                                            unreg_mcast_mask = 7; else 
                                                                    #line 1022 
                                                                    unreg_mcast_mask = 6;
  }
  #line 1025 
  ret = cpsw_ale_add_vlan(cpsw->ale,(unsigned short)((int)vid),(int)port_mask,0,(int)port_mask,unreg_mcast_mask);
  #line 1027 
  if (ret != 0) 
                #line 1028 
                return ret;
  #line 1030 
  ret = cpsw_ale_add_ucast(cpsw->ale,(u8 *)(& priv->mac_addr),0,8,(unsigned short)((int)vid));
  #line 1032 
  if (ret != 0) 
                #line 1033 
                goto clean_vid;
  #line 1035 
  ret = cpsw_ale_add_mcast(cpsw->ale,(u8 *)(& (priv->ndev)->broadcast),mcast_mask,8,(unsigned short)((int)vid),0);
  #line 1037 
  if (ret != 0) 
                #line 1038 
                goto clean_vlan_ucast;
  #line 1039 
  return 0;
  #line 1041 
  clean_vlan_ucast: 
                    #line 1041 
  ;
  #line 1042 
  cpsw_ale_del_ucast(cpsw->ale,(u8 *)(& priv->mac_addr),0,8,(unsigned short)((int)vid));
  #line 1044 
  clean_vid: 
             #line 1044 
  ;
  #line 1045 
  cpsw_ale_del_vlan(cpsw->ale,(unsigned short)((int)vid),0);
  #line 1046 
  return ret;
}

#line 1049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_ndo_vlan_rx_add_vid(struct net_device *ndev, __be16 proto, u16 vid)
{
  #line 1054 
  int ret;
  #line 1052 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 1053 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 1056 
  if ((int)cpsw->data.default_vlan == (int)vid) 
                                                #line 1057 
                                                return 0;
  #line 1059 
  ret = pm_runtime_get_sync(cpsw->dev);
  #line 1060 
  if (ret < 0) {
    #line 1061 
    pm_runtime_put_noidle_1(cpsw->dev);
    #line 1062 
    return ret;
  }
  #line 1065 
  if ((int)cpsw->data.dual_emac != 0) {
    #line 1070 
    int i;
    #line 1072 
    i = 0;
    #line 1072 
    while (cpsw->data.slaves > (unsigned int)i) {
      #line 1073 
      if ((unsigned int)vid == (cpsw->slaves + (unsigned long)i)->port_vlan) {
        #line 1074 
        ret = -22;
        #line 1075 
        goto err;
      }
      #line 1072 
      i ++;
    }
  }
  #line 1080 
  _dev_info(priv->dev,(char *)"Adding vlanid %d to vlan filter\n",(int)vid);
  #line 1081 
  ret = cpsw_add_vlan_ale_entry(priv,(unsigned short)((int)vid));
  #line 1082 
  err: 
       #line 1082 
  ;
  #line 1083 
  pm_runtime_put(cpsw->dev);
  #line 1084 
  return ret;
}

#line 1087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_ndo_vlan_rx_kill_vid(struct net_device *ndev, __be16 proto, u16 vid)
{
  #line 1092 
  int ret;
  #line 1090 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 1091 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 1094 
  if ((int)cpsw->data.default_vlan == (int)vid) 
                                                #line 1095 
                                                return 0;
  #line 1097 
  ret = pm_runtime_get_sync(cpsw->dev);
  #line 1098 
  if (ret < 0) {
    #line 1099 
    pm_runtime_put_noidle_1(cpsw->dev);
    #line 1100 
    return ret;
  }
  #line 1103 
  if ((int)cpsw->data.dual_emac != 0) {
    #line 1104 
    int i;
    #line 1106 
    i = 0;
    #line 1106 
    while (cpsw->data.slaves > (unsigned int)i) {
      #line 1107 
      if ((unsigned int)vid == (cpsw->slaves + (unsigned long)i)->port_vlan) 
        #line 1108 
        goto err;
      #line 1106 
      i ++;
    }
  }
  #line 1112 
  _dev_info(priv->dev,(char *)"removing vlanid %d from vlan filter\n",(int)vid);
  #line 1113 
  ret = cpsw_ale_del_vlan(cpsw->ale,(unsigned short)((int)vid),0);
  #line 1115 
  ret = cpsw_ale_del_ucast(cpsw->ale,(u8 *)(& priv->mac_addr),0,8,
                           (unsigned short)((int)vid)) | ret;
  #line 1117 
  ret = cpsw_ale_del_mcast(cpsw->ale,(u8 *)(& (priv->ndev)->broadcast),0,8,
                           (unsigned short)((int)vid)) | ret;
  #line 1118 
  ret = cpsw_ale_flush_multicast(cpsw->ale,0,(int)vid) | ret;
  #line 1119 
  err: 
       #line 1119 
  ;
  #line 1120 
  pm_runtime_put(cpsw->dev);
  #line 1121 
  return ret;
}

#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_ndo_xdp_xmit(struct net_device *ndev, int n, struct xdp_frame **frames, u32 flags)
{
  #line 1129 
  struct xdp_frame *xdpf;
  #line 1130 
  int i;
  #line 1130 
  int port;
  #line 1127 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 1128 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 1130 
  int drops = 0;
  #line 1132 
  if ((long)((flags & 4294967294U) != 0U) != 0L) 
                                                 #line 1133 
                                                 return -22;
  #line 1135 
  i = 0;
  #line 1135 
  while (i < n) {
    {
      #line 1136 
      xdpf = *(frames + (unsigned long)i);
      #line 1137 
      if ((unsigned int)xdpf->len <= 63U) {
        #line 1138 
        xdp_return_frame_rx_napi(xdpf);
        #line 1139 
        drops ++;
        #line 1140 
        goto __Cont;
      }
      #line 1143 
      port = (int)(priv->emac_port + (unsigned int)cpsw->data.dual_emac);
      #line 1144 
      if (cpsw_xdp_tx_frame(priv,xdpf,(struct page *)0,port) != 0) 
                                                                   #line 1145 
                                                                   drops ++;
    }
    #line 1135 
    __Cont: 
            #line 1135 
    i ++;
  }
  #line 1148 
  return n - drops;
}

#line 1152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static void cpsw_ndo_poll_controller(struct net_device *ndev)
{
  #line 1154 
  struct cpsw_common *cpsw = ((struct cpsw_priv *)netdev_priv(ndev))->cpsw;
  #line 1156 
  cpsw_intr_disable(cpsw);
  #line 1157 
  cpsw_rx_interrupt((int)cpsw->irqs_table[0],(void *)cpsw);
  #line 1158 
  cpsw_tx_interrupt((int)cpsw->irqs_table[1],(void *)cpsw);
  #line 1159 
  cpsw_intr_enable(cpsw);
  #line 1160 
  return;
}

#line 1163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static struct net_device_ops cpsw_netdev_ops = {.ndo_open = & cpsw_ndo_open, .ndo_stop = & cpsw_ndo_stop, .ndo_start_xmit = & cpsw_ndo_start_xmit, .ndo_set_rx_mode = & cpsw_ndo_set_rx_mode, .ndo_set_mac_address = & cpsw_ndo_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & cpsw_ndo_ioctl, .ndo_tx_timeout = & cpsw_ndo_tx_timeout, .ndo_vlan_rx_add_vid = & cpsw_ndo_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & cpsw_ndo_vlan_rx_kill_vid, .ndo_poll_controller = & cpsw_ndo_poll_controller, .ndo_setup_tc = & cpsw_ndo_setup_tc, .ndo_set_tx_maxrate = & cpsw_ndo_set_tx_maxrate, .ndo_bpf = & cpsw_ndo_bpf, .ndo_xdp_xmit = & cpsw_ndo_xdp_xmit};
#line 1183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static void cpsw_get_drvinfo(struct net_device *ndev, struct ethtool_drvinfo *info)
{
  #line 1187 
  void *__mptr;
  #line 1186 
  struct cpsw_common *cpsw = ((struct cpsw_priv *)netdev_priv(ndev))->cpsw;
  #line 1187 
  __mptr = (void *)cpsw->dev;
  #line 1187 
  struct platform_device *pdev = ((struct platform_device *)(__mptr + 18446744073709551600U));
  #line 1189 
  strlcpy((char *)(& info->driver),(char *)"cpsw",32UL);
  #line 1190 
  strlcpy((char *)(& info->version),(char *)"1.0",32UL);
  #line 1191 
  strlcpy((char *)(& info->bus_info),pdev->name,32UL);
  #line 1192 
  return;
}

#line 1194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_set_pauseparam(struct net_device *ndev, struct ethtool_pauseparam *pause)
{
  #line 1198 
  bool link;
  #line 1197 
  struct cpsw_priv *priv = netdev_priv(ndev);
  #line 1200 
  priv->rx_pause = (_Bool)(pause->rx_pause != 0U);
  #line 1201 
  priv->tx_pause = (_Bool)(pause->tx_pause != 0U);
  {
    #line 1203 
    struct cpsw_slave *slave;
    #line 1203 
    int n;
    #line 1203 
    struct cpsw_common *cpsw = priv->cpsw;
    #line 1203 
    if ((int)cpsw->data.dual_emac != 0) 
                                        #line 1203 
                                        _cpsw_adjust_link(cpsw->slaves + (unsigned long)priv->emac_port,priv,& link);
    else {
      #line 1203 
      n = (int)cpsw->data.slaves;
      #line 1203 
      slave = cpsw->slaves;
      #line 1203 
      while (n != 0) {
        #line 1203 
        struct cpsw_slave *tmp_0;
        #line 1203 
        ;
        #line 1203 
        tmp_0 = slave;
        #line 1203 
        slave ++;
        #line 1203 
        ;
        #line 1203 
        _cpsw_adjust_link(tmp_0,priv,& link);
        #line 1203 
        n --;
      }
    }
  }
  #line 1204 
  return 0;
}

#line 1207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_set_channels(struct net_device *ndev, struct ethtool_channels *chs)
{
  #line 1210 
  return cpsw_set_channels_common(ndev,chs,& cpsw_rx_handler);
}

#line 1213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static struct ethtool_ops cpsw_ethtool_ops = {.get_drvinfo = & cpsw_get_drvinfo, .get_regs_len = & cpsw_get_regs_len, .get_regs = & cpsw_get_regs, .get_wol = & cpsw_get_wol, .set_wol = & cpsw_set_wol, .get_msglevel = & cpsw_get_msglevel, .set_msglevel = & cpsw_set_msglevel, .nway_reset = & cpsw_nway_reset, .get_link = & ethtool_op_get_link, .get_coalesce = & cpsw_get_coalesce, .set_coalesce = & cpsw_set_coalesce, .get_ringparam = & cpsw_get_ringparam, .set_ringparam = & cpsw_set_ringparam, .get_pauseparam = & cpsw_get_pauseparam, .set_pauseparam = & cpsw_set_pauseparam, .get_strings = & cpsw_get_strings, .get_ethtool_stats = & cpsw_get_ethtool_stats, .begin = & cpsw_ethtool_op_begin, .complete = & cpsw_ethtool_op_complete, .get_sset_count = & cpsw_get_sset_count, .get_channels = & cpsw_get_channels, .set_channels = & cpsw_set_channels, .get_ts_info = & cpsw_get_ts_info, .get_eee = & cpsw_get_eee, .set_eee = & cpsw_set_eee, .get_link_ksettings = & cpsw_get_link_ksettings, .set_link_ksettings = & cpsw_set_link_ksettings};
#line 1243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_probe_dt(struct cpsw_platform_data *data, struct platform_device *pdev)
{
  #line 1247 
  struct device_node *slave_node;
  #line 1248 
  int ret;
  #line 1249 
  u32 prop;
  #line 1246 
  struct device_node *node = pdev->dev.of_node;
  #line 1248 
  int i = 0;
  #line 1251 
  if (node == (struct device_node *)0) 
                                       #line 1252 
                                       return -22;
  #line 1254 
  if (of_property_read_u32(node,(char *)"slaves",& prop) != 0) {
    #line 1255 
    _dev_err(& pdev->dev,(char *)"Missing slaves property in the DT.\n");
    #line 1256 
    return -22;
  }
  #line 1258 
  data->slaves = prop;
  #line 1260 
  if (of_property_read_u32(node,(char *)"active_slave",& prop) != 0) {
    #line 1261 
    _dev_err(& pdev->dev,(char *)"Missing active_slave property in the DT.\n");
    #line 1262 
    return -22;
  }
  #line 1264 
  data->active_slave = prop;
  #line 1266 
  data->slave_data = (struct cpsw_slave_data *)cif_devm_kcalloc(& pdev->dev,(unsigned long)data->slaves,112UL,3264U);
  #line 1270 
  if (data->slave_data == (struct cpsw_slave_data *)0) 
                                                       #line 1271 
                                                       return -12;
  #line 1273 
  if (of_property_read_u32(node,(char *)"cpdma_channels",& prop) != 0) {
    #line 1274 
    _dev_err(& pdev->dev,(char *)"Missing cpdma_channels property in the DT.\n");
    #line 1275 
    return -22;
  }
  #line 1277 
  data->channels = prop;
  #line 1279 
  if (of_property_read_u32(node,(char *)"ale_entries",& prop) != 0) {
    #line 1280 
    _dev_err(& pdev->dev,(char *)"Missing ale_entries property in the DT.\n");
    #line 1281 
    return -22;
  }
  #line 1283 
  data->ale_entries = prop;
  #line 1285 
  if (of_property_read_u32(node,(char *)"bd_ram_size",& prop) != 0) {
    #line 1286 
    _dev_err(& pdev->dev,(char *)"Missing bd_ram_size property in the DT.\n");
    #line 1287 
    return -22;
  }
  #line 1289 
  data->bd_ram_size = prop;
  #line 1291 
  if (of_property_read_u32(node,(char *)"mac_control",& prop) != 0) {
    #line 1292 
    _dev_err(& pdev->dev,(char *)"Missing mac_control property in the DT.\n");
    #line 1293 
    return -22;
  }
  #line 1295 
  data->mac_control = prop;
  #line 1297 
  if ((int)of_property_read_bool(node,(char *)"dual_emac") != 0) 
                                                                 #line 1298 
                                                                 data->dual_emac = (_Bool)1;
  #line 1303 
  ret = of_platform_populate(node,(struct of_device_id *)0,(struct of_dev_auxdata *)0,& pdev->dev);
  #line 1305 
  if (ret != 0) 
                #line 1306 
                _dev_warn(& pdev->dev,(char *)"Doesn\'t have any child node\n");
  #line 1308 
  slave_node = of_get_next_available_child(node,(struct device_node *)0);
  #line 1308 
  while (slave_node != (struct device_node *)0) {
    {
      #line 1311 
      int lenp;
      #line 1312 
      __be32 *parp;
      #line 1309 
      struct cpsw_slave_data *slave_data = data->slave_data + (unsigned long)i;
      #line 1310 
      void *mac_addr = (void *)0;
      #line 1315 
      if (! of_node_name_eq(slave_node,(char *)"slave")) 
                                                         #line 1316 
                                                         goto __Cont;
      #line 1318 
      slave_data->ifphy = devm_of_phy_get(& pdev->dev,slave_node,(char *)0);
      #line 1328 
      slave_data->slave_node = slave_node;
      #line 1329 
      slave_data->phy_node = of_parse_phandle(slave_node,(char *)"phy-handle",0);
      #line 1331 
      parp = (__be32 *)of_get_property(slave_node,(char *)"phy_id",& lenp);
      #line 1332 
      if (slave_data->phy_node != (struct device_node *)0) {
        #line 1333 
        bool branch;
        #line 1333 
        struct _ddebug __UNIQUE_ID_ddebug505 = {.modname = (char *)"ti_cpsw", .function = (char *)"cpsw_probe_dt", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c", .format = (char *)"slave[%d] using phy-handle=\"%pOF\"\n", .lineno = (unsigned int)1333U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1333 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug505.key.dd_key_false.key,(_Bool)0);
        #line 1333 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 1333 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug505,& pdev->dev,(char *)"slave[%d] using phy-handle=\"%pOF\"\n",i,slave_data->phy_node);
      }
      else {
        #line 1336 
        if ((int)of_phy_is_fixed_link(slave_node) != 0) {
          #line 1340 
          ret = of_phy_register_fixed_link(slave_node);
          #line 1341 
          if (ret != 0) {
            #line 1342 
            if (ret != -517) 
                             #line 1343 
                             _dev_err(& pdev->dev,(char *)"failed to register fixed-link phy: %d\n",ret);
            #line 1344 
            goto err_node_put;
          }
          #line 1346 
          slave_data->phy_node = of_node_get(slave_node);
        }
        else 
          #line 1347 
          if (parp != (__be32 *)0U) {
            #line 1348 
            u32 phyid;
            #line 1349 
            struct device_node *mdio_node;
            #line 1350 
            struct platform_device *mdio;
            #line 1352 
            if (lenp != 8) {
              #line 1353 
              _dev_err(& pdev->dev,(char *)"Invalid slave[%d] phy_id property\n",i);
              #line 1354 
              goto no_phy_slave;
            }
            #line 1356 
            mdio_node = of_find_node_by_phandle(__be32_to_cpup(parp));
            #line 1357 
            phyid = __be32_to_cpup(parp + 1U);
            #line 1358 
            mdio = of_find_device_by_node(mdio_node);
            #line 1359 
            of_node_put(mdio_node);
            #line 1360 
            if (mdio == (struct platform_device *)0) {
              #line 1361 
              _dev_err(& pdev->dev,(char *)"Missing mdio platform device\n");
              #line 1362 
              ret = -22;
              #line 1363 
              goto err_node_put;
            }
            #line 1365 
            snprintf((char *)(& slave_data->phy_id),61UL,(char *)"%s:%02x",mdio->name,phyid);
            #line 1367 
            put_device(& mdio->dev);
          }
          else {
            #line 1369 
            _dev_err(& pdev->dev,(char *)"No slave[%d] phy_id, phy-handle, or fixed-link property\n",i);
            #line 1372 
            goto no_phy_slave;
          }
      }
      #line 1374 
      ret = of_get_phy_mode(slave_node,& slave_data->phy_if);
      #line 1375 
      if (ret != 0) {
        #line 1376 
        _dev_err(& pdev->dev,(char *)"Missing or malformed slave[%d] phy-mode property\n",i);
        #line 1378 
        goto err_node_put;
      }
      #line 1381 
      no_phy_slave: 
                    #line 1381 
      ;
      #line 1382 
      mac_addr = of_get_mac_address(slave_node);
      #line 1383 
      if (IS_ERR_2(mac_addr)) {
        #line 1386 
        ret = ti_cm_get_macid(& pdev->dev,i,(u8 *)(& slave_data->mac_addr));
        #line 1388 
        if (ret != 0) 
                      #line 1389 
                      goto err_node_put;
      }
      else 
           #line 1384 
           ether_addr_copy((u8 *)(& slave_data->mac_addr),(u8 *)mac_addr);
      #line 1391 
      if ((int)data->dual_emac != 0) {
        #line 1392 
        if (of_property_read_u32(slave_node,(char *)"dual_emac_res_vlan",& prop) != 0) {
          #line 1394 
          _dev_err(& pdev->dev,(char *)"Missing dual_emac_res_vlan in DT.\n");
          #line 1395 
          slave_data->dual_emac_res_vlan = (unsigned short)((unsigned int)((unsigned short)i) + 1U);
          #line 1396 
          _dev_err(& pdev->dev,(char *)"Using %d as Reserved VLAN for %d slave\n",(int)slave_data->dual_emac_res_vlan,i);
        }
        else 
             #line 1399 
             slave_data->dual_emac_res_vlan = (unsigned short)prop;
      }
      #line 1403 
      i ++;
      #line 1404 
      if (data->slaves == (unsigned int)i) {
        #line 1405 
        ret = 0;
        #line 1406 
        goto err_node_put;
      }
    }
    #line 1308 
    __Cont: 
            #line 1308 
    slave_node = of_get_next_available_child(node,slave_node);
  }
  #line 1410 
  return 0;
  #line 1412 
  err_node_put: 
                #line 1412 
  ;
  #line 1413 
  of_node_put(slave_node);
  #line 1414 
  return ret;
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static void cpsw_remove_dt(struct platform_device *pdev)
{
  #line 1422 
  struct device_node *slave_node;
  #line 1419 
  struct cpsw_common *cpsw = platform_get_drvdata(pdev);
  #line 1420 
  struct cpsw_platform_data *data = & cpsw->data;
  #line 1421 
  struct device_node *node = pdev->dev.of_node;
  #line 1423 
  int i = 0;
  #line 1425 
  slave_node = of_get_next_available_child(node,(struct device_node *)0);
  #line 1425 
  while (slave_node != (struct device_node *)0) {
    {
      #line 1426 
      struct cpsw_slave_data *slave_data = data->slave_data + (unsigned long)i;
      #line 1428 
      if (! of_node_name_eq(slave_node,(char *)"slave")) 
                                                         #line 1429 
                                                         goto __Cont;
      #line 1431 
      if ((int)of_phy_is_fixed_link(slave_node) != 0) 
                                                      #line 1432 
                                                      of_phy_deregister_fixed_link(slave_node);
      #line 1434 
      of_node_put(slave_data->phy_node);
      #line 1436 
      i ++;
      #line 1437 
      if (data->slaves == (unsigned int)i) {
        #line 1438 
        of_node_put(slave_node);
        #line 1439 
        break;
      }
    }
    #line 1425 
    __Cont: 
            #line 1425 
    slave_node = of_get_next_available_child(node,slave_node);
  }
  #line 1443 
  of_platform_depopulate(& pdev->dev);
  #line 1444 
  return;
}

#line 1446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_probe_dual_emac(struct cpsw_priv *priv)
{
  #line 1450 
  struct net_device *ndev;
  #line 1451 
  struct cpsw_priv *priv_sl2;
  #line 1448 
  struct cpsw_common *cpsw = priv->cpsw;
  #line 1449 
  struct cpsw_platform_data *data = & cpsw->data;
  #line 1452 
  int ret = 0;
  #line 1454 
  ndev = devm_alloc_etherdev_mqs(cpsw->dev,704,8U,8U);
  #line 1456 
  if (ndev == (struct net_device *)0) {
    #line 1457 
    _dev_err(cpsw->dev,(char *)"cpsw: error allocating net_device\n");
    #line 1458 
    return -12;
  }
  #line 1461 
  priv_sl2 = (struct cpsw_priv *)netdev_priv(ndev);
  #line 1462 
  priv_sl2->cpsw = cpsw;
  #line 1463 
  priv_sl2->ndev = ndev;
  #line 1464 
  priv_sl2->dev = & ndev->dev;
  #line 1465 
  priv_sl2->msg_enable = netif_msg_init(debug_level,32767);
  #line 1467 
  if ((int)is_valid_ether_addr((u8 *)(& (data->slave_data + 1U)->mac_addr)) != 0) {
    #line 1468 
    memcpy((void *)(& priv_sl2->mac_addr),(void *)(& (data->slave_data + 1U)->mac_addr),6UL);
    #line 1470 
    _dev_info(cpsw->dev,(char *)"cpsw: Detected MACID = %pM\n",(u8 *)(& priv_sl2->mac_addr));
  }
  else {
    #line 1473 
    eth_random_addr((u8 *)(& priv_sl2->mac_addr));
    #line 1474 
    _dev_info(cpsw->dev,(char *)"cpsw: Random MACID = %pM\n",(u8 *)(& priv_sl2->mac_addr));
  }
  #line 1477 
  memcpy((void *)ndev->dev_addr,(void *)(& priv_sl2->mac_addr),6UL);
  #line 1479 
  priv_sl2->emac_port = 1U;
  #line 1480 
  (cpsw->slaves + 1U)->ndev = ndev;
  #line 1481 
  ndev->features |= 768ULL;
  #line 1483 
  ndev->netdev_ops = & cpsw_netdev_ops;
  #line 1484 
  ndev->ethtool_ops = & cpsw_ethtool_ops;
  #line 1487 
  ndev->dev.parent = cpsw->dev;
  #line 1488 
  ndev->dev.of_node = ((cpsw->slaves + 1U)->data)->slave_node;
  #line 1489 
  ret = cif_register_netdev(ndev);
  #line 1490 
  if (ret != 0) 
                #line 1491 
                _dev_err(cpsw->dev,(char *)"cpsw: error registering net device\n");
  #line 1493 
  return ret;
}

#line 1496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static struct of_device_id cpsw_of_mtable[5U] = {{.compatible = {(char)'t', (char)'i', (char)',', (char)'c', (char)'p', (char)'s', (char)'w'}}, {.compatible = {(char)'t', (char)'i', (char)',', (char)'a', (char)'m', (char)'3', (char)'3', (char)'5', (char)'x', (char)'-', (char)'c', (char)'p', (char)'s', (char)'w'}}, {.compatible = {(char)'t', (char)'i', (char)',', (char)'a', (char)'m', (char)'4', (char)'3', (char)'7', (char)'2', (char)'-', (char)'c', (char)'p', (char)'s', (char)'w'}}, {.compatible = {(char)'t', (char)'i', (char)',', (char)'d', (char)'r', (char)'a', (char)'7', (char)'-', (char)'c', (char)'p', (char)'s', (char)'w'}}};
#line 1503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
struct of_device_id __mod_of__cpsw_of_mtable_device_table[5U];
#line 1505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static struct soc_device_attribute cpsw_soc_devices[2U] = {{.family = (char *)"AM33xx", .revision = (char *)"ES1.0"}};
#line 1510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_probe(struct platform_device *pdev)
{
  #line 1602 
  int __UNIQUE_ID___x506;
  #line 1602 
  int tmp_11;
  #line 1513 
  struct clk *clk;
  #line 1514 
  struct cpsw_platform_data *data;
  #line 1515 
  struct net_device *ndev;
  #line 1516 
  struct cpsw_priv *priv;
  #line 1517 
  void *ss_regs;
  #line 1518 
  struct resource *ss_res;
  #line 1519 
  struct gpio_descs *mode;
  #line 1520 
  struct soc_device_attribute *soc;
  #line 1521 
  struct cpsw_common *cpsw;
  #line 1522 
  int ch;
  #line 1523 
  int irq;
  #line 1658 
  int (*tmp_19)(struct napi_struct *, int );
  #line 1661 
  int (*tmp_20)(struct napi_struct *, int );
  #line 1512 
  struct device *dev = & pdev->dev;
  #line 1522 
  int ret = 0;
  #line 1525 
  cpsw = (struct cpsw_common *)cif_devm_kzalloc_1(dev,1304UL,3264U);
  #line 1526 
  if (cpsw == (struct cpsw_common *)0) 
                                       #line 1527 
                                       return -12;
  #line 1529 
  platform_set_drvdata(pdev,(void *)cpsw);
  #line 1530 
  cpsw_slave_index = & cpsw_slave_index_priv;
  #line 1532 
  cpsw->dev = dev;
  #line 1534 
  mode = devm_gpiod_get_array_optional(dev,(char *)"mode",(enum gpiod_flags)GPIOD_OUT_LOW);
  #line 1535 
  if ((int)IS_ERR_2((void *)mode) != 0) {
    #line 1536 
    ret = (int)PTR_ERR_2((void *)mode);
    #line 1537 
    _dev_err(dev,(char *)"gpio request failed, ret %d\n",ret);
    #line 1538 
    return ret;
  }
  #line 1541 
  clk = devm_clk_get(dev,(char *)"fck");
  #line 1542 
  if ((int)IS_ERR_2((void *)clk) != 0) {
    #line 1543 
    ret = (int)PTR_ERR_2((void *)clk);
    #line 1544 
    _dev_err(dev,(char *)"fck is not found %d\n",ret);
    #line 1545 
    return ret;
  }
  #line 1547 
  cpsw->bus_freq_mhz = (unsigned int)(clk_get_rate(clk) / 1000000UL);
  #line 1549 
  ss_res = platform_get_resource(pdev,512U,0U);
  #line 1550 
  ss_regs = devm_ioremap_resource(dev,ss_res);
  #line 1551 
  if ((int)IS_ERR_2(ss_regs) != 0) {
    #line 1552 
    return (int)PTR_ERR_2(ss_regs);
  }
  #line 1553 
  cpsw->regs = (struct cpsw_ss_regs *)ss_regs;
  #line 1555 
  cpsw->wr_regs = (struct cpsw_wr_regs *)devm_platform_ioremap_resource(pdev,1U);
  #line 1556 
  if ((int)IS_ERR_2((void *)cpsw->wr_regs) != 0) {
    #line 1557 
    return (int)PTR_ERR_2((void *)cpsw->wr_regs);
  }
  #line 1560 
  irq = platform_get_irq(pdev,1U);
  #line 1561 
  if (irq < 0) 
               #line 1562 
               return irq;
  #line 1563 
  cpsw->irqs_table[0] = (unsigned int)irq;
  #line 1566 
  irq = platform_get_irq(pdev,2U);
  #line 1567 
  if (irq < 0) 
               #line 1568 
               return irq;
  #line 1569 
  cpsw->irqs_table[1] = (unsigned int)irq;
  #line 1574 
  cif_pm_runtime_enable(dev);
  #line 1579 
  ret = pm_runtime_get_sync(dev);
  #line 1580 
  if (ret < 0) {
    #line 1581 
    pm_runtime_put_noidle_1(dev);
    #line 1582 
    goto clean_runtime_disable_ret;
  }
  #line 1585 
  ret = cpsw_probe_dt(& cpsw->data,pdev);
  #line 1586 
  if (ret != 0) 
                #line 1587 
                goto clean_dt_ret;
  #line 1589 
  soc = soc_device_match((struct soc_device_attribute *)(& cpsw_soc_devices));
  #line 1590 
  if (soc != (struct soc_device_attribute *)0) 
                                               #line 1591 
                                               cpsw->quirk_irq = (_Bool)1;
  #line 1593 
  data = & cpsw->data;
  #line 1594 
  cpsw->slaves = (struct cpsw_slave *)cif_devm_kcalloc(dev,(unsigned long)data->slaves,56UL,3264U);
  #line 1597 
  if (cpsw->slaves == (struct cpsw_slave *)0) {
    #line 1598 
    ret = -12;
    #line 1599 
    goto clean_dt_ret;
  }
  {
    #line 1602 
    __UNIQUE_ID___x506 = rx_packet_max;
    #line 1602 
    int __UNIQUE_ID___y507 = 1526;
    #line 1602 
    if (__UNIQUE_ID___x506 > __UNIQUE_ID___y507) 
                                                 #line 1602 
                                                 tmp_11 = __UNIQUE_ID___x506; else 
                                                                    #line 1602 
                                                                    tmp_11 = __UNIQUE_ID___y507;
    }
  #line 1602 
  cpsw->rx_packet_max = tmp_11;
  #line 1603 
  cpsw->descs_pool_size = descs_pool_size;
  #line 1605 
  ret = cpsw_init_common(cpsw,ss_regs,ale_ageout,ss_res->start + 8192ULL,descs_pool_size);
  #line 1608 
  if (ret != 0) 
                #line 1609 
                goto clean_dt_ret;
  #line 1611 
  if ((int)cpsw->quirk_irq != 0) 
                                 #line 1611 
                                 ch = 0; else 
                                              #line 1611 
                                              ch = 7;
  #line 1612 
  cpsw->txv[0].ch = cpdma_chan_create(cpsw->dma,ch,& cpsw_tx_handler,0);
  #line 1613 
  if ((int)IS_ERR_2((void *)cpsw->txv[0].ch) != 0) {
    #line 1614 
    _dev_err(dev,(char *)"error initializing tx dma channel\n");
    #line 1615 
    ret = (int)PTR_ERR_2((void *)cpsw->txv[0].ch);
    #line 1616 
    goto clean_cpts;
  }
  #line 1619 
  cpsw->rxv[0].ch = cpdma_chan_create(cpsw->dma,0,& cpsw_rx_handler,1);
  #line 1620 
  if ((int)IS_ERR_2((void *)cpsw->rxv[0].ch) != 0) {
    #line 1621 
    _dev_err(dev,(char *)"error initializing rx dma channel\n");
    #line 1622 
    ret = (int)PTR_ERR_2((void *)cpsw->rxv[0].ch);
    #line 1623 
    goto clean_cpts;
  }
  #line 1625 
  cpsw_split_res(cpsw);
  #line 1628 
  ndev = devm_alloc_etherdev_mqs(dev,704,8U,8U);
  #line 1630 
  if (ndev == (struct net_device *)0) {
    #line 1631 
    _dev_err(dev,(char *)"error allocating net_device\n");
    #line 1632 
    goto clean_cpts;
  }
  #line 1635 
  priv = (struct cpsw_priv *)netdev_priv(ndev);
  #line 1636 
  priv->cpsw = cpsw;
  #line 1637 
  priv->ndev = ndev;
  #line 1638 
  priv->dev = dev;
  #line 1639 
  priv->msg_enable = netif_msg_init(debug_level,32767);
  #line 1640 
  priv->emac_port = 0U;
  #line 1642 
  if ((int)is_valid_ether_addr((u8 *)(& (data->slave_data)->mac_addr)) != 0) {
    #line 1643 
    memcpy((void *)(& priv->mac_addr),(void *)(& (data->slave_data)->mac_addr),6UL);
    #line 1644 
    _dev_info(dev,(char *)"Detected MACID = %pM\n",(u8 *)(& priv->mac_addr));
  }
  else {
    #line 1646 
    eth_random_addr((u8 *)(& priv->mac_addr));
    #line 1647 
    _dev_info(dev,(char *)"Random MACID = %pM\n",(u8 *)(& priv->mac_addr));
  }
  #line 1650 
  memcpy((void *)ndev->dev_addr,(void *)(& priv->mac_addr),6UL);
  #line 1652 
  (cpsw->slaves)->ndev = ndev;
  #line 1654 
  ndev->features |= 768ULL;
  #line 1656 
  ndev->netdev_ops = & cpsw_netdev_ops;
  #line 1657 
  ndev->ethtool_ops = & cpsw_ethtool_ops;
  #line 1658 
  if ((int)cpsw->quirk_irq != 0) 
                                 #line 1658 
                                 tmp_19 = & cpsw_rx_poll; else 
                                                               #line 1658 
                                                               tmp_19 = & cpsw_rx_mq_poll;
  #line 1658 
  ;
  #line 1658 
  ;
  #line 1658 
  netif_napi_add(ndev,& cpsw->napi_rx,tmp_19,64);
  #line 1661 
  if ((int)cpsw->quirk_irq != 0) 
                                 #line 1661 
                                 tmp_20 = & cpsw_tx_poll; else 
                                                               #line 1661 
                                                               tmp_20 = & cpsw_tx_mq_poll;
  #line 1661 
  ;
  #line 1661 
  ;
  #line 1661 
  netif_tx_napi_add(ndev,& cpsw->napi_tx,tmp_20,64);
  #line 1666 
  ndev->dev.parent = dev;
  #line 1667 
  ndev->dev.of_node = ((cpsw->slaves)->data)->slave_node;
  #line 1668 
  ret = cif_register_netdev(ndev);
  #line 1669 
  if (ret != 0) {
    #line 1670 
    _dev_err(dev,(char *)"error registering net device\n");
    #line 1671 
    ret = -19;
    #line 1672 
    goto clean_cpts;
  }
  #line 1675 
  if ((int)cpsw->data.dual_emac != 0) {
    #line 1676 
    ret = cpsw_probe_dual_emac(priv);
    #line 1677 
    if (ret != 0) {
      #line 1678 
      if ((priv->msg_enable & 2U) != 0U) {
        #line 1678 
        if (net_ratelimit() != 0) 
                                  #line 1678 
                                  _dev_err(priv->dev,(char *)"error probe slave 2 emac interface\n");
      }
      #line 1679 
      goto clean_unregister_netdev_ret;
    }
  }
  #line 1690 
  ;
  #line 1690 
  ;
  #line 1690 
  ;
  #line 1690 
  ret = devm_request_irq(dev,cpsw->irqs_table[0],& cpsw_rx_interrupt,0UL,dev_name(dev),(void *)cpsw);
  #line 1692 
  if (ret < 0) {
    #line 1693 
    _dev_err(dev,(char *)"error attaching irq (%d)\n",ret);
    #line 1694 
    goto clean_unregister_netdev_ret;
  }
  #line 1698 
  ;
  #line 1698 
  ;
  #line 1698 
  ;
  #line 1698 
  ret = devm_request_irq(dev,cpsw->irqs_table[1],& cpsw_tx_interrupt,0UL,dev_name(& pdev->dev),(void *)cpsw);
  #line 1700 
  if (ret < 0) {
    #line 1701 
    _dev_err(dev,(char *)"error attaching irq (%d)\n",ret);
    #line 1702 
    goto clean_unregister_netdev_ret;
  }
  #line 1705 
  if ((priv->msg_enable & 2U) != 0U) {
    #line 1705 
    if (net_ratelimit() != 0) 
                              #line 1705 
                              _dev_notice(priv->dev,(char *)"initialized device (regs %pa, irq %d, pool size %d)\n",& ss_res->start,cpsw->irqs_table[0],descs_pool_size);
  }
  #line 1709 
  pm_runtime_put(& pdev->dev);
  #line 1711 
  return 0;
  #line 1713 
  clean_unregister_netdev_ret: 
                               #line 1713 
  ;
  #line 1714 
  cif_unregister_netdev(ndev);
  #line 1715 
  clean_cpts: 
              #line 1715 
  ;
  #line 1716 
  cpts_release(cpsw->cpts);
  #line 1717 
  cpdma_ctlr_destroy(cpsw->dma);
  #line 1718 
  clean_dt_ret: 
                #line 1718 
  ;
  #line 1719 
  cpsw_remove_dt(pdev);
  #line 1720 
  pm_runtime_put_sync(& pdev->dev);
  #line 1721 
  clean_runtime_disable_ret: 
                             #line 1721 
  ;
  #line 1722 
  cif_pm_runtime_disable(& pdev->dev);
  #line 1723 
  return ret;
}

#line 1726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_remove(struct platform_device *pdev)
{
  #line 1729 
  int i;
  #line 1729 
  int ret;
  #line 1728 
  struct cpsw_common *cpsw = platform_get_drvdata(pdev);
  #line 1731 
  ret = pm_runtime_get_sync(& pdev->dev);
  #line 1732 
  if (ret < 0) {
    #line 1733 
    pm_runtime_put_noidle_1(& pdev->dev);
    #line 1734 
    return ret;
  }
  #line 1737 
  i = 0;
  #line 1737 
  while (cpsw->data.slaves > (unsigned int)i) {
    #line 1738 
    if ((cpsw->slaves + (unsigned long)i)->ndev != (struct net_device *)0) 
      #line 1739 
      cif_unregister_netdev((cpsw->slaves + (unsigned long)i)->ndev);
    #line 1737 
    i ++;
  }
  #line 1741 
  cpts_release(cpsw->cpts);
  #line 1742 
  cpdma_ctlr_destroy(cpsw->dma);
  #line 1743 
  cpsw_remove_dt(pdev);
  #line 1744 
  pm_runtime_put_sync(& pdev->dev);
  #line 1745 
  cif_pm_runtime_disable(& pdev->dev);
  #line 1746 
  return 0;
}

#line 1750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_suspend(struct device *dev)
{
  #line 1753 
  int i;
  #line 1752 
  struct cpsw_common *cpsw = dev_get_drvdata(dev);
  #line 1755 
  i = 0;
  #line 1755 
  while (cpsw->data.slaves > (unsigned int)i) {
    #line 1756 
    if ((cpsw->slaves + (unsigned long)i)->ndev != (struct net_device *)0) {
      #line 1757 
      if ((int)netif_running((cpsw->slaves + (unsigned long)i)->ndev) != 0) 
        #line 1758 
        cpsw_ndo_stop((cpsw->slaves + (unsigned long)i)->ndev);
    }
    #line 1755 
    i ++;
  }
  #line 1761 
  pinctrl_pm_select_sleep_state(dev);
  #line 1763 
  return 0;
}

#line 1766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_resume(struct device *dev)
{
  #line 1769 
  int i;
  #line 1768 
  struct cpsw_common *cpsw = dev_get_drvdata(dev);
  #line 1772 
  pinctrl_pm_select_default_state(dev);
  #line 1775 
  rtnl_lock();
  #line 1777 
  i = 0;
  #line 1777 
  while (cpsw->data.slaves > (unsigned int)i) {
    #line 1778 
    if ((cpsw->slaves + (unsigned long)i)->ndev != (struct net_device *)0) {
      #line 1779 
      if ((int)netif_running((cpsw->slaves + (unsigned long)i)->ndev) != 0) 
        #line 1780 
        cpsw_ndo_open((cpsw->slaves + (unsigned long)i)->ndev);
    }
    #line 1777 
    i ++;
  }
  #line 1782 
  rtnl_unlock();
  #line 1784 
  return 0;
}

#line 1788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static struct dev_pm_ops cpsw_pm_ops = {.suspend = & cpsw_suspend, .resume = & cpsw_resume, .freeze = & cpsw_suspend, .thaw = & cpsw_resume, .poweroff = & cpsw_suspend, .restore = & cpsw_resume};
#line 1790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static struct platform_driver cpsw_driver = {.probe = & cpsw_probe, .remove = & cpsw_remove, .driver = {.name = (char *)"cpsw", .of_match_table = (struct of_device_id *)(& cpsw_of_mtable), .pm = & cpsw_pm_ops}};
#line 1800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static int cpsw_driver_init(void)
{
  #line 1800 
  return cif___platform_driver_register(& cpsw_driver,& __this_module);
}

#line 1800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw.c"
static void cpsw_driver_exit(void)
{
  #line 1800 
  cif_platform_driver_unregister(& cpsw_driver);
  #line 1801 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
struct platform_driver *emg_alias_cpsw_driver = & cpsw_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
struct dev_pm_ops *emg_alias_cpsw_pm_ops = & cpsw_pm_ops;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int (*emg_alias_eth_validate_addr)(struct net_device *) = & eth_validate_addr;
#line 98 
#line 98 
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1);
#line 100 
#line 100 
void emg_platform_driver_unregister(struct platform_driver *arg0);
#line 101 
#line 101 
void emg_pm_runtime_disable(struct device *arg0);
#line 102 
#line 102 
void emg_pm_runtime_enable(struct device *arg0);
#line 103 
#line 103 
int emg_register_netdev(struct net_device *arg0);
#line 104 
#line 104 
void emg_unregister_netdev(struct net_device *arg0);
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
void emg_cpsw_driver_exit(void)
{
  #line 109 
  cpsw_driver_exit();
  #line 110 
  return;
}

#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_cpsw_driver_init(void)
{
  #line 113 
  return cpsw_driver_init();
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_wrapper_cpsw_ethtool_op_begin(struct net_device *arg0)
{
  #line 117 
  return cpsw_ethtool_op_begin(arg0);
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
void emg_wrapper_cpsw_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 122 
  cpsw_get_drvinfo(arg0,arg1);
  #line 123 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_wrapper_cpsw_get_regs_len(struct net_device *arg0)
{
  #line 127 
  return cpsw_get_regs_len(arg0);
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_wrapper_cpsw_ndo_open(struct net_device *arg0)
{
  #line 132 
  return cpsw_ndo_open(arg0);
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
void emg_wrapper_cpsw_ndo_poll_controller(struct net_device *arg0)
{
  #line 137 
  cpsw_ndo_poll_controller(arg0);
  #line 138 
  return;
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_wrapper_cpsw_ndo_set_mac_address(struct net_device *arg0, void *arg1)
{
  #line 142 
  return cpsw_ndo_set_mac_address(arg0,arg1);
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
void emg_wrapper_cpsw_ndo_set_rx_mode(struct net_device *arg0)
{
  #line 147 
  cpsw_ndo_set_rx_mode(arg0);
  #line 148 
  return;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
enum netdev_tx emg_wrapper_cpsw_ndo_start_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 152 
  return cpsw_ndo_start_xmit(arg0,arg1);
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_wrapper_cpsw_ndo_stop(struct net_device *arg0)
{
  #line 157 
  return cpsw_ndo_stop(arg0);
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_wrapper_cpsw_ndo_vlan_rx_add_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 162 
  return cpsw_ndo_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),
                               (unsigned short)((int)arg2));
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_wrapper_cpsw_ndo_vlan_rx_kill_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 167 
  return cpsw_ndo_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),
                                (unsigned short)((int)arg2));
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_wrapper_cpsw_ndo_xdp_xmit(struct net_device *arg0, int arg1, struct xdp_frame **arg2, unsigned int arg3)
{
  #line 172 
  return cpsw_ndo_xdp_xmit(arg0,arg1,arg2,arg3);
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_wrapper_cpsw_nway_reset(struct net_device *arg0)
{
  #line 177 
  return cpsw_nway_reset(arg0);
}

#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_wrapper_cpsw_probe(struct platform_device *arg0)
{
  #line 182 
  return cpsw_probe(arg0);
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_wrapper_cpsw_remove(struct platform_device *arg0)
{
  #line 187 
  return cpsw_remove(arg0);
}

#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_wrapper_cpsw_resume(struct device *arg0)
{
  #line 192 
  return cpsw_resume(arg0);
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_wrapper_cpsw_set_channels(struct net_device *arg0, struct ethtool_channels *arg1)
{
  #line 197 
  return cpsw_set_channels(arg0,arg1);
}

#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_wrapper_cpsw_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 202 
  return cpsw_set_pauseparam(arg0,arg1);
}

#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
int emg_wrapper_cpsw_suspend(struct device *arg0)
{
  #line 207 
  return cpsw_suspend(arg0);
}

#line 226  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 229 
  ldv_set_bit(nr,addr);
  #line 230 
  return;
}

#line 233  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 236 
  ldv_clear_bit(nr,addr);
  #line 237 
  return;
}

#line 317  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static long PTR_ERR_2(void *ptr)
{
  #line 320 
  return ldv_ptr_err(ptr);
}

#line 324  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static bool IS_ERR_2(void *ptr)
{
  #line 327 
  return ldv_is_err(ptr);
}

#line 1028  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 1031 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 1035  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1039 
  return emg_register_netdev(dev);
}

#line 1043  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void *cif_devm_kzalloc_1(struct device *dev, size_t size, gfp_t flags)
{
  #line 1046 
  return ldv_devm_kzalloc(size,flags);
}

#line 1050  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void cif_pm_runtime_enable(struct device *dev)
{
  #line 1054 
  emg_pm_runtime_enable(dev);
  #line 1055 
  return;
}

#line 1058  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1062 
  emg_unregister_netdev(dev);
  #line 1063 
  return;
}

#line 1066  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void cif_pm_runtime_disable(struct device *dev)
{
  #line 1070 
  emg_pm_runtime_disable(dev);
  #line 1071 
  return;
}

#line 1074  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2)
{
  #line 1078 
  return emg___platform_driver_register(ldv_func_arg1,ldv_func_arg2);
}

#line 1082  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1)
{
  #line 1086 
  emg_platform_driver_unregister(ldv_func_arg1);
  #line 1087 
  return;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u64(u64 n)
{
  #line 32 
  return fls64(n) + -1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __order_base_2(unsigned long n)
{
  #line 200 
  int tmp_13;
  #line 200 
  int tmp_45;
  #line 200 
  int tmp_46;
  #line 200 
  int tmp_14;
  #line 200 
  int tmp_15;
  #line 200 
  int tmp_47;
  #line 200 
  int tmp_48;
  #line 200 
  int tmp_16;
  #line 200 
  int tmp_17;
  #line 200 
  int tmp_49;
  #line 200 
  int tmp_50;
  #line 200 
  int tmp_18;
  #line 200 
  int tmp_19;
  #line 200 
  int tmp_51;
  #line 200 
  int tmp_52;
  #line 200 
  int tmp_20;
  #line 200 
  int tmp_21;
  #line 200 
  int tmp_53;
  #line 200 
  int tmp_54;
  #line 200 
  int tmp_22;
  #line 200 
  int tmp_23;
  #line 200 
  int tmp_55;
  #line 200 
  int tmp_56;
  #line 200 
  int tmp_24;
  #line 200 
  int tmp_25;
  #line 200 
  int tmp_57;
  #line 200 
  int tmp_58;
  #line 200 
  int tmp_26;
  #line 200 
  int tmp_27;
  #line 200 
  int tmp_59;
  #line 200 
  int tmp_60;
  #line 200 
  int tmp_28;
  #line 200 
  int tmp_29;
  #line 200 
  int tmp_61;
  #line 200 
  int tmp_30;
  #line 200 
  int tmp_63;
  #line 200 
  int tmp;
  #line 200 
  int tmp_31;
  #line 200 
  int tmp_32;
  #line 200 
  int tmp_0;
  #line 200 
  int tmp_1;
  #line 200 
  int tmp_33;
  #line 200 
  int tmp_34;
  #line 200 
  int tmp_2;
  #line 200 
  int tmp_3;
  #line 200 
  int tmp_35;
  #line 200 
  int tmp_36;
  #line 200 
  int tmp_4;
  #line 200 
  int tmp_5;
  #line 200 
  int tmp_37;
  #line 200 
  int tmp_38;
  #line 200 
  int tmp_6;
  #line 200 
  int tmp_7;
  #line 200 
  int tmp_39;
  #line 200 
  int tmp_40;
  #line 200 
  int tmp_8;
  #line 200 
  int tmp_9;
  #line 200 
  int tmp_41;
  #line 200 
  int tmp_42;
  #line 200 
  int tmp_10;
  #line 200 
  int tmp_11;
  #line 200 
  int tmp_43;
  #line 200 
  int tmp_44;
  #line 200 
  int tmp_12;
  #line 200 
  int tmp_64;
  #line 200 
  if (n > 1UL) {
    #line 200 
    if (0 != 0) {
      #line 200 
      if (n + 18446744073709551615UL > 1UL) {
        #line 200 
        if (((unsigned long long)(n + 18446744073709551615UL) & 9223372036854775808ULL) == 0ULL) {
          #line 200 
          if (((unsigned long long)(n + 18446744073709551615UL) & 4611686018427387904ULL) == 0ULL) {
            #line 200 
            if (((unsigned long long)(n + 18446744073709551615UL) & 2305843009213693952ULL) == 0ULL) {
              #line 200 
              if (((unsigned long long)(n + 18446744073709551615UL) & 1152921504606846976ULL) == 0ULL) {
                #line 200 
                if (((unsigned long long)(n + 18446744073709551615UL) & 576460752303423488ULL) == 0ULL) {
                  #line 200 
                  if (((unsigned long long)(n + 18446744073709551615UL) & 288230376151711744ULL) == 0ULL) {
                    #line 200 
                    if (((unsigned long long)(n + 18446744073709551615UL) & 144115188075855872ULL) == 0ULL) {
                      #line 200 
                      if (((unsigned long long)(n + 18446744073709551615UL) & 72057594037927936ULL) == 0ULL) {
                        #line 200 
                        if (((unsigned long long)(n + 18446744073709551615UL) & 36028797018963968ULL) == 0ULL) {
                          #line 200 
                          if (((unsigned long long)(n + 18446744073709551615UL) & 18014398509481984ULL) == 0ULL) {
                            #line 200 
                            if (((unsigned long long)(n + 18446744073709551615UL) & 9007199254740992ULL) == 0ULL) {
                              #line 200 
                              if (((unsigned long long)(n + 18446744073709551615UL) & 4503599627370496ULL) == 0ULL) {
                                #line 200 
                                if (((unsigned long long)(n + 18446744073709551615UL) & 2251799813685248ULL) == 0ULL) {
                                  #line 200 
                                  if (((unsigned long long)(n + 18446744073709551615UL) & 1125899906842624ULL) == 0ULL) {
                                    #line 200 
                                    if (((unsigned long long)(n + 18446744073709551615UL) & 562949953421312ULL) == 0ULL) {
                                      #line 200 
                                      if (((unsigned long long)(n + 18446744073709551615UL) & 281474976710656ULL) == 0ULL) {
                                        #line 200 
                                        if (((unsigned long long)(n + 18446744073709551615UL) & 140737488355328ULL) == 0ULL) {
                                          #line 200 
                                          if (((unsigned long long)(n + 18446744073709551615UL) & 70368744177664ULL) == 0ULL) {
                                            #line 200 
                                            if (((unsigned long long)(n + 18446744073709551615UL) & 35184372088832ULL) == 0ULL) {
                                              #line 200 
                                              if (((unsigned long long)(n + 18446744073709551615UL) & 17592186044416ULL) == 0ULL) {
                                                #line 200 
                                                if (((unsigned long long)(n + 18446744073709551615UL) & 8796093022208ULL) == 0ULL) {
                                                  #line 200 
                                                  if (((unsigned long long)(n + 18446744073709551615UL) & 4398046511104ULL) == 0ULL) {
                                                    #line 200 
                                                    if (((unsigned long long)(n + 18446744073709551615UL) & 2199023255552ULL) == 0ULL) {
                                                      #line 200 
                                                      if (((unsigned long long)(n + 18446744073709551615UL) & 1099511627776ULL) == 0ULL) {
                                                        #line 200 
                                                        if (((unsigned long long)(n + 18446744073709551615UL) & 549755813888ULL) == 0ULL) {
                                                          #line 200 
                                                          if (((unsigned long long)(n + 18446744073709551615UL) & 274877906944ULL) == 0ULL) {
                                                            #line 200 
                                                            if (((unsigned long long)(n + 18446744073709551615UL) & 137438953472ULL) == 0ULL) {
                                                              #line 200 
                                                              if (((unsigned long long)(n + 18446744073709551615UL) & 68719476736ULL) == 0ULL) {
                                                                #line 200 
                                                                if (((unsigned long long)(n + 18446744073709551615UL) & 34359738368ULL) == 0ULL) {
                                                                  #line 200 
                                                                  if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 17179869184ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 8589934592ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 4294967296ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 2147483648ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 1073741824ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 536870912ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 268435456ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 134217728ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 67108864ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 33554432ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 16777216ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 8388608ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 4194304ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 2097152ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 1048576ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 524288ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 262144ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 131072ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 65536ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 32768ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 16384ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 8192ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 4096ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 2048ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 1024ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 512ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 256ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 128ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 64ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 32ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 16ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 8ULL) == 0ULL) {
                                                                    #line 200 
                                                                    if (
                                                                    ((unsigned long long)(n + 18446744073709551615UL) & 4ULL) != 0ULL) 
                                                                    #line 200 
                                                                    tmp = 3; else 
                                                                    #line 200 
                                                                    tmp = 2;
                                                                    #line 200 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_0 = 4;
                                                                    #line 200 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_1 = 5;
                                                                    #line 200 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_2 = 6;
                                                                    #line 200 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_3 = 7;
                                                                    #line 200 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_4 = 8;
                                                                    #line 200 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_5 = 9;
                                                                    #line 200 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_6 = 10;
                                                                    #line 200 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_7 = 11;
                                                                    #line 200 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_8 = 12;
                                                                    #line 200 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_9 = 13;
                                                                    #line 200 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_10 = 14;
                                                                    #line 200 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_11 = 15;
                                                                    #line 200 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_12 = 16;
                                                                    #line 200 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_13 = 17;
                                                                    #line 200 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_14 = 18;
                                                                    #line 200 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_15 = 19;
                                                                    #line 200 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_16 = 20;
                                                                    #line 200 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_17 = 21;
                                                                    #line 200 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_18 = 22;
                                                                    #line 200 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_19 = 23;
                                                                    #line 200 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_20 = 24;
                                                                    #line 200 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_21 = 25;
                                                                    #line 200 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_22 = 26;
                                                                    #line 200 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_23 = 27;
                                                                    #line 200 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_24 = 28;
                                                                    #line 200 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_25 = 29;
                                                                    #line 200 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_26 = 30;
                                                                    #line 200 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_27 = 31;
                                                                    #line 200 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_28 = 32;
                                                                    #line 200 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_29 = 33;
                                                                    #line 200 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 200 
                                                                    tmp_30 = 34;
                                                                    #line 200 
                                                                    tmp_31 = tmp_30;
                                                                  }
                                                                  else 
                                                                    #line 200 
                                                                    tmp_31 = 35;
                                                                  #line 200 
                                                                  tmp_32 = tmp_31;
                                                                }
                                                                else 
                                                                  #line 200 
                                                                  tmp_32 = 36;
                                                                #line 200 
                                                                tmp_33 = tmp_32;
                                                              }
                                                              else 
                                                                   #line 200 
                                                                   tmp_33 = 37;
                                                              #line 200 
                                                              tmp_34 = tmp_33;
                                                            }
                                                            else 
                                                                 #line 200 
                                                                 tmp_34 = 38;
                                                            #line 200 
                                                            tmp_35 = tmp_34;
                                                          }
                                                          else 
                                                               #line 200 
                                                               tmp_35 = 39;
                                                          #line 200 
                                                          tmp_36 = tmp_35;
                                                        }
                                                        else 
                                                             #line 200 
                                                             tmp_36 = 40;
                                                        #line 200 
                                                        tmp_37 = tmp_36;
                                                      }
                                                      else 
                                                           #line 200 
                                                           tmp_37 = 41;
                                                      #line 200 
                                                      tmp_38 = tmp_37;
                                                    }
                                                    else 
                                                         #line 200 
                                                         tmp_38 = 42;
                                                    #line 200 
                                                    tmp_39 = tmp_38;
                                                  }
                                                  else 
                                                       #line 200 
                                                       tmp_39 = 43;
                                                  #line 200 
                                                  tmp_40 = tmp_39;
                                                }
                                                else 
                                                     #line 200 
                                                     tmp_40 = 44;
                                                #line 200 
                                                tmp_41 = tmp_40;
                                              }
                                              else 
                                                   #line 200 
                                                   tmp_41 = 45;
                                              #line 200 
                                              tmp_42 = tmp_41;
                                            }
                                            else 
                                                 #line 200 
                                                 tmp_42 = 46;
                                            #line 200 
                                            tmp_43 = tmp_42;
                                          }
                                          else 
                                               #line 200 
                                               tmp_43 = 47;
                                          #line 200 
                                          tmp_44 = tmp_43;
                                        }
                                        else 
                                             #line 200 
                                             tmp_44 = 48;
                                        #line 200 
                                        tmp_45 = tmp_44;
                                      }
                                      else 
                                           #line 200 
                                           tmp_45 = 49;
                                      #line 200 
                                      tmp_46 = tmp_45;
                                    }
                                    else 
                                         #line 200 
                                         tmp_46 = 50;
                                    #line 200 
                                    tmp_47 = tmp_46;
                                  }
                                  else 
                                       #line 200 
                                       tmp_47 = 51;
                                  #line 200 
                                  tmp_48 = tmp_47;
                                }
                                else 
                                     #line 200 
                                     tmp_48 = 52;
                                #line 200 
                                tmp_49 = tmp_48;
                              }
                              else 
                                   #line 200 
                                   tmp_49 = 53;
                              #line 200 
                              tmp_50 = tmp_49;
                            }
                            else 
                                 #line 200 
                                 tmp_50 = 54;
                            #line 200 
                            tmp_51 = tmp_50;
                          }
                          else 
                               #line 200 
                               tmp_51 = 55;
                          #line 200 
                          tmp_52 = tmp_51;
                        }
                        else 
                             #line 200 
                             tmp_52 = 56;
                        #line 200 
                        tmp_53 = tmp_52;
                      }
                      else 
                           #line 200 
                           tmp_53 = 57;
                      #line 200 
                      tmp_54 = tmp_53;
                    }
                    else 
                         #line 200 
                         tmp_54 = 58;
                    #line 200 
                    tmp_55 = tmp_54;
                  }
                  else 
                       #line 200 
                       tmp_55 = 59;
                  #line 200 
                  tmp_56 = tmp_55;
                }
                else 
                     #line 200 
                     tmp_56 = 60;
                #line 200 
                tmp_57 = tmp_56;
              }
              else 
                   #line 200 
                   tmp_57 = 61;
              #line 200 
              tmp_58 = tmp_57;
            }
            else 
                 #line 200 
                 tmp_58 = 62;
            #line 200 
            tmp_59 = tmp_58;
          }
          else 
               #line 200 
               tmp_59 = 63;
          #line 200 
          tmp_60 = tmp_59;
        }
        else 
             #line 200 
             tmp_60 = 64;
        #line 200 
        tmp_61 = tmp_60;
      }
      else 
           #line 200 
           tmp_61 = 1;
      #line 200 
      tmp_63 = tmp_61;
    }
    else {
      #line 200 
      tmp_63 = __ilog2_u64((unsigned long long)(n + 18446744073709551615UL)) + 1;
    }
    #line 200 
    tmp_64 = tmp_63;
  }
  else 
       #line 200 
       tmp_64 = 0;
  #line 200 
  return tmp_64;
}

#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 644  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ale.i.aux"
static void cif_bitmap_set(unsigned long *map, unsigned int start, unsigned int nbits);
#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 651  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ale.i.aux"
static void cif_bitmap_clear(unsigned long *map, unsigned int start, unsigned int nbits);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ale.i.aux"
static void *ERR_PTR_1(long error);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 28 
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 24 
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25 
#line 25 
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 182 
#line 182 
void add_timer(struct timer_list *);
#line 188 
#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ale.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ale.i.aux"
static void *cif_devm_kzalloc_2(struct device *dev, size_t size, gfp_t flags);
#line 947  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 428  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ale.i.aux"
static void *cif_devm_kmalloc_array(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.h"
#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
int cpsw_ale_vlan_add_modify(struct cpsw_ale *ale, u16 vid, int port_mask, int untag_mask, int reg_mask, int unreg_mask);
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.h"
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
void cpsw_ale_set_unreg_mcast(struct cpsw_ale *ale, int unreg_mcast_mask, bool add);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static int cpsw_ale_get_field(u32 *ale_entry, u32 start, u32 bits)
{
  #line 65 
  int idx;
  #line 67 
  idx = (int)(start / 32U);
  #line 68 
  start -= (unsigned int)(idx * 32);
  #line 69 
  idx = 2 - idx;
  #line 70 
  return (int)((unsigned long)(*(ale_entry + (unsigned long)idx) >> start) & ~ (18446744073709551615UL << bits));
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static void cpsw_ale_set_field(u32 *ale_entry, u32 start, u32 bits, u32 value)
{
  #line 76 
  int idx;
  #line 78 
  value = ~ ((unsigned int)(18446744073709551615UL << bits)) & value;
  #line 79 
  idx = (int)(start / 32U);
  #line 80 
  start -= (unsigned int)(idx * 32);
  #line 81 
  idx = 2 - idx;
  #line 82 
  *(ale_entry + (unsigned long)idx) &= ~ ((unsigned int)(((1UL << bits) + 18446744073709551615UL) << start));
  #line 83 
  *(ale_entry + (unsigned long)idx) |= value << start;
  #line 84 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static int cpsw_ale_get_entry_type(u32 *ale_entry)
{
  #line 107 
  return cpsw_ale_get_field(ale_entry,60U,2U);
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static void cpsw_ale_set_entry_type(u32 *ale_entry, u32 value)
{
  #line 107 
  cpsw_ale_set_field(ale_entry,60U,2U,value);
  #line 108 
  return;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static int cpsw_ale_get_vlan_id(u32 *ale_entry)
{
  #line 108 
  return cpsw_ale_get_field(ale_entry,48U,12U);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static void cpsw_ale_set_vlan_id(u32 *ale_entry, u32 value)
{
  #line 108 
  cpsw_ale_set_field(ale_entry,48U,12U,value);
  #line 109 
  return;
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static void cpsw_ale_set_mcast_state(u32 *ale_entry, u32 value)
{
  #line 109 
  cpsw_ale_set_field(ale_entry,62U,2U,value);
  #line 110 
  return;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static int cpsw_ale_get_port_mask(u32 *ale_entry, u32 bits)
{
  #line 110 
  return cpsw_ale_get_field(ale_entry,66U,bits);
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static void cpsw_ale_set_port_mask(u32 *ale_entry, u32 value, u32 bits)
{
  #line 110 
  cpsw_ale_set_field(ale_entry,66U,bits,value);
  #line 111 
  return;
}

#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static int cpsw_ale_get_super(u32 *ale_entry)
{
  #line 111 
  return cpsw_ale_get_field(ale_entry,65U,1U);
}

#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static void cpsw_ale_set_super(u32 *ale_entry, u32 value)
{
  #line 111 
  cpsw_ale_set_field(ale_entry,65U,1U,value);
  #line 112 
  return;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static int cpsw_ale_get_ucast_type(u32 *ale_entry)
{
  #line 112 
  return cpsw_ale_get_field(ale_entry,62U,2U);
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static void cpsw_ale_set_secure(u32 *ale_entry, u32 value)
{
  #line 115 
  cpsw_ale_set_field(ale_entry,64U,1U,value);
  #line 116 
  return;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static int cpsw_ale_get_vlan_untag_force(u32 *ale_entry, u32 bits)
{
  #line 116 
  return cpsw_ale_get_field(ale_entry,24U,bits);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static void cpsw_ale_set_vlan_untag_force(u32 *ale_entry, u32 value, u32 bits)
{
  #line 116 
  cpsw_ale_set_field(ale_entry,24U,bits,value);
  #line 117 
  return;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static int cpsw_ale_get_vlan_reg_mcast(u32 *ale_entry, u32 bits)
{
  #line 117 
  return cpsw_ale_get_field(ale_entry,16U,bits);
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static void cpsw_ale_set_vlan_reg_mcast(u32 *ale_entry, u32 value, u32 bits)
{
  #line 117 
  cpsw_ale_set_field(ale_entry,16U,bits,value);
  #line 118 
  return;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static int cpsw_ale_get_vlan_unreg_mcast(u32 *ale_entry, u32 bits)
{
  #line 118 
  return cpsw_ale_get_field(ale_entry,8U,bits);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static void cpsw_ale_set_vlan_unreg_mcast(u32 *ale_entry, u32 value, u32 bits)
{
  #line 118 
  cpsw_ale_set_field(ale_entry,8U,bits,value);
  #line 119 
  return;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static int cpsw_ale_get_vlan_member_list(u32 *ale_entry, u32 bits)
{
  #line 119 
  return cpsw_ale_get_field(ale_entry,0U,bits);
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static void cpsw_ale_set_vlan_member_list(u32 *ale_entry, u32 value, u32 bits)
{
  #line 119 
  cpsw_ale_set_field(ale_entry,0U,bits,value);
  #line 120 
  return;
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static int cpsw_ale_get_mcast(u32 *ale_entry)
{
  #line 120 
  return cpsw_ale_get_field(ale_entry,40U,1U);
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static int cpsw_ale_get_vlan_unreg_mcast_idx(u32 *ale_entry)
{
  #line 122 
  return cpsw_ale_get_field(ale_entry,20U,3U);
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static int cpsw_ale_get_vlan_reg_mcast_idx(u32 *ale_entry)
{
  #line 123 
  return cpsw_ale_get_field(ale_entry,44U,3U);
}

#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static void cpsw_ale_get_addr(u32 *ale_entry, u8 *addr)
{
  #line 128 
  int i;
  #line 130 
  i = 0;
  #line 130 
  while (i <= 5) {
    #line 131 
    *(addr + (unsigned long)i) = (unsigned char)cpsw_ale_get_field(ale_entry,(unsigned int)((5 - i) * 8),8U);
    #line 130 
    i ++;
  }
  #line 132 
  return;
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static void cpsw_ale_set_addr(u32 *ale_entry, u8 *addr)
{
  #line 136 
  int i;
  #line 138 
  i = 0;
  #line 138 
  while (i <= 5) {
    #line 139 
    cpsw_ale_set_field(ale_entry,(unsigned int)((5 - i) * 8),8U,(unsigned int)*(addr + (unsigned long)i));
    #line 138 
    i ++;
  }
  #line 140 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
static int cpsw_ale_read(struct cpsw_ale *ale, int idx, u32 *ale_entry)
{
  #line 144 
  int i;
  {
    #line 146 
    int __ret_warn_on = (unsigned long)idx > ale->params.ale_entries;
    #line 146 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 147 
      ldv_inline_asm();
      #line 148 
      ldv_inline_asm();
    }
    #line 146 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 148 
  writel((unsigned int)idx,ale->params.ale_regs + 32U);
  #line 150 
  i = 0;
  #line 150 
  while (i <= 2) {
    #line 151 
    *(ale_entry + (unsigned long)i) = readl(ale->params.ale_regs + ((unsigned long)(i * 4) + (unsigned long)52U));
    #line 150 
    i ++;
  }
  #line 154 
  return idx;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
static int cpsw_ale_write(struct cpsw_ale *ale, int idx, u32 *ale_entry)
{
  #line 159 
  int i;
  {
    #line 161 
    int __ret_warn_on = (unsigned long)idx > ale->params.ale_entries;
    #line 161 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 162 
      ldv_inline_asm();
      #line 163 
      ldv_inline_asm();
    }
    #line 161 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 163 
  i = 0;
  #line 163 
  while (i <= 2) {
    #line 164 
    writel(*(ale_entry + (unsigned long)i),ale->params.ale_regs + ((unsigned long)(i * 4) + (unsigned long)52U));
    #line 163 
    i ++;
  }
  #line 167 
  writel((unsigned int)idx | 2147483648U,ale->params.ale_regs + 32U);
  #line 170 
  return idx;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
static int cpsw_ale_match_addr(struct cpsw_ale *ale, u8 *addr, u16 vid)
{
  #line 175 
  u32 ale_entry[3U];
  #line 176 
  int type;
  #line 176 
  int idx;
  #line 178 
  idx = 0;
  #line 178 
  while ((unsigned long)idx < ale->params.ale_entries) {
    {
      #line 179 
      u8 entry_addr[6U];
      #line 181 
      cpsw_ale_read(ale,idx,(u32 *)(& ale_entry));
      #line 182 
      type = cpsw_ale_get_entry_type((u32 *)(& ale_entry));
      #line 183 
      if (type != 1 && type != 3) 
                                  #line 184 
                                  goto __Cont;
      #line 185 
      ;
      #line 185 
      if (cpsw_ale_get_vlan_id((u32 *)(& ale_entry)) != (int)vid) 
                                                                  #line 186 
                                                                  goto __Cont;
      #line 187 
      cpsw_ale_get_addr((u32 *)(& ale_entry),(u8 *)(& entry_addr));
      #line 188 
      if ((int)ether_addr_equal((u8 *)(& entry_addr),addr) != 0) 
                                                                 #line 189 
                                                                 return idx;
    }
    #line 178 
    __Cont: 
            #line 178 
    idx ++;
  }
  #line 191 
  return -2;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
static int cpsw_ale_match_vlan(struct cpsw_ale *ale, u16 vid)
{
  #line 196 
  u32 ale_entry[3U];
  #line 197 
  int type;
  #line 197 
  int idx;
  #line 199 
  idx = 0;
  #line 199 
  while ((unsigned long)idx < ale->params.ale_entries) {
    {
      #line 200 
      cpsw_ale_read(ale,idx,(u32 *)(& ale_entry));
      #line 201 
      type = cpsw_ale_get_entry_type((u32 *)(& ale_entry));
      #line 202 
      if (type != 2) 
                     #line 203 
                     goto __Cont;
      #line 204 
      ;
      #line 204 
      if (cpsw_ale_get_vlan_id((u32 *)(& ale_entry)) == (int)vid) 
                                                                  #line 205 
                                                                  return idx;
    }
    #line 199 
    __Cont: 
            #line 199 
    idx ++;
  }
  #line 207 
  return -2;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
static int cpsw_ale_match_free(struct cpsw_ale *ale)
{
  #line 212 
  u32 ale_entry[3U];
  #line 213 
  int type;
  #line 213 
  int idx;
  #line 215 
  idx = 0;
  #line 215 
  while ((unsigned long)idx < ale->params.ale_entries) {
    #line 216 
    cpsw_ale_read(ale,idx,(u32 *)(& ale_entry));
    #line 217 
    type = cpsw_ale_get_entry_type((u32 *)(& ale_entry));
    #line 218 
    if (type == 0) 
                   #line 219 
                   return idx;
    #line 215 
    idx ++;
  }
  #line 221 
  return -2;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
static int cpsw_ale_find_ageable(struct cpsw_ale *ale)
{
  #line 226 
  u32 ale_entry[3U];
  #line 227 
  int type;
  #line 227 
  int idx;
  #line 229 
  idx = 0;
  #line 229 
  while ((unsigned long)idx < ale->params.ale_entries) {
    {
      #line 230 
      cpsw_ale_read(ale,idx,(u32 *)(& ale_entry));
      #line 231 
      type = cpsw_ale_get_entry_type((u32 *)(& ale_entry));
      #line 232 
      if (type != 1 && type != 3) 
                                  #line 233 
                                  goto __Cont;
      #line 234 
      if (cpsw_ale_get_mcast((u32 *)(& ale_entry)) != 0) 
                                                         #line 235 
                                                         goto __Cont;
      #line 236 
      type = cpsw_ale_get_ucast_type((u32 *)(& ale_entry));
      #line 237 
      if (type != 0 && type != 2) 
                                  #line 239 
                                  return idx;
    }
    #line 229 
    __Cont: 
            #line 229 
    idx ++;
  }
  #line 241 
  return -2;
}

#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
static void cpsw_ale_flush_mcast(struct cpsw_ale *ale, u32 *ale_entry, int port_mask)
{
  #line 247 
  int mask;
  #line 249 
  mask = cpsw_ale_get_port_mask(ale_entry,ale->port_mask_bits);
  #line 251 
  if ((mask & port_mask) == 0) 
                               #line 252 
                               return;
  #line 253 
  mask = ~ port_mask & mask;
  #line 256 
  if (mask != 0) 
                 #line 257 
                 cpsw_ale_set_port_mask(ale_entry,(unsigned int)mask,ale->port_mask_bits); else 
                                                                    #line 260 
                                                                    cpsw_ale_set_entry_type(ale_entry,0U);
  #line 261 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
int cpsw_ale_flush_multicast(struct cpsw_ale *ale, int port_mask, int vid)
{
  #line 265 
  u32 ale_entry[3U];
  #line 266 
  int ret;
  #line 266 
  int idx;
  #line 268 
  idx = 0;
  #line 268 
  while ((unsigned long)idx < ale->params.ale_entries) {
    {
      #line 269 
      cpsw_ale_read(ale,idx,(u32 *)(& ale_entry));
      #line 270 
      ret = cpsw_ale_get_entry_type((u32 *)(& ale_entry));
      #line 271 
      if (ret != 1 && ret != 3) 
                                #line 272 
                                goto __Cont;
      #line 279 
      if (vid != -1) {
        #line 279 
        ;
        #line 279 
        if (cpsw_ale_get_vlan_id((u32 *)(& ale_entry)) != vid) 
                                                               #line 280 
                                                               goto __Cont;
      }
      #line 282 
      if (cpsw_ale_get_mcast((u32 *)(& ale_entry)) != 0) {
        #line 283 
        u8 addr[6U];
        #line 285 
        if (cpsw_ale_get_super((u32 *)(& ale_entry)) != 0) 
                                                           #line 286 
                                                           goto __Cont;
        #line 288 
        cpsw_ale_get_addr((u32 *)(& ale_entry),(u8 *)(& addr));
        #line 289 
        if (! is_broadcast_ether_addr((u8 *)(& addr))) 
                                                       #line 290 
                                                       cpsw_ale_flush_mcast(ale,(u32 *)(& ale_entry),port_mask);
      }
      #line 293 
      cpsw_ale_write(ale,idx,(u32 *)(& ale_entry));
    }
    #line 268 
    __Cont: 
            #line 268 
    idx ++;
  }
  #line 295 
  return 0;
}

#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
__inline static void cpsw_ale_set_vlan_entry_type(u32 *ale_entry, int flags, u16 vid)
{
  #line 301 
  if (((unsigned long)flags & 8UL) != 0UL) {
    #line 302 
    cpsw_ale_set_entry_type(ale_entry,3U);
    #line 303 
    cpsw_ale_set_vlan_id(ale_entry,(unsigned int)vid);
  }
  else 
       #line 305 
       cpsw_ale_set_entry_type(ale_entry,1U);
  #line 306 
  return;
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
int cpsw_ale_add_ucast(struct cpsw_ale *ale, u8 *addr, int port, int flags, u16 vid)
{
  #line 313 
  int idx;
  #line 323 
  int tmp;
  #line 312 
  u32 ale_entry[3U] = {0U, 0U, 0U};
  #line 315 
  cpsw_ale_set_vlan_entry_type((u32 *)(& ale_entry),flags,(unsigned short)((int)vid));
  #line 317 
  cpsw_ale_set_addr((u32 *)(& ale_entry),addr);
  #line 318 
  cpsw_ale_set_mcast_state((u32 *)(& ale_entry),0U);
  #line 319 
  cpsw_ale_set_secure((u32 *)(& ale_entry),(unsigned int)flags & 1U);
  #line 320 
  cpsw_ale_set_super((u32 *)(& ale_entry),(unsigned int)((unsigned long)flags >> 1) & 1U);
  #line 321 
  cpsw_ale_set_port_mask((u32 *)(& ale_entry),(unsigned int)port,ale->port_num_bits);
  #line 323 
  if (((unsigned long)flags & 8UL) != 0UL) 
                                           #line 323 
                                           tmp = (int)vid; else 
                                                                #line 323 
                                                                tmp = 0;
  #line 323 
  ;
  #line 323 
  ;
  #line 323 
  idx = cpsw_ale_match_addr(ale,addr,(unsigned short)tmp);
  #line 324 
  if (idx < 0) 
               #line 325 
               idx = cpsw_ale_match_free(ale);
  #line 326 
  if (idx < 0) 
               #line 327 
               idx = cpsw_ale_find_ageable(ale);
  #line 328 
  if (idx < 0) 
               #line 329 
               return -12;
  #line 331 
  cpsw_ale_write(ale,idx,(u32 *)(& ale_entry));
  #line 332 
  return 0;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
int cpsw_ale_del_ucast(struct cpsw_ale *ale, u8 *addr, int port, int flags, u16 vid)
{
  #line 339 
  int idx;
  #line 341 
  int tmp;
  #line 338 
  u32 ale_entry[3U] = {0U, 0U, 0U};
  #line 341 
  if (((unsigned long)flags & 8UL) != 0UL) 
                                           #line 341 
                                           tmp = (int)vid; else 
                                                                #line 341 
                                                                tmp = 0;
  #line 341 
  ;
  #line 341 
  ;
  #line 341 
  idx = cpsw_ale_match_addr(ale,addr,(unsigned short)tmp);
  #line 342 
  if (idx < 0) 
               #line 343 
               return -2;
  #line 345 
  cpsw_ale_set_entry_type((u32 *)(& ale_entry),0U);
  #line 346 
  cpsw_ale_write(ale,idx,(u32 *)(& ale_entry));
  #line 347 
  return 0;
}

#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
int cpsw_ale_add_mcast(struct cpsw_ale *ale, u8 *addr, int port_mask, int flags, u16 vid, int mcast_state)
{
  #line 354 
  int idx;
  #line 354 
  int mask;
  #line 356 
  int tmp;
  #line 353 
  u32 ale_entry[3U] = {0U, 0U, 0U};
  #line 356 
  if (((unsigned long)flags & 8UL) != 0UL) 
                                           #line 356 
                                           tmp = (int)vid; else 
                                                                #line 356 
                                                                tmp = 0;
  #line 356 
  ;
  #line 356 
  ;
  #line 356 
  idx = cpsw_ale_match_addr(ale,addr,(unsigned short)tmp);
  #line 357 
  if (idx >= 0) 
                #line 358 
                cpsw_ale_read(ale,idx,(u32 *)(& ale_entry));
  #line 360 
  cpsw_ale_set_vlan_entry_type((u32 *)(& ale_entry),flags,(unsigned short)((int)vid));
  #line 362 
  cpsw_ale_set_addr((u32 *)(& ale_entry),addr);
  #line 363 
  cpsw_ale_set_super((u32 *)(& ale_entry),(unsigned int)((unsigned long)flags >> 2) & 1U);
  #line 364 
  cpsw_ale_set_mcast_state((u32 *)(& ale_entry),(unsigned int)mcast_state);
  #line 366 
  mask = cpsw_ale_get_port_mask((u32 *)(& ale_entry),ale->port_mask_bits);
  #line 368 
  port_mask |= mask;
  #line 369 
  cpsw_ale_set_port_mask((u32 *)(& ale_entry),(unsigned int)port_mask,ale->port_mask_bits);
  #line 372 
  if (idx < 0) 
               #line 373 
               idx = cpsw_ale_match_free(ale);
  #line 374 
  if (idx < 0) 
               #line 375 
               idx = cpsw_ale_find_ageable(ale);
  #line 376 
  if (idx < 0) 
               #line 377 
               return -12;
  #line 379 
  cpsw_ale_write(ale,idx,(u32 *)(& ale_entry));
  #line 380 
  return 0;
}

#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
int cpsw_ale_del_mcast(struct cpsw_ale *ale, u8 *addr, int port_mask, int flags, u16 vid)
{
  #line 388 
  int idx;
  #line 390 
  int tmp;
  #line 386 
  u32 ale_entry[3U] = {0U, 0U, 0U};
  #line 387 
  int mcast_members = 0;
  #line 390 
  if (((unsigned long)flags & 8UL) != 0UL) 
                                           #line 390 
                                           tmp = (int)vid; else 
                                                                #line 390 
                                                                tmp = 0;
  #line 390 
  ;
  #line 390 
  ;
  #line 390 
  idx = cpsw_ale_match_addr(ale,addr,(unsigned short)tmp);
  #line 391 
  if (idx < 0) 
               #line 392 
               return -2;
  #line 394 
  cpsw_ale_read(ale,idx,(u32 *)(& ale_entry));
  #line 396 
  if (port_mask != 0) {
    #line 397 
    mcast_members = cpsw_ale_get_port_mask((u32 *)(& ale_entry),ale->port_mask_bits);
    #line 399 
    mcast_members = ~ port_mask & mcast_members;
  }
  #line 402 
  if (mcast_members != 0) 
                          #line 403 
                          cpsw_ale_set_port_mask((u32 *)(& ale_entry),(unsigned int)mcast_members,ale->port_mask_bits); else 
                                                                    #line 406 
                                                                    cpsw_ale_set_entry_type((u32 *)(& ale_entry),0U);
  #line 408 
  cpsw_ale_write(ale,idx,(u32 *)(& ale_entry));
  #line 409 
  return 0;
}

#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
static void cpsw_ale_set_vlan_mcast(struct cpsw_ale *ale, u32 *ale_entry, int reg_mcast, int unreg_mcast)
{
  #line 416 
  int idx;
  #line 419 
  idx = cpsw_ale_get_vlan_reg_mcast_idx(ale_entry);
  #line 420 
  writel((unsigned int)reg_mcast,ale->params.ale_regs + (unsigned long)((idx + 48) * 4));
  #line 423 
  idx = cpsw_ale_get_vlan_unreg_mcast_idx(ale_entry);
  #line 424 
  writel((unsigned int)unreg_mcast,ale->params.ale_regs + (unsigned long)((idx + 48) * 4));
  #line 425 
  return;
}

#line 427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
static void cpsw_ale_set_vlan_untag(struct cpsw_ale *ale, u32 *ale_entry, u16 vid, int untag_mask)
{
  #line 430 
  cpsw_ale_set_vlan_untag_force(ale_entry,(unsigned int)untag_mask,ale->vlan_field_bits);
  #line 432 
  if (((unsigned long)untag_mask & 1UL) != 0UL) 
                                                #line 433 
                                                cif_bitmap_set(ale->p0_untag_vid_mask,(unsigned int)vid,1U); else 
                                                                    #line 435 
                                                                    cif_bitmap_clear(ale->p0_untag_vid_mask,(unsigned int)vid,1U);
  #line 436 
  return;
}

#line 438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
int cpsw_ale_add_vlan(struct cpsw_ale *ale, u16 vid, int port_mask, int untag, int reg_mcast, int unreg_mcast)
{
  #line 442 
  int idx;
  #line 441 
  u32 ale_entry[3U] = {0U, 0U, 0U};
  #line 444 
  idx = cpsw_ale_match_vlan(ale,(unsigned short)((int)vid));
  #line 445 
  if (idx >= 0) 
                #line 446 
                cpsw_ale_read(ale,idx,(u32 *)(& ale_entry));
  #line 448 
  cpsw_ale_set_entry_type((u32 *)(& ale_entry),2U);
  #line 449 
  cpsw_ale_set_vlan_id((u32 *)(& ale_entry),(unsigned int)vid);
  #line 450 
  cpsw_ale_set_vlan_untag(ale,(u32 *)(& ale_entry),(unsigned short)((int)vid),untag);
  #line 452 
  if (! ale->params.nu_switch_ale) {
    #line 453 
    cpsw_ale_set_vlan_reg_mcast((u32 *)(& ale_entry),(unsigned int)reg_mcast,ale->vlan_field_bits);
    #line 455 
    cpsw_ale_set_vlan_unreg_mcast((u32 *)(& ale_entry),(unsigned int)unreg_mcast,ale->vlan_field_bits);
  }
  else 
       #line 458 
       cpsw_ale_set_vlan_mcast(ale,(u32 *)(& ale_entry),reg_mcast,unreg_mcast);
  #line 460 
  cpsw_ale_set_vlan_member_list((u32 *)(& ale_entry),(unsigned int)port_mask,ale->vlan_field_bits);
  #line 463 
  if (idx < 0) 
               #line 464 
               idx = cpsw_ale_match_free(ale);
  #line 465 
  if (idx < 0) 
               #line 466 
               idx = cpsw_ale_find_ageable(ale);
  #line 467 
  if (idx < 0) 
               #line 468 
               return -12;
  #line 470 
  cpsw_ale_write(ale,idx,(u32 *)(& ale_entry));
  #line 471 
  return 0;
}

#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
static void cpsw_ale_del_vlan_modify(struct cpsw_ale *ale, u32 *ale_entry, u16 vid, int port_mask)
{
  #line 477 
  int reg_mcast;
  #line 477 
  int unreg_mcast;
  #line 478 
  int members;
  #line 478 
  int untag;
  #line 480 
  members = cpsw_ale_get_vlan_member_list(ale_entry,ale->vlan_field_bits);
  #line 482 
  members = ~ port_mask & members;
  #line 483 
  if (members == 0) {
    #line 484 
    cpsw_ale_set_entry_type(ale_entry,0U);
    #line 485 
    return;
  }
  #line 488 
  untag = cpsw_ale_get_vlan_untag_force(ale_entry,ale->vlan_field_bits);
  #line 490 
  reg_mcast = cpsw_ale_get_vlan_reg_mcast(ale_entry,ale->vlan_field_bits);
  #line 492 
  unreg_mcast = cpsw_ale_get_vlan_unreg_mcast(ale_entry,ale->vlan_field_bits);
  #line 494 
  untag &= members;
  #line 495 
  reg_mcast &= members;
  #line 496 
  unreg_mcast &= members;
  #line 498 
  cpsw_ale_set_vlan_untag(ale,ale_entry,(unsigned short)((int)vid),untag);
  #line 500 
  if (! ale->params.nu_switch_ale) {
    #line 501 
    cpsw_ale_set_vlan_reg_mcast(ale_entry,(unsigned int)reg_mcast,ale->vlan_field_bits);
    #line 503 
    cpsw_ale_set_vlan_unreg_mcast(ale_entry,(unsigned int)unreg_mcast,ale->vlan_field_bits);
  }
  else 
       #line 506 
       cpsw_ale_set_vlan_mcast(ale,ale_entry,reg_mcast,unreg_mcast);
  #line 509 
  cpsw_ale_set_vlan_member_list(ale_entry,(unsigned int)members,ale->vlan_field_bits);
  #line 511 
  return;
}

#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
int cpsw_ale_del_vlan(struct cpsw_ale *ale, u16 vid, int port_mask)
{
  #line 516 
  int idx;
  #line 515 
  u32 ale_entry[3U] = {0U, 0U, 0U};
  #line 518 
  idx = cpsw_ale_match_vlan(ale,(unsigned short)((int)vid));
  #line 519 
  if (idx < 0) 
               #line 520 
               return -2;
  #line 522 
  cpsw_ale_read(ale,idx,(u32 *)(& ale_entry));
  #line 524 
  if (port_mask != 0) 
                      #line 525 
                      cpsw_ale_del_vlan_modify(ale,(u32 *)(& ale_entry),(unsigned short)((int)vid),port_mask);
  else {
    #line 527 
    cpsw_ale_set_vlan_untag(ale,(u32 *)(& ale_entry),(unsigned short)((int)vid),0);
    #line 528 
    cpsw_ale_set_entry_type((u32 *)(& ale_entry),0U);
  }
  #line 531 
  cpsw_ale_write(ale,idx,(u32 *)(& ale_entry));
  #line 533 
  return 0;
}

#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
int cpsw_ale_vlan_add_modify(struct cpsw_ale *ale, u16 vid, int port_mask, int untag_mask, int reg_mask, int unreg_mask)
{
  #line 540 
  int reg_mcast_members;
  #line 540 
  int unreg_mcast_members;
  #line 541 
  int vlan_members;
  #line 541 
  int untag_members;
  #line 542 
  int idx;
  #line 539 
  u32 ale_entry[3U] = {0U, 0U, 0U};
  #line 542 
  int ret = 0;
  #line 544 
  idx = cpsw_ale_match_vlan(ale,(unsigned short)((int)vid));
  #line 545 
  if (idx >= 0) 
                #line 546 
                cpsw_ale_read(ale,idx,(u32 *)(& ale_entry));
  #line 548 
  vlan_members = cpsw_ale_get_vlan_member_list((u32 *)(& ale_entry),ale->vlan_field_bits);
  #line 550 
  reg_mcast_members = cpsw_ale_get_vlan_reg_mcast((u32 *)(& ale_entry),ale->vlan_field_bits);
  #line 552 
  unreg_mcast_members = cpsw_ale_get_vlan_unreg_mcast((u32 *)(& ale_entry),ale->vlan_field_bits);
  #line 555 
  untag_members = cpsw_ale_get_vlan_untag_force((u32 *)(& ale_entry),ale->vlan_field_bits);
  #line 558 
  vlan_members |= port_mask;
  #line 559 
  untag_members = (~ port_mask & untag_members) | untag_mask;
  #line 560 
  reg_mcast_members = (~ port_mask & reg_mcast_members) | reg_mask;
  #line 561 
  unreg_mcast_members = (~ port_mask & unreg_mcast_members) | unreg_mask;
  #line 563 
  ret = cpsw_ale_add_vlan(ale,(unsigned short)((int)vid),vlan_members,untag_members,reg_mcast_members,unreg_mcast_members);
  #line 565 
  if (ret != 0) {
    #line 566 
    _dev_err(ale->params.dev,(char *)"Unable to add vlan\n");
    #line 567 
    return ret;
  }
  {
    #line 569 
    bool branch;
    #line 569 
    struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"ti_cpsw:ti_cpsw_new", .function = (char *)"cpsw_ale_vlan_add_modify", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c", .format = (char *)"port mask 0x%x untag 0x%x\n", .lineno = (unsigned int)569U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 569 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
    #line 569 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 569 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug443,ale->params.dev,(char *)"port mask 0x%x untag 0x%x\n",vlan_members,untag_mask);
  }
  #line 572 
  return ret;
}

#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
void cpsw_ale_set_unreg_mcast(struct cpsw_ale *ale, int unreg_mcast_mask, bool add)
{
  #line 578 
  u32 ale_entry[3U];
  #line 580 
  int type;
  #line 580 
  int idx;
  #line 579 
  int unreg_members = 0;
  #line 582 
  idx = 0;
  #line 582 
  while ((unsigned long)idx < ale->params.ale_entries) {
    #line 583 
    cpsw_ale_read(ale,idx,(u32 *)(& ale_entry));
    #line 584 
    type = cpsw_ale_get_entry_type((u32 *)(& ale_entry));
    #line 585 
    if (type != 2) 
                   #line 586 
                   goto __Cont;
    #line 588 
    unreg_members = cpsw_ale_get_vlan_unreg_mcast((u32 *)(& ale_entry),ale->vlan_field_bits);
    #line 591 
    if ((int)add != 0) 
                       #line 592 
                       unreg_members |= unreg_mcast_mask; else 
                                                               #line 594 
                                                               unreg_members = ~ unreg_mcast_mask & unreg_members;
    #line 595 
    cpsw_ale_set_vlan_unreg_mcast((u32 *)(& ale_entry),(unsigned int)unreg_members,ale->vlan_field_bits);
    #line 597 
    cpsw_ale_write(ale,idx,(u32 *)(& ale_entry));
    #line 582 
    __Cont: 
            #line 582 
    idx ++;
  }
  #line 599 
  return;
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
void cpsw_ale_set_allmulti(struct cpsw_ale *ale, int allmulti, int port)
{
  #line 603 
  u32 ale_entry[3U];
  #line 605 
  int type;
  #line 605 
  int idx;
  #line 604 
  int unreg_mcast = 0;
  #line 607 
  idx = 0;
  #line 607 
  while ((unsigned long)idx < ale->params.ale_entries) {
    {
      #line 608 
      int vlan_members;
      #line 610 
      cpsw_ale_read(ale,idx,(u32 *)(& ale_entry));
      #line 611 
      type = cpsw_ale_get_entry_type((u32 *)(& ale_entry));
      #line 612 
      if (type != 2) 
                     #line 613 
                     goto __Cont;
      #line 614 
      vlan_members = cpsw_ale_get_vlan_member_list((u32 *)(& ale_entry),ale->vlan_field_bits);
      #line 618 
      if (port != -1 && (((unsigned long)vlan_members >> port) & 1UL) == 0UL) 
        #line 619 
        goto __Cont;
      #line 621 
      unreg_mcast = cpsw_ale_get_vlan_unreg_mcast((u32 *)(& ale_entry),ale->vlan_field_bits);
      #line 624 
      if (allmulti != 0) 
                         #line 625 
                         unreg_mcast |= 1; else 
                                                #line 627 
                                                unreg_mcast &= -2;
      #line 628 
      cpsw_ale_set_vlan_unreg_mcast((u32 *)(& ale_entry),(unsigned int)unreg_mcast,ale->vlan_field_bits);
      #line 630 
      cpsw_ale_write(ale,idx,(u32 *)(& ale_entry));
    }
    #line 607 
    __Cont: 
            #line 607 
    idx ++;
  }
  #line 632 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
static struct ale_control_info ale_controls[23U] = {{.name = (char *)"enable", .offset = 8, .shift = 31, .bits = 1}, {.name = (char *)"clear", .offset = 8, .shift = 30, .bits = 1}, {.name = (char *)"ageout", .offset = 8, .shift = 29, .bits = 1}, {.name = (char *)"port0_unicast_flood", .offset = 8, .shift = 8, .bits = 1}, {.name = (char *)"vlan_nolearn", .offset = 8, .shift = 7, .bits = 1}, {.name = (char *)"no_port_vlan", .offset = 8, .shift = 6, .bits = 1}, {.name = (char *)"oui_deny", .offset = 8, .shift = 5, .bits = 1}, {.name = (char *)"bypass", .offset = 8, .shift = 4, .bits = 1}, {.name = (char *)"rate_limit_tx", .offset = 8, .shift = 3, .bits = 1}, {.name = (char *)"vlan_aware", .offset = 8, .shift = 2, .bits = 1}, {.name = (char *)"auth_enable", .offset = 8, .shift = 1, .bits = 1}, {.name = (char *)"rate_limit", .offset = 8, .bits = 1}, {.name = (char *)"port_state", .offset = 64, .port_offset = 4, .bits = 2}, {.name = (char *)"drop_untagged", .offset = 64, .port_offset = 4, .shift = 2, .bits = 1}, {.name = (char *)"drop_unknown", .offset = 64, .port_offset = 4, .shift = 3, .bits = 1}, {.name = (char *)"nolearn", .offset = 64, .port_offset = 4, .shift = 4, .bits = 1}, {.name = (char *)"no_source_update", .offset = 64, .port_offset = 4, .shift = 5, .bits = 1}, {.name = (char *)"unknown_vlan_member", .offset = 24, .bits = 6}, {.name = (char *)"unknown_mcast_flood", .offset = 24, .shift = 8, .bits = 6}, {.name = (char *)"unknown_reg_flood", .offset = 24, .shift = 16, .bits = 6}, {.name = (char *)"untagged_egress", .offset = 24, .shift = 24, .bits = 6}, {.name = (char *)"bcast_limit", .offset = 64, .port_offset = 4, .shift = 24, .bits = 8}, {.name = (char *)"mcast_limit", .offset = 64, .port_offset = 4, .shift = 16, .bits = 8}};
#line 828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
int cpsw_ale_control_set(struct cpsw_ale *ale, int port, int control, int value)
{
  #line 831 
  struct ale_control_info *info;
  #line 832 
  int offset;
  #line 832 
  int shift;
  #line 833 
  u32 tmp;
  #line 833 
  u32 mask;
  #line 835 
  if ((unsigned int)control > 22U) 
                                   #line 836 
                                   return -22;
  #line 838 
  info = & ale_controls[control];
  #line 839 
  if (info->port_offset == 0 && info->port_shift == 0) 
                                                       #line 840 
                                                       port = 0;
  #line 842 
  if (port < 0 || (unsigned long)port >= ale->params.ale_ports) 
                                                                #line 843 
                                                                return -22;
  #line 845 
  mask = (unsigned int)(1UL << info->bits) + 4294967295U;
  #line 846 
  if ((~ mask & (unsigned int)value) != 0U) 
                                            #line 847 
                                            return -22;
  #line 849 
  offset = info->offset + info->port_offset * port;
  #line 850 
  shift = info->shift + info->port_shift * port;
  #line 852 
  tmp = readl(ale->params.ale_regs + (unsigned long)offset);
  #line 853 
  tmp = (~ (mask << shift) & tmp) | (unsigned int)(value << shift);
  #line 854 
  writel(tmp,ale->params.ale_regs + (unsigned long)offset);
  #line 856 
  return 0;
}

#line 859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
int cpsw_ale_control_get(struct cpsw_ale *ale, int port, int control)
{
  #line 861 
  struct ale_control_info *info;
  #line 862 
  int offset;
  #line 862 
  int shift;
  #line 863 
  u32 tmp;
  #line 865 
  if ((unsigned int)control > 22U) 
                                   #line 866 
                                   return -22;
  #line 868 
  info = & ale_controls[control];
  #line 869 
  if (info->port_offset == 0 && info->port_shift == 0) 
                                                       #line 870 
                                                       port = 0;
  #line 872 
  if (port < 0 || (unsigned long)port >= ale->params.ale_ports) 
                                                                #line 873 
                                                                return -22;
  #line 875 
  offset = info->offset + info->port_offset * port;
  #line 876 
  shift = info->shift + info->port_shift * port;
  #line 878 
  tmp = readl(ale->params.ale_regs + (unsigned long)offset) >> shift;
  #line 879 
  return (int)(~ (18446744073709551615UL << info->bits) & (unsigned long)tmp);
}

#line 882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
static void cpsw_ale_timer(struct timer_list *t)
{
  #line 884 
  void *__mptr;
  #line 884 
  __mptr = (void *)t;
  #line 884 
  struct cpsw_ale *ale = ((struct cpsw_ale *)(__mptr + 18446744073709551568U));
  #line 886 
  cpsw_ale_control_set(ale,0,2,1);
  #line 888 
  if (ale->ageout != 0UL) {
    #line 889 
    ale->timer.expires = ale->ageout + jiffies;
    #line 890 
    add_timer(& ale->timer);
  }
  #line 892 
  return;
}

#line 894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
void cpsw_ale_start(struct cpsw_ale *ale)
{
  #line 896 
  cpsw_ale_control_set(ale,0,0,1);
  #line 897 
  cpsw_ale_control_set(ale,0,1,1);
  {
    #line 899 
    struct lock_class_key __key;
    #line 899 
    init_timer_key(& ale->timer,& cpsw_ale_timer,0U,(char *)"(&ale->timer)",& __key);
  }
  #line 900 
  if (ale->ageout != 0UL) {
    #line 901 
    ale->timer.expires = ale->ageout + jiffies;
    #line 902 
    add_timer(& ale->timer);
  }
  #line 904 
  return;
}

#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
void cpsw_ale_stop(struct cpsw_ale *ale)
{
  #line 908 
  cif_del_timer_sync(& ale->timer);
  #line 909 
  cpsw_ale_control_set(ale,0,1,1);
  #line 910 
  cpsw_ale_control_set(ale,0,0,0);
  #line 911 
  return;
}

#line 913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
struct cpsw_ale *cpsw_ale_create(struct cpsw_ale_params *params)
{
  #line 915 
  struct cpsw_ale *ale;
  #line 916 
  u32 rev;
  #line 916 
  u32 ale_entries;
  #line 918 
  ale = (struct cpsw_ale *)cif_devm_kzalloc_2(params->dev,168UL,3264U);
  #line 919 
  if (ale == (struct cpsw_ale *)0) 
                                   #line 920 
                                   return (struct cpsw_ale *)0;
  #line 923 
  ale->p0_untag_vid_mask = (unsigned long *)cif_devm_kmalloc_array(params->dev,64UL,8UL,3264U);
  #line 926 
  if (ale->p0_untag_vid_mask == (unsigned long *)0UL) {
    #line 927 
    return (struct cpsw_ale *)ERR_PTR_1(-12L);
  }
  #line 929 
  ale->params = *params;
  #line 930 
  ale->ageout = ale->params.ale_ageout * 250UL;
  #line 932 
  rev = readl(ale->params.ale_regs);
  #line 933 
  if (ale->params.major_ver_mask == 0U) 
                                        #line 934 
                                        ale->params.major_ver_mask = 255U;
  #line 935 
  ale->version = (((rev >> 8) & ale->params.major_ver_mask) << 8) | (rev & 255U);
  #line 938 
  _dev_info(ale->params.dev,(char *)"initialized cpsw ale version %d.%d\n",(rev >> 8) & ale->params.major_ver_mask,rev & 255U);
  #line 942 
  if (ale->params.ale_entries == 0UL) {
    #line 943 
    ale_entries = readl(ale->params.ale_regs + 4U) & 31U;
    #line 957 
    if (ale_entries == 0U) 
                           #line 958 
                           ale_entries = 64U; else 
                                                   #line 960 
                                                   ale_entries *= 1024U;
    #line 961 
    ale->params.ale_entries = (unsigned long)ale_entries;
  }
  #line 963 
  _dev_info(ale->params.dev,(char *)"ALE Table size %ld\n",ale->params.ale_entries);
  #line 967 
  ale->port_mask_bits = (unsigned int)ale->params.ale_ports;
  #line 968 
  if (0 != 0) {
    #line 968 
    unsigned int tmp_33;
    #line 968 
    unsigned int tmp_65;
    #line 968 
    unsigned int tmp_34;
    #line 968 
    unsigned int tmp_67;
    #line 968 
    unsigned int tmp_3;
    #line 968 
    unsigned int tmp_35;
    #line 968 
    unsigned int tmp_36;
    #line 968 
    unsigned int tmp_4;
    #line 968 
    unsigned int tmp_5;
    #line 968 
    unsigned int tmp_37;
    #line 968 
    unsigned int tmp_38;
    #line 968 
    unsigned int tmp_6;
    #line 968 
    unsigned int tmp_7;
    #line 968 
    unsigned int tmp_39;
    #line 968 
    unsigned int tmp_40;
    #line 968 
    unsigned int tmp_8;
    #line 968 
    unsigned int tmp_9;
    #line 968 
    unsigned int tmp_41;
    #line 968 
    unsigned int tmp_42;
    #line 968 
    unsigned int tmp_10;
    #line 968 
    unsigned int tmp_11;
    #line 968 
    unsigned int tmp_43;
    #line 968 
    unsigned int tmp_44;
    #line 968 
    unsigned int tmp_12;
    #line 968 
    unsigned int tmp_13;
    #line 968 
    unsigned int tmp_45;
    #line 968 
    unsigned int tmp_46;
    #line 968 
    unsigned int tmp_14;
    #line 968 
    unsigned int tmp_15;
    #line 968 
    unsigned int tmp_47;
    #line 968 
    unsigned int tmp_48;
    #line 968 
    unsigned int tmp_16;
    #line 968 
    unsigned int tmp_17;
    #line 968 
    unsigned int tmp_49;
    #line 968 
    unsigned int tmp_50;
    #line 968 
    unsigned int tmp_18;
    #line 968 
    unsigned int tmp_19;
    #line 968 
    unsigned int tmp_51;
    #line 968 
    unsigned int tmp_52;
    #line 968 
    unsigned int tmp_20;
    #line 968 
    unsigned int tmp_21;
    #line 968 
    unsigned int tmp_53;
    #line 968 
    unsigned int tmp_54;
    #line 968 
    unsigned int tmp_22;
    #line 968 
    unsigned int tmp_23;
    #line 968 
    unsigned int tmp_55;
    #line 968 
    unsigned int tmp_56;
    #line 968 
    unsigned int tmp_24;
    #line 968 
    unsigned int tmp_25;
    #line 968 
    unsigned int tmp_57;
    #line 968 
    unsigned int tmp_58;
    #line 968 
    unsigned int tmp_26;
    #line 968 
    unsigned int tmp_27;
    #line 968 
    unsigned int tmp_59;
    #line 968 
    unsigned int tmp_60;
    #line 968 
    unsigned int tmp_28;
    #line 968 
    unsigned int tmp_29;
    #line 968 
    unsigned int tmp_61;
    #line 968 
    unsigned int tmp_62;
    #line 968 
    unsigned int tmp_30;
    #line 968 
    unsigned int tmp_31;
    #line 968 
    unsigned int tmp_63;
    #line 968 
    unsigned int tmp_64;
    #line 968 
    unsigned int tmp_32;
    #line 968 
    unsigned int tmp_68;
    #line 968 
    if (ale->params.ale_ports > 1UL) {
      #line 968 
      if (0 != 0) {
        #line 968 
        if (ale->params.ale_ports + 18446744073709551615UL > 1UL) {
          #line 968 
          if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 9223372036854775808ULL) == 0ULL) {
            #line 968 
            if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 4611686018427387904ULL) == 0ULL) {
              #line 968 
              if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 2305843009213693952ULL) == 0ULL) {
                #line 968 
                if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 1152921504606846976ULL) == 0ULL) {
                  #line 968 
                  if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 576460752303423488ULL) == 0ULL) {
                    #line 968 
                    if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 288230376151711744ULL) == 0ULL) {
                      #line 968 
                      if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 144115188075855872ULL) == 0ULL) {
                        #line 968 
                        if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 72057594037927936ULL) == 0ULL) {
                          #line 968 
                          if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 36028797018963968ULL) == 0ULL) {
                            #line 968 
                            if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 18014398509481984ULL) == 0ULL) {
                              #line 968 
                              if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 9007199254740992ULL) == 0ULL) {
                                #line 968 
                                if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 4503599627370496ULL) == 0ULL) {
                                  #line 968 
                                  if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 2251799813685248ULL) == 0ULL) {
                                    #line 968 
                                    if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 1125899906842624ULL) == 0ULL) {
                                      #line 968 
                                      if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 562949953421312ULL) == 0ULL) {
                                        #line 968 
                                        if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 281474976710656ULL) == 0ULL) {
                                          #line 968 
                                          if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 140737488355328ULL) == 0ULL) {
                                            #line 968 
                                            if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 70368744177664ULL) == 0ULL) {
                                              #line 968 
                                              if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 35184372088832ULL) == 0ULL) {
                                                #line 968 
                                                if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 17592186044416ULL) == 0ULL) {
                                                  #line 968 
                                                  if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 8796093022208ULL) == 0ULL) {
                                                    #line 968 
                                                    if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 4398046511104ULL) == 0ULL) {
                                                      #line 968 
                                                      if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 2199023255552ULL) == 0ULL) {
                                                        #line 968 
                                                        if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 1099511627776ULL) == 0ULL) {
                                                          #line 968 
                                                          if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 549755813888ULL) == 0ULL) {
                                                            #line 968 
                                                            if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 274877906944ULL) == 0ULL) {
                                                              #line 968 
                                                              if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 137438953472ULL) == 0ULL) {
                                                                #line 968 
                                                                if (((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 68719476736ULL) == 0ULL) {
                                                                  #line 968 
                                                                  if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 34359738368ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 17179869184ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 8589934592ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 4294967296ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 2147483648ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 1073741824ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 536870912ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 268435456ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 134217728ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 67108864ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 33554432ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 16777216ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 8388608ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 4194304ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 2097152ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 1048576ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 524288ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 262144ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 131072ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 65536ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 32768ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 16384ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 8192ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 4096ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 2048ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 1024ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 512ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 256ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 128ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 64ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 32ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 16ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 8ULL) == 0ULL) {
                                                                    #line 968 
                                                                    if (
                                                                    ((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL) & 4ULL) != 0ULL) 
                                                                    #line 968 
                                                                    tmp_3 = 3U; else 
                                                                    #line 968 
                                                                    tmp_3 = 2U;
                                                                    #line 968 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_4 = 4U;
                                                                    #line 968 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_5 = 5U;
                                                                    #line 968 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_6 = 6U;
                                                                    #line 968 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_7 = 7U;
                                                                    #line 968 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_8 = 8U;
                                                                    #line 968 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_9 = 9U;
                                                                    #line 968 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_10 = 10U;
                                                                    #line 968 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_11 = 11U;
                                                                    #line 968 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_12 = 12U;
                                                                    #line 968 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_13 = 13U;
                                                                    #line 968 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_14 = 14U;
                                                                    #line 968 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_15 = 15U;
                                                                    #line 968 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_16 = 16U;
                                                                    #line 968 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_17 = 17U;
                                                                    #line 968 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_18 = 18U;
                                                                    #line 968 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_19 = 19U;
                                                                    #line 968 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_20 = 20U;
                                                                    #line 968 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_21 = 21U;
                                                                    #line 968 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_22 = 22U;
                                                                    #line 968 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_23 = 23U;
                                                                    #line 968 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_24 = 24U;
                                                                    #line 968 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_25 = 25U;
                                                                    #line 968 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_26 = 26U;
                                                                    #line 968 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_27 = 27U;
                                                                    #line 968 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_28 = 28U;
                                                                    #line 968 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_29 = 29U;
                                                                    #line 968 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_30 = 30U;
                                                                    #line 968 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_31 = 31U;
                                                                    #line 968 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_32 = 32U;
                                                                    #line 968 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_33 = 33U;
                                                                    #line 968 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_34 = 34U;
                                                                    #line 968 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    #line 968 
                                                                    tmp_35 = 35U;
                                                                    #line 968 
                                                                    tmp_36 = tmp_35;
                                                                  }
                                                                  else 
                                                                    #line 968 
                                                                    tmp_36 = 36U;
                                                                  #line 968 
                                                                  tmp_37 = tmp_36;
                                                                }
                                                                else 
                                                                  #line 968 
                                                                  tmp_37 = 37U;
                                                                #line 968 
                                                                tmp_38 = tmp_37;
                                                              }
                                                              else 
                                                                   #line 968 
                                                                   tmp_38 = 38U;
                                                              #line 968 
                                                              tmp_39 = tmp_38;
                                                            }
                                                            else 
                                                                 #line 968 
                                                                 tmp_39 = 39U;
                                                            #line 968 
                                                            tmp_40 = tmp_39;
                                                          }
                                                          else 
                                                               #line 968 
                                                               tmp_40 = 40U;
                                                          #line 968 
                                                          tmp_41 = tmp_40;
                                                        }
                                                        else 
                                                             #line 968 
                                                             tmp_41 = 41U;
                                                        #line 968 
                                                        tmp_42 = tmp_41;
                                                      }
                                                      else 
                                                           #line 968 
                                                           tmp_42 = 42U;
                                                      #line 968 
                                                      tmp_43 = tmp_42;
                                                    }
                                                    else 
                                                         #line 968 
                                                         tmp_43 = 43U;
                                                    #line 968 
                                                    tmp_44 = tmp_43;
                                                  }
                                                  else 
                                                       #line 968 
                                                       tmp_44 = 44U;
                                                  #line 968 
                                                  tmp_45 = tmp_44;
                                                }
                                                else 
                                                     #line 968 
                                                     tmp_45 = 45U;
                                                #line 968 
                                                tmp_46 = tmp_45;
                                              }
                                              else 
                                                   #line 968 
                                                   tmp_46 = 46U;
                                              #line 968 
                                              tmp_47 = tmp_46;
                                            }
                                            else 
                                                 #line 968 
                                                 tmp_47 = 47U;
                                            #line 968 
                                            tmp_48 = tmp_47;
                                          }
                                          else 
                                               #line 968 
                                               tmp_48 = 48U;
                                          #line 968 
                                          tmp_49 = tmp_48;
                                        }
                                        else 
                                             #line 968 
                                             tmp_49 = 49U;
                                        #line 968 
                                        tmp_50 = tmp_49;
                                      }
                                      else 
                                           #line 968 
                                           tmp_50 = 50U;
                                      #line 968 
                                      tmp_51 = tmp_50;
                                    }
                                    else 
                                         #line 968 
                                         tmp_51 = 51U;
                                    #line 968 
                                    tmp_52 = tmp_51;
                                  }
                                  else 
                                       #line 968 
                                       tmp_52 = 52U;
                                  #line 968 
                                  tmp_53 = tmp_52;
                                }
                                else 
                                     #line 968 
                                     tmp_53 = 53U;
                                #line 968 
                                tmp_54 = tmp_53;
                              }
                              else 
                                   #line 968 
                                   tmp_54 = 54U;
                              #line 968 
                              tmp_55 = tmp_54;
                            }
                            else 
                                 #line 968 
                                 tmp_55 = 55U;
                            #line 968 
                            tmp_56 = tmp_55;
                          }
                          else 
                               #line 968 
                               tmp_56 = 56U;
                          #line 968 
                          tmp_57 = tmp_56;
                        }
                        else 
                             #line 968 
                             tmp_57 = 57U;
                        #line 968 
                        tmp_58 = tmp_57;
                      }
                      else 
                           #line 968 
                           tmp_58 = 58U;
                      #line 968 
                      tmp_59 = tmp_58;
                    }
                    else 
                         #line 968 
                         tmp_59 = 59U;
                    #line 968 
                    tmp_60 = tmp_59;
                  }
                  else 
                       #line 968 
                       tmp_60 = 60U;
                  #line 968 
                  tmp_61 = tmp_60;
                }
                else 
                     #line 968 
                     tmp_61 = 61U;
                #line 968 
                tmp_62 = tmp_61;
              }
              else 
                   #line 968 
                   tmp_62 = 62U;
              #line 968 
              tmp_63 = tmp_62;
            }
            else 
                 #line 968 
                 tmp_63 = 63U;
            #line 968 
            tmp_64 = tmp_63;
          }
          else 
               #line 968 
               tmp_64 = 64U;
          #line 968 
          tmp_65 = tmp_64;
        }
        else 
             #line 968 
             tmp_65 = 1U;
        #line 968 
        tmp_67 = tmp_65;
      }
      else {
        #line 968 
        tmp_67 = (unsigned int)(__ilog2_u64((unsigned long long)(ale->params.ale_ports + 18446744073709551615UL)) + 1);
      }
      #line 968 
      tmp_68 = tmp_67;
    }
    else 
         #line 968 
         tmp_68 = 0U;
    #line 968 
    ale->port_num_bits = tmp_68;
  }
  else {
    #line 968 
    ale->port_num_bits = (unsigned int)__order_base_2(ale->params.ale_ports);
  }
  #line 969 
  ale->vlan_field_bits = (unsigned int)ale->params.ale_ports;
  #line 974 
  if ((int)ale->params.nu_switch_ale != 0) {
    #line 979 
    ale_controls[17].bits = (int)ale->params.ale_ports;
    #line 981 
    ale_controls[17].offset = 144;
    #line 983 
    ale_controls[18].bits = (int)ale->params.ale_ports;
    #line 985 
    ale_controls[18].shift = 0;
    #line 986 
    ale_controls[18].offset = 148;
    #line 988 
    ale_controls[19].bits = (int)ale->params.ale_ports;
    #line 990 
    ale_controls[19].shift = 0;
    #line 991 
    ale_controls[19].offset = 152;
    #line 993 
    ale_controls[20].bits = (int)ale->params.ale_ports;
    #line 995 
    ale_controls[20].shift = 0;
    #line 996 
    ale_controls[20].offset = 156;
  }
  #line 1000 
  cpsw_ale_control_set(ale,0,1,1);
  #line 1001 
  return ale;
}

#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/ti/cpsw_ale.c"
void cpsw_ale_dump(struct cpsw_ale *ale, u32 *data)
{
  #line 1006 
  int i;
  #line 1008 
  i = 0;
  #line 1008 
  while ((unsigned long)i < ale->params.ale_entries) {
    #line 1009 
    cpsw_ale_read(ale,i,data);
    #line 1010 
    data += 3U;
    #line 1008 
    i ++;
  }
  #line 1012 
  return;
}

#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ale.i.aux"
#line 94 
int emg_del_timer_sync(struct timer_list *arg0);
#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ale.i.aux"
static void *ERR_PTR_1(long error)
{
  #line 201 
  return ldv_err_ptr(error);
}

#line 428  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ale.i.aux"
static void *cif_devm_kmalloc_array(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 431 
  return ldv_devm_kmalloc_array(n,size,flags);
}

#line 644  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ale.i.aux"
static void cif_bitmap_set(unsigned long *map, unsigned int start, unsigned int nbits)
{
  #line 647 
  ldv_bitmap_set(map,start,(int)nbits);
  #line 648 
  return;
}

#line 651  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ale.i.aux"
static void cif_bitmap_clear(unsigned long *map, unsigned int start, unsigned int nbits)
{
  #line 654 
  ldv_bitmap_clear(map,start,(int)nbits);
  #line 655 
  return;
}

#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ale.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 662 
  return emg_del_timer_sync(timer);
}

#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/0/concurrency safety/weaver/cpsw_ale.i.aux"
static void *cif_devm_kzalloc_2(struct device *dev, size_t size, gfp_t flags)
{
  #line 669 
  return ldv_devm_kzalloc(size,flags);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_enabled = 0;
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_lowpower = 1;
#line 83 
#line 137 
void emg_dispatch_deregister_4(struct platform_driver *arg0);
#line 84 
#line 157 
void emg_dispatch_deregister_8(struct net_device *arg0);
#line 85 
#line 117 
void emg_dispatch_pm_deregister_10(void);
#line 86 
#line 107 
void emg_dispatch_pm_register_10(void);
#line 87 
#line 126 
void emg_dispatch_register_2(struct platform_driver *arg0);
#line 88 
#line 146 
void emg_dispatch_register_7(struct net_device *arg0);
#line 89 
#line 2108 
void *emg_entry_point_insmod(void *arg0);
#line 90 
#line 166 
void *emg_net_random_allocationless_scenario_cpsw_ethtool_op_begin(void *arg0);
#line 92 
#line 703 
void *emg_platform_platform_instance_cpsw_driver(void *arg0);
#line 93 
#line 880 
void *emg_pm_pm_ops_scenario_cpsw_pm_ops(void *arg0);
#line 98 
#line 2137 
int main(void);
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_10;
#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_11;
#line 103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_9;
#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_pm_register_10(void)
{
  #line 108 
  int ret;
  #line 109 
  struct emg_struct_platform_instance_cpsw_driver_10 *cf_arg_11;
  #line 110 
  cf_arg_11 = (struct emg_struct_platform_instance_cpsw_driver_10 *)ldv_xmalloc(16UL);
  #line 111 
  ret = pthread_create(& emg_thread_11,(pthread_attr_t *)0,& emg_pm_pm_ops_scenario_cpsw_pm_ops,(void *)cf_arg_11);
  #line 112 
  __VERIFIER_assume(ret == 0);
  #line 113 
  return;
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_pm_deregister_10(void)
{
  #line 118 
  int ret;
  #line 119 
  struct emg_struct_platform_instance_cpsw_driver_10 *cf_arg_11;
  #line 120 
  ret = pthread_join(emg_thread_11,(void **)0);
  #line 121 
  __VERIFIER_assume(ret == 0);
  #line 122 
  return;
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct platform_driver *arg0)
{
  #line 127 
  int ret;
  #line 128 
  struct emg_struct_platform_instance_cpsw_driver_10 *cf_arg_10;
  #line 129 
  cf_arg_10 = (struct emg_struct_platform_instance_cpsw_driver_10 *)ldv_xmalloc(16UL);
  #line 130 
  cf_arg_10->arg0 = arg0;
  #line 131 
  ret = pthread_create(& emg_thread_10,(pthread_attr_t *)0,& emg_platform_platform_instance_cpsw_driver,(void *)cf_arg_10);
  #line 132 
  __VERIFIER_assume(ret == 0);
  #line 133 
  return;
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_4(struct platform_driver *arg0)
{
  #line 138 
  int ret;
  #line 139 
  struct emg_struct_platform_instance_cpsw_driver_10 *cf_arg_10;
  #line 140 
  ret = pthread_join(emg_thread_10,(void **)0);
  #line 141 
  __VERIFIER_assume(ret == 0);
  #line 142 
  return;
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_7(struct net_device *arg0)
{
  #line 147 
  int ret;
  #line 148 
  struct emg_struct_random_allocationless_scenario_cpsw_ethtool_op_begin_9 *cf_arg_9;
  #line 149 
  cf_arg_9 = (struct emg_struct_random_allocationless_scenario_cpsw_ethtool_op_begin_9 *)ldv_xmalloc(16UL);
  #line 150 
  cf_arg_9->arg0 = arg0;
  #line 151 
  ret = pthread_create(& emg_thread_9,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_cpsw_ethtool_op_begin,(void *)cf_arg_9);
  #line 152 
  __VERIFIER_assume(ret == 0);
  #line 153 
  return;
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct net_device *arg0)
{
  #line 158 
  int ret;
  #line 159 
  struct emg_struct_random_allocationless_scenario_cpsw_ethtool_op_begin_9 *cf_arg_9;
  #line 160 
  ret = pthread_join(emg_thread_9,(void **)0);
  #line 161 
  __VERIFIER_assume(ret == 0);
  #line 162 
  return;
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_cpsw_ethtool_op_begin(void *arg0)
{
  #line 169 
  struct net_device *emg_9_container;
  #line 170 
  struct sk_buff *emg_9_emg_param_0_24;
  #line 171 
  struct ethtool_channels *emg_9_emg_param_1_0;
  #line 172 
  struct ethtool_coalesce *emg_9_emg_param_1_1;
  #line 173 
  struct ethtool_ringparam *emg_9_emg_param_1_10;
  #line 174 
  int emg_9_emg_param_1_11;
  #line 175 
  unsigned int emg_9_emg_param_1_12;
  #line 176 
  struct ethtool_ts_info *emg_9_emg_param_1_14;
  #line 177 
  struct ethtool_wolinfo *emg_9_emg_param_1_15;
  #line 178 
  struct netdev_bpf *emg_9_emg_param_1_16;
  #line 179 
  struct ifreq *emg_9_emg_param_1_17;
  #line 180 
  void *emg_9_emg_param_1_19;
  #line 181 
  struct ethtool_drvinfo *emg_9_emg_param_1_2;
  #line 182 
  int emg_9_emg_param_1_20;
  #line 183 
  enum tc_setup_type *emg_9_emg_param_1_22;
  #line 184 
  unsigned short emg_9_emg_param_1_25;
  #line 185 
  unsigned short emg_9_emg_param_1_27;
  #line 186 
  int emg_9_emg_param_1_29;
  #line 187 
  struct ethtool_eee *emg_9_emg_param_1_3;
  #line 188 
  struct ethtool_channels *emg_9_emg_param_1_32;
  #line 189 
  struct ethtool_coalesce *emg_9_emg_param_1_33;
  #line 190 
  struct ethtool_eee *emg_9_emg_param_1_34;
  #line 191 
  struct ethtool_link_ksettings *emg_9_emg_param_1_35;
  #line 192 
  unsigned int emg_9_emg_param_1_36;
  #line 193 
  struct ethtool_pauseparam *emg_9_emg_param_1_37;
  #line 194 
  struct ethtool_ringparam *emg_9_emg_param_1_38;
  #line 195 
  struct ethtool_wolinfo *emg_9_emg_param_1_39;
  #line 196 
  struct ethtool_stats *emg_9_emg_param_1_4;
  #line 197 
  struct ethtool_link_ksettings *emg_9_emg_param_1_6;
  #line 198 
  struct ethtool_pauseparam *emg_9_emg_param_1_7;
  #line 199 
  struct ethtool_regs *emg_9_emg_param_1_8;
  #line 200 
  unsigned char *emg_9_emg_param_2_13;
  #line 201 
  int emg_9_emg_param_2_18;
  #line 202 
  unsigned int emg_9_emg_param_2_21;
  #line 203 
  void *emg_9_emg_param_2_23;
  #line 204 
  unsigned short emg_9_emg_param_2_26;
  #line 205 
  unsigned short emg_9_emg_param_2_28;
  #line 206 
  struct xdp_frame **emg_9_emg_param_2_30;
  #line 207 
  unsigned long long *emg_9_emg_param_2_5;
  #line 208 
  void *emg_9_emg_param_2_9;
  #line 209 
  unsigned int emg_9_emg_param_3_31;
  #line 210 
  int emg_repeat_cnt_call_9 = 1;
  #line 212 
  struct emg_struct_random_allocationless_scenario_cpsw_ethtool_op_begin_9 *data = (struct emg_struct_random_allocationless_scenario_cpsw_ethtool_op_begin_9 *)arg0;
  #line 217 
  if (data != (struct emg_struct_random_allocationless_scenario_cpsw_ethtool_op_begin_9 *)0) {
    #line 218 
    emg_9_container = data->arg0;
    #line 219 
    ldv_free((void *)data);
  }
  #line 224 
  goto emg_call_9;
  #line 228 
  return (void *)0;
  #line 231 
  emg_call_9: 
              #line 231 
  ;
  #line 232 
  switch (ldv_undef_int()) {
    #line 233 
    case 0: 
            #line 233 
    ;
    #line 235 
    emg_9_emg_param_1_39 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 235 
    emg_9_emg_param_1_39 = emg_9_emg_param_1_39;
    #line 239 
    cpsw_set_wol(emg_9_container,emg_9_emg_param_1_39);
    #line 243 
    ldv_free((void *)emg_9_emg_param_1_39);
    #line 245 
    break;
    #line 247 
    case 1: 
            #line 247 
    ;
    #line 249 
    emg_9_emg_param_1_38 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 249 
    emg_9_emg_param_1_38 = emg_9_emg_param_1_38;
    #line 253 
    cpsw_set_ringparam(emg_9_container,emg_9_emg_param_1_38);
    #line 257 
    ldv_free((void *)emg_9_emg_param_1_38);
    #line 259 
    break;
    #line 261 
    case 2: 
            #line 261 
    ;
    #line 263 
    emg_9_emg_param_1_37 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 263 
    emg_9_emg_param_1_37 = emg_9_emg_param_1_37;
    #line 267 
    emg_wrapper_cpsw_set_pauseparam(emg_9_container,emg_9_emg_param_1_37);
    #line 271 
    ldv_free((void *)emg_9_emg_param_1_37);
    #line 273 
    break;
    #line 275 
    case 3: 
            #line 275 
    ;
    #line 277 
    cpsw_set_msglevel(emg_9_container,emg_9_emg_param_1_36);
    #line 279 
    break;
    #line 281 
    case 4: 
            #line 281 
    ;
    #line 283 
    emg_9_emg_param_1_35 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 283 
    emg_9_emg_param_1_35 = emg_9_emg_param_1_35;
    #line 287 
    cpsw_set_link_ksettings(emg_9_container,emg_9_emg_param_1_35);
    #line 291 
    ldv_free((void *)emg_9_emg_param_1_35);
    #line 293 
    break;
    #line 295 
    case 5: 
            #line 295 
    ;
    #line 297 
    emg_9_emg_param_1_34 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
    #line 297 
    emg_9_emg_param_1_34 = emg_9_emg_param_1_34;
    #line 301 
    cpsw_set_eee(emg_9_container,emg_9_emg_param_1_34);
    #line 305 
    ldv_free((void *)emg_9_emg_param_1_34);
    #line 307 
    break;
    #line 309 
    case 6: 
            #line 309 
    ;
    #line 311 
    emg_9_emg_param_1_33 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 311 
    emg_9_emg_param_1_33 = emg_9_emg_param_1_33;
    #line 315 
    cpsw_set_coalesce(emg_9_container,emg_9_emg_param_1_33);
    #line 319 
    ldv_free((void *)emg_9_emg_param_1_33);
    #line 321 
    break;
    #line 323 
    case 7: 
            #line 323 
    ;
    #line 325 
    emg_9_emg_param_1_32 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 325 
    emg_9_emg_param_1_32 = emg_9_emg_param_1_32;
    #line 329 
    emg_wrapper_cpsw_set_channels(emg_9_container,emg_9_emg_param_1_32);
    #line 333 
    ldv_free((void *)emg_9_emg_param_1_32);
    #line 335 
    break;
    #line 337 
    case 8: 
            #line 337 
    ;
    #line 339 
    emg_wrapper_cpsw_nway_reset(emg_9_container);
    #line 341 
    break;
    #line 343 
    case 9: 
            #line 343 
    ;
    #line 345 
    emg_9_emg_param_2_30 = (struct xdp_frame **)ldv_xmalloc_unknown_size(0UL);
    #line 345 
    emg_9_emg_param_2_30 = emg_9_emg_param_2_30;
    #line 349 
    emg_wrapper_cpsw_ndo_xdp_xmit(emg_9_container,emg_9_emg_param_1_29,emg_9_emg_param_2_30,emg_9_emg_param_3_31);
    #line 353 
    ldv_free((void *)emg_9_emg_param_2_30);
    #line 355 
    break;
    #line 357 
    case 10: 
             #line 357 
    ;
    #line 359 
    emg_wrapper_cpsw_ndo_vlan_rx_kill_vid(emg_9_container,(unsigned short)((int)emg_9_emg_param_1_27),(unsigned short)((int)emg_9_emg_param_2_28));
    #line 361 
    break;
    #line 363 
    case 11: 
             #line 363 
    ;
    #line 365 
    emg_wrapper_cpsw_ndo_vlan_rx_add_vid(emg_9_container,(unsigned short)((int)emg_9_emg_param_1_25),(unsigned short)((int)emg_9_emg_param_2_26));
    #line 367 
    break;
    #line 369 
    case 12: 
             #line 369 
    ;
    #line 371 
    (*emg_alias_eth_validate_addr)(emg_9_container);
    #line 373 
    break;
    #line 375 
    case 13: 
             #line 375 
    ;
    #line 377 
    cpsw_ndo_tx_timeout(emg_9_container);
    #line 379 
    break;
    #line 381 
    case 14: 
             #line 381 
    ;
    #line 383 
    emg_9_emg_param_0_24 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 383 
    emg_9_emg_param_0_24 = emg_9_emg_param_0_24;
    #line 387 
    emg_wrapper_cpsw_ndo_start_xmit(emg_9_emg_param_0_24,emg_9_container);
    #line 391 
    ldv_free((void *)emg_9_emg_param_0_24);
    #line 393 
    break;
    #line 395 
    case 15: 
             #line 395 
    ;
    #line 397 
    emg_9_emg_param_1_22 = (enum tc_setup_type *)ldv_xmalloc_unknown_size(0UL);
    #line 397 
    emg_9_emg_param_1_22 = emg_9_emg_param_1_22;
    #line 398 
    emg_9_emg_param_2_23 = ldv_xmalloc_unknown_size(0UL);
    #line 398 
    emg_9_emg_param_2_23 = emg_9_emg_param_2_23;
    #line 402 
    cpsw_ndo_setup_tc(emg_9_container,*emg_9_emg_param_1_22,emg_9_emg_param_2_23);
    #line 406 
    ldv_free((void *)emg_9_emg_param_1_22);
    #line 407 
    ldv_free(emg_9_emg_param_2_23);
    #line 409 
    break;
    #line 411 
    case 16: 
             #line 411 
    ;
    #line 413 
    cpsw_ndo_set_tx_maxrate(emg_9_container,emg_9_emg_param_1_20,emg_9_emg_param_2_21);
    #line 415 
    break;
    #line 417 
    case 17: 
             #line 417 
    ;
    #line 419 
    emg_wrapper_cpsw_ndo_set_rx_mode(emg_9_container);
    #line 421 
    break;
    #line 423 
    case 18: 
             #line 423 
    ;
    #line 425 
    emg_9_emg_param_1_19 = ldv_xmalloc_unknown_size(0UL);
    #line 425 
    emg_9_emg_param_1_19 = emg_9_emg_param_1_19;
    #line 429 
    emg_wrapper_cpsw_ndo_set_mac_address(emg_9_container,emg_9_emg_param_1_19);
    #line 433 
    ldv_free(emg_9_emg_param_1_19);
    #line 435 
    break;
    #line 437 
    case 19: 
             #line 437 
    ;
    #line 439 
    emg_wrapper_cpsw_ndo_poll_controller(emg_9_container);
    #line 441 
    break;
    #line 443 
    case 20: 
             #line 443 
    ;
    #line 445 
    emg_9_emg_param_1_17 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 445 
    emg_9_emg_param_1_17 = emg_9_emg_param_1_17;
    #line 449 
    cpsw_ndo_ioctl(emg_9_container,emg_9_emg_param_1_17,emg_9_emg_param_2_18);
    #line 453 
    ldv_free((void *)emg_9_emg_param_1_17);
    #line 455 
    break;
    #line 457 
    case 21: 
             #line 457 
    ;
    #line 459 
    emg_9_emg_param_1_16 = (struct netdev_bpf *)ldv_xmalloc_unknown_size(0UL);
    #line 459 
    emg_9_emg_param_1_16 = emg_9_emg_param_1_16;
    #line 463 
    cpsw_ndo_bpf(emg_9_container,emg_9_emg_param_1_16);
    #line 467 
    ldv_free((void *)emg_9_emg_param_1_16);
    #line 469 
    break;
    #line 471 
    case 22: 
             #line 471 
    ;
    #line 473 
    emg_9_emg_param_1_15 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 473 
    emg_9_emg_param_1_15 = emg_9_emg_param_1_15;
    #line 477 
    cpsw_get_wol(emg_9_container,emg_9_emg_param_1_15);
    #line 481 
    ldv_free((void *)emg_9_emg_param_1_15);
    #line 483 
    break;
    #line 485 
    case 23: 
             #line 485 
    ;
    #line 487 
    emg_9_emg_param_1_14 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 487 
    emg_9_emg_param_1_14 = emg_9_emg_param_1_14;
    #line 491 
    cpsw_get_ts_info(emg_9_container,emg_9_emg_param_1_14);
    #line 495 
    ldv_free((void *)emg_9_emg_param_1_14);
    #line 497 
    break;
    #line 499 
    case 24: 
             #line 499 
    ;
    #line 501 
    emg_9_emg_param_2_13 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 501 
    emg_9_emg_param_2_13 = emg_9_emg_param_2_13;
    #line 505 
    cpsw_get_strings(emg_9_container,emg_9_emg_param_1_12,emg_9_emg_param_2_13);
    #line 509 
    ldv_free((void *)emg_9_emg_param_2_13);
    #line 511 
    break;
    #line 513 
    case 25: 
             #line 513 
    ;
    #line 515 
    cpsw_get_sset_count(emg_9_container,emg_9_emg_param_1_11);
    #line 517 
    break;
    #line 519 
    case 26: 
             #line 519 
    ;
    #line 521 
    emg_9_emg_param_1_10 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 521 
    emg_9_emg_param_1_10 = emg_9_emg_param_1_10;
    #line 525 
    cpsw_get_ringparam(emg_9_container,emg_9_emg_param_1_10);
    #line 529 
    ldv_free((void *)emg_9_emg_param_1_10);
    #line 531 
    break;
    #line 533 
    case 27: 
             #line 533 
    ;
    #line 535 
    emg_wrapper_cpsw_get_regs_len(emg_9_container);
    #line 537 
    break;
    #line 539 
    case 28: 
             #line 539 
    ;
    #line 541 
    emg_9_emg_param_1_8 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 541 
    emg_9_emg_param_1_8 = emg_9_emg_param_1_8;
    #line 542 
    emg_9_emg_param_2_9 = ldv_xmalloc_unknown_size(0UL);
    #line 542 
    emg_9_emg_param_2_9 = emg_9_emg_param_2_9;
    #line 546 
    cpsw_get_regs(emg_9_container,emg_9_emg_param_1_8,emg_9_emg_param_2_9);
    #line 550 
    ldv_free((void *)emg_9_emg_param_1_8);
    #line 551 
    ldv_free(emg_9_emg_param_2_9);
    #line 553 
    break;
    #line 555 
    case 29: 
             #line 555 
    ;
    #line 557 
    emg_9_emg_param_1_7 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 557 
    emg_9_emg_param_1_7 = emg_9_emg_param_1_7;
    #line 561 
    cpsw_get_pauseparam(emg_9_container,emg_9_emg_param_1_7);
    #line 565 
    ldv_free((void *)emg_9_emg_param_1_7);
    #line 567 
    break;
    #line 569 
    case 30: 
             #line 569 
    ;
    #line 571 
    cpsw_get_msglevel(emg_9_container);
    #line 573 
    break;
    #line 575 
    case 31: 
             #line 575 
    ;
    #line 577 
    emg_9_emg_param_1_6 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 577 
    emg_9_emg_param_1_6 = emg_9_emg_param_1_6;
    #line 581 
    cpsw_get_link_ksettings(emg_9_container,emg_9_emg_param_1_6);
    #line 585 
    ldv_free((void *)emg_9_emg_param_1_6);
    #line 587 
    break;
    #line 589 
    case 32: 
             #line 589 
    ;
    #line 591 
    ethtool_op_get_link(emg_9_container);
    #line 593 
    break;
    #line 595 
    case 33: 
             #line 595 
    ;
    #line 597 
    emg_9_emg_param_1_4 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 597 
    emg_9_emg_param_1_4 = emg_9_emg_param_1_4;
    #line 598 
    emg_9_emg_param_2_5 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 598 
    emg_9_emg_param_2_5 = emg_9_emg_param_2_5;
    #line 602 
    cpsw_get_ethtool_stats(emg_9_container,emg_9_emg_param_1_4,emg_9_emg_param_2_5);
    #line 606 
    ldv_free((void *)emg_9_emg_param_1_4);
    #line 607 
    ldv_free((void *)emg_9_emg_param_2_5);
    #line 609 
    break;
    #line 611 
    case 34: 
             #line 611 
    ;
    #line 613 
    emg_9_emg_param_1_3 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
    #line 613 
    emg_9_emg_param_1_3 = emg_9_emg_param_1_3;
    #line 617 
    cpsw_get_eee(emg_9_container,emg_9_emg_param_1_3);
    #line 621 
    ldv_free((void *)emg_9_emg_param_1_3);
    #line 623 
    break;
    #line 625 
    case 35: 
             #line 625 
    ;
    #line 627 
    emg_9_emg_param_1_2 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 627 
    emg_9_emg_param_1_2 = emg_9_emg_param_1_2;
    #line 631 
    emg_wrapper_cpsw_get_drvinfo(emg_9_container,emg_9_emg_param_1_2);
    #line 635 
    ldv_free((void *)emg_9_emg_param_1_2);
    #line 637 
    break;
    #line 639 
    case 36: 
             #line 639 
    ;
    #line 641 
    emg_9_emg_param_1_1 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 641 
    emg_9_emg_param_1_1 = emg_9_emg_param_1_1;
    #line 645 
    cpsw_get_coalesce(emg_9_container,emg_9_emg_param_1_1);
    #line 649 
    ldv_free((void *)emg_9_emg_param_1_1);
    #line 651 
    break;
    #line 653 
    case 37: 
             #line 653 
    ;
    #line 655 
    emg_9_emg_param_1_0 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    #line 655 
    emg_9_emg_param_1_0 = emg_9_emg_param_1_0;
    #line 659 
    cpsw_get_channels(emg_9_container,emg_9_emg_param_1_0);
    #line 663 
    ldv_free((void *)emg_9_emg_param_1_0);
    #line 665 
    break;
    #line 667 
    case 38: 
             #line 667 
    ;
    #line 669 
    cpsw_ethtool_op_complete(emg_9_container);
    #line 671 
    break;
    #line 673 
    case 39: 
             #line 673 
    ;
    #line 675 
    emg_wrapper_cpsw_ethtool_op_begin(emg_9_container);
    #line 678 
    if (emg_repeat_cnt_call_9 > 0) {
      #line 679 
      emg_repeat_cnt_call_9 --;
      #line 681 
      goto emg_call_9;
    }
    else 
         #line 683 
         __VERIFIER_assume(0);
    #line 687 
    break;
    #line 689 
    case 40: 
             #line 689 
    ;
    #line 693 
    break;
    #line 695 
    default: 
             #line 695 
    ;
    #line 695 
    __VERIFIER_assume(0);
  }
  #line 698 
  return (void *)0;
}

#line 703  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
void *emg_platform_platform_instance_cpsw_driver(void *arg0)
{
  #line 706 
  struct platform_driver *emg_10_container;
  #line 707 
  struct pm_message *emg_10_emg_param_1_0;
  #line 708 
  int emg_10_probed;
  #line 709 
  struct platform_device *emg_10_resource;
  #line 710 
  int emg_repeat_cnt_main_10_0 = 1;
  #line 711 
  int emg_repeat_cnt_main_10_1 = 1;
  #line 712 
  int emg_repeat_cnt_call_10 = 1;
  #line 714 
  struct emg_struct_platform_instance_cpsw_driver_10 *data = (struct emg_struct_platform_instance_cpsw_driver_10 *)arg0;
  #line 718 
  emg_10_probed = 1;
  #line 719 
  emg_10_container = emg_alias_cpsw_driver;
  #line 720 
  emg_10_probed = 1;
  #line 722 
  __VERIFIER_assume(data->arg0 == emg_alias_cpsw_driver);
  #line 724 
  if (data != (struct emg_struct_platform_instance_cpsw_driver_10 *)0) {
    #line 725 
    emg_10_container = data->arg0;
    #line 726 
    ldv_free((void *)data);
  }
  #line 731 
  emg_10_resource = (struct platform_device *)ldv_xmalloc(1632UL);
  #line 732 
  emg_10_resource->id_entry = emg_10_container->id_table;
  #line 733 
  emg_10_resource->dev.platform_data = ldv_xmalloc_unknown_size(0UL);
  #line 737 
  goto emg_main_10;
  #line 741 
  return (void *)0;
  #line 744 
  emg_call_10: 
               #line 744 
  ;
  #line 745 
  if (ldv_undef_int() != 0) {
    #line 746 
    switch (ldv_undef_int()) {
      #line 747 
      case 0: 
              #line 747 
      ;
      #line 749 
      emg_10_emg_param_1_0 = (struct pm_message *)ldv_xmalloc_unknown_size(0UL);
      #line 749 
      emg_10_emg_param_1_0 = emg_10_emg_param_1_0;
      #line 753 
      if (emg_10_container->suspend != (int (*)(struct platform_device *, pm_message_t ))0) 
        #line 754 
        (*(emg_10_container->suspend))(emg_10_resource,*emg_10_emg_param_1_0);
      #line 759 
      ldv_free((void *)emg_10_emg_param_1_0);
      #line 763 
      if (emg_10_container->resume != (int (*)(struct platform_device *))0) 
        #line 764 
        (*(emg_10_container->resume))(emg_10_resource);
      #line 767 
      break;
      #line 769 
      case 1: 
              #line 769 
      ;
      #line 771 
      emg_dispatch_pm_register_10();
      #line 775 
      emg_dispatch_pm_deregister_10();
      #line 777 
      break;
      #line 779 
      case 2: 
              #line 779 
      ;
      #line 782 
      break;
      #line 784 
      default: 
               #line 784 
      ;
      #line 784 
      __VERIFIER_assume(0);
    }
    #line 787 
    if (emg_repeat_cnt_call_10 > 0) {
      #line 788 
      emg_repeat_cnt_call_10 --;
      #line 790 
      goto emg_call_10;
    }
    else 
         #line 792 
         __VERIFIER_assume(0);
  }
  else {
    #line 798 
    if (emg_10_container->shutdown != (void (*)(struct platform_device *))0) 
      #line 799 
      (*(emg_10_container->shutdown))(emg_10_resource);
    #line 804 
    emg_wrapper_cpsw_remove(emg_10_resource);
    #line 808 
    emg_10_probed = 1;
    #line 811 
    if (emg_repeat_cnt_main_10_0 > 0) {
      #line 812 
      emg_repeat_cnt_main_10_0 --;
      #line 814 
      goto emg_main_10;
    }
    else 
         #line 816 
         __VERIFIER_assume(0);
  }
  #line 822 
  return (void *)0;
  #line 825 
  emg_main_10: 
               #line 825 
  ;
  #line 826 
  if (ldv_undef_int() != 0) {
    #line 829 
    ldv_pre_probe();
    #line 833 
    emg_10_probed = emg_wrapper_cpsw_probe(emg_10_resource);
    #line 838 
    emg_10_probed = ldv_post_probe(emg_10_probed);
    #line 841 
    if (ldv_undef_int() != 0) {
      #line 843 
      __VERIFIER_assume(emg_10_probed == 0);
      #line 847 
      goto emg_call_10;
    }
    else {
      #line 852 
      __VERIFIER_assume(emg_10_probed != 0);
      #line 855 
      if (emg_repeat_cnt_main_10_1 > 0) {
        #line 856 
        emg_repeat_cnt_main_10_1 --;
        #line 858 
        goto emg_main_10;
      }
      else 
           #line 860 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 867 
       ldv_free((void *)emg_10_resource);
  #line 875 
  return (void *)0;
}

#line 880  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pm_pm_ops_scenario_cpsw_pm_ops(void *arg0)
{
  #line 883 
  struct device *emg_11_device;
  #line 884 
  struct dev_pm_ops *emg_11_pm_ops;
  #line 885 
  int emg_11_ret;
  #line 886 
  int emg_repeat_cnt_res_11 = 1;
  #line 887 
  int emg_repeat_cnt_rest_11 = 1;
  #line 888 
  int emg_repeat_cnt_fr_11 = 1;
  #line 889 
  int emg_repeat_cnt_resnoirq_11 = 1;
  #line 890 
  int emg_repeat_cnt_run_resume_11 = 1;
  #line 891 
  int emg_repeat_cnt_poff_11 = 1;
  #line 892 
  int emg_repeat_cnt_thlate_11 = 1;
  #line 893 
  int emg_repeat_cnt_fnoirq_11 = 1;
  #line 894 
  int emg_repeat_cnt_reste_11 = 1;
  #line 895 
  int emg_repeat_cnt_pno_irq_11 = 1;
  #line 896 
  int emg_repeat_cnt_reslate_11 = 1;
  #line 897 
  int emg_repeat_cnt_slate_11 = 1;
  #line 898 
  int emg_repeat_cnt_th_11 = 1;
  #line 899 
  int emg_repeat_cnt_sus_11 = 1;
  #line 900 
  int emg_repeat_cnt_flate_11 = 1;
  #line 901 
  int emg_repeat_cnt_no_irq_11 = 1;
  #line 902 
  int emg_repeat_cnt_restnoirq_11 = 1;
  #line 903 
  int emg_repeat_cnt_plate_11 = 1;
  #line 904 
  int emg_repeat_cnt_tnoirq_11 = 1;
  #line 907 
  emg_11_ret = ldv_undef_int();
  #line 908 
  emg_11_pm_ops = emg_alias_cpsw_pm_ops;
  #line 909 
  emg_11_ret = ldv_undef_int();
  #line 911 
  ldv_free(arg0);
  #line 915 
  goto emg_do_11;
  #line 919 
  return (void *)0;
  #line 922 
  emg_compl_11: 
                #line 922 
  ;
  #line 924 
  if (emg_11_pm_ops->complete != (void (*)(struct device *))0) 
                                                               #line 925 
                                                               (*(emg_11_pm_ops->complete))(emg_11_device);
  #line 933 
  return (void *)0;
  #line 936 
  emg_do_11: 
             #line 936 
  ;
  #line 937 
  switch (ldv_undef_int()) {
    #line 938 
    case 0: 
            #line 938 
    ;
    #line 940 
    __VERIFIER_assume((emg_runtime_enabled == 1 && emg_runtime_lowpower == 1) != 0);
    #line 944 
    goto emg_runt_11;
    #line 949 
    case 1: 
            #line 949 
    ;
    #line 951 
    goto emg_normal_11;
    #line 956 
    case 2: 
            #line 956 
    ;
    #line 960 
    break;
    #line 962 
    default: 
             #line 962 
    ;
    #line 962 
    __VERIFIER_assume(0);
  }
  #line 965 
  return (void *)0;
  #line 968 
  emg_flate_11: 
                #line 968 
  ;
  #line 970 
  if (emg_11_pm_ops->freeze_late != (int (*)(struct device *))0) 
                                                                 #line 971 
                                                                 emg_11_ret = (*(emg_11_pm_ops->freeze_late))(emg_11_device); else 
                                                                    #line 973 
                                                                    emg_11_ret = ldv_undef_int();
  #line 979 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 982 
  if (ldv_undef_int() != 0) {
    #line 984 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 988 
    goto emg_thlate_11;
  }
  else 
       #line 993 
       __VERIFIER_assume(emg_11_ret != 0);
  #line 997 
  if (emg_repeat_cnt_flate_11 > 0) {
    #line 998 
    emg_repeat_cnt_flate_11 --;
    #line 1000 
    goto emg_flate_11;
  }
  else 
       #line 1002 
       __VERIFIER_assume(0);
  #line 1007 
  return (void *)0;
  #line 1010 
  emg_fnoirq_11: 
                 #line 1010 
  ;
  #line 1012 
  if (emg_11_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
                                                                  #line 1013 
                                                                  emg_11_ret = (*(emg_11_pm_ops->freeze_noirq))(emg_11_device); else 
                                                                    #line 1015 
                                                                    emg_11_ret = ldv_undef_int();
  #line 1021 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1024 
  if (ldv_undef_int() != 0) {
    #line 1026 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1030 
    goto emg_tnoirq_11;
  }
  else 
       #line 1035 
       __VERIFIER_assume(emg_11_ret != 0);
  #line 1039 
  if (emg_repeat_cnt_fnoirq_11 > 0) {
    #line 1040 
    emg_repeat_cnt_fnoirq_11 --;
    #line 1042 
    goto emg_fnoirq_11;
  }
  else 
       #line 1044 
       __VERIFIER_assume(0);
  #line 1049 
  return (void *)0;
  #line 1052 
  emg_fr_11: 
             #line 1052 
  ;
  #line 1054 
  emg_11_ret = emg_wrapper_cpsw_suspend(emg_11_device);
  #line 1059 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1062 
  if (ldv_undef_int() != 0) {
    #line 1064 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1067 
    if (ldv_undef_int() != 0) 
                              #line 1069 
                              goto emg_fnoirq_11; else 
                                                       #line 1074 
                                                       goto emg_flate_11;
  }
  else {
    #line 1080 
    __VERIFIER_assume(emg_11_ret != 0);
    #line 1083 
    if (emg_repeat_cnt_fr_11 > 0) {
      #line 1084 
      emg_repeat_cnt_fr_11 --;
      #line 1086 
      goto emg_fr_11;
    }
    else 
         #line 1088 
         __VERIFIER_assume(0);
  }
  #line 1094 
  return (void *)0;
  #line 1097 
  emg_no_irq_11: 
                 #line 1097 
  ;
  #line 1099 
  if (emg_11_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
                                                                   #line 1100 
                                                                   emg_11_ret = (*(emg_11_pm_ops->suspend_noirq))(emg_11_device); else 
                                                                    #line 1102 
                                                                    emg_11_ret = ldv_undef_int();
  #line 1108 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1111 
  if (ldv_undef_int() != 0) {
    #line 1113 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1117 
    goto emg_resnoirq_11;
  }
  else 
       #line 1122 
       __VERIFIER_assume(emg_11_ret != 0);
  #line 1126 
  if (emg_repeat_cnt_no_irq_11 > 0) {
    #line 1127 
    emg_repeat_cnt_no_irq_11 --;
    #line 1129 
    goto emg_no_irq_11;
  }
  else 
       #line 1131 
       __VERIFIER_assume(0);
  #line 1136 
  return (void *)0;
  #line 1139 
  emg_normal_11: 
                 #line 1139 
  ;
  #line 1141 
  if (emg_11_pm_ops->prepare != (int (*)(struct device *))0) 
                                                             #line 1142 
                                                             emg_11_ret = (*(emg_11_pm_ops->prepare))(emg_11_device); else 
                                                                    #line 1144 
                                                                    emg_11_ret = ldv_undef_int();
  #line 1150 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1153 
  if (ldv_undef_int() != 0) {
    #line 1155 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1158 
    switch (ldv_undef_int()) {
      #line 1159 
      case 0: 
              #line 1159 
      ;
      #line 1161 
      goto emg_sus_11;
      #line 1166 
      case 1: 
              #line 1166 
      ;
      #line 1168 
      goto emg_fr_11;
      #line 1173 
      case 2: 
              #line 1173 
      ;
      #line 1175 
      goto emg_poff_11;
      #line 1180 
      default: 
               #line 1180 
      ;
      #line 1180 
      __VERIFIER_assume(0);
    }
  }
  else 
       #line 1184 
       __VERIFIER_assume(emg_11_ret != 0);
  #line 1192 
  return (void *)0;
  #line 1195 
  emg_plate_11: 
                #line 1195 
  ;
  #line 1197 
  if (emg_11_pm_ops->poweroff_late != (int (*)(struct device *))0) 
                                                                   #line 1198 
                                                                   emg_11_ret = (*(emg_11_pm_ops->poweroff_late))(emg_11_device); else 
                                                                    #line 1200 
                                                                    emg_11_ret = ldv_undef_int();
  #line 1206 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1209 
  if (ldv_undef_int() != 0) {
    #line 1211 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1215 
    goto emg_reste_11;
  }
  else 
       #line 1220 
       __VERIFIER_assume(emg_11_ret != 0);
  #line 1224 
  if (emg_repeat_cnt_plate_11 > 0) {
    #line 1225 
    emg_repeat_cnt_plate_11 --;
    #line 1227 
    goto emg_plate_11;
  }
  else 
       #line 1229 
       __VERIFIER_assume(0);
  #line 1234 
  return (void *)0;
  #line 1237 
  emg_pno_irq_11: 
                  #line 1237 
  ;
  #line 1239 
  if (emg_11_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
                                                                    #line 1240 
                                                                    emg_11_ret = (*(emg_11_pm_ops->poweroff_noirq))(emg_11_device); else 
                                                                    #line 1242 
                                                                    emg_11_ret = ldv_undef_int();
  #line 1248 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1251 
  if (ldv_undef_int() != 0) {
    #line 1253 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1257 
    goto emg_restnoirq_11;
  }
  else 
       #line 1262 
       __VERIFIER_assume(emg_11_ret != 0);
  #line 1266 
  if (emg_repeat_cnt_pno_irq_11 > 0) {
    #line 1267 
    emg_repeat_cnt_pno_irq_11 --;
    #line 1269 
    goto emg_pno_irq_11;
  }
  else 
       #line 1271 
       __VERIFIER_assume(0);
  #line 1276 
  return (void *)0;
  #line 1279 
  emg_poff_11: 
               #line 1279 
  ;
  #line 1281 
  emg_11_ret = emg_wrapper_cpsw_suspend(emg_11_device);
  #line 1286 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1289 
  if (ldv_undef_int() != 0) {
    #line 1291 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1294 
    if (ldv_undef_int() != 0) 
                              #line 1296 
                              goto emg_pno_irq_11; else 
                                                        #line 1301 
                                                        goto emg_plate_11;
  }
  else {
    #line 1307 
    __VERIFIER_assume(emg_11_ret != 0);
    #line 1310 
    if (emg_repeat_cnt_poff_11 > 0) {
      #line 1311 
      emg_repeat_cnt_poff_11 --;
      #line 1313 
      goto emg_poff_11;
    }
    else 
         #line 1315 
         __VERIFIER_assume(0);
  }
  #line 1321 
  return (void *)0;
  #line 1324 
  emg_res_11: 
              #line 1324 
  ;
  #line 1326 
  emg_11_ret = emg_wrapper_cpsw_resume(emg_11_device);
  #line 1331 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1334 
  if (ldv_undef_int() != 0) {
    #line 1336 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1340 
    goto emg_compl_11;
  }
  else {
    #line 1345 
    __VERIFIER_assume(emg_11_ret != 0);
    #line 1348 
    if (emg_repeat_cnt_res_11 > 0) {
      #line 1349 
      emg_repeat_cnt_res_11 --;
      #line 1351 
      goto emg_res_11;
    }
    else 
         #line 1353 
         __VERIFIER_assume(0);
  }
  #line 1359 
  return (void *)0;
  #line 1362 
  emg_reslate_11: 
                  #line 1362 
  ;
  #line 1364 
  if (emg_11_pm_ops->resume_early != (int (*)(struct device *))0) 
                                                                  #line 1365 
                                                                  emg_11_ret = (*(emg_11_pm_ops->resume_early))(emg_11_device); else 
                                                                    #line 1367 
                                                                    emg_11_ret = ldv_undef_int();
  #line 1373 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1376 
  if (ldv_undef_int() != 0) {
    #line 1378 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1382 
    goto emg_res_11;
  }
  else 
       #line 1387 
       __VERIFIER_assume(emg_11_ret != 0);
  #line 1391 
  if (emg_repeat_cnt_reslate_11 > 0) {
    #line 1392 
    emg_repeat_cnt_reslate_11 --;
    #line 1394 
    goto emg_reslate_11;
  }
  else 
       #line 1396 
       __VERIFIER_assume(0);
  #line 1401 
  return (void *)0;
  #line 1404 
  emg_resnoirq_11: 
                   #line 1404 
  ;
  #line 1406 
  if (emg_11_pm_ops->resume_noirq != (int (*)(struct device *))0) 
                                                                  #line 1407 
                                                                  emg_11_ret = (*(emg_11_pm_ops->resume_noirq))(emg_11_device); else 
                                                                    #line 1409 
                                                                    emg_11_ret = ldv_undef_int();
  #line 1415 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1418 
  if (ldv_undef_int() != 0) {
    #line 1420 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1424 
    goto emg_res_11;
  }
  else 
       #line 1429 
       __VERIFIER_assume(emg_11_ret != 0);
  #line 1433 
  if (emg_repeat_cnt_resnoirq_11 > 0) {
    #line 1434 
    emg_repeat_cnt_resnoirq_11 --;
    #line 1436 
    goto emg_resnoirq_11;
  }
  else 
       #line 1438 
       __VERIFIER_assume(0);
  #line 1443 
  return (void *)0;
  #line 1446 
  emg_rest_11: 
               #line 1446 
  ;
  #line 1448 
  emg_11_ret = emg_wrapper_cpsw_resume(emg_11_device);
  #line 1453 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1456 
  if (ldv_undef_int() != 0) {
    #line 1458 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1462 
    goto emg_compl_11;
  }
  else {
    #line 1467 
    __VERIFIER_assume(emg_11_ret != 0);
    #line 1470 
    if (emg_repeat_cnt_rest_11 > 0) {
      #line 1471 
      emg_repeat_cnt_rest_11 --;
      #line 1473 
      goto emg_rest_11;
    }
    else 
         #line 1475 
         __VERIFIER_assume(0);
  }
  #line 1481 
  return (void *)0;
  #line 1484 
  emg_reste_11: 
                #line 1484 
  ;
  #line 1486 
  if (emg_11_pm_ops->restore_early != (int (*)(struct device *))0) 
                                                                   #line 1487 
                                                                   emg_11_ret = (*(emg_11_pm_ops->restore_early))(emg_11_device); else 
                                                                    #line 1489 
                                                                    emg_11_ret = ldv_undef_int();
  #line 1495 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1498 
  if (ldv_undef_int() != 0) {
    #line 1500 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1504 
    goto emg_rest_11;
  }
  else 
       #line 1509 
       __VERIFIER_assume(emg_11_ret != 0);
  #line 1513 
  if (emg_repeat_cnt_reste_11 > 0) {
    #line 1514 
    emg_repeat_cnt_reste_11 --;
    #line 1516 
    goto emg_reste_11;
  }
  else 
       #line 1518 
       __VERIFIER_assume(0);
  #line 1523 
  return (void *)0;
  #line 1526 
  emg_restnoirq_11: 
                    #line 1526 
  ;
  #line 1528 
  if (emg_11_pm_ops->restore_noirq != (int (*)(struct device *))0) 
                                                                   #line 1529 
                                                                   emg_11_ret = (*(emg_11_pm_ops->restore_noirq))(emg_11_device); else 
                                                                    #line 1531 
                                                                    emg_11_ret = ldv_undef_int();
  #line 1537 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1540 
  if (ldv_undef_int() != 0) {
    #line 1542 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1546 
    goto emg_rest_11;
  }
  else 
       #line 1551 
       __VERIFIER_assume(emg_11_ret != 0);
  #line 1555 
  if (emg_repeat_cnt_restnoirq_11 > 0) {
    #line 1556 
    emg_repeat_cnt_restnoirq_11 --;
    #line 1558 
    goto emg_restnoirq_11;
  }
  else 
       #line 1560 
       __VERIFIER_assume(0);
  #line 1565 
  return (void *)0;
  #line 1568 
  emg_run_resume_11: 
                     #line 1568 
  ;
  #line 1570 
  if (emg_11_pm_ops->runtime_resume != (int (*)(struct device *))0) 
                                                                    #line 1571 
                                                                    emg_11_ret = (*(emg_11_pm_ops->runtime_resume))(emg_11_device); else 
                                                                    #line 1573 
                                                                    emg_11_ret = ldv_undef_int();
  #line 1579 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1580 
  if (emg_11_ret != 0) 
                       #line 1581 
                       emg_runtime_lowpower = 0;
  #line 1584 
  if (ldv_undef_int() != 0) 
                            #line 1586 
                            __VERIFIER_assume(emg_11_ret == 0);
  else {
    #line 1590 
    __VERIFIER_assume(emg_11_ret != 0);
    #line 1593 
    if (emg_repeat_cnt_run_resume_11 > 0) {
      #line 1594 
      emg_repeat_cnt_run_resume_11 --;
      #line 1596 
      goto emg_run_resume_11;
    }
    else 
         #line 1598 
         __VERIFIER_assume(0);
  }
  #line 1608 
  return (void *)0;
  #line 1611 
  emg_runt_11: 
               #line 1611 
  ;
  #line 1612 
  if (ldv_undef_int() != 0) {
    #line 1614 
    if (emg_11_pm_ops->runtime_idle != (int (*)(struct device *))0) 
                                                                    #line 1615 
                                                                    emg_11_ret = (*(emg_11_pm_ops->runtime_idle))(emg_11_device); else 
                                                                    #line 1617 
                                                                    emg_11_ret = ldv_undef_int();
    #line 1623 
    emg_11_ret = ldv_post_probe(emg_11_ret);
  }
  else {
    #line 1627 
    if (emg_11_pm_ops->runtime_suspend != (int (*)(struct device *))0) 
      #line 1628 
      emg_11_ret = (*(emg_11_pm_ops->runtime_suspend))(emg_11_device); else 
                                                                    #line 1630 
                                                                    emg_11_ret = ldv_undef_int();
    #line 1636 
    emg_11_ret = ldv_post_probe(emg_11_ret);
    #line 1637 
    if (emg_11_ret != 0) 
                         #line 1638 
                         emg_runtime_lowpower = 1;
    #line 1641 
    if (ldv_undef_int() != 0) {
      #line 1643 
      __VERIFIER_assume(emg_11_ret == 0);
      #line 1647 
      goto emg_run_resume_11;
    }
    else 
         #line 1652 
         __VERIFIER_assume(emg_11_ret != 0);
  }
  #line 1661 
  return (void *)0;
  #line 1664 
  emg_slate_11: 
                #line 1664 
  ;
  #line 1666 
  if (emg_11_pm_ops->suspend_late != (int (*)(struct device *))0) 
                                                                  #line 1667 
                                                                  emg_11_ret = (*(emg_11_pm_ops->suspend_late))(emg_11_device); else 
                                                                    #line 1669 
                                                                    emg_11_ret = ldv_undef_int();
  #line 1675 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1678 
  if (ldv_undef_int() != 0) {
    #line 1680 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1684 
    goto emg_reslate_11;
  }
  else 
       #line 1689 
       __VERIFIER_assume(emg_11_ret != 0);
  #line 1693 
  if (emg_repeat_cnt_slate_11 > 0) {
    #line 1694 
    emg_repeat_cnt_slate_11 --;
    #line 1696 
    goto emg_slate_11;
  }
  else 
       #line 1698 
       __VERIFIER_assume(0);
  #line 1703 
  return (void *)0;
  #line 1706 
  emg_sus_11: 
              #line 1706 
  ;
  #line 1708 
  emg_11_ret = emg_wrapper_cpsw_suspend(emg_11_device);
  #line 1713 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1716 
  if (ldv_undef_int() != 0) {
    #line 1718 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1721 
    if (ldv_undef_int() != 0) 
                              #line 1723 
                              goto emg_no_irq_11; else 
                                                       #line 1728 
                                                       goto emg_slate_11;
  }
  else {
    #line 1734 
    __VERIFIER_assume(emg_11_ret != 0);
    #line 1737 
    if (emg_repeat_cnt_sus_11 > 0) {
      #line 1738 
      emg_repeat_cnt_sus_11 --;
      #line 1740 
      goto emg_sus_11;
    }
    else 
         #line 1742 
         __VERIFIER_assume(0);
  }
  #line 1748 
  return (void *)0;
  #line 1751 
  emg_th_11: 
             #line 1751 
  ;
  #line 1753 
  emg_11_ret = emg_wrapper_cpsw_resume(emg_11_device);
  #line 1758 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1761 
  if (ldv_undef_int() != 0) {
    #line 1763 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1767 
    goto emg_compl_11;
  }
  else {
    #line 1772 
    __VERIFIER_assume(emg_11_ret != 0);
    #line 1775 
    if (emg_repeat_cnt_th_11 > 0) {
      #line 1776 
      emg_repeat_cnt_th_11 --;
      #line 1778 
      goto emg_th_11;
    }
    else 
         #line 1780 
         __VERIFIER_assume(0);
  }
  #line 1786 
  return (void *)0;
  #line 1789 
  emg_thlate_11: 
                 #line 1789 
  ;
  #line 1791 
  if (emg_11_pm_ops->thaw_early != (int (*)(struct device *))0) 
                                                                #line 1792 
                                                                emg_11_ret = (*(emg_11_pm_ops->thaw_early))(emg_11_device); else 
                                                                    #line 1794 
                                                                    emg_11_ret = ldv_undef_int();
  #line 1800 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1803 
  if (ldv_undef_int() != 0) {
    #line 1805 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1809 
    goto emg_th_11;
  }
  else 
       #line 1814 
       __VERIFIER_assume(emg_11_ret != 0);
  #line 1818 
  if (emg_repeat_cnt_thlate_11 > 0) {
    #line 1819 
    emg_repeat_cnt_thlate_11 --;
    #line 1821 
    goto emg_thlate_11;
  }
  else 
       #line 1823 
       __VERIFIER_assume(0);
  #line 1828 
  return (void *)0;
  #line 1831 
  emg_tnoirq_11: 
                 #line 1831 
  ;
  #line 1833 
  if (emg_11_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
                                                                #line 1834 
                                                                emg_11_ret = (*(emg_11_pm_ops->thaw_noirq))(emg_11_device); else 
                                                                    #line 1836 
                                                                    emg_11_ret = ldv_undef_int();
  #line 1842 
  emg_11_ret = ldv_post_probe(emg_11_ret);
  #line 1845 
  if (ldv_undef_int() != 0) {
    #line 1847 
    __VERIFIER_assume(emg_11_ret == 0);
    #line 1851 
    goto emg_th_11;
  }
  else 
       #line 1856 
       __VERIFIER_assume(emg_11_ret != 0);
  #line 1860 
  if (emg_repeat_cnt_tnoirq_11 > 0) {
    #line 1861 
    emg_repeat_cnt_tnoirq_11 --;
    #line 1863 
    goto emg_tnoirq_11;
  }
  else 
       #line 1865 
       __VERIFIER_assume(0);
  #line 1870 
  return (void *)0;
}

#line 1875  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1)
{
  #line 1878 
  struct platform_driver *emg_2_platform_driver;
  #line 1880 
  emg_2_platform_driver = emg_alias_cpsw_driver;
  #line 1881 
  if (ldv_undef_int() != 0) {
    #line 1883 
    emg_2_platform_driver = arg0;
    #line 1887 
    emg_dispatch_register_2(emg_2_platform_driver);
    #line 1891 
    return 0;
  }
  else {
    #line 1895 
    return ldv_undef_int_negative();
  }
}

#line 1903  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 1906 
  struct timer_list *emg_3_timer_list;
  #line 1909 
  emg_3_timer_list = arg0;
  #line 1910 
  ;
  #line 1910 
  return 0;
}

#line 1920  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
void emg_platform_driver_unregister(struct platform_driver *arg0)
{
  #line 1923 
  struct platform_driver *emg_4_platform_driver;
  #line 1925 
  emg_4_platform_driver = emg_alias_cpsw_driver;
  #line 1927 
  emg_4_platform_driver = arg0;
  #line 1931 
  emg_dispatch_deregister_4(emg_4_platform_driver);
  #line 1934 
  return;
}

#line 1939  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
void emg_pm_runtime_disable(struct device *arg0)
{
  #line 1942 
  struct device *emg_5_device;
  #line 1943 
  struct dev_pm_ops *emg_5_pm_ops;
  #line 1944 
  int emg_5_ret;
  #line 1947 
  emg_5_ret = ldv_undef_int();
  #line 1948 
  emg_5_pm_ops = emg_alias_cpsw_pm_ops;
  #line 1949 
  emg_5_ret = ldv_undef_int();
  #line 1951 
  emg_5_device = arg0;
  #line 1952 
  emg_runtime_enabled = 0;
  #line 1955 
  if (ldv_undef_int() != 0) {
    #line 1957 
    __VERIFIER_assume(emg_runtime_lowpower == 0);
    #line 1961 
    if (emg_5_pm_ops->runtime_suspend != (int (*)(struct device *))0) 
      #line 1962 
      emg_5_ret = (*(emg_5_pm_ops->runtime_suspend))(emg_5_device); else 
                                                                    #line 1964 
                                                                    emg_5_ret = ldv_undef_int();
    #line 1970 
    emg_5_ret = ldv_post_probe(emg_5_ret);
    #line 1974 
    if (emg_5_ret == 0) 
                        #line 1975 
                        emg_runtime_lowpower = 1;
  }
  else 
       #line 1980 
       __VERIFIER_assume(emg_runtime_lowpower == 1);
  #line 1984 
  return;
}

#line 1989  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
void emg_pm_runtime_enable(struct device *arg0)
{
  #line 1992 
  struct device *emg_6_device;
  #line 1993 
  struct dev_pm_ops *emg_6_pm_ops;
  #line 1994 
  int emg_6_ret;
  #line 1997 
  emg_6_ret = ldv_undef_int();
  #line 1998 
  emg_6_pm_ops = emg_alias_cpsw_pm_ops;
  #line 1999 
  emg_6_ret = ldv_undef_int();
  #line 2001 
  emg_6_device = arg0;
  #line 2004 
  if (ldv_undef_int() != 0) {
    #line 2006 
    __VERIFIER_assume(emg_runtime_lowpower == 1);
    #line 2010 
    if (emg_6_pm_ops->runtime_resume != (int (*)(struct device *))0) 
      #line 2011 
      emg_6_ret = (*(emg_6_pm_ops->runtime_resume))(emg_6_device); else 
                                                                    #line 2013 
                                                                    emg_6_ret = ldv_undef_int();
    #line 2019 
    emg_6_ret = ldv_post_probe(emg_6_ret);
    #line 2023 
    if (emg_6_ret == 0) 
                        #line 2024 
                        emg_runtime_lowpower = 0;
  }
  else 
       #line 2029 
       __VERIFIER_assume(emg_runtime_lowpower == 0);
  #line 2033 
  return;
}

#line 2038  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 2041 
  struct net_device *emg_7_netdev;
  #line 2042 
  int emg_7_ret;
  #line 2045 
  emg_7_ret = ldv_undef_int();
  #line 2046 
  emg_7_ret = ldv_undef_int();
  #line 2047 
  if (ldv_undef_int() != 0) {
    #line 2049 
    emg_7_netdev = arg0;
    #line 2053 
    emg_7_ret = emg_wrapper_cpsw_ndo_open(emg_7_netdev);
    #line 2056 
    if (ldv_undef_int() != 0) {
      #line 2058 
      __VERIFIER_assume(emg_7_ret == 0);
      #line 2062 
      emg_dispatch_register_7(emg_7_netdev);
      #line 2066 
      return 0;
    }
    else {
      #line 2070 
      __VERIFIER_assume(emg_7_ret != 0);
      #line 2071 
      ldv_failed_register_netdev();
      #line 2072 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 2077 
    ldv_failed_register_netdev();
    #line 2078 
    return ldv_undef_int_negative();
  }
}

#line 2086  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 2089 
  struct net_device *emg_8_netdev;
  #line 2092 
  emg_8_netdev = arg0;
  #line 2096 
  emg_wrapper_cpsw_ndo_stop(emg_8_netdev);
  #line 2100 
  emg_dispatch_deregister_8(emg_8_netdev);
  #line 2103 
  return;
}

#line 2108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 2111 
  int emg_1_ret;
  #line 2114 
  emg_1_ret = emg_cpsw_driver_init();
  #line 2115 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 2118 
  if (ldv_undef_int() != 0) {
    #line 2120 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 2124 
    emg_cpsw_driver_exit();
  }
  else 
       #line 2128 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 2132 
  return (void *)0;
}

#line 2137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/ti/ti_cpsw.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 2139 
  ldv_initialize();
  #line 2141 
  emg_entry_point_insmod((void *)0);
  #line 2143 
  return 0;
}

